{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/MasterChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./library/SafeMath.sol\\\";\\nimport \\\"./library/IBEP20.sol\\\";\\nimport \\\"./library/SafeBEP20.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./library/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./StrikeX.sol\\\";\\n\\ncontract MasterChefV2 is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeBEP20 for IBEP20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IBEP20 lpToken;           // Address of LP token contract.\\n        uint256 allocPoint;       // How many allocation points assigned to this pool. StrikeXs to distribute per block.\\n        uint256 lastRewardBlock;  // Last block number that StrikeXs distribution occurs.\\n        uint256 accStrikePerShare;   // Accumulated StrikeXs per share, times 1e12. See below.\\n        uint256 totalLp;            // Total Token in Pool\\n    }\\n\\n    // The STRIKEX TOKEN!\\n    StrikeX public strike;\\n    // STRIKEX tokens created per block.\\n    uint256 public strikePerBlock;\\n    // Bonus muliplier for early StrikeX makers.\\n    uint256 public constant BONUS_MULTIPLIER = 1;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n    // The block number when StrikeX mining starts.\\n    uint256 public startBlock;\\n    // Total Strike in Strike Pools (can be multiple pools)\\n    uint256 public totalStrikeInPools = 0;\\n    uint256 public verison = 32;       // version of contract\\n    mapping(address => bool) private _isBlockList; // wallets block\\n    bool public isFarming = true;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    constructor(\\n        StrikeX _strike,\\n        uint256 _strikePerBlock,\\n        uint256 _startBlock\\n    ) {\\n        strike = _strike;\\n        strikePerBlock = _strikePerBlock;\\n        startBlock = _startBlock;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    mapping(IBEP20 => bool) public poolExistence;\\n    modifier nonDuplicated(IBEP20 _lpToken) {\\n        require(poolExistence[_lpToken] == false, \\\"nonDuplicated: duplicated\\\");\\n        _;\\n    }\\n\\n    //actual StrikeX lef in MasterChef can be used in rewards, must excluding all in Strike pools\\n    //this function is for safety check only not used anywhere\\n    function remainRewards() external view returns (uint256) {\\n        return strike.balanceOf(address(this)).sub(totalStrikeInPools);\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    function add(uint256 _allocPoint, IBEP20 _lpToken, bool _withUpdate) public onlyOwner nonDuplicated(_lpToken) {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolExistence[_lpToken] = true;\\n        poolInfo.push(PoolInfo({\\n            lpToken : _lpToken,\\n            allocPoint : _allocPoint,\\n            lastRewardBlock : lastRewardBlock,\\n            accStrikePerShare : 0,\\n            totalLp : 0\\n        }));\\n    }\\n\\n    // Update the given pool's StrikeX allocation point and deposit fee. Can only be called by the owner.    \\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner validatePoolByPid(_pid) {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\\n    }\\n\\n    modifier validatePoolByPid(uint256 _pid) {\\n       require(_pid < poolInfo.length, \\\"Pool does not exist\\\");\\n       _;\\n    }\\n\\n    // View function to see pending StrikeX on frontend.\\n    function pendingStrike(uint256 _pid, address _user) external validatePoolByPid(_pid) view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accStrikePerShare = pool.accStrikePerShare;        \\n        uint256 lpSupply = pool.totalLp;\\n        \\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 strikeReward = multiplier.mul(strikePerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n            accStrikePerShare = accStrikePerShare.add(strikeReward.mul(1e12).div(lpSupply));\\n        }\\n\\n        uint256 pending = user.amount.mul(accStrikePerShare).div(1e12).sub(user.rewardDebt);\\n        return pending;\\n    }\\n\\n    // Update reward variables for all pools.\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.totalLp;\\n        if (lpSupply == 0 || pool.allocPoint == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 strikeReward = multiplier.mul(strikePerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n        pool.accStrikePerShare = pool.accStrikePerShare.add(strikeReward.mul(1e12).div(lpSupply));\\n        pool.lastRewardBlock = block.number;\\n    }\\n    \\n\\n    // Deposit LP tokens to MasterChef for StrikeX allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n\\n            uint256 pending = user.amount.mul(pool.accStrikePerShare).div(1e12).sub(user.rewardDebt);\\n\\n            if(_isBlockList[msg.sender] == true) {\\n                pending = 0;\\n            }\\n            if (pending > 0) {\\n\\n                if (address(pool.lpToken) == address(strike)) {\\n                    safeStrikeTransfer(msg.sender, pending);\\n                } else {\\n                    if(isFarming == true) {\\n                        safeStrikeTransfer(msg.sender, pending);\\n                    }\\n                }\\n            }\\n        }\\n        \\n        if (_amount > 0) {\\n            uint256 beforeDeposit = pool.lpToken.balanceOf(address(this));\\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n\\n            uint256 afterDeposit = pool.lpToken.balanceOf(address(this));\\n            _amount = afterDeposit.sub(beforeDeposit);\\n\\n            user.amount = user.amount.add(_amount);\\n            pool.totalLp = pool.totalLp.add(_amount);\\n\\n            if (address(pool.lpToken) == address(strike)) {\\n                totalStrikeInPools = totalStrikeInPools.add(_amount);\\n            }     \\n        }\\n        \\n        user.rewardDebt = user.amount.mul(pool.accStrikePerShare).div(1e12);\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant validatePoolByPid(_pid){\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, \\\"withdraw: not good\\\");\\n        updatePool(_pid);\\n\\n        uint256 pending = user.amount.mul(pool.accStrikePerShare).div(1e12).sub(user.rewardDebt);\\n\\n        if(_isBlockList[msg.sender] == true) {\\n            pending = 0;\\n        }\\n        if (pending > 0) {\\n\\n            if (address(pool.lpToken) == address(strike)) {\\n                safeStrikeTransfer(msg.sender, pending);\\n            } else {\\n                if(isFarming == true) {\\n                    safeStrikeTransfer(msg.sender, pending);\\n                }\\n            }\\n        }\\n        \\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.totalLp = pool.totalLp.sub(_amount);\\n\\n            if (address(pool.lpToken) == address(strike)) {\\n                totalStrikeInPools = totalStrikeInPools.sub(_amount);\\n            }\\n\\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n        }\\n        \\n        user.rewardDebt = user.amount.mul(pool.accStrikePerShare).div(1e12);\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant validatePoolByPid(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        pool.totalLp = pool.totalLp.sub(amount);\\n\\n        if (address(pool.lpToken) == address(strike)) {\\n            totalStrikeInPools = totalStrikeInPools.sub(amount);\\n        }\\n\\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    // Safe strikex transfer function, just in case if rounding error causes pool to not have enough StrikeXs.\\n    function safeStrikeTransfer(address _to, uint256 _amount) internal {\\n        if (strike.balanceOf(address(this)) > totalStrikeInPools) {\\n            uint256 strikeBal = strike.balanceOf(address(this)).sub(totalStrikeInPools);\\n            bool transferSuccess = false;\\n            if (_amount > strikeBal) {            \\n                transferSuccess = strike.transfer(_to, strikeBal);\\n            }\\n            else {            \\n                transferSuccess = strike.transfer(_to, _amount);\\n            }\\n            require(transferSuccess, \\\"safeStrikeTransfer: transfer failed\\\");\\n        }\\n        \\n    }\\n\\n    // emergency withdraw\\n    function withdrawRewardStrike(uint256 amount) external onlyOwner  {        \\n        require(strike.balanceOf(address(this)) >= totalStrikeInPools + amount, \\\"StrikeRewardWithdraw: withdraw failed\\\");\\n        strike.transfer(msg.sender, amount);\\n    }\\n\\n    // block user\\n    function addBlockLst(address useraddr) external onlyOwner{\\n        _isBlockList[useraddr] = true;\\n    }\\n\\n    // unblock user\\n    function removeBlockLst(address useraddr) external onlyOwner{\\n        _isBlockList[useraddr] = false;\\n    }\\n\\n    // Enable farm if isFarming is true , Disable if it is false\\n    function EnableFarming(bool value) external onlyOwner{\\n        isFarming = value;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n    address private _previousOwner;\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n    \\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/StrikeX.sol\": {\r\n      \"content\": \"/*\\r\\n* Tokenomics\\r\\n*\\r\\n*  Name  - StrikeX\\r\\n*  Symbol - STRX \\r\\n*  MAX Supply -  1 billion\\r\\n*  Selling tax 3%  - only applicable for 6 months (0% thereafter)\\r\\n*  3% selling tax distribution\\r\\n    - 1.5% to liquidity pool \\r\\n    - 1% to team wallet (sent as BNB)\\r\\n    - 0.5% to \u2018buyback\u2019 wallet (sent as BNB)\\r\\n    - Anti-dump Max Sell no more than 0.5% of supply (5M) over 24 hours \u2013 only applicable for 6 months (0% thereafter)\\r\\n*/\\r\\n\\r\\n//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./library/SafeMath.sol\\\";\\r\\nimport \\\"./library/IBEP20.sol\\\";\\r\\n\\r\\nimport \\\"./interface/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./interface/IUniswapV2Router02.sol\\\";\\r\\n\\r\\ncontract StrikeX is Context, IBEP20, Ownable {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  mapping (address => uint256) private _balances;\\r\\n  mapping (address => mapping (address => uint256)) private _allowances;\\r\\n  mapping(address => bool) private _isExcludedFromFee; // wallets excluded from fee\\r\\n  mapping (address => uint256) private _tokenSold;\\r\\n\\r\\n  mapping (address => uint256) private _startTime;\\r\\n  mapping (address => uint256) private _blockTime;\\r\\n\\r\\n  uint256 public _maxSoldAmount;\\r\\n  uint256 private _totalSupply;\\r\\n  uint8 private _decimals;\\r\\n  string private _symbol;\\r\\n  string private _name;  \\r\\n  uint256 public _taxFee;\\r\\n  uint256 public _minBalance;\\r\\n\\r\\n  address public uniswapV2Pair;\\r\\n  address payable public _teamWallet;\\r\\n  address payable public _buybackWallet;\\r\\n\\r\\n  bool public inSwap = false;\\r\\n  bool public swapEnabled = true;\\r\\n\\r\\n  IUniswapV2Router02 public uniswapV2Router; // pancakeswap v2 router\\r\\n\\r\\n  modifier lockTheSwap {\\r\\n    inSwap = true;\\r\\n    _;\\r\\n    inSwap = false;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Initialize params for tokenomics\\r\\n   */\\r\\n\\r\\n  constructor() {\\r\\n    _name = unicode\\\"StrikeX\\\";\\r\\n    _symbol = \\\"STRX\\\";\\r\\n    _decimals = 18;\\r\\n    _totalSupply = 10**9 * 10**18;\\r\\n    _balances[msg.sender] = _totalSupply;    \\r\\n    _taxFee = 300;\\r\\n    _minBalance = 10 * 10**18;\\r\\n    _maxSoldAmount = 5 * 10**6 * 10**18;\\r\\n\\r\\n    _teamWallet = payable(0xB68D389bf73Ee9fdACb0df1fbf69CD20151F1F41); \\r\\n    _buybackWallet = payable(0x7E48d044C6D58F71bde05A9B7Af560a5EB99f27C);\\r\\n\\r\\n    // BSC MainNet router\\r\\n    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n    uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\\r\\n    uniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n    // BSC MainNet router\\r\\n    //0x10ED43C718714eb63d5aA57B78B54704E256024E\\r\\n\\r\\n    // BSC TestNet router\\r\\n    // 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\\r\\n\\r\\n    _isExcludedFromFee[owner()] = true;\\r\\n    _isExcludedFromFee[address(this)] = true;\\r\\n    _isExcludedFromFee[_teamWallet] = true;\\r\\n    _isExcludedFromFee[_buybackWallet] = true;\\r\\n\\r\\n    emit Transfer(address(0), msg.sender, _totalSupply);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the bep token owner.\\r\\n   */\\r\\n\\r\\n  function getOwner() external override view returns (address) {\\r\\n    return owner();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the token decimals.\\r\\n   */\\r\\n\\r\\n  function decimals() external override view returns (uint8) {\\r\\n    return _decimals;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the token symbol.\\r\\n   */\\r\\n\\r\\n  function symbol() external override view returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Returns the token name.\\r\\n  */\\r\\n\\r\\n  function name() external override view returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-totalSupply}.\\r\\n   */\\r\\n\\r\\n  function totalSupply() external override view returns (uint256) {\\r\\n    return _totalSupply;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-balanceOf}.\\r\\n   */\\r\\n\\r\\n  //function balanceOf(address account) external override view returns (uint256) {\\r\\n  function balanceOf(address account) public view override returns (uint256) {\\r\\n    return _balances[account];\\r\\n  }\\r\\n\\r\\n  function excludeFromFee(address account) public onlyOwner {\\r\\n    _isExcludedFromFee[account] = true;\\r\\n  }\\r\\n  \\r\\n  function includeInFee(address account) public onlyOwner {\\r\\n    _isExcludedFromFee[account] = false;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-transfer}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `recipient` cannot be the zero address.\\r\\n   * - the caller must have a balance of at least `amount`.\\r\\n   */\\r\\n\\r\\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n    _transfer(_msgSender(), recipient, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-allowance}.\\r\\n   */\\r\\n\\r\\n  function allowance(address owner, address spender) external view override returns (uint256) {\\r\\n    return _allowances[owner][spender];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-approve}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n   \\r\\n  function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n    _approve(_msgSender(), spender, amount);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {BEP20-transferFrom}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n   * required by the EIP. See the note at the beginning of {BEP20};\\r\\n   *\\r\\n   * Requirements:\\r\\n   * - `sender` and `recipient` cannot be the zero address.\\r\\n   * - `sender` must have a balance of at least `amount`.\\r\\n   * - the caller must have allowance for `sender`'s tokens of at least\\r\\n   * `amount`.\\r\\n   */\\r\\n\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n    _transfer(sender, recipient, amount);\\r\\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"BEP20: transfer amount exceeds allowance\\\"));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n   *\\r\\n   * This is an alternative to {approve} that can be used as a mitigation for\\r\\n   * problems described in {BEP20-approve}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n\\r\\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n   *\\r\\n   * This is an alternative to {approve} that can be used as a mitigation for\\r\\n   * problems described in {BEP20-approve}.\\r\\n   *\\r\\n   * Emits an {Approval} event indicating the updated allowance.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `spender` cannot be the zero address.\\r\\n   * - `spender` must have allowance for the caller of at least\\r\\n   * `subtractedValue`.\\r\\n   */\\r\\n\\r\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"BEP20: decreased allowance below zero\\\"));\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n   *\\r\\n   * This is internal function is equivalent to {transfer}\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `sender` cannot be the zero address.\\r\\n   * - `recipient` cannot be the zero address.\\r\\n   * - `sender` must have a balance of at least `amount`.\\r\\n   */\\r\\n\\r\\n  function _transfer(address from, address to, uint256 amount) internal {\\r\\n\\r\\n    require(from != address(0), \\\"BEP20: transfer from the zero address\\\");\\r\\n    require(to != address(0), \\\"BEP20: transfer to the zero address\\\");\\r\\n    require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n\\r\\n    bool takeFee = true;\\r\\n\\r\\n    if (!inSwap && swapEnabled && to == uniswapV2Pair){      \\r\\n      // limit max sold\\r\\n      if(_tokenSold[from] == 0){\\r\\n        _startTime[from] = block.timestamp;\\r\\n      }\\r\\n\\r\\n      _tokenSold[from] = _tokenSold[from] + amount;\\r\\n\\r\\n      if( block.timestamp < _startTime[from] + (1 days)){\\r\\n          require(_tokenSold[from] <= _maxSoldAmount, \\\"Sold amount exceeds the maxTxAmount.\\\");\\r\\n      }else{\\r\\n          _startTime[from] = block.timestamp;\\r\\n          _tokenSold[from] = 0;\\r\\n      }\\r\\n\\r\\n      // transfer tokens\\r\\n      uint256 strikeBalance = balanceOf(address(this));\\r\\n      if(strikeBalance > _minBalance){                    \\r\\n        transferTokens(strikeBalance);\\r\\n      }\\r\\n      \\r\\n      if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\r\\n        takeFee = false;\\r\\n      }\\r\\n    } else {\\r\\n      takeFee = false;\\r\\n    }\\r\\n\\r\\n    _tokenTransfer(from, to, amount, takeFee);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.   \\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `owner` cannot be the zero address.\\r\\n   * - `spender` cannot be the zero address.\\r\\n   */\\r\\n\\r\\n  function _approve(address owner, address spender, uint256 amount) internal {\\r\\n    require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\r\\n    require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\r\\n\\r\\n    _allowances[owner][spender] = amount;\\r\\n    emit Approval(owner, spender, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev transfer tokens to liqudity, team wallet and buyback wallet.\\r\\n   */\\r\\n\\r\\n  function transferTokens(uint256 tokenBalance) private lockTheSwap {\\r\\n    uint256 liquidityTokens = tokenBalance.div(4); // 0.75%\\r\\n    uint256 otherBNBTokens = tokenBalance - liquidityTokens; // 2.25%\\r\\n\\r\\n    uint256 initialBalance = address(this).balance;\\r\\n    swapTokensForEth(otherBNBTokens);\\r\\n\\r\\n    uint256 newBalance = address(this).balance.sub(initialBalance);\\r\\n    uint256 liquidityCapacity = newBalance.div(3);\\r\\n    addLiqudity(liquidityTokens, liquidityCapacity);\\r\\n\\r\\n    uint256 teamCapacity = newBalance - liquidityCapacity;    \\r\\n    uint256 teamBNB = teamCapacity.mul(2).div(3);\\r\\n    _teamWallet.transfer(teamBNB);\\r\\n\\r\\n    uint256 buybackBNB = teamCapacity - teamBNB;\\r\\n    _buybackWallet.transfer(buybackBNB);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Swap tokens from strike to bnb\\r\\n   */\\r\\n\\r\\n  function swapTokensForEth(uint256 tokenAmount) private{\\r\\n    address[] memory path = new address[](2);\\r\\n    path[0] = address(this);\\r\\n    path[1] = uniswapV2Router.WETH();\\r\\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n    uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Add strike token and bnb as same ratio on pancakeswap router\\r\\n   */\\r\\n\\r\\n  function addLiqudity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n    // approve token transfer to cover all possible scenarios\\r\\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n\\r\\n    // add amount to contract\\r\\n    uniswapV2Router.addLiquidityETH{value: ethAmount}(\\r\\n        address(this),\\r\\n        tokenAmount,\\r\\n        0, // slippage is unavoidable\\r\\n        0, // slippage is unavoidable\\r\\n        owner(),\\r\\n        block.timestamp\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev the Owner can swap regarding the strike token's amount of contract balance\\r\\n    * this is for manual function\\r\\n   */\\r\\n\\r\\n  function contractBalanceSwap() external onlyOwner{\\r\\n      uint256 contractBalance = balanceOf(address(this));\\r\\n      swapTokensForEth(contractBalance);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev the Owner can send regarding the strike token's amount of contract balance\\r\\n    * this is for manual function\\r\\n    * we need to remain 0.1BNB in contract balance for swap and transfer fees.\\r\\n   */\\r\\n\\r\\n  function contractBalanceSend(uint256 amount, address payable _destAddr) external onlyOwner{\\r\\n    uint256 contractETHBalance = address(this).balance - 1 * 10**17;\\r\\n    if(contractETHBalance > amount){\\r\\n      _destAddr.transfer(amount);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev remove all fees\\r\\n   */\\r\\n\\r\\n  function removeAllFee() private {\\r\\n    if (_taxFee == 0) return;\\r\\n    _taxFee = 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev set all fees\\r\\n   */\\r\\n\\r\\n  function restoreAllFee() private {\\r\\n    _taxFee = 300;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev transfer tokens with amount \\r\\n   */\\r\\n\\r\\n  function _tokenTransfer(address sender, address recipient, uint256 amount, bool isTakeFee) private {\\r\\n    if (!isTakeFee) removeAllFee();\\r\\n    _transferStandard(sender, recipient, amount);\\r\\n    if (!isTakeFee) restoreAllFee();\\r\\n  }\\r\\n\\r\\n  function _transferStandard(address sender, address recipient, uint256 amount) private {    \\r\\n    uint256 fee = amount.mul(_taxFee).div(10000); // for 3% fee\\r\\n    //_beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n    uint256 senderBalance = _balances[sender];\\r\\n    require(senderBalance >= amount, \\\"BEP20: transfer amount exceeds balance\\\");\\r\\n    _balances[sender] = senderBalance - amount;\\r\\n    uint256 amountnew = amount - fee;\\r\\n    _balances[recipient] += (amountnew);\\r\\n\\r\\n    if (fee>0) {\\r\\n      _balances[address(this)] += (fee);\\r\\n      emit Transfer(sender, address(this), fee);\\r\\n    }\\r\\n\\r\\n    emit Transfer(sender, recipient, amountnew);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev set Max sold amount\\r\\n   */\\r\\n\\r\\n  function _setMaxSoldAmount(uint256 maxvalue) external onlyOwner {\\r\\n      _maxSoldAmount = maxvalue;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev set min balance for transferring\\r\\n   */\\r\\n\\r\\n  function _setMinBalance(uint256 minValue) external onlyOwner {\\r\\n    _minBalance = minValue;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev determine whether we apply tax fee or not\\r\\n   */\\r\\n\\r\\n  function _setApplyContractFee(bool isFee) external onlyOwner {\\r\\n    if(isFee) {\\r\\n        _taxFee = 300;\\r\\n    } else {\\r\\n        _taxFee = 0;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _setTeamWalletAddress(address teamWalletAddr) external onlyOwner {\\r\\n    _teamWallet = payable(teamWalletAddr);\\r\\n  }\\r\\n\\r\\n  function _setBuybackWalletAddress(address buybackWalletAddr) external onlyOwner {\\r\\n    _buybackWallet = payable(buybackWalletAddr);\\r\\n  }\\r\\n\\r\\n  receive() external payable {}\\r\\n}\"\r\n    },\r\n    \"/contracts/interface/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\"\r\n    },\r\n    \"/contracts/interface/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n// import \\\"./IUniswapV2Router01.sol\\\";\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\r\\n}\"\r\n    },\r\n    \"/contracts/library/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"/contracts/library/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"/contracts/library/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/library/SafeBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IBEP20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeBEP20\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeBEP20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IBEP20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IBEP20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IBEP20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IBEP20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeBEP20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeBEP20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeBEP20: BEP20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/library/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract StrikeX\",\"name\":\"_strike\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_strikePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"EnableFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"useraddr\",\"type\":\"address\"}],\"name\":\"addBlockLst\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFarming\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingStrike\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accStrikePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"useraddr\",\"type\":\"address\"}],\"name\":\"removeBlockLst\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strike\",\"outputs\":[{\"internalType\":\"contract StrikeX\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strikePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStrikeInPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verison\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRewardStrike\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MasterChefV2", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d6fdde76b8c1c45b33790cc8751d5b88984c44ec000000000000000000000000000000000000000000000000a688906bd8b000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "byzantium", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}