{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IBEP20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n}\r\n\r\ninterface IPancakeRouter02 {\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ncontract BatchBuyAndSend {\r\n    address private pancakeRouterAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address private owner = msg.sender;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    function setPancakeRouterAddress(address _routerAddress) external onlyOwner {\r\n        pancakeRouterAddress = _routerAddress;\r\n    }\r\n\r\n    function batchBuyAndSendTokens(\r\n        address tokenAddress,\r\n        uint256[] calldata amounts,\r\n        address[] calldata recipientAddresses\r\n    )\r\n        external\r\n        payable\r\n        onlyOwner\r\n    {\r\n        require(amounts.length == recipientAddresses.length, \"Arrays length mismatch\");\r\n\r\n        for (uint256 i = 0; i < amounts.length; i++) {\r\n            // \u8c03\u7528PancakeSwap\u5408\u7ea6\u8fdb\u884c\u4ea4\u6362\r\n            (uint256[] memory amountsOut) = IPancakeRouter02(pancakeRouterAddress).swapExactETHForTokens{value: amounts[i]}(\r\n                0,    // \u671f\u671b\u7684\u8f93\u51fa\u6570\u91cf\uff0c\u8bbe\u7f6e\u4e3a0\u8868\u793a\u4e0d\u5173\u5fc3\u8f93\u51fa\u6570\u91cf\r\n                getPathForETHtoToken(tokenAddress),\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n\r\n            // \u5c06\u4ee3\u5e01\u53d1\u9001\u5230\u6307\u5b9a\u5730\u5740\r\n            require(\r\n                IBEP20(tokenAddress).transfer(recipientAddresses[i], amountsOut[1]),\r\n                \"Token transfer failed\"\r\n            );\r\n        }\r\n    }\r\n\r\n    // \u63d0\u53d6\u5408\u7ea6\u4e0a\u7684BNB\u4f59\u989d\r\n    function withdrawBNB() external onlyOwner {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function getPathForETHtoToken(address token) private view returns (address[] memory) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = IPancakeRouter02(pancakeRouterAddress).WETH();\r\n        path[1] = token;\r\n        return path;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"recipientAddresses\",\"type\":\"address[]\"}],\"name\":\"batchBuyAndSendTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerAddress\",\"type\":\"address\"}],\"name\":\"setPancakeRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BatchBuyAndSend", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4c64ff26fdf43635e62634a4bc5b0045a351ec2621c7d25b5090c30114de7ff5"}