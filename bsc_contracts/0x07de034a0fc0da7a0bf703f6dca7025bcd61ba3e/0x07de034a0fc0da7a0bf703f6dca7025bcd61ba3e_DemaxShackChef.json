{"SourceCode": "// Dependency file: contracts/interfaces/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IWETH.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/libraries/SafeMath.sol\r\n\r\n\r\n// pragma solidity >=0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/modules/Ownable.sol\r\n\r\n// pragma solidity >=0.6.0;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, 'Ownable: FORBIDDEN');\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), 'Ownable: INVALID_ADDRESS');\r\n        emit OwnerChanged(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n// Dependency file: contracts/modules/ReentrancyGuard.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// Root file: contracts/DemaxShackChef.sol\r\n\r\n\r\npragma solidity >=0.6.6;\r\n\r\n// import \"contracts/interfaces/IERC20.sol\";\r\n// import 'contracts/interfaces/IWETH.sol';\r\n// import 'contracts/libraries/SafeMath.sol';\r\n// import \"contracts/modules/Ownable.sol\";\r\n// import \"contracts/modules/ReentrancyGuard.sol\";\r\n\r\ninterface IRewardToken {\r\n    function mint(address to, uint value) external returns (bool);\r\n}\r\n\r\ninterface IShackChef {\r\n\r\n    /**\r\n     * @dev Get Pool infos\r\n     * If you want to get the pool's available quota, let \"avail = depositCap - accShare\"\r\n     */\r\n    function pools(uint256 pid) external view returns (\r\n        address token,              // Address of token contract\r\n        uint256 depositCap,         // Max deposit amount\r\n        uint256 depositClosed,      // Deposit closed\r\n        uint256 lastRewardBlock,    // Last block number that reward distributed\r\n        uint256 accRewardPerShare,  // Accumulated rewards per share\r\n        uint256 accShare,           // Accumulated Share\r\n        uint256 apy,                // APY, times 10000\r\n        uint256 used                // How many tokens used for farming\r\n    );\r\n\r\n    /**\r\n    * @dev Get pid of given token\r\n    */\r\n    function pidOfToken(address token) external view returns (uint256 pid);\r\n\r\n    /**\r\n    * @dev Get User infos\r\n    */\r\n    function users(uint256 pid, address user) external view returns (\r\n        uint256 amount,     // Deposited amount of user\r\n        uint256 rewardDebt  // Ignore\r\n    );\r\n\r\n    /**\r\n     * @dev Get user unclaimed reward\r\n     */\r\n    function unclaimedReward(uint256 pid, address user) external view returns (uint256 reward);\r\n\r\n    /**\r\n     * @dev Get user total claimed reward of all pools\r\n     */\r\n    function userStatistics(address user) external view returns (uint256 claimedReward);\r\n\r\n    /**\r\n     * @dev Deposit tokens and Claim rewards\r\n     * If you just want to claim rewards, call function: \"deposit(pid, 0)\"\r\n     */\r\n    function deposit(uint256 pid, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Withdraw tokens\r\n     */\r\n    function withdraw(uint256 pid, uint256 amount) external;\r\n\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external view returns (address);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface ISwapPair {\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\n\r\n// Note that it's ownable and the owner wields tremendous power. The ownership\r\n// will be transferred to a governance smart contract once mintToken is sufficiently\r\n// distributed and the community can show to govern itself.\r\ncontract DemaxShackChef is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    uint256 public version = 1;\r\n\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount;         // How many LP tokens the user has provided.\r\n        uint256 rewardDebt;     // Reward debt. See explanation below.\r\n        uint256 earnDebt;     // Earn debt. See explanation below.\r\n        //\r\n        // We do some fancy math here. Basically, any point in time, the amount of RewardTokens, the amount of EarnTokens\r\n        // entitled to a user but is pending to be distributed is:\r\n        //\r\n        //   pending reward = (user.amount * pool.accRewardPerShare) - user.rewardDebt\r\n        //   pending earn = (user.amount * pool.accEarnPerShare) - user.earnDebt\r\n        //\r\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\r\n        //   1. The pool's `accRewardPerShare` (and `lastUpdateBlock`) gets updated.\r\n        //   2. User receives the pending reward and earn sent to his/her address.\r\n        //   3. User's `amount` gets updated.\r\n        //   4. User's `rewardDebt` gets updated.\r\n        //   5. User's `earnDebt` gets updated.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        uint256 pid;\r\n        IERC20 depositToken;           // Address of deposit token contract.\r\n        IERC20 earnToken;           // Address of earn token contract.\r\n        uint256 allocPoint;       // How many allocation points assigned to this pool. RewardTokens to distribute per block.\r\n        uint256 lastUpdateBlock;  // Last block number that RewardTokens distribution occurs.\r\n        uint256 lastRewardAmount; // Last RewardToken amunt that RewardTokens distribution occurs.\r\n        uint256 lastEarnAmount; // Last EarnToken amunt that EarnTokens distribution occurs.\r\n        uint256 accRewardPerShare;   // Accumulated RewardTokens per share, times 1e18. See below.\r\n        uint256 accEarnPerShare;   // Accumulated EarnTokens per share, times 1e18. See below.\r\n        uint16 tokenType;\r\n        bool added;\r\n    }\r\n\r\n    address public weth;\r\n    // The XBurger TOKEN!\r\n    address public mintToken;\r\n    // Dev address.\r\n    address public devaddr;\r\n    // mintToken tokens created per block.\r\n    uint256 public mintPerBlock;\r\n    // Bonus muliplier for early mintToken makers.\r\n    uint256 public constant BONUS_MULTIPLIER = 1;\r\n    // Shack Chef address\r\n    address public shackAddress;\r\n\r\n    uint256 public rewardTotal;\r\n    uint256 public devRewardRate = 0;\r\n    uint256 public devEarnRate = 0;\r\n    mapping(IERC20 => uint256) public earnTokensTotal;\r\n\r\n    // Info of each pool.\r\n    mapping(uint256 => PoolInfo) public poolInfo;\r\n    uint256[] public pids;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n    // Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint = 0;\r\n    // The block number when mintToken mining starts.\r\n    uint256 public startBlock;\r\n    uint256 public accRewardShare;\r\n\r\n    mapping (address => address) public tokenRouters;\r\n    mapping (address => address) public swapTokens;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event SetFeeAddress(address indexed user, address indexed newAddress);\r\n    event SetDevAddress(address indexed user, address indexed newAddress);\r\n    event UpdateEmissionRate(address indexed user, uint256 mintPerBlock);\r\n\r\n    constructor(\r\n        address _weth,\r\n        address _shackAddress,\r\n        address _mintToken,\r\n        address _devaddr,\r\n        uint256 _mintPerBlock,\r\n        uint256 _startBlock\r\n    ) public {\r\n        weth = _weth;\r\n        shackAddress = _shackAddress;\r\n        mintToken = _mintToken;\r\n        devaddr = _devaddr;\r\n        mintPerBlock = _mintPerBlock;\r\n        startBlock = _startBlock;\r\n    }\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return pids.length;\r\n    }\r\n\r\n    mapping(IERC20 => mapping(IERC20 => bool)) public poolExistence;\r\n    modifier nonDuplicated(IERC20 _depositToken, IERC20 _earnToken) {\r\n        require(poolExistence[_depositToken][_earnToken] == false, \"nonDuplicated: duplicated\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {\r\n        assert(msg.sender == weth);\r\n    }\r\n\r\n    // Set a new lp to the pool. Can only be called by the owner.\r\n    function add(bool _withUpdate, uint256 _pid, uint256 _allocPoint, IERC20 _depositToken, IERC20 _earnToken, uint16 _tokenType) public onlyOwner nonDuplicated(_depositToken, _earnToken) {\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n\r\n        uint256 lastUpdateBlock = block.number > startBlock ? block.number : startBlock;\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        poolExistence[_depositToken][_earnToken] = true;\r\n        if(poolInfo[_pid].added == false) {\r\n            pids.push(_pid);\r\n        }\r\n        poolInfo[_pid] = PoolInfo({\r\n            pid: _pid,\r\n            depositToken : _depositToken,\r\n            earnToken: _earnToken,\r\n            allocPoint : _allocPoint,\r\n            lastUpdateBlock : lastUpdateBlock,\r\n            lastRewardAmount : 0,\r\n            lastEarnAmount : 0,\r\n            accRewardPerShare : 0,\r\n            accEarnPerShare: 0,\r\n            tokenType: _tokenType,\r\n            added: true\r\n        });\r\n    }\r\n\r\n    function set(uint256 _pid, uint256 _allocPoint, IERC20 _depositToken, IERC20 _earnToken, uint16 _tokenType) public onlyOwner nonDuplicated(_depositToken, _earnToken) {\r\n        add(true, _pid, _allocPoint, _depositToken, _earnToken, _tokenType);\r\n    }\r\n\r\n    function batchAdd(bool _withUpdate, uint256[] memory _pids, uint256[] memory _allocPoints, IERC20[] memory _depositTokens, IERC20[] memory _earnTokens, uint16[] memory _tokenTypes) public onlyOwner {\r\n        require(_pids.length == _allocPoints.length && _allocPoints.length == _depositTokens.length && _depositTokens.length == _earnTokens.length, 'invalid params');\r\n        for(uint256 i; i<_allocPoints.length; i++) {\r\n            add(false, _pids[i], _allocPoints[i], _depositTokens[i], _earnTokens[i], _tokenTypes[i]);\r\n        }\r\n        if (_withUpdate) {\r\n            massUpdatePools();\r\n        }\r\n    }\r\n\r\n    function batchSet(uint256[] memory _pids, uint256[] memory _allocPoints, IERC20[] memory _depositTokens, IERC20[] memory _earnTokens, uint16[] memory _tokenTypes) public onlyOwner {\r\n        require(_pids.length == _allocPoints.length && _allocPoints.length == _depositTokens.length && _depositTokens.length == _earnTokens.length, 'invalid params');\r\n        batchAdd(true, _pids, _allocPoints, _depositTokens, _earnTokens, _tokenTypes);\r\n    }\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to) public pure returns (uint256) {\r\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\r\n    }\r\n\r\n    function getToBlock() public view returns (uint256) {\r\n        return block.number;\r\n    }\r\n\r\n    function getDepositTokenSupply(uint256 _pid) public view returns (uint256) {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        if(shackAddress != address(0)) {\r\n            (uint256 balance, ) = IShackChef(shackAddress).users(_pid, address(this));\r\n            return balance;\r\n        }\r\n        return pool.depositToken.balanceOf(address(this));\r\n    }\r\n\r\n    function pendingRewardInfo(uint256 _pid) public view returns (uint256, uint256, uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        if (getToBlock() > pool.lastUpdateBlock && totalAllocPoint > 0) {\r\n            uint256 multiplier = getMultiplier(pool.lastUpdateBlock, getToBlock());\r\n            uint256 reward = multiplier.mul(mintPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\r\n            uint256 devValue;\r\n            if(devRewardRate > 0) {\r\n                devValue = reward.div(devRewardRate);\r\n            }\r\n            return (reward, devValue, block.number);\r\n        }\r\n        return (0, 0, block.number);\r\n    }\r\n\r\n    function pendingEarnInfo(uint256 _pid) public view returns (uint256, uint256, uint256) {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        if(shackAddress != address(0)) {\r\n            uint256 earn = IShackChef(shackAddress).unclaimedReward(_pid, address(this));\r\n            earn = getCurrentRate(address(pool.earnToken), earn);\r\n            uint256 devValue;\r\n            if(devEarnRate > 0) {\r\n                devValue = earn.div(devEarnRate);\r\n                earn = earn.sub(devValue);\r\n            }\r\n            return (earn, devValue, block.number);\r\n        }\r\n        return (0, 0, block.number);\r\n    }\r\n\r\n    // View function to see pending RewardTokens on frontend.\r\n    function pendingReward(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accRewardPerShare = pool.accRewardPerShare;\r\n        uint256 depositTokenSupply = getDepositTokenSupply(_pid);\r\n        if (depositTokenSupply >0) {\r\n            (uint256 reward, ,) = pendingRewardInfo(_pid);\r\n            accRewardPerShare = accRewardPerShare.add(reward.mul(1e18).div(depositTokenSupply));\r\n        }\r\n        uint256 result = user.amount.mul(accRewardPerShare).div(1e18).sub(user.rewardDebt);\r\n        return result;\r\n    }\r\n\r\n    function pendingEarn(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accEarnPerShare = pool.accEarnPerShare;\r\n        uint256 depositTokenSupply = getDepositTokenSupply(_pid);\r\n        if (depositTokenSupply != 0 && shackAddress != address(0)) {\r\n            (uint256 earn, ,) = pendingEarnInfo(_pid);\r\n            accEarnPerShare = accEarnPerShare.add(earn.mul(1e18).div(depositTokenSupply));\r\n        }\r\n        uint256 result = user.amount.mul(accEarnPerShare).div(1e18).sub(user.earnDebt);\r\n        return result;\r\n    }\r\n\r\n    function canDeposit(uint256 _pid, address _user) external view returns (uint256) {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        uint256 amount = pool.depositToken.balanceOf(_user);\r\n        if(shackAddress != address(0)) {\r\n            (,uint256 depositCap, , , , uint256 accShare, ,) = IShackChef(shackAddress).pools(_pid);\r\n            if(depositCap > accShare) {\r\n                amount = depositCap.sub(accShare);\r\n            } else {\r\n                amount = 0;\r\n            }\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function shackPoolInfo(uint256 _pid) external view returns (\r\n        address token,              // Address of token contract\r\n        uint256 depositCap,         // Max deposit amount\r\n        uint256 depositClosed,      // Deposit closed\r\n        uint256 lastRewardBlock,    // Last block number that reward distributed\r\n        uint256 accRewardPerShare,  // Accumulated rewards per share\r\n        uint256 accShare,           // Accumulated Share\r\n        uint256 apy,                // APY, times 10000\r\n        uint256 used                // How many tokens used for farming\r\n    ) {\r\n        if(shackAddress != address(0)) {\r\n            (token, depositCap, depositClosed, lastRewardBlock, accRewardPerShare, accShare, apy, used) = IShackChef(shackAddress).pools(_pid);\r\n        }\r\n    }\r\n\r\n    // Update reward variables for all pools. Be careful of gas spending!\r\n    function massUpdatePools() internal {\r\n        uint256 length = pids.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            updatePool(pids[i]);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function updatePool(uint256 _pid) internal {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        uint256 toBlock = getToBlock();\r\n        if (toBlock <= pool.lastUpdateBlock) {\r\n            return;\r\n        }\r\n        uint256 depositTokenSupply = getDepositTokenSupply(_pid);\r\n        if (depositTokenSupply == 0 || pool.allocPoint == 0) {\r\n            pool.lastUpdateBlock = toBlock;\r\n            return;\r\n        }\r\n        \r\n        (uint256 reward, uint256 devReward,) = pendingRewardInfo(_pid);\r\n        pool.lastRewardAmount = reward;\r\n        IRewardToken(mintToken).mint(address(this), reward);\r\n        rewardTotal = rewardTotal.add(reward);\r\n        if(devReward > 0) {\r\n            IRewardToken(mintToken).mint(devaddr, devReward);\r\n            rewardTotal = rewardTotal.add(devReward);\r\n        }\r\n        pool.accRewardPerShare = pool.accRewardPerShare.add(reward.mul(1e18).div(depositTokenSupply));\r\n\r\n        (uint256 earn, uint256 devEarn,) = _mintEarnToken(_pid);\r\n        pool.lastEarnAmount = earn.add(devEarn);\r\n        pool.accEarnPerShare = pool.accEarnPerShare.add(earn.mul(1e18).div(depositTokenSupply));\r\n\r\n        pool.lastUpdateBlock = toBlock;\r\n    }\r\n\r\n    // Deposit LP tokens to MasterChef for mintToken allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) payable public nonReentrant {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        updatePool(_pid);\r\n        _harvestMintToken(_pid);\r\n        _harvestEarnToken(_pid);\r\n        if(address(pool.depositToken) == weth) {\r\n            _amount = msg.value;\r\n        }\r\n        if (_amount > 0) {\r\n            if(address(pool.depositToken) == weth) {\r\n                IWETH(weth).deposit{value: _amount}();\r\n            } else {\r\n                pool.depositToken.transferFrom(address(msg.sender), address(this), _amount);\r\n            }\r\n            user.amount = user.amount.add(_amount);\r\n\r\n            if(shackAddress != address(0)) {\r\n                approveContract(address(pool.depositToken), shackAddress, _amount);\r\n                IShackChef(shackAddress).deposit(_pid, _amount);\r\n            }\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e18);\r\n        user.earnDebt = user.amount.mul(pool.accEarnPerShare).div(1e18);\r\n        emit Deposit(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw LP tokens from MasterChef.\r\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        require(user.amount >= _amount, \"withdraw: not good\");\r\n        updatePool(_pid);\r\n        _harvestMintToken(_pid);\r\n        _harvestEarnToken(_pid);\r\n        if (_amount > 0) {\r\n            if(shackAddress != address(0)) {\r\n                IShackChef(shackAddress).withdraw(_pid, _amount);\r\n            }\r\n            user.amount = user.amount.sub(_amount);\r\n            if(address(pool.depositToken) == weth) {\r\n                IWETH(weth).withdraw(_amount);\r\n                address(uint160(msg.sender)).transfer(_amount);\r\n            } else {\r\n                pool.depositToken.transfer(address(msg.sender), _amount);\r\n            }\r\n        }\r\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e18);\r\n        user.earnDebt = user.amount.mul(pool.accEarnPerShare).div(1e18);\r\n        emit Withdraw(msg.sender, _pid, _amount);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        uint256 amount = user.amount;\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n        user.earnDebt = 0;\r\n        pool.depositToken.transfer(address(msg.sender), amount);\r\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\r\n    }\r\n\r\n    function _mintEarnToken(uint256 _pid) internal returns (uint256, uint256, uint256) {\r\n        if(shackAddress == address(0)) {\r\n            return (0, 0, block.number);\r\n        }\r\n        (uint256 earn, uint256 devValue,) = pendingEarnInfo(_pid);\r\n        if(earn.add(devValue) == 0) {\r\n            return (0, 0, block.number);\r\n        }\r\n\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        uint256 beforeBalance = pool.earnToken.balanceOf(address(this));\r\n        IShackChef(shackAddress).deposit(_pid, 0);\r\n        uint256 afterBalance = pool.earnToken.balanceOf(address(this));\r\n        earn = afterBalance.sub(beforeBalance);\r\n        if(tokenRouters[address(pool.earnToken)] != address(0)) {\r\n            earn = swap(address(pool.earnToken), earn);\r\n        }\r\n        earnTokensTotal[pool.earnToken] = earnTokensTotal[pool.earnToken].add(earn);\r\n        devValue = 0;\r\n        if(devEarnRate > 0) {\r\n            devValue = earn.div(devEarnRate);\r\n            if(tokenRouters[address(pool.earnToken)] != address(0)) {\r\n                safeTokenTransfer(swapTokens[address(pool.earnToken)], devaddr, devValue);\r\n            } else {\r\n                safeTokenTransfer(address(pool.earnToken), devaddr, devValue);\r\n            }\r\n            earn = earn.sub(devValue);\r\n        }\r\n        return (earn, devValue, block.number);\r\n    }\r\n\r\n    function _harvestMintToken(uint256 _pid) internal returns(uint256 amount) {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        uint256 pending = user.amount.mul(pool.accRewardPerShare).div(1e18).sub(user.rewardDebt);\r\n        amount = safeTokenTransfer(mintToken, msg.sender, pending);\r\n        user.rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e18);\r\n        return amount;\r\n    }\r\n\r\n    function _harvestEarnToken(uint256 _pid) internal returns(uint256 amount) {\r\n        if(shackAddress == address(0)) {\r\n            return 0;\r\n        }\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][msg.sender];\r\n        uint256 pending = user.amount.mul(pool.accEarnPerShare).div(1e18).sub(user.earnDebt);\r\n        if(tokenRouters[address(pool.earnToken)] != address(0)) {\r\n            amount = safeTokenTransfer(swapTokens[address(pool.earnToken)], msg.sender, pending);\r\n        } else {\r\n            amount = safeTokenTransfer(address(pool.earnToken), msg.sender, pending);\r\n        }\r\n        user.earnDebt = user.amount.mul(pool.accEarnPerShare).div(1e18);\r\n        return amount;\r\n    }\r\n\r\n    function harvest(uint256 _pid) public nonReentrant {\r\n        updatePool(_pid);\r\n        _harvestMintToken(_pid);\r\n        _harvestEarnToken(_pid);\r\n    }\r\n\r\n    // Safe Token transfer function, just in case if rounding error causes pool to not have enough tokens.\r\n    function safeTokenTransfer(address _token, address _to, uint256 _amount) internal returns(uint256) {\r\n        uint256 tokenBal = IERC20(_token).balanceOf(address(this));\r\n        if(_amount > 0 && tokenBal > 0) {\r\n            if (_amount > tokenBal) {\r\n                _amount = tokenBal;\r\n            }\r\n            IERC20(_token).transfer(_to, _amount);\r\n        }\r\n        return _amount;\r\n    }\r\n\r\n    function emergencyExitShakChef(uint256 _pid) public onlyOwner {\r\n        require(shackAddress != address(0), \"emergencyExitShakChef: Invalid Address\");\r\n        (uint256 amount,) = IShackChef(shackAddress).users(_pid, address(this));\r\n        IShackChef(shackAddress).withdraw(_pid, amount);\r\n    }\r\n\r\n    function emergencyExitAllShakChef() public {\r\n        uint256 length = pids.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            emergencyExitShakChef(pids[i]);\r\n        }\r\n    }\r\n\r\n    // Update dev address by the previous dev.\r\n    function changeDev(address _devaddr) public {\r\n        require(msg.sender == devaddr || msg.sender == owner, \"changeDev: FORBIDDEN\");\r\n        devaddr = _devaddr;\r\n        emit SetDevAddress(msg.sender, _devaddr);\r\n    }\r\n\r\n    function setDevRewardRate(uint256 _value) public onlyOwner {\r\n        require(_value >=0 && _value <=10, 'invalid param');\r\n        devRewardRate = _value;\r\n    }\r\n\r\n    function setDevEarnRate(uint256 _value) public onlyOwner {\r\n        require(_value >=0 && _value <=10, 'invalid param');\r\n        devEarnRate = _value;\r\n    }\r\n\r\n    function setRate(uint256 _devRewardRate, uint256 _devEarnRate) public onlyOwner {\r\n        setDevRewardRate(_devRewardRate);\r\n        setDevEarnRate(_devEarnRate);\r\n    }\r\n\r\n    function setStartBlock(uint256 _value) public onlyOwner {\r\n        startBlock = _value;\r\n    }\r\n\r\n    //mintToken has to add hidden dummy pools inorder to alter the emission, here we make it simple and transparent to all.\r\n    function updateEmissionRate(uint256 _mintPerBlock) public onlyOwner {\r\n        massUpdatePools();\r\n        mintPerBlock = _mintPerBlock;\r\n        emit UpdateEmissionRate(msg.sender, _mintPerBlock);\r\n    }\r\n\r\n    function setRouter(address _token, address _router) external onlyOwner {\r\n        tokenRouters[_token] = _router;\r\n    }\r\n\r\n    function setSwapToken(address _token, address _tokenOut) external onlyOwner {\r\n        swapTokens[_token] = _tokenOut;\r\n    }\r\n\r\n    function setSwapTokenAndRouter(address _token, address _tokenOut, address _router) external onlyOwner {\r\n        swapTokens[_token] = _tokenOut;\r\n        tokenRouters[_token] = _router;\r\n    }\r\n\r\n    function approveContract(address _token, address _spender, uint _amount) internal {\r\n        uint allowAmount = IERC20(_token).totalSupply();\r\n        if(allowAmount < _amount) {\r\n            allowAmount = _amount;\r\n        }\r\n        if(IERC20(_token).allowance(address(this), _spender) < _amount) {\r\n            IERC20(_token).approve(_spender, allowAmount);\r\n        }\r\n    }\r\n\r\n    function swap(address _tokenIn, uint256 _amount) public returns (uint256) {\r\n        if(_amount == 0) {\r\n            return 0;\r\n        }\r\n        address _tokenOut = swapTokens[_tokenIn];\r\n        approveContract(_tokenIn, tokenRouters[_tokenIn], _amount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = _tokenIn;\r\n        path[1] = _tokenOut;\r\n        uint256 beforeBalance = IERC20(_tokenOut).balanceOf(address(this));\r\n        ISwapRouter(tokenRouters[_tokenIn]).swapExactTokensForTokens(_amount, 1, path, address(this), block.timestamp+600);\r\n        uint256 afterBalance = IERC20(_tokenOut).balanceOf(address(this));\r\n        return afterBalance.sub(beforeBalance);\r\n    }\r\n\r\n    function getCurrentRate(address _tokenIn, uint256 _amount) public view returns (uint256) {\r\n        if(tokenRouters[_tokenIn] == address(0) || swapTokens[_tokenIn] == address(0)) {\r\n            return _amount;\r\n        }\r\n        address factory = ISwapRouter(tokenRouters[_tokenIn]).factory();\r\n        address pair = ISwapFactory(factory).getPair(_tokenIn, swapTokens[_tokenIn]);\r\n        (uint112 reserve0, uint112 reserve1, ) = ISwapPair(pair).getReserves();\r\n        if(reserve0 == 0 || reserve1 ==0) {\r\n            return 0;\r\n        }\r\n        uint256 tokenInReserve = uint256(reserve0);\r\n        uint256 tokenOutReserve = uint256(reserve1);\r\n        uint256 tokenInDecimals = uint256(IERC20(_tokenIn).decimals());\r\n        uint256 tokenOutDecimals = uint256(IERC20(swapTokens[_tokenIn]).decimals());\r\n        if(ISwapPair(pair).token0() != _tokenIn) {\r\n            tokenInDecimals = IERC20(swapTokens[_tokenIn]).decimals();\r\n            tokenOutDecimals = IERC20(_tokenIn).decimals();\r\n            tokenInReserve = uint256(reserve1);\r\n            tokenOutReserve = uint256(reserve0);\r\n        }\r\n        if(tokenInDecimals > tokenOutDecimals) {\r\n            tokenOutReserve = tokenOutReserve * 10** (tokenInDecimals - tokenOutDecimals);\r\n        } else if(tokenInDecimals < tokenOutDecimals) {\r\n            tokenInReserve = tokenInReserve * 10** (tokenOutDecimals - tokenInDecimals);\r\n        }\r\n\r\n        return _amount * tokenOutReserve / tokenInReserve;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shackAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mintToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetDevAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetFeeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintPerBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accRewardShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_earnToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_tokenType\",\"type\":\"uint16\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_allocPoints\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_depositTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_earnTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_tokenTypes\",\"type\":\"uint16[]\"}],\"name\":\"batchAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_allocPoints\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_depositTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_earnTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_tokenTypes\",\"type\":\"uint16[]\"}],\"name\":\"batchSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"changeDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devEarnRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earnTokensTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExitAllShakChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyExitShakChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getCurrentRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getDepositTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingEarn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"pendingEarnInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"pendingRewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pids\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"earnToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEarnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accEarnPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"tokenType\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"added\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_earnToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_tokenType\",\"type\":\"uint16\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setDevEarnRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setDevRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devRewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devEarnRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"setSwapToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setSwapTokenAndRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"shackPoolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositClosed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenRouters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earnDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DemaxShackChef", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000007033a512639119c759a51b250bfa461ae100894b000000000000000000000000afe24e29da7e9b3e8a25c9478376b6ad6ad788dd000000000000000000000000afe24e29da7e9b3e8a25c9478376b6ad6ad788dd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f0bc5f3fc1c7c3fdf4617761fe363269c7eb5cb87d47e94638a1abdee05680f7"}