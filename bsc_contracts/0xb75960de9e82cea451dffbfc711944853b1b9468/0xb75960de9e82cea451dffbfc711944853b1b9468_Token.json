{"SourceCode": "// SPDX-License-Identifier: MIT\r\n/*\r\n    We Appreciate You CZ, Thanks For The Evolution Of Cryptocurrencies \u2764\r\n*/\r\npragma solidity ^0.8.2;\r\n\r\ncontract Token {\r\n    mapping(address => uint) public balances;\r\n    mapping(address => mapping(address => uint)) public allowance;\r\n    uint public totalSupply = 4300000000 * 10 ** 18;\r\n    string public name = \"Czcoin\";\r\n    string public symbol = \"CZC\";\r\n    uint public decimals = 18;\r\n\r\n    uint public lastBurnDate;\r\n    uint public dailyBurnAmount = 1 * 10 ** decimals; // Amount to burn daily\r\n\r\n    uint public totalHolders; // To keep track of total holders\r\n    mapping(uint => address) public holders; // To store addresses of holders\r\n\r\n    uint public redistributionRate = 1; // 1% redistribution rate\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Burn(address indexed from, uint value);\r\n    event Redistribution(address indexed to, uint value);\r\n    \r\n    constructor() {\r\n        balances[msg.sender] = totalSupply;\r\n        _addHolder(msg.sender); // Add deployer as initial holder\r\n    }\r\n\r\n    function _addHolder(address holder) internal {\r\n        if (balances[holder] > 0) {\r\n            holders[totalHolders] = holder;\r\n            totalHolders++;\r\n        }\r\n    }\r\n\r\n    function _redistribute(address from, uint value) internal {\r\n        uint redistributionAmount = (value * redistributionRate) / 100;\r\n        for (uint i = 0; i < totalHolders; i++) {\r\n            address holder = holders[i];\r\n            if (holder != from) {\r\n                uint holderShare = (redistributionAmount * balances[holder]) / totalSupply;\r\n                balances[holder] += holderShare;\r\n                emit Redistribution(holder, holderShare);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function balanceOf(address owner) public view returns(uint) { // Cambiado a view para optimizar\r\n        return balances[owner];\r\n    }\r\n    \r\n    function transfer(address to, uint value) public returns(bool) {\r\n        require(to != address(0), \"Cannot transfer to address zero\");\r\n        require(balanceOf(msg.sender) >= value, 'balance too low');\r\n        \r\n        uint burnAmount = value / 100; // Calculate 1% of the amount to transfer.\r\n        uint transferAmount = value - burnAmount; // The amount to transfer after the burning\r\n\r\n        require(balances[to] + transferAmount >= balances[to], \"Transfer causes overflow\");\r\n        require(totalSupply >= burnAmount, \"Not enough tokens to burn\");\r\n        \r\n        balances[to] += transferAmount;\r\n        balances[msg.sender] -= value;\r\n        emit Transfer(msg.sender, to, transferAmount);\r\n        \r\n        // Token burning\r\n        totalSupply -= burnAmount;\r\n        emit Transfer(msg.sender, address(0), burnAmount); // Burns the tokens, sending them to an ownerless address\r\n        \r\n        _redistribute(msg.sender, value); // Distribute the redistribution amount\r\n\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint value) public returns(bool) {\r\n        require(to != address(0), \"Cannot transfer to address zero\");\r\n        require(balanceOf(from) >= value, 'balance too low');\r\n        require(allowance[from][msg.sender] >= value, 'allowance too low');\r\n        \r\n        uint burnAmount = value / 100;\r\n        uint transferAmount = value - burnAmount;\r\n\r\n        require(balances[to] + transferAmount >= balances[to], \"Transfer causes overflow\");\r\n        require(totalSupply >= burnAmount, \"Not enough tokens to burn\");\r\n        \r\n        balances[to] += transferAmount;\r\n        balances[from] -= value;\r\n        emit Transfer(from, to, transferAmount);\r\n        \r\n        totalSupply -= burnAmount;\r\n        emit Transfer(from, address(0), burnAmount);\r\n        \r\n        return true;   \r\n    }\r\n    \r\n    function approve(address spender, uint value) public returns (bool) {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;   \r\n    }\r\n\r\n    function burn(uint amount) public returns (bool) {\r\n        require(amount > 0, \"The quantity must be greater than zero\");\r\n        require(balanceOf(msg.sender) >= amount, \"Insufficient balance to burn\");\r\n        \r\n        balances[msg.sender] -= amount;\r\n        totalSupply -= amount;\r\n        emit Burn(msg.sender, amount);\r\n        \r\n        return true;\r\n    }\r\n\r\n    function burnDailyToken() public {\r\n        require(block.timestamp > lastBurnDate + 1 days, \"Wait until next burn day\");\r\n        \r\n        require(totalSupply >= dailyBurnAmount, \"Not enough tokens to burn\");\r\n\r\n        totalSupply -= dailyBurnAmount;\r\n        lastBurnDate = block.timestamp; // Update the date of the last burn\r\n        emit Burn(address(0), dailyBurnAmount); // Burned token is sent to null address\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Redistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnDailyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyBurnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBurnDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redistributionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.2+commit.661d1103", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d6969b386f6aa5f201caea3d43e2cdb5dd5de78768e888dc7a8d2480360e4d97"}