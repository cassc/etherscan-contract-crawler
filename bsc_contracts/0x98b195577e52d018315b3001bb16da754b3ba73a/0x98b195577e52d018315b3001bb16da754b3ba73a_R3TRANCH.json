{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Ranch/R3TRANCH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract R3TRANCH is Ownable, ReentrancyGuard {\\r\\n    struct StakeParams {\\r\\n        bool active;\\r\\n        uint256 stakingOrder;\\r\\n        uint256 start;\\r\\n        uint256 amount;\\r\\n        uint256 lastRewardTS;\\r\\n    }\\r\\n\\r\\n    struct RewardParams {\\r\\n        uint256 amount;\\r\\n        uint256 rewardTS;\\r\\n    }\\r\\n\\r\\n    struct BoostParams {\\r\\n        bool active;\\r\\n        uint8 boostYear;\\r\\n        uint256 boostOrder;\\r\\n        uint256 startTS;\\r\\n        uint256 endTS;\\r\\n        uint256 extraPercentPerDay;\\r\\n    }\\r\\n\\r\\n    uint256 public constant DECIMAL_FACTOR = 100;\\r\\n    uint256 public constant DAY = 86400;\\r\\n    uint256 public constant YEAR = 365 * DAY;\\r\\n    uint256 public constant FIVE_YEARS = 5 * YEAR;\\r\\n\\r\\n    uint256 private totalStakingBalanceRT;\\r\\n    uint256 private totalRewards;\\r\\n\\r\\n    IERC20 public r3Token;\\r\\n    IERC20 public rToken;\\r\\n\\r\\n    uint256[] private yearPercents = [150, 100, 50, 50, 50];\\r\\n    address[] private stakers;\\r\\n\\r\\n    mapping(address => uint256) private activeStake;\\r\\n    mapping(address => uint256[]) private rewards;\\r\\n    mapping(address => StakeParams[]) private stakingBalances;\\r\\n    mapping(uint256 => BoostParams[]) private boosts;\\r\\n    mapping(address => mapping(uint256 => RewardParams[]))\\r\\n        private ordersRewards;\\r\\n\\r\\n    event Staked(address indexed user, uint256 amount, uint256 blockTime);\\r\\n    event RewardPaid(\\r\\n        address indexed user,\\r\\n        uint256 rewardAmount,\\r\\n        uint256 rewardOrder,\\r\\n        uint256 blockTime\\r\\n    );\\r\\n\\r\\n    constructor(address _r3TokenAddress, address _rTokenAddress) {\\r\\n        r3Token = IERC20(_r3TokenAddress);\\r\\n        rToken = IERC20(_rTokenAddress);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function fundContractBalanceR3T(uint256 _amount) external onlyOwner {\\r\\n        require(_amount > 0, \\\"Invalid fund\\\");\\r\\n\\r\\n        r3Token.transferFrom(msg.sender, address(this), _amount);\\r\\n    }\\r\\n\\r\\n    function withdrawBNB() external onlyOwner {\\r\\n        uint256 amount = address(this).balance;\\r\\n        require(amount > 0, \\\"Insufficient balance\\\");\\r\\n        payable(msg.sender).transfer(amount);\\r\\n    }\\r\\n\\r\\n    function withdrawToken(\\r\\n        address _tokenAddress,\\r\\n        uint256 _amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20 _token = IERC20(_tokenAddress);\\r\\n        require(\\r\\n            _token.balanceOf(address(this)) >= _amount,\\r\\n            \\\"Insufficient balance\\\"\\r\\n        );\\r\\n        _token.transfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function totalSupplyR3T() external view returns (uint256) {\\r\\n        return r3Token.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getTotalStakingBalanceRT() external view returns (uint256) {\\r\\n        return totalStakingBalanceRT;\\r\\n    }\\r\\n\\r\\n    function getTotalRewards() external view returns (uint256) {\\r\\n        return totalRewards;\\r\\n    }\\r\\n\\r\\n    function getYearPercents(uint256 _year) public view returns (uint256) {\\r\\n        require(_year >= 1 && _year <= 5, \\\"Incorrect year number, must be 1-5\\\");\\r\\n        return yearPercents[_year - 1];\\r\\n    }\\r\\n\\r\\n    function getRewardsOfStake(\\r\\n        address _account,\\r\\n        uint256 _stakingOrder\\r\\n    ) public view returns (RewardParams[] memory) {\\r\\n        require(\\r\\n            stakingBalances[_account].length > _stakingOrder,\\r\\n            \\\"Incorrect account or staking order\\\"\\r\\n        );\\r\\n        return ordersRewards[_account][_stakingOrder];\\r\\n    }\\r\\n\\r\\n    function getTotalStakedTokens(\\r\\n        address _account\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 total;\\r\\n        for (uint256 i = 0; i < stakingBalances[_account].length; i++) {\\r\\n            if (stakingBalances[_account][i].active) {\\r\\n                total += stakingBalances[_account][i].amount;\\r\\n            }\\r\\n        }\\r\\n        return total;\\r\\n    }\\r\\n\\r\\n    function getStakes(\\r\\n        address _account\\r\\n    ) public view returns (StakeParams[] memory) {\\r\\n        return stakingBalances[_account];\\r\\n    }\\r\\n\\r\\n    function getBoosts(\\r\\n        uint256 _year\\r\\n    ) public view returns (BoostParams[] memory) {\\r\\n        return boosts[_year];\\r\\n    }\\r\\n\\r\\n    function getRewards(\\r\\n        address _account\\r\\n    ) public view returns (uint256[] memory) {\\r\\n        return rewards[_account];\\r\\n    }\\r\\n\\r\\n    function getTotalEarnedTokens(\\r\\n        address _account\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 total;\\r\\n        for (uint256 i = 0; i < rewards[_account].length; i++) {\\r\\n            total += rewards[_account][i];\\r\\n        }\\r\\n        return total;\\r\\n    }\\r\\n\\r\\n    function viewStakers() public view returns (address[] memory) {\\r\\n        return stakers;\\r\\n    }\\r\\n\\r\\n    function availableRewardOfStake(\\r\\n        address _account,\\r\\n        uint256 _stakingOrder,\\r\\n        uint256 _untilTS\\r\\n    ) public view returns (uint256) {\\r\\n        require(\\r\\n            stakingBalances[_account].length > _stakingOrder,\\r\\n            \\\"Incorrect account or staking order\\\"\\r\\n        );\\r\\n        StakeParams memory oneStake = stakingBalances[_account][_stakingOrder];\\r\\n        RewardParams[] memory ordersReward = ordersRewards[_account][\\r\\n            _stakingOrder\\r\\n        ];\\r\\n\\r\\n        uint256 reward;\\r\\n\\r\\n        if (_untilTS > oneStake.start) {\\r\\n            uint256 lastReward = oneStake.start;\\r\\n            for (\\r\\n                uint256 i = 0;\\r\\n                i < ordersReward.length && ordersReward[i].rewardTS < _untilTS;\\r\\n                i++\\r\\n            ) {\\r\\n                lastReward = ordersReward[i].rewardTS;\\r\\n            }\\r\\n            if (lastReward >= oneStake.start + FIVE_YEARS) {\\r\\n                return 0;\\r\\n            }\\r\\n            reward = calculateReward(\\r\\n                _account,\\r\\n                _stakingOrder,\\r\\n                lastReward,\\r\\n                _untilTS\\r\\n            );\\r\\n        }\\r\\n        return reward;\\r\\n    }\\r\\n\\r\\n    function availableRewardOfAcount(\\r\\n        address _account,\\r\\n        uint256 _untilTS\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 totalReward;\\r\\n\\r\\n        for (\\r\\n            uint256 stakingOrder = 0;\\r\\n            stakingOrder < stakingBalances[_account].length &&\\r\\n                stakingBalances[_account][stakingOrder].start < _untilTS;\\r\\n            stakingOrder++\\r\\n        ) {\\r\\n            totalReward += availableRewardOfStake(\\r\\n                _account,\\r\\n                stakingOrder,\\r\\n                _untilTS\\r\\n            );\\r\\n        }\\r\\n        return totalReward;\\r\\n    }\\r\\n\\r\\n    function availableRewardByDates(\\r\\n        address _account,\\r\\n        uint256 _stakingOrder,\\r\\n        uint256[] memory _untilTS\\r\\n    ) public view returns (uint256[] memory) {\\r\\n        uint256[] memory _rewards = new uint256[](_untilTS.length);\\r\\n\\r\\n        for (uint256 i = 0; i < _untilTS.length; i++) {\\r\\n            _rewards[i] = availableRewardOfStake(\\r\\n                _account,\\r\\n                _stakingOrder,\\r\\n                _untilTS[i]\\r\\n            );\\r\\n        }\\r\\n        return _rewards;\\r\\n    }\\r\\n\\r\\n    function getReward() public nonReentrant {\\r\\n        address acount = msg.sender;\\r\\n        uint256 reward = calculate(acount, block.timestamp);\\r\\n        require(reward > 0, \\\"Insufficient reward\\\");\\r\\n        require(\\r\\n            reward <= r3Token.balanceOf(address(this)),\\r\\n            \\\"Insufficient contract balance\\\"\\r\\n        );\\r\\n        r3Token.transfer(acount, reward);\\r\\n        calculateLastRewardTS(acount);\\r\\n        rewards[acount].push(reward);\\r\\n        totalRewards += reward;\\r\\n\\r\\n        emit RewardPaid(\\r\\n            acount,\\r\\n            reward,\\r\\n            rewards[acount].length - 1,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function stake(uint256 _amount) public nonReentrant {\\r\\n        require(_amount > 0, \\\"Amount must be more than 0\\\");\\r\\n\\r\\n        rToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        totalStakingBalanceRT += _amount;\\r\\n        createNewStakingSession(_amount);\\r\\n\\r\\n        emit Staked(msg.sender, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function calculateReward(address _account) public view returns (uint256) {\\r\\n        return availableRewardOfAcount(_account, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function boost(\\r\\n        uint8 _boostYear,\\r\\n        uint256 _startTS,\\r\\n        uint256 _days,\\r\\n        uint256 _extraPercentPerDay\\r\\n    ) public onlyOwner {\\r\\n        require(_days > 0, \\\"Incorrect days count\\\");\\r\\n        require(\\r\\n            _boostYear >= 1 && _boostYear <= 5,\\r\\n            \\\"Boost can be set only for 1-5 years\\\"\\r\\n        );\\r\\n        require(block.timestamp < _startTS, \\\"Wrong timestamps!\\\");\\r\\n        uint256 _endTS = _startTS + _days * DAY;\\r\\n        require(\\r\\n            notOvelrlaps(_startTS, _endTS, _boostYear),\\r\\n            \\\"Wrong timestamps!\\\"\\r\\n        );\\r\\n        BoostParams memory params = BoostParams(\\r\\n            true,\\r\\n            _boostYear,\\r\\n            boosts[_boostYear].length,\\r\\n            _startTS,\\r\\n            _endTS,\\r\\n            _extraPercentPerDay\\r\\n        );\\r\\n        boosts[_boostYear].push(params);\\r\\n    }\\r\\n\\r\\n    function removeBoost(\\r\\n        uint8 _boostYear,\\r\\n        uint256 _boostOrder\\r\\n    ) public onlyOwner {\\r\\n        require(\\r\\n            _boostOrder < boosts[_boostYear].length,\\r\\n            \\\"Ther is no such boost!\\\"\\r\\n        );\\r\\n        require(\\r\\n            boosts[_boostYear][_boostOrder].active == true,\\r\\n            \\\"Boost is already deactivated!\\\"\\r\\n        );\\r\\n        require(\\r\\n            boosts[_boostYear][_boostOrder].startTS > block.timestamp,\\r\\n            \\\"Boost can't be deactivated!\\\"\\r\\n        );\\r\\n        boosts[_boostYear][_boostOrder].active = false;\\r\\n    }\\r\\n\\r\\n    function withdrawRT(address _account, uint256 _amount) public onlyOwner {\\r\\n        require(\\r\\n            rToken.balanceOf(address(this)) >= _amount,\\r\\n            \\\"RANCH: over contract supply\\\"\\r\\n        );\\r\\n\\r\\n        rToken.transfer(_account, _amount);\\r\\n    }\\r\\n\\r\\n    function remainLatestRewardTimes(\\r\\n        StakeParams memory _oneStake,\\r\\n        uint256 _endTS\\r\\n    ) internal pure returns (uint256) {\\r\\n        uint256 oneStakeEnd = _oneStake.start + FIVE_YEARS;\\r\\n        uint256 timeForCount = oneStakeEnd < _endTS ? oneStakeEnd : _endTS;\\r\\n        return (timeForCount - _oneStake.lastRewardTS) / DAY;\\r\\n    }\\r\\n\\r\\n    function calculate(\\r\\n        address _account,\\r\\n        uint256 _endTS\\r\\n    ) internal returns (uint256) {\\r\\n        uint256 reward;\\r\\n        uint256 curRewardForOne;\\r\\n        uint256 countDays;\\r\\n        StakeParams memory _stakeParams;\\r\\n\\r\\n        for (\\r\\n            uint256 i = activeStake[_account];\\r\\n            i < stakingBalances[_account].length;\\r\\n            i++\\r\\n        ) {\\r\\n            _stakeParams = stakingBalances[_account][i];\\r\\n            countDays = remainLatestRewardTimes(_stakeParams, _endTS);\\r\\n            if (_endTS > _stakeParams.lastRewardTS && countDays > 0) {\\r\\n                curRewardForOne = calculateReward(\\r\\n                    _account,\\r\\n                    i,\\r\\n                    _stakeParams.lastRewardTS,\\r\\n                    _endTS\\r\\n                );\\r\\n                reward += curRewardForOne;\\r\\n                RewardParams memory params = RewardParams(\\r\\n                    curRewardForOne,\\r\\n                    _stakeParams.lastRewardTS + countDays * DAY\\r\\n                );\\r\\n                ordersRewards[_account][i].push(params);\\r\\n            }\\r\\n        }\\r\\n        return reward;\\r\\n    }\\r\\n\\r\\n    function calculateLastRewardTS(address _account) internal {\\r\\n        StakeParams storage _stakeParams;\\r\\n\\r\\n        for (\\r\\n            uint256 i = activeStake[_account];\\r\\n            i < stakingBalances[_account].length;\\r\\n            i++\\r\\n        ) {\\r\\n            _stakeParams = stakingBalances[_account][i];\\r\\n            _stakeParams.lastRewardTS +=\\r\\n                remainLatestRewardTimes(_stakeParams, block.timestamp) *\\r\\n                DAY;\\r\\n            if (_stakeParams.lastRewardTS == _stakeParams.start + FIVE_YEARS) {\\r\\n                _stakeParams.active = false;\\r\\n                activeStake[_account]++;\\r\\n                totalStakingBalanceRT -= _stakeParams.amount;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculateBoosts(\\r\\n        address _account,\\r\\n        uint256 _stakingOrder,\\r\\n        uint256 _countDateStart,\\r\\n        uint256 _endTS,\\r\\n        uint256 _year\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 countStartTS;\\r\\n        uint256 countEndTS;\\r\\n        uint256 reward;\\r\\n        uint256 stakeAmount = stakingBalances[_account][_stakingOrder].amount;\\r\\n\\r\\n        for (uint256 i = 0; i < boosts[_year].length; i++) {\\r\\n            BoostParams memory oneBoost = boosts[_year][i];\\r\\n            if (\\r\\n                !oneBoost.active ||\\r\\n                oneBoost.startTS >= _endTS ||\\r\\n                oneBoost.endTS <= _countDateStart\\r\\n            ) {\\r\\n                continue;\\r\\n            }\\r\\n            countStartTS = oneBoost.startTS > _countDateStart\\r\\n                ? oneBoost.startTS\\r\\n                : _countDateStart;\\r\\n            countEndTS = oneBoost.endTS < _endTS ? oneBoost.endTS : _endTS;\\r\\n            reward +=\\r\\n                ((countEndTS - countStartTS) / DAY) *\\r\\n                ((stakeAmount * oneBoost.extraPercentPerDay) /\\r\\n                    (100 * DECIMAL_FACTOR));\\r\\n        }\\r\\n        return reward;\\r\\n    }\\r\\n\\r\\n    function calculateReward(\\r\\n        address _account,\\r\\n        uint256 _stakingOrder,\\r\\n        uint256 _countDateStart,\\r\\n        uint256 _endTS\\r\\n    ) internal view returns (uint256) {\\r\\n        require(\\r\\n            stakingBalances[_account].length > _stakingOrder,\\r\\n            \\\"Wrong stakingOrder!\\\"\\r\\n        );\\r\\n        StakeParams memory oneStake = stakingBalances[_account][_stakingOrder];\\r\\n        require(\\r\\n            _countDateStart >= oneStake.start &&\\r\\n                _countDateStart <= oneStake.start + FIVE_YEARS,\\r\\n            \\\"Wrong countDateStart!\\\"\\r\\n        );\\r\\n        require(_endTS > _countDateStart, \\\"Wrong endTS!\\\");\\r\\n\\r\\n        uint256 stakeEndTS = oneStake.start + FIVE_YEARS;\\r\\n        uint256 countDateEnd = _countDateStart +\\r\\n            (((_endTS - _countDateStart) / DAY) * DAY);\\r\\n        if (countDateEnd == _countDateStart) {\\r\\n            return 0;\\r\\n        }\\r\\n        countDateEnd = stakeEndTS < countDateEnd ? stakeEndTS : countDateEnd;\\r\\n        uint256 reward;\\r\\n        uint256 year;\\r\\n        uint256 periodEnd;\\r\\n        for (\\r\\n            year = (_countDateStart - oneStake.start) / YEAR + 1;\\r\\n            year <= (countDateEnd - oneStake.start - 1) / YEAR;\\r\\n            year++\\r\\n        ) {\\r\\n            periodEnd = year * YEAR + oneStake.start;\\r\\n            reward +=\\r\\n                (((((periodEnd - _countDateStart) / DAY) * oneStake.amount) /\\r\\n                    100) * yearPercents[year - 1]) /\\r\\n                365;\\r\\n            reward += calculateBoosts(\\r\\n                _account,\\r\\n                _stakingOrder,\\r\\n                _countDateStart,\\r\\n                periodEnd,\\r\\n                year\\r\\n            );\\r\\n            _countDateStart = periodEnd;\\r\\n        }\\r\\n        reward +=\\r\\n            (((((countDateEnd - _countDateStart) / DAY) * oneStake.amount) /\\r\\n                100) * yearPercents[year - 1]) /\\r\\n            365;\\r\\n        reward += calculateBoosts(\\r\\n            _account,\\r\\n            _stakingOrder,\\r\\n            _countDateStart,\\r\\n            countDateEnd,\\r\\n            year\\r\\n        );\\r\\n        return reward;\\r\\n    }\\r\\n\\r\\n    function notOvelrlaps(\\r\\n        uint256 _startTS,\\r\\n        uint256 _endTS,\\r\\n        uint8 _boostYear\\r\\n    ) internal view returns (bool) {\\r\\n        for (uint256 i = 0; i < boosts[_boostYear].length; i++) {\\r\\n            BoostParams memory oneBoost = boosts[_boostYear][i];\\r\\n            if (!(oneBoost.startTS >= _endTS || oneBoost.endTS <= _startTS)) {\\r\\n                if (oneBoost.active) {\\r\\n                    return false;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function createNewStakingSession(uint256 _amount) internal {\\r\\n        StakeParams memory params = StakeParams(\\r\\n            true,\\r\\n            stakingBalances[msg.sender].length,\\r\\n            block.timestamp,\\r\\n            _amount,\\r\\n            block.timestamp\\r\\n        );\\r\\n        stakingBalances[msg.sender].push(params);\\r\\n\\r\\n        bool existingStaker = checkExistingStaker(msg.sender);\\r\\n\\r\\n        if (!existingStaker) stakers.push(msg.sender);\\r\\n    }\\r\\n\\r\\n    function checkExistingStaker(\\r\\n        address _account\\r\\n    ) internal view returns (bool) {\\r\\n        for (uint256 index = 0; index < stakers.length; index++) {\\r\\n            if (stakers[index] == _account) return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_r3TokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardOrder\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMAL_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIVE_YEARS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingOrder\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_untilTS\",\"type\":\"uint256[]\"}],\"name\":\"availableRewardByDates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_untilTS\",\"type\":\"uint256\"}],\"name\":\"availableRewardOfAcount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingOrder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_untilTS\",\"type\":\"uint256\"}],\"name\":\"availableRewardOfStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_boostYear\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_startTS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_extraPercentPerDay\",\"type\":\"uint256\"}],\"name\":\"boost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundContractBalanceR3T\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_year\",\"type\":\"uint256\"}],\"name\":\"getBoosts\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"boostYear\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"boostOrder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraPercentPerDay\",\"type\":\"uint256\"}],\"internalType\":\"struct R3TRANCH.BoostParams[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingOrder\",\"type\":\"uint256\"}],\"name\":\"getRewardsOfStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTS\",\"type\":\"uint256\"}],\"internalType\":\"struct R3TRANCH.RewardParams[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakingOrder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTS\",\"type\":\"uint256\"}],\"internalType\":\"struct R3TRANCH.StakeParams[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTotalEarnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTotalStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakingBalanceRT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_year\",\"type\":\"uint256\"}],\"name\":\"getYearPercents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"r3Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_boostYear\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_boostOrder\",\"type\":\"uint256\"}],\"name\":\"removeBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyR3T\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewStakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "R3TRANCH", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f97c30f0b31aee9b1ab087f8ccf5b14bf354d29f000000000000000000000000aaf1a7f9f50ae8f947812d19fbe3b122f06fae0a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}