{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    constructor (address token) {\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\nabstract contract ZFToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address private fundAddress;\r\n    address private fundAddress2;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) private _feeWhiteList;\r\n    mapping(address => bool) public _blackList;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter private _swapRouter;\r\n    address private _usdt;\r\n    mapping(address => bool) private _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor private _tokenDistributor;\r\n\r\n    uint256 public _buyFee = 600;  //\u4e70\u5165\u624b\u7eed\u8d39  /10000\r\n    uint256 public _sellFee = 600;  //\u5356\u51fa\u624b\u7eed\u8d39  /10000\r\n    uint256 public mk1 = 3;  //\u8425\u95001\r\n    uint256 public mk2=2;  //\u8425\u95002\r\n    uint256 public _lpFee = 0;    //\u56de\u6d41\u7684\u7a0e\u8d39\u6bd4\u4f8b\r\n    uint256 public _destroyFee = 0;  //\u9500\u6bc1\u7684\u624b\u7eed\u8d39\u6bd4\u4f8b\r\n    uint256 public _lpDividendFee = 100;  //LP\u5206\u7ea2\u7684\u624b\u7eed\u8d39\u6bd4\u4f8b\r\n    uint256 public startAddLPBlock;    //\u5f00\u59cb\u52a0\u6c60\u7684\u533a\u5757 \u9700\u8981\u5927\u4e8e0\r\n    uint256 public startTradeBlock;   //\u5f00\u59cb\u4ea4\u6613\u7684\u533a\u5757 \u9700\u8981\u5927\u4e8e0\r\n    address public _mainPair;      //\u4e3b\u4ea4\u6613\u6c60\r\n\r\n    uint256 public _limitAmount;   //\u9650\u8d2d\u6570\u91cf  =0  \u4e3a\u4e0d\u9650\u8d2d\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouterAddress, address USDTAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address FundAddress, address FundAddress2, address ReceiveAddress, uint256 LimitAmount\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        address usdt = USDTAddress;\r\n        IERC20(usdt).approve(RouterAddress, MAX);\r\n\r\n        _usdt = usdt;\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][RouterAddress] = MAX;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address usdtPair = swapFactory.createPair(address(this), usdt);\r\n        _swapPairList[usdtPair] = true;\r\n        _mainPair = usdtPair;\r\n\r\n        uint256 total = Supply * 10 ** Decimals;\r\n        _tTotal = total;\r\n\r\n        _balances[ReceiveAddress] = total;\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n\r\n        fundAddress = FundAddress;\r\n        fundAddress2 = FundAddress2;\r\n\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[FundAddress2] = true;\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        excludeLpProvider[address(0)] = true;\r\n        excludeLpProvider[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        lpRewardCondition = 30 * 10 ** IERC20(usdt).decimals();\r\n        _limitAmount = LimitAmount * 10 ** Decimals;\r\n\r\n        _tokenDistributor = new TokenDistributor(usdt);\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(!_blackList[from], \"blackList\");\r\n\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"balanceNotEnough\");\r\n\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            uint256 maxSellAmount = balance * 99999 / 100000;\r\n            if (amount > maxSellAmount) {\r\n                amount = maxSellAmount;\r\n            }\r\n        }\r\n\r\n        uint256 txFee;\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                require(0 < startTradeBlock, \"!Trading\");\r\n                if (0 == startTradeBlock) {\r\n                    require(0 < startAddLPBlock && _swapPairList[to], \"!startAddLP\");\r\n                }\r\n                uint256 buyFee = _buyFee;\r\n                uint256 sellFee = _sellFee;\r\n                if (!inSwap && _swapPairList[to]) {\r\n                    uint256 contractTokenBalance = balanceOf(address(this));\r\n                    if (contractTokenBalance > 0) {\r\n                        uint256 swapFee = buyFee + sellFee;\r\n                        uint256 numTokensSellToFund = amount * swapFee / 8000;\r\n                        if (numTokensSellToFund > contractTokenBalance) {\r\n                            numTokensSellToFund = contractTokenBalance;\r\n                        }\r\n                        swapTokenForFund(numTokensSellToFund, swapFee);\r\n                    }\r\n                }\r\n                if (_swapPairList[from]) {\r\n                    txFee = buyFee;\r\n                } else {\r\n                    txFee = sellFee;\r\n                }\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, txFee);\r\n\r\n        if (_limitAmount > 0 && !_swapPairList[to] && !_feeWhiteList[to]) {\r\n            require(_limitAmount >= balanceOf(to), \"exceed LimitAmount\");\r\n        }\r\n\r\n        if (_swapPairList[to]) {\r\n            addLpProvider(from);\r\n        }\r\n\r\n        if (from != address(this)) {\r\n            processLP(500000);\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 fee\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (fee > 0) {\r\n            feeAmount = tAmount * fee / 10000;\r\n            _takeTransfer(\r\n                sender,\r\n                address(this),\r\n                feeAmount\r\n            );\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount, uint256 swapFee) private lockTheSwap {\r\n        uint256 destroyAmount = tokenAmount * _destroyFee / swapFee;\r\n        if (destroyAmount > 0) {\r\n            tokenAmount -= destroyAmount;\r\n            _tokenTransfer(address(this), address(0x000000000000000000000000000000000000dEaD), destroyAmount, 0);\r\n            swapFee -= _destroyFee;\r\n            if (0 == tokenAmount) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        swapFee += swapFee;\r\n        uint256 lpFee = _lpFee;\r\n        uint256 lpAmount = tokenAmount * lpFee / swapFee;\r\n\r\n        address[] memory path = new address[](2);\r\n        address usdt = _usdt;\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount - lpAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n\r\n        swapFee -= lpFee;\r\n\r\n        IERC20 USDT = IERC20(usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(address(_tokenDistributor));\r\n        uint256 lpUsdt = usdtBalance * lpFee / swapFee;\r\n        uint256 lpDividendUsdt = usdtBalance * _lpDividendFee * 2 / swapFee;\r\n        USDT.transferFrom(address(_tokenDistributor), address(this), lpUsdt + lpDividendUsdt);\r\n\r\n        uint256 fundUsdt = usdtBalance - lpUsdt - lpDividendUsdt;\r\n        if (fundUsdt > 0) {\r\n            USDT.transferFrom(address(_tokenDistributor), fundAddress, fundUsdt *mk1/ (mk1+mk2));\r\n            USDT.transferFrom(address(_tokenDistributor), fundAddress2, fundUsdt *mk2/ (mk1+mk2));\r\n        }\r\n\r\n        if (lpAmount > 0 && lpUsdt > 0) {\r\n            _swapRouter.addLiquidity(\r\n                address(this), usdt, lpAmount, lpUsdt, 0, 0, fundAddress, block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n    //\u8bbe\u7f6e\u8425\u9500\u5730\u57401\r\n    function setFundAddress(address addr) external onlyFunder {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n    \r\n    //\u8bbe\u7f6e\u8425\u9500\u5730\u57402\r\n    function setFundAddress2(address addr) external onlyFunder {\r\n        fundAddress2 = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n   //\u8bbe\u7f6e\u4e70\u5356\u7684\u624b\u7eed\u8d39\r\n    function setFee(uint256 buyFee, uint256 sellFee) external onlyOwner {\r\n        _buyFee = buyFee;\r\n        _sellFee = sellFee;\r\n    }\r\n\r\n  //\u8bbe\u7f6eLP\u5206\u7ea2\u7684\u8d39\r\n    function setLPDividendFee(uint256 lpDividendFee) external onlyFunder {\r\n        _lpDividendFee = lpDividendFee;\r\n    }\r\n    //\u5f00\u59cb\u4ea4\u6613\r\n    function startTrade() external onlyOwner {\r\n        require(0 == startTradeBlock, \"trading\");\r\n        startTradeBlock = block.number;\r\n    }\r\n    //\u5173\u95ed\u4ea4\u6613\r\n    function closeTrade() external onlyOwner {\r\n        startTradeBlock = 0;\r\n    }\r\n    //\u5f00\u59cb\u52a0\u6c60\r\n    function startAddLP() external onlyOwner {\r\n        require(0 == startAddLPBlock, \"startedAddLP\");\r\n        startAddLPBlock = block.number;\r\n    }\r\n    //\u5173\u95ed\u52a0\u6c60\r\n    function closeAddLP() external onlyOwner {\r\n        startAddLPBlock = 0;\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u5730\u5740\u4ea4\u6613\u514d\u624b\u7eed\u8d39\r\n    function setFeeWhiteList(address addr, bool enable) external onlyFunder {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u8425\u95001\u548c\u8425\u95002\u7684\u5360\u6bd4\r\n    function setMK(uint256 a,uint256 b ) external onlyFunder {\r\n        mk1=a;\r\n        mk2=b;\r\n    }\r\n   //\u8bbe\u7f6e\u9ed1\u540d\u5355 \u9632\u6b62\u673a\u5668\u4eba\u7b49\u6076\u610f\u653b\u51fb\r\n    function setBlackList(address addr, bool enable) external onlyOwner {\r\n        _blackList[addr] = enable;\r\n    }\r\n   //\u8bbe\u7f6e\u6c60\u5b50\u7684\u5730\u5740  \u6c60\u5b50\u5730\u5740\u53ef\u4ee5\u8ba1\u7b97\u4ea4\u6613\u624b\u7eed\u8d39 \u5426\u5219\u6309\u666e\u901a\u5730\u5740\u8f6c\u8d26\u65e0\u624b\u7eed\u8d39\r\n    function setSwapPairList(address addr, bool enable) external onlyFunder {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function claimBalance() external onlyFunder {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount, address to) external onlyFunder {\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n\r\n    address[] public lpProviders;\r\n    mapping(address => uint256) public lpProviderIndex;\r\n    mapping(address => bool) public excludeLpProvider;\r\n\r\n    function getLPHolderLength() public view returns (uint256){\r\n        return lpProviders.length;\r\n    }\r\n\r\n    function addLpProvider(address adr) private {\r\n        if (0 == lpProviderIndex[adr]) {\r\n            if (0 == lpProviders.length || lpProviders[0] != adr) {\r\n                uint256 size;\r\n                assembly {size := extcodesize(adr)}\r\n                if (size > 0) {\r\n                    return;\r\n                }\r\n                lpProviderIndex[adr] = lpProviders.length;\r\n                lpProviders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 public currentIndex;\r\n    uint256 public lpRewardCondition;\r\n    uint256 public progressLPTime;\r\n    uint256 public _progressBlockDebt = 100;\r\n\r\n    function processLP(uint256 gas) private {\r\n        uint256 timestamp = block.timestamp;\r\n        if (progressLPTime + _progressBlockDebt > timestamp) {\r\n            return;\r\n        }\r\n        IERC20 mainpair = IERC20(_mainPair);\r\n        uint totalPair = mainpair.totalSupply();\r\n        if (0 == totalPair) {\r\n            return;\r\n        }\r\n\r\n        IERC20 token = IERC20(_usdt);\r\n        uint256 tokenBalance = token.balanceOf(address(this));\r\n        if (tokenBalance < lpRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 pairBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = lpProviders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = lpProviders[currentIndex];\r\n            pairBalance = mainpair.balanceOf(shareHolder);\r\n            if (pairBalance > 0 && !excludeLpProvider[shareHolder]) {\r\n                amount = tokenBalance * pairBalance / totalPair;\r\n                if (amount > 0) {\r\n                    token.transfer(shareHolder, amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressLPTime = timestamp;\r\n    }\r\n   //\u8bbe\u7f6e\u9650\u8d2d\u6570\u91cf\r\n    function setLimitAmount(uint256 amount) external onlyFunder {\r\n        _limitAmount = amount * 10 ** _decimals;\r\n    }\r\n   //\u8bbe\u7f6e\u4e3b\u6c60\u5b50\r\n    function setMainPair(address pair) external onlyFunder {\r\n        _mainPair = pair;\r\n    }\r\n\r\n    function setLPRewardCondition(uint256 amount) external onlyFunder {\r\n        lpRewardCondition = amount;\r\n    }\r\n     //\u6392\u9664LP\u5206\u7ea2\u7684\u5730\u5740\r\n    function setExcludeLPProvider(address addr, bool enable) external onlyFunder {\r\n        excludeLpProvider[addr] = enable;\r\n    }\r\n\r\n    modifier onlyFunder() {\r\n        require(_owner == msg.sender || fundAddress == msg.sender, \"!Funder\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n\r\ncontract ZF is ZFToken {\r\n    constructor() ZFToken(\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E), //swap\u8def\u7531\u5408\u7ea6 \u7528\u4e8e\u52a0\u6c60\u5b50\r\n        address(0x55d398326f99059fF775485246999027B3197955),  // USDT\u7684\u5408\u7ea6\u5730\u5740 \u7528\u4e8e\u5b9a\u4ef7\r\n        \"ZF\",\r\n        \"ZF\",\r\n        18,\r\n        930,\r\n        address(0xe6cd7f28EBd98279223838a2cE8B8102bCCd4ba5),  //\u8425\u95001  3%\u624b\u7eed\u8d39\r\n        address(0x2115032033eF085F27e9776aE032DC444F00Ab52),   //\u8425\u9500\u5730\u57402  2%\u624b\u7eed\u8d39\r\n        address(0xaE3DA1B84A555068E51680bE9825029AD3D86CEF),   //\u63a5\u6536\u4ee3\u5e01\u7684\u5730\u5740\r\n        5 //\u9650\u8d2d\u6570\u91cf\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_destroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_progressBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeAddLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeLpProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPHolderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpProviderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpProviders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mk1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mk2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressLPTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeLPProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpDividendFee\",\"type\":\"uint256\"}],\"name\":\"setLPDividendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLPRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"setMK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"setMainPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ZF", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9933249f5597968e283bc80de3cb6e20020fedc11ea463541fffa4ffcd2d8152"}