{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity >=0.8.17 <= 0.9.0;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    constructor(){\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnship(address newowner) public onlyOwner returns (bool) {\r\n        owner = newowner;\r\n        return true;\r\n    }\r\n}\r\nabstract contract Context{\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal pure virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract BonusPool is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address private constant USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n    address private ADE = address(0x9fE76B1c61681B2e30A3A79E202E2fC1597Efc09);\r\n    address private ADEF = address(0xC3416a7ebfb50a05E37e3427BCE3844eA427A060);\r\n    address private constant PancakeRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    uint256 leastAmount = 1;\r\n    ISwapRouter private _swapRouter = ISwapRouter(PancakeRouter);\r\n    ISwapFactory swapFactory = ISwapFactory(_swapRouter.factory());\r\n    address usdtPair = swapFactory.getPair(ADE, USDT);\r\n\r\n    bool private inPlant;\r\n    modifier lockThePlant {\r\n        require(!inPlant, 'LOCKED');\r\n        inPlant = true;\r\n        _;\r\n        inPlant = false;\r\n    }\r\n    constructor() {\r\n        IERC20(ADE).approve(PancakeRouter, type(uint256).max);\r\n        IERC20(USDT).approve(PancakeRouter, type(uint256).max);\r\n    }\r\n    function setADE(address token) public onlyOwner {\r\n        IERC20(ADE).approve(PancakeRouter, 0);\r\n        ADE = token;\r\n        IERC20(ADE).approve(PancakeRouter, type(uint256).max);\r\n        usdtPair = swapFactory.getPair(ADE, USDT);\r\n    }\r\n    function setADEF(address token) public onlyOwner {\r\n        ADEF = token;\r\n    }\r\n    function setLeastAmount(uint _amount) external onlyOwner {\r\n        leastAmount = _amount;\r\n    }\r\n    function getAmountsOut(uint256 value) private view returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = USDT;\r\n        path[1] = ADE;\r\n        return _swapRouter.getAmountsOut(value, path)[1];\r\n    }\r\n\r\n    function swap(uint256 _value) external lockThePlant{\r\n        require(_value >  0, \"value is zero\");\r\n        require(_value <= IERC20(USDT).balanceOf(msg.sender), \"ERC20: transfer amount exceeds balance\");\r\n\r\n        require(_value >= leastAmount,\"The planting quantity is too small\");\r\n\r\n        uint256 tokenAmount = getAmountsOut(_value).div(30).mul(100);\r\n\r\n        require(IERC20(ADE).balanceOf(address(this)) >= tokenAmount,\"Planting has ended\");\r\n        require(IERC20(ADEF).balanceOf(address(this)) >= tokenAmount,\"Planting has ended\");\r\n\r\n\r\n        IERC20(USDT).transferFrom(msg.sender,address(this), _value);//\u4ed8\u6b3eU\r\n\r\n        IERC20(ADEF).transfer(msg.sender, tokenAmount);\r\n\r\n        uint reserveA = IERC20(USDT).balanceOf(usdtPair);\r\n        uint reserveB = IERC20(ADE).balanceOf(usdtPair);\r\n        \r\n        uint amountB = _swapRouter.quote(_value, reserveA, reserveB);\r\n        _addLiquidity(_value,amountB);\r\n\r\n    }\r\n    function _addLiquidity(uint256 _usdtAmount , uint256 _tokenAmount) private {\r\n        _swapRouter.addLiquidity(\r\n            USDT,\r\n            ADE,\r\n            _usdtAmount,\r\n            _tokenAmount,\r\n            0,\r\n            0,\r\n            address(0),\r\n            (block.timestamp + 1)\r\n        );\r\n    }\r\n\r\n    function withdraw(address token,address _to,uint256 amount) public onlyOwner returns(bool) {\r\n        IERC20(token).transfer(_to,amount);\r\n        return true; \r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setADE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setADEF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setLeastAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"transferOwnship\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BonusPool", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4353df552a9441edb5e276160f4ef62921fb94110fc5b518bdf96681bd253f45"}