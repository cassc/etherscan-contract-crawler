{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract owned {\r\n    address payable public owner;\r\n    address payable internal newOwner;\r\n\r\n    constructor()  {\r\n        owner = payable ( msg.sender);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    //this flow is to prevent transferring ownership to wrong wallet by mistake\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        //emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = payable(address(0));\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private _status = 1;\r\n\r\n    modifier nonReentrant() {\r\n        require(_status == 1, \"ReentrancyGuard: reentrant call\");\r\n        _status = 2;\r\n        _;\r\n        _status = 1;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract OnlyFansApeConnect is owned,ReentrancyGuard {\r\n    struct Item {\r\n        bytes32 itemCodeHash; // Store the hash of the item code\r\n        bytes32 itemName;\r\n        uint256 price;\r\n        address itemOwner;\r\n        mapping(address=>bool)  userInfo;\r\n    }\r\n\r\n   \r\n\r\n\r\n    mapping(address=>uint) public  balance;\r\n    mapping(uint256 => Item) public items;\r\n    \r\n    uint256 public itemCount;\r\n\r\n\r\n    address payable public address1 = payable(0x0Dc64D5826C9137721696583D8f889806c45b850); // 3% share buyback\r\n    address payable public address2 = payable(0x7DF7f1D897A011f4487c7BD453E6dD1777b3E28F); // 2% share revenue\r\n    address payable public address3 = payable(0x32Fb293035490aA343a4c95c32B1CAe45aEAd69d); // 5% share development\r\n    uint public itemFee = 10;\r\n\r\n\r\n    event setAnItem(uint256 indexed itemId, bytes32 itemCode, bytes32 itemName, uint256 price,address _sender); \r\n    event boughtAnItem(address indexed  user,uint itemId);\r\n    event Withdraw(address indexed  user,uint indexed amount);\r\n    constructor() {\r\n        itemCount = 0;\r\n    }\r\n\r\n    function listItem(bytes32 _itemCode, bytes32 _itemName, uint256 _price) public nonReentrant returns (uint itemId) {\r\n        itemCount++;\r\n        bytes32 itemCodeHash = _itemCode; // Hash the item code\r\n        items[itemCount].itemCodeHash = itemCodeHash;\r\n        items[itemCount].itemName = _itemName;\r\n        items[itemCount].price = _price;\r\n        items[itemCount].itemOwner = msg.sender;\r\n        emit setAnItem(itemCount, _itemCode, _itemName, _price,msg.sender);\r\n        return itemCount;\r\n    }\r\n\r\n    function getItem(uint256 _itemId) public view returns ( bytes32,bytes32, uint256 ,address) {\r\n        require(_itemId > 0 && _itemId <= itemCount, \"Invalid item ID\");\r\n        Item storage item = items[_itemId];\r\n        return (item.itemCodeHash, item.itemName, item.price,item.itemOwner);\r\n    }\r\n\r\n\r\n\r\n    function payitem (uint itemId) public  payable  returns (bool success, bytes32 itemName,uint256 price,address itemOwner) {\r\n     require(msg.value >= items[itemId].price,\"not enough balance to pay\");\r\n     require(msg.sender != items[itemId].itemOwner,\"You cannot buy your own item\");\r\n     require(items[itemId].userInfo[msg.sender ] == false, \"You already bought this item\");\r\n\r\n     // Calculate the 10% of the received Ether\r\n     uint256 totalAmount = (msg.value * itemFee) / 100;\r\n\r\n\r\n    // Calculate the individual shares\r\n     uint256 share1 = (totalAmount * 3) / itemFee;\r\n     uint256 share2 = (totalAmount * 2) / itemFee;\r\n     uint256 share3 = (totalAmount * 5) / itemFee;\r\n\r\n     balance[address1] += share1;\r\n     balance[address2] += share2;\r\n     balance[address3] += share3;\r\n     balance[items[itemId].itemOwner] += (msg.value - totalAmount);\r\n     items[itemId].userInfo[msg.sender] = true;\r\n\r\n     emit boughtAnItem(msg.sender,itemId);\r\n     return  (true,items[itemId].itemName,items[itemId].price,items[itemId].itemOwner);\r\n    }\r\n\r\n    function getUserItemInfo (address _user,uint itemId) public view returns  (bool status)  {\r\n        return (items[itemId].userInfo[_user]);\r\n    }\r\n\r\n    function withdraw () public nonReentrant {\r\n        require(balance[msg.sender] > 0,\"you do not enough balance to withdraw\");\r\n        address payable to = payable(msg.sender);\r\n        to.transfer( balance[msg.sender]);\r\n        emit Withdraw(msg.sender,balance[msg.sender]);\r\n        balance[msg.sender] = 0;\r\n    }\r\n    \r\n    function withdraw(uint amount ) public nonReentrant {\r\n        require(balance[msg.sender] >= amount,\"you do not enough balance to withdraw\");\r\n        address payable to = payable(msg.sender);\r\n        to.transfer( amount);\r\n        emit Withdraw(msg.sender,amount);\r\n        balance[msg.sender] -= amount;\r\n\r\n    }\r\n\r\n    function changeFeeWallets(address _address1,address _address2,address _address3) external onlyOwner {\r\n        address1 = payable(_address1);\r\n        address2 = payable(_address2);\r\n        address3 = payable(_address3);\r\n    }\r\n\r\n\r\n    function changeItemFee(uint8 _itemFee) external onlyOwner {\r\n        itemFee = _itemFee;\r\n    }\r\n\r\n    function sendBalance() external onlyOwner {\r\n        uint256 bal = address(this).balance;\r\n        require(bal > 0, \"No balance to recover\");\r\n        owner.transfer(bal);\r\n    }\r\n\r\n    function sendTokens(address tokenAddress, uint256 amount,address to) public onlyOwner returns (bool success) {\r\n        bool valid = IERC20(tokenAddress).transfer(to, amount);\r\n        return valid;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"boughtAnItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"itemCode\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"itemName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"setAnItem\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"address1\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"address2\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"address3\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address3\",\"type\":\"address\"}],\"name\":\"changeFeeWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_itemFee\",\"type\":\"uint8\"}],\"name\":\"changeItemFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_itemId\",\"type\":\"uint256\"}],\"name\":\"getItem\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"getUserItemInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itemCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"itemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"items\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"itemCodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"itemName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_itemCode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_itemName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"payitem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"itemName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sendTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OnlyFansApeConnect", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://663b460e375b94a4d38c263dc14efdc9c16320f03cc53213dd24d4037c970c6b"}