{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Airdropper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.15;\\r\\n\\r\\nimport \\\"./interfaces/IBEP20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice This contract aids migration for a BEP20 token.\\r\\n * @dev This contract assumes the total supply of the new token is the same as the total supply of\\r\\n * old token, and will migrate tokens with 1:1 ratio.\\r\\n */\\r\\ncontract Airdropper {\\r\\n    /* Constant variables */\\r\\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\\r\\n\\r\\n    /* Address of the old token */\\r\\n    address public oldTokenAddress;\\r\\n\\r\\n    /* Address of the new token */\\r\\n    address public newTokenAddress;\\r\\n\\r\\n    /* To keep track of migrated tokens for burned address */\\r\\n    uint256 public burned;\\r\\n\\r\\n    /* Token that will be received in exchange of new token */\\r\\n    IBEP20 internal OldToken;\\r\\n\\r\\n    /* Token that will be airdropped */\\r\\n    IBEP20 internal NewToken;\\r\\n\\r\\n    constructor(address _oldTokenAddress) {\\r\\n        /* Set old BEP20 token */\\r\\n        oldTokenAddress = _oldTokenAddress;\\r\\n        OldToken = IBEP20(_oldTokenAddress);\\r\\n\\r\\n        /* Set new BEP20 token */\\r\\n        newTokenAddress = msg.sender;\\r\\n        NewToken = IBEP20(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Allows users to migrate all of their old tokens at once\\r\\n     */\\r\\n    function migrate() external {\\r\\n        uint256 _balance = OldToken.balanceOf(msg.sender);\\r\\n        require(_balance > 0, \\\"You have nothing to migrate\\\");\\r\\n\\r\\n        OldToken.transferFrom(msg.sender, address(this), _balance);\\r\\n        NewToken.transferFrom(address(this), msg.sender, _balance);\\r\\n\\r\\n        emit Migrated(msg.sender, _balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Allows users to migrate part of their old tokens\\r\\n     * @param _amount the amount of tokens to migrate\\r\\n     */\\r\\n    function migrate(uint256 _amount) external {\\r\\n        uint256 _balance = OldToken.balanceOf(msg.sender);\\r\\n        require(_amount > 0, \\\"Amount cannot be zero\\\");\\r\\n        require(_balance > 0, \\\"You have nothing to migrate\\\");\\r\\n        require(_balance >= _amount, \\\"Insufficient balance for migration\\\");\\r\\n\\r\\n        OldToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        NewToken.transferFrom(address(this), msg.sender, _amount);\\r\\n\\r\\n        emit Migrated(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Match the amount of new tokens in the burned address with the old tokens\\r\\n     * that were sent to the burned address\\r\\n     */\\r\\n    function burn() external {\\r\\n        uint256 _balance = OldToken.balanceOf(DEAD);\\r\\n        require(_balance > burned, \\\"Nothing to burn\\\");\\r\\n\\r\\n        uint256 _toBurn = _balance - burned;\\r\\n        burned = _balance;\\r\\n        NewToken.transferFrom(address(this), DEAD, _toBurn);\\r\\n\\r\\n        emit Burned(msg.sender, _toBurn);\\r\\n    }\\r\\n\\r\\n    event Migrated(address _user, uint256 _amount);\\r\\n    event Burned(address _caller, uint256 _burned);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.15;\\r\\n\\r\\ninterface IBEP20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    function allowance(address _owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_burned\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Migrated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Airdropper", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ea340b35207b2c795c5ccf9a1b78befc838516e8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}