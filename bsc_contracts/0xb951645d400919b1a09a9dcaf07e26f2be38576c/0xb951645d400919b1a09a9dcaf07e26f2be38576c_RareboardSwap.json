{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/v2/aggregate/RareboardSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./utils/ReentrancyGuard.sol\\\";\\nimport \\\"./markets/MarketRegistry.sol\\\";\\nimport \\\"../../interfaces/markets/tokens/IERC20.sol\\\";\\nimport \\\"../../interfaces/markets/tokens/IERC721.sol\\\";\\nimport \\\"../../interfaces/markets/tokens/IERC1155.sol\\\";\\n\\ncontract RareboardSwap is Ownable, ReentrancyGuard {\\n\\n    struct ERC20Details {\\n        address[] tokenAddrs;\\n        uint256[] amounts;\\n    }\\n     \\n    struct ERC721Details {\\n        address tokenAddr;\\n        uint256[] ids;\\n    }\\n\\n    struct ERC1155Details {\\n        address tokenAddr;\\n        uint256[] ids;\\n        uint256[] amounts;\\n    }\\n\\n    struct ConverstionDetails {\\n        bytes conversionData;\\n    }\\n\\n    struct AffiliateDetails {\\n        address affiliate;\\n        bool isActive;\\n    }\\n\\n    address public constant GOV = 0x05bD1346e7ed300C18abBC5819641B27c3d488C6;\\n    address public guardian;\\n    address public converter;\\n    uint256 public baseFees;\\n    bool public openForTrades;\\n    bool public openForFreeTrades;\\n    MarketRegistry public marketRegistry;\\n    AffiliateDetails[] public affiliates;\\n\\n    modifier isOpenForTrades() {\\n        require(openForTrades, \\\"trades not allowed\\\");\\n        _;\\n    }\\n\\n    constructor(address _marketRegistry, address _converter, address _guardian) {\\n        marketRegistry = MarketRegistry(_marketRegistry);\\n        converter = _converter;\\n        guardian = _guardian;\\n        baseFees = 0;\\n        openForTrades = true;\\n        affiliates.push(AffiliateDetails(GOV, true));\\n    }\\n\\n    // @audit This function is used to approve specific tokens to specific market contracts with high volume.\\n    // This is done in very rare cases for the gas optimization purposes. \\n    function setOneTimeApproval(IERC20 token, address operator, uint256 amount) external onlyOwner {\\n        token.approve(operator, amount);\\n    }\\n\\n    function updateGuardian(address _guardian) external onlyOwner {\\n        guardian = _guardian;\\n    }\\n\\n    function addAffiliate(address _affiliate) external onlyOwner {\\n        affiliates.push(AffiliateDetails(_affiliate, true));\\n    }\\n\\n    function updateAffiliate(uint256 _affiliateIndex, address _affiliate, bool _IsActive) external onlyOwner {\\n        affiliates[_affiliateIndex] = AffiliateDetails(_affiliate, _IsActive);\\n    }\\n\\n    function setBaseFees(uint256 _baseFees) external onlyOwner {\\n        baseFees = _baseFees;\\n    }\\n\\n    function setOpenForTrades(bool _openForTrades) external onlyOwner {\\n        openForTrades = _openForTrades;\\n    }\\n\\n    // @audit we will setup a system that will monitor the contract for any leftover\\n    // assets. In case any asset is leftover, the system should be able to trigger this\\n    // function to close all the trades until the leftover assets are rescued.\\n    function closeAllTrades() external {\\n        require(_msgSender() == guardian);\\n        openForTrades = false;\\n    }\\n\\n    function setConverter(address _converter) external onlyOwner {\\n        converter = _converter;\\n    }\\n\\n    function setMarketRegistry(MarketRegistry _marketRegistry) external onlyOwner {\\n        marketRegistry = _marketRegistry;\\n    }\\n\\n    function _transferEth(address _to, uint256 _amount) internal {\\n        bool callStatus;\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            callStatus := call(gas(), _to, _amount, 0, 0, 0, 0)\\n        }\\n        require(callStatus, \\\"_transferEth: Eth transfer failed\\\");\\n    }\\n\\n    function _collectFee(uint256[2] memory feeDetails) internal {\\n        require(feeDetails[1] >= baseFees, \\\"Insufficient fee\\\");\\n        if (feeDetails[1] > 0) {\\n            AffiliateDetails memory affiliateDetails = affiliates[feeDetails[0]];\\n            affiliateDetails.isActive\\n                ? _transferEth(affiliateDetails.affiliate, feeDetails[1])\\n                : _transferEth(GOV, feeDetails[1]);\\n        }\\n    }\\n\\n    function _checkCallResult(bool _success) internal pure {\\n        if (!_success) {\\n            // Copy revert reason from call\\n            assembly {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    function _transferFromHelper(\\n        ERC20Details memory erc20Details,\\n        ERC721Details[] memory erc721Details,\\n        ERC1155Details[] memory erc1155Details\\n    ) internal {\\n        // transfer ERC20 tokens from the sender to this contract\\n        for (uint256 i = 0; i < erc20Details.tokenAddrs.length; i++) {\\n            erc20Details.tokenAddrs[i].call(abi.encodeWithSelector(0x23b872dd, msg.sender, address(this), erc20Details.amounts[i]));\\n        }\\n\\n        // transfer ERC721 tokens from the sender to this contract\\n        for (uint256 i = 0; i < erc721Details.length; i++) {\\n            for (uint256 j = 0; j < erc721Details[i].ids.length; j++) {\\n                IERC721(erc721Details[i].tokenAddr).transferFrom(\\n                    _msgSender(),\\n                    address(this),\\n                    erc721Details[i].ids[j]\\n                );\\n            }\\n        }\\n\\n        // transfer ERC1155 tokens from the sender to this contract\\n        for (uint256 i = 0; i < erc1155Details.length; i++) {\\n            IERC1155(erc1155Details[i].tokenAddr).safeBatchTransferFrom(\\n                _msgSender(),\\n                address(this),\\n                erc1155Details[i].ids,\\n                erc1155Details[i].amounts,\\n                \\\"\\\"\\n            );\\n        }\\n    }\\n\\n    function _conversionHelper(\\n        ConverstionDetails[] memory _converstionDetails\\n    ) internal {\\n        for (uint256 i = 0; i < _converstionDetails.length; i++) {\\n            // convert to desired asset\\n            (bool success, ) = converter.delegatecall(_converstionDetails[i].conversionData);\\n            // check if the call passed successfully\\n            _checkCallResult(success);\\n        }\\n    }\\n\\n    function _trade(\\n        MarketRegistry.TradeDetails[] memory _tradeDetails\\n    ) internal {\\n        for (uint256 i = 0; i < _tradeDetails.length; i++) {\\n            // get market details\\n            (address _proxy, bool _isLib, bool _isActive) = marketRegistry.markets(_tradeDetails[i].marketId);\\n            // market should be active\\n            require(_isActive, \\\"_trade: InActive Market\\\");\\n            // execute trade\\n            (bool success, ) = _isLib\\n                ? _proxy.delegatecall(_tradeDetails[i].tradeData)\\n                : _proxy.call{value:_tradeDetails[i].value}(_tradeDetails[i].tradeData);\\n            // check if the call passed successfully\\n            _checkCallResult(success);\\n        }\\n    }\\n\\n    function _returnDust(address[] memory _tokens) internal {\\n        // return remaining ETH (if any)\\n        assembly {\\n            if gt(selfbalance(), 0) {\\n                let callStatus := call(\\n                    gas(),\\n                    caller(),\\n                    selfbalance(),\\n                    0,\\n                    0,\\n                    0,\\n                    0\\n                )\\n            }\\n        }\\n        // return remaining tokens (if any)\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            if (IERC20(_tokens[i]).balanceOf(address(this)) > 0) {\\n                _tokens[i].call(abi.encodeWithSelector(0xa9059cbb, msg.sender, IERC20(_tokens[i]).balanceOf(address(this))));\\n            }\\n        }\\n    }\\n    \\n    function batchBuyWithETH(\\n        MarketRegistry.TradeDetails[] memory tradeDetails\\n    ) payable external nonReentrant {\\n        // execute trades\\n        _trade(tradeDetails);\\n\\n        // return remaining ETH (if any)\\n        assembly {\\n            if gt(selfbalance(), 0) {\\n                let callStatus := call(\\n                    gas(),\\n                    caller(),\\n                    selfbalance(),\\n                    0,\\n                    0,\\n                    0,\\n                    0\\n                )\\n            }\\n        }\\n    }\\n\\n    function batchBuyWithERC20s(\\n        ERC20Details memory erc20Details,\\n        MarketRegistry.TradeDetails[] memory tradeDetails,\\n        ConverstionDetails[] memory converstionDetails,\\n        address[] memory dustTokens\\n    ) payable external nonReentrant {\\n        // transfer ERC20 tokens from the sender to this contract\\n        for (uint256 i = 0; i < erc20Details.tokenAddrs.length; i++) {\\n            erc20Details.tokenAddrs[i].call(abi.encodeWithSelector(0x23b872dd, msg.sender, address(this), erc20Details.amounts[i]));\\n        }\\n\\n        // Convert any assets if needed\\n        _conversionHelper(converstionDetails);\\n\\n        // execute trades\\n        _trade(tradeDetails);\\n\\n        // return dust tokens (if any)\\n        _returnDust(dustTokens);\\n    }\\n\\n    // swaps any combination of ERC-20/721/1155\\n    // User needs to approve assets before invoking swap\\n    // WARNING: DO NOT SEND TOKENS TO THIS FUNCTION DIRECTLY!!!\\n    function multiAssetSwap(\\n        ERC20Details memory erc20Details,\\n        ERC721Details[] memory erc721Details,\\n        ERC1155Details[] memory erc1155Details,\\n        ConverstionDetails[] memory converstionDetails,\\n        MarketRegistry.TradeDetails[] memory tradeDetails,\\n        address[] memory dustTokens,\\n        uint256[2] memory feeDetails    // [affiliateIndex, ETH fee in Wei]\\n    ) payable external isOpenForTrades nonReentrant {\\n        // collect fees\\n        _collectFee(feeDetails);\\n\\n        // transfer all tokens\\n        _transferFromHelper(\\n            erc20Details,\\n            erc721Details,\\n            erc1155Details\\n        );\\n\\n        // Convert any assets if needed\\n        _conversionHelper(converstionDetails);\\n\\n        // execute trades\\n        _trade(tradeDetails);\\n\\n        // return dust tokens (if any)\\n        _returnDust(dustTokens);\\n    }\\n\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) public virtual returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) public virtual returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return 0x150b7a02;\\n    }\\n\\n    // Used by ERC721BasicToken.sol\\n    function onERC721Received(\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return 0xf0b9e5ba;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        external\\n        virtual\\n        view\\n        returns (bool)\\n    {\\n        return interfaceId == this.supportsInterface.selector;\\n    }\\n\\n    receive() external payable {}\\n\\n    // Emergency function: In case any ETH get stuck in the contract unintentionally\\n    // Only owner can retrieve the asset balance to a recipient address\\n    function rescueETH(address recipient) onlyOwner external {\\n        _transferEth(recipient, address(this).balance);\\n    }\\n\\n    // Emergency function: In case any ERC20 tokens get stuck in the contract unintentionally\\n    // Only owner can retrieve the asset balance to a recipient address\\n    function rescueERC20(address asset, address recipient) onlyOwner external { \\n        asset.call(abi.encodeWithSelector(0xa9059cbb, recipient, IERC20(asset).balanceOf(address(this))));\\n    }\\n\\n    // Emergency function: In case any ERC721 tokens get stuck in the contract unintentionally\\n    // Only owner can retrieve the asset balance to a recipient address\\n    function rescueERC721(address asset, uint256[] calldata ids, address recipient) onlyOwner external {\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            IERC721(asset).transferFrom(address(this), recipient, ids[i]);\\n        }\\n    }\\n\\n    // Emergency function: In case any ERC1155 tokens get stuck in the contract unintentionally\\n    // Only owner can retrieve the asset balance to a recipient address\\n    function rescueERC1155(address asset, uint256[] calldata ids, uint256[] calldata amounts, address recipient) onlyOwner external {\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            IERC1155(asset).safeTransferFrom(address(this), recipient, ids[i], amounts[i], \\\"\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v2/aggregate/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 private reentrancyStatus = 1;\\n\\n    modifier nonReentrant() {\\n        require(reentrancyStatus == 1, \\\"REENTRANCY\\\");\\n\\n        reentrancyStatus = 2;\\n\\n        _;\\n\\n        reentrancyStatus = 1;\\n    }\\n}\"\r\n    },\r\n    \"contracts/v2/aggregate/markets/MarketRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MarketRegistry is Ownable {\\n\\n    struct TradeDetails {\\n        uint256 marketId;\\n        uint256 value;\\n        bytes tradeData;\\n    }\\n\\n    struct Market {\\n        address proxy;\\n        bool isLib;\\n        bool isActive;\\n    }\\n\\n    Market[] public markets;\\n\\n    constructor(address[] memory proxies, bool[] memory isLibs) {\\n        for (uint256 i = 0; i < proxies.length; i++) {\\n            markets.push(Market(proxies[i], isLibs[i], true));\\n        }\\n    }\\n\\n    function addMarket(address proxy, bool isLib) external onlyOwner {\\n        markets.push(Market(proxy, isLib, true));\\n    }\\n\\n    function setMarketStatus(uint256 marketId, bool newStatus) external onlyOwner {\\n        Market storage market = markets[marketId];\\n        market.isActive = newStatus;\\n    }\\n\\n    function setMarketProxy(uint256 marketId, address newProxy, bool isLib) external onlyOwner {\\n        Market storage market = markets[marketId];\\n        market.proxy = newProxy;\\n        market.isLib = isLib;\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/markets/tokens/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface IERC20 {\\n    /**\\n        * @dev Returns the amount of tokens owned by `account`.\\n        */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n        * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n        *\\n        * Returns a boolean value indicating whether the operation succeeded.\\n        *\\n        * Emits a {Transfer} event.\\n        */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/markets/tokens/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface IERC721 {\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n    ///  THEY MAY BE PERMANENTLY LOST\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) external;\\n    \\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n    \\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/markets/tokens/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\ninterface IERC1155 {\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) external;\\n\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_converter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GOV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_affiliate\",\"type\":\"address\"}],\"name\":\"addAffiliate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"affiliates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct RareboardSwap.ERC20Details\",\"name\":\"erc20Details\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"tradeData\",\"type\":\"bytes\"}],\"internalType\":\"struct MarketRegistry.TradeDetails[]\",\"name\":\"tradeDetails\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"conversionData\",\"type\":\"bytes\"}],\"internalType\":\"struct RareboardSwap.ConverstionDetails[]\",\"name\":\"converstionDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"dustTokens\",\"type\":\"address[]\"}],\"name\":\"batchBuyWithERC20s\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"tradeData\",\"type\":\"bytes\"}],\"internalType\":\"struct MarketRegistry.TradeDetails[]\",\"name\":\"tradeDetails\",\"type\":\"tuple[]\"}],\"name\":\"batchBuyWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeAllTrades\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"converter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketRegistry\",\"outputs\":[{\"internalType\":\"contract MarketRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct RareboardSwap.ERC20Details\",\"name\":\"erc20Details\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"internalType\":\"struct RareboardSwap.ERC721Details[]\",\"name\":\"erc721Details\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"internalType\":\"struct RareboardSwap.ERC1155Details[]\",\"name\":\"erc1155Details\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"conversionData\",\"type\":\"bytes\"}],\"internalType\":\"struct RareboardSwap.ConverstionDetails[]\",\"name\":\"converstionDetails\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"tradeData\",\"type\":\"bytes\"}],\"internalType\":\"struct MarketRegistry.TradeDetails[]\",\"name\":\"tradeDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"dustTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[2]\",\"name\":\"feeDetails\",\"type\":\"uint256[2]\"}],\"name\":\"multiAssetSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openForFreeTrades\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openForTrades\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"rescueERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"rescueERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseFees\",\"type\":\"uint256\"}],\"name\":\"setBaseFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_converter\",\"type\":\"address\"}],\"name\":\"setConverter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MarketRegistry\",\"name\":\"_marketRegistry\",\"type\":\"address\"}],\"name\":\"setMarketRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setOneTimeApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_openForTrades\",\"type\":\"bool\"}],\"name\":\"setOpenForTrades\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_affiliateIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_affiliate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_IsActive\",\"type\":\"bool\"}],\"name\":\"updateAffiliate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"updateGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RareboardSwap", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000e2a9cdaea178c24fc64109380171c884c004adf400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}