{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IPositionRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IPositionRouter {\\n    function increasePositionRequestKeysStart() external returns (uint256);\\n\\n    function decreasePositionRequestKeysStart() external returns (uint256);\\n\\n    function executeIncreasePositions(uint256 _count, address payable _executionFeeReceiver) external;\\n\\n    function executeDecreasePositions(uint256 _count, address payable _executionFeeReceiver) external;\\n\\n    function executeIncreasePosition(bytes32 _key, address payable _executionFeeReceiver) external returns (bool);\\n\\n    function cancelIncreasePosition(bytes32 _key, address payable _executionFeeReceiver) external returns (bool);\\n\\n    function executeDecreasePosition(bytes32 _key, address payable _executionFeeReceiver) external returns (bool);\\n\\n    function cancelDecreasePosition(bytes32 _key, address payable _executionFeeReceiver) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IVaultPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IVaultPriceFeed {\\n    function adjustmentBasisPoints(address _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isAdjustmentAdditive(address _token) external view returns (bool);\\n\\n    function setAdjustment(\\n        address _token,\\n        bool _isAdditive,\\n        uint256 _adjustmentBps\\n    ) external;\\n\\n    function setUseV2Pricing(bool _useV2Pricing) external;\\n\\n    function setIsAmmEnabled(bool _isEnabled) external;\\n\\n    function setIsSecondaryPriceEnabled(bool _isEnabled) external;\\n\\n    function setSpreadBasisPoints(address _token, uint256 _spreadBasisPoints)\\n        external;\\n\\n    function setSpreadThresholdBasisPoints(uint256 _spreadThresholdBasisPoints)\\n        external;\\n\\n    function setFavorPrimaryPrice(bool _favorPrimaryPrice) external;\\n\\n    function setPriceSampleSpace(uint256 _priceSampleSpace) external;\\n\\n    function setMaxStrictPriceDeviation(uint256 _maxStrictPriceDeviation)\\n        external;\\n\\n    function getPrice(\\n        address _token,\\n        bool _maximise,\\n        bool _includeAmmPrice,\\n        bool _useSwapPricing\\n    ) external view returns (uint256);\\n\\n    function getAmmPrice(address _token) external view returns (uint256);\\n\\n    function getLatestPrimaryPrice(address _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getPrimaryPrice(address _token, bool _maximise)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setTokenConfig(\\n        address _token,\\n        address _priceFeed,\\n        uint256 _priceDecimals,\\n        bool _isStrictStable,\\n        uint256 _stalePriceThreshold\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/FastPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ISecondaryPriceFeed.sol\\\";\\nimport \\\"./interfaces/IFastPriceFeed.sol\\\";\\nimport \\\"./interfaces/IFastPriceEvents.sol\\\";\\nimport \\\"../core/interfaces/IVaultPriceFeed.sol\\\";\\nimport \\\"../core/interfaces/IPositionRouter.sol\\\";\\n\\ncontract FastPriceFeed is ISecondaryPriceFeed, IFastPriceFeed, Ownable {\\n    // fit data in a uint256 slot to save gas costs\\n    struct PriceDataItem {\\n        uint160 refPrice; // Chainlink price\\n        uint32 refTime; // last updated at time\\n        uint32 cumulativeRefDelta; // cumulative Chainlink price delta\\n        uint32 cumulativeFastDelta; // cumulative fast price delta\\n    }\\n\\n    uint256 public constant PRICE_PRECISION = 10**30;\\n\\n    uint256 public constant CUMULATIVE_DELTA_PRECISION = 10 * 1000 * 1000;\\n\\n    uint256 public constant MAX_REF_PRICE = type(uint160).max;\\n    uint256 public constant MAX_CUMULATIVE_REF_DELTA = type(uint32).max;\\n    uint256 public constant MAX_CUMULATIVE_FAST_DELTA = type(uint32).max;\\n\\n    // uint256(~0) is 256 bits of 1s\\n    // shift the 1s by (256 - 32) to get (256 - 32) 0s followed by 32 1s\\n    uint256 public constant BITMASK_32 = type(uint256).max >> (256 - 32);\\n\\n    uint256 public constant BASIS_POINTS_DIVISOR = 10000;\\n\\n    uint256 public constant MAX_PRICE_DURATION = 30 minutes;\\n\\n    bool public isInitialized;\\n    bool public isSpreadEnabled = false;\\n\\n    address public vaultPriceFeed;\\n    address public fastPriceEvents;\\n\\n    address public tokenManager;\\n\\n    address public positionRouter;\\n\\n    uint256 public override lastUpdatedAt;\\n    uint256 public override lastUpdatedBlock;\\n\\n    uint256 public priceDuration;\\n    uint256 public maxPriceUpdateDelay;\\n    uint256 public spreadBasisPointsIfInactive;\\n    uint256 public spreadBasisPointsIfChainError;\\n    uint256 public minBlockInterval;\\n    uint256 public maxTimeDeviation;\\n\\n    uint256 public priceDataInterval;\\n\\n    // allowed deviation from primary price\\n    uint256 public maxDeviationBasisPoints;\\n\\n    uint256 public minAuthorizations;\\n    uint256 public disableFastPriceVoteCount = 0;\\n\\n    mapping(address => bool) public isUpdater;\\n\\n    mapping(address => uint256) public prices;\\n    mapping(address => PriceDataItem) public priceData;\\n    mapping(address => uint256) public maxCumulativeDeltaDiffs;\\n\\n    mapping(address => bool) public isSigner;\\n    mapping(address => bool) public disableFastPriceVotes;\\n\\n    // array of tokens used in setCompactedPrices, saves L1 calldata gas costs\\n    address[] public tokens;\\n    // array of tokenPrecisions used in setCompactedPrices, saves L1 calldata gas costs\\n    // if the token price will be sent with 3 decimals, then tokenPrecision for that token\\n    // should be 10 ** 3\\n    uint256[] public tokenPrecisions;\\n\\n    event DisableFastPrice(address signer);\\n    event EnableFastPrice(address signer);\\n    event PriceData(\\n        address token,\\n        uint256 refPrice,\\n        uint256 fastPrice,\\n        uint256 cumulativeRefDelta,\\n        uint256 cumulativeFastDelta\\n    );\\n    event MaxCumulativeDeltaDiffExceeded(\\n        address token,\\n        uint256 refPrice,\\n        uint256 fastPrice,\\n        uint256 cumulativeRefDelta,\\n        uint256 cumulativeFastDelta\\n    );\\n\\n    modifier onlySigner() {\\n        require(isSigner[msg.sender], \\\"FastPriceFeed: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyUpdater() {\\n        require(isUpdater[msg.sender], \\\"FastPriceFeed: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyTokenManager() {\\n        require(msg.sender == tokenManager, \\\"FastPriceFeed: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        uint256 _priceDuration,\\n        uint256 _maxPriceUpdateDelay,\\n        uint256 _minBlockInterval,\\n        uint256 _maxDeviationBasisPoints,\\n        address _fastPriceEvents,\\n        address _tokenManager,\\n        address _positionRouter\\n    ) {\\n        require(\\n            _priceDuration <= MAX_PRICE_DURATION,\\n            \\\"FastPriceFeed: invalid _priceDuration\\\"\\n        );\\n        priceDuration = _priceDuration;\\n        maxPriceUpdateDelay = _maxPriceUpdateDelay;\\n        minBlockInterval = _minBlockInterval;\\n        maxDeviationBasisPoints = _maxDeviationBasisPoints;\\n        fastPriceEvents = _fastPriceEvents;\\n        tokenManager = _tokenManager;\\n        positionRouter = _positionRouter;\\n    }\\n\\n    function initialize(\\n        uint256 _minAuthorizations,\\n        address[] memory _signers,\\n        address[] memory _updaters\\n    ) public onlyOwner {\\n        require(!isInitialized, \\\"FastPriceFeed: already initialized\\\");\\n        isInitialized = true;\\n\\n        minAuthorizations = _minAuthorizations;\\n\\n        for (uint256 i = 0; i < _signers.length; i++) {\\n            address signer = _signers[i];\\n            isSigner[signer] = true;\\n        }\\n\\n        for (uint256 i = 0; i < _updaters.length; i++) {\\n            address updater = _updaters[i];\\n            isUpdater[updater] = true;\\n        }\\n    }\\n\\n    function setSigner(address _account, bool _isActive)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        isSigner[_account] = _isActive;\\n    }\\n\\n    function setUpdater(address _account, bool _isActive)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        isUpdater[_account] = _isActive;\\n    }\\n\\n    function setFastPriceEvents(address _fastPriceEvents) external onlyOwner {\\n        fastPriceEvents = _fastPriceEvents;\\n    }\\n\\n    function setVaultPriceFeed(address _vaultPriceFeed)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        vaultPriceFeed = _vaultPriceFeed;\\n    }\\n\\n    function setMaxTimeDeviation(uint256 _maxTimeDeviation) external onlyOwner {\\n        maxTimeDeviation = _maxTimeDeviation;\\n    }\\n\\n    function setPriceDuration(uint256 _priceDuration)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(\\n            _priceDuration <= MAX_PRICE_DURATION,\\n            \\\"FastPriceFeed: invalid _priceDuration\\\"\\n        );\\n        priceDuration = _priceDuration;\\n    }\\n\\n    function setMaxPriceUpdateDelay(uint256 _maxPriceUpdateDelay)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        maxPriceUpdateDelay = _maxPriceUpdateDelay;\\n    }\\n\\n    function setSpreadBasisPointsIfInactive(\\n        uint256 _spreadBasisPointsIfInactive\\n    ) external override onlyOwner {\\n        spreadBasisPointsIfInactive = _spreadBasisPointsIfInactive;\\n    }\\n\\n    function setSpreadBasisPointsIfChainError(\\n        uint256 _spreadBasisPointsIfChainError\\n    ) external override onlyOwner {\\n        spreadBasisPointsIfChainError = _spreadBasisPointsIfChainError;\\n    }\\n\\n    function setMinBlockInterval(uint256 _minBlockInterval)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        minBlockInterval = _minBlockInterval;\\n    }\\n\\n    function setIsSpreadEnabled(bool _isSpreadEnabled)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        isSpreadEnabled = _isSpreadEnabled;\\n    }\\n\\n    function setLastUpdatedAt(uint256 _lastUpdatedAt) external onlyOwner {\\n        lastUpdatedAt = _lastUpdatedAt;\\n    }\\n\\n    function setTokenManager(address _tokenManager) external onlyTokenManager {\\n        tokenManager = _tokenManager;\\n    }\\n\\n    function setMaxDeviationBasisPoints(uint256 _maxDeviationBasisPoints)\\n        external\\n        override\\n        onlyTokenManager\\n    {\\n        maxDeviationBasisPoints = _maxDeviationBasisPoints;\\n    }\\n\\n    function setMaxCumulativeDeltaDiffs(\\n        address[] memory _tokens,\\n        uint256[] memory _maxCumulativeDeltaDiffs\\n    ) external override onlyTokenManager {\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            maxCumulativeDeltaDiffs[token] = _maxCumulativeDeltaDiffs[i];\\n        }\\n    }\\n\\n    function setPriceDataInterval(uint256 _priceDataInterval)\\n        external\\n        override\\n        onlyTokenManager\\n    {\\n        priceDataInterval = _priceDataInterval;\\n    }\\n\\n    function setMinAuthorizations(uint256 _minAuthorizations)\\n        external\\n        onlyTokenManager\\n    {\\n        minAuthorizations = _minAuthorizations;\\n    }\\n\\n    function setTokens(\\n        address[] memory _tokens,\\n        uint256[] memory _tokenPrecisions\\n    ) external onlyOwner {\\n        require(\\n            _tokens.length == _tokenPrecisions.length,\\n            \\\"FastPriceFeed: invalid lengths\\\"\\n        );\\n        tokens = _tokens;\\n        tokenPrecisions = _tokenPrecisions;\\n    }\\n\\n    function setPrices(\\n        address[] memory _tokens,\\n        uint256[] memory _prices,\\n        uint256 _timestamp\\n    ) external onlyUpdater {\\n        bool shouldUpdate = _setLastUpdatedValues(_timestamp);\\n\\n        if (shouldUpdate) {\\n            address _fastPriceEvents = fastPriceEvents;\\n            address _vaultPriceFeed = vaultPriceFeed;\\n\\n            for (uint256 i = 0; i < _tokens.length; i++) {\\n                address token = _tokens[i];\\n                _setPrice(token, _prices[i], _vaultPriceFeed, _fastPriceEvents);\\n            }\\n        }\\n    }\\n\\n    function setCompactedPrices(\\n        uint256[] memory _priceBitArray,\\n        uint256 _timestamp\\n    ) external onlyUpdater {\\n        bool shouldUpdate = _setLastUpdatedValues(_timestamp);\\n\\n        if (shouldUpdate) {\\n            address _fastPriceEvents = fastPriceEvents;\\n            address _vaultPriceFeed = vaultPriceFeed;\\n\\n            for (uint256 i = 0; i < _priceBitArray.length; i++) {\\n                uint256 priceBits = _priceBitArray[i];\\n\\n                for (uint256 j = 0; j < 8; j++) {\\n                    uint256 index = i * 8 + j;\\n                    if (index >= tokens.length) {\\n                        return;\\n                    }\\n\\n                    uint256 startBit = 32 * j;\\n                    uint256 price = (priceBits >> startBit) & BITMASK_32;\\n\\n                    address token = tokens[i * 8 + j];\\n                    uint256 tokenPrecision = tokenPrecisions[i * 8 + j];\\n                    uint256 adjustedPrice = (price * PRICE_PRECISION) /\\n                        tokenPrecision;\\n\\n                    _setPrice(\\n                        token,\\n                        adjustedPrice,\\n                        _vaultPriceFeed,\\n                        _fastPriceEvents\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function setPricesWithBits(uint256 _priceBits, uint256 _timestamp)\\n        external\\n        override\\n        onlyUpdater\\n    {\\n        _setPricesWithBits(_priceBits, _timestamp);\\n    }\\n\\n    function setPricesWithBitsAndExecute(\\n        uint256 _priceBits,\\n        uint256 _timestamp,\\n        uint256 _endIndexForIncreasePositions,\\n        uint256 _endIndexForDecreasePositions,\\n        uint256 _maxIncreasePositions,\\n        uint256 _maxDecreasePositions\\n    ) external onlyUpdater {\\n        _setPricesWithBits(_priceBits, _timestamp);\\n\\n        IPositionRouter _positionRouter = IPositionRouter(positionRouter);\\n        uint256 maxEndIndexForIncrease = _positionRouter\\n            .increasePositionRequestKeysStart() + _maxIncreasePositions;\\n        uint256 maxEndIndexForDecrease = _positionRouter\\n            .decreasePositionRequestKeysStart() + _maxDecreasePositions;\\n\\n        if (_endIndexForIncreasePositions > maxEndIndexForIncrease) {\\n            _endIndexForIncreasePositions = maxEndIndexForIncrease;\\n        }\\n\\n        if (_endIndexForDecreasePositions > maxEndIndexForDecrease) {\\n            _endIndexForDecreasePositions = maxEndIndexForDecrease;\\n        }\\n\\n        _positionRouter.executeIncreasePositions(\\n            _endIndexForIncreasePositions,\\n            payable(msg.sender)\\n        );\\n        _positionRouter.executeDecreasePositions(\\n            _endIndexForDecreasePositions,\\n            payable(msg.sender)\\n        );\\n    }\\n\\n    function disableFastPrice() external onlySigner {\\n        require(\\n            !disableFastPriceVotes[msg.sender],\\n            \\\"FastPriceFeed: already voted\\\"\\n        );\\n        disableFastPriceVotes[msg.sender] = true;\\n        disableFastPriceVoteCount += 1;\\n\\n        emit DisableFastPrice(msg.sender);\\n    }\\n\\n    function enableFastPrice() external onlySigner {\\n        require(\\n            disableFastPriceVotes[msg.sender],\\n            \\\"FastPriceFeed: already enabled\\\"\\n        );\\n        disableFastPriceVotes[msg.sender] = false;\\n        disableFastPriceVoteCount -= 1;\\n\\n        emit EnableFastPrice(msg.sender);\\n    }\\n\\n    // under regular operation, the fastPrice (prices[token]) is returned and there is no spread returned from this function,\\n    // though VaultPriceFeed might apply its own spread\\n    //\\n    // if the fastPrice has not been updated within priceDuration then it is ignored and only _refPrice with a spread is used (spread: spreadBasisPointsIfInactive)\\n    // in case the fastPrice has not been updated for maxPriceUpdateDelay then the _refPrice with a larger spread is used (spread: spreadBasisPointsIfChainError)\\n    //\\n    // there will be a spread from the _refPrice to the fastPrice in the following cases:\\n    // - in case isSpreadEnabled is set to true\\n    // - in case the maxDeviationBasisPoints between _refPrice and fastPrice is exceeded\\n    // - in case watchers flag an issue\\n    // - in case the cumulativeFastDelta exceeds the cumulativeRefDelta by the maxCumulativeDeltaDiff\\n    function getPrice(\\n        address _token,\\n        uint256 _refPrice,\\n        bool _maximise\\n    ) external view override returns (uint256) {\\n        if (block.timestamp > lastUpdatedAt + maxPriceUpdateDelay) {\\n            if (_maximise) {\\n                return\\n                    (_refPrice *\\n                        (BASIS_POINTS_DIVISOR +\\n                            spreadBasisPointsIfChainError)) /\\n                    BASIS_POINTS_DIVISOR;\\n            }\\n\\n            return\\n                (_refPrice *\\n                    (BASIS_POINTS_DIVISOR - spreadBasisPointsIfChainError)) /\\n                BASIS_POINTS_DIVISOR;\\n        }\\n\\n        if (block.timestamp > lastUpdatedAt + priceDuration) {\\n            if (_maximise) {\\n                return\\n                    (_refPrice *\\n                        (BASIS_POINTS_DIVISOR + spreadBasisPointsIfInactive)) /\\n                    BASIS_POINTS_DIVISOR;\\n            }\\n\\n            return\\n                (_refPrice *\\n                    (BASIS_POINTS_DIVISOR - spreadBasisPointsIfInactive)) /\\n                BASIS_POINTS_DIVISOR;\\n        }\\n\\n        uint256 fastPrice = prices[_token];\\n        if (fastPrice == 0) {\\n            return _refPrice;\\n        }\\n\\n        uint256 diffBasisPoints = _refPrice > fastPrice\\n            ? _refPrice - fastPrice\\n            : fastPrice - _refPrice;\\n        diffBasisPoints = (diffBasisPoints * BASIS_POINTS_DIVISOR) / _refPrice;\\n\\n        // create a spread between the _refPrice and the fastPrice if the maxDeviationBasisPoints is exceeded\\n        // or if watchers have flagged an issue with the fast price\\n        bool hasSpread = !favorFastPrice(_token) ||\\n            diffBasisPoints > maxDeviationBasisPoints;\\n\\n        if (hasSpread) {\\n            // return the higher of the two prices\\n            if (_maximise) {\\n                return _refPrice > fastPrice ? _refPrice : fastPrice;\\n            }\\n\\n            // return the lower of the two prices\\n            return _refPrice < fastPrice ? _refPrice : fastPrice;\\n        }\\n\\n        return fastPrice;\\n    }\\n\\n    function favorFastPrice(address _token) public view returns (bool) {\\n        if (isSpreadEnabled) {\\n            return false;\\n        }\\n\\n        if (disableFastPriceVoteCount >= minAuthorizations) {\\n            // force a spread if watchers have flagged an issue with the fast price\\n            return false;\\n        }\\n\\n        (\\n            ,\\n            ,\\n            /* uint256 prevRefPrice */\\n            /* uint256 refTime */\\n            uint256 cumulativeRefDelta,\\n            uint256 cumulativeFastDelta\\n        ) = getPriceData(_token);\\n        if (\\n            cumulativeFastDelta > cumulativeRefDelta &&\\n            cumulativeFastDelta - cumulativeRefDelta >\\n            maxCumulativeDeltaDiffs[_token]\\n        ) {\\n            // force a spread if the cumulative delta for the fast price feed exceeds the cumulative delta\\n            // for the Chainlink price feed by the maxCumulativeDeltaDiff allowed\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    function getPriceData(address _token)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        PriceDataItem memory data = priceData[_token];\\n        return (\\n            uint256(data.refPrice),\\n            uint256(data.refTime),\\n            uint256(data.cumulativeRefDelta),\\n            uint256(data.cumulativeFastDelta)\\n        );\\n    }\\n\\n    function _setPricesWithBits(uint256 _priceBits, uint256 _timestamp)\\n        private\\n    {\\n        bool shouldUpdate = _setLastUpdatedValues(_timestamp);\\n\\n        if (shouldUpdate) {\\n            address _fastPriceEvents = fastPriceEvents;\\n            address _vaultPriceFeed = vaultPriceFeed;\\n\\n            for (uint256 j = 0; j < 8; j++) {\\n                uint256 index = j;\\n                if (index >= tokens.length) {\\n                    return;\\n                }\\n\\n                uint256 startBit = 32 * j;\\n                uint256 price = (_priceBits >> startBit) & BITMASK_32;\\n\\n                address token = tokens[j];\\n                uint256 tokenPrecision = tokenPrecisions[j];\\n                uint256 adjustedPrice = (price * PRICE_PRECISION) /\\n                    tokenPrecision;\\n\\n                _setPrice(\\n                    token,\\n                    adjustedPrice,\\n                    _vaultPriceFeed,\\n                    _fastPriceEvents\\n                );\\n            }\\n        }\\n    }\\n\\n    function _setPrice(\\n        address _token,\\n        uint256 _price,\\n        address _vaultPriceFeed,\\n        address _fastPriceEvents\\n    ) private {\\n        if (_vaultPriceFeed != address(0)) {\\n            uint256 refPrice = IVaultPriceFeed(_vaultPriceFeed)\\n                .getLatestPrimaryPrice(_token);\\n            uint256 fastPrice = prices[_token];\\n\\n            (\\n                uint256 prevRefPrice,\\n                uint256 refTime,\\n                uint256 cumulativeRefDelta,\\n                uint256 cumulativeFastDelta\\n            ) = getPriceData(_token);\\n\\n            if (prevRefPrice > 0) {\\n                uint256 refDeltaAmount = refPrice > prevRefPrice\\n                    ? refPrice - prevRefPrice\\n                    : prevRefPrice - refPrice;\\n                uint256 fastDeltaAmount = fastPrice > _price\\n                    ? fastPrice - _price\\n                    : _price - fastPrice;\\n\\n                // reset cumulative delta values if it is a new time window\\n                if (\\n                    refTime / priceDataInterval !=\\n                    block.timestamp / priceDataInterval\\n                ) {\\n                    cumulativeRefDelta = 0;\\n                    cumulativeFastDelta = 0;\\n                }\\n\\n                cumulativeRefDelta =\\n                    cumulativeRefDelta +\\n                    ((refDeltaAmount * CUMULATIVE_DELTA_PRECISION) /\\n                        prevRefPrice);\\n                cumulativeFastDelta =\\n                    cumulativeFastDelta +\\n                    ((fastDeltaAmount * CUMULATIVE_DELTA_PRECISION) /\\n                        fastPrice);\\n            }\\n\\n            if (\\n                cumulativeFastDelta > cumulativeRefDelta &&\\n                cumulativeFastDelta - cumulativeRefDelta >\\n                maxCumulativeDeltaDiffs[_token]\\n            ) {\\n                emit MaxCumulativeDeltaDiffExceeded(\\n                    _token,\\n                    refPrice,\\n                    fastPrice,\\n                    cumulativeRefDelta,\\n                    cumulativeFastDelta\\n                );\\n            }\\n\\n            _setPriceData(\\n                _token,\\n                refPrice,\\n                cumulativeRefDelta,\\n                cumulativeFastDelta\\n            );\\n            emit PriceData(\\n                _token,\\n                refPrice,\\n                fastPrice,\\n                cumulativeRefDelta,\\n                cumulativeFastDelta\\n            );\\n        }\\n\\n        prices[_token] = _price;\\n        _emitPriceEvent(_fastPriceEvents, _token, _price);\\n    }\\n\\n    function _setPriceData(\\n        address _token,\\n        uint256 _refPrice,\\n        uint256 _cumulativeRefDelta,\\n        uint256 _cumulativeFastDelta\\n    ) private {\\n        require(_refPrice < MAX_REF_PRICE, \\\"FastPriceFeed: invalid refPrice\\\");\\n        // skip validation of block.timestamp, it should only be out of range after the year 2100\\n        require(\\n            _cumulativeRefDelta < MAX_CUMULATIVE_REF_DELTA,\\n            \\\"FastPriceFeed: invalid cumulativeRefDelta\\\"\\n        );\\n        require(\\n            _cumulativeFastDelta < MAX_CUMULATIVE_FAST_DELTA,\\n            \\\"FastPriceFeed: invalid cumulativeFastDelta\\\"\\n        );\\n\\n        priceData[_token] = PriceDataItem(\\n            uint160(_refPrice),\\n            uint32(block.timestamp),\\n            uint32(_cumulativeRefDelta),\\n            uint32(_cumulativeFastDelta)\\n        );\\n    }\\n\\n    function _emitPriceEvent(\\n        address _fastPriceEvents,\\n        address _token,\\n        uint256 _price\\n    ) private {\\n        if (_fastPriceEvents == address(0)) {\\n            return;\\n        }\\n\\n        IFastPriceEvents(_fastPriceEvents).emitPriceEvent(_token, _price);\\n    }\\n\\n    function _setLastUpdatedValues(uint256 _timestamp) private returns (bool) {\\n        if (minBlockInterval > 0) {\\n            require(\\n                block.number - lastUpdatedBlock >= minBlockInterval,\\n                \\\"FastPriceFeed: minBlockInterval not yet passed\\\"\\n            );\\n        }\\n\\n        uint256 _maxTimeDeviation = maxTimeDeviation;\\n        require(\\n            _timestamp > block.timestamp - _maxTimeDeviation,\\n            \\\"FastPriceFeed: _timestamp below allowed range\\\"\\n        );\\n        require(\\n            _timestamp < block.timestamp + _maxTimeDeviation,\\n            \\\"FastPriceFeed: _timestamp exceeds allowed range\\\"\\n        );\\n\\n        // do not update prices if _timestamp is before the current lastUpdatedAt value\\n        if (_timestamp < lastUpdatedAt) {\\n            return false;\\n        }\\n\\n        lastUpdatedAt = _timestamp;\\n        lastUpdatedBlock = block.number;\\n\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/interfaces/IFastPriceEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IFastPriceEvents {\\n    function emitPriceEvent(address _token, uint256 _price) external;\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/interfaces/IFastPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IFastPriceFeed {\\n    function lastUpdatedAt() external view returns (uint256);\\n\\n    function lastUpdatedBlock() external view returns (uint256);\\n\\n    function setSigner(address _account, bool _isActive) external;\\n\\n    function setUpdater(address _account, bool _isActive) external;\\n\\n    function setPriceDuration(uint256 _priceDuration) external;\\n\\n    function setMaxPriceUpdateDelay(uint256 _maxPriceUpdateDelay) external;\\n\\n    function setSpreadBasisPointsIfInactive(\\n        uint256 _spreadBasisPointsIfInactive\\n    ) external;\\n\\n    function setSpreadBasisPointsIfChainError(\\n        uint256 _spreadBasisPointsIfChainError\\n    ) external;\\n\\n    function setMinBlockInterval(uint256 _minBlockInterval) external;\\n\\n    function setIsSpreadEnabled(bool _isSpreadEnabled) external;\\n\\n    function setMaxDeviationBasisPoints(uint256 _maxDeviationBasisPoints)\\n        external;\\n\\n    function setMaxCumulativeDeltaDiffs(\\n        address[] memory _tokens,\\n        uint256[] memory _maxCumulativeDeltaDiffs\\n    ) external;\\n\\n    function setPriceDataInterval(uint256 _priceDataInterval) external;\\n\\n    function setVaultPriceFeed(address _vaultPriceFeed) external;\\n\\n    function setPricesWithBits(uint256 _priceBits, uint256 _timestamp) external;\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/interfaces/ISecondaryPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface ISecondaryPriceFeed {\\n    function getPrice(\\n        address _token,\\n        uint256 _referencePrice,\\n        bool _maximise\\n    ) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPriceUpdateDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBlockInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDeviationBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fastPriceEvents\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_positionRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"DisableFastPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"EnableFastPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fastPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeRefDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeFastDelta\",\"type\":\"uint256\"}],\"name\":\"MaxCumulativeDeltaDiffExceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fastPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeRefDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cumulativeFastDelta\",\"type\":\"uint256\"}],\"name\":\"PriceData\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BITMASK_32\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CUMULATIVE_DELTA_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CUMULATIVE_FAST_DELTA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CUMULATIVE_REF_DELTA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PRICE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REF_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableFastPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableFastPriceVoteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"disableFastPriceVotes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFastPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fastPriceEvents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"favorFastPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_refPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_maximise\",\"type\":\"bool\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getPriceData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAuthorizations\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_updaters\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSpreadEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isUpdater\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxCumulativeDeltaDiffs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDeviationBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPriceUpdateDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTimeDeviation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAuthorizations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBlockInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceData\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"refPrice\",\"type\":\"uint160\"},{\"internalType\":\"uint32\",\"name\":\"refTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cumulativeRefDelta\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cumulativeFastDelta\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceDataInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_priceBitArray\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"setCompactedPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fastPriceEvents\",\"type\":\"address\"}],\"name\":\"setFastPriceEvents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isSpreadEnabled\",\"type\":\"bool\"}],\"name\":\"setIsSpreadEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lastUpdatedAt\",\"type\":\"uint256\"}],\"name\":\"setLastUpdatedAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_maxCumulativeDeltaDiffs\",\"type\":\"uint256[]\"}],\"name\":\"setMaxCumulativeDeltaDiffs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDeviationBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setMaxDeviationBasisPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPriceUpdateDelay\",\"type\":\"uint256\"}],\"name\":\"setMaxPriceUpdateDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTimeDeviation\",\"type\":\"uint256\"}],\"name\":\"setMaxTimeDeviation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAuthorizations\",\"type\":\"uint256\"}],\"name\":\"setMinAuthorizations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBlockInterval\",\"type\":\"uint256\"}],\"name\":\"setMinBlockInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceDataInterval\",\"type\":\"uint256\"}],\"name\":\"setPriceDataInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceDuration\",\"type\":\"uint256\"}],\"name\":\"setPriceDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceBits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"setPricesWithBits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_priceBits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endIndexForIncreasePositions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endIndexForDecreasePositions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIncreasePositions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDecreasePositions\",\"type\":\"uint256\"}],\"name\":\"setPricesWithBitsAndExecute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_spreadBasisPointsIfChainError\",\"type\":\"uint256\"}],\"name\":\"setSpreadBasisPointsIfChainError\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_spreadBasisPointsIfInactive\",\"type\":\"uint256\"}],\"name\":\"setSpreadBasisPointsIfInactive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenManager\",\"type\":\"address\"}],\"name\":\"setTokenManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenPrecisions\",\"type\":\"uint256[]\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultPriceFeed\",\"type\":\"address\"}],\"name\":\"setVaultPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spreadBasisPointsIfChainError\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spreadBasisPointsIfInactive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPrecisions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultPriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FastPriceFeed", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000012c0000000000000000000000000000000000000000000000000000000000000e10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000e35a6f6c2f3ef95006b3a68e3d204c19374d1df000000000000000000000000a237d6b4bdf35ba51b732577260154849b4eff2000000000000000000000000062e10959221056ae12f4c5de5abf6f331167f815", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}