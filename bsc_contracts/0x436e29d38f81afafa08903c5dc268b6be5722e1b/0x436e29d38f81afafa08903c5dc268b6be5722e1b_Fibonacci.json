{"SourceCode": "{\"Fibonacci.sol\":{\"content\":\"// SPDX-License-Identifier: No License\\r\\n\\r\\nimport \\\"./Library.sol\\\";\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n\\r\\n\\r\\n//Fibonacci Token (FIB). An innovative token originally invented by @Nov\\r\\n\\r\\n// t.me/FibonacciToken\\r\\n\\r\\n/*                                               @@@@...@@@...@@@@                              \\r\\n                                          @@...............................@@                      \\r\\n                                    @@..........................................@.                \\r\\n                               @@...................................................@             \\r\\n                            @..........................................................@          \\r\\n                        @................................................................@         \\r\\n                     @.....................................................................@       \\r\\n                   @.........................................................................\\u0026     \\r\\n                 @............................................................................@    \\r\\n              @................................................................................@   \\r\\n             @..................................................................................@  \\r\\n           @.....................................................................................@ \\r\\n          @.......................................................................................@ \\r\\n        @.........................................................................................@ \\r\\n       @..........................................................................................@ \\r\\n      @.......................................................    @@@.@..@  ,,,,,,,,,,,,,,,,,,,,,,@ \\r\\n     @........................................................ @....@.... @,,,,,,,,,,,,,,,,,,,,,,@ \\r\\n    @........................................................@......@..,,, @,,,,,,,,,,,,,,,,,,,,,@  \\r\\n   @........................................................@........@@,@  ,,,,,,,,,,,,,,,,,,,,@   \\r\\n  @.........................................................@..............,,,,,,,,,,,,,,,,,,,@    \\r\\n  @..........................................................@.............,,,,,,,,,,,,,,,,,@      \\r\\n @........................................................... @............,,,,,,,,,,,,,,,@        \\r\\n @...........................................................   @..........,,,,,,,,,,,,,@          \\r\\n @...........................................................      @.......,,,,,,,,@@              \\r\\n \\r\\n \\r\\n \\r\\n \\r\\n */\\r\\n\\r\\n//Update this version also has increasing fees that resets in a certain amount of time (1 day default) from your last sell or tx.\\r\\n                                                                                                    \\r\\n//Fiobonacci Token is a token that does not let price drop below a certain point 0.618 ratio from ATH for default.\\r\\n//Every new ATH sets the price floor a new high, So price will be lifted at all times.\\r\\n//This is against BNB not any stable token is BNB price drops any chart indicator will show you price is dropped below the threshold, this is not the case \\r\\n//Please look BNB pairing for charts not USD if you wanna see the real movements against BNB.\\r\\n\\r\\n//Also apart from that , there is increased tax for investors who sell at close or at ATH. (About %5 percent near ATH).\\r\\n\\r\\n//From psychological point of view I concluded these results:\\r\\n\\r\\n//Token is self \\\"marketing\\\" or \\\"shilling\\\" , If you bought this token and price is below a certain point you will need other people to invest to gain access to your funds.\\r\\n//So , any normal investor would \\\"shill\\\" their token to others , this would create a snowball effect and cycle would repeat with more people everytime.\\r\\n//Normally when a token\\u0027s price crashes people would just accept it and move on , this is not the case here.\\r\\n\\r\\n//Selling close to ATH is a %12.5 percent loss for the maker. So any logical person would wait others to drop the price %5 percent before selling\\r\\n//But if most people thinks like that amount of sell pressure at ATH is lowered by a lot.\\r\\n\\r\\n\\r\\n\\r\\n//There is classic reflection and liquidity and burn traits of token which you can see below ( default is %0.5 , %3 , %0.5)\\r\\n//Max wallet is %1.\\r\\n//I do have a small dev fee %0.5 , but can be increased to 1.5% if something happens and i need funds for the token , (Maybe a marketing , or a new liquidity for other DEX etc.);\\r\\n//I cannot increase dev fees beyond 1.5% contract does not allow that.\\r\\n\\r\\n//Invest only what you can afford to lose.\\r\\n//Price might be mathematically set to increase , BUT IF NO ONE BUYS THE TOKEN IT WILL STUCK !!!! BE CAREFUL WITH YOUR INVESTMENTS!!!.\\r\\n\\r\\n//This is an experiment on BSC.Lets see if it goes viral.\\r\\n\\r\\n//Disclaimer: By acquiring this token , you accept your own risks.\\r\\n\\r\\ncontract Fibonacci is Context, IBEP20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    mapping(address =\\u003e uint256) private _rOwned;\\r\\n    mapping(address =\\u003e uint256) private _tOwned;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n\\r\\n    mapping(address =\\u003e uint256) private _dumpTaxes;\\r\\n    mapping(address =\\u003e uint256) private _dumpTaxesBlockTime;\\r\\n\\r\\n\\r\\n    uint256 private constant MAX_EXCLUDED = 1024;\\r\\n    EnumerableSet.AddressSet private _isExcludedFromReward;\\r\\n    EnumerableSet.AddressSet private _isExcludedFromFee;\\r\\n    EnumerableSet.AddressSet private _isExcludedFromSwapAndLiquify;\\r\\n\\r\\n    EnumerableSet.AddressSet private _isBlackListed;\\r\\n    EnumerableSet.AddressSet private _isWhiteListed;\\r\\n\\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n    uint256 private _tTotal = 100000000 * 10**18;\\r\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\r\\n\\r\\n    uint256 private _tFeeTotal;\\r\\n    uint256 private _tBurnTotal;\\r\\n\\r\\n    string private constant _name = \\\"Fibonacci\\\";\\r\\n    string private constant _symbol = \\\"FIB\\\";\\r\\n    uint8 private constant _decimals = 18;\\r\\n\\r\\n    uint256 public _taxFeeVariable = 0;\\r\\n    uint256 public _liquidityFeeVariable = 0;\\r\\n    uint256 public _devFeeVariable = 0;\\r\\n    uint256 public _burnFeeVariable = 0;\\r\\n\\r\\n\\r\\n    uint256 public _taxFee = 0;\\r\\n    uint256 public _liquidityFee = 0;\\r\\n    uint256 public _devFee = 0;\\r\\n    uint256 public _burnFee = 0;\\r\\n    \\r\\n    uint256 public _maxWalletSize = (_tTotal * 1) / 100; \\r\\n    \\r\\n    uint256 private constant TOTAL_FEES_LIMIT = 2000;\\r\\n    \\r\\n    uint256 private constant DEV_FEES_LIMIT = 150;  //If needed.\\r\\n\\r\\n    uint256 private constant MIN_TX_LIMIT = 100;\\r\\n    uint256 public _maxTxAmount = 100000000 * 10**18;\\r\\n    uint256 public _numTokensSellToAddToLiquidity = 20000 * 10**18;\\r\\n\\r\\n    uint256 private _totalDevFeesCollected = 0;\\r\\n\\r\\n    //Fibonacci Variables\\r\\n    //They are multipled by 4 adding for Liq , Reflection , Burn and Dev fee.\\r\\n\\r\\n    uint256 private constant ATH_DUMPER_FEE_MIN_LIMIT = 250;\\r\\n    uint256 private constant ATH_DUMPER_FEE_MAX_LIMIT = 550;\\r\\n    uint256 public _ATHDumperBurnAdd = 350;\\r\\n \\r\\n    //Activates ATH Burn (max 17.5 percent.)\\r\\n    uint256 private constant MIN_PER_ATH_LIMIT = 835;\\r\\n    uint256 private constant MAX_PER_ATH_LIMIT = 975; \\r\\n    uint256 public PER_ATH_BURN_ACTIVATE = 950;\\r\\n    \\r\\n    uint256 _ATHPriceINBNB = 1000;\\r\\n    \\r\\n    //CurrentPrice but multipled by 10**20\\r\\n    uint256 PriceNow = 1;\\r\\n    uint256 MultPrecision = 10**20;\\r\\n    \\r\\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\\r\\n    \\r\\n    //Golden ratio cannot be set higher than 619. MAX is just in case something fail, halves the floor price.\\r\\n    //1/3 = 3.333 MAX so this token only can drop 66 percent at ALL costs. (Against BNB)\\r\\n    \\r\\n    \\r\\n    uint256 private constant  GoldenRatioDMAX = 333;\\r\\n    //1/1.618 = 0.618 (Math is interesting)\\r\\n    uint256 public  GoldenRatioDivider = 618 ;\\r\\n    //Cant be honeypot\\r\\n    uint256 private constant GoldenRatioDMIN = 900;\\r\\n    uint256 private RatioNow = 1000;\\r\\n\\r\\n    // Liquidity\\r\\n    bool public _swapAndLiquifyEnabled = true;\\r\\n    bool private _inSwapAndLiquify;\\r\\n\\r\\n    IUniswapV2Router02 public _uniswapV2Router;\\r\\n    address public _uniswapV2Pair;\\r\\n    IUniswapV2Pair public uniSwapV2PairContract;\\r\\n\\r\\n\\r\\n    address public pancakeRouter = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\\r\\n   \\r\\n\\r\\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\\r\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 bnbReceived,\\r\\n        uint256 tokensIntoLiqudity\\r\\n    );\\r\\n    event DevFeesCollected(uint256 bnbCollected);\\r\\n\\r\\n    modifier lockTheSwap() {\\r\\n        _inSwapAndLiquify = true;\\r\\n        _;\\r\\n        _inSwapAndLiquify = false;\\r\\n    }\\r\\n\\r\\n    constructor(address cOwner) Ownable(cOwner) {\\r\\n        _rOwned[cOwner] = _rTotal;\\r\\n\\r\\n        // Create a uniswap pair for this new token\\r\\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(pancakeRouter);\\r\\n        _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\\r\\n        _uniswapV2Router = uniswapV2Router;\\r\\n\\r\\n        // Exclude system addresses from fee\\r\\n        \\r\\n         IUniswapV2Pair pairContract = IUniswapV2Pair(_uniswapV2Pair);\\r\\n         uniSwapV2PairContract = pairContract;\\r\\n        \\r\\n        _isExcludedFromFee.add(owner());\\r\\n        _isExcludedFromFee.add(address(this));\\r\\n        _isExcludedFromSwapAndLiquify.add(_uniswapV2Pair);\\r\\n\\r\\n        _isWhiteListed.add(address(this));\\r\\n        _isWhiteListed.add(_uniswapV2Pair);\\r\\n        _isWhiteListed.add(owner());\\r\\n\\r\\n\\r\\n        _taxesForEachSell[0] = 25;\\r\\n        _taxesForEachSell[1] = 75;\\r\\n        _taxesForEachSell[2] = 175;\\r\\n        _taxesForEachSell[3] = 180;\\r\\n        _taxesForEachSell[4] = 200;\\r\\n        _taxesForEachSell[5] = 350;\\r\\n        _taxesForEachSell[6] = 740;\\r\\n        _taxesForEachSell[7] = 1180;\\r\\n        _taxesForEachSell[8] = 2500;\\r\\n        _taxesForEachSell[9] = 12500;\\r\\n\\r\\n        emit Transfer(address(0), cOwner, _tTotal);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    // BEP20\\r\\n    function name() public pure returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public pure returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public pure returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        if (_isExcludedFromReward.contains(account)) return _tOwned[account];\\r\\n        return tokenFromReflection(_rOwned[account]);\\r\\n    }\\r\\n    \\r\\n    \\r\\n    //Fibonacci Price Checker Future\\r\\n    function setPriceOfTokenSellFuture(uint256 soldBNB,uint256 golden) internal returns (uint256){\\r\\n\\r\\n        uint256 FibonacciSupply; uint256 WBNB;\\r\\n\\r\\n        //For some reason this gets swapped at every added liq.\\r\\n       (uint256 token0,uint256 token1, uint256 blocktimestamp) = uniSwapV2PairContract.getReserves();\\r\\n        \\r\\n       if(token0 \\u003e token1){\\r\\n           FibonacciSupply = token0;\\r\\n            WBNB = token1;\\r\\n\\r\\n       }\\r\\n         else{\\r\\n        \\r\\n        FibonacciSupply = token1;\\r\\n            WBNB = token0;\\r\\n        \\r\\n        }\\r\\n\\r\\n        FibonacciSupply = FibonacciSupply.add(golden);\\r\\n        WBNB = WBNB.sub(soldBNB);\\r\\n        //Lets not blow up.\\r\\n        if(FibonacciSupply == 0){\\r\\n            \\r\\n            return 1;\\r\\n        }\\r\\n        \\r\\n        //Multipled by 10**20 to make division right;\\r\\n         uint256 priceINBNB = (WBNB.mul(MultPrecision)).div(FibonacciSupply);\\r\\n         \\r\\n         \\r\\n         if(priceINBNB \\u003e _ATHPriceINBNB){\\r\\n             _ATHPriceINBNB = priceINBNB;\\r\\n         }\\r\\n         \\r\\n         \\r\\n        RatioNow = (priceINBNB.mul(1000)).div(_ATHPriceINBNB);\\r\\n         \\r\\n        return priceINBNB;\\r\\n         \\r\\n    } \\r\\n\\r\\n\\r\\n      function setPriceOfTokenBoughtFuture(uint256 addedBNB,uint256 soldgolden) internal returns (uint256){\\r\\n        uint256 FibonacciSupply; uint256 WBNB;\\r\\n    \\r\\n        //For some reason this gets swapped at every added liq.\\r\\n       (uint256 token0,uint256 token1, uint256 blocktimestamp) = uniSwapV2PairContract.getReserves();\\r\\n        \\r\\n        \\r\\n       if(token0 \\u003e token1){\\r\\n           FibonacciSupply = token0;\\r\\n            WBNB = token1;\\r\\n\\r\\n       }\\r\\n         else{\\r\\n        \\r\\n        FibonacciSupply = token1;\\r\\n            WBNB = token0;\\r\\n        \\r\\n        }\\r\\n\\r\\n\\r\\n       FibonacciSupply = FibonacciSupply.sub(soldgolden);\\r\\n       WBNB = WBNB.add(addedBNB);\\r\\n        //Lets not blow up.\\r\\n        if(FibonacciSupply == 0){\\r\\n            \\r\\n            return 1;\\r\\n        }\\r\\n        \\r\\n        //Multipled by 10**20 to make division right;\\r\\n         uint256 priceINBNB = (WBNB.mul(MultPrecision)).div(FibonacciSupply);\\r\\n         \\r\\n         \\r\\n         if(priceINBNB \\u003e _ATHPriceINBNB){\\r\\n             _ATHPriceINBNB = priceINBNB;\\r\\n         }\\r\\n         \\r\\n         \\r\\n        RatioNow = (priceINBNB.mul(1000)).div(_ATHPriceINBNB);\\r\\n         \\r\\n        return priceINBNB;\\r\\n         \\r\\n    } \\r\\n\\r\\n\\r\\n    function getPriceOfTokenNow() public view returns (uint256,uint256){\\r\\n        return (RatioNow,_ATHPriceINBNB);        \\r\\n    } \\r\\n    \\r\\n    function getPriceOfTokenFuture(uint256 substractedBNB,uint256 addedGoldenRatio) public view returns (uint256){\\r\\n              uint256 FibonacciSupply; uint256 WBNB;\\r\\n\\r\\n        //For some reason this gets swapped at every added liq.\\r\\n       (uint256 token0,uint256 token1, uint256 blocktimestamp) = uniSwapV2PairContract.getReserves();\\r\\n        \\r\\n        \\r\\n       if(token0 \\u003e token1){\\r\\n           FibonacciSupply = token0;\\r\\n            WBNB = token1;\\r\\n       }\\r\\n         else{\\r\\n        FibonacciSupply = token1;\\r\\n            WBNB = token0;\\r\\n        }\\r\\n        //Lets not blow up.\\r\\n        if(FibonacciSupply == 0){\\r\\n            \\r\\n            return 1;\\r\\n        }\\r\\n\\r\\n        //Multipled by 10**20 to make division right;\\r\\n        uint256 totalGNow = FibonacciSupply.add(addedGoldenRatio);\\r\\n        uint256 priceINBNB = ((WBNB.sub(substractedBNB)).mul(MultPrecision)).div(totalGNow);\\r\\n\\r\\n        return priceINBNB;\\r\\n\\r\\n    } \\r\\n\\r\\n\\r\\n    //10 is 1 percent.\\r\\n    function setMaxWalletSize(uint256 maxWallet) external onlyOwner{\\r\\n        require(maxWallet \\u003e= 10 , \\\"Can\\u0027t decerease maxwallet more than that.\\\");\\r\\n        _maxWalletSize = (_tTotal * maxWallet) / 10000; \\r\\n\\r\\n    }\\r\\n    \\r\\n    function setGoldenRatio(uint256 ratio) external onlyOwner{\\r\\n        require(ratio \\u003e GoldenRatioDMAX,\\\"Fibonacci cannot be lower than this.\\\");\\r\\n        require(ratio \\u003c= GoldenRatioDMIN,\\\"Fibonacci cannot be higher than this.\\\");\\r\\n        GoldenRatioDivider = ratio;       \\r\\n\\r\\n    }\\r\\n    function setATHDumperFee(uint256 fee) external onlyOwner {\\r\\n        require(fee \\u003c= ATH_DUMPER_FEE_MAX_LIMIT,\\\"I know you want to punish them , but they are human too.\\\");\\r\\n        require(fee \\u003e= ATH_DUMPER_FEE_MIN_LIMIT, \\\"I ain\\u0027t that merciful.\\\");\\r\\n         _ATHDumperBurnAdd = fee;\\r\\n    }\\r\\n\\r\\n    function setATHDumperMaxPercent(uint256 feePercent) external onlyOwner {\\r\\n        require(feePercent \\u003c= MAX_PER_ATH_LIMIT,\\\"Can\\u0027t increase ATH sell tax percentage more than this.\\\");\\r\\n        require(feePercent \\u003e= MIN_PER_ATH_LIMIT, \\\"Can\\u0027t decrease ATH sell tax percentage more than this.\\\");\\r\\n         PER_ATH_BURN_ACTIVATE = feePercent;\\r\\n    }\\r\\n    \\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(\\r\\n            sender,\\r\\n            _msgSender(),\\r\\n            _allowances[sender][_msgSender()].sub(\\r\\n                amount,\\r\\n                \\\"BEP20: transfer amount exceeds allowance\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].add(addedValue)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        public\\r\\n        virtual\\r\\n        returns (bool)\\r\\n    {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender].sub(\\r\\n                subtractedValue,\\r\\n                \\\"BEP20: decreased allowance below zero\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // REFLECTION\\r\\n    function deliver(uint256 tAmount) public {\\r\\n        address sender = _msgSender();\\r\\n        require(\\r\\n            !_isExcludedFromReward.contains(sender),\\r\\n            \\\"Excluded addresses cannot call this function\\\"\\r\\n        );\\r\\n\\r\\n        (, uint256 tFee, uint256 tLiquidity, uint256 tBurn) = _getTValues(\\r\\n            tAmount\\r\\n        );\\r\\n        uint256 currentRate = _getRate();\\r\\n        (uint256 rAmount, , ) = _getRValues(\\r\\n            tAmount,\\r\\n            tFee,\\r\\n            tLiquidity,\\r\\n            tBurn,\\r\\n            currentRate\\r\\n        );\\r\\n\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rTotal = _rTotal.sub(rAmount);\\r\\n        _tFeeTotal = _tFeeTotal.add(tAmount);\\r\\n    }\\r\\n\\r\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(tAmount \\u003c= _tTotal, \\\"Amount must be less than supply\\\");\\r\\n\\r\\n        if (!deductTransferFee) {\\r\\n            (, uint256 tFee, uint256 tLiquidity, uint256 tBurn) = _getTValues(\\r\\n                tAmount\\r\\n            );\\r\\n            uint256 currentRate = _getRate();\\r\\n            (uint256 rAmount, , ) = _getRValues(\\r\\n                tAmount,\\r\\n                tFee,\\r\\n                tLiquidity,\\r\\n                tBurn,\\r\\n                currentRate\\r\\n            );\\r\\n\\r\\n            return rAmount;\\r\\n        } else {\\r\\n            (, uint256 tFee, uint256 tLiquidity, uint256 tBurn) = _getTValues(\\r\\n                tAmount\\r\\n            );\\r\\n            uint256 currentRate = _getRate();\\r\\n            (, uint256 rTransferAmount, ) = _getRValues(\\r\\n                tAmount,\\r\\n                tFee,\\r\\n                tLiquidity,\\r\\n                tBurn,\\r\\n                currentRate\\r\\n            );\\r\\n\\r\\n            return rTransferAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenFromReflection(uint256 rAmount)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        require(\\r\\n            rAmount \\u003c= _rTotal,\\r\\n            \\\"Amount must be less than total reflections\\\"\\r\\n        );\\r\\n\\r\\n        uint256 currentRate = _getRate();\\r\\n        return rAmount.div(currentRate);\\r\\n    }\\r\\n\\r\\n    function excludeFromReward(address account) public onlyOwner {\\r\\n        require(\\r\\n            !_isExcludedFromReward.contains(account),\\r\\n            \\\"Account is already excluded in reward\\\"\\r\\n        );\\r\\n        require(\\r\\n            _isExcludedFromReward.length() \\u003c MAX_EXCLUDED,\\r\\n            \\\"Excluded reward set reached maximum capacity\\\"\\r\\n        );\\r\\n\\r\\n        if (_rOwned[account] \\u003e 0) {\\r\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\r\\n        }\\r\\n        _isExcludedFromReward.add(account);\\r\\n    }\\r\\n\\r\\n    function includeInReward(address account) external onlyOwner {\\r\\n        require(\\r\\n            _isExcludedFromReward.contains(account),\\r\\n            \\\"Account is already included in reward\\\"\\r\\n        );\\r\\n\\r\\n        _isExcludedFromReward.remove(account);\\r\\n        _tOwned[account] = 0;\\r\\n    }\\r\\n\\r\\n    function totalFees() public view returns (uint256) {\\r\\n        return _tFeeTotal;\\r\\n    }\\r\\n\\r\\n    function totalBurn() public view returns (uint256) {\\r\\n        return _tBurnTotal;\\r\\n    }\\r\\n\\r\\n    function devPercentageOfLiquidity() public view returns (uint256) {\\r\\n        return (_devFee * 10000) / (_devFee.add(_liquidityFee));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev This is the portion of liquidity that will be sent to the uniswap router.\\r\\n        Dev fees are considered part of the liquidity conversion.\\r\\n     */\\r\\n    function pureLiquidityPercentage() public view returns (uint256) {\\r\\n        return (_liquidityFee * 10000) / (_devFee.add(_liquidityFee));\\r\\n    }\\r\\n\\r\\n    function totalDevFeesCollected() external view onlyDev returns (uint256) {\\r\\n        return _totalDevFeesCollected;\\r\\n    }\\r\\n\\r\\n    function excludeFromFee(address account) public onlyOwner {\\r\\n        _isExcludedFromFee.add(account);\\r\\n    }\\r\\n\\r\\n    function includeInFee(address account) public onlyOwner {\\r\\n        _isExcludedFromFee.remove(account);\\r\\n    }\\r\\n\\r\\n    function setTaxFeePercent(uint256 taxFee) external onlyOwner {\\r\\n        require(\\r\\n            taxFee.add(_liquidityFee).add(_devFee).add(_burnFee) \\u003c=\\r\\n                TOTAL_FEES_LIMIT,\\r\\n            \\\"Total fees can not exceed the declared limit\\\"\\r\\n        );\\r\\n        _taxFee = taxFee;\\r\\n    }\\r\\n\\r\\n    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner {\\r\\n        require(\\r\\n            _taxFee.add(liquidityFee).add(_devFee).add(_burnFee) \\u003c=\\r\\n                TOTAL_FEES_LIMIT,\\r\\n            \\\"Total fees can not exceed the declared limit\\\"\\r\\n        );\\r\\n        _liquidityFee = liquidityFee;\\r\\n    }\\r\\n\\r\\n    function setDevFeePercent(uint256 devFee) external onlyOwner {\\r\\n        require(\\r\\n            devFee \\u003c= DEV_FEES_LIMIT,\\r\\n            \\\"Dev fees can not exceed the declared limit\\\"\\r\\n        );\\r\\n        require(\\r\\n            _taxFee.add(_liquidityFee).add(devFee).add(_burnFee) \\u003c=\\r\\n                TOTAL_FEES_LIMIT,\\r\\n            \\\"Total fees can not exceed the declared limit\\\"\\r\\n        );\\r\\n        _devFee = devFee;\\r\\n    }\\r\\n\\r\\n    function setBurnFeePercent(uint256 burnFee) external onlyOwner {\\r\\n        require(\\r\\n            _taxFee.add(_liquidityFee).add(_devFee).add(burnFee) \\u003c=\\r\\n                TOTAL_FEES_LIMIT,\\r\\n            \\\"Total fees can not exceed the declared limit\\\"\\r\\n        );\\r\\n        _burnFee = burnFee;\\r\\n    }\\r\\n\\r\\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner {\\r\\n        require(\\r\\n            maxTxPercent \\u003c= 10000,\\r\\n            \\\"Maximum transaction limit percentage can\\u0027t be more than 100%\\\"\\r\\n        );\\r\\n        require(\\r\\n            maxTxPercent \\u003e= MIN_TX_LIMIT,\\r\\n            \\\"Maximum transaction limit can\\u0027t be less than the declared limit\\\"\\r\\n        );\\r\\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(10000);\\r\\n    }\\r\\n\\r\\n    function setMinLiquidityPercent(uint256 minLiquidityPercent)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            minLiquidityPercent \\u003c= 10000,\\r\\n            \\\"Minimum liquidity percentage percentage can\\u0027t be more than 100%\\\"\\r\\n        );\\r\\n        require(\\r\\n            minLiquidityPercent \\u003e 0,\\r\\n            \\\"Minimum liquidity percentage percentage can\\u0027t be zero\\\"\\r\\n        );\\r\\n        _numTokensSellToAddToLiquidity = _tTotal.mul(minLiquidityPercent).div(\\r\\n            10000\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setSwapAndLiquifyEnabled(bool enabled) public onlyOwner {\\r\\n        _swapAndLiquifyEnabled = enabled;\\r\\n        emit SwapAndLiquifyEnabledUpdated(enabled);\\r\\n    }\\r\\n\\r\\n    function isExcludedFromFee(address account) public view returns (bool) {\\r\\n        return _isExcludedFromFee.contains(account);\\r\\n    }\\r\\n\\r\\n    function isExcludedFromReward(address account) public view returns (bool) {\\r\\n        return _isExcludedFromReward.contains(account);\\r\\n    }\\r\\n\\r\\n    function setIsExcludedFromSwapAndLiquify(address a, bool b)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        if (b) {\\r\\n            _isExcludedFromSwapAndLiquify.add(a);\\r\\n        } else {\\r\\n            _isExcludedFromSwapAndLiquify.remove(a);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setUniswapRouter(address r) external onlyOwner {\\r\\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(r);\\r\\n        _uniswapV2Router = uniswapV2Router;\\r\\n    }\\r\\n\\r\\n    function setUniswapPair(address p) external onlyOwner {\\r\\n        _uniswapV2Pair = p;\\r\\n    }\\r\\n    \\r\\n\\r\\n    // TRANSFER\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(from != address(0), \\\"BEP20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"BEP20: transfer to the zero address\\\");\\r\\n        require(to != devWallet(), \\\"Dev wallet address cannot receive tokens\\\");\\r\\n        require(from != devWallet(), \\\"Dev wallet address cannot send tokens\\\");\\r\\n        require(amount \\u003e 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n\\r\\n        if (from != owner() \\u0026\\u0026 to != owner()) {\\r\\n            require(\\r\\n                amount \\u003c= _maxTxAmount,\\r\\n                \\\"Transfer amount exceeds the maxTxAmount.\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        /*\\r\\n            - swapAndLiquify will be initiated when token balance of this contract\\r\\n            has accumulated enough over the minimum number of tokens required.\\r\\n            - don\\u0027t get caught in a circular liquidity event.\\r\\n            - don\\u0027t swapAndLiquify if sender is uniswap pair.\\r\\n        */\\r\\n\\r\\n        uint256 contractTokenBalance = balanceOf(address(this));\\r\\n\\r\\n        if (contractTokenBalance \\u003e= _maxTxAmount) {\\r\\n            contractTokenBalance = _maxTxAmount;\\r\\n        }\\r\\n\\r\\n        bool isOverMinTokenBalance = contractTokenBalance \\u003e=\\r\\n            _numTokensSellToAddToLiquidity;\\r\\n        if (\\r\\n            isOverMinTokenBalance \\u0026\\u0026\\r\\n            !_inSwapAndLiquify \\u0026\\u0026\\r\\n            !_isExcludedFromSwapAndLiquify.contains(from) \\u0026\\u0026\\r\\n            _swapAndLiquifyEnabled\\r\\n        ) {\\r\\n            swapAndLiquify(_numTokensSellToAddToLiquidity);\\r\\n        }\\r\\n\\r\\n        bool takeFee = true;\\r\\n        if (\\r\\n            _isExcludedFromFee.contains(from) || _isExcludedFromFee.contains(to)\\r\\n        ) {\\r\\n            takeFee = false;\\r\\n        }\\r\\n        _tokenTransfer(from, to, amount, takeFee);\\r\\n    }\\r\\n\\r\\n    function collectDevFees() public onlyDev {\\r\\n        _totalDevFeesCollected = _totalDevFeesCollected.add(\\r\\n            address(this).balance\\r\\n        );\\r\\n        devWallet().transfer(address(this).balance);\\r\\n        emit DevFeesCollected(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function swapAndLiquify(uint256 tokenAmount) private lockTheSwap {\\r\\n        // This variable holds the liquidity tokens that won\\u0027t be converted\\r\\n        uint256 liqTokens = tokenAmount.mul(pureLiquidityPercentage()).div(\\r\\n            20000\\r\\n        );\\r\\n        // Everything else from the tokens should be converted\\r\\n        uint256 tokensForBnbExchange = tokenAmount.sub(liqTokens);\\r\\n        // This would be in the non-percentage form, 0 (0%) \\u003c devPortion \\u003c 10000 (100%)\\r\\n        // The devPortion here indicates the portion of the converted tokens (BNB) that\\r\\n        // would be assigned to the devWallet\\r\\n        uint256 devPortion = tokenAmount.mul(devPercentageOfLiquidity()).div(\\r\\n            tokensForBnbExchange\\r\\n        );\\r\\n\\r\\n        uint256 initialBalance = address(this).balance;\\r\\n\\r\\n        swapTokensForBnb(tokensForBnbExchange);\\r\\n\\r\\n        // How many BNBs did we gain after this conversion?\\r\\n        uint256 gainedBnb = address(this).balance.sub(initialBalance);\\r\\n\\r\\n        // Calculate the amount of BNB that\\u0027s assigned to devWallet\\r\\n        uint256 balanceToDev = (gainedBnb.mul(devPortion)).div(10000);\\r\\n        // The leftover BNBs are purely for liquidity\\r\\n        uint256 liqBnb = gainedBnb.sub(balanceToDev);\\r\\n\\r\\n        addLiquidity(liqTokens, liqBnb);\\r\\n\\r\\n        emit SwapAndLiquify(tokensForBnbExchange, liqBnb, liqTokens);\\r\\n    }\\r\\n\\r\\n    function swapTokensForBnb(uint256 tokenAmount) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = _uniswapV2Router.WETH();\\r\\n\\r\\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\\r\\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\\r\\n        // Approve token transfer to cover all possible scenarios\\r\\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\\r\\n\\r\\n        // Add the liquidity\\r\\n        _uniswapV2Router.addLiquidityETH{value: bnbAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            lockedLiquidity(),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    //These are required for adding Liq and potential save mechanism if something fails\\r\\n    //When shutdowncancel activated Owner can no longer interfere.\\r\\n    bool AthThingEnabled = true;\\r\\n\\r\\n    function setFeesToZero() external onlyOwner{\\r\\n        \\r\\n        _taxFeeVariable = 0;\\r\\n        _liquidityFeeVariable = 0;\\r\\n        _devFeeVariable = 0;\\r\\n        _burnFeeVariable = 0;\\r\\n\\r\\n    }\\r\\n\\r\\n    function setFeesBackToDefault() external onlyOwner{\\r\\n\\r\\n        _taxFee = 50;\\r\\n        _liquidityFee = 300;\\r\\n        _devFee = 150;\\r\\n        _burnFee = 50;\\r\\n   \\r\\n\\r\\n    }\\r\\n\\r\\n    function setFeesBackToNormalInternal() internal {\\r\\n\\r\\n        _taxFeeVariable = _taxFee;\\r\\n        _liquidityFeeVariable = _liquidityFee;\\r\\n        _devFeeVariable = _devFee;\\r\\n        _burnFeeVariable = _burnFee;\\r\\n   \\r\\n\\r\\n    }\\r\\n\\r\\n    function setATHthingEnabled(bool isit) external onlyOwner{\\r\\n        AthThingEnabled = isit;\\r\\n    }\\r\\n\\r\\n    function setFeeResetTime(uint256 time) external onlyOwner{\\r\\n        feeResetTime = time;\\r\\n    }\\r\\n\\r\\n    uint256 feeResetTime = 60*60*24*14; //2 Weeks\\r\\n    bool cancelSellConstraints  = false;\\r\\n    bool canCancel = true;\\r\\n\\r\\n    function ShutDownCancel() external onlyOwner{\\r\\n        cancelSellConstraints = true;\\r\\n        canCancel = false;\\r\\n    }\\r\\n    function setSellContraints(bool what) external onlyOwner{\\r\\n        if(canCancel){\\r\\n            cancelSellConstraints = what;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //Sets increasing tax enabled.\\r\\n    bool private increasingTax = false;\\r\\n    function setIncreasingTaxForSellsEnabled(bool what) external onlyOwner{\\r\\n        if(canCancel){\\r\\n        increasingTax = what;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //If something fails and tax are getting added constantly this function will be activated.\\r\\n    bool private setToNormalOnSomeError  = false;\\r\\n        function setToNormalOnAnyError(bool what) external onlyOwner{\\r\\n        setToNormalOnSomeError = what;\\r\\n    }\\r\\n\\r\\n    function addATHFees() internal returns (bool) {\\r\\n        bool ATHsAdded = false;\\r\\n        if(AthThingEnabled){\\r\\n        if(RatioNow \\u003e PER_ATH_BURN_ACTIVATE){   \\r\\n             ATHsAdded = true;            \\r\\n             _liquidityFeeVariable += _ATHDumperBurnAdd;\\r\\n             _burnFeeVariable += _ATHDumperBurnAdd;\\r\\n             _taxFeeVariable += _ATHDumperBurnAdd;\\r\\n             _devFeeVariable += _ATHDumperBurnAdd;\\r\\n                }\\r\\n              }\\r\\n        return ATHsAdded;  \\r\\n    \\r\\n    }\\r\\n    \\r\\n    mapping(uint256 =\\u003e uint256) private _taxesForEachSell;\\r\\n\\r\\n    function setTaxesByAmount(uint256 taxnumber,uint256 tax) external onlyOwner{\\r\\n        _taxesForEachSell[taxnumber] = tax; \\r\\n    }\\r\\n\\r\\n    function setTaxesToDefaultForSellTaxes() external onlyOwner(){\\r\\n        _taxesForEachSell[0] = 25;\\r\\n        _taxesForEachSell[1] = 55;\\r\\n        _taxesForEachSell[2] = 60;\\r\\n        _taxesForEachSell[3] = 120;\\r\\n        _taxesForEachSell[4] = 180;\\r\\n        _taxesForEachSell[5] = 350;\\r\\n        _taxesForEachSell[6] = 740;\\r\\n        _taxesForEachSell[7] = 1180;\\r\\n        _taxesForEachSell[8] = 2500;\\r\\n        _taxesForEachSell[9] = 12500;\\r\\n    }\\r\\n\\r\\n    function getMyTaxInformation () view public returns (uint256 myTx,uint256 tax,uint256 leftTime){\\r\\n        uint256 blocktime = block.timestamp;\\r\\n        uint256 currentSellTaxNumber = _dumpTaxes[msg.sender];\\r\\n        uint256 currentBlockTimeSeller = _dumpTaxesBlockTime[msg.sender];\\r\\n        uint256 time = 0;\\r\\n        uint256 addedTaxesTotal = _taxesForEachSell[currentSellTaxNumber];\\r\\n        if(blocktime \\u003e currentBlockTimeSeller){\\r\\n            time = blocktime.sub(currentBlockTimeSeller);\\r\\n         }\\r\\n        \\r\\n        if(addedTaxesTotal == 0 \\u0026\\u0026 currentSellTaxNumber \\u003e 3){\\r\\n                        addedTaxesTotal = maxSellTax;\\r\\n\\r\\n                    }\\r\\n        return (currentSellTaxNumber,addedTaxesTotal,time);\\r\\n    }\\r\\n\\r\\n    uint256 private maxSellTax = 12500;\\r\\n\\r\\n    function setMaxSellTax(uint256 maxTax) external onlyOwner {\\r\\n        maxSellTax = maxTax;\\r\\n    }\\r\\n\\r\\n    function addIncreasedTaxes(address sender) internal{\\r\\n        uint256 blocktime = block.timestamp;\\r\\n        uint256 currentSellTaxNumber = _dumpTaxes[sender];\\r\\n        uint256 currentBlockTimeSeller = _dumpTaxesBlockTime[sender];\\r\\n        uint256 addedTaxesTotal = 0;\\r\\n\\r\\n        if(increasingTax){\\r\\n              if(sender != _uniswapV2Pair){\\r\\n                if(blocktime \\u003e currentBlockTimeSeller){\\r\\n\\r\\n                    uint256 left = blocktime.sub(currentBlockTimeSeller);\\r\\n                    _dumpTaxesBlockTime[sender] = blocktime;\\r\\n                    addedTaxesTotal = _taxesForEachSell[currentSellTaxNumber];\\r\\n                    if(addedTaxesTotal == 0 \\u0026\\u0026 currentSellTaxNumber \\u003e 3){\\r\\n                        addedTaxesTotal = maxSellTax;\\r\\n                    }\\r\\n\\r\\n                    if(left \\u003e= feeResetTime){\\r\\n                        _dumpTaxes[sender] = 0;\\r\\n                        addedTaxesTotal = 0;\\r\\n                    }\\r\\n                     if(left \\u003c feeResetTime){\\r\\n                        _dumpTaxes[sender] = currentSellTaxNumber + 1;\\r\\n                    }\\r\\n\\r\\n                }\\r\\n                }\\r\\n              }\\r\\n\\r\\n         _liquidityFeeVariable += addedTaxesTotal;\\r\\n         _burnFeeVariable += addedTaxesTotal;\\r\\n         _taxFeeVariable += addedTaxesTotal;\\r\\n         _devFeeVariable += addedTaxesTotal;      \\r\\n\\r\\n    }\\r\\n\\r\\n    function removeTaxes(uint256 taxes) internal{\\r\\n            if(_liquidityFeeVariable \\u003e= taxes){\\r\\n             _liquidityFeeVariable = _liquidityFeeVariable - taxes;\\r\\n            }\\r\\n            if(_burnFeeVariable \\u003e= taxes){\\r\\n             _burnFeeVariable = _burnFeeVariable - taxes; \\r\\n            }\\r\\n            if(_taxFeeVariable \\u003e= taxes){\\r\\n             _taxFeeVariable = _taxFeeVariable - taxes; \\r\\n            }\\r\\n            if(_devFeeVariable \\u003e= taxes){\\r\\n             _devFeeVariable = _devFeeVariable - taxes;\\r\\n            }\\r\\n    }\\r\\n\\r\\n\\r\\n    bool whitelistEnabled = false;\\r\\n    bool blacklistEnabled = false;\\r\\n\\r\\n    function addToWhiteList(address added) external onlyOwner\\r\\n    {\\r\\n        _isWhiteListed.add(added);\\r\\n    }\\r\\n\\r\\n\\r\\n    function addToBlackList(address added) external onlyOwner\\r\\n    {\\r\\n        _isBlackListed.add(added);\\r\\n    }\\r\\n\\r\\n    function setWhitelistEnabled(bool whitelist) external onlyOwner {\\r\\n        whitelistEnabled = whitelist;\\r\\n    }\\r\\n\\r\\n    function setBlackListEnabled(bool blacklist) external onlyOwner {\\r\\n        blacklistEnabled = blacklist;\\r\\n    }\\r\\n    bool private removeDevM = false;\\r\\n    function removeDevMode () external onlyOwner{\\r\\n        removeDevM = true;\\r\\n        devMod = false;\\r\\n\\r\\n\\r\\n    }\\r\\n    bool private devMod = true;\\r\\n    function devMode(bool buys) external onlyOwner\\r\\n    {\\r\\n        require(!removeDevM,\\\"Dev mode is closed forever.\\\");\\r\\n        devMod = buys;\\r\\n    }\\r\\n\\r\\n\\r\\n    function _tokenTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount,\\r\\n        bool takeFee\\r\\n    ) private {\\r\\n        \\r\\n\\r\\n        //Checking _maxWalletSize\\r\\n        if(!devMod){  \\r\\n        if (recipient != _uniswapV2Pair \\u0026\\u0026 recipient != DEAD \\u0026\\u0026 recipient != pancakeRouter ) {\\r\\n\\r\\n            require(balanceOf(recipient) + amount \\u003c= _maxWalletSize, \\\"Transfer amount exceeds the max size.\\\");\\r\\n            \\r\\n        }\\r\\n        }\\r\\n        //BlackList\\r\\n        if(blacklistEnabled){\\r\\n            require(!_isBlackListed.contains(sender) , \\\"Address is blacklisted.\\\");\\r\\n            require(!_isBlackListed.contains(recipient) , \\\"Address is blacklisted.\\\");\\r\\n        }\\r\\n         //Whitelist\\r\\n        if(whitelistEnabled){\\r\\n            require(_isWhiteListed.contains(sender) , \\\"Address is not whitelisted.\\\");\\r\\n            require(_isWhiteListed.contains(recipient) , \\\"Address is not whitelisted.\\\");\\r\\n        }\\r\\n        \\r\\n        //Cancels liq additions while devmod is on.\\r\\n        if(devMod){  \\r\\n            if(recipient == _uniswapV2Pair){\\r\\n                require(sender == owner(),\\\"Only owner can add liq.\\\");\\r\\n            }\\r\\n\\r\\n        }\\r\\n        \\r\\n        //Adding ATH sell fee and sell constraints\\r\\n        if(recipient == _uniswapV2Pair \\u0026\\u0026 cancelSellConstraints){ //IF selling\\r\\n            \\r\\n              address[] memory path = new address[](2);\\r\\n                path[0] = address(this);\\r\\n                path[1] = _uniswapV2Router.WETH();\\r\\n                \\r\\n               uint256 WillbedrainedBNB = _uniswapV2Router.getAmountsOut(amount,path)[1];\\r\\n               uint256 futurePrice = getPriceOfTokenFuture(WillbedrainedBNB,amount);\\r\\n               \\r\\n               \\r\\n               //So if any future price goes below GoldenRatioDivider no selling will happen.\\r\\n               \\r\\n                require(futurePrice.mul(1000).div(_ATHPriceINBNB) \\u003e= GoldenRatioDivider,\\\"Transaction will drop the price below the GoldenRatio , reverted.\\\");\\r\\n                require(RatioNow \\u003e= GoldenRatioDivider,\\\"Idk how you passed that requirement but it stops here.\\\");\\r\\n                \\r\\n               //Set price of token for sells.\\r\\n                setPriceOfTokenSellFuture(WillbedrainedBNB,amount);\\r\\n                //set IncreasedTaxes.\\r\\n                addIncreasedTaxes(sender);\\r\\n                //ATH dumper fee\\r\\n                addATHFees();\\r\\n            \\r\\n        }\\r\\n\\r\\n        if(sender == _uniswapV2Pair \\u0026\\u0026 cancelSellConstraints){  //If buying    \\r\\n                address[] memory path = new address[](2);\\r\\n                path[0] = address(this);\\r\\n                path[1] = _uniswapV2Router.WETH();\\r\\n                //This will be an estimate but should be pretty good if no big changes to price.\\r\\n               uint256 WillbeAddedBNB = _uniswapV2Router.getAmountsOut(amount,path)[1];\\r\\n               setPriceOfTokenBoughtFuture(WillbeAddedBNB,amount);\\r\\n\\r\\n         }\\r\\n            //Add the tax on everytransaction no matter what.So cannot send it to another wallets without tax.\\r\\n         if(sender != _uniswapV2Pair \\u0026\\u0026 recipient != _uniswapV2Pair){\\r\\n             //set IncreasedTaxes.\\r\\n             addIncreasedTaxes(sender);\\r\\n         }\\r\\n\\r\\n        if (!takeFee || devMod) {\\r\\n            _taxFeeVariable = 0;\\r\\n            _liquidityFeeVariable = 0;\\r\\n            _devFeeVariable = 0;\\r\\n            _burnFeeVariable = 0;\\r\\n        }\\r\\n\\r\\n        bool senderExcluded = _isExcludedFromReward.contains(sender);\\r\\n        bool recipientExcluded = _isExcludedFromReward.contains(recipient);\\r\\n        if (senderExcluded \\u0026\\u0026 !recipientExcluded) {\\r\\n            _transferFromExcluded(sender, recipient, amount);\\r\\n        } else if (!senderExcluded \\u0026\\u0026 recipientExcluded) {\\r\\n            _transferToExcluded(sender, recipient, amount);\\r\\n        } else if (!senderExcluded \\u0026\\u0026 !recipientExcluded) {\\r\\n            _transferStandard(sender, recipient, amount);\\r\\n        } else if (senderExcluded \\u0026\\u0026 recipientExcluded) {\\r\\n            _transferBothExcluded(sender, recipient, amount);\\r\\n        } else {\\r\\n            _transferStandard(sender, recipient, amount);\\r\\n        }\\r\\n     \\r\\n        setFeesBackToNormalInternal();\\r\\n\\r\\n\\r\\n   \\r\\n\\r\\n        \\r\\n        \\r\\n    }\\r\\n\\r\\n    function _transferStandard(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity,\\r\\n            uint256 tBurn\\r\\n        ) = _getTValues(tAmount);\\r\\n        uint256 currentRate = _getRate();\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\r\\n            tAmount,\\r\\n            tFee,\\r\\n            tLiquidity,\\r\\n            tBurn,\\r\\n            currentRate\\r\\n        );\\r\\n        uint256 rBurn = tBurn.mul(currentRate);\\r\\n\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n\\r\\n        takeTransactionFee(address(this), tLiquidity, currentRate);\\r\\n        _reflectFee(rFee, rBurn, tFee, tBurn);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferBothExcluded(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity,\\r\\n            uint256 tBurn\\r\\n        ) = _getTValues(tAmount);\\r\\n        uint256 currentRate = _getRate();\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\r\\n            tAmount,\\r\\n            tFee,\\r\\n            tLiquidity,\\r\\n            tBurn,\\r\\n            currentRate\\r\\n        );\\r\\n        uint256 rBurn = tBurn.mul(currentRate);\\r\\n\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n\\r\\n        takeTransactionFee(address(this), tLiquidity, currentRate);\\r\\n        _reflectFee(rFee, rBurn, tFee, tBurn);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferToExcluded(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity,\\r\\n            uint256 tBurn\\r\\n        ) = _getTValues(tAmount);\\r\\n        uint256 currentRate = _getRate();\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\r\\n            tAmount,\\r\\n            tFee,\\r\\n            tLiquidity,\\r\\n            tBurn,\\r\\n            currentRate\\r\\n        );\\r\\n        uint256 rBurn = tBurn.mul(currentRate);\\r\\n\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n\\r\\n        takeTransactionFee(address(this), tLiquidity, currentRate);\\r\\n        _reflectFee(rFee, rBurn, tFee, tBurn);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _transferFromExcluded(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount\\r\\n    ) private {\\r\\n        (\\r\\n            uint256 tTransferAmount,\\r\\n            uint256 tFee,\\r\\n            uint256 tLiquidity,\\r\\n            uint256 tBurn\\r\\n        ) = _getTValues(tAmount);\\r\\n        uint256 currentRate = _getRate();\\r\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\\r\\n            tAmount,\\r\\n            tFee,\\r\\n            tLiquidity,\\r\\n            tBurn,\\r\\n            currentRate\\r\\n        );\\r\\n        uint256 rBurn = tBurn.mul(currentRate);\\r\\n\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\r\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\r\\n\\r\\n        takeTransactionFee(address(this), tLiquidity, currentRate);\\r\\n        _reflectFee(rFee, rBurn, tFee, tBurn);\\r\\n        emit Transfer(sender, recipient, tTransferAmount);\\r\\n    }\\r\\n\\r\\n    function _reflectFee(\\r\\n        uint256 rFee,\\r\\n        uint256 rBurn,\\r\\n        uint256 tFee,\\r\\n        uint256 tBurn\\r\\n    ) private {\\r\\n        _rTotal = _rTotal.sub(rFee).sub(rBurn);\\r\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\r\\n        _tBurnTotal = _tBurnTotal.add(tBurn);\\r\\n        _tTotal = _tTotal.sub(tBurn);\\r\\n    }\\r\\n\\r\\n    function _getTValues(uint256 tAmount)\\r\\n        private\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        uint256 tFee = tAmount.mul(_taxFeeVariable).div(10000);\\r\\n        // We treat the dev fee as part of the total liquidity fee\\r\\n        uint256 tLiquidity = tAmount.mul(_liquidityFeeVariable.add(_devFeeVariable)).div(10000);\\r\\n        uint256 tBurn = tAmount.mul(_burnFeeVariable).div(10000);\\r\\n        uint256 tTransferAmount = tAmount.sub(tFee);\\r\\n        tTransferAmount = tTransferAmount.sub(tLiquidity);\\r\\n        tTransferAmount = tTransferAmount.sub(tBurn);\\r\\n        return (tTransferAmount, tFee, tLiquidity, tBurn);\\r\\n    }\\r\\n\\r\\n    function _getRValues(\\r\\n        uint256 tAmount,\\r\\n        uint256 tFee,\\r\\n        uint256 tLiquidity,\\r\\n        uint256 tBurn,\\r\\n        uint256 currentRate\\r\\n    )\\r\\n        private\\r\\n        pure\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        )\\r\\n    {\\r\\n        uint256 rAmount = tAmount.mul(currentRate);\\r\\n        uint256 rFee = tFee.mul(currentRate);\\r\\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\\r\\n        uint256 rBurn = tBurn.mul(currentRate);\\r\\n        uint256 rTransferAmount = rAmount.sub(rFee);\\r\\n        rTransferAmount = rTransferAmount.sub(rLiquidity);\\r\\n        rTransferAmount = rTransferAmount.sub(rBurn);\\r\\n        return (rAmount, rTransferAmount, rFee);\\r\\n    }\\r\\n\\r\\n    function _getRate() private view returns (uint256) {\\r\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n        return rSupply.div(tSupply);\\r\\n    }\\r\\n\\r\\n    function _getCurrentSupply() private view returns (uint256, uint256) {\\r\\n        uint256 rSupply = _rTotal;\\r\\n        uint256 tSupply = _tTotal;\\r\\n        for (uint256 i = 0; i \\u003c _isExcludedFromReward.length(); i++) {\\r\\n            address excludedAddress = _isExcludedFromReward.at(i);\\r\\n            if (\\r\\n                _rOwned[excludedAddress] \\u003e rSupply ||\\r\\n                _tOwned[excludedAddress] \\u003e tSupply\\r\\n            ) return (_rTotal, _tTotal);\\r\\n            rSupply = rSupply.sub(_rOwned[excludedAddress]);\\r\\n            tSupply = tSupply.sub(_tOwned[excludedAddress]);\\r\\n        }\\r\\n        if (rSupply \\u003c _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\r\\n        return (rSupply, tSupply);\\r\\n    }\\r\\n\\r\\n    function takeTransactionFee(\\r\\n        address to,\\r\\n        uint256 tAmount,\\r\\n        uint256 currentRate\\r\\n    ) private {\\r\\n        if (tAmount \\u003c= 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 rAmount = tAmount.mul(currentRate);\\r\\n        _rOwned[to] = _rOwned[to].add(rAmount);\\r\\n        if (_isExcludedFromReward.contains(to)) {\\r\\n            _tOwned[to] = _tOwned[to].add(tAmount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"Library.sol\":{\"content\":\"pragma solidity ^0.8.7;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(\\r\\n            address(this).balance \\u003e= amount,\\r\\n            \\\"Address: insufficient balance\\\"\\r\\n        );\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(\\r\\n            success,\\r\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data)\\r\\n        internal\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return\\r\\n            functionCallWithValue(\\r\\n                target,\\r\\n                data,\\r\\n                value,\\r\\n                \\\"Address: low-level call with value failed\\\"\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(\\r\\n            address(this).balance \\u003e= value,\\r\\n            \\\"Address: insufficient balance for call\\\"\\r\\n        );\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 weiValue,\\r\\n        string memory errorMessage\\r\\n    ) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) =\\r\\n            target.call{value: weiValue}(data);\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping(bytes32 =\\u003e uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) {\\r\\n            // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\r\\n\\r\\n            bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n            // Move the last value to the index where the value to delete is\\r\\n            set._values[toDeleteIndex] = lastvalue;\\r\\n            // Update the index for the moved value\\r\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue\\u0027s index to valueIndex\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value)\\r\\n        private\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function _at(Set storage set, uint256 index)\\r\\n        private\\r\\n        view\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        require(\\r\\n            set._values.length \\u003e index,\\r\\n            \\\"EnumerableSet: index out of bounds\\\"\\r\\n        );\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value)\\r\\n        internal\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value)\\r\\n        internal\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(Bytes32Set storage set, uint256 index)\\r\\n        internal\\r\\n        view\\r\\n        returns (bytes32)\\r\\n    {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value)\\r\\n        internal\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value)\\r\\n        internal\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(AddressSet storage set, uint256 index)\\r\\n        internal\\r\\n        view\\r\\n        returns (address)\\r\\n    {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value)\\r\\n        internal\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(UintSet storage set, uint256 index)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IBEP20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount)\\r\\n        external\\r\\n        returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    \\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n    address private _lockedLiquidity;\\r\\n    address payable private _devWallet;\\r\\n\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor(address initialOwner) {\\r\\n        _owner = initialOwner;\\r\\n        emit OwnershipTransferred(address(0), initialOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function lockedLiquidity() public view returns (address) {\\r\\n        return _lockedLiquidity;\\r\\n    }\\r\\n\\r\\n    function devWallet() internal view returns (address payable) {\\r\\n        return _devWallet;\\r\\n    }\\r\\n    \\r\\n    function devWalletByOwner() external view onlyOwner returns (address payable) {\\r\\n        return _devWallet;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyDev() {\\r\\n        require(\\r\\n            _devWallet == _msgSender(),\\r\\n            \\\"Caller is not the devWallet address\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setDevWalletAddress(address payable devWalletAddress)\\r\\n        public\\r\\n        virtual\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            _devWallet == address(0),\\r\\n            \\\"Dev wallet address cannot be changed once set\\\"\\r\\n        );\\r\\n        _devWallet = devWalletAddress;\\r\\n    }\\r\\n\\r\\n    function setLockedLiquidityAddress(address liquidityAddress)\\r\\n        public\\r\\n        virtual\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            _lockedLiquidity == address(0),\\r\\n            \\\"Locked liquidity address cannot be changed once set\\\"\\r\\n        );\\r\\n        _lockedLiquidity = liquidityAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(\\r\\n            newOwner != address(0),\\r\\n            \\\"Ownable: new owner is the zero address\\\"\\r\\n        );\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        address pair,\\r\\n        uint256\\r\\n    );\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        view\\r\\n        returns (address pair);\\r\\n\\r\\n    function allPairs(uint256) external view returns (address pair);\\r\\n\\r\\n    function allPairsLength() external view returns (uint256);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\r\\n    event Burn(\\r\\n        address indexed sender,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint256 amount0In,\\r\\n        uint256 amount1In,\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint112 reserve0,\\r\\n            uint112 reserve1,\\r\\n            uint32 blockTimestampLast\\r\\n        );\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint256);\\r\\n\\r\\n    function kLast() external view returns (uint256);\\r\\n\\r\\n    function mint(address to) external returns (uint256 liquidity);\\r\\n\\r\\n    function burn(address to)\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint256 amount0Out,\\r\\n        uint256 amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactETHForTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapTokensForExactETH(\\r\\n        uint256 amountOut,\\r\\n        uint256 amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapExactTokensForETH(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256[] memory amounts);\\r\\n\\r\\n    function swapETHForExactTokens(\\r\\n        uint256 amountOut,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable returns (uint256[] memory amounts);\\r\\n\\r\\n    function quote(\\r\\n        uint256 amountA,\\r\\n        uint256 reserveA,\\r\\n        uint256 reserveB\\r\\n    ) external pure returns (uint256 amountB);\\r\\n\\r\\n    function getAmountOut(\\r\\n        uint256 amountIn,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountOut);\\r\\n\\r\\n    function getAmountIn(\\r\\n        uint256 amountOut,\\r\\n        uint256 reserveIn,\\r\\n        uint256 reserveOut\\r\\n    ) external pure returns (uint256 amountIn);\\r\\n\\r\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n\\r\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline,\\r\\n        bool approveMax,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external returns (uint256 amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external payable;\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbCollected\",\"type\":\"uint256\"}],\"name\":\"DevFeesCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GoldenRatioDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PER_ATH_BURN_ACTIVATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ShutDownCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ATHDumperBurnAdd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFeeVariable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devFeeVariable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFeeVariable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFeeVariable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"added\",\"type\":\"address\"}],\"name\":\"addToBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"added\",\"type\":\"address\"}],\"name\":\"addToWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectDevFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"buys\",\"type\":\"bool\"}],\"name\":\"devMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devPercentageOfLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWalletByOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyTaxInformation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"myTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leftTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"substractedBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedGoldenRatio\",\"type\":\"uint256\"}],\"name\":\"getPriceOfTokenFuture\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOfTokenNow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pureLiquidityPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeDevMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setATHDumperFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"}],\"name\":\"setATHDumperMaxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isit\",\"type\":\"bool\"}],\"name\":\"setATHthingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"blacklist\",\"type\":\"bool\"}],\"name\":\"setBlackListEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setBurnFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"}],\"name\":\"setDevFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"devWalletAddress\",\"type\":\"address\"}],\"name\":\"setDevWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setFeeResetTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setFeesBackToDefault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setFeesToZero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setGoldenRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"what\",\"type\":\"bool\"}],\"name\":\"setIncreasingTaxForSellsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setIsExcludedFromSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityAddress\",\"type\":\"address\"}],\"name\":\"setLockedLiquidityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTax\",\"type\":\"uint256\"}],\"name\":\"setMaxSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLiquidityPercent\",\"type\":\"uint256\"}],\"name\":\"setMinLiquidityPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"what\",\"type\":\"bool\"}],\"name\":\"setSellContraints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxnumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"setTaxesByAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTaxesToDefaultForSellTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"what\",\"type\":\"bool\"}],\"name\":\"setToNormalOnAnyError\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"p\",\"type\":\"address\"}],\"name\":\"setUniswapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"r\",\"type\":\"address\"}],\"name\":\"setUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"}],\"name\":\"setWhitelistEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDevFeesCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniSwapV2PairContract\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Fibonacci", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007f8751b6567871b703090363284c6deb5e8fbd3d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e114ca1679b52bc0935896a54a51116f15790023db86d9aae5263ddb53553ee4"}