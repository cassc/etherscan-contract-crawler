{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-08-28\r\n*/\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        if (_status == _ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address initialOwner) {\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ncontract Staking is Ownable, ReentrancyGuard {\r\n\r\n    uint256 private constant DENOMINATOR = 10000;\r\n    uint256 private constant REWARD_PERIOD = 365 days;\r\n    uint256 private constant EARLY_WITHDRAWAL_PENALTY = 60;\r\n\r\n    bool private lockupPeriodEnabled = true;\r\n\r\n    uint256 private withdrawalTaxes = 0;\r\n\r\n    struct Pool {\r\n        uint256 apy;\r\n        uint256 lockupPeriod;\r\n        bool isOpen;\r\n        uint256 totalStaked;\r\n        uint256 totalWithdrawn;\r\n    }\r\n\r\n    Pool firstPool = Pool(1000, 7 days, false, 0, 0);\r\n    Pool secondPool = Pool(2500, 30 days, false, 0, 0);\r\n    Pool thirdPool = Pool(5000, 60 days, false, 0, 0);\r\n\r\n    struct User {\r\n        uint256 stakedOnTimestamp;\r\n        uint256 stakeEndTimestamp;\r\n        uint256 stakedAmount;\r\n        uint256 lockupTimestamp;\r\n        uint256 lastActionTimestamp;\r\n    }\r\n\r\n    IERC20 private quackToken = IERC20(0x11c13F1863b760576457F2cc4214d780fC87232b);\r\n\r\n    mapping(uint256 => Pool) private pools; // Pool ID => Pool struct\r\n\r\n    mapping(address => mapping(uint256 => User)) private userInPool; // User address => Pool ID => User struct of this individual pool\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        pools[0] = firstPool;\r\n        pools[1] = secondPool;\r\n        pools[2] = thirdPool;\r\n    }\r\n\r\n    function stake(uint256 poolId, uint256 amount) external nonReentrant {\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        require(poolId >= 0 && poolId <= 2, \"Pool ID must be between 0 and 2\");\r\n        require(pools[poolId].isOpen, \"Pool is not open\");\r\n        \r\n        IERC20(quackToken).transferFrom(msg.sender, address(this), amount);\r\n\r\n        Pool memory pool = pools[poolId];\r\n\r\n        User memory user = userInPool[msg.sender][poolId];\r\n\r\n        if (user.stakedAmount > 0) {\r\n\r\n            uint256 secondsPassed = block.timestamp - user.lastActionTimestamp;\r\n\r\n            uint256 rewards = calculateRewards(msg.sender, poolId, secondsPassed, user.stakedAmount);\r\n\r\n            uint256 addAmount = amount + rewards;\r\n\r\n            userInPool[msg.sender][poolId].lastActionTimestamp = block.timestamp;\r\n\r\n            userInPool[msg.sender][poolId].stakedAmount += addAmount;\r\n\r\n            userInPool[msg.sender][poolId].lockupTimestamp = block.timestamp + pool.lockupPeriod;\r\n\r\n            userInPool[msg.sender][poolId].stakeEndTimestamp = block.timestamp + pool.lockupPeriod;\r\n\r\n            pools[poolId].totalStaked += addAmount;\r\n\r\n        } else {\r\n            \r\n            userInPool[msg.sender][poolId] = User(block.timestamp, block.timestamp + pool.lockupPeriod, amount, block.timestamp + pool.lockupPeriod, block.timestamp);\r\n\r\n            pools[poolId].totalStaked += amount;\r\n\r\n        }\r\n\r\n        emit newStake(msg.sender, poolId, amount);\r\n    }\r\n\r\n    function reStake(uint256 poolId) external nonReentrant {\r\n        require(poolId >= 0 && poolId <= 2, \"Pool ID must be between 0 and 2\");\r\n        require(pools[poolId].isOpen, \"Pool is not open\");\r\n\r\n        Pool memory pool = pools[poolId];\r\n\r\n        User memory user = userInPool[msg.sender][poolId];\r\n\r\n        require(user.stakedAmount > 0, \"User has no staked amount in this pool.\");\r\n\r\n        uint256 secondsPassed = block.timestamp - user.lastActionTimestamp;\r\n\r\n        uint256 rewards = calculateRewards(msg.sender, poolId, secondsPassed, user.stakedAmount);\r\n\r\n        userInPool[msg.sender][poolId].lastActionTimestamp = block.timestamp;\r\n\r\n        userInPool[msg.sender][poolId].stakedAmount += rewards;\r\n\r\n        userInPool[msg.sender][poolId].stakeEndTimestamp = block.timestamp + pool.lockupPeriod;\r\n\r\n        userInPool[msg.sender][poolId].lockupTimestamp = block.timestamp + pool.lockupPeriod;\r\n\r\n        pools[poolId].totalStaked += rewards;\r\n\r\n        emit reStaked(msg.sender, poolId, rewards);\r\n    }\r\n\r\n    function claimRewards(uint256 poolId) external nonReentrant {\r\n        require(poolId >= 0 && poolId <= 2, \"Pool ID must be between 0 and 2.\");\r\n\r\n        User memory user = userInPool[msg.sender][poolId];\r\n\r\n        require(user.stakedAmount > 0, \"User has no staked amount in this pool.\");\r\n\r\n        uint256 secondsPassed = block.timestamp - user.lastActionTimestamp;\r\n\r\n        uint256 rewards = calculateRewards(msg.sender, poolId, secondsPassed, user.stakedAmount);\r\n\r\n        require(rewards > 0, \"No rewards to claim.\");\r\n\r\n        userInPool[msg.sender][poolId].lastActionTimestamp = block.timestamp;\r\n\r\n        IERC20(quackToken).transfer(msg.sender, rewards);\r\n\r\n        emit claimedRewards(msg.sender, poolId, rewards);\r\n    }\r\n\r\n    function withdrawStake(uint256 poolId) external nonReentrant {\r\n        require(poolId >= 0 && poolId <= 2, \"Pool ID must be between 0 and 2.\");\r\n\r\n        User memory user = userInPool[msg.sender][poolId];\r\n\r\n        require(user.stakedAmount > 0, \"User has no staked amount in this pool.\");\r\n        \r\n        if(lockupPeriodEnabled) {\r\n            require(block.timestamp >= user.lockupTimestamp, \"Lockup period has not passed yet.\");\r\n        }\r\n\r\n        uint256 secondsPassed = block.timestamp - user.lastActionTimestamp;\r\n\r\n        uint256 rewards = calculateRewards(msg.sender, poolId, secondsPassed, user.stakedAmount);\r\n\r\n        uint256 totalAmount;\r\n\r\n        if(rewards > 0) {\r\n            totalAmount = user.stakedAmount + rewards;\r\n        } else {\r\n            totalAmount = user.stakedAmount;\r\n        }\r\n\r\n        userInPool[msg.sender][poolId].stakedAmount = 0;\r\n        userInPool[msg.sender][poolId].stakedOnTimestamp = 0;\r\n        userInPool[msg.sender][poolId].stakeEndTimestamp = 0;\r\n        userInPool[msg.sender][poolId].lockupTimestamp = 0;\r\n        userInPool[msg.sender][poolId].lastActionTimestamp = 0;\r\n\r\n        pools[poolId].totalStaked -= (totalAmount - rewards);\r\n        pools[poolId].totalWithdrawn += totalAmount;\r\n\r\n        IERC20(quackToken).transfer(msg.sender, totalAmount);\r\n\r\n        emit withdrewStake(msg.sender, poolId, totalAmount);\r\n    }\r\n\r\n    function forceWithdrawStake(uint256 poolId) external nonReentrant {\r\n        require(poolId >= 0 && poolId <= 2, \"Pool ID must be between 0 and 2.\");\r\n\r\n        User memory user = userInPool[msg.sender][poolId];\r\n\r\n        require(user.stakedAmount > 0, \"User has no staked amount in this pool.\");\r\n\r\n        uint256 secondsPassed = block.timestamp - user.lastActionTimestamp;\r\n\r\n        uint256 rewards = calculateRewards(msg.sender, poolId, secondsPassed, user.stakedAmount);\r\n\r\n        uint256 totalAmount;\r\n\r\n        if(rewards > 0) {\r\n            totalAmount = user.stakedAmount + rewards;\r\n        } else {\r\n            totalAmount = user.stakedAmount;\r\n        }\r\n\r\n        uint256 earlyWithdrawalPenalty = totalAmount * EARLY_WITHDRAWAL_PENALTY / 100;\r\n\r\n        totalAmount -= earlyWithdrawalPenalty;\r\n\r\n        withdrawalTaxes += earlyWithdrawalPenalty;\r\n\r\n        userInPool[msg.sender][poolId].stakedAmount = 0;\r\n        userInPool[msg.sender][poolId].stakedOnTimestamp = 0;\r\n        userInPool[msg.sender][poolId].stakeEndTimestamp = 0;\r\n        userInPool[msg.sender][poolId].lockupTimestamp = 0;\r\n        userInPool[msg.sender][poolId].lastActionTimestamp = 0;\r\n\r\n        pools[poolId].totalStaked -= (totalAmount - rewards) + earlyWithdrawalPenalty;\r\n        pools[poolId].totalWithdrawn += totalAmount + earlyWithdrawalPenalty;\r\n\r\n        IERC20(quackToken).transfer(msg.sender, totalAmount);\r\n\r\n        emit forcedWithdrawStake(msg.sender, poolId, totalAmount);\r\n    }\r\n\r\n    function getTotalStakedPool(uint256 poolId) external view returns (uint256) {\r\n        return pools[poolId].totalStaked;\r\n    }\r\n\r\n    function getTotalWithdrawnPool(uint256 poolId) external view returns (uint256) {\r\n        return pools[poolId].totalWithdrawn;\r\n    }\r\n\r\n    function getPool(uint256 poolId) external view returns (Pool memory) {\r\n        return pools[poolId];\r\n    }\r\n\r\n    function getUserInPool(address user, uint256 poolId) external view returns (User memory) {\r\n        return userInPool[user][poolId];\r\n    }\r\n\r\n    function getPoolApy(uint256 poolId) external view returns (uint256) {\r\n        return pools[poolId].apy;\r\n    }\r\n\r\n    function getPoolLockupPeriod(uint256 poolId) external view returns (uint256) {\r\n        return pools[poolId].lockupPeriod;\r\n    }\r\n\r\n    function getPoolIsOpen(uint256 poolId) external view returns (bool) {\r\n        return pools[poolId].isOpen;\r\n    }\r\n\r\n    function getLockupPeriodEnabled() external view returns (bool) {\r\n        return lockupPeriodEnabled;\r\n    }\r\n\r\n    function getUserStakedAmount(address user, uint256 poolId) external view returns (uint256) {\r\n        return userInPool[user][poolId].stakedAmount;\r\n    }\r\n\r\n    function getUserLockupEndTimestamp(address user, uint256 poolId) external view returns (uint256) {\r\n        return userInPool[user][poolId].lockupTimestamp;\r\n    }\r\n\r\n    function getUserStakedOnTimestamp(address user, uint256 poolId) external view returns (uint256) {\r\n        return userInPool[user][poolId].stakedOnTimestamp;\r\n    }\r\n\r\n    function getUserStakeEndTimestamp(address user, uint256 poolId) external view returns (uint256) {\r\n        return userInPool[user][poolId].stakeEndTimestamp;\r\n    }\r\n\r\n    function getUserPendingRewards(address user, uint256 poolId) external view returns (uint256) {\r\n        User memory _user = userInPool[user][poolId];\r\n\r\n        uint256 secondsPassed = block.timestamp - _user.lastActionTimestamp;\r\n\r\n        uint256 rewards = calculateRewards(user, poolId, secondsPassed, _user.stakedAmount);\r\n\r\n        return rewards;\r\n    }\r\n\r\n    function openAllPools() external onlyOwner {\r\n        pools[0].isOpen = true;\r\n        pools[1].isOpen = true;\r\n        pools[2].isOpen = true;\r\n        emit openedAllPools();\r\n    }\r\n\r\n    function closeAllPools() external onlyOwner {\r\n        pools[0].isOpen = false;\r\n        pools[1].isOpen = false;\r\n        pools[2].isOpen = false;\r\n        emit closedAllPools();\r\n    }\r\n\r\n    function setApy(uint256 poolId, uint256 _apy) external onlyOwner {\r\n        require(poolId >= 0 && poolId <= 2, \"Pool ID must be between 0 and 2.\");\r\n        require(_apy >= 0, \"APY must be greater than or equal to 0.\");\r\n        require(_apy <= 10000, \"APY must be less than or equal to 100.\");\r\n        pools[poolId].apy = _apy;\r\n        emit changedApy(poolId, _apy);\r\n    }\r\n\r\n    function setPoolOpen(uint256 poolId, bool _isOpen) external onlyOwner {\r\n        require(poolId >= 0 && poolId <= 2, \"Pool ID must be between 0 and 2.\");\r\n        pools[poolId].isOpen = _isOpen;\r\n        emit switchedPoolOpen(poolId, _isOpen);\r\n    }\r\n        \r\n    function setLockupPeriodEnabled(bool _lockupPeriodEnabled) external onlyOwner {\r\n        lockupPeriodEnabled = _lockupPeriodEnabled;\r\n        emit switchedLockupPeriodEnabled(_lockupPeriodEnabled);\r\n    }\r\n\r\n    function ownerWithdraw(uint256 amount) external onlyOwner {\r\n        uint256 balance = IERC20(quackToken).balanceOf(address(this));\r\n        uint256 withdrawable = balance - pools[0].totalStaked - pools[1].totalStaked - pools[2].totalStaked;\r\n        require(amount <= withdrawable, \"Amount must be less than or equal to withdrawable amount.\");\r\n        IERC20(quackToken).transfer(msg.sender, amount);\r\n        emit ownerWithdrawed(amount);\r\n    }\r\n\r\n    function calculateRewards(address userAddr, uint256 poolId, uint256 secondsPassed, uint256 amount) private view returns (uint256) {\r\n        require(poolId >= 0 && poolId <= 2, \"Pool ID must be between 0 and 2.\");\r\n\r\n        Pool memory pool = pools[poolId];\r\n        User memory user = userInPool[userAddr][poolId];\r\n\r\n        if(block.timestamp >= user.stakeEndTimestamp && user.lastActionTimestamp < user.stakeEndTimestamp) {\r\n            secondsPassed = user.stakeEndTimestamp - user.lastActionTimestamp;\r\n        }\r\n\r\n        uint256 apy = pool.apy;\r\n\r\n        uint256 rewards = (secondsPassed * apy * amount) / (REWARD_PERIOD * DENOMINATOR);\r\n\r\n        return rewards;\r\n    }\r\n\r\n    event switchedLockupPeriodEnabled(bool _lockupPeriodEnabled);\r\n    event switchedPoolOpen(uint256 poolId, bool _isOpen);\r\n    event changedApy(uint256 poolId, uint256 _apy);\r\n    event ownerWithdrawed(uint256 amount);\r\n    event openedAllPools();\r\n    event closedAllPools();\r\n    event newStake(address user, uint256 poolId, uint256 amount);\r\n    event reStaked(address user, uint256 poolId, uint256 amount);\r\n    event claimedRewards(address user, uint256 poolId, uint256 amount);\r\n    event withdrewStake(address user, uint256 poolId, uint256 amount);\r\n    event forcedWithdrawStake(address user, uint256 poolId, uint256 amount);\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"}],\"name\":\"changedApy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"closedAllPools\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"forcedWithdrawStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"newStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"openedAllPools\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_lockupPeriodEnabled\",\"type\":\"bool\"}],\"name\":\"switchedLockupPeriodEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isOpen\",\"type\":\"bool\"}],\"name\":\"switchedPoolOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrewStake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeAllPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"forceWithdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockupPeriodEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolApy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolIsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolLockupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getTotalStakedPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getTotalWithdrawnPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getUserInPool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakedOnTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastActionTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct Staking.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getUserLockupEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getUserPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getUserStakeEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getUserStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getUserStakedOnTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openAllPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"reStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"}],\"name\":\"setApy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lockupPeriodEnabled\",\"type\":\"bool\"}],\"name\":\"setLockupPeriodEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isOpen\",\"type\":\"bool\"}],\"name\":\"setPoolOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://28a83d8cc969d42324c084ae6ce6243fccb96fc49d4ce1c3b1861ad84b7f5c3c"}