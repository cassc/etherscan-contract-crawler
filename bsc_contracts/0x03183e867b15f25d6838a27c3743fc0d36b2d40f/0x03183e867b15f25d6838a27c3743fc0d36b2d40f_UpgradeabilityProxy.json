{"SourceCode": "// SPDX-License-Identifier:No-License\r\n// File: contracts/Proxy/Proxy.sol\r\n\r\n\r\npragma solidity 0.8.7;\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Gives the possibility to delegate any call to a foreign implementation.\r\n */\r\nabstract contract Proxy {\r\n\r\n    \r\n    /**\r\n     * @dev Tells the address of the implementation where every call will be delegated.\r\n     * @return address of the implementation to which it will be delegated\r\n     */\r\n    function implementation() public virtual view returns (address);\r\n\r\n    /**\r\n     * @dev Fallback function allowing to perform a delegatecall to the given implementation.\r\n     * This function will return whatever the implementation call returns\r\n     */\r\n    function _delegate() internal virtual {\r\n        address _impl = implementation();\r\n        require(_impl != address(0),\"ERR_IMPLEMENTEION_ZERO\");\r\n\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0, calldatasize())\r\n            let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\r\n            let size := returndatasize()\r\n            returndatacopy(ptr, 0, size)\r\n\r\n            switch result\r\n                case 0 {\r\n                    revert(ptr, size)\r\n                }\r\n                default {\r\n                    return(ptr, size)\r\n                }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `implementation()`. Will run if no other\r\n     * function in the contract matches the call data.\r\n     */\r\n    fallback() external payable virtual {\r\n        _delegate();\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function that delegates calls to the address returned by `implementation()`. Will run if call data\r\n     * is empty.\r\n     */\r\n    receive() external payable virtual {\r\n        _delegate();\r\n    }\r\n}\r\n// File: contracts/Proxy/IRegistry.sol\r\n\r\n\r\npragma solidity 0.8.7;\r\n\r\n/**\r\n * @title IRegistry\r\n * @dev This contract represents the interface of a registry contract\r\n */\r\ninterface IRegistry {\r\n  /**\r\n  * @dev This event will be emitted every time a new proxy is created\r\n  * @param proxy representing the address of the proxy created\r\n  */\r\n  event ProxyCreated(address proxy);\r\n\r\n  /**\r\n  * @dev This event will be emitted every time a new implementation is registered\r\n  * @param version representing the version name of the registered implementation\r\n  * @param implementation representing the address of the registered implementation\r\n  */\r\n  event VersionAdded(uint256 version, address implementation);\r\n\r\n  /**\r\n  * @dev Registers a new version with its implementation address\r\n  * @param version representing the version name of the new implementation to be registered\r\n  * @param implementation representing the address of the new implementation to be registered\r\n  */\r\n  function addVersion(uint256 version, address implementation) external;\r\n\r\n  /**\r\n  * @dev Tells the address of the implementation for a given version\r\n  * @param version to query the implementation of\r\n  * @return address of the implementation registered for the given version\r\n  */\r\n  function getVersion(uint256 version) external view returns (address);\r\n}\r\n\r\n// File: contracts/Proxy/UpgradeabilityStorage.sol\r\n\r\n\r\npragma solidity 0.8.7;\r\n\r\n\r\n\r\n/**\r\n * @title UpgradeabilityStorage\r\n * @dev This contract holds all the necessary state variables to support the upgrade functionality\r\n */\r\nabstract  contract UpgradeabilityStorage is Proxy {\r\n    // Versions registry\r\n    IRegistry public registry;\r\n\r\n    // Address of the current implementation\r\n    address internal _implementation;\r\n\r\n    /**\r\n     * @dev Tells the address of the current implementation\r\n     * @return address of the current implementation\r\n     */\r\n    function implementation() public override view returns (address) {\r\n        return _implementation;\r\n    }\r\n}\r\n\r\n// File: contracts/Proxy/UpgradeabilityProxy.sol\r\n\r\n\r\npragma solidity 0.8.7;\r\n\r\n\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev This contract represents a proxy where the implementation address to which it will delegate can be upgraded\r\n */\r\ncontract UpgradeabilityProxy is UpgradeabilityStorage {\r\n    /**\r\n     * @dev Constructor function\r\n     */\r\n    constructor(uint256 _version)  {\r\n        registry = IRegistry(msg.sender);\r\n        upgradeTo(_version);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrades the implementation to the requested version\r\n     * @param _version representing the version name of the new implementation to be set\r\n     */\r\n    function upgradeTo(uint256 _version) public {\r\n        require(msg.sender == address(registry),\"ERR_ONLY_REGISTRERY_CAN_CALL\");\r\n        _implementation = registry.getVersion(_version);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UpgradeabilityProxy", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "1", "Implementation": "0x9da52e4e501a8442ccecffdae31065dfb329faf3", "SwarmSource": "ipfs://979d3f9d0b5dd1ce35eb0ca195a10b55fb4bdec65053404b53f2b9514646533d"}