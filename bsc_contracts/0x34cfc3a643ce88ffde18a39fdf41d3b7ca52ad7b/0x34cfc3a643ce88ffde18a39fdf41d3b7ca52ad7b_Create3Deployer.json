{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Create3Deployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./libraries/Create3.sol\\\";\\n\\ncontract Create3Deployer is Ownable {\\n    constructor(address owner_) Ownable(owner_) {} // solhint-disable-line no-empty-blocks\\n\\n    function deploy(bytes32 salt, bytes calldata code) external onlyOwner returns (address) {\\n        return Create3.create3(salt, code);\\n    }\\n\\n    function addressOf(bytes32 salt) external view returns (address) {\\n        return Create3.addressOf(salt);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Create3.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.21;\\n\\n/**\\n  @title A library for deploying contracts EIP-3171 style.\\n  @author Agustin Aguilar <aa@horizon.io>\\n*/\\nlibrary Create3 {\\n  error ErrorCreatingProxy();\\n  error ErrorCreatingContract();\\n  error TargetAlreadyExists();\\n\\n  /**\\n    @notice The bytecode for a contract that proxies the creation of another contract\\n    @dev If this code is deployed using CREATE2 it can be used to decouple `creationCode` from the child contract address\\n\\n  0x67363d3d37363d34f0ff3d5260086017f3:\\n      0x00  0x68  0x68XXXXXXXXXXXXXXXXXX  PUSH9 bytecode  0x363d3d37363d34f0ff\\n      0x01  0x3d  0x3d                    RETURNDATASIZE  0 0x363d3d37363d34f0ff\\n      0x02  0x52  0x52                    MSTORE\\n      0x03  0x60  0x6009                  PUSH1 09        9\\n      0x04  0x60  0x6017                  PUSH1 17        23 9\\n      0x05  0xf3  0xf3                    RETURN\\n\\n  0x363d3d37363d34f0:\\n      0x00  0x36  0x36                    CALLDATASIZE    cds\\n      0x01  0x3d  0x3d                    RETURNDATASIZE  0 cds\\n      0x02  0x3d  0x3d                    RETURNDATASIZE  0 0 cds\\n      0x03  0x37  0x37                    CALLDATACOPY\\n      0x04  0x36  0x36                    CALLDATASIZE    cds\\n      0x05  0x3d  0x3d                    RETURNDATASIZE  0 cds\\n      0x06  0x34  0x34                    CALLVALUE       val 0 cds\\n      0x07  0xf0  0xf0                    CREATE          addr\\n      0x08  0xff  0xff                    SELFDESTRUCT\\n  */\\n\\n  bytes private constant _PROXY_CHILD_BYTECODE = hex\\\"68_36_3d_3d_37_36_3d_34_f0_ff_3d_52_60_09_60_17_f3\\\";\\n\\n  //                        KECCAK256_PROXY_CHILD_BYTECODE = keccak256(PROXY_CHILD_BYTECODE);\\n  bytes32 private constant _KECCAK256_PROXY_CHILD_BYTECODE = keccak256(_PROXY_CHILD_BYTECODE); // 0x21c35dbe1b344a2488cf3321d6ce542f8e9f305544ff09e4993a62319a497c1f;\\n\\n  /**\\n    @notice Creates a new contract with given `_creationCode` and `_salt`\\n    @param _salt Salt of the contract creation, resulting address will be derivated from this value only\\n    @param _creationCode Creation code (constructor) of the contract to be deployed, this value doesn't affect the resulting address\\n    @return addr of the deployed contract, reverts on error\\n  */\\n  function create3(bytes32 _salt, bytes memory _creationCode) internal returns (address addr) {\\n    // Creation code\\n    bytes memory creationCode = _PROXY_CHILD_BYTECODE;\\n\\n    // Get target final address\\n    addr = addressOf(_salt);\\n    if (addr.code.length != 0) revert TargetAlreadyExists();\\n\\n    // Create CREATE2 proxy\\n    // solhint-disable-next-line no-inline-assembly\\n    address proxy; assembly { proxy := create2(0, add(creationCode, 32), mload(creationCode), _salt)}\\n    if (proxy == address(0)) revert ErrorCreatingProxy();\\n\\n    // Call proxy with final init code\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success,) = proxy.call(_creationCode);\\n    if (!success || addr.code.length == 0) revert ErrorCreatingContract();\\n  }\\n\\n  /**\\n    @notice Computes the resulting address of a contract deployed using address(this) and the given `_salt`\\n    @param _salt Salt of the contract creation, resulting address will be derivated from this value only\\n    @return addr of the deployed contract, reverts on error\\n\\n    @dev The address creation formula is: keccak256(rlp([keccak256(0xff ++ address(this) ++ _salt ++ keccak256(childBytecode))[12:], 0x01]))\\n  */\\n  function addressOf(bytes32 _salt) internal view returns (address) {\\n    address proxy = address(\\n      uint160(\\n        uint256(\\n          keccak256(\\n            abi.encodePacked(\\n              hex'ff',\\n              address(this),\\n              _salt,\\n              _KECCAK256_PROXY_CHILD_BYTECODE\\n            )\\n          )\\n        )\\n      )\\n    );\\n\\n    return address(\\n      uint160(\\n        uint256(\\n          keccak256(\\n            abi.encodePacked(\\n              hex\\\"d6_94\\\",\\n              proxy,\\n              hex\\\"01\\\"\\n            )\\n          )\\n        )\\n      )\\n    );\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ErrorCreatingContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorCreatingProxy\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetAlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"addressOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"code\",\"type\":\"bytes\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Create3Deployer", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "00000000000000000000000018fa982b3ff0c1f63f7ec0dcfc429d5c2b0e445d", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}