{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface NFT {\r\n    function startDividend(uint256 balance) external;\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface ISwapPair {\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!owner\");\r\n        _;\r\n    }\r\n\r\n    //\u653e\u5f03\u6743\u9650\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    //\u8f6c\u79fb\u6743\u9650\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"new is 0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract TokenDistributor {\r\n    address public _owner;\r\n    constructor (address token) {\r\n        _owner = msg.sender;\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n    function claimToken(address token, address to, uint256 amount) external {\r\n        require(msg.sender == _owner, \"!owner\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address private _marketingAddress;\r\n    address private _nftAddress = 0x9C30759cFD5721DC4B2bA6fBaAE8521e03994856;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    uint256 private startTradeBlock;//\u5f00\u542f\u4ea4\u6613\u7684\u533a\u5757\r\n    mapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) private _blackList;\r\n\r\n    mapping(address => bool) private _swapPairList;\r\n\r\n    address private constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    uint256 private _tTotal;\r\n    ISwapRouter private _swapRouter;\r\n    bool private inSwap;\r\n    uint256 private numTokensSellToFund;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    address private usdt;\r\n    TokenDistributor public _tokenDistributor;\r\n    uint256 public _lpDividendFee = 2;\r\n    uint256 public _nftDividendFee = 2;\r\n    uint256 public _marketingFee = 1;\r\n    uint256 public _burnFee = 1;\r\n    uint256 private _txFee;\r\n\r\n    IERC20 private _usdtPair;\r\n    address private _pair;\r\n\r\n    uint256 private _nftLastDividendTime;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (string memory name_, string memory symbol_, uint8 decimals_, uint256 supply_, address marketingAddress_){\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n\r\n        _swapRouter = ISwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        usdt = address(0x55d398326f99059fF775485246999027B3197955);\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(_swapRouter.factory());\r\n\r\n        address usdtPair = swapFactory.createPair(address(this), usdt);\r\n        _usdtPair = IERC20(usdtPair);\r\n        _pair = usdtPair;\r\n\r\n        _swapPairList[usdtPair] = true;\r\n\r\n        _allowances[address(this)][address(_swapRouter)] = MAX;\r\n\r\n        //\u603b\u91cf\r\n        _tTotal = supply_ * 10 ** decimals_;\r\n        _balances[msg.sender] = _tTotal;\r\n        emit Transfer(address(0), msg.sender, _tTotal);\r\n\r\n        _marketingAddress = marketingAddress_;\r\n\r\n        _feeWhiteList[_marketingAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(_swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n\r\n        numTokensSellToFund = _tTotal / 100000;\r\n        _tokenDistributor = new TokenDistributor(usdt);\r\n\r\n        //\u6392\u9664 LP \u5206\u7ea2\r\n        excludeLpProvider[address(0)] = true;\r\n        excludeLpProvider[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        //\u7c89\u7ea2\u9501LP\u5408\u7ea6\u5730\u5740\r\n        excludeLpProvider[address(0x7ee058420e5937496F5a2096f04caA7721cF70cc)] = true;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(!_blackList[from], \"blackList\");\r\n\r\n        uint256 txFee;\r\n\r\n \r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n\r\n            if (0 == startTradeBlock) {\r\n                require(_feeWhiteList[from] || _feeWhiteList[to], \"!Trading\");\r\n                startTradeBlock = block.number;\r\n            }\r\n\r\n\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                bool isAddPool = false;\r\n                if(_swapPairList[to]) {\r\n                    isAddPool = isLiquidity(to);\r\n                }\r\n                if(!isAddPool) {\r\n\r\n                    txFee = _lpDividendFee + _nftDividendFee + _marketingFee;\r\n                    _txFee = _lpDividendFee + _nftDividendFee + _marketingFee + _burnFee;\r\n                }\r\n\r\n                if (block.number <= startTradeBlock + 3) {\r\n \r\n                    if (!_swapPairList[to]) {\r\n                        _blackList[to] = true;\r\n                    }\r\n                }\r\n\r\n\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                if (\r\n                    contractTokenBalance >= numTokensSellToFund &&\r\n                    !inSwap &&\r\n                    _swapPairList[to] &&\r\n                    !isAddPool\r\n                ) {\r\n                    swapTokenForFund(numTokensSellToFund);\r\n                }\r\n            } else {\r\n               \r\n            }\r\n\r\n\r\n            if (_swapPairList[from]) {\r\n                addLpProvider(to);\r\n            } else {\r\n                addLpProvider(from);\r\n            }\r\n        } else {\r\n\r\n            \r\n        }\r\n        _tokenTransfer(from, to, amount, txFee);\r\n\r\n        if (from != address(this) && startTradeBlock > 0) {\r\n            processLP(500000);\r\n        }\r\n\r\n        //\u6267\u884cNFT\u5206\u7ea2\r\n        nftAutoDividend();\r\n    }\r\n\r\n    function isLiquidity(address to) internal view returns(bool) {\r\n        (uint reserve0, uint reserve1, ) = ISwapPair(_pair).getReserves();\r\n        uint reserve = 0;\r\n        if(ISwapPair(_pair).token0()==usdt) {\r\n            reserve = reserve0;\r\n        }\r\n        if(ISwapPair(_pair).token1()==usdt) {\r\n            reserve = reserve1;\r\n        }\r\n        if(_swapPairList[to]){\r\n            if(IERC20(usdt).balanceOf(_pair) > reserve){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n   \r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        uint256 fee\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = tAmount * fee / 100;\r\n\r\n        uint256 burnAmount;\r\n\r\n        if (feeAmount > 0) {\r\n\r\n            burnAmount = tAmount * _burnFee / 100;\r\n            _takeTransfer(sender, DEAD, burnAmount);\r\n            //\u7d2f\u8ba1\u5728\u5408\u7ea6\u91cc\uff0c\u7b49\u5f85\u65f6\u673a\u5356\u51fa\uff0c\u5206\u7ea2\r\n            _takeTransfer(\r\n                sender,\r\n                address(this),\r\n                feeAmount\r\n            );\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - (feeAmount+burnAmount));\r\n    }\r\n\r\n\r\n    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n\r\n\r\n        IERC20 USDT = IERC20(usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(address(_tokenDistributor));\r\n        USDT.transferFrom(address(_tokenDistributor), address(this), usdtBalance / _txFee * _lpDividendFee);//\u6dfb\u52a0LP\u5206\u7ea2\r\n        USDT.transferFrom(address(_tokenDistributor), _nftAddress, usdtBalance / _txFee * _nftDividendFee);//NFT\u5206\u7ea2\r\n        USDT.transferFrom(address(_tokenDistributor), _marketingAddress, usdtBalance / _txFee * _marketingFee);//\u8425\u9500\r\n\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n\r\n    function setMarketingAddress(address addr) external onlyOwner {\r\n        _marketingAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n\r\n    function setNftAddress(address addr) external onlyOwner {\r\n        _nftAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n\r\n    function setFundSellAmount(uint256 amount) external onlyOwner {\r\n        numTokensSellToFund = amount * 10 ** _decimals;\r\n    }\r\n\r\n\r\n    function setBlackList(address addr, bool enable) external onlyOwner {\r\n        _blackList[addr] = enable;\r\n    }\r\n\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n\r\n    function isBlackList(address addr) external view returns (bool){\r\n        return _blackList[addr];\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n\r\n    function claimBalance() external onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n\r\n    function claimToken(address token, uint256 amount) external onlyOwner {\r\n        IERC20(token).transfer(msg.sender, amount);\r\n    }\r\n\r\n\r\n    address[] public lpProviders;\r\n    mapping(address => uint256) lpProviderIndex;\r\n\r\n    mapping(address => bool) excludeLpProvider;\r\n\r\n\r\n    function addLpProvider(address adr) private {\r\n        if (0 == lpProviderIndex[adr]) {\r\n            if (0 == lpProviders.length || lpProviders[0] != adr) {\r\n                lpProviderIndex[adr] = lpProviders.length;\r\n                lpProviders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 private currentIndex;\r\n    uint256 private lpRewardCondition = 10;\r\n    uint256 private progressLPBlock;\r\n\r\n\r\n    function processLP(uint256 gas) private {\r\n\r\n        if (progressLPBlock + 200 > block.number) {\r\n            return;\r\n        }\r\n\r\n        uint totalPair = _usdtPair.totalSupply();\r\n        if (0 == totalPair) {\r\n            return;\r\n        }\r\n\r\n        IERC20 USDT = IERC20(usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(address(this));\r\n\r\n        if (usdtBalance < lpRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 pairBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = lpProviders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n\r\n\r\n        uint256 gasLeft = gasleft();\r\n\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = lpProviders[currentIndex];\r\n\r\n            pairBalance = _usdtPair.balanceOf(shareHolder);\r\n\r\n            if (pairBalance > 0 && !excludeLpProvider[shareHolder]) {\r\n                amount = usdtBalance * pairBalance / totalPair;\r\n\r\n                if (amount > 0) {\r\n                    USDT.transfer(shareHolder, amount);\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressLPBlock = block.number;\r\n    }\r\n\r\n\r\n    function setLPRewardCondition(uint256 amount) external onlyOwner {\r\n        lpRewardCondition = amount;\r\n    }\r\n\r\n\r\n    function setExcludeLPProvider(address addr, bool enable) external onlyOwner {\r\n        excludeLpProvider[addr] = enable;\r\n    }\r\n\r\n\r\n    function setLpDividendFee(uint256 _fee) public onlyOwner {\r\n        _lpDividendFee = _fee;\r\n    }\r\n\r\n\r\n    function setNftDividendFee(uint256 _fee) public onlyOwner {\r\n        _nftDividendFee = _fee;\r\n    }\r\n\r\n\r\n    function setMarketingFee(uint256 _fee) public onlyOwner {\r\n        _marketingFee = _fee;\r\n    }\r\n\r\n\r\n    function setBurnFee(uint256 _fee) public onlyOwner {\r\n        _burnFee = _fee;\r\n    }\r\n    \r\n\r\n    function claimContractToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            _tokenDistributor.claimToken(token, _marketingAddress, amount);\r\n        }\r\n    }\r\n\r\n    function nftAutoDividend() internal {\r\n        if((block.timestamp - _nftLastDividendTime) > 86400) {\r\n            uint256 balance = IERC20(usdt).balanceOf(_nftAddress);\r\n            if(balance >0) {\r\n                _nftLastDividendTime = block.timestamp;\r\n                NFT(_nftAddress).startDividend(balance);\r\n            }\r\n        }     \r\n    }\r\n\r\n}\r\n \r\n\r\ncontract LPDividend is AbsToken {\r\n    constructor() AbsToken(\r\n\r\n        \"ANGEL\",\r\n\r\n        \"ANGEL\",\r\n\r\n        18,\r\n\r\n        21 * 10 ** 7,\r\n\r\n        address(0x504e2483ec26282D0f8494da7E4806547c671507)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimContractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpProviders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeLPProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setFundSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLPRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setLpDividendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setNftAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setNftDividendFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LPDividend", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6743cee9d82f320a5d6ae93c443dd87fc80b507f50f753c5129b4b2c4780dd9b"}