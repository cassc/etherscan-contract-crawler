{"SourceCode": "{\"BurningMoon.sol\":{\"content\":\"                                                                                                                                          \\r\\n//                                                                  %%%%%%%%%%                                                                          \\r\\n//                                                      %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                                                              \\r\\n//                                                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%                                                        \\r\\n//                                           %%%%%%%%%%%%%%%%%%             %%%%%%%%%%%%%%%%%%%%%%%%%                                                   \\r\\n//                                       %%%%%%%%%%%                                  %%%%%%%%%%%%%%%%%%%                                               \\r\\n//                                    %%%%%%%%%                                             %%%%%%%%%%%%%%%%                                            \\r\\n//                                 %%%%%%%                        ///                            %%%%%%%%%%%%%%                                         \\r\\n//                               %%%%%%                            /////                            %%%%%%%%%%%%%                                       \\r\\n//                            %%%%%                  ***            //////                             %%%%%%%%%%%%%                                    \\r\\n//                           %%%%               ***                 ////////                              %%%%%%%%%%%                                   \\r\\n//                         %%%%             ***                     //////////                              %%%%%%%%%%%                                 \\r\\n//                       %%%%            ***                       ////////////              %%               %%%%%%%%%%%                               \\r\\n//                      %%%           ****                         ////////////             %%%                 %%%%%%%%%%                              \\r\\n//                     %%           ****                          //////////////            %%%                   %%%%%%%%%                             \\r\\n//                    %%          ****                           ///////////////            %%%%                   %%%%%%%%%                            \\r\\n//                   %%         *****                            ///////////////            %%%%%                   %%%%%%%%%                           \\r\\n//                  %%         *****                            ///////////////              %%%%%%                  %%%%%%%%%                          \\r\\n//                  %         *****           *                /////// ////////               %%%%%%                  %%%%%%%%                          \\r\\n//                 %         *****             ***           ///////   ///////                 %%%%%%%                 %%%%%%%%                         \\r\\n//                          *****              ****         ///////   ///////        (           %%%%%%                %%%%%%%%                         \\r\\n//                %        ,*****              ****       ///////    ///////          ((          %%%%%%                %%%%%%%%                        \\r\\n//                %        *****              ******   **//////     ///////            ((((         %%%%%      #        %%%%%%%%                        \\r\\n//                         *****              ***********////      ///////             (((((         %%%%      #        %%%%%%%%                        \\r\\n//                       ,*****             ***********///       ///////              (((((((        %%%      #         %%%%%%%                        \\r\\n//                       ,*****            ************         ///////               ((((((((       %%%      #         %%%%%%%                        \\r\\n//                       ,******          ***********          ///////                (((((((((      %%       #        %%%%%%%                         \\r\\n//                        ******          **********           //////                (((((((((((     %       ##        %%%%%%%                         \\r\\n//                        *******        *********             ///////             ((((((((((((((           ###        %%%%%%                          \\r\\n//                        ,*******       ********              /////////////////////(((( ((((((((           ##        %%%%%%%                          \\r\\n//                         ********      ********              ////////////////////((((  ((((((((          ##        %%%%%%%                           \\r\\n//                          ********      *******                //////////////////(((   ((((((((        ((##        %%%%%%                            \\r\\n//                           ********     *******                  ////////////////      ((((((((       ((((        %%%%%%                             \\r\\n//                            *********     ******                     /////////        ((((((((      ((((         %%%%%%                              \\r\\n//                             **********     *****                                    ((((((((     (((((        %%%%%%                                \\r\\n//                               **********     ****                                  ((((((((    (((((         %%%%%%                                 \\r\\n//                                 ***********      **                               ((((((((  ((((((         %%%%%%                                   \\r\\n//                                   ************                                  ((((((((((((((((         %%%%%%                                     \\r\\n//                                       **************                         ////((((((((((((((         %%%%%%                                       \\r\\n//                                         *************/////            //////////(((((((((((          %%%%%                                          \\r\\n//                                             *********///////////////////////////(((((((           %%%%%                                             \\r\\n//                                                    ****//////////////////////////((             %%%%%                                                \\r\\n//                                                            //////////////                  %%%%%                                                    \\r\\n//                                                                                      %%%%%                                                         \\r\\n//                                                                                %%%%                                                                 \\r\\n//\\r\\n//                  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2557\\r\\n//                  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\\r\\n//                  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2588\u2557\u2588\u2588\u2554\u2588\u2588\u2588\u2588\u2554\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\\r\\n//                  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\\r\\n//                  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2550\u255d \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\\r\\n//                  \u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d     \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d\\r\\n\\r\\n// https://www.burningmoon.xyz\\r\\n// https://t.me/BurningMoonBSC\\r\\n// https://t.me/BurningMoonBSC_ann\\r\\n// https://twitter.com/BurningMoonBSC\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"./Libraries.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n//BURNINGMOON Contract /////////////////////////////////////////////////////////////////////////////////\\r\\n////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\ncontract BurningMoon is IBEP20, Ownable\\r\\n{\\r\\n    using Address for address;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    \\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n    mapping (address =\\u003e uint256) private _sellLock;\\r\\n\\r\\n    EnumerableSet.AddressSet private _excluded;\\r\\n    EnumerableSet.AddressSet private _excludedFromLocks;\\r\\n    EnumerableSet.AddressSet private _excludedFromStaking;\\r\\n    EnumerableSet.AddressSet private _whiteList;\\r\\n    EnumerableSet.AddressSet private _automatedMarketMakers;\\r\\n    \\r\\n    //Token Info\\r\\n    string private constant _name = \\u0027BurningMoon\\u0027;\\r\\n    string private constant _symbol = \\u0027BM\\u0027;\\r\\n    uint8 private constant _decimals = 9;\\r\\n    uint256 public constant InitialSupply= 1200 * 10**6 * 10**_decimals;//equals 1,200,000,000 token\\r\\n\\r\\n    //Lower limit for the balance Limit, can\\u0027t be set lower\\r\\n    uint8 public constant BalanceLimitDivider=100;\\r\\n    //Lower limit for the sell Limit, can\\u0027t be set lower\\r\\n    uint16 public constant MinSellLimitDivider=2000;\\r\\n    //Sellers get locked for sellLockTime so they can\\u0027t dump repeatedly\\r\\n    uint16 public constant MaxSellLockTime= 2 hours;\\r\\n    //The time Liquidity gets locked at start and prolonged once it gets released\\r\\n    uint256 private constant DefaultLiquidityLockTime=7 days;\\r\\n    //The Team Wallet is a Multisig wallet that reqires 3 signatures for each action\\r\\n    address public TeamWallet=0xcA3D0E9359a85409B8EC4b9954079Ee2EfaaD779;\\r\\n\\r\\n    address private constant SacrificeAddress=0x000000000000000000000000000000000000dEaD;\\r\\n    address private constant lotteryAddress=0x7777777777777777777777777777777777777777;\\r\\n\\r\\n    //variables that track balanceLimit and sellLimit,\\r\\n    //can be updated based on circulating supply and Sell- and BalanceLimitDividers\\r\\n    uint256 private _circulatingSupply;\\r\\n    uint256 private balanceLimit=InitialSupply/BalanceLimitDivider;\\r\\n    uint256 private sellLimit=InitialSupply/MinSellLimitDivider;\\r\\n\\r\\n    //Limits max tax, only gets applied for tax changes, doesn\\u0027t affect inital Tax\\r\\n    uint8 public constant MaxTax=25;\\r\\n    uint256 public sellLockTime=MaxSellLockTime;\\r\\n    //Tracks the current Taxes, different Taxes can be applied for buy/sell/transfer\\r\\n    //Taxes can never exceed MaxTax\\r\\n    uint8 private _buyTax=10;\\r\\n    uint8 private _sellTax=20;\\r\\n    //Transfer tax starts at 50%. this is to stop whitelisted from transfering.\\r\\n    //will later be capped at 25%\\r\\n    uint8 private _transferTax=50;\\r\\n    //The shares of the specific Taxes, always needs to equal 100%\\r\\n    uint8 private _burnTax=5;\\r\\n    uint8 private _liquidityTax=95;\\r\\n    uint8 private _stakingTax=0;\\r\\n    //The shares of the staking Tax that get used for Marketing/lotterySplit\\r\\n    uint8 public marketingShare=50;\\r\\n    //Lottery share is used for Lottery draws, addresses can buy lottery tickets for Token\\r\\n    uint8 public LotteryShare=10;\\r\\n    //determines the permille of the pancake pair needed to trigger Liquify\\r\\n    uint8 public LiquifyTreshold=50;\\r\\n\\r\\n    //BotProtection values\\r\\n    bool private _botProtection;\\r\\n    uint8 constant BotMaxTax=100;\\r\\n    uint256 constant BotTaxTime=10 minutes;\\r\\n    uint256 constant WLTaxTime=4 minutes;\\r\\n    uint256 public launchTimestamp;\\r\\n    \\r\\n    //_pancakePairAddress is also equal to the liquidity token address\\r\\n    //LP token are locked in the contract\\r\\n    address private _pancakePairAddress; \\r\\n    IPancakeRouter02 private  _pancakeRouter; \\r\\n    //TODO: Change to Mainnet\\r\\n    //TestNet\\r\\n    //address private constant PancakeRouter=0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;\\r\\n    //MainNet\\r\\n    address private constant PancakeRouter=0x10ED43C718714eb63d5aA57B78B54704E256024E;\\r\\n    \\r\\n    //modifier for functions only the team can call\\r\\n    modifier onlyTeam() {\\r\\n        require(_isTeam(msg.sender), \\\"Caller not in Team\\\");\\r\\n        _;\\r\\n    }\\r\\n    //Checks if address is in Team, is needed to give Team access even if contract is renounced\\r\\n    //Team doesn\\u0027t have access to critical Functions that could turn this into a Rugpull(Exept liquidity unlocks)\\r\\n    function _isTeam(address addr) private view returns (bool){\\r\\n        return addr==owner()||addr==TeamWallet;\\r\\n    }\\r\\n\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //Constructor///////////////////////////////////////////////////////////////////////////////////////////\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    constructor () {\\r\\n        //Creates a Pancake Pair\\r\\n        _pancakeRouter = IPancakeRouter02(PancakeRouter);\\r\\n        _pancakePairAddress = IPancakeFactory(_pancakeRouter.factory()).createPair(address(this), _pancakeRouter.WETH());\\r\\n        _automatedMarketMakers.add(_pancakePairAddress);\\r\\n        //excludes Pancake Pair and contract from staking\\r\\n        _excludedFromStaking.add(_pancakePairAddress);\\r\\n        _excludedFromStaking.add(address(this));\\r\\n        //contract gets 100% of the supply to create LP\\r\\n        _addToken(address(this),InitialSupply);\\r\\n        emit Transfer(address(0), address(this), InitialSupply);\\r\\n        //Team wallet deployer and contract are excluded from Taxes\\r\\n        //contract can\\u0027t be included to taxes\\r\\n        _excluded.add(TeamWallet);\\r\\n        _excluded.add(msg.sender);\\r\\n        _excluded.add(address(this));\\r\\n        _approve(address(this), address(_pancakeRouter), type(uint256).max);\\r\\n    }\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //Transfer functionality////////////////////////////////////////////////////////////////////////////////\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    address oneTimeExcluded;\\r\\n    //picks the transfer function\\r\\n    function _transfer(address sender, address recipient, uint256 amount) private{\\r\\n        require(sender != address(0), \\\"from zero\\\");\\r\\n        require(recipient != address(0), \\\"to zero\\\");\\r\\n        //If recipient is SacrificeAddress, token will be sacrificed, resulting in 2x rewards, but burned token\\r\\n        if(recipient==SacrificeAddress){\\r\\n            _sacrifice(sender,amount);\\r\\n            return;\\r\\n        }\\r\\n        //If recipient is lotteryAddress, token will be used to buy lottery tickets\\r\\n        if(recipient==lotteryAddress){\\r\\n            _buyLotteryTickets(sender,amount);\\r\\n            return;\\r\\n        }\\r\\n        //Burn Token if recipient is address(1) 0x000..0001\\r\\n        if(recipient==address(1)){\\r\\n            require(_balances[sender]\\u003e=amount);\\r\\n            _removeToken(sender, amount);\\r\\n            emit Transfer(sender,address(1),amount);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        bool isExcluded=_excluded.contains(sender) || _excluded.contains(recipient);\\r\\n        //one time excluded (compound) transfer without limits\\r\\n        if(oneTimeExcluded==recipient){\\r\\n            isExcluded=true;\\r\\n            oneTimeExcluded=address(0);\\r\\n        }\\r\\n\\r\\n        //excluded adresses are transfering tax and lock free\\r\\n        if(isExcluded){\\r\\n            _feelessTransfer(sender, recipient, amount);\\r\\n            return;\\r\\n        }\\r\\n        //once trading is enabled, it can\\u0027t be turned off again\\r\\n        require(tradingEnabled,\\\"trading not yet enabled\\\"); \\r\\n        _regularTransfer(sender,recipient,amount);\\r\\n    }\\r\\n    //applies taxes, checks for limits, locks generates autoLP and stakingBNB, and autostakes\\r\\n    function _regularTransfer(address sender, address recipient, uint256 amount) private{\\r\\n        uint256 recipientBalance = _balances[recipient];\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance \\u003e= amount, \\\"exceeds balance\\\");\\r\\n        //checks all registered AMM if it\\u0027s a buy or sell.\\r\\n        bool isBuy=_automatedMarketMakers.contains(sender);\\r\\n        bool isSell=_automatedMarketMakers.contains(recipient);\\r\\n        uint8 tax;\\r\\n        if(isSell){\\r\\n            if(!_excludedFromLocks.contains(sender)\\u0026\\u0026!sellLockDisabled){\\r\\n                //If seller sold less than sellLockTime(2h) ago, sell is declined, can be disabled by Team         \\r\\n                require(_sellLock[sender]\\u003c=block.timestamp,\\\"sellLock\\\");\\r\\n                //Sets the time sellers get locked(2 hours by default)\\r\\n                _sellLock[sender]=block.timestamp+sellLockTime;\\r\\n                //Sells can\\u0027t exceed the sell limit(50.000 Tokens at start, can be updated to circulating supply)\\r\\n                require(amount\\u003c=sellLimit,\\\"Dump\\\");\\r\\n            }\\r\\n\\r\\n            tax=_getTaxWithBonus(sender,_sellTax);\\r\\n\\r\\n        } else if(isBuy){\\r\\n            //Checks If the recipient balance(excluding Taxes) would exceed Balance Limit\\r\\n            require(_excludedFromLocks.contains(recipient)||(recipientBalance+amount\\u003c=balanceLimit),\\\"whale\\\");\\r\\n            tax=_getBuyTax(recipient);\\r\\n\\r\\n        } else {//Transfer\\r\\n            //withdraws BNB when sending to yourself\\r\\n            //if sender and recipient are the same address initiate BNB claim\\r\\n            if(sender==recipient){\\r\\n                _claimBNBTo(sender,sender,getDividents(sender));\\r\\n                return;}\\r\\n            \\r\\n            //Checks If the recipient balance(excluding Taxes) would exceed Balance Limit\\r\\n            require(_excludedFromLocks.contains(recipient)||recipientBalance+amount\\u003c=balanceLimit,\\\"whale\\\");\\r\\n            tax=_getTaxWithBonus(sender,_transferTax);\\r\\n\\r\\n        }     \\r\\n        \\r\\n        //Swapping AutoLP and MarketingBNB is only possible if sender is not pancake pair, \\r\\n        //if its not manually disabled, if its not already swapping\\r\\n        if((sender!=_pancakePairAddress)\\u0026\\u0026(!swapAndLiquifyDisabled)\\u0026\\u0026(!_isSwappingContractModifier))\\r\\n            _swapContractToken(LiquifyTreshold,false);\\r\\n            \\r\\n        _transferTaxed(sender,recipient,amount,tax);\\r\\n    }\\r\\n    function _transferTaxed(address sender, address recipient, uint256 amount, uint8 tax) private{\\r\\n        uint256 totalTaxedToken=_calculateFee(amount, tax, 100);\\r\\n        uint256 tokenToBeBurnt=_calculateFee(amount, tax, _burnTax);\\r\\n        uint256 taxedAmount=amount-totalTaxedToken;\\r\\n        //Removes token and handles staking\\r\\n        _removeToken(sender,amount);\\r\\n        //Adds the taxed tokens -burnedToken to the contract\\r\\n        _addToken(address(this), (totalTaxedToken-tokenToBeBurnt));\\r\\n        //Adds token and handles staking\\r\\n        _addToken(recipient, taxedAmount);\\r\\n        emit Transfer(sender,recipient,taxedAmount);\\r\\n    }\\r\\n    //Feeless transfer only transfers and autostakes\\r\\n    function _feelessTransfer(address sender, address recipient, uint256 amount) private{\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance \\u003e= amount, \\\"\\u003ebalance\\\");\\r\\n        //Removes token and handles staking\\r\\n        _removeToken(sender,amount);\\r\\n        //Adds token and handles staking\\r\\n        _addToken(recipient, amount);\\r\\n        \\r\\n        emit Transfer(sender,recipient,amount);\\r\\n\\r\\n    }\\r\\n    //gets the tax for buying, tax is different during the bot protection\\r\\n    function _getBuyTax(address recipient) private returns (uint8){\\r\\n        //returns the Tax subtracting promotion Bonus\\r\\n        if(!_botProtection) return _getTaxWithBonus(recipient,_buyTax);\\r\\n        bool isWhitelisted=_whiteList.contains(recipient);\\r\\n        uint256 duration;\\r\\n        //Whitelist has a shorter Bot Protection Time\\r\\n        if(isWhitelisted) duration=WLTaxTime;\\r\\n        else duration=BotTaxTime;\\r\\n        uint8 Tax;\\r\\n        if(block.timestamp\\u003elaunchTimestamp+duration){\\r\\n            Tax=_buyTax;\\r\\n            if(!isWhitelisted){\\r\\n                _burnTax=25;\\r\\n                _liquidityTax=25;\\r\\n                _stakingTax=50;\\r\\n                _botProtection=false;\\r\\n            }\\r\\n        }\\r\\n        else Tax=_getBotTax(duration);\\r\\n        //returns the Tax subtracting promotion Bonus\\r\\n        return _getTaxWithBonus(recipient, Tax);\\r\\n\\r\\n    }\\r\\n    \\r\\n    function _getBotTax(uint256 duration) private view returns (uint8){\\r\\n        uint256 timeSinceLaunch=block.timestamp-launchTimestamp;\\r\\n        return uint8(BotMaxTax-((BotMaxTax-_buyTax)*timeSinceLaunch/duration));\\r\\n    }\\r\\n    //Gets the promotion Bonus if enough promotion Token are held\\r\\n    function _getTaxWithBonus(address bonusFor, uint8 tax) private view returns(uint8){\\r\\n        if(_isEligibleForPromotionBonus(bonusFor)){\\r\\n            if(tax\\u003c=promotionTaxBonus) return 0;\\r\\n            return tax-promotionTaxBonus;\\r\\n        }\\r\\n        return tax;\\r\\n    }\\r\\n    function _isEligibleForPromotionBonus(address bonusFor)private view returns(bool){\\r\\n        //if promotion token isn\\u0027t set, return false\\r\\n        if(address(promotionToken) == address(0)) return false;\\r\\n        uint256 tokenBalance;\\r\\n        //tries to get the balance of the address the bonus is for, catches possible errors that could make the token untradeable\\r\\n        //token has to implement \\\"balanceOf\\\" gets checked when setting the token\\r\\n        try promotionToken.balanceOf(bonusFor) returns (uint256 promotionTokenBalance){ \\r\\n            tokenBalance=promotionTokenBalance;\\r\\n        }catch{return false;}\\r\\n        //If holder holds more than min hold, holder is eligible\\r\\n        return (tokenBalance\\u003e=promotionMinHold);\\r\\n    }\\r\\n    \\r\\n    //Calculates the token that should be taxed\\r\\n    function _calculateFee(uint256 amount, uint8 tax, uint8 taxPercent) private pure returns (uint256) {\\r\\n        return (amount*tax*taxPercent) / 10000;\\r\\n    }\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //BNB Autostake/////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //////////////////////////////////////////////////////////////////////////////////////////////////////// \\r\\n    //Autostake uses the balances of each holder to redistribute auto generated BNB.\\r\\n    //Each transaction _addToken and _removeToken gets called for the transaction amount\\r\\n    \\r\\n    //lock for the withdraw, only one withdraw can happen at a time\\r\\n    bool private _isWithdrawing;\\r\\n    //Multiplier to add some accuracy to profitPerShare\\r\\n    uint256 private constant DistributionMultiplier = 2**64;\\r\\n    //profit for each share a holder holds, a share equals a decimal.\\r\\n    uint256 public profitPerShare;\\r\\n    //totalShares in circulation +InitialSupply to avoid underflow \\r\\n    //getTotalShares returns the correct amount\\r\\n    uint256 private _totalShares=InitialSupply;\\r\\n    //the total reward distributed through staking, for tracking purposes\\r\\n    uint256 public totalStakingReward;\\r\\n    //the total payout through staking, for tracking purposes\\r\\n    uint256 public totalPayouts;\\r\\n    //balance that is claimable by the team\\r\\n    uint256 public marketingBalance;\\r\\n    //The current Lottery Balance\\r\\n    uint256 public lotteryBNB;\\r\\n    //If someone sacrifices their BurningMoon, they receive additionalShares\\r\\n    mapping(address =\\u003e uint256) private additionalShares;   \\r\\n    //Mapping of the already paid out(or missed) shares of each staker\\r\\n    mapping(address =\\u003e uint256) private alreadyPaidShares;\\r\\n    //Mapping of shares that are reserved for payout\\r\\n    mapping(address =\\u003e uint256) private toBePaid;\\r\\n    \\r\\n    uint256 public sacrificedToken;\\r\\n    bool private isSacrificing;\\r\\n    event OnSacrifice(uint256 amount, address sender);\\r\\n    //Sacrifices BurningMoon, BurningMoon get burned, nothing remains exept 2x rewards for the one bringing the sacrifice\\r\\n    function _sacrifice(address account,uint256 amount) private{\\r\\n        require(!_excludedFromStaking.contains(account), \\\"Excluded!\\\");\\r\\n        require(amount\\u003c=_balances[account]);\\r\\n        require(!isSacrificing);\\r\\n        isSacrificing=true;\\r\\n        //Removes token and burns them\\r\\n        _removeToken(account, amount);\\r\\n        sacrificedToken+=amount;\\r\\n        //The new shares will be 2x the burned shares\\r\\n        uint256 newShares=amount*2;\\r\\n        _totalShares+=newShares;\\r\\n\\r\\n        additionalShares[account]+=newShares;\\r\\n        //Resets the paid mapping to the new amount\\r\\n        alreadyPaidShares[account] = profitPerShare * getShares(account);\\r\\n        emit Transfer(account,SacrificeAddress,amount);\\r\\n        emit OnSacrifice(amount, account);\\r\\n        isSacrificing=false;\\r\\n    }\\r\\n    function Sacrifice(uint256 amount) public{\\r\\n        _sacrifice(msg.sender,amount);\\r\\n    }\\r\\n    //Transfers the sacrifice to another account\\r\\n    event OnTransferSacrifice(uint256 amount, address sender,address recipient);\\r\\n    function TransferSacrifice(address target, uint256 amount) public{\\r\\n        require(!_excludedFromStaking.contains(target)\\u0026\\u0026!_excludedFromStaking.contains(msg.sender));\\r\\n        uint256 senderShares=additionalShares[msg.sender];\\r\\n        require(amount\\u003c=senderShares,\\\"exceeds shares\\\");\\r\\n        require(!isSacrificing);\\r\\n        isSacrificing=true;\\r\\n        \\r\\n        //Handles the removal of the shares from the sender\\r\\n        uint256 paymentSender=_newDividentsOf(msg.sender);\\r\\n        additionalShares[msg.sender]=senderShares-amount;\\r\\n        alreadyPaidShares[msg.sender] = profitPerShare * getShares(msg.sender);\\r\\n        toBePaid[msg.sender]+=paymentSender;\\r\\n        \\r\\n        //Handles the addition of the shares to the recipient\\r\\n        uint256 paymentReceiver=_newDividentsOf(target);\\r\\n        uint256 newAdditionalShares=additionalShares[target]+amount;\\r\\n        alreadyPaidShares[target] = profitPerShare * (_balances[target]+newAdditionalShares);\\r\\n        toBePaid[target]+=paymentReceiver;\\r\\n        additionalShares[target]=newAdditionalShares;\\r\\n        \\r\\n        emit OnTransferSacrifice(amount, msg.sender, target);\\r\\n        isSacrificing=false;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    //adds Token to balances, adds new BNB to the toBePaid mapping and resets staking\\r\\n    function _addToken(address addr, uint256 amount) private {\\r\\n        //the amount of token after transfer\\r\\n        uint256 newAmount=_balances[addr]+amount;\\r\\n        _circulatingSupply+=amount;\\r\\n        //if excluded, don\\u0027t change staking amount\\r\\n        if(_excludedFromStaking.contains(addr)){\\r\\n           _balances[addr]=newAmount;\\r\\n           return;\\r\\n        }\\r\\n        _totalShares+=amount;\\r\\n        //gets the payout before the change\\r\\n        uint256 payment=_newDividentsOf(addr);\\r\\n        //resets dividents to 0 for newAmount\\r\\n        alreadyPaidShares[addr] = profitPerShare * (newAmount+additionalShares[addr]);\\r\\n        //adds dividents to the toBePaid mapping\\r\\n        toBePaid[addr]+=payment; \\r\\n        //sets newBalance\\r\\n        _balances[addr]=newAmount;\\r\\n\\r\\n\\r\\n    }\\r\\n    \\r\\n    //removes Token, adds BNB to the toBePaid mapping and resets staking\\r\\n    function _removeToken(address addr, uint256 amount) private {\\r\\n        //the amount of token after transfer\\r\\n        uint256 newAmount=_balances[addr]-amount;\\r\\n        _circulatingSupply-=amount;\\r\\n        if(_excludedFromStaking.contains(addr)){\\r\\n           _balances[addr]=newAmount;\\r\\n           return;\\r\\n        }\\r\\n\\r\\n        //gets the payout before the change\\r\\n        uint256 payment=_newDividentsOf(addr);\\r\\n        //sets newBalance\\r\\n        _balances[addr]=newAmount;\\r\\n        //resets dividents to 0 for newAmount\\r\\n        alreadyPaidShares[addr] = profitPerShare * getShares(addr);\\r\\n        //adds dividents to the toBePaid mapping\\r\\n        toBePaid[addr]+=payment; \\r\\n        _totalShares-=amount;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    //gets the dividents of a staker that aren\\u0027t in the toBePaid mapping \\r\\n    function _newDividentsOf(address staker) private view returns (uint256) {\\r\\n        uint256 fullPayout = profitPerShare * getShares(staker);\\r\\n        //if excluded from staking or some error return 0\\r\\n        if(fullPayout\\u003c=alreadyPaidShares[staker]) return 0;\\r\\n        return (fullPayout - alreadyPaidShares[staker]) / DistributionMultiplier;\\r\\n    }\\r\\n    \\r\\n    //distributes bnb between marketing share and dividents \\r\\n    function _distributeStake(uint256 AmountWei) private {\\r\\n        // Deduct marketing Tax\\r\\n        if(AmountWei==0) return;\\r\\n        uint256 marketingSplit = (AmountWei * marketingShare) / 100;\\r\\n        uint256 lotterySplit = (AmountWei*LotteryShare) / 100;\\r\\n        uint256 amount = AmountWei - (marketingSplit+lotterySplit);\\r\\n\\r\\n        lotteryBNB+=lotterySplit;\\r\\n        marketingBalance+=marketingSplit;\\r\\n       \\r\\n\\r\\n        totalStakingReward += amount;\\r\\n        uint256 totalShares=getTotalShares();\\r\\n        //when there are 0 shares, add everything to marketing budget\\r\\n        if (totalShares == 0) {\\r\\n            marketingBalance += amount;\\r\\n        }else{\\r\\n            //Increases profit per share based on current total shares\\r\\n            profitPerShare += ((amount * DistributionMultiplier) / totalShares);\\r\\n        }\\r\\n    }\\r\\n    //Substracts the amount from dividents, fails if amount exceeds dividents\\r\\n    function _substractDividents(address addr,uint256 amount) private{\\r\\n        if(amount==0) return;\\r\\n        require(amount\\u003c=getDividents(addr),\\\"exceeds divident\\\");\\r\\n\\r\\n        if(_excludedFromStaking.contains(addr)){\\r\\n            //if excluded just withdraw remaining toBePaid BNB\\r\\n            toBePaid[addr]-=amount;\\r\\n        }\\r\\n        else{\\r\\n            uint256 newAmount=_newDividentsOf(addr);\\r\\n            //sets payout mapping to current amount\\r\\n            alreadyPaidShares[addr] = profitPerShare * getShares(addr);\\r\\n            //the amount to be paid \\r\\n            toBePaid[addr]+=newAmount;\\r\\n            toBePaid[addr]-=amount;\\r\\n        }\\r\\n    }\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //Claim Functions///////////////////////////////////////////////////////////////////////////////////////\\r\\n    //////////////////////////////////////////////////////////////////////////////////////////////////////// \\r\\n\\r\\n    //PromotionToken\\r\\n    IBEP20 public promotionToken;\\r\\n    //Boost BNB are added to the dividents based on the Boost Percentage\\r\\n    uint256 public BoostBNB;\\r\\n    uint8 public promotionBNBBoostPercentage;\\r\\n    //Boost Token are sent after transfer, based on the Percentage and the amount received\\r\\n    uint8 public promotionTokenBoostPercentage;\\r\\n    //Allows to claim token via the contract. this makes it possible To\\r\\n    //make special Rules for the Promotion token\\r\\n    bool public ClaimPromotionTokenViaContract;\\r\\n    //Holders of the promotion token get a Tax bonus\\r\\n    uint8 public promotionTaxBonus;\\r\\n    uint256 public promotionMinHold;\\r\\n    event SetPromotionToken(address token);\\r\\n    //Sets new promotion Token, checks if the token implements \\\"BalanceOf\\\".\\r\\n    function TeamSetPromotionToken (\\r\\n        address token, \\r\\n        uint8 BNBboostPercentage,\\r\\n        uint8 TokenBoostPercentage, \\r\\n        bool claimViaContract, \\r\\n        uint8 TaxBonus,\\r\\n        uint256 MinHold) public onlyTeam{\\r\\n        require(token!=address(this)\\u0026\\u0026token!=_pancakePairAddress,\\\"Invalid token\\\");\\r\\n        promotionToken=IBEP20(token);\\r\\n        //check if token implements balanceOf\\r\\n        promotionToken.balanceOf(address(this));\\r\\n        \\r\\n        promotionBNBBoostPercentage=BNBboostPercentage;\\r\\n        promotionTokenBoostPercentage=TokenBoostPercentage;\\r\\n        //claim via contract makes it possible to make special offers for the contract\\r\\n        ClaimPromotionTokenViaContract=claimViaContract;\\r\\n        promotionMinHold=MinHold;\\r\\n        promotionTaxBonus=TaxBonus;\\r\\n        emit SetPromotionToken(token);\\r\\n    }\\r\\n    event OnClaimPromotionToken(address AddressTo, uint256 amount);\\r\\n    //Claims the promotion Token with 100% of the dividents\\r\\n    function ClaimPromotionToken() public payable{\\r\\n        ClaimPromotionToken(getDividents(msg.sender));\\r\\n    }\\r\\n    //Claims the promotion token, boost and special rules Apply to promotion token\\r\\n    //No boost does apply to payable amount\\r\\n    bool private _isClaimingPromotionToken;\\r\\n    function ClaimPromotionToken(uint256 amountWei) public payable{\\r\\n        require(!_isClaimingPromotionToken,\\\"already Claiming Token\\\");\\r\\n        _isClaimingPromotionToken=true;\\r\\n        uint256 totalAmount=amountWei+msg.value;\\r\\n        require(totalAmount\\u003e0,\\\"Nothing to claim\\\");\\r\\n        //Gets the token and the initial balance\\r\\n        IBEP20 tokenToClaim=IBEP20(promotionToken);\\r\\n        uint256 initialBalance=tokenToClaim.balanceOf(msg.sender);\\r\\n        //Claims token using dividents\\r\\n        if(amountWei\\u003e0){\\r\\n            //only boosts the amount, not the payable amount\\r\\n            uint256 boost=amountWei*promotionBNBBoostPercentage/100;\\r\\n            //if boost exceeds boost funds, clamp the boost\\r\\n            if(boost\\u003eBoostBNB) boost=BoostBNB;\\r\\n            BoostBNB-=boost;\\r\\n            //if token allows it, can claim via contract to enable things like tax free claim\\r\\n            if(ClaimPromotionTokenViaContract){\\r\\n                _claimTokenViaContract(msg.sender, address(promotionToken), amountWei,boost);\\r\\n            }else _claimToken(msg.sender, address(promotionToken), amountWei,boost);\\r\\n            \\r\\n            //Apply the tokenBoost\\r\\n            uint256 contractBalance=tokenToClaim.balanceOf(address(this));\\r\\n            if(promotionTokenBoostPercentage\\u003e0\\u0026\\u0026contractBalance\\u003e0)\\r\\n            {\\r\\n                //the actual amount of claimed token\\r\\n                uint256 claimedToken=tokenToClaim.balanceOf(msg.sender)-initialBalance;\\r\\n                //calculates the tokenBoost\\r\\n                uint256 tokenBoost=claimedToken*promotionTokenBoostPercentage/100;\\r\\n                if(tokenBoost\\u003econtractBalance)tokenBoost=contractBalance;\\r\\n                //transfers the tokenBoost\\r\\n                tokenToClaim.transfer(msg.sender,tokenBoost);   \\r\\n            }\\r\\n        }\\r\\n        //claims promotion Token with the payable amount, no boost applies\\r\\n        if(msg.value\\u003e0)_claimToken(msg.sender,address(promotionToken),0,msg.value);\\r\\n        \\r\\n        //gets the total claimed token and emits the event\\r\\n        uint256 totalClaimed=tokenToClaim.balanceOf(msg.sender)-initialBalance;\\r\\n        emit OnClaimPromotionToken(msg.sender,totalClaimed);\\r\\n        _isClaimingPromotionToken=false;\\r\\n    }\\r\\n    \\r\\n    event OnCompound(address AddressTo, uint256 amount);\\r\\n    //Compounds BNB to buy BM, Compound is tax free\\r\\n    function Compound() public{\\r\\n        uint256 initialBalance=_balances[msg.sender];\\r\\n        //Compound is tax free and can exceed max hold\\r\\n        oneTimeExcluded=msg.sender;\\r\\n        _claimToken(msg.sender, address(this), getDividents(msg.sender),0);\\r\\n        uint256 claimedToken=_balances[msg.sender]-initialBalance;\\r\\n        emit OnCompound(msg.sender,claimedToken);\\r\\n    }\\r\\n    \\r\\n    event OnClaimBNB(address AddressFrom,address AddressTo, uint256 amount);\\r\\n    function ClaimBNB() public{\\r\\n        _claimBNBTo(msg.sender,msg.sender,getDividents(msg.sender));\\r\\n    }\\r\\n    function ClaimBNBTo(address to) public{\\r\\n         _claimBNBTo(msg.sender,to,getDividents(msg.sender));\\r\\n    }\\r\\n\\r\\n    event OnClaimToken(address AddressTo,address Token, uint256 amount);\\r\\n    //Claims any token can add BNB to purchase more\\r\\n    function ClaimAnyToken(address token) public payable{\\r\\n        ClaimAnyToken(token,getDividents(msg.sender));\\r\\n    }\\r\\n    function ClaimAnyToken(address tokenAddress,uint256 amountWei) public payable{\\r\\n        IBEP20 token=IBEP20(tokenAddress);\\r\\n        uint256 initialBalance=token.balanceOf(msg.sender);\\r\\n        _claimToken(msg.sender, tokenAddress,amountWei,msg.value);\\r\\n        uint256 claimedToken=token.balanceOf(msg.sender)-initialBalance;\\r\\n        emit OnClaimToken(msg.sender,tokenAddress,claimedToken);\\r\\n    }\\r\\n    \\r\\n    //Helper functions to claim Token or BNB\\r\\n    //claims the amount of BNB from \\\"from\\\" and withdraws them \\\"to\\\"\\r\\n    function _claimBNBTo(address from, address to,uint256 amountWei) private{\\r\\n        require(!_isWithdrawing);\\r\\n        require(amountWei!=0,\\\"=0\\\");    \\r\\n        _isWithdrawing=true;\\r\\n        //Substracts the amount from the dividents\\r\\n        _substractDividents(from, amountWei);\\r\\n        totalPayouts+=amountWei;\\r\\n        (bool sent,) =to.call{value: (amountWei)}(\\\"\\\");\\r\\n        require(sent,\\\"withdraw failed\\\");\\r\\n        _isWithdrawing=false;\\r\\n        emit OnClaimBNB(from,to,amountWei);\\r\\n    }\\r\\n \\r\\n \\r\\n    \\r\\n    //claims any token and sends it to addr for the amount in BNB\\r\\n    function _claimToken(address addr, address token, uint256 amountWei,uint256 boostWei) private{\\r\\n        require(!_isWithdrawing);\\r\\n        require(amountWei!=0||boostWei!=0,\\\"=0\\\");        \\r\\n        _isWithdrawing=true;\\r\\n        //Substracts the amount from the dividents\\r\\n        _substractDividents(addr, amountWei);\\r\\n        uint256 totalAmount=amountWei+boostWei;\\r\\n        totalPayouts+=amountWei;\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = _pancakeRouter.WETH(); //BNB\\r\\n        path[1] = token;  \\r\\n        \\r\\n        //purchases token and sends them to the target address\\r\\n        _pancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: totalAmount}(\\r\\n        0,\\r\\n        path,\\r\\n        addr,\\r\\n        block.timestamp);\\r\\n        \\r\\n        _isWithdrawing=false;\\r\\n    }\\r\\n\\r\\n    //Claims token via the contract, enables to make special offers for the contract\\r\\n    function _claimTokenViaContract(address addr, address token, uint256 amountWei,uint256 boostWei) private{\\r\\n        require(!_isWithdrawing);\\r\\n        require(amountWei!=0||boostWei!=0,\\\"=0\\\");      \\r\\n        _isWithdrawing=true;\\r\\n        //Substracts the amount from the dividents\\r\\n        _substractDividents(addr, amountWei);\\r\\n        //total amount is amount+boost\\r\\n        uint256 totalAmount=amountWei+boostWei;\\r\\n        totalPayouts+=amountWei;\\r\\n        \\r\\n        //Purchases token and sends them to the contract\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = _pancakeRouter.WETH(); //BNB\\r\\n        path[1] = token;  \\r\\n        IBEP20 claimToken=IBEP20(token);\\r\\n        uint256 initialBalance=claimToken.balanceOf(address(this));\\r\\n        _pancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: totalAmount}(\\r\\n        0,\\r\\n        path,\\r\\n        address(this),\\r\\n        block.timestamp);\\r\\n        //newBalance captures only new token\\r\\n        uint256 newBalance=claimToken.balanceOf(address(this))-initialBalance;\\r\\n        //transfers all new token from the contract to the address\\r\\n        claimToken.transfer(addr, newBalance);\\r\\n        _isWithdrawing=false;\\r\\n    }\\r\\n    \\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //Lottery///////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    uint256 public lotteryTicketPrice=1000*(10**_decimals); //StartPrize Lottery 1000 token\\r\\n    //The Lottery tickets array, each address stored is a ticket\\r\\n    address[] private lotteryTickets;\\r\\n    //The Amount of Lottery tickets in the current round\\r\\n    uint256 public LotteryParticipants;\\r\\n    uint256 lastLotteryDraw;\\r\\n    event OnBuyLotteryTickets(uint256 FirstTicketID, uint256 LastTicketID, address account);\\r\\n    //Buys entry to the Lottery, burns token\\r\\n    function _buyLotteryTickets(address account,uint256 token) private{\\r\\n        uint256 tickets=token/lotteryTicketPrice;\\r\\n        require(tickets\\u003c500);\\r\\n\\r\\n        uint256 totalPrice=tickets*lotteryTicketPrice;\\r\\n        require(block.timestamp\\u003elastLotteryDraw+30 minutes);        \\r\\n        require(_balances[account]\\u003e=totalPrice,\\\"\\u003eBalance\\\");\\r\\n        require(tickets\\u003e0,\\\"\\u003c1 ticket\\\");\\r\\n        uint256 FirstTicketID=LotteryParticipants;\\r\\n        //Removes the token from the sender\\r\\n        _removeToken(account,totalPrice);\\r\\n        //Adds tickets to the tickets array\\r\\n        for(uint256 i=0; i\\u003ctickets; i++){\\r\\n            if(lotteryTickets.length\\u003eLotteryParticipants)\\r\\n                lotteryTickets[LotteryParticipants]=account;\\r\\n            else lotteryTickets.push(account);    \\r\\n            LotteryParticipants++;\\r\\n        }        \\r\\n        emit Transfer(account,lotteryAddress,totalPrice);\\r\\n        emit  OnBuyLotteryTickets(FirstTicketID,LotteryParticipants-1,account);\\r\\n    }\\r\\n    function BuyLotteryTickets(uint256 token) public{\\r\\n        _buyLotteryTickets(msg.sender,token);\\r\\n    }\\r\\n    \\r\\n    function _getPseudoRandomNumber(uint256 modulo) private view returns(uint256) {\\r\\n        //uses WBNB-Balance to add a bit unpredictability\\r\\n        uint256 WBNBBalance = address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c).balance;\\r\\n        \\r\\n        //generates a PseudoRandomNumber\\r\\n        uint256 randomResult = uint256(keccak256(abi.encodePacked(\\r\\n            _circulatingSupply +\\r\\n            _balances[_pancakePairAddress] +\\r\\n            WBNBBalance + \\r\\n            block.timestamp + \\r\\n            block.difficulty +\\r\\n            block.gaslimit\\r\\n            ))) % modulo;\\r\\n            \\r\\n        return randomResult;    \\r\\n    }\\r\\n    event DrawLotteryWinner(address winner, uint256 amount);\\r\\n    function TeamDrawLotteryWinner(uint256 newLotteryTicketPrice) public onlyTeam{\\r\\n        require(LotteryParticipants\\u003e0);\\r\\n        uint256 prize=lotteryBNB;\\r\\n        lastLotteryDraw=block.timestamp;\\r\\n        lotteryBNB=0;\\r\\n        uint256 winner=_getPseudoRandomNumber(LotteryParticipants);\\r\\n        address winnerAddress=lotteryTickets[winner];\\r\\n        LotteryParticipants=0;\\r\\n        lotteryTicketPrice=newLotteryTicketPrice;\\r\\n\\r\\n       (bool sent,) = winnerAddress.call{value: (prize)}(\\\"\\\");\\r\\n        require(sent);\\r\\n        emit DrawLotteryWinner(winnerAddress, prize);\\r\\n    }\\r\\n\\r\\n    function getLotteryTicketHolder(uint256 TicketID) public view returns(address){\\r\\n        require(TicketID\\u003cLotteryParticipants,\\\"Doesn\\u0027t exist\\\");\\r\\n        return lotteryTickets[TicketID];\\r\\n    }\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //Swap Contract Tokens//////////////////////////////////////////////////////////////////////////////////\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    \\r\\n    //tracks auto generated BNB, useful for ticker etc\\r\\n    uint256 public totalLPBNB;\\r\\n    //Locks the swap if already swapping\\r\\n    bool private _isSwappingContractModifier;\\r\\n    modifier lockTheSwap {\\r\\n        _isSwappingContractModifier = true;\\r\\n        _;\\r\\n        _isSwappingContractModifier = false;\\r\\n    }\\r\\n\\r\\n    function _swapContractToken(uint16 permilleOfPancake,bool ignoreLimits) private lockTheSwap{\\r\\n        uint256 contractBalance=_balances[address(this)];\\r\\n        uint16 totalTax=_liquidityTax+_stakingTax;\\r\\n        if(totalTax==0) return;\\r\\n\\r\\n            \\r\\n        uint256 tokenToSwap=_balances[_pancakePairAddress]*permilleOfPancake/1000;\\r\\n        if(tokenToSwap\\u003esellLimit\\u0026\\u0026!ignoreLimits) tokenToSwap=sellLimit;\\r\\n        \\r\\n        //only swap if contractBalance is larger than tokenToSwap or ignore limits\\r\\n        bool NotEnoughToken=contractBalance\\u003ctokenToSwap;\\r\\n        if(NotEnoughToken){\\r\\n            if(ignoreLimits)\\r\\n                tokenToSwap=contractBalance;\\r\\n            else return;\\r\\n        }\\r\\n        if(_allowances[address(this)][address(_pancakeRouter)]\\u003ctokenToSwap)\\r\\n            _approve(address(this), address(_pancakeRouter), type(uint256).max);\\r\\n        //splits the token in TokenForLiquidity and tokenForMarketing\\r\\n        uint256 tokenForLiquidity=(tokenToSwap*_liquidityTax)/totalTax;\\r\\n        uint256 tokenForMarketing= tokenToSwap-tokenForLiquidity;\\r\\n\\r\\n        //splits tokenForLiquidity in 2 halves\\r\\n        uint256 liqToken=tokenForLiquidity/2;\\r\\n        uint256 liqBNBToken=tokenForLiquidity-liqToken;\\r\\n\\r\\n        //swaps marktetingToken and the liquidity token half for BNB\\r\\n        uint256 swapToken=liqBNBToken+tokenForMarketing;\\r\\n        //Gets the initial BNB balance, so swap won\\u0027t touch any staked BNB\\r\\n        uint256 initialBNBBalance = address(this).balance;\\r\\n        _swapTokenForBNB(swapToken);\\r\\n        uint256 newBNB=(address(this).balance - initialBNBBalance);\\r\\n        //calculates the amount of BNB belonging to the LP-Pair and converts them to LP\\r\\n        uint256 liqBNB = (newBNB*liqBNBToken)/swapToken;\\r\\n        _addLiquidity(liqToken, liqBNB);\\r\\n        //Get the BNB balance after LP generation to get the\\r\\n        //exact amount of token left for Staking, as LP generation leaves some BNB untouched\\r\\n        uint256 distributeBNB=(address(this).balance - initialBNBBalance);\\r\\n        //distributes remaining BNB between stakers and Marketing\\r\\n        _distributeStake(distributeBNB);\\r\\n    }\\r\\n    //swaps tokens on the contract for BNB\\r\\n    function _swapTokenForBNB(uint256 amount) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = _pancakeRouter.WETH();\\r\\n\\r\\n        _pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            amount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n    //Adds Liquidity directly to the contract where LP are locked(unlike safemoon forks, that transfer it to the owner)\\r\\n    function _addLiquidity(uint256 tokenamount, uint256 bnbamount) private {\\r\\n        totalLPBNB+=bnbamount;\\r\\n        try _pancakeRouter.addLiquidityETH{value: bnbamount}(\\r\\n            address(this),\\r\\n            tokenamount,\\r\\n            0,\\r\\n            0,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        ){}\\r\\n        catch{}\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //public functions /////////////////////////////////////////////////////////////////////////////////////\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n        //gets shares of an address, returns 0 if excluded\\r\\n    function getShares(address addr) public view returns(uint256){\\r\\n        if(_excludedFromStaking.contains(addr)) return 0;\\r\\n        return (_balances[addr]+additionalShares[addr]);\\r\\n    }\\r\\n\\r\\n    //Total shares equals circulating supply minus excluded Balances\\r\\n    function getTotalShares() public view returns (uint256){\\r\\n        return _totalShares-InitialSupply;\\r\\n    }\\r\\n\\r\\n    function getLiquidityLockSeconds() public view returns (uint256 LockedSeconds){\\r\\n        if(block.timestamp\\u003c_liquidityUnlockTime)\\r\\n            return _liquidityUnlockTime-block.timestamp;\\r\\n        return 0;\\r\\n    }\\r\\n    \\r\\n    function getBurnedTokens() public view returns(uint256){\\r\\n        return (InitialSupply-_circulatingSupply);\\r\\n    }\\r\\n\\r\\n    function getTaxes() public view returns(\\r\\n    uint256 buyTax, \\r\\n    uint256 sellTax, \\r\\n    uint256 transferTax, \\r\\n    uint8 whitelistBuyTax,\\r\\n    uint256 burnTax,\\r\\n    uint256 liquidityTax,\\r\\n    uint256 stakingTax){\\r\\n            if(block.timestamp\\u003elaunchTimestamp+BotTaxTime)\\r\\n            buyTax=_buyTax;\\r\\n            else buyTax=_getBotTax(BotTaxTime);\\r\\n\\r\\n            if(block.timestamp\\u003elaunchTimestamp+WLTaxTime)\\r\\n            whitelistBuyTax=_buyTax;\\r\\n            else whitelistBuyTax=_getBotTax(WLTaxTime);\\r\\n\\r\\n            sellTax=_sellTax;\\r\\n            transferTax=_transferTax;\\r\\n\\r\\n            burnTax=_burnTax;\\r\\n            liquidityTax=_liquidityTax;\\r\\n            stakingTax=_stakingTax;\\r\\n\\r\\n\\r\\n    }\\r\\n    \\r\\n    function getStatus(address AddressToCheck) public view returns(\\r\\n        bool Whitelisted, \\r\\n        bool Excluded, \\r\\n        bool ExcludedFromLock, \\r\\n        bool ExcludedFromStaking, \\r\\n        uint256 SellLock,\\r\\n        bool eligibleForPromotionBonus,\\r\\n        uint256 additionalShare){\\r\\n        uint256 lockTime=_sellLock[AddressToCheck];\\r\\n       if(lockTime\\u003c=block.timestamp) lockTime=0;\\r\\n       else lockTime-=block.timestamp;\\r\\n       uint256 shares=additionalShares[AddressToCheck];\\r\\n        return(\\r\\n            _whiteList.contains(AddressToCheck),\\r\\n            _excluded.contains(AddressToCheck),\\r\\n            _excludedFromLocks.contains(AddressToCheck),\\r\\n            _excludedFromStaking.contains(AddressToCheck),\\r\\n            lockTime,\\r\\n            _isEligibleForPromotionBonus(AddressToCheck),\\r\\n            shares\\r\\n            );\\r\\n    }\\r\\n    \\r\\n    //Returns the not paid out dividents of an address in wei\\r\\n    function getDividents(address addr) public view returns (uint256){\\r\\n        return _newDividentsOf(addr)+toBePaid[addr];\\r\\n    }\\r\\n    \\r\\n    //Adds BNB to the contract to either boost the Promotion Token, or add to stake, everyone can add Funds\\r\\n    function addFunds(bool boost, bool stake)public payable{\\r\\n        require(!_isWithdrawing);\\r\\n        if(boost) BoostBNB+=msg.value;\\r\\n        else if(stake) _distributeStake(msg.value);\\r\\n        else marketingBalance+=msg.value;\\r\\n    }\\r\\n\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //Settings//////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    bool public sellLockDisabled;\\r\\n    bool public swapAndLiquifyDisabled;\\r\\n    event  OnAddAMM(address AMM,bool Add);\\r\\n    function TeamAddOrRemoveAMM(address AMMPairAddress, bool Add) public onlyTeam{\\r\\n        require(AMMPairAddress!=_pancakePairAddress,\\\"can\\u0027t change Pancake\\\");\\r\\n        if(Add){\\r\\n            if(!_excludedFromStaking.contains(AMMPairAddress))\\r\\n                TeamSetStakingExcluded(AMMPairAddress, true);\\r\\n            _automatedMarketMakers.add(AMMPairAddress);\\r\\n        } \\r\\n        else{\\r\\n            _automatedMarketMakers.remove(AMMPairAddress);\\r\\n        }\\r\\n        emit OnAddAMM(AMMPairAddress, Add);\\r\\n    }\\r\\n    function TeamChangeTeamWallet(address newTeamWallet) public{\\r\\n        require(msg.sender==TeamWallet);\\r\\n        TeamWallet=newTeamWallet;\\r\\n    }\\r\\n    event  OnChangeLiquifyTreshold(uint8 TresholdPermille);\\r\\n    function TeamSetLiquifyTreshold(uint8 TresholdPermille) public onlyTeam{\\r\\n        require(TresholdPermille\\u003c=50);\\r\\n        require(TresholdPermille\\u003e0);\\r\\n        LiquifyTreshold=TresholdPermille;\\r\\n        emit OnChangeLiquifyTreshold(TresholdPermille);\\r\\n    }\\r\\n    function TeamWithdrawMarketingBNB() public onlyTeam{\\r\\n        uint256 amount=marketingBalance;\\r\\n        marketingBalance=0;\\r\\n        (bool sent,) =TeamWallet.call{value: (amount)}(\\\"\\\");\\r\\n        require(sent,\\\"withdraw failed\\\");\\r\\n    } \\r\\n    event  OnSwitchSwapAndLiquify(bool Disabled);\\r\\n    //switches autoLiquidity and marketing BNB generation during transfers\\r\\n    function TeamDisableSwapAndLiquify(bool disabled) public onlyTeam{\\r\\n        swapAndLiquifyDisabled=disabled;\\r\\n        emit OnSwitchSwapAndLiquify(disabled);\\r\\n    }\\r\\n    event OnChangeSellLock(uint256 newSellLockTime,bool disabled);\\r\\n    //Sets SellLockTime, needs to be lower than MaxSellLockTime\\r\\n    function TeamChangeSellLock(uint256 sellLockSeconds,bool disabled)public onlyTeam{\\r\\n        require(sellLockSeconds\\u003c=MaxSellLockTime,\\\"Sell Lock time too high\\\");\\r\\n        sellLockTime=sellLockSeconds;\\r\\n        sellLockDisabled=disabled;\\r\\n        emit OnChangeSellLock(sellLockSeconds,disabled);\\r\\n    } \\r\\n    event OnChangeTaxes(uint8 burnTaxes, uint8 liquidityTaxes, uint8 stakingTaxes,uint8 buyTax, uint8 sellTax, uint8 transferTax, uint8 marketing,uint8 lottery);\\r\\n    //Sets Taxes, is limited by MaxTax(25%) to make it impossible to create honeypot\\r\\n    function TeamSetTaxes(uint8 burnTaxes, uint8 liquidityTaxes, uint8 stakingTaxes,uint8 buyTax, uint8 sellTax, uint8 transferTax, uint8 marketing,uint8 lottery) public onlyTeam{\\r\\n        uint8 totalTax=burnTaxes+liquidityTaxes+stakingTaxes;\\r\\n        require(totalTax==100);\\r\\n        require(buyTax\\u003c=MaxTax\\u0026\\u0026sellTax\\u003c=MaxTax\\u0026\\u0026transferTax\\u003c=MaxTax);\\r\\n        require(marketing+lottery\\u003c=50); \\r\\n    \\r\\n        marketingShare=marketing;\\r\\n        LotteryShare=lottery;\\r\\n    \\r\\n        _burnTax=burnTaxes;\\r\\n        _liquidityTax=liquidityTaxes;\\r\\n        _stakingTax=stakingTaxes;\\r\\n        \\r\\n        _buyTax=buyTax;\\r\\n        _sellTax=sellTax;\\r\\n        _transferTax=transferTax;\\r\\n        emit OnChangeTaxes(burnTaxes, liquidityTaxes, stakingTaxes, buyTax, sellTax,  transferTax, marketing, lottery);\\r\\n    }\\r\\n\\r\\n    //manually converts contract token to LP and staking BNB\\r\\n    function TeamTriggerLiquify(uint16 pancakePermille, bool ignoreLimits) public onlyTeam{\\r\\n        _swapContractToken(pancakePermille,ignoreLimits);\\r\\n    }\\r\\n    \\r\\n    event OnExcludeFromStaking(address addr, bool exclude);\\r\\n    //Excludes account from Staking\\r\\n    function TeamSetStakingExcluded(address addr, bool exclude) public onlyTeam{\\r\\n        uint256 shares;\\r\\n        if(exclude){\\r\\n            require(!_excludedFromStaking.contains(addr));\\r\\n            uint256 newDividents=_newDividentsOf(addr);\\r\\n            shares=getShares(addr);\\r\\n            _excludedFromStaking.add(addr); \\r\\n            _totalShares-=shares;\\r\\n            alreadyPaidShares[addr]=shares*profitPerShare;\\r\\n            toBePaid[addr]+=newDividents;\\r\\n\\r\\n        } else _includeToStaking(addr);\\r\\n        emit OnExcludeFromStaking(addr, exclude);\\r\\n    }    \\r\\n\\r\\n    //function to Include own account to staking, should it be excluded\\r\\n    function IncludeMeToStaking() public{\\r\\n        _includeToStaking(msg.sender);\\r\\n    }\\r\\n    function _includeToStaking(address addr) private{\\r\\n        require(_excludedFromStaking.contains(addr));\\r\\n        _excludedFromStaking.remove(addr);\\r\\n        uint256 shares=getShares(addr);\\r\\n        _totalShares+=shares;\\r\\n        //sets alreadyPaidShares to the current amount\\r\\n        alreadyPaidShares[addr]=shares*profitPerShare;\\r\\n    }\\r\\n    event OnExclude(address addr, bool exclude);\\r\\n    //Exclude/Include account from fees and locks (eg. CEX)\\r\\n    function TeamSetExcludedStatus(address account,bool excluded) public onlyTeam {\\r\\n        if(excluded){\\r\\n            _excluded.add(account);\\r\\n        }\\r\\n        else{\\r\\n            require(account!=address(this),\\\"can\\u0027t Include the contract\\\");\\r\\n            _excluded.remove(account);\\r\\n        }\\r\\n\\r\\n        emit OnExclude(account, excluded);\\r\\n    }\\r\\n    event OnExcludeFromSellLock(address addr, bool exclude);\\r\\n    //Exclude/Include account from fees (eg. CEX)\\r\\n    function TeamSetExcludedFromSellLock(address account,bool excluded) public onlyTeam {\\r\\n        if(excluded) _excludedFromLocks.add(account);\\r\\n        else _excludedFromLocks.remove(account);\\r\\n       emit OnExcludeFromSellLock(account, excluded);\\r\\n    }\\r\\n    event OnChangeLimits(uint256 newBalanceLimit, uint256 newSellLimit);\\r\\n     //Limits need to be at least target, to avoid setting value to 0(avoid potential Honeypot)\\r\\n    function TeamChangeLimits(uint256 newBalanceLimit, uint256 newSellLimit) public onlyTeam{\\r\\n\\r\\n        require((newBalanceLimit\\u003e=_circulatingSupply/BalanceLimitDivider)\\r\\n            \\u0026\\u0026(newSellLimit\\u003e=_circulatingSupply/MinSellLimitDivider));\\r\\n        balanceLimit = newBalanceLimit;\\r\\n        sellLimit = newSellLimit;     \\r\\n        emit OnChangeLimits(newBalanceLimit, newSellLimit);\\r\\n    }\\r\\n    event ContractBurn(uint256 amount);\\r\\n    //Burns token on the contract, like when there is a very large backlog of token\\r\\n    //or for scheudled BurnEvents\\r\\n    function TeamBurnContractToken(uint8 percent) public onlyTeam{\\r\\n        require(percent\\u003c=100);\\r\\n        uint256 burnAmount=_balances[address(this)]*percent/100;\\r\\n        _removeToken(address(this),burnAmount);\\r\\n        emit Transfer(address(this), address(0), burnAmount);\\r\\n        emit ContractBurn(burnAmount);\\r\\n    }\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //Setup Functions///////////////////////////////////////////////////////////////////////////////////////\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    //Creates LP using Payable Amount, LP automatically land on the contract where they get locked\\r\\n    //once Trading gets enabled\\r\\n    bool public tradingEnabled;\\r\\n    function SetupCreateLP(uint8 ContractTokenPercent, uint8 TeamTokenPercent) public payable onlyTeam{\\r\\n        require(IBEP20(_pancakePairAddress).totalSupply()==0);\\r\\n        \\r\\n        uint256 Token=_balances[address(this)];\\r\\n        \\r\\n        uint256 TeamToken=Token*TeamTokenPercent/100;\\r\\n        uint256 ContractToken=Token*ContractTokenPercent/100;\\r\\n        uint256 LPToken=Token-(TeamToken+ContractToken);\\r\\n        \\r\\n        _removeToken(address(this),TeamToken);  \\r\\n        _addToken(msg.sender, TeamToken);\\r\\n        emit Transfer(address(this), msg.sender, TeamToken);\\r\\n        \\r\\n        _addLiquidity(LPToken, msg.value);\\r\\n        require(IBEP20(_pancakePairAddress).totalSupply()\\u003e0);\\r\\n        \\r\\n    }\\r\\n    \\r\\n    event OnTradingOpen();\\r\\n    //Enables trading. Turns on bot protection and Locks LP for default Lock time\\r\\n    function SetupEnableTrading() public onlyTeam{\\r\\n        require(IBEP20(_pancakePairAddress).totalSupply()\\u003e0);\\r\\n        require(!tradingEnabled);\\r\\n        tradingEnabled=true;\\r\\n        _liquidityUnlockTime=block.timestamp+DefaultLiquidityLockTime; \\r\\n        \\r\\n        launchTimestamp=block.timestamp;\\r\\n        _botProtection=true;\\r\\n        emit OnTradingOpen();\\r\\n    }\\r\\n    \\r\\n    //Adds or removes a List of addresses to Whitelist\\r\\n    function SetupWhitelist(address[] memory addresses, bool Add) public onlyTeam{\\r\\n        if(Add)\\r\\n            for(uint i=0; i\\u003caddresses.length; i++)\\r\\n                _whiteList.add(addresses[i]);\\r\\n        else\\r\\n            for(uint i=0; i\\u003caddresses.length; i++)\\r\\n                _whiteList.remove(addresses[i]);\\r\\n    }\\r\\n    \\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //Liquidity Lock////////////////////////////////////////////////////////////////////////////////////////\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //the timestamp when Liquidity unlocks\\r\\n    uint256 private _liquidityUnlockTime;\\r\\n    bool public liquidityRelease20Percent;\\r\\n    event  LimitReleaseTo20Percent();\\r\\n    //Sets Liquidity Release to 20% at a time and prolongs liquidity Lock for a Week after Release. \\r\\n    //Should be called once start was successful.\\r\\n    function TeamlimitLiquidityReleaseTo20Percent() public onlyTeam{\\r\\n        liquidityRelease20Percent=true;\\r\\n        emit LimitReleaseTo20Percent();\\r\\n    }\\r\\n    \\r\\n    //Prolongs the Liquidity Lock. Lock can\\u0027t be reduced\\r\\n    event ProlongLiquidityLock(uint256 secondsUntilUnlock);\\r\\n    function TeamLockLiquidityForSeconds(uint256 secondsUntilUnlock) public onlyTeam{\\r\\n        _prolongLiquidityLock(secondsUntilUnlock+block.timestamp);\\r\\n        emit ProlongLiquidityLock(secondsUntilUnlock);\\r\\n    }\\r\\n    function _prolongLiquidityLock(uint256 newUnlockTime) private{\\r\\n        // require new unlock time to be longer than old one\\r\\n        require(newUnlockTime\\u003e_liquidityUnlockTime);\\r\\n        _liquidityUnlockTime=newUnlockTime;\\r\\n    }\\r\\n\\r\\n\\r\\n    event OnReleaseLiquidity();\\r\\n    //Release Liquidity Tokens once unlock time is over\\r\\n    function TeamReleaseLiquidity() public onlyTeam {\\r\\n        //Only callable if liquidity Unlock time is over\\r\\n        require(block.timestamp \\u003e= _liquidityUnlockTime, \\\"Locked\\\");\\r\\n        _liquidityUnlockTime=block.timestamp+DefaultLiquidityLockTime;       \\r\\n        IPancakeERC20 liquidityToken = IPancakeERC20(_pancakePairAddress);\\r\\n        uint256 amount = liquidityToken.balanceOf(address(this));\\r\\n        if(liquidityRelease20Percent) amount=amount*2/10;\\r\\n        liquidityToken.transfer(TeamWallet, amount);\\r\\n        emit OnReleaseLiquidity();\\r\\n    }\\r\\n\\r\\n    event OnRemoveLiquidity(bool AddToStaking);\\r\\n    //Removes Liquidity once unlock Time is over, can add LP to staking or to Marketing\\r\\n    //Add to staking can be used as promotion, or as reward/refund for good holders if Project dies.\\r\\n    function TeamRemoveLiquidity(bool addToStaking) public onlyTeam {\\r\\n        //Only callable if liquidity Unlock time is over\\r\\n        require(block.timestamp \\u003e= _liquidityUnlockTime, \\\"Locked\\\");\\r\\n        _liquidityUnlockTime=block.timestamp+DefaultLiquidityLockTime;\\r\\n        IPancakeERC20 liquidityToken = IPancakeERC20(_pancakePairAddress);\\r\\n        uint256 amount = liquidityToken.balanceOf(address(this));\\r\\n        if(liquidityRelease20Percent) amount=amount*2/10; //only remove 20% each\\r\\n        liquidityToken.approve(address(_pancakeRouter),amount);\\r\\n        //Removes Liquidity and either distributes liquidity BNB to stakers, or \\r\\n        // adds them to marketing Balance\\r\\n        //Token will be converted\\r\\n        //to Liquidity and Staking BNB again\\r\\n        uint256 initialBNBBalance = address(this).balance;\\r\\n        _pancakeRouter.removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n            address(this),\\r\\n            amount,\\r\\n            0,\\r\\n            0,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n            );\\r\\n        uint256 newBNBBalance = address(this).balance-initialBNBBalance;\\r\\n        if(addToStaking) _distributeStake(newBNBBalance);\\r\\n        else marketingBalance+=newBNBBalance;\\r\\n        \\r\\n        emit OnRemoveLiquidity(addToStaking);\\r\\n    }\\r\\n    event OnRemoveRemainingBNB();\\r\\n    //Releases all remaining BNB on the contract wallet, so BNB wont be burned\\r\\n    //Can only be called 30 days after Liquidity unlocks so staked BNB stay safe\\r\\n    //Once called it breaks staking\\r\\n    function TeamRemoveRemainingBNB() public onlyTeam{\\r\\n        require(block.timestamp \\u003e= _liquidityUnlockTime+30 days, \\\"Locked\\\");\\r\\n        _liquidityUnlockTime=block.timestamp+DefaultLiquidityLockTime;\\r\\n        (bool sent,) =TeamWallet.call{value: (address(this).balance)}(\\\"\\\");\\r\\n        require(sent);\\r\\n        emit OnRemoveRemainingBNB();\\r\\n    }\\r\\n    \\r\\n    //Allows the team to withdraw token that get\\u0027s accidentally sent to the contract(happens way too often)\\r\\n    //Can\\u0027t withdraw the LP token, this token or the promotion token\\r\\n    function TeamWithdrawStrandedToken(address strandedToken) public onlyTeam{\\r\\n        require((strandedToken!=_pancakePairAddress)\\u0026\\u0026strandedToken!=address(this)\\u0026\\u0026strandedToken!=address(promotionToken));\\r\\n        IBEP20 token=IBEP20(strandedToken);\\r\\n        token.transfer(TeamWallet,token.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    //external//////////////////////////////////////////////////////////////////////////////////////////////\\r\\n    ////////////////////////////////////////////////////////////////////////////////////////////////////////\\r\\n\\r\\n    receive() external payable {\\r\\n        //only allow pancakeRouter to send BNB\\r\\n        require(msg.sender==address(PancakeRouter));\\r\\n    }\\r\\n    // IBEP20\\r\\n\\r\\n    function getOwner() external view override returns (address) {\\r\\n        return owner();\\r\\n    }\\r\\n    function name() external pure override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n    function symbol() external pure override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n    function decimals() external pure override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n    function totalSupply() external view override returns (uint256) {\\r\\n        return _circulatingSupply;\\r\\n    }\\r\\n    function balanceOf(address account) external view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n    function allowance(address _owner, address spender) external view override returns (uint256) {\\r\\n        return _allowances[_owner][spender];\\r\\n    }\\r\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0));\\r\\n        require(spender != address(0));\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\r\\n        require(currentAllowance \\u003e= amount);\\r\\n\\r\\n        _approve(sender, msg.sender, currentAllowance - amount);\\r\\n        return true;\\r\\n    }\\r\\n    // IBEP20 - Helpers\\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[msg.sender][spender];\\r\\n        require(currentAllowance \\u003e= subtractedValue);\\r\\n\\r\\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\\r\\n        return true;\\r\\n    }\\r\\n}\"},\"Libraries.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\ninterface IBEP20 {\\r\\n  function totalSupply() external view returns (uint256);\\r\\n  function decimals() external view returns (uint8);\\r\\n  function symbol() external view returns (string memory);\\r\\n  function name() external view returns (string memory);\\r\\n  function getOwner() external view returns (address);\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n  function allowance(address _owner, address spender) external view returns (uint256);\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n\\r\\ninterface IPancakeERC20 {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n}\\r\\n\\r\\ninterface IPancakeFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\ninterface IPancakeRouter01 {\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getamountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getamountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getamountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getamountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = msg.sender;\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping (bytes32 =\\u003e uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\r\\n\\r\\n            bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n            // Move the last value to the index where the value to delete is\\r\\n            set._values[toDeleteIndex] = lastvalue;\\r\\n            // Update the index for the moved value\\r\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue\\u0027s index to valueIndex\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        require(set._values.length \\u003e index, \\\"EnumerableSet: index out of bounds\\\");\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ContractBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DrawLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LimitReleaseTo20Percent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"AMM\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Add\",\"type\":\"bool\"}],\"name\":\"OnAddAMM\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"FirstTicketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LastTicketID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OnBuyLotteryTickets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalanceLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellLimit\",\"type\":\"uint256\"}],\"name\":\"OnChangeLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"TresholdPermille\",\"type\":\"uint8\"}],\"name\":\"OnChangeLiquifyTreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellLockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"name\":\"OnChangeSellLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"burnTaxes\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"liquidityTaxes\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"stakingTaxes\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"buyTax\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"sellTax\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"transferTax\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"marketing\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"lottery\",\"type\":\"uint8\"}],\"name\":\"OnChangeTaxes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"AddressFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"AddressTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnClaimBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"AddressTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnClaimPromotionToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"AddressTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnClaimToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"AddressTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OnCompound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"OnExclude\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"OnExcludeFromSellLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"OnExcludeFromStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OnReleaseLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"AddToStaking\",\"type\":\"bool\"}],\"name\":\"OnRemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OnRemoveRemainingBNB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"OnSacrifice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"Disabled\",\"type\":\"bool\"}],\"name\":\"OnSwitchSwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OnTradingOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"OnTransferSacrifice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secondsUntilUnlock\",\"type\":\"uint256\"}],\"name\":\"ProlongLiquidityLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SetPromotionToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BalanceLimitDivider\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BoostBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"}],\"name\":\"BuyLotteryTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ClaimAnyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountWei\",\"type\":\"uint256\"}],\"name\":\"ClaimAnyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ClaimBNBTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWei\",\"type\":\"uint256\"}],\"name\":\"ClaimPromotionToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimPromotionToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimPromotionTokenViaContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IncludeMeToStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"InitialSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LiquifyTreshold\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LotteryParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LotteryShare\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxSellLockTime\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MinSellLimitDivider\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sacrifice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"ContractTokenPercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"TeamTokenPercent\",\"type\":\"uint8\"}],\"name\":\"SetupCreateLP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SetupEnableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"Add\",\"type\":\"bool\"}],\"name\":\"SetupWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"AMMPairAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"Add\",\"type\":\"bool\"}],\"name\":\"TeamAddOrRemoveAMM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"percent\",\"type\":\"uint8\"}],\"name\":\"TeamBurnContractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBalanceLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellLimit\",\"type\":\"uint256\"}],\"name\":\"TeamChangeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellLockSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"name\":\"TeamChangeSellLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTeamWallet\",\"type\":\"address\"}],\"name\":\"TeamChangeTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"name\":\"TeamDisableSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLotteryTicketPrice\",\"type\":\"uint256\"}],\"name\":\"TeamDrawLotteryWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secondsUntilUnlock\",\"type\":\"uint256\"}],\"name\":\"TeamLockLiquidityForSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamReleaseLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"addToStaking\",\"type\":\"bool\"}],\"name\":\"TeamRemoveLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamRemoveRemainingBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"TeamSetExcludedFromSellLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"TeamSetExcludedStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"TresholdPermille\",\"type\":\"uint8\"}],\"name\":\"TeamSetLiquifyTreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"BNBboostPercentage\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"TokenBoostPercentage\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"claimViaContract\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"TaxBonus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"MinHold\",\"type\":\"uint256\"}],\"name\":\"TeamSetPromotionToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exclude\",\"type\":\"bool\"}],\"name\":\"TeamSetStakingExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"burnTaxes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"liquidityTaxes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"stakingTaxes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"buyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sellTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"transferTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"marketing\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lottery\",\"type\":\"uint8\"}],\"name\":\"TeamSetTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"pancakePermille\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"ignoreLimits\",\"type\":\"bool\"}],\"name\":\"TeamTriggerLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamWithdrawMarketingBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strandedToken\",\"type\":\"address\"}],\"name\":\"TeamWithdrawStrandedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TeamlimitLiquidityReleaseTo20Percent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferSacrifice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"boost\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"stake\",\"type\":\"bool\"}],\"name\":\"addFunds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getDividents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityLockSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"LockedSeconds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TicketID\",\"type\":\"uint256\"}],\"name\":\"getLotteryTicketHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"AddressToCheck\",\"type\":\"address\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"Whitelisted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"Excluded\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ExcludedFromLock\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"ExcludedFromStaking\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"SellLock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"eligibleForPromotionBonus\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"additionalShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferTax\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"whitelistBuyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"burnTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityRelease20Percent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryTicketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingShare\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promotionBNBBoostPercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promotionMinHold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promotionTaxBonus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promotionToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promotionTokenBoostPercentage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sacrificedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLockDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLPBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPayouts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BurningMoon", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://519210755a624547163ac0c2d172d3b9c0506771259e4fbff42bdb7e48269b7c"}