{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.8.19;\r\n\r\n// Sources flattened with hardhat v2.14.0 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.8.3\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\n//pragma solidity^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.8.3\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\r\n\r\n//pragma solidity^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(\r\n        uint256 tokenId\r\n    ) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(\r\n        address owner,\r\n        address operator\r\n    ) external view returns (bool);\r\n}\r\n\r\n// File @openzeppelin/contracts/interfaces/IERC721.sol@v4.8.3\r\n\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\r\n\r\n//pragma solidity^0.8.0;\r\n\r\n// File contracts/interfaces/ILocation.sol\r\n\r\n// Authored by Plastic Digits\r\n// Credit to Pancakeswap\r\n//pragma solidity^0.8.19;\r\n\r\ninterface ILocation {\r\n    //Only callable by LOCATION_CONTROLLER\r\n    function LOCATION_CONTROLLER_onArrival(\r\n        IERC721 _entity,\r\n        uint256 _nftId,\r\n        ILocation _from\r\n    ) external;\r\n\r\n    //Only callable by LOCATION_CONTROLLER\r\n    function LOCATION_CONTROLLER_onDeparture(\r\n        IERC721 _entity,\r\n        uint256 _nftId,\r\n        ILocation _to\r\n    ) external;\r\n\r\n    function viewOnly_getAllValidSources()\r\n        external\r\n        view\r\n        returns (address[] memory locations_);\r\n\r\n    function getValidSourceCount() external view returns (uint256);\r\n\r\n    function getValidSourceAt(uint256 _i) external view returns (address);\r\n\r\n    function viewOnly_getAllValidDestinations()\r\n        external\r\n        view\r\n        returns (address[] memory locations_);\r\n\r\n    function getValidDestinationCount() external view returns (uint256);\r\n\r\n    function getValidDestinationAt(uint256 _i) external view returns (address);\r\n\r\n    function viewOnly_getAllValidEntities()\r\n        external\r\n        view\r\n        returns (address[] memory entities_);\r\n\r\n    function getValidEntitiesCount() external view returns (uint256);\r\n\r\n    function getValidEntitiesAt(uint256 _i) external view returns (address);\r\n}\r\n\r\n// File contracts/interfaces/ILocationController.sol\r\n\r\n// Authored by Plastic Digits\r\n// Credit to Pancakeswap\r\n//pragma solidity^0.8.19;\r\n\r\ninterface ILocationController {\r\n    //Moves entity from current location to new location.\r\n    //Must call LOCATION_CONTROLLER_onDeparture for old ILocation\r\n    //Must call LOCATION_CONTROLLER_onArrival for new ILocation\r\n    function move(IERC721 _entity, uint256 _entityId, ILocation _dest) external;\r\n\r\n    //Must call LOCATION_CONTROLLER_onArrival for new ILocation\r\n    function spawn(\r\n        IERC721 _entity,\r\n        uint256 _entityId,\r\n        ILocation _dest\r\n    ) external;\r\n\r\n    //Must call LOCATION_CONTROLLER_onDeparture for old ILocation\r\n    function despawn(IERC721 _entity, uint256 _entityId) external;\r\n\r\n    //High gas usage, view only\r\n    function viewOnly_getAllLocalEntitiesFor(\r\n        ILocation _location,\r\n        IERC721 _entity\r\n    ) external view returns (uint256[] memory entityIds_);\r\n\r\n    function getEntityLocation(\r\n        IERC721 _entity,\r\n        uint256 _entityId\r\n    ) external view returns (ILocation);\r\n\r\n    function getLocalEntityCountFor(\r\n        ILocation _location,\r\n        IERC721 _entity\r\n    ) external view returns (uint256);\r\n\r\n    function getLocalEntityAtIndexFor(\r\n        ILocation _location,\r\n        IERC721 _entity,\r\n        uint256 _i\r\n    ) external view returns (uint256 entityId_);\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/structs/EnumerableSet.sol@v4.8.3\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\r\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\r\n\r\n//pragma solidity^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n *\r\n * [WARNING]\r\n * ====\r\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\r\n * unusable.\r\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\r\n *\r\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\r\n * array of EnumerableSet.\r\n * ====\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(\r\n        Set storage set,\r\n        bytes32 value\r\n    ) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(\r\n        Set storage set,\r\n        uint256 index\r\n    ) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(\r\n        Bytes32Set storage set,\r\n        bytes32 value\r\n    ) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(\r\n        Bytes32Set storage set,\r\n        bytes32 value\r\n    ) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(\r\n        Bytes32Set storage set,\r\n        bytes32 value\r\n    ) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(\r\n        Bytes32Set storage set,\r\n        uint256 index\r\n    ) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(\r\n        Bytes32Set storage set\r\n    ) internal view returns (bytes32[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        bytes32[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(\r\n        AddressSet storage set,\r\n        address value\r\n    ) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(\r\n        AddressSet storage set,\r\n        address value\r\n    ) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(\r\n        AddressSet storage set,\r\n        address value\r\n    ) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(\r\n        AddressSet storage set,\r\n        uint256 index\r\n    ) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(\r\n        AddressSet storage set\r\n    ) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(\r\n        UintSet storage set,\r\n        uint256 value\r\n    ) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(\r\n        UintSet storage set,\r\n        uint256 value\r\n    ) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(\r\n        UintSet storage set,\r\n        uint256 index\r\n    ) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(\r\n        UintSet storage set\r\n    ) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// File contracts/LocationController.sol\r\n\r\n//Permisionless LocationController\r\n//Anyone can implement ILocation and then allow users to init/move entities using this controller.\r\n//Allows the location to be looked up for entitites, so location based logic is possible for games with locations.\r\ncontract LocationController is ILocationController {\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n\r\n    mapping(ILocation => mapping(IERC721 => EnumerableSet.UintSet)) locationEntitiesIndex;\r\n    mapping(IERC721 => mapping(uint256 => ILocation)) entityLocation;\r\n\r\n    modifier onlyEntityOwner(IERC721 _entity, uint256 _entityId) {\r\n        require(msg.sender == _entity.ownerOf(_entityId), \"Only entity owner\");\r\n        _;\r\n    }\r\n\r\n    //Moves entity from current location to new location.\r\n    //First updates the entity's location, then calls arrival/departure hooks.\r\n    function move(\r\n        IERC721 _entity,\r\n        uint256 _entityId,\r\n        ILocation _dest\r\n    ) external onlyEntityOwner(_entity, _entityId) {\r\n        ILocation _prev = entityLocation[_entity][_entityId];\r\n        require(_prev != _dest, \"Cannot move to current location\");\r\n        entityLocation[_entity][_entityId] = _dest;\r\n        require(\r\n            locationEntitiesIndex[_prev][_entity].remove(_entityId),\r\n            \"Remove failed\"\r\n        );\r\n        require(\r\n            locationEntitiesIndex[_dest][_entity].add(_entityId),\r\n            \"Add failed\"\r\n        );\r\n\r\n        _prev.LOCATION_CONTROLLER_onDeparture(_entity, _entityId, _dest);\r\n        _dest.LOCATION_CONTROLLER_onArrival(_entity, _entityId, _prev);\r\n    }\r\n\r\n    //Spawns an entity at location, so it can move in the future.\r\n    function spawn(\r\n        IERC721 _entity,\r\n        uint256 _entityId,\r\n        ILocation _to\r\n    ) external onlyEntityOwner(_entity, _entityId) {\r\n        require(\r\n            entityLocation[_entity][_entityId] == ILocation(address(0x0)),\r\n            \"Entity already spawned\"\r\n        );\r\n        entityLocation[_entity][_entityId] = _to;\r\n        require(\r\n            locationEntitiesIndex[_to][_entity].add(_entityId),\r\n            \"Add failed\"\r\n        );\r\n        _to.LOCATION_CONTROLLER_onArrival(\r\n            _entity,\r\n            _entityId,\r\n            ILocation(address(0x0))\r\n        );\r\n    }\r\n\r\n    //despawns an entity, so it is no longer tracked as at a specific location.\r\n    function despawn(\r\n        IERC721 _entity,\r\n        uint256 _entityId\r\n    ) external onlyEntityOwner(_entity, _entityId) {\r\n        require(\r\n            entityLocation[_entity][_entityId] != ILocation(address(0x0)),\r\n            \"Entity not spawned\"\r\n        );\r\n        ILocation _prev = entityLocation[_entity][_entityId];\r\n        delete entityLocation[_entity][_entityId];\r\n        require(\r\n            locationEntitiesIndex[_prev][_entity].remove(_entityId),\r\n            \"Remove failed\"\r\n        );\r\n\r\n        _prev.LOCATION_CONTROLLER_onDeparture(\r\n            _entity,\r\n            _entityId,\r\n            ILocation(address(0x0))\r\n        );\r\n    }\r\n\r\n    //High gas usage, view only\r\n    function viewOnly_getAllLocalEntitiesFor(\r\n        ILocation _location,\r\n        IERC721 _entity\r\n    ) external view override returns (uint256[] memory entityIds_) {\r\n        entityIds_ = locationEntitiesIndex[_location][_entity].values();\r\n    }\r\n\r\n    function getEntityLocation(\r\n        IERC721 _entity,\r\n        uint256 _entityId\r\n    ) public view override returns (ILocation) {\r\n        return entityLocation[_entity][_entityId];\r\n    }\r\n\r\n    function getLocalEntityCountFor(\r\n        ILocation _location,\r\n        IERC721 _entity\r\n    ) public view override returns (uint256) {\r\n        return locationEntitiesIndex[_location][_entity].length();\r\n    }\r\n\r\n    function getLocalEntityAtIndexFor(\r\n        ILocation _location,\r\n        IERC721 _entity,\r\n        uint256 _i\r\n    ) public view override returns (uint256 entityId_) {\r\n        entityId_ = locationEntitiesIndex[_location][_entity].at(_i);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_entityId\",\"type\":\"uint256\"}],\"name\":\"despawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_entityId\",\"type\":\"uint256\"}],\"name\":\"getEntityLocation\",\"outputs\":[{\"internalType\":\"contract ILocation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILocation\",\"name\":\"_location\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_i\",\"type\":\"uint256\"}],\"name\":\"getLocalEntityAtIndexFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entityId_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILocation\",\"name\":\"_location\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"_entity\",\"type\":\"address\"}],\"name\":\"getLocalEntityCountFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_entityId\",\"type\":\"uint256\"},{\"internalType\":\"contract ILocation\",\"name\":\"_dest\",\"type\":\"address\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_entityId\",\"type\":\"uint256\"},{\"internalType\":\"contract ILocation\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"spawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILocation\",\"name\":\"_location\",\"type\":\"address\"},{\"internalType\":\"contract IERC721\",\"name\":\"_entity\",\"type\":\"address\"}],\"name\":\"viewOnly_getAllLocalEntitiesFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"entityIds_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LocationController", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f16993bfa7c45257a2dcf51f5b302c055591ad1f5970318f4ff68b419c51b787"}