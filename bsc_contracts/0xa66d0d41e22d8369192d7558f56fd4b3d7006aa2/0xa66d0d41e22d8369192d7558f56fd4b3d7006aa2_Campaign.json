{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Campaign.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\ninterface ICampaignFactory {\\n    function recipient() external view returns (address);\\n}\\n\\ncontract Campaign is Initializable {\\n    bool public initialized;\\n    string public campaignId;\\n    address immutable owner;\\n    address immutable factory;\\n    address public campaignOwner;\\n    address public prizeAddress;\\n    uint256 public prizeAmount;\\n    uint256 public maxEntries;\\n    uint256 public startTimestamp;\\n    uint256 public endTimestamp;\\n    bytes32 private sealedSeed;\\n    uint256 private feeAmount;\\n    uint256 private depositAmount;\\n\\n    uint256 private campaignOwnersContribution;\\n    uint256 private campaignOwnersContributionTotal;\\n\\n    bytes32 public revealedSeed;\\n\\n    mapping(address => bool) private freeEntry;\\n    mapping(address => address) private chain;\\n    mapping(uint256 => address) private cursorMap;\\n\\n    uint256 public length;\\n\\n    uint256 private rattleRandom;\\n    bool private cancelled;\\n    bool private depositReceived;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyCampaignOwner() {\\n        require(\\n            msg.sender == campaignOwner,\\n            \\\"Caller is not the campaign owner\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _owner, address _factory) {\\n        owner = _owner;\\n        factory = _factory;\\n    }\\n\\n    function initialize(\\n        address _campaignOwner,\\n        string memory _campaignId,\\n        address _prizeAddress,\\n        uint256 _prizeAmount,\\n        uint256 _maxEntries,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp,\\n        bytes32 _sealedSeed,\\n        uint256 _deposit,\\n        uint256 _fee\\n    ) external initializer {\\n        campaignOwner = _campaignOwner;\\n        campaignId = _campaignId;\\n        prizeAddress = _prizeAddress;\\n        prizeAmount = _prizeAmount;\\n        maxEntries = _maxEntries;\\n        startTimestamp = _startTimestamp;\\n        endTimestamp = _endTimestamp;\\n        sealedSeed = _sealedSeed;\\n        rattleRandom = uint256(_sealedSeed);\\n        uint256 cent = getUSCentInWEI();\\n        feeAmount = cent * _fee;\\n        depositAmount = cent * _deposit;\\n    }\\n\\n    function getUSDInWEI() public view returns (uint256) {\\n        address dataFeed;\\n        if (block.chainid == 1) {\\n            //Mainnet ETH/USD\\n            dataFeed = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\\n        } else if (block.chainid == 5) {\\n            //Goerli ETH/USD\\n            dataFeed = 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e;\\n        } else if (block.chainid == 137) {\\n            //Polygon MATIC/USD\\n            dataFeed = 0xAB594600376Ec9fD91F8e885dADF0CE036862dE0;\\n        } else if (block.chainid == 80001) {\\n            //Mumbai MATIC/USD\\n            dataFeed = 0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada;\\n        } else if (block.chainid == 56) {\\n            dataFeed = 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE;\\n        } else if (block.chainid == 97) {\\n            //BSC BNBT/USD\\n            dataFeed = 0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526;\\n        } else {\\n            // forTesting\\n            return 1e15;\\n        }\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(dataFeed);\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return 1e26 / uint256(price);\\n    }\\n\\n    function getUSCentInWEI() public view returns (uint256) {\\n        return getUSDInWEI() / 100;\\n    }\\n\\n    event CampaignCreated(\\n        address campaignAddress,\\n        address campaignOwner,\\n        string campaignId,\\n        address prizeAddress,\\n        uint256 prizeAmount,\\n        uint256 maxEntries,\\n        uint256 startTimestamp,\\n        uint256 endTimestamp\\n    );\\n\\n    function getDetail()\\n        public\\n        view\\n        returns (\\n            address _campaignOwner,\\n            string memory _campaignId,\\n            address _prizeAddress,\\n            uint256 _prizeAmount,\\n            uint256 _maxEntries,\\n            uint256 _startTimestamp,\\n            uint256 _endTimestamp,\\n            uint256 _entryCount\\n        )\\n    {\\n        return (\\n            campaignOwner,\\n            campaignId,\\n            prizeAddress,\\n            prizeAmount,\\n            maxEntries,\\n            startTimestamp,\\n            endTimestamp,\\n            length\\n        );\\n    }\\n\\n    function hashMessage(address _user, uint256 _timestamp)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(this, _user, _timestamp));\\n    }\\n\\n    function isStarted() public view returns (bool) {\\n        return block.timestamp >= startTimestamp;\\n    }\\n\\n    function isNotClosed() public view returns (bool) {\\n        return block.timestamp < endTimestamp;\\n    }\\n\\n    function isNotFull() public view returns (bool) {\\n        return length < maxEntries;\\n    }\\n\\n    function isCancelled() public view returns (bool) {\\n        return cancelled;\\n    }\\n\\n    function isDepositReceived() public view returns (bool) {\\n        return depositReceived;\\n    }\\n\\n    function hasEntered(address _user) public view returns (bool) {\\n        return chain[_user] != address(0);\\n    }\\n\\n    function getFreeDrawRemaining() public view returns (uint256) {\\n        return (feeAmount > 0) ? (campaignOwnersContribution / feeAmount) : 0;\\n    }\\n\\n    function getStatus()\\n        public\\n        view\\n        returns (\\n            bool _hasEntered,\\n            bool _isStarted,\\n            bool _isNotClosed,\\n            bool _isRevealed,\\n            bool _isDepositReceived,\\n            bool _isCancelled,\\n            uint256 _totalEntries,\\n            uint256 _maxEntries,\\n            uint256 _fee,\\n            uint256 _freeDrawRemaining\\n        )\\n    {\\n        return (\\n            hasEntered(msg.sender),\\n            isStarted(),\\n            isNotClosed(),\\n            isRevealed(),\\n            isDepositReceived(),\\n            isCancelled(),\\n            length,\\n            maxEntries,\\n            feeAmount,\\n            getFreeDrawRemaining()\\n        );\\n    }\\n\\n    function getFee() public view returns (uint256) {\\n        return feeAmount;\\n    }\\n\\n    function setFeeZero() public onlyOwner {\\n        require(!isStarted(), \\\"Campaign has started\\\");\\n        feeAmount = 0;\\n        if (campaignOwnersContribution > 0) {\\n            payable(campaignOwner).transfer(campaignOwnersContribution);\\n            campaignOwnersContribution = 0;\\n        }\\n    }\\n\\n    function getEntryCount() public view returns (uint256) {\\n        return length;\\n    }\\n\\n    function deposit() public payable onlyCampaignOwner {\\n        require(!depositReceived, \\\"Deposit has already been received\\\");\\n        require(!isCancelled(), \\\"Campaign has been cancelled\\\");\\n        require(isNotClosed(), \\\"Campaign has ended\\\");\\n        require(msg.value >= depositAmount, \\\"You need to pay the deposit\\\");\\n        depositReceived = true;\\n        if (msg.value > depositAmount) {\\n            payable(msg.sender).transfer(msg.value - depositAmount);\\n        }\\n    }\\n\\n    function getDepositAmount() public view returns (uint256) {\\n        return depositAmount;\\n    }\\n\\n    function setCampaignOwnersContribution() public payable onlyCampaignOwner {\\n        require(!isCancelled(), \\\"Campaign has been cancelled\\\");\\n        require(isNotClosed(), \\\"Campaign has ended\\\");\\n        require(\\n            campaignOwnersContribution + msg.value <= maxEntries * feeAmount,\\n            \\\"You cannot contribute more than the maximum amount\\\"\\n        );\\n        campaignOwnersContribution += msg.value;\\n    }\\n\\n    function getCampaignOwnersContribution() public view returns (uint256) {\\n        return campaignOwnersContribution;\\n    }\\n\\n    function isFreeDraw() public view returns (bool) {\\n        return campaignOwnersContribution >= feeAmount;\\n    }\\n\\n    function isRevealed() public view returns (bool) {\\n        return revealedSeed != 0;\\n    }\\n\\n    function setEntry(\\n        uint256 _timestamp,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v\\n    ) public payable {\\n        require(isNotFull(), \\\"Already reached the maximum number of entries\\\");\\n        require(isStarted(), \\\"Campaign has not started yet\\\");\\n        require(isNotClosed(), \\\"Campaign has ended\\\");\\n        require(!isCancelled(), \\\"Campaign has been cancelled\\\");\\n        require(\\n            _timestamp + 5 minutes > block.timestamp,\\n            \\\"Timestamp is not valid\\\"\\n        );\\n        require(chain[msg.sender] == address(0), \\\"You have already entered\\\");\\n\\n        bytes32 message = hashMessage(msg.sender, _timestamp);\\n\\n        require(\\n            ecrecover(message, v, r, s) == owner,\\n            \\\"You need signatures from the owner to set an entry\\\"\\n        );\\n\\n        if (isFreeDraw()) {\\n            require(\\n                freeEntry[msg.sender] == false,\\n                \\\"You have already used your free draw\\\"\\n            );\\n            freeEntry[msg.sender] = true;\\n            campaignOwnersContribution -= feeAmount;\\n            campaignOwnersContributionTotal += feeAmount;\\n        } else {\\n            require(\\n                msg.value >= feeAmount,\\n                \\\"You need to pay the entry fee to enter\\\"\\n            );\\n        }\\n\\n        uint256 rand = uint256(\\n            keccak256(abi.encodePacked(message, rattleRandom, length))\\n        );\\n\\n        if (length == 0) {\\n            chain[msg.sender] = msg.sender;\\n            cursorMap[0] = msg.sender;\\n        } else {\\n            address cursor = cursorMap[rand % length];\\n            chain[msg.sender] = chain[cursor];\\n            chain[cursor] = msg.sender;\\n            cursorMap[length] = msg.sender;\\n        }\\n        length++;\\n        rattleRandom = rand;\\n    }\\n\\n    function withdrawAll() public onlyOwner {\\n        require(\\n            endTimestamp + 365 days < block.timestamp,\\n            \\\"Campaign has not ended yet\\\"\\n        );\\n        payable(ICampaignFactory(factory).recipient()).transfer(\\n            address(this).balance\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"transfer failed\\\"\\n        );\\n    }\\n\\n    function recoverERC20(address _tokenAddress) public onlyOwner {\\n        uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\\n        safeTransfer(_tokenAddress, owner, balance);\\n    }\\n\\n    function getPaybackAmount() public view returns (uint256) {\\n        return (length * feeAmount) / 2;\\n    }\\n\\n    function payback() public payable onlyCampaignOwner {\\n        require(!isCancelled(), \\\"Campaign has been cancelled already\\\");\\n        require(revealedSeed == 0, \\\"Campaign has already been revealed\\\");\\n\\n        require(\\n            msg.value >= getPaybackAmount(),\\n            \\\"You need to pay 1/2 of the fee that user paid\\\"\\n        );\\n\\n        uint256 campaignOwnersBack = isDepositReceived() ? depositAmount : 0;\\n        depositReceived = false;\\n        cancelled = true;\\n        campaignOwnersBack += campaignOwnersContributionTotal;\\n        campaignOwnersBack += campaignOwnersContribution;\\n        campaignOwnersBack += msg.value - getPaybackAmount();\\n        payable(ICampaignFactory(factory).recipient()).transfer(msg.value);\\n        payable(campaignOwner).transfer(campaignOwnersBack);\\n    }\\n\\n    function paybackWithdraw() public {\\n        require(isCancelled(), \\\"Campaign has not been cancelled\\\");\\n        require(\\n            chain[msg.sender] != address(0) && !freeEntry[msg.sender],\\n            \\\"You don't have right to withdraw\\\"\\n        );\\n        chain[msg.sender] = address(0);\\n        payable(msg.sender).transfer(feeAmount);\\n    }\\n\\n    function revealSeed(bytes32 _seed) public {\\n        require(!isNotClosed(), \\\"Campaign has not ended yet\\\");\\n        require(!isCancelled(), \\\"Campaign has been cancelled\\\");\\n        require(revealedSeed == 0, \\\"Seed has already been revealed\\\");\\n        require(\\n            block.timestamp > endTimestamp + 7 days ||\\n                msg.sender == campaignOwner,\\n            \\\"You can not reveal the seed\\\"\\n        );\\n        require(\\n            keccak256(abi.encodePacked(campaignId, _seed)) == sealedSeed,\\n            \\\"Seed is not correct\\\"\\n        );\\n        revealedSeed = _seed;\\n        rattleRandom = uint256(\\n            keccak256(abi.encodePacked(_seed, rattleRandom))\\n        );\\n        if (isDepositReceived()) {\\n            depositReceived = false;\\n            payable(msg.sender).transfer(depositAmount);\\n        }\\n        if (campaignOwnersContribution > 0) {\\n            uint256 back = campaignOwnersContribution;\\n            campaignOwnersContribution = 0;\\n            payable(campaignOwner).transfer(back);\\n        }\\n        payable(ICampaignFactory(factory).recipient()).transfer(\\n            address(this).balance\\n        );\\n    }\\n\\n    function canDraw() public view returns (bool) {\\n        return revealedSeed > 0;\\n    }\\n\\n    function draw() public view returns (address[] memory _winners) {\\n        require(canDraw(), \\\"Seed has not been confirmed yet\\\");\\n\\n        address[] memory winners = new address[](prizeAmount);\\n        uint256 winnerNum = prizeAmount < length ? prizeAmount : length;\\n        address cursor = cursorMap[rattleRandom % length];\\n        for (uint256 i = 0; i < winnerNum; i++) {\\n            winners[i] = chain[cursor];\\n            cursor = chain[cursor];\\n        }\\n        for (uint256 i = winnerNum; i < prizeAmount; i++) {\\n            winners[i] = campaignOwner;\\n        }\\n\\n        return winners;\\n    }\\n\\n    function showSubstituteElected(uint256 _substitute)\\n        public\\n        view\\n        returns (address[] memory _substitutes)\\n    {\\n        require(canDraw(), \\\"Seed has not been confirmed yet\\\");\\n        require(prizeAmount < length, \\\"Substitute election is not needed\\\");\\n\\n        address[] memory substitutes = new address[](_substitute);\\n        address cursor = cursorMap[rattleRandom % length];\\n        for (uint256 i = 0; i < prizeAmount; i++) {\\n            cursor = chain[cursor];\\n        }\\n        for (uint256 i = 0; i < _substitute; i++) {\\n            substitutes[i] = chain[cursor];\\n            cursor = chain[cursor];\\n        }\\n        return substitutes;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"campaignAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"campaignOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"campaignId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prizeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prizeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxEntries\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"CampaignCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"campaignId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"campaignOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canDraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"draw\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_winners\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCampaignOwnersContribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDetail\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_campaignOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_campaignId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_prizeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_prizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxEntries\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_entryCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntryCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFreeDrawRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaybackAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_hasEntered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isStarted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isNotClosed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isRevealed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isDepositReceived\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isCancelled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_totalEntries\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxEntries\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_freeDrawRemaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSCentInWEI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUSDInWEI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"hasEntered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"hashMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_campaignOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_campaignId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_prizeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_prizeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxEntries\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_sealedSeed\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDepositReceived\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFreeDraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNotClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNotFull\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRevealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paybackWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_seed\",\"type\":\"bytes32\"}],\"name\":\"revealSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealedSeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setCampaignOwnersContribution\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"setEntry\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setFeeZero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_substitute\",\"type\":\"uint256\"}],\"name\":\"showSubstituteElected\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_substitutes\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Campaign", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a35e8e04b7e729f9fd54a209ab84836c8a465412000000000000000000000000a281d62d681b7ce593687b31b3ae67b38fd5ffa7", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}