{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n     constructor ()  {\r\n        address msgSender = payable(_msgSender());\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n        \r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n  \r\n}\r\n\r\ncontract LiangPrivateSale is Ownable {\r\n    IERC20 public token; // The token being sold\r\n    IERC20 public usdt; // The token being sold\r\n    address public wallet; // Address where funds are collected\r\n   \r\n    uint256 public ratePhase1; // Rate of tokens to ether for Phase 1\r\n    uint256 public ratePhase2; // Rate of tokens to ether for Phase 2\r\n    uint256 public ratePhase3; // Rate of tokens to ether for Phase 3\r\n    uint256 public ratePhase4; // Rate of tokens to ether for Phase 4\r\n    \r\n    uint256 public phase1Tokens; // Total tokens available in Phase 1\r\n    uint256 public phase2Tokens; // Total tokens available in Phase 2\r\n    uint256 public phase3Tokens; // Total tokens available in Phase 3\r\n    uint256 public phase4Tokens; // Total tokens available in Phase 4\r\n  \r\n    uint256 public weiRaised; // Total amount of wei raised\r\n    //address  public _usdt=0x55d398326f99059fF775485246999027B3197955;\r\n    address  public _usdt=0x55d398326f99059fF775485246999027B3197955;\r\n\r\n    constructor(\r\n        address _token,\r\n        address _wallet,\r\n        uint256 _ratePhase1,\r\n        uint256 _ratePhase2,\r\n        uint256 _ratePhase3,\r\n        uint256 _ratePhase4,\r\n        uint256 _phase1Tokens,\r\n        uint256 _phase2Tokens,\r\n        uint256 _phase3Tokens,\r\n        uint256 _phase4Tokens\r\n    ) {\r\n        token = IERC20(_token);\r\n        usdt = IERC20(_usdt);\r\n        wallet = _wallet;\r\n        ratePhase1 = _ratePhase1;\r\n        ratePhase2 = _ratePhase2;\r\n        ratePhase3 = _ratePhase3;\r\n        ratePhase4 = _ratePhase4;\r\n        phase1Tokens = _phase1Tokens;\r\n        phase2Tokens = _phase2Tokens;\r\n        phase3Tokens = _phase3Tokens;\r\n        phase4Tokens = _phase4Tokens;  \r\n    }\r\n\r\n    function buyTokens(uint256 _amount) public payable {\r\n        require(_amount > 0, \"You must send some USDT\");\r\n        uint256 tokens;\r\n        usdt.approve(address(this), _amount);\r\n        bool status=usdt.transferFrom(address(msg.sender),address(this), _amount);\r\n        if(status){ \r\n            if (phase1Tokens > 0 ) {\r\n                tokens = (_amount * 10**18) / ratePhase1;\r\n                require(phase1Tokens >= tokens, \"Not enough tokens in Phase 1\");\r\n                phase1Tokens -= tokens;\r\n            } else if(phase2Tokens > 0   ) {\r\n                // Phase 2\r\n                tokens = (_amount * 10**18)  / ratePhase2;\r\n                require(phase2Tokens >=tokens , \"Not enough tokens in Phase 2\");\r\n                phase2Tokens -= tokens;\r\n            }else if(phase3Tokens > 0  ) {\r\n                // Phase 3\r\n                tokens = (_amount * 10**18)  / ratePhase3;\r\n                require(phase3Tokens >=tokens , \"Not enough tokens in Phase 3\");\r\n                phase3Tokens -= tokens;\r\n            }else if(phase4Tokens > 0  ){\r\n                tokens = (_amount * 10**18)  / ratePhase4;\r\n                require(phase4Tokens >=tokens, \"Not enough tokens in Phase 4\");\r\n                phase4Tokens -= tokens;\r\n            }\r\n            token.transfer(msg.sender, tokens);\r\n            weiRaised += _amount;\r\n        }\r\n    }\r\n\r\n    function withdrawFunds() public onlyOwner {\r\n        payable(wallet).transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawtoken(uint256 tokens) public onlyOwner {\r\n        token.transfer(msg.sender, tokens);\r\n    }\r\n    function withdrawusdt(uint256 tokens) public onlyOwner {\r\n        usdt.transfer(msg.sender, tokens);\r\n    }\r\n\r\n    function setRatePhase1(uint256 _rate) public onlyOwner {\r\n        ratePhase1 = _rate;\r\n    }\r\n\r\n    function setRatePhase2(uint256 _rate) public onlyOwner {\r\n        ratePhase2 = _rate;\r\n    }\r\n\r\n    function setRatePhase3(uint256 _rate) public onlyOwner {\r\n        ratePhase3 = _rate;\r\n    }\r\n\r\n    function setRatePhase4(uint256 _rate) public onlyOwner {\r\n        ratePhase4 = _rate;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ratePhase1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratePhase2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratePhase3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratePhase4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase1Tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase2Tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase3Tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_phase4Tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase1Tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase2Tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase3Tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"phase4Tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratePhase1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratePhase2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratePhase3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratePhase4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRatePhase1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRatePhase2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRatePhase3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRatePhase4\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"withdrawtoken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"withdrawusdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LiangPrivateSale", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000fbd94f127427548d4d6727d10cc3a64ee34d8b660000000000000000000000001724c4aeed7238280729ce955ce4f0579505d8520000000000000000000000000000000000000000000000001f399b1438a1000000000000000000000000000000000000000000000000000022b1c8c1227a00000000000000000000000000000000000000000000000000002629f66e0c53000000000000000000000000000000000000000000000000000029a2241af62c0000000000000000000000000000000000000000000000000878678326eac9000000000000000000000000000000000000000000000000000a968163f0a57b400000000000000000000000000000000000000000000000000cb49b44ba602d800000000000000000000000000000000000000000000000000ed2b525841adfc00000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2a9538739c29a52c82bb5f0bee66ad37763ca4924d184cfa8d5cc3f874a34ed5"}