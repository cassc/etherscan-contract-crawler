{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/Minter/IMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IMinter {\\r\\n    function update_period() external returns (uint);\\r\\n    function check() external view returns(bool);\\r\\n    function period() external view returns(uint);\\r\\n    function active_period() external view returns(uint);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/Rebase/IRewardsDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IRewardsDistributor {\\r\\n    function checkpoint_token() external;\\r\\n    function voting_escrow() external view returns(address);\\r\\n    function checkpoint_total_supply() external;\\r\\n    function claimable(uint _tokenId) external view returns (uint);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/VotingEscrow/IVotingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\ninterface IVotingEscrow {\\r\\n\\r\\n    struct Point {\\r\\n        int128 bias;\\r\\n        int128 slope; // # -dweight / dt\\r\\n        uint256 ts;\\r\\n        uint256 blk; // block\\r\\n    }\\r\\n\\r\\n    struct LockedBalance {\\r\\n        int128 amount;\\r\\n        uint end;\\r\\n    }\\r\\n\\r\\n    function create_lock_for(uint _value, uint _lock_duration, address _to) external returns (uint);\\r\\n\\r\\n    function locked(uint id) external view returns(LockedBalance memory);\\r\\n    function tokenOfOwnerByIndex(address _owner, uint _tokenIndex) external view returns (uint);\\r\\n\\r\\n    function token() external view returns (address);\\r\\n    function team() external returns (address);\\r\\n    function epoch() external view returns (uint);\\r\\n    function point_history(uint loc) external view returns (Point memory);\\r\\n    function user_point_history(uint tokenId, uint loc) external view returns (Point memory);\\r\\n    function user_point_epoch(uint tokenId) external view returns (uint);\\r\\n\\r\\n    function ownerOf(uint) external view returns (address);\\r\\n    function isApprovedOrOwner(address, uint) external view returns (bool);\\r\\n    function transferFrom(address, address, uint) external;\\r\\n\\r\\n    function voted(uint) external view returns (bool);\\r\\n    function attachments(uint) external view returns (uint);\\r\\n    function voting(uint tokenId) external;\\r\\n    function abstain(uint tokenId) external;\\r\\n    function attach(uint tokenId) external;\\r\\n    function detach(uint tokenId) external;\\r\\n\\r\\n    function checkpoint() external;\\r\\n    function deposit_for(uint tokenId, uint value) external;\\r\\n\\r\\n    function balanceOfNFT(uint _id) external view returns (uint);\\r\\n    function balanceOfNFTAt(uint _tokenId, uint _t) external view returns (uint);\\r\\n    function balanceOfAtNFT(uint _tokenId, uint _block) external view returns (uint);\\r\\n    function balanceOf(address _owner) external view returns (uint);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function supply() external view returns (uint);\\r\\n\\r\\n\\r\\n    function decimals() external view returns(uint8);\\r\\n}\"\r\n    },\r\n    \"contracts/lib/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nlibrary Math {\\r\\n    function max(uint a, uint b) internal pure returns (uint) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n    function min(uint a, uint b) internal pure returns (uint) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n    function sqrt(uint y) internal pure returns (uint z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint x = y / 2 + 1;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n    }\\r\\n    function cbrt(uint256 n) internal pure returns (uint256) { unchecked {\\r\\n        uint256 x = 0;\\r\\n        for (uint256 y = 1 << 255; y > 0; y >>= 3) {\\r\\n            x <<= 1;\\r\\n            uint256 z = 3 * x * (x + 1) + 1;\\r\\n            if (n / y >= z) {\\r\\n                n -= y * z;\\r\\n                x += 1;\\r\\n            }\\r\\n        }\\r\\n        return x;\\r\\n    }}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Rebase/RewardsDistributor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\npragma solidity 0.8.13;\\r\\n\\r\\nimport '../lib/Math.sol';\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport '../interfaces/Rebase/IRewardsDistributor.sol';\\r\\nimport '../interfaces/VotingEscrow/IVotingEscrow.sol';\\r\\nimport '../interfaces/Minter/IMinter.sol';\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\n\\r\\n/*\\r\\n\\r\\n@title Curve Fee Distribution modified for ve(3,3) emissions\\r\\n@author Thena Finance, Prometheus\\r\\n@license MIT\\r\\n\\r\\n*/\\r\\n\\r\\ncontract RewardsDistributor is ReentrancyGuard, IRewardsDistributor {\\r\\n\\r\\n    event CheckpointToken(\\r\\n        uint time,\\r\\n        uint tokens\\r\\n    );\\r\\n\\r\\n    event Claimed(\\r\\n        uint tokenId,\\r\\n        uint amount,\\r\\n        uint claim_epoch, //timestamp\\r\\n        uint max_epoch\\r\\n    );\\r\\n\\r\\n    uint constant WEEK = 7 * 86400;\\r\\n\\r\\n    uint public start_time;\\r\\n    uint public last_token_time;\\r\\n    uint public last_week;\\r\\n    uint public total_distributed;\\r\\n    uint public token_claimed;\\r\\n    uint public time_cursor;\\r\\n\\r\\n\\r\\n    uint[1000000000000000] public tokens_per_week;\\r\\n    uint[1000000000000000] public ve_supply;\\r\\n\\r\\n    address public owner;\\r\\n    address public voting_escrow;\\r\\n    address public token;\\r\\n    address public depositor;\\r\\n\\r\\n    \\r\\n    mapping(uint => uint) public time_cursor_of;\\r\\n    mapping(address => bool) public lockAddress;       // remove permissionless claim for an address owner\\r\\n    mapping(uint => uint) internal time_to_block;\\r\\n\\r\\n  \\r\\n\\r\\n    constructor(address _voting_escrow) {\\r\\n        uint _t = block.timestamp / WEEK * WEEK;\\r\\n        last_token_time = _t;\\r\\n        time_cursor = _t;\\r\\n        \\r\\n        address _token = IVotingEscrow(_voting_escrow).token();\\r\\n        token = _token;\\r\\n\\r\\n        voting_escrow = _voting_escrow;\\r\\n\\r\\n        depositor = address(0x86069FEb223EE303085a1A505892c9D4BdBEE996);\\r\\n        start_time = _t;\\r\\n\\r\\n        owner = msg.sender;\\r\\n\\r\\n        require(IERC20(_token).approve(_voting_escrow, type(uint).max));\\r\\n    }\\r\\n\\r\\n    function timestamp() public view returns (uint) {\\r\\n        return block.timestamp / WEEK * WEEK;\\r\\n    }\\r\\n\\r\\n    // checkpoint the total supply at the current timestamp. Called by depositor\\r\\n    function checkpoint_total_supply() external {\\r\\n        assert(msg.sender == depositor || msg.sender == owner);\\r\\n        _checkpoint_total_supply();\\r\\n    }\\r\\n    function _checkpoint_total_supply() internal {\\r\\n        address ve = voting_escrow;\\r\\n        uint t = time_cursor;\\r\\n        uint rounded_timestamp = block.timestamp / WEEK * WEEK;\\r\\n        IVotingEscrow(ve).checkpoint();\\r\\n\\r\\n        for (uint i = 0; i < 20; i++) {\\r\\n            if (t > rounded_timestamp) {\\r\\n                break;\\r\\n            } else {\\r\\n                uint epoch = _find_timestamp_epoch(ve, t);\\r\\n                IVotingEscrow.Point memory pt = IVotingEscrow(ve).point_history(epoch);\\r\\n                int128 dt = 0;\\r\\n                if (t > pt.ts) {\\r\\n                    dt = int128(int256(t - pt.ts));\\r\\n                }\\r\\n                ve_supply[t] = Math.max(uint(int256(pt.bias - pt.slope * dt)), 0);\\r\\n            }\\r\\n            t += WEEK;\\r\\n        }\\r\\n\\r\\n        time_cursor = t;\\r\\n    }\\r\\n\\r\\n    \\r\\n    function _find_timestamp_epoch(address ve, uint _timestamp) internal view returns (uint) {\\r\\n        uint _min = 0;\\r\\n        uint _max = IVotingEscrow(ve).epoch();\\r\\n        for (uint i = 0; i < 128; i++) {\\r\\n            if (_min >= _max) break;\\r\\n            uint _mid = (_min + _max + 2) / 2;\\r\\n            IVotingEscrow.Point memory pt = IVotingEscrow(ve).point_history(_mid);\\r\\n            if (pt.ts <= _timestamp) {\\r\\n                _min = _mid;\\r\\n            } else {\\r\\n                _max = _mid - 1;\\r\\n            }\\r\\n        }\\r\\n        return _min;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    // checkpoint the token to distribute for the last epoch\\r\\n    function checkpoint_token() external {\\r\\n        assert(msg.sender == depositor || msg.sender == owner);\\r\\n        _checkpoint_token();\\r\\n    }\\r\\n\\r\\n    function _checkpoint_token() internal {\\r\\n\\r\\n        last_week = block.timestamp / WEEK * WEEK;\\r\\n        time_to_block[last_week] = block.number;\\r\\n        last_token_time = block.timestamp;\\r\\n        \\r\\n        uint token_balance = IERC20(token).balanceOf(address(this));\\r\\n        uint diff = total_distributed - token_claimed;\\r\\n        uint to_distribute = token_balance - diff;\\r\\n        \\r\\n        tokens_per_week[last_week] += to_distribute;\\r\\n        total_distributed += to_distribute;\\r\\n\\r\\n        emit CheckpointToken(block.timestamp, to_distribute);\\r\\n    }\\r\\n  \\r\\n\\r\\n    \\r\\n    function claimable(uint _tokenId) external view returns(uint) {\\r\\n        uint t = time_cursor_of[_tokenId];\\r\\n        if(t == 0) t = start_time;\\r\\n        uint _last_week = last_week;\\r\\n        uint to_claim = 0;\\r\\n        for(uint i = 0; i < 100; i++){\\r\\n            if(t > _last_week) break;\\r\\n            to_claim += _toClaim(_tokenId, t);\\r\\n            t += WEEK;\\r\\n        }        \\r\\n        return to_claim;\\r\\n    }\\r\\n        \\r\\n\\r\\n    function claim_many(uint[] memory tokenIds) external nonReentrant returns(bool) {\\r\\n        require(tokenIds.length <= 25);\\r\\n        for(uint i = 0; i < tokenIds.length; i++){\\r\\n            _claim(tokenIds[i]);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function claim(uint _tokenId) external nonReentrant returns(uint){\\r\\n        return _claim(_tokenId);\\r\\n    }\\r\\n\\r\\n    function _claim(uint _tokenId) internal returns (uint) {\\r\\n        address _owner = IVotingEscrow(voting_escrow).ownerOf(_tokenId);\\r\\n\\r\\n        // if lockAddress then check if msg.sender is allowed to call claim \\r\\n        if(lockAddress[_owner]) require(IVotingEscrow(voting_escrow).isApprovedOrOwner(msg.sender, _tokenId), 'not approved');\\r\\n\\r\\n        IVotingEscrow.LockedBalance memory _locked = IVotingEscrow(voting_escrow).locked(_tokenId);\\r\\n        require(_locked.amount > 0, 'No existing lock found');\\r\\n        require(_locked.end > block.timestamp, 'Cannot add to expired lock. Withdraw');\\r\\n\\r\\n        uint t = time_cursor_of[_tokenId];\\r\\n        if(t < start_time) t = start_time;\\r\\n        uint _last_week = last_week;\\r\\n        uint to_claim = 0;\\r\\n\\r\\n        for(uint i = 0; i < 100; i++){\\r\\n            if(t > _last_week) break;\\r\\n            to_claim += _toClaim(_tokenId, t);\\r\\n            t += WEEK;\\r\\n        }        \\r\\n\\r\\n        if(to_claim > 0) IVotingEscrow(voting_escrow).deposit_for(_tokenId, to_claim);\\r\\n        time_cursor_of[_tokenId] = t;\\r\\n        token_claimed += to_claim;\\r\\n\\r\\n        emit Claimed(_tokenId, to_claim, last_week, _find_timestamp_epoch(voting_escrow, last_week));\\r\\n\\r\\n        return to_claim;\\r\\n    }\\r\\n\\r\\n    function _toClaim(uint id, uint t) internal view returns(uint to_claim) {\\r\\n\\r\\n        IVotingEscrow.Point memory userData = IVotingEscrow(voting_escrow).user_point_history(id,1);\\r\\n\\r\\n        if(ve_supply[t] == 0) return 0;\\r\\n        if(tokens_per_week[t] == 0) return 0;\\r\\n        if(userData.ts > t) return 0;\\r\\n\\r\\n        uint id_bal = IVotingEscrow(voting_escrow).balanceOfAtNFT(id, time_to_block[t]);\\r\\n        uint share =  id_bal * 1e18 / ve_supply[t];\\r\\n        \\r\\n        to_claim = share * tokens_per_week[t] / 1e18;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    \\r\\n    // prevent to claim rebase from any non-auth source. If true then require isApprovedOrOwner(msg.sender, _tokenId). \\r\\n    // Saved per owner address to avoid recall after split/merge\\r\\n    function _lockAddress(address caller) external {\\r\\n        require(msg.sender == caller || msg.sender == owner);\\r\\n        lockAddress[caller] = true;\\r\\n    }\\r\\n    function _unlockAddress(address caller) external {\\r\\n        require(msg.sender == caller || msg.sender == owner);\\r\\n        lockAddress[caller] = false;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    /*  Owner Functions */\\r\\n\\r\\n    function setDepositor(address _depositor) external {\\r\\n        require(msg.sender == owner);\\r\\n        depositor = _depositor;\\r\\n    }\\r\\n\\r\\n    function setOwner(address _owner) external {\\r\\n        require(msg.sender == owner);\\r\\n        owner = _owner;\\r\\n    }\\r\\n\\r\\n    function increaseOrRemoveAllowances(bool what) external {\\r\\n        require(msg.sender == owner);\\r\\n        what == true ? IERC20(token).approve(voting_escrow, type(uint).max) : IERC20(token).approve(voting_escrow, 0);\\r\\n    }\\r\\n\\r\\n    function withdrawERC20(address _token) external {\\r\\n        require(msg.sender == owner);\\r\\n        require(_token != address(0));\\r\\n        uint256 _balance = IERC20(_token).balanceOf(address(this));\\r\\n        IERC20(_token).transfer(msg.sender, _balance);\\r\\n    }\\r\\n\\r\\n\\r\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voting_escrow\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"CheckpointToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claim_epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max_epoch\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"_lockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"_unlockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint_token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint_total_supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claim_many\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"what\",\"type\":\"bool\"}],\"name\":\"increaseOrRemoveAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_token_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last_week\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"setDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"time_cursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"time_cursor_of\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens_per_week\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_distributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ve_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voting_escrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RewardsDistributor", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000fbbf371c9b0b994eebfcc977cef603f7f31c070d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}