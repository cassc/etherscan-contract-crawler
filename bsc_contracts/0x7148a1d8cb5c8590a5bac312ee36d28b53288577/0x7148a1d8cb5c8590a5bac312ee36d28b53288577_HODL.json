{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n//\r\n//   __    __     ______     _____       __\r\n//  |  |  |  |   /  __  \\   |      \\    |  |\r\n//  |  |__|  |  |  |  |  |  |   _   \\   |  |\r\n//  |   __   |  |  |  |  |  |  |_)   |  |  |\r\n//  |  |  |  |  |  `--'  |  |       /   |  |____\r\n//  |__|  |__|   \\______/   |_____ /    |_______|\r\n//\r\n//\r\n// Website: hodltoken.net\r\n// Telegram: t.me/hodlinvestorgroup\r\n// Twitter: twitter.com/hodl_official\r\n//\r\n//\r\npragma solidity 0.8.19;\r\n\r\ninterface VRFCoordinatorV2Interface {\r\n  /**\r\n   * @notice Get configuration relevant for making requests\r\n   * @return minimumRequestConfirmations global min for request confirmations\r\n   * @return maxGasLimit global max for request gas limit\r\n   * @return s_provingKeyHashes list of registered key hashes\r\n   */\r\n  function getRequestConfig()\r\n    external\r\n    view\r\n    returns (\r\n      uint16,\r\n      uint32,\r\n      bytes32[] memory\r\n    );\r\n\r\n  /**\r\n   * @notice Request a set of random words.\r\n   * @param keyHash - Corresponds to a particular oracle job which uses\r\n   * that key for generating the VRF proof. Different keyHash's have different gas price\r\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\r\n   * @param subId  - The ID of the VRF subscription. Must be funded\r\n   * with the minimum subscription balance required for the selected keyHash.\r\n   * @param minimumRequestConfirmations - How many blocks you'd like the\r\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\r\n   * for why you may want to request more. The acceptable range is\r\n   * [minimumRequestBlockConfirmations, 200].\r\n   * @param callbackGasLimit - How much gas you'd like to receive in your\r\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\r\n   * may be slightly less than this amount because of gas used calling the function\r\n   * (argument decoding etc.), so you may need to request slightly more than you expect\r\n   * to have inside fulfillRandomWords. The acceptable range is\r\n   * [0, maxGasLimit]\r\n   * @param ticketsToDraw - The number of uint256 random values you'd like to receive\r\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\r\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\r\n   * @return requestId - A unique identifier of the request. Can be used to match\r\n   * a request to a response in fulfillRandomWords.\r\n   */\r\n  function requestRandomWords(\r\n    bytes32 keyHash,\r\n    uint64 subId,\r\n    uint16 minimumRequestConfirmations,\r\n    uint32 callbackGasLimit,\r\n    uint32 ticketsToDraw\r\n  ) external returns (uint256 requestId);\r\n\r\n  /**\r\n   * @notice Create a VRF subscription.\r\n   * @return subId - A unique subscription id.\r\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\r\n   * @dev Note to fund the subscription, use transferAndCall. For example\r\n   * @dev  LINKTOKEN.transferAndCall(\r\n   * @dev    address(COORDINATOR),\r\n   * @dev    amount,\r\n   * @dev    abi.encode(subId));\r\n   */\r\n  function createSubscription() external returns (uint64 subId);\r\n\r\n  /**\r\n   * @notice Get a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @return balance - LINK balance of the subscription in juels.\r\n   * @return reqCount - number of requests for this subscription, determines fee tier.\r\n   * @return owner - owner of the subscription.\r\n   * @return consumers - list of consumer address which are able to use this subscription.\r\n   */\r\n  function getSubscription(uint64 subId)\r\n    external\r\n    view\r\n    returns (\r\n      uint96 balance,\r\n      uint64 reqCount,\r\n      address owner,\r\n      address[] memory consumers\r\n    );\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @param newOwner - proposed new owner of the subscription\r\n   */\r\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\r\n\r\n  /**\r\n   * @notice Request subscription owner transfer.\r\n   * @param subId - ID of the subscription\r\n   * @dev will revert if original owner of subId has\r\n   * not requested that msg.sender become the new owner.\r\n   */\r\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\r\n\r\n  /**\r\n   * @notice Add a consumer to a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - New consumer which can use the subscription\r\n   */\r\n  function addConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Remove a consumer from a VRF subscription.\r\n   * @param subId - ID of the subscription\r\n   * @param consumer - Consumer to remove from the subscription\r\n   */\r\n  function removeConsumer(uint64 subId, address consumer) external;\r\n\r\n  /**\r\n   * @notice Cancel a subscription\r\n   * @param subId - ID of the subscription\r\n   * @param to - Where to send the remaining LINK to\r\n   */\r\n  function cancelSubscription(uint64 subId, address to) external;\r\n\r\n  /*\r\n   * @notice Check to see if there exists a request commitment consumers\r\n   * for all consumers and keyhashes for a given sub.\r\n   * @param subId - ID of the subscription\r\n   * @return true if there exists at least one unfulfilled request for the subscription, false\r\n   * otherwise.\r\n   */\r\n  function pendingRequestExists(uint64 subId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IWBNB {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function allowance(address, address) external view returns (uint256);\r\n\r\n    receive() external payable;\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 wad) external;\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function approve(address guy, uint256 wad) external returns (bool);\r\n\r\n    function transfer(address dst, uint256 wad) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint256 wad\r\n    ) external returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        require(\r\n            initializing || isConstructor() || !initialized,\r\n            \"Contract instance has already been initialized\"\r\n        );\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        assembly {\r\n            cs := extcodesize(self)\r\n        }\r\n        return cs == 0;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context, Initializable {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {}\r\n\r\n    function initOwner(address owner_) public initializer {\r\n        _owner = owner_;\r\n        emit OwnershipTransferred(address(0), owner_);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IPancakePair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountETHDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountETH);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n    /*\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountETH);\r\n    */\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/protocols/bep/Utils.sol\r\nlibrary Utils {\r\n\r\n    function calculateBNBReward(\r\n        uint256 currentBalance,\r\n        uint256 currentBNBPool,\r\n        uint256 totalSupply,\r\n        uint256 rewardHardcap\r\n    ) public pure returns (uint256) {\r\n        uint256 bnbPool = currentBNBPool > rewardHardcap ? rewardHardcap : currentBNBPool;\r\n        return bnbPool * currentBalance / totalSupply;\r\n    }\r\n\r\n    function calculateTopUpClaim(\r\n        uint256 currentRecipientBalance,\r\n        uint256 basedRewardCycleBlock,\r\n        uint256 threshHoldTopUpRate,\r\n        uint256 amount\r\n    ) public pure returns (uint256) {\r\n        uint256 rate = amount * 100 / currentRecipientBalance; \r\n\r\n        if (rate >= threshHoldTopUpRate) {\r\n            uint256 incurCycleBlock = basedRewardCycleBlock * rate / 100;\r\n\r\n            if (incurCycleBlock >= basedRewardCycleBlock) {\r\n                incurCycleBlock = basedRewardCycleBlock;\r\n            }\r\n\r\n            return incurCycleBlock;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function swapTokensForEth(address routerAddress, uint256 tokenAmount)\r\n        public\r\n    {\r\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(routerAddress);\r\n\r\n        // generate the pancake pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = pancakeRouter.WETH();\r\n\r\n        // make the swap\r\n        pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapETHForTokens(\r\n        address routerAddress,\r\n        address recipient,\r\n        uint256 ethAmount\r\n    ) public {\r\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(routerAddress);\r\n\r\n        // generate the pancake pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = pancakeRouter.WETH();\r\n        path[1] = address(this);\r\n\r\n        // make the swap\r\n        pancakeRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: ethAmount\r\n        }(\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(recipient),\r\n            block.timestamp + 360\r\n        );\r\n    }\r\n\r\n    function swapTokensForTokens(\r\n        address routerAddress,\r\n        address recipient,\r\n        uint256 ethAmount\r\n    ) public {\r\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(routerAddress);\r\n\r\n        // generate the pancake pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = pancakeRouter.WETH();\r\n        path[1] = address(this);\r\n\r\n        // make the swap\r\n        pancakeRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            ethAmount, // wbnb input\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(recipient),\r\n            block.timestamp + 360\r\n        );\r\n    }\r\n\r\n    function getAmountsout(uint256 amount, address routerAddress)\r\n        public\r\n        view\r\n        returns (uint256 _amount)\r\n    {\r\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(routerAddress);\r\n\r\n        // generate the pancake pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = pancakeRouter.WETH();\r\n        path[1] = address(this);\r\n\r\n        // fetch current rate\r\n        uint256[] memory amounts = pancakeRouter.getAmountsOut(amount, path);\r\n        return amounts[1];\r\n    }\r\n\r\n    function addLiquidity(\r\n        address routerAddress,\r\n        address owner,\r\n        uint256 tokenAmount,\r\n        uint256 ethAmount\r\n    ) public {\r\n        IPancakeRouter02 pancakeRouter = IPancakeRouter02(routerAddress);\r\n\r\n        // add the liquidity\r\n        pancakeRouter.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner,\r\n            block.timestamp + 360\r\n        );\r\n    }\r\n    \r\n    /**\r\n    * @dev Returns the stacked amount of rewards. \r\n    *\r\n    * First add reflections to the amount of stacked tokens. If the stackingRate is 0\r\n    * stacking was started before refelctions were implemented into the contract. \r\n    * \r\n    * Then calculate the reward and check with the stacking limit.\r\n    *\r\n    *   \"Scared money don't make money\" - Billy Napier \r\n    */\r\n    function calcStacked(HODLStruct.stacking memory tmpstacking, uint256 totalsupply, uint256 currentRate, uint256 stackingRate) public view returns (uint256) {\r\n        uint256 reward;\r\n        uint256 amount;\r\n\r\n        uint256 stackedTotal = 1E6 + (block.timestamp-tmpstacking.tsStartStacking) * 1E6 / tmpstacking.cycle; \r\n        uint256 stacked = stackedTotal / 1E6;\r\n        uint256 rest = stackedTotal - (stacked * 1E6);\r\n        \r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        if (stackingRate > 0)\r\n        {\r\n            amount = tmpstacking.amount * stackingRate / currentRate;\r\n        } else {\r\n            amount = tmpstacking.amount;\r\n        }\r\n        \r\n        if (initialBalance >= tmpstacking.hardcap)\r\n        {\r\n            reward = uint256(tmpstacking.hardcap) * amount / totalsupply * stackedTotal / 1E6;\r\n            if (reward >= initialBalance) reward = 0;\r\n\r\n            if (reward == 0 || initialBalance - reward < tmpstacking.hardcap) \r\n            {\r\n                reward = initialBalance - calcReward(initialBalance, totalsupply /amount, stacked, 15);\r\n                reward += (initialBalance - reward) * amount / totalsupply * rest / 1E6; \r\n            }\r\n        } else {\r\n            reward = initialBalance - calcReward(initialBalance, totalsupply / amount, stacked, 15); \r\n            reward += (initialBalance - reward) * amount / totalsupply * rest / 1E6; \r\n        }\r\n\r\n        return reward > tmpstacking.stackingLimit ? uint256(tmpstacking.stackingLimit) : reward;\r\n    }\r\n\r\n    /** \r\n    * @dev Computes `k * (1+1/q) ^ N`, with precision `p`. The higher\r\n    * the precision, the higher the gas cost. To prevent overflows devide\r\n    * exponent into 3 exponents with max n^10\r\n    */\r\n    function calcReward(uint256 coefficient, uint256 factor, uint256 exponent, uint256 precision) public pure returns (uint256) {\r\n        \r\n        precision = exponent < precision ? exponent : precision;\r\n        if (exponent > 100) {\r\n            precision = 30;\r\n        }\r\n        if (exponent > 200) exponent = 200;\r\n\r\n        uint256 reward = coefficient;\r\n        uint256 calcExponent = exponent * (exponent-1) / 2;\r\n        uint256 calcFactor_1 = 1;\r\n        uint256 calcFactor_2 = 1;\r\n        uint256 calcFactor_3 = 1;\r\n        uint256 i;\r\n\r\n        for (i = 2; i <= precision; i += 2){\r\n            if (i > 20) {\r\n                calcFactor_1 = factor**10;\r\n                calcFactor_2 = calcFactor_1;\r\n                 calcFactor_3 = factor**(i-20);\r\n            }\r\n            else if (i > 10) {\r\n                calcFactor_1 = factor**10;\r\n                calcFactor_2 = factor**(i-10);\r\n                calcFactor_3 = 1;\r\n            }\r\n            else {\r\n                calcFactor_1 = factor**i;\r\n                calcFactor_2 = 1;\r\n                calcFactor_3 = 1;\r\n            }\r\n            reward += coefficient * calcExponent / calcFactor_1 / calcFactor_2 / calcFactor_3;\r\n            calcExponent = i == exponent ? 0 : calcExponent * (exponent-i) * (exponent-i-1) / (i+1) / (i+2);  \r\n        }\r\n        \r\n        calcExponent = exponent;\r\n\r\n        for (i = 1; i <= precision; i += 2){\r\n            if (i > 20) {\r\n                calcFactor_1 = factor**10;\r\n                calcFactor_2 = calcFactor_1;\r\n                calcFactor_3 = factor**(i-20);\r\n            }\r\n            else if (i > 10) {\r\n                calcFactor_1 = factor**10;\r\n                calcFactor_2 = factor**(i-10);\r\n                calcFactor_3 = 1;\r\n            }\r\n            else {\r\n                calcFactor_1 = factor**i;\r\n                calcFactor_2 = 1;\r\n                calcFactor_3 = 1;\r\n            }\r\n            reward -= coefficient * calcExponent / calcFactor_1 / calcFactor_2 / calcFactor_3;\r\n            calcExponent = i == exponent ? 0 : calcExponent * (exponent-i) * (exponent-i-1) / (i+1) / (i+2);  \r\n        }\r\n\r\n        return reward;\r\n    }\r\n\r\n    function _getValues(uint256 tAmount, uint256 currentRate, uint256 _taxFee, uint256 _liquidityFee)\r\n        public\r\n        pure\r\n        returns (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity\r\n        )\r\n    {\r\n        (\r\n            tTransferAmount,\r\n            tFee,\r\n            tLiquidity\r\n        ) = _getTValues(tAmount, _taxFee, _liquidityFee);\r\n        (rAmount, rTransferAmount, rFee) = _getRValues(\r\n            tAmount,\r\n            tFee,\r\n            tLiquidity,\r\n            currentRate\r\n        );\r\n        return (\r\n            rAmount,\r\n            rTransferAmount,\r\n            rFee,\r\n            tTransferAmount,\r\n            tFee,\r\n            tLiquidity\r\n        );\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount,uint256 _taxFee, uint256 _liquidityFee)\r\n        private\r\n        pure\r\n        returns (\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity\r\n        )\r\n    {      \r\n        tFee = tAmount * _taxFee / (10**3); \r\n        tLiquidity = tAmount * _liquidityFee / (10**3); \r\n        tTransferAmount = tAmount - tFee - tLiquidity; \r\n        return (tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 tLiquidity,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 rAmount = tAmount * currentRate; \r\n        uint256 rFee = tFee * currentRate;\r\n        uint256 rLiquidity = tLiquidity * currentRate; \r\n        uint256 rTransferAmount = rAmount - rFee - rLiquidity;\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function getBonus(address wallet, address HodlHands, uint256 tokens, HODLStruct.HHBonus[5] memory HHBonus) public view returns (uint256) {\r\n\r\n        uint256 amountHH = IWBNB(payable(address(HodlHands))).balanceOf(wallet);\r\n        uint256 bonusTokens = 0;\r\n\r\n        if (amountHH > 0) {\r\n            if (amountHH >= HHBonus[4].threshold) {\r\n                bonusTokens = tokens * HHBonus[4].bonus / 1000;\r\n            } else if (amountHH >= HHBonus[3].threshold) {\r\n                bonusTokens = tokens * HHBonus[3].bonus / 1000;\r\n            } else if (amountHH >= HHBonus[2].threshold) {\r\n                bonusTokens = tokens * HHBonus[2].bonus / 1000;\r\n            } else if (amountHH >= HHBonus[1].threshold) {\r\n                bonusTokens = tokens * HHBonus[1].bonus / 1000;\r\n            } else if (amountHH >= HHBonus[0].threshold) {\r\n                bonusTokens = tokens * HHBonus[0].bonus / 1000;\r\n            }\r\n        }\r\n\r\n        return bonusTokens;\r\n    }\r\n\r\n}\r\n\r\nlibrary PancakeLibrary {\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB)\r\n        internal\r\n        pure\r\n        returns (address token0, address token1)\r\n    {\r\n        require(tokenA != tokenB, \"PancakeLibrary: IDENTICAL_ADDRESSES\");\r\n        (token0, token1) = tokenA < tokenB\r\n            ? (tokenA, tokenB)\r\n            : (tokenB, tokenA);\r\n        require(token0 != address(0), \"PancakeLibrary: ZERO_ADDRESS\");\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB\r\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\r\n        (address token0, ) = sortTokens(tokenA, tokenB);\r\n        (uint256 reserve0, uint256 reserve1, ) = IPancakePair(\r\n            IPancakeFactory(factory).getPair(tokenA, tokenB)\r\n        ).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0\r\n            ? (reserve0, reserve1)\r\n            : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) internal pure returns (uint256 amountETH) {\r\n        require(amountA > 0, \"PancakeLibrary: INSUFFICIENT_AMOUNT\");\r\n        require(\r\n            reserveA > 0 && reserveB > 0,\r\n            \"PancakeLibrary: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        amountETH = amountA * reserveB / reserveA;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier isHuman() {\r\n        require(tx.origin == msg.sender, \"sorry humans only\");\r\n        _;\r\n    }\r\n}\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract HODL is Context, IBEP20, Ownable, ReentrancyGuard {\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isExcluded;\r\n    mapping(address => bool) private _isExcludedFromMaxTx;\r\n\r\n    // trace BNB claimed rewards and reinvest value\r\n    mapping(address => uint256) public userClaimedBNB;\r\n    uint256 public totalClaimedBNB;\r\n\r\n    mapping(address => uint256) private userreinvested;\r\n    uint256 private totalreinvested;\r\n\r\n    // trace gas fees distribution\r\n    uint256 private totalgasfeesdistributed;\r\n    mapping(address => uint256) private userrecievedgasfees;\r\n\r\n    address private deadAddress;\r\n\r\n    address[] private _excluded;\r\n\r\n    uint256 private MAX;\r\n    uint256 private _tTotal;\r\n    uint256 private _rTotal;\r\n    uint256 private _tFeeTotal;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    IPancakeRouter02 private pancakeRouter;\r\n    address private pancakePair;\r\n\r\n    bool private _inSwapAndLiquify;\r\n\r\n    uint256 private daySeconds;\r\n\r\n    struct WalletAllowance {\r\n        uint256 timestamp;\r\n        uint256 amount;\r\n    }\r\n\r\n    mapping(address => WalletAllowance) userWalletAllowance;\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    event ClaimBNBSuccessfully(\r\n        address recipient,\r\n        uint256 ethReceived,\r\n        uint256 nextAvailableClaimDate\r\n    );\r\n\r\n    modifier lockTheSwap() {\r\n        _inSwapAndLiquify = true;\r\n        _;\r\n        _inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor() {}\r\n\r\n    mapping(address => bool) isBlacklisted;\r\n    \r\n    function getPancakePair() public view returns (address) {\r\n        return pancakePair;\r\n    }\r\n\r\n    function getPancakeRouter() public view returns (IPancakeRouter02) {\r\n        return pancakeRouter;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return _rOwned[account] / getRate();\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool){\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256){\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool){\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromReflections(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n    \r\n    \r\n    function excludeFromReflections(address account) external onlyOwner {\r\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Pancake router.');\r\n        require(_excluded.length < 100, \"Err\");\r\n        require(!_isExcluded[account], \"Err\");\r\n        if (_rOwned[account] > 0) {\r\n            _tOwned[account] = _rOwned[account] / getRate();\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReflections(address account) external onlyOwner {\r\n        require(_isExcluded[account], \"Err\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    function includeExcludeFromFee(address account, bool _enable) external onlyOwner {\r\n        _isExcludedFromFee[account] = _enable;\r\n    }\r\n\r\n    //to receive BNB from pancakeRouter when swapping\r\n    receive() external payable {}\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal - rFee; \r\n        _tFeeTotal = _tFeeTotal + tFee; \r\n    }\r\n\r\n    function getRate() public view returns (uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            rSupply = rSupply - _rOwned[_excluded[i]]; \r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal / _tTotal) return _rTotal / _tTotal;\r\n        return rSupply / tSupply; \r\n    }\r\n\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 rLiquidity = tLiquidity * getRate();\r\n        _rOwned[address(this)] = _rOwned[address(this)] + rLiquidity;\r\n        if (_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)] + tLiquidity;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) external view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0) && spender != address(0), \"Err\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0) && to != address(0), \"Err\");\r\n        require(amount > 0, \"Err\");\r\n            //reinvest\r\n            if (to == reinvestWallet && pairAddresses[from]) {\r\n                uint256 rAmount = amount * getRate();\r\n                _rOwned[reinvestWallet] += rAmount;\r\n                _rOwned[from] -= rAmount; \r\n            } else if (poolAddresses[to] || poolAddresses[from]) {\r\n                topUpClaimCycleAfterTransfer(from, to, amount);\r\n                uint256 rAmount = amount * getRate();\r\n                _rOwned[to] += rAmount;\r\n                _rOwned[from] -= rAmount;\r\n                if (_isExcluded[from]) {\r\n                    _tOwned[from] -= amount;\r\n                } \r\n                if (_isExcluded[to]) {\r\n                    _tOwned[to] += amount;\r\n                }\t     \r\n                emit Transfer(from, to, amount);\r\n            } else {\r\n                //indicates if fee should be deducted from transfer\r\n                bool takeFee = !(\r\n                    _isExcludedFromFee[from] ||\r\n                    _isExcludedFromFee[to] ||\r\n                    reflectionFeesDisabled\r\n                );\r\n        \r\n                if (!(vbAddresses[to] || vbAddresses[from]))\r\n                {\r\n                    // take sell fee\r\n                    if (\r\n                        pairAddresses[to] &&\r\n                        from != address(this) &&\r\n                        from != owner()\r\n                    ) {\r\n                        /*\r\n                        *   \"If you can't hold, you won't be rich\" - CZ\r\n                        */\r\n                        ensureMaxTxAmount(from, to, amount);          \r\n                        \r\n                        if (!_inSwapAndLiquify) {\r\n                            swapAndLiquify(from, to);\r\n                        }\r\n                    }              \r\n                    // take buy fee\r\n                    else if (\r\n                        pairAddresses[from] && to != address(this) && to != owner()\r\n                    ) {\r\n                        uint256 tBonusTokens = Utils.getBonus(to, HodlHands, amount, HHBonus);\r\n                        if (tBonusTokens > 0) {\r\n                            uint256 rBonusTokens = tBonusTokens * getRate();\r\n                            _rOwned[address(this)] -= rBonusTokens;\r\n                            _rOwned[to] += rBonusTokens;\r\n\r\n                            if (_isExcluded[to]) _tOwned[to] += tBonusTokens;\r\n                            emit Transfer(address(this),to,tBonusTokens);\r\n                        }  \r\n                    }\r\n                }\r\n                //transfer amount, it will take tax, burn, liquidity fee\r\n                _tokenTransfer(from, to, amount, takeFee);\r\n            }      \r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) private {\r\n        if (!takeFee) {\r\n            _taxFee = 0;\r\n            _liquidityFee = 0;\r\n        } else {\r\n             _taxFee = 10;\r\n            _liquidityFee = 40;\r\n        }\r\n\r\n        // top up claim cycle for recipient and sender\r\n        topUpClaimCycleAfterTransfer(sender, recipient, amount);\r\n\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLiquidity\r\n        ) = Utils._getValues(amount, getRate(), _taxFee, _liquidityFee);\r\n        _rOwned[sender] = _rOwned[sender] - rAmount; \r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount; \r\n\r\n        if (_isExcluded[sender]) {\r\n            _tOwned[sender] = _tOwned[sender] - amount; \r\n        } \r\n        if (_isExcluded[recipient]) {\r\n            _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n        } \r\n\r\n        _takeLiquidity(tLiquidity);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n\r\n    }\r\n\r\n    function getMaxTxAmount() public view returns (uint256) {\r\n        return _maxTxAmount;\r\n    }\r\n\r\n    // Innovation for protocol by HODL Team\r\n    uint256 public rewardCycleBlock;\r\n    uint256 public maxAmountToSell;\r\n    uint256 public threshHoldTopUpRate;\r\n    uint256 private _maxTxAmount;\r\n    uint256 public bnbStackingLimit;\r\n    mapping(address => uint256) public nextAvailableClaimDate;\r\n    bool public swapAndLiquifyEnabled;\r\n    uint256 private reserve_3;\r\n    uint256 private rateCorrection;\r\n\r\n    bool public reflectionFeesDisabled;\r\n\r\n    uint256 private _taxFee;\r\n    uint256 private reserve_4;\r\n\r\n    // Lottery removed\r\n    uint256 private LotteryThreshold;\r\n    uint256 private totalLotteryTickets;\r\n    uint256 private LotteryWinningChance;\r\n    uint256 private pendingLotteryTickets;\r\n    uint256 private ticketsToDraw;\r\n    uint256 private AddCommunityTicket;\r\n    uint256 private communityTicketsWinningChance;\r\n    uint256 private burnPercentage;\r\n    uint256 private requestedRandomNumbers;\r\n    //Chainlink disabled\r\n    uint256 private callbackGasLimit;\r\n    uint256 private requestConfirmations;\r\n    uint256 private s_subscriptionId;\r\n\r\n    // Tax variables removed\r\n    uint256 private reserve_5;\r\n    uint256 private reserve_6;\r\n    uint256 private reserve_7;\r\n\r\n    uint256 public claimBNBLimit;\r\n    uint256 public reinvestLimit;\r\n    uint256 private reserve_1;\r\n\r\n    address private reserve_address;\r\n    address public HodlHands;\r\n    address private reserve_address_2;\r\n    address public stackingWallet;\r\n    \r\n    uint256 private _liquidityFee;\r\n    uint256 private reserve_8;\r\n\r\n    uint256 public busdToSell; \r\n    uint256 public minTokenNumberUpperlimit;\r\n\r\n    uint256 public rewardHardcap;\r\n\r\n    //removed\r\n    Taxes private taxes;\r\n    \r\n    struct Taxes {\r\n        uint256 bnbReward;\r\n        uint256 liquidity;\r\n        uint256 company;\r\n        uint256 reflection;\r\n        uint256 lottery;\r\n    }\r\n\r\n    uint256 private reserve_9;\r\n    uint256 private reserve_10;\r\n\r\n    address public triggerwallet;\r\n\r\n    mapping(address => bool) public pairAddresses;\r\n\r\n    address public HodlMasterChef;\r\n\r\n    mapping(address => uint256) private firstBuyTimeStamp;\r\n\r\n    mapping(address => HODLStruct.stacking) public rewardStacking;\r\n    bool public stackingEnabled;\r\n\r\n    mapping(address => uint256) private stackingRate;\r\n\r\n    //Lottery removed\r\n    bool private reserve_bool_1;\r\n    HODLStruct.LastLotteryWin private    LastLotteryWinner;\r\n    HODLStruct.LotteryTicket[] private   _lotteryTickets;\r\n    mapping(address => uint[]) private   TicketNumbers;\r\n\r\n    //Chainlink removed\r\n    VRFCoordinatorV2Interface COORDINATOR;\r\n    address private reserve_vrfCoordinator;\r\n    bytes32 private reserve_keyHash;\r\n\r\n    //Bonus HH\r\n    HODLStruct.HHBonus[5] public HHBonus;\r\n\r\n    //Path\r\n    IPancakeRouter02 public HODLXRouter = IPancakeRouter02(0xd4dd4bf4abe7454a1C04199321AAeFD85A7beAE1);  \r\n    address public HODLXToken;\r\n\r\n    mapping(address => mapping(address => uint256)) private userreinvestedCustomToken;\r\n    mapping(address => uint256) public totalreinvestedCustomToken;\r\n\r\n    address public reinvestWallet;\r\n\r\n    //Pool addresses -> No tax, less checks on transfers\r\n    mapping(address => bool) public poolAddresses;\r\n\r\n    //Bonus days on 100% reinvest in HODL\r\n    uint256 public HODLreinvestBonusCycle;\r\n\r\n    //vbWallets\r\n    mapping(address => bool) private vbAddresses;\r\n\r\n    //Events\r\n    event changeValue(string tag, uint256 _value);\r\n    event changeEnable(string tag, bool _enable);\r\n    event changeAddress(string tag, address _address);\r\n\r\n    event StartStacking(\r\n        address sender,\r\n        uint256 amount\r\n    );\r\n    event LotteryWin(address _wallet, uint256 amount);\r\n    event CommunityWin(uint256 amount);\r\n    \r\n    /*\r\n    *   \"Rome was not built in a day\" - John Heywood\r\n    */\r\n    function calculateBNBReward(address ofAddress) external view returns (uint256){        \r\n        return Utils.calculateBNBReward(\r\n                balanceOf(address(ofAddress)),\r\n                address(this).balance,\r\n                _tTotal - (_rOwned[deadAddress] / getRate()) - balanceOf(address(pancakePair)), \r\n                rewardHardcap\r\n            );\r\n    }\r\n\r\n    /** @dev Function to claim the rewards.\r\n    *   First calculate the rewards with checking rewardhardcap and current pool\r\n    *   Depending on user selected percentage pay reward in bnb or reinvest in tokens\r\n    *\r\n    *   \"Keep building. That's how you prove them wrong.\" - David Gokhstein     \r\n    */\r\n    function redeemRewards(uint256 perc, address token) external isHuman nonReentrant {\r\n\r\n        require(nextAvailableClaimDate[msg.sender] <= block.timestamp, \"Error: too early\");\r\n        require(balanceOf(msg.sender) > 0, \"Error: no Hodl\");\r\n\r\n        uint256 totalsupply = _tTotal - (_rOwned[deadAddress] / getRate()) - balanceOf(address(pancakePair));  \r\n        uint256 currentBNBPool = address(this).balance;\r\n\r\n        uint256 reward = currentBNBPool > rewardHardcap ? rewardHardcap * balanceOf(msg.sender) / totalsupply : currentBNBPool * balanceOf(msg.sender) / totalsupply; \r\n\r\n        uint256 rewardreinvest;\r\n        uint256 rewardBNB;\r\n\r\n        uint256 bonusCycle = (perc == 0 && token == address(this)) ? HODLreinvestBonusCycle : 0;\r\n\r\n        if (perc == 100) {\r\n            require(reward > claimBNBLimit, \"Reward below gas fee\");\r\n            rewardBNB = reward;\r\n        } else if (perc == 0) {     \r\n            rewardreinvest = reward;\r\n        } else {\r\n            rewardBNB = reward * perc / 100;  \r\n            rewardreinvest = reward - rewardBNB;\r\n        }\r\n\r\n        // BNB REINVEST\r\n        if (perc < 100) {\r\n            require(token == address(this) || token == HODLXToken, \"Err\");\r\n            require(reward > reinvestLimit, \"Reward below gas fee\");\r\n            bool hodlx = token == HODLXToken;\r\n\r\n            IPancakeRouter02 Router = hodlx ? HODLXRouter : pancakeRouter;\r\n            \r\n            address[] memory path = new address[](2);\r\n            path[0] = Router.WETH();\r\n            path[1] = hodlx ? HODLXToken : address(this);\r\n\r\n            // Update Stats\r\n            uint256[] memory expectedtoken = Router.getAmountsOut(rewardreinvest, path);\r\n            userreinvestedCustomToken[token][msg.sender] += expectedtoken[1];\r\n            totalreinvestedCustomToken[token] += expectedtoken[1];\r\n\r\n            //Swap Tokens\r\n            Router.swapExactETHForTokens{\r\n                    value: rewardreinvest\r\n                }(\r\n                    0, // accept any amount of BNB\r\n                    path,\r\n                    hodlx ? msg.sender : reinvestWallet,\r\n                    block.timestamp + 360\r\n                );\r\n            \r\n            if (!hodlx) {\r\n                uint256 rExpectedtoken = expectedtoken[1] * getRate();\r\n                _rOwned[reinvestWallet] -= rExpectedtoken;\r\n                _rOwned[msg.sender] += rExpectedtoken;\r\n                emit Transfer(pancakePair, msg.sender, expectedtoken[1]); \r\n            }\r\n        }\r\n\r\n        // BNB CLAIM\r\n        if (rewardBNB > 0) {\r\n            // send bnb to user\r\n            (bool success, ) = address(msg.sender).call{value: rewardBNB}(\"\");\r\n            require(success, \"Err\");\r\n\r\n            // update claimed rewards\r\n            userClaimedBNB[msg.sender] += rewardBNB;\r\n            totalClaimedBNB += rewardBNB;\r\n        }\r\n\r\n        // update rewardCycleBlock\r\n        nextAvailableClaimDate[msg.sender] = block.timestamp + rewardCycleBlock - bonusCycle;\r\n        emit ClaimBNBSuccessfully(msg.sender,reward,nextAvailableClaimDate[msg.sender]);\r\n    }\r\n\r\n    /* @dev Top up next claim date of sender and recipient. \r\n    */\r\n    function topUpClaimCycleAfterTransfer(address _sender, address _recipient, uint256 amount) private {\r\n        //_recipient\r\n        uint256 currentBalance = balanceOf(_recipient);\r\n        if ((_recipient == owner() && nextAvailableClaimDate[_recipient] == 0) || currentBalance == 0 || _sender == HodlMasterChef) {\r\n                nextAvailableClaimDate[_recipient] = block.timestamp + rewardCycleBlock;\r\n        } else {\r\n            nextAvailableClaimDate[_recipient] += Utils.calculateTopUpClaim(\r\n                                                currentBalance,\r\n                                                rewardCycleBlock,\r\n                                                threshHoldTopUpRate,\r\n                                                amount);\r\n            if (nextAvailableClaimDate[_recipient] > block.timestamp + rewardCycleBlock) {\r\n                nextAvailableClaimDate[_recipient] = block.timestamp + rewardCycleBlock;\r\n            }\r\n        }\r\n\r\n        //sender\r\n        if (_recipient != HodlMasterChef) {\r\n            currentBalance = balanceOf(_sender);\r\n            if ((_sender == owner() && nextAvailableClaimDate[_sender] == 0) || currentBalance == 0) {\r\n                    nextAvailableClaimDate[_sender] = block.timestamp + rewardCycleBlock;\r\n            } else {\r\n                nextAvailableClaimDate[_sender] += Utils.calculateTopUpClaim(\r\n                                                    currentBalance,\r\n                                                    rewardCycleBlock,\r\n                                                    threshHoldTopUpRate,\r\n                                                    amount);\r\n                if (nextAvailableClaimDate[_sender] > block.timestamp + rewardCycleBlock) {\r\n                    nextAvailableClaimDate[_sender] = block.timestamp + rewardCycleBlock;\r\n                }                                     \r\n            }\r\n        }\r\n    }\r\n\r\n    /* @dev Function to ensure that in the last 24h not more tokens selled \r\n    *   than defined in _maxTxAmount\r\n    */\r\n    function ensureMaxTxAmount(address from, address to, uint256 amount) private {\r\n        if (\r\n            _isExcludedFromMaxTx[from] == false && // default will be false\r\n            _isExcludedFromMaxTx[to] == false // default will be false\r\n        ) {\r\n                WalletAllowance storage wallet = userWalletAllowance[from];\r\n\r\n                if (block.timestamp > wallet.timestamp + daySeconds) { \r\n                    wallet.timestamp = 0;\r\n                    wallet.amount = 0;\r\n                }\r\n\r\n                uint256 totalAmount = wallet.amount + amount;\r\n\r\n                require(\r\n                    totalAmount <= _maxTxAmount,\r\n                    \"Error\"\r\n                );\r\n\r\n                if (wallet.timestamp == 0) {\r\n                    wallet.timestamp = block.timestamp;\r\n                }\r\n\r\n                wallet.amount = totalAmount;\r\n        }\r\n    }\r\n\r\n    /* @dev Function that swaps tokens from the contract for bnb\r\n    *   Bnb is split up due to taxes and send to the specified wallets\r\n    *\r\n    *       \"They talk, we build\" - Josh from StaySAFU\r\n    */\r\n    function swapAndLiquify(address from, address to) private lockTheSwap {\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        if (contractTokenBalance >= minTokenNumberUpperlimit &&\r\n            initialBalance <= rewardHardcap &&\r\n            swapAndLiquifyEnabled &&\r\n            from != pancakePair &&\r\n            !(from == address(this) && to == address(pancakePair))\r\n            ) { \r\n                Utils.swapTokensForEth(address(pancakeRouter), getAmountToSell());  \r\n            }\r\n    }\r\n\r\n    /* @dev Same as swapAndLiquify but manually called by the owner\r\n    *   or the triggerWallet.\r\n    */\r\n    function triggerSwapAndLiquify() external lockTheSwap {\r\n        require(((_msgSender() == address(triggerwallet)) || (_msgSender() == owner())) && swapAndLiquifyEnabled, \"Error\");\r\n        Utils.swapTokensForEth(address(pancakeRouter), getAmountToSell());\r\n    }\r\n\r\n    /*  @dev Enable/Disable if address is a HODL Pair address\r\n    */\r\n    function updatePairAddress(address _pairAddress, bool _enable) external onlyOwner {\r\n        pairAddresses[_pairAddress] = _enable;\r\n    }\r\n\r\n    function updatePoolAddress(address _poolAddress, bool _enable) external onlyOwner {\r\n        poolAddresses[_poolAddress] = _enable;\r\n    }\r\n    \r\n    /*  @dev Function to start rward stacking. the whole tokens (minus 1) are sent to the\r\n    *   stacking wallet. While stacking is enabled the bnb reward is accumulated.\r\n    *   Once the user stops stacking the amount it sent back plus the accumulated reward.\r\n    *\r\n    *       \"HODL Bears to ride Bulls\" - Adam Roberts\r\n    */\r\n    function startStacking() external {\r\n        \r\n        uint96 balance = uint96(balanceOf(msg.sender)-1E9);\r\n\r\n        require(stackingEnabled && !rewardStacking[msg.sender].enabled, \"Err\");\r\n        require(nextAvailableClaimDate[msg.sender] <= block.timestamp, \"Error: too early\");\r\n        require(balance > 15000000000000000, \"Err\");\r\n\r\n        rewardStacking[msg.sender] = HODLStruct.stacking(\r\n            true, \r\n            uint64(rewardCycleBlock), \r\n            uint64(block.timestamp), \r\n            uint96(bnbStackingLimit), \r\n            uint96(balance), \r\n            uint96(rewardHardcap));\r\n\r\n        uint256 currentRate = getRate();\r\n        stackingRate[msg.sender] = currentRate;\r\n\r\n        uint256 rBalance = balance * currentRate;\r\n        _rOwned[msg.sender] -= rBalance;\r\n        _rOwned[stackingWallet] += rBalance;\r\n        emit Transfer(msg.sender, stackingWallet, balance);\r\n        emit StartStacking(msg.sender, balance);\r\n    }\r\n    \r\n    /*  @dev Calculate the amount of stacked reward\r\n    */\r\n    function getStacked(address _address) public view returns (uint256) {\r\n        HODLStruct.stacking memory tmpStack =  rewardStacking[_address];\r\n        if (tmpStack.enabled) {\r\n            return Utils.calcStacked(tmpStack, _tTotal - (_rOwned[deadAddress] / getRate()) - balanceOf(address(pancakePair)), getRate(), stackingRate[msg.sender]);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /* @dev Technically same function as 'redeemReward' but with stacked amount and \r\n    *  stacked claim cycles. Reward is calculated with function getStacked.\r\n    *   \r\n    *   \"Max pain before gain in crypto\" - Travladd\r\n    *\r\n    *   Reflections are added before amount is sent back to the user\r\n    */\r\n    function stopStackingAndClaim(uint256 perc, address token) external nonReentrant {\r\n\r\n        HODLStruct.stacking memory tmpstacking = rewardStacking[msg.sender];\r\n\r\n        require(tmpstacking.enabled, \"Err\");\r\n        uint256 amount;\r\n        uint256 rewardBNB;\r\n        uint256 rewardreinvest;\r\n        uint256 reward = getStacked(msg.sender);\r\n        uint256 currentRate =  getRate();\r\n\r\n        uint256 bonusCycle = (perc == 0 && token == address(this)) ? HODLreinvestBonusCycle : 0;\r\n\r\n        if (perc == 100) {\r\n            rewardBNB = reward;\r\n        } else if (perc == 0) {     \r\n            rewardreinvest = reward;\r\n        } else {\r\n            rewardBNB = reward * perc / 100;\r\n            rewardreinvest = reward - rewardBNB;\r\n        }\r\n\r\n        // BNB REINVEST\r\n        if (perc < 100) {\r\n            require(token == address(this) || token == HODLXToken, \"Err\");\r\n            bool hodlx = token == HODLXToken;\r\n\r\n            IPancakeRouter02 Router = hodlx ? HODLXRouter : pancakeRouter;\r\n            \r\n            address[] memory path = new address[](2);\r\n            path[0] = Router.WETH();\r\n            path[1] = hodlx ? HODLXToken : address(this);\r\n\r\n            // Update Stats\r\n            uint256[] memory expectedtoken = Router.getAmountsOut(rewardreinvest, path);\r\n            userreinvestedCustomToken[token][msg.sender] += expectedtoken[1];\r\n            totalreinvestedCustomToken[token] += expectedtoken[1];\r\n\r\n            //Swap Tokens\r\n            Router.swapExactETHForTokens{\r\n                    value: rewardreinvest\r\n                }(\r\n                    0, // accept any amount of BNB\r\n                    path,\r\n                    hodlx ? msg.sender : reinvestWallet,\r\n                    block.timestamp + 360\r\n                );\r\n\r\n            if (!hodlx) {\r\n                uint256 rExpectedtoken = expectedtoken[1] * getRate();\r\n                _rOwned[reinvestWallet] -= rExpectedtoken;\r\n                _rOwned[msg.sender] += rExpectedtoken;\r\n                emit Transfer(pancakePair, msg.sender, expectedtoken[1]); \r\n            }\r\n\r\n        }\r\n\r\n        // BNB CLAIM\r\n        if (rewardBNB > 0) {\r\n            // send bnb to user\r\n            (bool success, ) = address(msg.sender).call{value: rewardBNB}(\"\");\r\n            require(success, \"Err\");\r\n\r\n            // update claimed rewards\r\n            userClaimedBNB[msg.sender] += rewardBNB;\r\n            totalClaimedBNB += rewardBNB;\r\n        }\r\n\r\n        uint256 rate = stackingRate[msg.sender];\r\n\r\n        if (rate > 0)\r\n        {\r\n            amount = tmpstacking.amount * rate / currentRate;\r\n        } else {\r\n            amount = tmpstacking.amount;\r\n        }\r\n\r\n        uint256 rAmount = amount * currentRate;\r\n        _rOwned[msg.sender] += rAmount;\r\n        _rOwned[stackingWallet] -= rAmount;\r\n        emit Transfer(stackingWallet, msg.sender, amount);\r\n\r\n        HODLStruct.stacking memory tmpStack;\r\n        rewardStacking[msg.sender] = tmpStack;\r\n\r\n        // update rewardCycleBlock\r\n        nextAvailableClaimDate[msg.sender] = block.timestamp + rewardCycleBlock - bonusCycle;\r\n        emit ClaimBNBSuccessfully(msg.sender,reward,nextAvailableClaimDate[msg.sender]);\r\n    }\r\n\r\n    /* @dev Change threshold and bonus-% for holding HH NFTs\r\n    */\r\n    function changeHHBonus(uint8 layer, uint16 _threshold, uint16 _bonus) external onlyOwner {\r\n        HHBonus[layer].threshold = _threshold;\r\n        HHBonus[layer].bonus = _bonus;\r\n    }\r\n\r\n    function getUserReinvested(address _wallet, address _token) external view returns(uint256) {\r\n        uint256 reinvested = userreinvestedCustomToken[_token][_wallet];\r\n        if (_token == address(this)) reinvested += userreinvested[_wallet];\r\n        return reinvested;\r\n    }\r\n\r\n    function changeBUSDvalueToSell(uint256 _value) external onlyOwner {\r\n        busdToSell = _value * 1E18;\r\n        emit changeValue(\"busdToSell\", _value);\r\n    }\r\n\r\n    function changeMaxAmountToSell(uint256 _value) external onlyOwner {\r\n        require(maxAmountToSell < minTokenNumberUpperlimit);\r\n        maxAmountToSell = _value;\r\n        emit changeValue(\"maxAmountToSell\", _value);\r\n    }\r\n    \r\n    /* @dev Get HODL amount for sell bot\r\n    */\r\n    function getAmountToSell() private view returns(uint256) {\r\n        uint256 tokenAmount;\r\n        address[] memory path = new address[](3);\r\n        path[0] = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; //BUSD\r\n        path[1] = pancakeRouter.WETH();\r\n        path[2] = address(this);\r\n        tokenAmount = pancakeRouter.getAmountsOut(busdToSell, path)[2];\r\n        return tokenAmount > maxAmountToSell ? maxAmountToSell : tokenAmount;\r\n    }\r\n\r\n    function changeHODLXRouter(address _router) external onlyOwner {\r\n        HODLXRouter = IPancakeRouter02(_router);\r\n        emit changeAddress(\"HODLXRouter\", _router);\r\n    }\r\n\r\n}\r\n\r\nlibrary HODLStruct {\r\n    struct stacking {\r\n        bool enabled;\r\n        uint64 cycle;\r\n        uint64 tsStartStacking;\r\n        uint96 stackingLimit;\r\n        uint96 amount;\r\n        uint96 hardcap;   \r\n    }\r\n \r\n    struct LotteryTicket {\r\n        address Wallet;\r\n        uint16 Number;\r\n        bool Won;  \r\n        uint256 PossibleWinAmount;\r\n        uint256 TimeStamp; \r\n    }\r\n\r\n    struct LastLotteryWin {\r\n        address Winner;\r\n        uint256 Amount;\r\n        uint256 TimeStamp;\r\n    }\r\n\r\n    struct HHBonus {\r\n        uint16 threshold;\r\n        uint16 bonus;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextAvailableClaimDate\",\"type\":\"uint256\"}],\"name\":\"ClaimBNBSuccessfully\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CommunityWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LotteryWin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StartStacking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"changeEnable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeValue\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"HHBonus\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"threshold\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"bonus\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HODLXRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HODLXToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HODLreinvestBonusCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HodlHands\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HodlMasterChef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbStackingLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ofAddress\",\"type\":\"address\"}],\"name\":\"calculateBNBReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeBUSDvalueToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"layer\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_threshold\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_bonus\",\"type\":\"uint16\"}],\"name\":\"changeHHBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"changeHODLXRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeMaxAmountToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBNBLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReflections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getStacked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getUserReinvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"includeExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReflections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"initOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReflections\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmountToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenNumberUpperlimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nextAvailableClaimDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perc\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"redeemRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFeesDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCycleBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardHardcap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardStacking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"cycle\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tsStartStacking\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"stackingLimit\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"amount\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"hardcap\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stackingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stackingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startStacking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"perc\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"stopStackingAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshHoldTopUpRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalreinvestedCustomToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerwallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"updatePairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"updatePoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimedBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HODL", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "25000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "Utils:b9e6f54bbadd102f8dd516eedd157c8d5f470482", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c05476d7fdb1215a85e4bf4769aeede20a0781a44dd34ff6af0d6a81bdc839b0"}