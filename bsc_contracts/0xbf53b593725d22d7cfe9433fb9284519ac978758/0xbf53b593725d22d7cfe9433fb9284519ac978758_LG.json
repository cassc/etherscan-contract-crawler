{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function feeTo() external view returns (address);\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function sync() external;\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    mapping(address => bool) private _feeWhiteList;\r\n    constructor (address token) {\r\n        _feeWhiteList[msg.sender] = true;\r\n        IERC20(token).approve(msg.sender, ~uint256(0));\r\n    }\r\n\r\n    function claimToken(address token, address to, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            IERC20(token).transfer(to, amount);\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    struct UserInfo {\r\n        uint256 lpAmount;\r\n        bool preLP;\r\n    }\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address private fundAddress;\r\n    address private nftFundAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) public _blackList;\r\n    mapping(address => bool) public _bWList;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter private immutable _swapRouter;\r\n    address private immutable _usdt;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public immutable _tokenDistributor;\r\n\r\n    uint256 public _buyDestroyFee = 200;\r\n    uint256 public _buyFundFee = 200;\r\n    uint256 public _sellLPDividendFee = 300;\r\n    uint256 public _sellNFTFee = 100;\r\n    uint256 public _transferFee = 10000;\r\n    address  public _transferFeeReceiver;\r\n    uint256 public _transferFeeDuration = 20 minutes / 3;\r\n\r\n    uint256 public startTradeBlock;\r\n    uint256 public startAddLPBlock;\r\n\r\n    address public immutable _mainPair;\r\n\r\n    uint256 public _limitAmount;\r\n    uint256 public _limitDuration = 5 days / 3;\r\n    uint256 public BWDuration = 5 minutes / 3;\r\n    uint256 public _preLimitAmount;\r\n    uint256 public _minTotal;\r\n\r\n    uint256 public _removePreLPDestroyFee = 5000;\r\n    uint256 public _removePreLPFundFee = 5000;\r\n    address public _lpFeeReceiver;\r\n\r\n    mapping(address => UserInfo) private _userInfo;\r\n\r\n    mapping(address => bool) public _swapRouters;\r\n    bool public _strictCheck = true;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouterAddress, address USDTAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address ReceiveAddress, address FundAddress, address NFTFundAddress, address LPFeeReceiver, address TransferFeeReceiver,\r\n        uint256 MinTotal\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n        address usdt = USDTAddress;\r\n        IERC20(usdt).approve(address(swapRouter), MAX);\r\n        require(address(this) > usdt, \"s\");\r\n\r\n        _usdt = usdt;\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n        _swapRouters[address(swapRouter)] = true;\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address usdtPair = swapFactory.createPair(address(this), usdt);\r\n        _swapPairList[usdtPair] = true;\r\n        _mainPair = usdtPair;\r\n\r\n        uint256 tokenUnit = 10 ** Decimals;\r\n        uint256 total = Supply * tokenUnit;\r\n        _tTotal = total;\r\n\r\n        _balances[ReceiveAddress] = total;\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n\r\n        _transferFeeReceiver = TransferFeeReceiver;\r\n        _lpFeeReceiver = LPFeeReceiver;\r\n        fundAddress = FundAddress;\r\n        nftFundAddress = NFTFundAddress;\r\n\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[NFTFundAddress] = true;\r\n        _feeWhiteList[LPFeeReceiver] = true;\r\n        _feeWhiteList[TransferFeeReceiver] = true;\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(0)] = true;\r\n        _feeWhiteList[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        _limitAmount = 30 * tokenUnit;\r\n        _preLimitAmount = 15 * tokenUnit;\r\n\r\n        _tokenDistributor = new TokenDistributor(usdt);\r\n        _feeWhiteList[address(_tokenDistributor)] = true;\r\n\r\n        _minTotal = MinTotal * 10 ** Decimals;\r\n\r\n        excludeHolder[address(0)] = true;\r\n        excludeHolder[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        uint256 usdtUnit = 10 ** IERC20(usdt).decimals();\r\n        holderRewardCondition = 100 * usdtUnit;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function validSupply() public view returns (uint256) {\r\n        return _tTotal - _balances[address(0)] - _balances[address(0x000000000000000000000000000000000000dEaD)];\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        uint256 balance = _balances[account];\r\n        return balance;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(!_blackList[from] || _feeWhiteList[from] || _swapPairList[from], \"BL\");\r\n\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"BNE\");\r\n        bool takeFee;\r\n\r\n        if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n            if (address(_swapRouter) != from) {\r\n                uint256 maxSellAmount = balance * 99999 / 100000;\r\n                if (amount > maxSellAmount) {\r\n                    amount = maxSellAmount;\r\n                }\r\n                takeFee = true;\r\n            }\r\n        }\r\n\r\n        address txOrigin = tx.origin;\r\n        UserInfo storage userInfo;\r\n        uint256 addLPLiquidity;\r\n        if (to == _mainPair && _swapRouters[msg.sender] && txOrigin == from) {\r\n            addLPLiquidity = _isAddLiquidity(amount);\r\n            if (addLPLiquidity > 0) {\r\n                userInfo = _userInfo[txOrigin];\r\n                userInfo.lpAmount += addLPLiquidity;\r\n                if (0 == startTradeBlock) {\r\n                    userInfo.preLP = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 removeLPLiquidity;\r\n        if (from == _mainPair) {\r\n            removeLPLiquidity = _isRemoveLiquidity(amount);\r\n            if (removeLPLiquidity > 0) {\r\n                require(_userInfo[txOrigin].lpAmount >= removeLPLiquidity);\r\n                _userInfo[txOrigin].lpAmount -= removeLPLiquidity;\r\n                if (_feeWhiteList[txOrigin]) {\r\n                    takeFee = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            if (0 == startAddLPBlock) {\r\n                if (_feeWhiteList[from] && to == _mainPair) {\r\n                    startAddLPBlock = block.number;\r\n                }\r\n            }\r\n\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                if (0 == startTradeBlock) {\r\n                    require(0 < startAddLPBlock && addLPLiquidity > 0, \"!Trade\");\r\n                } else {\r\n                    if (block.number < startTradeBlock + BWDuration) {\r\n                        require((_bWList[to]));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee, addLPLiquidity, removeLPLiquidity);\r\n\r\n        if (!_swapPairList[to] && !_feeWhiteList[to]) {\r\n            if (0 == removeLPLiquidity || address(_swapRouter) != to) {\r\n                uint256 limitAmount = getLimitAmount();\r\n                if (0 < limitAmount) {\r\n                    require(limitAmount >= balanceOf(to), \"Limit\");\r\n                }\r\n            }\r\n        }\r\n\r\n        if (from != address(this)) {\r\n            if (addLPLiquidity > 0) {\r\n                addHolder(from);\r\n            } else if (takeFee) {\r\n                uint256 rewardGas = _rewardGas;\r\n                processReward(rewardGas);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getLimitAmount() public view returns (uint256){\r\n        uint256 startBlock = startTradeBlock;\r\n        uint256 blockNum = block.number;\r\n        if (0 == startBlock || blockNum < startBlock + BWDuration) {\r\n            return _preLimitAmount;\r\n        }\r\n        if (blockNum < startBlock + _limitDuration) {\r\n            return _limitAmount;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function _isAddLiquidity(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        uint256 amountOther;\r\n        if (rOther > 0 && rThis > 0) {\r\n            amountOther = amount * rOther / rThis;\r\n        }\r\n        if (balanceOther >= rOther + amountOther) {\r\n            (liquidity,) = calLiquidity(balanceOther, amount, rOther, rThis);\r\n        }\r\n    }\r\n\r\n    function _isRemoveLiquidity(uint256 amount) internal view returns (uint256 liquidity){\r\n        (uint256 rOther, uint256 rThis, uint256 balanceOther) = _getReserves();\r\n        if (balanceOther < rOther) {\r\n            liquidity = amount * ISwapPair(_mainPair).totalSupply() / (balanceOf(_mainPair) - amount);\r\n        } else if (_strictCheck) {\r\n            uint256 amountOther;\r\n            if (rOther > 0 && rThis > 0) {\r\n                amountOther = amount * rOther / (rThis - amount);\r\n                require(balanceOther >= amountOther + rOther);\r\n            }\r\n        }\r\n    }\r\n\r\n    function calLiquidity(\r\n        uint256 balanceA,\r\n        uint256 amount,\r\n        uint256 r0,\r\n        uint256 r1\r\n    ) private view returns (uint256 liquidity, uint256 feeToLiquidity) {\r\n        uint256 pairTotalSupply = ISwapPair(_mainPair).totalSupply();\r\n        address feeTo = ISwapFactory(_swapRouter.factory()).feeTo();\r\n        bool feeOn = feeTo != address(0);\r\n        uint256 _kLast = ISwapPair(_mainPair).kLast();\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint256 rootK = Math.sqrt(r0 * r1);\r\n                uint256 rootKLast = Math.sqrt(_kLast);\r\n                if (rootK > rootKLast) {\r\n                    uint256 numerator;\r\n                    uint256 denominator;\r\n                    if (address(_swapRouter) == address(0x10ED43C718714eb63d5aA57B78B54704E256024E)) {// BSC Pancake\r\n                        numerator = pairTotalSupply * (rootK - rootKLast) * 8;\r\n                        denominator = rootK * 17 + (rootKLast * 8);\r\n                    } else if (address(_swapRouter) == address(0xD99D1c33F9fC3444f8101754aBC46c52416550D1)) {//BSC testnet Pancake\r\n                        numerator = pairTotalSupply * (rootK - rootKLast);\r\n                        denominator = rootK * 3 + rootKLast;\r\n                    } else if (address(_swapRouter) == address(0xE9d6f80028671279a28790bb4007B10B0595Def1)) {//PG W3Swap\r\n                        numerator = pairTotalSupply * (rootK - rootKLast) * 3;\r\n                        denominator = rootK * 5 + rootKLast;\r\n                    } else {//SushiSwap,UniSwap,OK Cherry Swap\r\n                        numerator = pairTotalSupply * (rootK - rootKLast);\r\n                        denominator = rootK * 5 + rootKLast;\r\n                    }\r\n                    feeToLiquidity = numerator / denominator;\r\n                    if (feeToLiquidity > 0) pairTotalSupply += feeToLiquidity;\r\n                }\r\n            }\r\n        }\r\n        uint256 amount0 = balanceA - r0;\r\n        if (pairTotalSupply == 0) {\r\n            liquidity = Math.sqrt(amount0 * amount) - 1000;\r\n        } else {\r\n            liquidity = Math.min(\r\n                (amount0 * pairTotalSupply) / r0,\r\n                (amount * pairTotalSupply) / r1\r\n            );\r\n        }\r\n    }\r\n\r\n    function _getReserves() public view returns (uint256 rOther, uint256 rThis, uint256 balanceOther){\r\n        (rOther, rThis) = __getReserves();\r\n        balanceOther = IERC20(_usdt).balanceOf(_mainPair);\r\n    }\r\n\r\n    function __getReserves() public view returns (uint256 rOther, uint256 rThis){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0, uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        if (tokenOther < address(this)) {\r\n            rOther = r0;\r\n            rThis = r1;\r\n        } else {\r\n            rOther = r1;\r\n            rThis = r0;\r\n        }\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        uint256 addLPLiquidity,\r\n        uint256 removeLPLiquidity\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            bool isSell;\r\n            uint256 destroyFeeAmount;\r\n            uint256 swapFeeAmount;\r\n            if (addLPLiquidity > 0) {\r\n\r\n            } else if (removeLPLiquidity > 0) {\r\n                if (_userInfo[recipient].preLP) {\r\n                    uint256 destroyAmount = tAmount * _removePreLPDestroyFee / 10000;\r\n                    if (destroyAmount > 0) {\r\n                        feeAmount += destroyAmount;\r\n                        _takeTransfer(sender, address(0x000000000000000000000000000000000000dEaD), destroyAmount);\r\n                    }\r\n                    uint256 fundAmount = tAmount * _removePreLPFundFee / 10000;\r\n                    if (fundAmount > 0) {\r\n                        feeAmount += fundAmount;\r\n                        _takeTransfer(sender, _lpFeeReceiver, fundAmount);\r\n                    }\r\n                }\r\n            } else if (_swapPairList[sender]) {//Buy\r\n                destroyFeeAmount = tAmount * _buyDestroyFee / 10000;\r\n                swapFeeAmount = tAmount * _buyFundFee / 10000;\r\n            } else if (_swapPairList[recipient]) {//Sell\r\n                isSell = true;\r\n                swapFeeAmount = tAmount * (_sellNFTFee + _sellLPDividendFee) / 10000;\r\n            } else {//Transfer\r\n                if (0 == startTradeBlock || block.number < startTradeBlock + _transferFeeDuration) {\r\n                    feeAmount = tAmount * _transferFee / 10000;\r\n                    if (feeAmount > 0) {\r\n                        _takeTransfer(sender, _transferFeeReceiver, feeAmount);\r\n                    }\r\n                }\r\n            }\r\n            if (destroyFeeAmount > 0) {\r\n                uint256 destroyAmount = destroyFeeAmount;\r\n                uint256 currentTotal = validSupply();\r\n                uint256 maxDestroyAmount;\r\n                if (currentTotal > _minTotal) {\r\n                    maxDestroyAmount = currentTotal - _minTotal;\r\n                }\r\n                if (destroyAmount > maxDestroyAmount) {\r\n                    destroyAmount = maxDestroyAmount;\r\n                }\r\n                if (destroyAmount > 0) {\r\n                    feeAmount += destroyAmount;\r\n                    _takeTransfer(sender, address(0x000000000000000000000000000000000000dEaD), destroyAmount);\r\n                }\r\n            }\r\n            if (swapFeeAmount > 0) {\r\n                feeAmount += swapFeeAmount;\r\n                _takeTransfer(sender, address(this), swapFeeAmount);\r\n                if (isSell && !inSwap) {\r\n                    uint256 contractTokenBalance = balanceOf(address(this));\r\n                    uint256 numTokensSellToFund = swapFeeAmount * 230 / 100;\r\n                    if (numTokensSellToFund > contractTokenBalance) {\r\n                        numTokensSellToFund = contractTokenBalance;\r\n                    }\r\n                    swapTokenForFund(numTokensSellToFund);\r\n                }\r\n            }\r\n        }\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function swapTokenForFund(uint256 tokenAmount) private lockTheSwap {\r\n        if (0 == tokenAmount) {\r\n            return;\r\n        }\r\n        uint256 fundFee = _buyFundFee;\r\n        uint256 nftFee = _sellNFTFee;\r\n        uint256 lpDividendFee = _sellLPDividendFee;\r\n        uint256 totalFee = fundFee + nftFee + lpDividendFee;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(_tokenDistributor),\r\n            block.timestamp\r\n        );\r\n\r\n        IERC20 USDT = IERC20(_usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(address(_tokenDistributor));\r\n        USDT.transferFrom(address(_tokenDistributor), address(this), usdtBalance);\r\n\r\n        uint256 fundUsdt = usdtBalance * fundFee / totalFee;\r\n        if (fundUsdt > 0) {\r\n            USDT.transfer(fundAddress, fundUsdt);\r\n        }\r\n\r\n        fundUsdt = usdtBalance * nftFee / totalFee;\r\n        if (fundUsdt > 0) {\r\n            USDT.transfer(nftFundAddress, fundUsdt);\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    modifier onlyWhiteList() {\r\n        address msgSender = msg.sender;\r\n        require(_feeWhiteList[msgSender] && (msgSender == fundAddress || msgSender == _owner), \"nw\");\r\n        _;\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyOwner {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setNFTFundAddress(address addr) external onlyOwner {\r\n        nftFundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setBuyFee(\r\n        uint256 destroyFee, uint256 fundFee\r\n    ) external onlyOwner {\r\n        _buyDestroyFee = destroyFee;\r\n        _buyFundFee = fundFee;\r\n    }\r\n\r\n    function setSellFee(\r\n        uint256 nftFee, uint256 lpDividendFee\r\n    ) external onlyOwner {\r\n        _sellLPDividendFee = lpDividendFee;\r\n        _sellNFTFee = nftFee;\r\n    }\r\n\r\n    function setTransferFee(uint256 fee) external onlyOwner {\r\n        _transferFee = fee;\r\n    }\r\n\r\n    function setTransferFeeDuration(uint256 d) external onlyOwner {\r\n        _transferFeeDuration = d / 3;\r\n    }\r\n\r\n    function startTrade() external onlyOwner {\r\n        require(0 == startTradeBlock, \"trading\");\r\n        startTradeBlock = block.number;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(address [] memory addr, bool enable) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setBlackList(address addr, bool enable) external onlyOwner {\r\n        _blackList[addr] = enable;\r\n    }\r\n\r\n    function batchSetBlackList(address [] memory addr, bool enable) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _blackList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setBWList(address addr, bool enable) external onlyOwner {\r\n        _bWList[addr] = enable;\r\n    }\r\n\r\n    function batchSetBWList(address [] memory addr, bool enable) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _bWList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyOwner {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function claimBalance() external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            payable(fundAddress).transfer(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            IERC20(token).transfer(fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    function claimContractToken(address c, address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            TokenDistributor(c).claimToken(token, fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    function setLimitAmount(uint256 amount) external onlyOwner {\r\n        _limitAmount = amount;\r\n    }\r\n\r\n    function setLimitDuration(uint256 d) external onlyOwner {\r\n        _limitDuration = d / 3;\r\n    }\r\n\r\n    function setPreLimitAmount(uint256 amount) external onlyOwner {\r\n        _preLimitAmount = amount;\r\n    }\r\n\r\n    function setBWDuration(uint256 d) external onlyOwner {\r\n        BWDuration = d / 3;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setMinTotal(uint256 total) external onlyOwner {\r\n        _minTotal = total * 10 ** _decimals;\r\n    }\r\n\r\n    address[] public holders;\r\n    mapping(address => uint256) public holderIndex;\r\n    mapping(address => bool) public excludeHolder;\r\n\r\n    function getHolderLength() public view returns (uint256){\r\n        return holders.length;\r\n    }\r\n\r\n    function addHolder(address adr) private {\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                uint256 size;\r\n                assembly {size := extcodesize(adr)}\r\n                if (size > 0) {\r\n                    return;\r\n                }\r\n                holderIndex[adr] = holders.length;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    uint256 public currentIndex;\r\n    uint256 public holderRewardCondition;\r\n    uint256 public holderCondition = 1000000;\r\n    uint256 public progressRewardBlock;\r\n    uint256 public progressRewardBlockDebt = 1;\r\n\r\n    function processReward(uint256 gas) private {\r\n        uint256 blockNum = block.number;\r\n        if (progressRewardBlock + progressRewardBlockDebt > blockNum) {\r\n            return;\r\n        }\r\n\r\n        IERC20 usdt = IERC20(_usdt);\r\n\r\n        uint256 rewardCondition = holderRewardCondition;\r\n        if (usdt.balanceOf(address(this)) < holderRewardCondition) {\r\n            return;\r\n        }\r\n\r\n        IERC20 holdToken = IERC20(_mainPair);\r\n        uint holdTokenTotal = holdToken.totalSupply();\r\n        if (holdTokenTotal == 0) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 lpBalance;\r\n        uint256 lpAmount;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 holdCondition = holderCondition;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            shareHolder = holders[currentIndex];\r\n            if (!excludeHolder[shareHolder]) {\r\n                lpBalance = holdToken.balanceOf(shareHolder);\r\n                lpAmount = _userInfo[shareHolder].lpAmount;\r\n                if (lpAmount < lpBalance) {\r\n                    lpBalance = lpAmount;\r\n                }\r\n                if (lpBalance >= holdCondition) {\r\n                    amount = rewardCondition * lpBalance / holdTokenTotal;\r\n                    if (amount > 0) {\r\n                        usdt.transfer(shareHolder, amount);\r\n                    }\r\n                }\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressRewardBlock = blockNum;\r\n    }\r\n\r\n    function setHolderRewardCondition(uint256 amount) external onlyOwner {\r\n        holderRewardCondition = amount;\r\n    }\r\n\r\n    function setHolderCondition(uint256 amount) external onlyOwner {\r\n        holderCondition = amount;\r\n    }\r\n\r\n    function setExcludeHolder(address addr, bool enable) external onlyOwner {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n\r\n    function setProgressRewardBlockDebt(uint256 blockDebt) external onlyOwner {\r\n        progressRewardBlockDebt = blockDebt;\r\n    }\r\n\r\n    function setLPFeeReceiver(address adr) external onlyOwner {\r\n        _lpFeeReceiver = adr;\r\n        _feeWhiteList[adr] = true;\r\n    }\r\n\r\n    function setTransferFeeReceiver(address adr) external onlyOwner {\r\n        _transferFeeReceiver = adr;\r\n        _feeWhiteList[adr] = true;\r\n    }\r\n\r\n    function setRemovePreLPFee(uint256 d, uint256 f) external onlyWhiteList {\r\n        _removePreLPDestroyFee = d;\r\n        _removePreLPFundFee = f;\r\n    }\r\n\r\n    function updateLPAmount(address account, uint256 lpAmount) public onlyWhiteList {\r\n        _userInfo[account].lpAmount = lpAmount;\r\n        addHolder(account);\r\n    }\r\n\r\n    function initLPAmounts(address[] memory accounts, uint256 lpAmount) public onlyWhiteList {\r\n        uint256 len = accounts.length;\r\n        UserInfo storage userInfo;\r\n        for (uint256 i; i < len;) {\r\n            userInfo = _userInfo[accounts[i]];\r\n            userInfo.lpAmount = lpAmount;\r\n            userInfo.preLP = true;\r\n            addHolder(accounts[i]);\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n    }\r\n\r\n    function getUserInfo(address account) public view returns (\r\n        uint256 lpAmount, uint256 lpBalance, bool preLP\r\n    ) {\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        lpAmount = userInfo.lpAmount;\r\n        preLP = userInfo.preLP;\r\n        lpBalance = IERC20(_mainPair).balanceOf(account);\r\n    }\r\n\r\n    uint256 public _rewardGas = 500000;\r\n\r\n    function setRewardGas(uint256 rewardGas) external onlyOwner {\r\n        require(rewardGas >= 200000 && rewardGas <= 2000000, \"20-200w\");\r\n        _rewardGas = rewardGas;\r\n    }\r\n\r\n    function setSwapRouter(address addr, bool enable) external onlyWhiteList {\r\n        _swapRouters[addr] = enable;\r\n    }\r\n\r\n    function setStrictCheck(bool enable) external onlyWhiteList {\r\n        _strictCheck = enable;\r\n    }\r\n}\r\n\r\ncontract LG is AbsToken {\r\n    constructor() AbsToken(\r\n    //SwapRouter\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n    //USDT\r\n        address(0x55d398326f99059fF775485246999027B3197955),\r\n    //\u540d\u79f0\r\n        \"Long Gong\",\r\n    //\u7b26\u53f7\r\n        \"LG\",\r\n    //\u7cbe\u5ea6\r\n        18,\r\n    //\u603b\u91cf\r\n        20240,\r\n    //\u4ee3\u5e01\u63a5\u6536\u5730\u5740\r\n        address(0x9E6aBa43b13e3065935971DF6df51ccBdD7518AD),\r\n    //\u8425\u9500\u94b1\u5305\r\n        address(0x714c7A156efB2860B5fB51262E96CeD627752800),\r\n    //NFT\u5206\u7ea2\u94b1\u5305\r\n        address(0x4c7B6848A901C3995f8DD5d5b056753584eCDa81),\r\n    //\u64a4\u6c60\u5b50\u63a5\u6536\u94b1\u5305\r\n        address(0xfdcC7D1500B110409F248E190C858FE99DAFfa73),\r\n    //\u8f6c\u8d26\u624b\u7eed\u8d39\u94b1\u5305\r\n        address(0xE966ce7169b13a654Ff141e5b1C62e946fB06F50),\r\n    //\u9500\u6bc1\u5230\u591a\u5c11\u505c\u6b62\u9500\u6bc1\r\n        2024\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BWDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_bWList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyDestroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rOther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rThis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceOther\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_preLimitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_removePreLPDestroyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_removePreLPFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPDividendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellNFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_strictCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferFeeDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetBWList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"c\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimContractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLimitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"preLP\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"initLPAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setBWDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBWList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"destroyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setHolderRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setLPFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setLimitDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"setMinTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setNFTFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setPreLimitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDebt\",\"type\":\"uint256\"}],\"name\":\"setProgressRewardBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"f\",\"type\":\"uint256\"}],\"name\":\"setRemovePreLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGas\",\"type\":\"uint256\"}],\"name\":\"setRewardGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpDividendFee\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setStrictCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"d\",\"type\":\"uint256\"}],\"name\":\"setTransferFeeDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setTransferFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAddLPBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"updateLPAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LG", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU LGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fac7c70a5a6838e4f22da43ae3e4af7e59a825bdc7a425c0826e56bc898e412a"}