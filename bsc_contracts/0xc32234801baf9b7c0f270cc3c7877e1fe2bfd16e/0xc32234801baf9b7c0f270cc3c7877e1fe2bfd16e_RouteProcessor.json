{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/InputStream.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary InputStream {\\r\\n    function createStream(\\r\\n        bytes memory data\\r\\n    ) internal pure returns (uint256 stream) {\\r\\n        assembly {\\r\\n            stream := mload(0x40)\\r\\n            mstore(0x40, add(stream, 64))\\r\\n            mstore(stream, data)\\r\\n            let length := mload(data)\\r\\n            mstore(add(stream, 32), add(data, length))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isNotEmpty(uint256 stream) internal pure returns (bool) {\\r\\n        uint256 pos;\\r\\n        uint256 finish;\\r\\n        assembly {\\r\\n            pos := mload(stream)\\r\\n            finish := mload(add(stream, 32))\\r\\n        }\\r\\n        return pos < finish;\\r\\n    }\\r\\n\\r\\n    function readUint8(uint256 stream) internal pure returns (uint8 res) {\\r\\n        assembly {\\r\\n            let pos := mload(stream)\\r\\n            pos := add(pos, 1)\\r\\n            res := mload(pos)\\r\\n            mstore(stream, pos)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function readUint16(uint256 stream) internal pure returns (uint16 res) {\\r\\n        assembly {\\r\\n            let pos := mload(stream)\\r\\n            pos := add(pos, 2)\\r\\n            res := mload(pos)\\r\\n            mstore(stream, pos)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function readUint32(uint256 stream) internal pure returns (uint32 res) {\\r\\n        assembly {\\r\\n            let pos := mload(stream)\\r\\n            pos := add(pos, 4)\\r\\n            res := mload(pos)\\r\\n            mstore(stream, pos)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function readUint(uint256 stream) internal pure returns (uint256 res) {\\r\\n        assembly {\\r\\n            let pos := mload(stream)\\r\\n            pos := add(pos, 32)\\r\\n            res := mload(pos)\\r\\n            mstore(stream, pos)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function readBytes32(uint256 stream) internal pure returns (bytes32 res) {\\r\\n        assembly {\\r\\n            let pos := mload(stream)\\r\\n            pos := add(pos, 32)\\r\\n            res := mload(pos)\\r\\n            mstore(stream, pos)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function readAddress(uint256 stream) internal pure returns (address res) {\\r\\n        assembly {\\r\\n            let pos := mload(stream)\\r\\n            pos := add(pos, 20)\\r\\n            res := mload(pos)\\r\\n            mstore(stream, pos)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function readBytes(\\r\\n        uint256 stream\\r\\n    ) internal pure returns (bytes memory res) {\\r\\n        assembly {\\r\\n            let pos := mload(stream)\\r\\n            res := add(pos, 32)\\r\\n            let length := mload(res)\\r\\n            mstore(stream, add(res, length))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IAlgebraPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./pool/IAlgebraPoolImmutables.sol\\\";\\r\\nimport \\\"./pool/IAlgebraPoolState.sol\\\";\\r\\nimport \\\"./pool/IAlgebraPoolDerivedState.sol\\\";\\r\\nimport \\\"./pool/IAlgebraPoolActions.sol\\\";\\r\\nimport \\\"./pool/IAlgebraPoolPermissionedActions.sol\\\";\\r\\nimport \\\"./pool/IAlgebraPoolEvents.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title The interface for a Algebra Pool\\r\\n * @dev The pool interface is broken up into many smaller pieces.\\r\\n * Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\n */\\r\\ninterface IAlgebraPool is\\r\\n    IAlgebraPoolImmutables,\\r\\n    IAlgebraPoolState,\\r\\n    IAlgebraPoolDerivedState,\\r\\n    IAlgebraPoolActions,\\r\\n    IAlgebraPoolPermissionedActions,\\r\\n    IAlgebraPoolEvents\\r\\n{\\r\\n    // used only for combining interfaces\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IDataStorageOperator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"../libraries/AdaptiveFee.sol\\\";\\r\\n\\r\\ninterface IDataStorageOperator {\\r\\n    event FeeConfiguration(AdaptiveFee.Configuration feeConfig);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns data belonging to a certain timepoint\\r\\n     * @param index The index of timepoint in the array\\r\\n     * @dev There is more convenient function to fetch a timepoint: observe(). Which requires not an index but seconds\\r\\n     * @return initialized Whether the timepoint has been initialized and the values are safe to use,\\r\\n     * blockTimestamp The timestamp of the observation,\\r\\n     * tickCumulative The tick multiplied by seconds elapsed for the life of the pool as of the timepoint timestamp,\\r\\n     * secondsPerLiquidityCumulative The seconds per in range liquidity for the life of the pool as of the timepoint timestamp,\\r\\n     * volatilityCumulative Cumulative standard deviation for the life of the pool as of the timepoint timestamp,\\r\\n     * averageTick Time-weighted average tick,\\r\\n     * volumePerLiquidityCumulative Cumulative swap volume per liquidity for the life of the pool as of the timepoint timestamp\\r\\n     */\\r\\n    function timepoints(\\r\\n        uint256 index\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bool initialized,\\r\\n            uint32 blockTimestamp,\\r\\n            int56 tickCumulative,\\r\\n            uint160 secondsPerLiquidityCumulative,\\r\\n            uint88 volatilityCumulative,\\r\\n            int24 averageTick,\\r\\n            uint144 volumePerLiquidityCumulative\\r\\n        );\\r\\n\\r\\n    /// @notice Initialize the dataStorage array by writing the first slot. Called once for the lifecycle of the timepoints array\\r\\n    /// @param time The time of the dataStorage initialization, via block.timestamp truncated to uint32\\r\\n    /// @param tick Initial tick\\r\\n    function initialize(uint32 time, int24 tick) external;\\r\\n\\r\\n    /// @dev Reverts if an timepoint at or before the desired timepoint timestamp does not exist.\\r\\n    /// 0 may be passed as `secondsAgo' to return the current cumulative values.\\r\\n    /// If called with a timestamp falling between two timepoints, returns the counterfactual accumulator values\\r\\n    /// at exactly the timestamp between the two timepoints.\\r\\n    /// @param time The current block timestamp\\r\\n    /// @param secondsAgo The amount of time to look back, in seconds, at which point to return an timepoint\\r\\n    /// @param tick The current tick\\r\\n    /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n    /// @param liquidity The current in-range pool liquidity\\r\\n    /// @return tickCumulative The cumulative tick since the pool was first initialized, as of `secondsAgo`\\r\\n    /// @return secondsPerLiquidityCumulative The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of `secondsAgo`\\r\\n    /// @return volatilityCumulative The cumulative volatility value since the pool was first initialized, as of `secondsAgo`\\r\\n    /// @return volumePerAvgLiquidity The cumulative volume per liquidity value since the pool was first initialized, as of `secondsAgo`\\r\\n    function getSingleTimepoint(\\r\\n        uint32 time,\\r\\n        uint32 secondsAgo,\\r\\n        int24 tick,\\r\\n        uint16 index,\\r\\n        uint128 liquidity\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            int56 tickCumulative,\\r\\n            uint160 secondsPerLiquidityCumulative,\\r\\n            uint112 volatilityCumulative,\\r\\n            uint256 volumePerAvgLiquidity\\r\\n        );\\r\\n\\r\\n    /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\\r\\n    /// @dev Reverts if `secondsAgos` > oldest timepoint\\r\\n    /// @param time The current block.timestamp\\r\\n    /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return an timepoint\\r\\n    /// @param tick The current tick\\r\\n    /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n    /// @param liquidity The current in-range pool liquidity\\r\\n    /// @return tickCumulatives The cumulative tick since the pool was first initialized, as of each `secondsAgo`\\r\\n    /// @return secondsPerLiquidityCumulatives The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of each `secondsAgo`\\r\\n    /// @return volatilityCumulatives The cumulative volatility values since the pool was first initialized, as of each `secondsAgo`\\r\\n    /// @return volumePerAvgLiquiditys The cumulative volume per liquidity values since the pool was first initialized, as of each `secondsAgo`\\r\\n    function getTimepoints(\\r\\n        uint32 time,\\r\\n        uint32[] memory secondsAgos,\\r\\n        int24 tick,\\r\\n        uint16 index,\\r\\n        uint128 liquidity\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            int56[] memory tickCumulatives,\\r\\n            uint160[] memory secondsPerLiquidityCumulatives,\\r\\n            uint112[] memory volatilityCumulatives,\\r\\n            uint256[] memory volumePerAvgLiquiditys\\r\\n        );\\r\\n\\r\\n    /// @notice Returns average volatility in the range from time-WINDOW to time\\r\\n    /// @param time The current block.timestamp\\r\\n    /// @param tick The current tick\\r\\n    /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n    /// @param liquidity The current in-range pool liquidity\\r\\n    /// @return TWVolatilityAverage The average volatility in the recent range\\r\\n    /// @return TWVolumePerLiqAverage The average volume per liquidity in the recent range\\r\\n    function getAverages(\\r\\n        uint32 time,\\r\\n        int24 tick,\\r\\n        uint16 index,\\r\\n        uint128 liquidity\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (uint112 TWVolatilityAverage, uint256 TWVolumePerLiqAverage);\\r\\n\\r\\n    /// @notice Writes an dataStorage timepoint to the array\\r\\n    /// @dev Writable at most once per block. Index represents the most recently written element. index must be tracked externally.\\r\\n    /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n    /// @param blockTimestamp The timestamp of the new timepoint\\r\\n    /// @param tick The active tick at the time of the new timepoint\\r\\n    /// @param liquidity The total in-range liquidity at the time of the new timepoint\\r\\n    /// @param volumePerLiquidity The gmean(volumes)/liquidity at the time of the new timepoint\\r\\n    /// @return indexUpdated The new index of the most recently written element in the dataStorage array\\r\\n    function write(\\r\\n        uint16 index,\\r\\n        uint32 blockTimestamp,\\r\\n        int24 tick,\\r\\n        uint128 liquidity,\\r\\n        uint128 volumePerLiquidity\\r\\n    ) external returns (uint16 indexUpdated);\\r\\n\\r\\n    /// @notice Changes fee configuration for the pool\\r\\n    function changeFeeConfiguration(\\r\\n        AdaptiveFee.Configuration calldata feeConfig\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Calculates gmean(volume/liquidity) for block\\r\\n    /// @param liquidity The current in-range pool liquidity\\r\\n    /// @param amount0 Total amount of swapped token0\\r\\n    /// @param amount1 Total amount of swapped token1\\r\\n    /// @return volumePerLiquidity gmean(volume/liquidity) capped by 100000 << 64\\r\\n    function calculateVolumePerLiquidity(\\r\\n        uint128 liquidity,\\r\\n        int256 amount0,\\r\\n        int256 amount1\\r\\n    ) external pure returns (uint128 volumePerLiquidity);\\r\\n\\r\\n    /// @return windowLength Length of window used to calculate averages\\r\\n    function window() external view returns (uint32 windowLength);\\r\\n\\r\\n    /// @notice Calculates fee based on combination of sigmoids\\r\\n    /// @param time The current block.timestamp\\r\\n    /// @param tick The current tick\\r\\n    /// @param index The index of the timepoint that was most recently written to the timepoints array\\r\\n    /// @param liquidity The current in-range pool liquidity\\r\\n    /// @return fee The fee in hundredths of a bip, i.e. 1e-6\\r\\n    function getFee(\\r\\n        uint32 time,\\r\\n        int24 tick,\\r\\n        uint16 index,\\r\\n        uint128 liquidity\\r\\n    ) external view returns (uint16 fee);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/// @notice Trident pool interface.\\r\\ninterface IPool {\\r\\n    /// @notice Executes a swap from one token to another.\\r\\n    /// @dev The input tokens must've already been sent to the pool.\\r\\n    /// @param data ABI-encoded params that the pool requires.\\r\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\r\\n    function swap(\\r\\n        bytes calldata data\\r\\n    ) external returns (uint256 finalAmountOut);\\r\\n\\r\\n    /// @notice Executes a swap from one token to another with a callback.\\r\\n    /// @dev This function allows borrowing the output tokens and sending the input tokens in the callback.\\r\\n    /// @param data ABI-encoded params that the pool requires.\\r\\n    /// @return finalAmountOut The amount of output tokens that were sent to the user.\\r\\n    function flashSwap(\\r\\n        bytes calldata data\\r\\n    ) external returns (uint256 finalAmountOut);\\r\\n\\r\\n    /// @notice Mints liquidity tokens.\\r\\n    /// @param data ABI-encoded params that the pool requires.\\r\\n    /// @return liquidity The amount of liquidity tokens that were minted for the user.\\r\\n    function mint(bytes calldata data) external returns (uint256 liquidity);\\r\\n\\r\\n    /// @notice Burns liquidity tokens.\\r\\n    /// @dev The input LP tokens must've already been sent to the pool.\\r\\n    /// @param data ABI-encoded params that the pool requires.\\r\\n    /// @return withdrawnAmounts The amount of various output tokens that were sent to the user.\\r\\n    function burn(\\r\\n        bytes calldata data\\r\\n    ) external returns (TokenAmount[] memory withdrawnAmounts);\\r\\n\\r\\n    /// @notice Burns liquidity tokens for a single output token.\\r\\n    /// @dev The input LP tokens must've already been sent to the pool.\\r\\n    /// @param data ABI-encoded params that the pool requires.\\r\\n    /// @return amountOut The amount of output tokens that were sent to the user.\\r\\n    function burnSingle(\\r\\n        bytes calldata data\\r\\n    ) external returns (uint256 amountOut);\\r\\n\\r\\n    /// @return A unique identifier for the pool type.\\r\\n    function poolIdentifier() external pure returns (bytes32);\\r\\n\\r\\n    /// @return An array of tokens supported by the pool.\\r\\n    function getAssets() external view returns (address[] memory);\\r\\n\\r\\n    /// @notice Simulates a trade and returns the expected output.\\r\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\r\\n    /// @param data ABI-encoded params that the pool requires.\\r\\n    /// @return finalAmountOut The amount of output tokens that will be sent to the user if the trade is executed.\\r\\n    function getAmountOut(\\r\\n        bytes calldata data\\r\\n    ) external view returns (uint256 finalAmountOut);\\r\\n\\r\\n    /// @notice Simulates a trade and returns the expected output.\\r\\n    /// @dev The pool does not need to include a trade simulator directly in itself - it can use a library.\\r\\n    /// @param data ABI-encoded params that the pool requires.\\r\\n    /// @return finalAmountIn The amount of input tokens that are required from the user if the trade is executed.\\r\\n    function getAmountIn(\\r\\n        bytes calldata data\\r\\n    ) external view returns (uint256 finalAmountIn);\\r\\n\\r\\n    /// @dev This event must be emitted on all swaps.\\r\\n    event Swap(\\r\\n        address indexed recipient,\\r\\n        address indexed tokenIn,\\r\\n        address indexed tokenOut,\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOut\\r\\n    );\\r\\n\\r\\n    /// @dev This struct frames output tokens for burns.\\r\\n    struct TokenAmount {\\r\\n        address token;\\r\\n        uint256 amount;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n\\r\\n    function symbol() external pure returns (string memory);\\r\\n\\r\\n    function decimals() external pure returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint value\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint value,\\r\\n        uint deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(\\r\\n        address indexed sender,\\r\\n        uint amount0,\\r\\n        uint amount1,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    function getReserves()\\r\\n        external\\r\\n        view\\r\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n\\r\\n    function swap(\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function skim(address to) external;\\r\\n\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IUniswapV3Pool {\\r\\n    function token0() external returns (address);\\r\\n\\r\\n    function token1() external returns (address);\\r\\n\\r\\n    function swap(\\r\\n        address recipient,\\r\\n        bool zeroForOne,\\r\\n        int256 amountSpecified,\\r\\n        uint160 sqrtPriceLimitX96,\\r\\n        bytes calldata data\\r\\n    ) external returns (int256 amount0, int256 amount1);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IAlgebraPoolActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Permissionless pool actions\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolActions {\\r\\n    /**\\r\\n     * @notice Sets the initial price for the pool\\r\\n     * @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\r\\n     * @param price the initial sqrt price of the pool as a Q64.96\\r\\n     */\\r\\n    function initialize(uint160 price) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Adds liquidity for the given recipient/bottomTick/topTick position\\r\\n     * @dev The caller of this method receives a callback in the form of IAlgebraMintCallback# AlgebraMintCallback\\r\\n     * in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\r\\n     * on bottomTick, topTick, the amount of liquidity, and the current price.\\r\\n     * @param sender The address which will receive potential surplus of paid tokens\\r\\n     * @param recipient The address for which the liquidity will be created\\r\\n     * @param bottomTick The lower tick of the position in which to add liquidity\\r\\n     * @param topTick The upper tick of the position in which to add liquidity\\r\\n     * @param amount The desired amount of liquidity to mint\\r\\n     * @param data Any data that should be passed through to the callback\\r\\n     * @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\r\\n     * @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\r\\n     * @return liquidityActual The actual minted amount of liquidity\\r\\n     */\\r\\n    function mint(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        int24 bottomTick,\\r\\n        int24 topTick,\\r\\n        uint128 amount,\\r\\n        bytes calldata data\\r\\n    )\\r\\n        external\\r\\n        returns (uint256 amount0, uint256 amount1, uint128 liquidityActual);\\r\\n\\r\\n    /**\\r\\n     * @notice Collects tokens owed to a position\\r\\n     * @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\r\\n     * Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\r\\n     * amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\r\\n     * actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\r\\n     * @param recipient The address which should receive the fees collected\\r\\n     * @param bottomTick The lower tick of the position for which to collect fees\\r\\n     * @param topTick The upper tick of the position for which to collect fees\\r\\n     * @param amount0Requested How much token0 should be withdrawn from the fees owed\\r\\n     * @param amount1Requested How much token1 should be withdrawn from the fees owed\\r\\n     * @return amount0 The amount of fees collected in token0\\r\\n     * @return amount1 The amount of fees collected in token1\\r\\n     */\\r\\n    function collect(\\r\\n        address recipient,\\r\\n        int24 bottomTick,\\r\\n        int24 topTick,\\r\\n        uint128 amount0Requested,\\r\\n        uint128 amount1Requested\\r\\n    ) external returns (uint128 amount0, uint128 amount1);\\r\\n\\r\\n    /**\\r\\n     * @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\r\\n     * @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\r\\n     * @dev Fees must be collected separately via a call to #collect\\r\\n     * @param bottomTick The lower tick of the position for which to burn liquidity\\r\\n     * @param topTick The upper tick of the position for which to burn liquidity\\r\\n     * @param amount How much liquidity to burn\\r\\n     * @return amount0 The amount of token0 sent to the recipient\\r\\n     * @return amount1 The amount of token1 sent to the recipient\\r\\n     */\\r\\n    function burn(\\r\\n        int24 bottomTick,\\r\\n        int24 topTick,\\r\\n        uint128 amount\\r\\n    ) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    /**\\r\\n     * @notice Swap token0 for token1, or token1 for token0\\r\\n     * @dev The caller of this method receives a callback in the form of IAlgebraSwapCallback# AlgebraSwapCallback\\r\\n     * @param recipient The address to receive the output of the swap\\r\\n     * @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\r\\n     * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\r\\n     * @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\r\\n     * value after the swap. If one for zero, the price cannot be greater than this value after the swap\\r\\n     * @param data Any data to be passed through to the callback. If using the Router it should contain\\r\\n     * SwapRouter#SwapCallbackData\\r\\n     * @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\r\\n     * @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\r\\n     */\\r\\n    function swap(\\r\\n        address recipient,\\r\\n        bool zeroToOne,\\r\\n        int256 amountSpecified,\\r\\n        uint160 limitSqrtPrice,\\r\\n        bytes calldata data\\r\\n    ) external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n    /**\\r\\n     * @notice Swap token0 for token1, or token1 for token0 (tokens that have fee on transfer)\\r\\n     * @dev The caller of this method receives a callback in the form of I AlgebraSwapCallback# AlgebraSwapCallback\\r\\n     * @param sender The address called this function (Comes from the Router)\\r\\n     * @param recipient The address to receive the output of the swap\\r\\n     * @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\r\\n     * @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\r\\n     * @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\r\\n     * value after the swap. If one for zero, the price cannot be greater than this value after the swap\\r\\n     * @param data Any data to be passed through to the callback. If using the Router it should contain\\r\\n     * SwapRouter#SwapCallbackData\\r\\n     * @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\r\\n     * @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\r\\n     */\\r\\n    function swapSupportingFeeOnInputTokens(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        bool zeroToOne,\\r\\n        int256 amountSpecified,\\r\\n        uint160 limitSqrtPrice,\\r\\n        bytes calldata data\\r\\n    ) external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n    /**\\r\\n     * @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\r\\n     * @dev The caller of this method receives a callback in the form of IAlgebraFlashCallback# AlgebraFlashCallback\\r\\n     * @dev All excess tokens paid in the callback are distributed to liquidity providers as an additional fee. So this method can be used\\r\\n     * to donate underlying tokens to currently in-range liquidity providers by calling with 0 amount{0,1} and sending\\r\\n     * the donation amount(s) from the callback\\r\\n     * @param recipient The address which will receive the token0 and token1 amounts\\r\\n     * @param amount0 The amount of token0 to send\\r\\n     * @param amount1 The amount of token1 to send\\r\\n     * @param data Any data to be passed through to the callback\\r\\n     */\\r\\n    function flash(\\r\\n        address recipient,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IAlgebraPoolDerivedState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/**\\r\\n * @title Pool state that is not stored\\r\\n * @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\r\\n * blockchain. The functions here may have variable gas costs.\\r\\n * @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\n */\\r\\ninterface IAlgebraPoolDerivedState {\\r\\n    /**\\r\\n     * @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\r\\n     * @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\r\\n     * the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\r\\n     * you must call it with secondsAgos = [3600, 0].\\r\\n     * @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\r\\n     * log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\r\\n     * @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\r\\n     * @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\r\\n     * @return secondsPerLiquidityCumulatives Cumulative seconds per liquidity-in-range value as of each `secondsAgos`\\r\\n     * from the current block timestamp\\r\\n     * @return volatilityCumulatives Cumulative standard deviation as of each `secondsAgos`\\r\\n     * @return volumePerAvgLiquiditys Cumulative swap volume per liquidity as of each `secondsAgos`\\r\\n     */\\r\\n    function getTimepoints(\\r\\n        uint32[] calldata secondsAgos\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            int56[] memory tickCumulatives,\\r\\n            uint160[] memory secondsPerLiquidityCumulatives,\\r\\n            uint112[] memory volatilityCumulatives,\\r\\n            uint256[] memory volumePerAvgLiquiditys\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\r\\n     * @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\r\\n     * I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\r\\n     * snapshot is taken and the second snapshot is taken.\\r\\n     * @param bottomTick The lower tick of the range\\r\\n     * @param topTick The upper tick of the range\\r\\n     * @return innerTickCumulative The snapshot of the tick accumulator for the range\\r\\n     * @return innerSecondsSpentPerLiquidity The snapshot of seconds per liquidity for the range\\r\\n     * @return innerSecondsSpent The snapshot of the number of seconds during which the price was in this range\\r\\n     */\\r\\n    function getInnerCumulatives(\\r\\n        int24 bottomTick,\\r\\n        int24 topTick\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            int56 innerTickCumulative,\\r\\n            uint160 innerSecondsSpentPerLiquidity,\\r\\n            uint32 innerSecondsSpent\\r\\n        );\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IAlgebraPoolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Events emitted by a pool\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolEvents {\\r\\n    /**\\r\\n     * @notice Emitted exactly once by a pool when #initialize is first called on the pool\\r\\n     * @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\r\\n     * @param price The initial sqrt price of the pool, as a Q64.96\\r\\n     * @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\r\\n     */\\r\\n    event Initialize(uint160 price, int24 tick);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when liquidity is minted for a given position\\r\\n     * @param sender The address that minted the liquidity\\r\\n     * @param owner The owner of the position and recipient of any minted liquidity\\r\\n     * @param bottomTick The lower tick of the position\\r\\n     * @param topTick The upper tick of the position\\r\\n     * @param liquidityAmount The amount of liquidity minted to the position range\\r\\n     * @param amount0 How much token0 was required for the minted liquidity\\r\\n     * @param amount1 How much token1 was required for the minted liquidity\\r\\n     */\\r\\n    event Mint(\\r\\n        address sender,\\r\\n        address indexed owner,\\r\\n        int24 indexed bottomTick,\\r\\n        int24 indexed topTick,\\r\\n        uint128 liquidityAmount,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when fees are collected by the owner of a position\\r\\n     * @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\r\\n     * @param owner The owner of the position for which fees are collected\\r\\n     * @param recipient The address that received fees\\r\\n     * @param bottomTick The lower tick of the position\\r\\n     * @param topTick The upper tick of the position\\r\\n     * @param amount0 The amount of token0 fees collected\\r\\n     * @param amount1 The amount of token1 fees collected\\r\\n     */\\r\\n    event Collect(\\r\\n        address indexed owner,\\r\\n        address recipient,\\r\\n        int24 indexed bottomTick,\\r\\n        int24 indexed topTick,\\r\\n        uint128 amount0,\\r\\n        uint128 amount1\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when a position's liquidity is removed\\r\\n     * @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\r\\n     * @param owner The owner of the position for which liquidity is removed\\r\\n     * @param bottomTick The lower tick of the position\\r\\n     * @param topTick The upper tick of the position\\r\\n     * @param liquidityAmount The amount of liquidity to remove\\r\\n     * @param amount0 The amount of token0 withdrawn\\r\\n     * @param amount1 The amount of token1 withdrawn\\r\\n     */\\r\\n    event Burn(\\r\\n        address indexed owner,\\r\\n        int24 indexed bottomTick,\\r\\n        int24 indexed topTick,\\r\\n        uint128 liquidityAmount,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted by the pool for any swaps between token0 and token1\\r\\n     * @param sender The address that initiated the swap call, and that received the callback\\r\\n     * @param recipient The address that received the output of the swap\\r\\n     * @param amount0 The delta of the token0 balance of the pool\\r\\n     * @param amount1 The delta of the token1 balance of the pool\\r\\n     * @param price The sqrt(price) of the pool after the swap, as a Q64.96\\r\\n     * @param liquidity The liquidity of the pool after the swap\\r\\n     * @param tick The log base 1.0001 of price of the pool after the swap\\r\\n     */\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        address indexed recipient,\\r\\n        int256 amount0,\\r\\n        int256 amount1,\\r\\n        uint160 price,\\r\\n        uint128 liquidity,\\r\\n        int24 tick\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted by the pool for any flashes of token0/token1\\r\\n     * @param sender The address that initiated the swap call, and that received the callback\\r\\n     * @param recipient The address that received the tokens from flash\\r\\n     * @param amount0 The amount of token0 that was flashed\\r\\n     * @param amount1 The amount of token1 that was flashed\\r\\n     * @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\r\\n     * @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\r\\n     */\\r\\n    event Flash(\\r\\n        address indexed sender,\\r\\n        address indexed recipient,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        uint256 paid0,\\r\\n        uint256 paid1\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the community fee is changed by the pool\\r\\n     * @param communityFee0New The updated value of the token0 community fee percent\\r\\n     * @param communityFee1New The updated value of the token1 community fee percent\\r\\n     */\\r\\n    event CommunityFee(uint8 communityFee0New, uint8 communityFee1New);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when new activeIncentive is set\\r\\n     * @param virtualPoolAddress The address of a virtual pool associated with the current active incentive\\r\\n     */\\r\\n    event Incentive(address indexed virtualPoolAddress);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the fee changes\\r\\n     * @param fee The value of the token fee\\r\\n     */\\r\\n    event Fee(uint16 fee);\\r\\n\\r\\n    /**\\r\\n     * @notice Emitted when the LiquidityCooldown changes\\r\\n     * @param liquidityCooldown The value of locktime for added liquidity\\r\\n     */\\r\\n    event LiquidityCooldown(uint32 liquidityCooldown);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IAlgebraPoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"../IDataStorageOperator.sol\\\";\\r\\n\\r\\n/// @title Pool state that never changes\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolImmutables {\\r\\n    /**\\r\\n     * @notice The contract that stores all the timepoints and can perform actions with them\\r\\n     * @return The operator address\\r\\n     */\\r\\n    function dataStorageOperator() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice The contract that deployed the pool, which must adhere to the IAlgebraFactory interface\\r\\n     * @return The contract address\\r\\n     */\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice The first of the two tokens of the pool, sorted by address\\r\\n     * @return The token contract address\\r\\n     */\\r\\n    function token0() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice The second of the two tokens of the pool, sorted by address\\r\\n     * @return The token contract address\\r\\n     */\\r\\n    function token1() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @notice The pool tick spacing\\r\\n     * @dev Ticks can only be used at multiples of this value\\r\\n     * e.g.: a tickSpacing of 60 means ticks can be initialized every 60th tick, i.e., ..., -120, -60, 0, 60, 120, ...\\r\\n     * This value is an int24 to avoid casting even though it is always positive.\\r\\n     * @return The tick spacing\\r\\n     */\\r\\n    function tickSpacing() external view returns (int24);\\r\\n\\r\\n    /**\\r\\n     * @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n     * @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n     * also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n     * @return The max amount of liquidity per tick\\r\\n     */\\r\\n    function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IAlgebraPoolPermissionedActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/**\\r\\n * @title Permissioned pool actions\\r\\n * @notice Contains pool methods that may only be called by the factory owner or tokenomics\\r\\n * @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\n */\\r\\ninterface IAlgebraPoolPermissionedActions {\\r\\n    /**\\r\\n     * @notice Set the community's % share of the fees. Cannot exceed 25% (250)\\r\\n     * @param communityFee0 new community fee percent for token0 of the pool in thousandths (1e-3)\\r\\n     * @param communityFee1 new community fee percent for token1 of the pool in thousandths (1e-3)\\r\\n     */\\r\\n    function setCommunityFee(uint8 communityFee0, uint8 communityFee1) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets an active incentive\\r\\n     * @param virtualPoolAddress The address of a virtual pool associated with the incentive\\r\\n     */\\r\\n    function setIncentive(address virtualPoolAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets new lock time for added liquidity\\r\\n     * @param newLiquidityCooldown The time in seconds\\r\\n     */\\r\\n    function setLiquidityCooldown(uint32 newLiquidityCooldown) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IAlgebraPoolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Pool state that can change\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolState {\\r\\n    /**\\r\\n     * @notice The globalState structure in the pool stores many values but requires only one slot\\r\\n     * and is exposed as a single method to save gas when accessed externally.\\r\\n     * @return price The current price of the pool as a sqrt(token1/token0) Q64.96 value;\\r\\n     * Returns tick The current tick of the pool, i.e. according to the last tick transition that was run;\\r\\n     * Returns This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick\\r\\n     * boundary;\\r\\n     * Returns fee The last pool fee value in hundredths of a bip, i.e. 1e-6;\\r\\n     * Returns timepointIndex The index of the last written timepoint;\\r\\n     * Returns communityFeeToken0 The community fee percentage of the swap fee in thousandths (1e-3) for token0;\\r\\n     * Returns communityFeeToken1 The community fee percentage of the swap fee in thousandths (1e-3) for token1;\\r\\n     * Returns unlocked Whether the pool is currently locked to reentrancy;\\r\\n     */\\r\\n    function globalState()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint160 price,\\r\\n            int24 tick,\\r\\n            uint16 fee,\\r\\n            uint16 timepointIndex,\\r\\n            uint8 communityFeeToken0,\\r\\n            uint8 communityFeeToken1,\\r\\n            bool unlocked\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\r\\n     * @dev This value can overflow the uint256\\r\\n     */\\r\\n    function totalFeeGrowth0Token() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\r\\n     * @dev This value can overflow the uint256\\r\\n     */\\r\\n    function totalFeeGrowth1Token() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice The currently in range liquidity available to the pool\\r\\n     * @dev This value has no relationship to the total liquidity across all ticks.\\r\\n     * Returned value cannot exceed type(uint128).max\\r\\n     */\\r\\n    function liquidity() external view returns (uint128);\\r\\n\\r\\n    /**\\r\\n     * @notice Look up information about a specific tick in the pool\\r\\n     * @dev This is a public structure, so the `return` natspec tags are omitted.\\r\\n     * @param tick The tick to look up\\r\\n     * @return liquidityTotal the total amount of position liquidity that uses the pool either as tick lower or\\r\\n     * tick upper;\\r\\n     * Returns liquidityDelta how much liquidity changes when the pool price crosses the tick;\\r\\n     * Returns outerFeeGrowth0Token the fee growth on the other side of the tick from the current tick in token0;\\r\\n     * Returns outerFeeGrowth1Token the fee growth on the other side of the tick from the current tick in token1;\\r\\n     * Returns outerTickCumulative the cumulative tick value on the other side of the tick from the current tick;\\r\\n     * Returns outerSecondsPerLiquidity the seconds spent per liquidity on the other side of the tick from the current tick;\\r\\n     * Returns outerSecondsSpent the seconds spent on the other side of the tick from the current tick;\\r\\n     * Returns initialized Set to true if the tick is initialized, i.e. liquidityTotal is greater than 0\\r\\n     * otherwise equal to false. Outside values can only be used if the tick is initialized.\\r\\n     * In addition, these values are only relative and must be used only in comparison to previous snapshots for\\r\\n     * a specific position.\\r\\n     */\\r\\n    function ticks(\\r\\n        int24 tick\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint128 liquidityTotal,\\r\\n            int128 liquidityDelta,\\r\\n            uint256 outerFeeGrowth0Token,\\r\\n            uint256 outerFeeGrowth1Token,\\r\\n            int56 outerTickCumulative,\\r\\n            uint160 outerSecondsPerLiquidity,\\r\\n            uint32 outerSecondsSpent,\\r\\n            bool initialized\\r\\n        );\\r\\n\\r\\n    /** @notice Returns 256 packed tick initialized boolean values. See TickTable for more information */\\r\\n    function tickTable(int16 wordPosition) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the information about a position by the position's key\\r\\n     * @dev This is a public mapping of structures, so the `return` natspec tags are omitted.\\r\\n     * @param key The position's key is a hash of a preimage composed by the owner, bottomTick and topTick\\r\\n     * @return liquidityAmount The amount of liquidity in the position;\\r\\n     * Returns lastLiquidityAddTimestamp Timestamp of last adding of liquidity;\\r\\n     * Returns innerFeeGrowth0Token Fee growth of token0 inside the tick range as of the last mint/burn/poke;\\r\\n     * Returns innerFeeGrowth1Token Fee growth of token1 inside the tick range as of the last mint/burn/poke;\\r\\n     * Returns fees0 The computed amount of token0 owed to the position as of the last mint/burn/poke;\\r\\n     * Returns fees1 The computed amount of token1 owed to the position as of the last mint/burn/poke\\r\\n     */\\r\\n    function positions(\\r\\n        bytes32 key\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint128 liquidityAmount,\\r\\n            uint32 lastLiquidityAddTimestamp,\\r\\n            uint256 innerFeeGrowth0Token,\\r\\n            uint256 innerFeeGrowth1Token,\\r\\n            uint128 fees0,\\r\\n            uint128 fees1\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @notice Returns data about a specific timepoint index\\r\\n     * @param index The element of the timepoints array to fetch\\r\\n     * @dev You most likely want to use #getTimepoints() instead of this method to get an timepoint as of some amount of time\\r\\n     * ago, rather than at a specific index in the array.\\r\\n     * This is a public mapping of structures, so the `return` natspec tags are omitted.\\r\\n     * @return initialized whether the timepoint has been initialized and the values are safe to use;\\r\\n     * Returns blockTimestamp The timestamp of the timepoint;\\r\\n     * Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the timepoint timestamp;\\r\\n     * Returns secondsPerLiquidityCumulative the seconds per in range liquidity for the life of the pool as of the timepoint timestamp;\\r\\n     * Returns volatilityCumulative Cumulative standard deviation for the life of the pool as of the timepoint timestamp;\\r\\n     * Returns averageTick Time-weighted average tick;\\r\\n     * Returns volumePerLiquidityCumulative Cumulative swap volume per liquidity for the life of the pool as of the timepoint timestamp;\\r\\n     */\\r\\n    function timepoints(\\r\\n        uint256 index\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            bool initialized,\\r\\n            uint32 blockTimestamp,\\r\\n            int56 tickCumulative,\\r\\n            uint160 secondsPerLiquidityCumulative,\\r\\n            uint88 volatilityCumulative,\\r\\n            int24 averageTick,\\r\\n            uint144 volumePerLiquidityCumulative\\r\\n        );\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the information about active incentive\\r\\n     * @dev if there is no active incentive at the moment, virtualPool,endTimestamp,startTimestamp would be equal to 0\\r\\n     * @return virtualPool The address of a virtual pool associated with the current active incentive\\r\\n     */\\r\\n    function activeIncentive() external view returns (address virtualPool);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the lock time for added liquidity\\r\\n     */\\r\\n    function liquidityCooldown()\\r\\n        external\\r\\n        view\\r\\n        returns (uint32 cooldownInSeconds);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/AdaptiveFee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity >=0.7.6;\\r\\n\\r\\nimport \\\"./Constants.sol\\\";\\r\\n\\r\\n/// @title AdaptiveFee\\r\\n/// @notice Calculates fee based on combination of sigmoids\\r\\nlibrary AdaptiveFee {\\r\\n    // alpha1 + alpha2 + baseFee must be <= type(uint16).max\\r\\n    struct Configuration {\\r\\n        uint16 alpha1; // max value of the first sigmoid\\r\\n        uint16 alpha2; // max value of the second sigmoid\\r\\n        uint32 beta1; // shift along the x-axis for the first sigmoid\\r\\n        uint32 beta2; // shift along the x-axis for the second sigmoid\\r\\n        uint16 gamma1; // horizontal stretch factor for the first sigmoid\\r\\n        uint16 gamma2; // horizontal stretch factor for the second sigmoid\\r\\n        uint32 volumeBeta; // shift along the x-axis for the outer volume-sigmoid\\r\\n        uint16 volumeGamma; // horizontal stretch factor the outer volume-sigmoid\\r\\n        uint16 baseFee; // minimum possible fee\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates fee based on formula:\\r\\n    /// baseFee + sigmoidVolume(sigmoid1(volatility, volumePerLiquidity) + sigmoid2(volatility, volumePerLiquidity))\\r\\n    /// maximum value capped by baseFee + alpha1 + alpha2\\r\\n    function getFee(\\r\\n        uint88 volatility,\\r\\n        uint256 volumePerLiquidity,\\r\\n        Configuration memory config\\r\\n    ) internal pure returns (uint16 fee) {\\r\\n        uint256 sumOfSigmoids = sigmoid(\\r\\n            volatility,\\r\\n            config.gamma1,\\r\\n            config.alpha1,\\r\\n            config.beta1\\r\\n        ) + sigmoid(volatility, config.gamma2, config.alpha2, config.beta2);\\r\\n\\r\\n        if (sumOfSigmoids > type(uint16).max) {\\r\\n            // should be impossible, just in case\\r\\n            sumOfSigmoids = type(uint16).max;\\r\\n        }\\r\\n\\r\\n        return\\r\\n            uint16(\\r\\n                config.baseFee +\\r\\n                    sigmoid(\\r\\n                        volumePerLiquidity,\\r\\n                        config.volumeGamma,\\r\\n                        uint16(sumOfSigmoids),\\r\\n                        config.volumeBeta\\r\\n                    )\\r\\n            ); // safe since alpha1 + alpha2 + baseFee _must_ be <= type(uint16).max\\r\\n    }\\r\\n\\r\\n    /// @notice calculates \u03b1 / (1 + e^( (\u03b2-x) / \u03b3))\\r\\n    /// that is a sigmoid with a maximum value of \u03b1, x-shifted by \u03b2, and stretched by \u03b3\\r\\n    /// @dev returns uint256 for fuzzy testing. Guaranteed that the result is not greater than alpha\\r\\n    function sigmoid(\\r\\n        uint256 x,\\r\\n        uint16 g,\\r\\n        uint16 alpha,\\r\\n        uint256 beta\\r\\n    ) internal pure returns (uint256 res) {\\r\\n        if (x > beta) {\\r\\n            x = x - beta;\\r\\n            if (x >= 6 * uint256(g)) return alpha; // so x < 19 bits\\r\\n            uint256 g8 = uint256(g) ** 8; // < 128 bits (8*16)\\r\\n            uint256 ex = exp(x, g, g8); // < 155 bits\\r\\n            res = (alpha * ex) / (g8 + ex); // in worst case: (16 + 155 bits) / 155 bits\\r\\n            // so res <= alpha\\r\\n        } else {\\r\\n            x = beta - x;\\r\\n            if (x >= 6 * uint256(g)) return 0; // so x < 19 bits\\r\\n            uint256 g8 = uint256(g) ** 8; // < 128 bits (8*16)\\r\\n            uint256 ex = g8 + exp(x, g, g8); // < 156 bits\\r\\n            res = (alpha * g8) / ex; // in worst case: (16 + 128 bits) / 156 bits\\r\\n            // g8 <= ex, so res <= alpha\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice calculates e^(x/g) * g^8 in a series, since (around zero):\\r\\n    /// e^x = 1 + x + x^2/2 + ... + x^n/n! + ...\\r\\n    /// e^(x/g) = 1 + x/g + x^2/(2*g^2) + ... + x^(n)/(g^n * n!) + ...\\r\\n    function exp(\\r\\n        uint256 x,\\r\\n        uint16 g,\\r\\n        uint256 gHighestDegree\\r\\n    ) internal pure returns (uint256 res) {\\r\\n        // calculating:\\r\\n        // g**8 + x * g**7 + (x**2 * g**6) / 2 + (x**3 * g**5) / 6 + (x**4 * g**4) / 24 + (x**5 * g**3) / 120 + (x**6 * g^2) / 720 + x**7 * g / 5040 + x**8 / 40320\\r\\n\\r\\n        // x**8 < 152 bits (19*8) and g**8 < 128 bits (8*16)\\r\\n        // so each summand < 152 bits and res < 155 bits\\r\\n        uint256 xLowestDegree = x;\\r\\n        res = gHighestDegree; // g**8\\r\\n\\r\\n        gHighestDegree /= g; // g**7\\r\\n        res += xLowestDegree * gHighestDegree;\\r\\n\\r\\n        gHighestDegree /= g; // g**6\\r\\n        xLowestDegree *= x; // x**2\\r\\n        res += (xLowestDegree * gHighestDegree) / 2;\\r\\n\\r\\n        gHighestDegree /= g; // g**5\\r\\n        xLowestDegree *= x; // x**3\\r\\n        res += (xLowestDegree * gHighestDegree) / 6;\\r\\n\\r\\n        gHighestDegree /= g; // g**4\\r\\n        xLowestDegree *= x; // x**4\\r\\n        res += (xLowestDegree * gHighestDegree) / 24;\\r\\n\\r\\n        gHighestDegree /= g; // g**3\\r\\n        xLowestDegree *= x; // x**5\\r\\n        res += (xLowestDegree * gHighestDegree) / 120;\\r\\n\\r\\n        gHighestDegree /= g; // g**2\\r\\n        xLowestDegree *= x; // x**6\\r\\n        res += (xLowestDegree * gHighestDegree) / 720;\\r\\n\\r\\n        xLowestDegree *= x; // x**7\\r\\n        res += (xLowestDegree * g) / 5040 + (xLowestDegree * x) / (40320);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/libraries/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.6;\\r\\n\\r\\nlibrary Constants {\\r\\n    uint8 internal constant RESOLUTION = 96;\\r\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\r\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\r\\n    // fee value in hundredths of a bip, i.e. 1e-6\\r\\n    uint16 internal constant BASE_FEE = 100;\\r\\n    int24 internal constant TICK_SPACING = 60;\\r\\n\\r\\n    // max(uint128) / ( (MAX_TICK - MIN_TICK) / TICK_SPACING )\\r\\n    uint128 internal constant MAX_LIQUIDITY_PER_TICK =\\r\\n        11505743598341114571880798222544994;\\r\\n\\r\\n    uint32 internal constant MAX_LIQUIDITY_COOLDOWN = 1 days;\\r\\n    uint8 internal constant MAX_COMMUNITY_FEE = 250;\\r\\n    uint256 internal constant COMMUNITY_FEE_DENOMINATOR = 1000;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/RouteProcessor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"./interfaces/IAlgebraPool.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./InputStream.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\naddress constant NATIVE_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\naddress constant IMPOSSIBLE_POOL_ADDRESS = 0x0000000000000000000000000000000000000001;\\n\\n/// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\nuint160 constant MIN_SQRT_RATIO = 4295128739;\\n/// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\nuint160 constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n/// @title A route processor for the Sushi Aggregator\\n/// @author Ilya Lyalin\\n/// version 2.1\\ncontract RouteProcessor is Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC20Permit;\\n    using InputStream for uint256;\\n\\n    address public feeWallet;\\n\\n    event Route(\\n        address indexed from,\\n        address to,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint amountIn,\\n        uint amountOutMin,\\n        uint amountOut\\n    );\\n\\n    mapping(address => bool) priviledgedUsers;\\n    address private lastCalledPool;\\n\\n    uint8 private unlocked = 1;\\n    uint8 private paused = 1;\\n    modifier lock() {\\n        require(unlocked == 1, \\\"RouteProcessor is locked\\\");\\n        require(paused == 1, \\\"RouteProcessor is paused\\\");\\n        unlocked = 2;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    modifier onlyOwnerOrPriviledgedUser() {\\n        require(\\n            msg.sender == owner() || priviledgedUsers[msg.sender] == true,\\n            \\\"RP: caller is not the owner or a priviledged user\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _feeWallet, address[] memory priviledgedUserList) {\\n        feeWallet = _feeWallet;\\n        lastCalledPool = IMPOSSIBLE_POOL_ADDRESS;\\n\\n        for (uint i = 0; i < priviledgedUserList.length; i++) {\\n            priviledgedUsers[priviledgedUserList[i]] = true;\\n        }\\n    }\\n\\n    function setPriviledge(address user, bool priviledge) external onlyOwner {\\n        priviledgedUsers[user] = priviledge;\\n    }\\n\\n    function setFeeWallet(\\n        address _feeWallet\\n    ) external onlyOwnerOrPriviledgedUser {\\n        feeWallet = _feeWallet;\\n    }\\n\\n    function pause() external onlyOwnerOrPriviledgedUser {\\n        paused = 2;\\n    }\\n\\n    function resume() external onlyOwnerOrPriviledgedUser {\\n        paused = 1;\\n    }\\n\\n    /// @notice For native unwrapping\\n    receive() external payable {}\\n\\n    /// @notice Processes the route generated off-chain. Has a lock\\n    /// @param tokenIn Address of the input token\\n    /// @param amountIn Amount of the input token\\n    /// @param tokenOut Address of the output token\\n    /// @param amountOutMin Minimum amount of the output token\\n    /// @return amountOut Actual amount of the output token\\n    function processRoute(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address tokenOut,\\n        uint256 amountOutMin,\\n        uint256 estimatedFee,\\n        address to,\\n        bytes memory route\\n    ) external payable lock returns (uint256 amountOut) {\\n        amountOut = processRouteInternal(\\n            tokenIn,\\n            amountIn,\\n            tokenOut,\\n            amountOutMin,\\n            estimatedFee,\\n            to,\\n            route\\n        );\\n\\n        emit Route(\\n            msg.sender,\\n            to,\\n            tokenIn,\\n            tokenOut,\\n            amountIn,\\n            amountOutMin,\\n            amountOut\\n        );\\n    }\\n\\n    /// @notice Transfers some value to <transferValueTo> and then processes the route\\n    /// @param transferValueTo Address where the value should be transferred\\n    /// @param amountValueTransfer How much value to transfer\\n    /// @param tokenIn Address of the input token\\n    /// @param amountIn Amount of the input token\\n    /// @param tokenOut Address of the output token\\n    /// @param amountOutMin Minimum amount of the output token\\n    /// @return amountOut Actual amount of the output token\\n    function transferValueAndprocessRoute(\\n        address payable transferValueTo,\\n        uint256 amountValueTransfer,\\n        address tokenIn,\\n        uint256 amountIn,\\n        address tokenOut,\\n        uint256 amountOutMin,\\n        uint256 estimatedFee,\\n        address to,\\n        bytes memory route\\n    ) external payable lock returns (uint256 amountOut) {\\n        (bool success, bytes memory returnBytes) = transferValueTo.call{\\n            value: amountValueTransfer\\n        }(\\\"\\\");\\n        require(success, string(abi.encodePacked(returnBytes)));\\n        amountOut = processRouteInternal(\\n            tokenIn,\\n            amountIn,\\n            tokenOut,\\n            amountOutMin,\\n            estimatedFee,\\n            to,\\n            route\\n        );\\n\\n        emit Route(\\n            msg.sender,\\n            to,\\n            tokenIn,\\n            tokenOut,\\n            amountIn,\\n            amountOutMin,\\n            amountOut\\n        );\\n    }\\n\\n    /// @notice Processes the route generated off-chain\\n    /// @param tokenIn Address of the input token\\n    /// @param amountIn Amount of the input token\\n    /// @param tokenOut Address of the output token\\n    /// @param amountOutMin Minimum amount of the output token\\n    /// @return amountOut Actual amount of the output token\\n    function processRouteInternal(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address tokenOut,\\n        uint256 amountOutMin,\\n        uint256 estimatedFee,\\n        address to,\\n        bytes memory route\\n    ) private returns (uint256 amountOut) {\\n        uint256 balanceInInitial = tokenIn == NATIVE_ADDRESS\\n            ? address(this).balance\\n            : IERC20(tokenIn).balanceOf(msg.sender);\\n        uint256 balanceOutInitial = tokenOut == NATIVE_ADDRESS\\n            ? address(this).balance\\n            : IERC20(tokenOut).balanceOf(address(this));\\n\\n        uint256 stream = InputStream.createStream(route);\\n        while (stream.isNotEmpty()) {\\n            uint8 commandCode = stream.readUint8();\\n            if (commandCode == 1) processMyERC20(stream);\\n            else if (commandCode == 2) processUserERC20(stream, amountIn);\\n            else if (commandCode == 3) processNative(stream);\\n            else if (commandCode == 4) processOnePool(stream);\\n            else if (commandCode == 5) applyPermit(tokenIn, stream);\\n            else revert(\\\"RouteProcessor: Unknown command code\\\");\\n        }\\n\\n        uint256 balanceInFinal = tokenIn == NATIVE_ADDRESS\\n            ? address(this).balance\\n            : IERC20(tokenIn).balanceOf(msg.sender);\\n        require(\\n            balanceInFinal + amountIn >= balanceInInitial,\\n            \\\"RouteProcessor: Minimal imput balance violation\\\"\\n        );\\n\\n        uint256 balanceOutFinal = tokenOut == NATIVE_ADDRESS\\n            ? address(address(this)).balance\\n            : IERC20(tokenOut).balanceOf(address(this));\\n\\n        require(\\n            balanceOutFinal >= balanceOutInitial + amountOutMin,\\n            \\\"RouteProcessor: Minimal ouput balance violation\\\"\\n        );\\n\\n        amountOut = balanceOutFinal - balanceOutInitial;\\n\\n        _safeTransfer(tokenOut, to, amountOut - estimatedFee);\\n        if (estimatedFee > 0) {\\n            _safeTransfer(tokenOut, feeWallet, estimatedFee);\\n        }\\n    }\\n\\n    function applyPermit(address tokenIn, uint256 stream) private {\\n        //address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s)\\n        uint256 value = stream.readUint();\\n        uint256 deadline = stream.readUint();\\n        uint8 v = stream.readUint8();\\n        bytes32 r = stream.readBytes32();\\n        bytes32 s = stream.readBytes32();\\n        IERC20Permit(tokenIn).safePermit(\\n            msg.sender,\\n            address(this),\\n            value,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n    }\\n\\n    /// @notice Processes native coin: call swap for all pools that swap from native coin\\n    /// @param stream Streamed process program\\n    function processNative(uint256 stream) private {\\n        uint256 amountTotal = address(this).balance;\\n        distributeAndSwap(stream, address(this), NATIVE_ADDRESS, amountTotal);\\n    }\\n\\n    /// @notice Processes ERC20 token from this contract balance:\\n    /// @notice Call swap for all pools that swap from this token\\n    /// @param stream Streamed process program\\n    function processMyERC20(uint256 stream) private {\\n        address token = stream.readAddress();\\n        uint256 amountTotal = IERC20(token).balanceOf(address(this));\\n        unchecked {\\n            if (amountTotal > 0) amountTotal -= 1; // slot undrain protection\\n        }\\n        distributeAndSwap(stream, address(this), token, amountTotal);\\n    }\\n\\n    /// @notice Processes ERC20 token from msg.sender balance:\\n    /// @notice Call swap for all pools that swap from this token\\n    /// @param stream Streamed process program\\n    /// @param amountTotal Amount of tokens to take from msg.sender\\n    function processUserERC20(uint256 stream, uint256 amountTotal) private {\\n        address token = stream.readAddress();\\n        distributeAndSwap(stream, msg.sender, token, amountTotal);\\n    }\\n\\n    /// @notice Distributes amountTotal to several pools according to their shares and calls swap for each pool\\n    /// @param stream Streamed process program\\n    /// @param from Where to take liquidity for swap\\n    /// @param tokenIn Input token\\n    /// @param amountTotal Total amount of tokenIn for swaps\\n    function distributeAndSwap(\\n        uint256 stream,\\n        address from,\\n        address tokenIn,\\n        uint256 amountTotal\\n    ) private {\\n        uint8 num = stream.readUint8();\\n        unchecked {\\n            for (uint256 i = 0; i < num; ++i) {\\n                uint16 share = stream.readUint16();\\n                uint256 amount = (amountTotal * share) / 65535;\\n                amountTotal -= amount;\\n                swap(stream, from, tokenIn, amount);\\n            }\\n        }\\n    }\\n\\n    /// @notice Processes ERC20 token for cases when the token has only one output pool\\n    /// @notice In this case liquidity is already at pool balance. This is an optimization\\n    /// @notice Call swap for all pools that swap from this token\\n    /// @param stream Streamed process program\\n    function processOnePool(uint256 stream) private {\\n        address token = stream.readAddress();\\n        swap(stream, address(this), token, 0);\\n    }\\n\\n    /// @notice Makes swap\\n    /// @param stream Streamed process program\\n    /// @param from Where to take liquidity for swap\\n    /// @param tokenIn Input token\\n    /// @param amountIn Amount of tokenIn to take for swap\\n    function swap(\\n        uint256 stream,\\n        address from,\\n        address tokenIn,\\n        uint256 amountIn\\n    ) private {\\n        uint8 poolType = stream.readUint8();\\n        if (poolType == 0) swapUniV2(stream, from, tokenIn, amountIn);\\n        else if (poolType == 1) swapUniV3(stream, from, tokenIn, amountIn);\\n        else if (poolType == 2) wrapNative(stream, from, tokenIn, amountIn);\\n        else if (poolType == 3) swapAlgebra(stream, from, tokenIn, amountIn);\\n        else revert(\\\"RouteProcessor: Unknown pool type\\\");\\n    }\\n\\n    /// @notice Wraps/unwraps native token\\n    /// @param stream [direction & fake, recipient, wrapToken?]\\n    /// @param from Where to take liquidity for swap\\n    /// @param tokenIn Input token\\n    /// @param amountIn Amount of tokenIn to take for swap\\n    function wrapNative(\\n        uint256 stream,\\n        address from,\\n        address tokenIn,\\n        uint256 amountIn\\n    ) private {\\n        uint8 directionAndFake = stream.readUint8();\\n        address to = stream.readAddress();\\n\\n        if (directionAndFake & 1 == 1) {\\n            // wrap native\\n            address wrapToken = stream.readAddress();\\n            if (directionAndFake & 2 == 0)\\n                IWETH(wrapToken).deposit{value: amountIn}();\\n            if (to != address(this))\\n                IERC20(wrapToken).safeTransfer(to, amountIn);\\n        } else {\\n            // unwrap native\\n            if (directionAndFake & 2 == 0) {\\n                if (from != address(this))\\n                    IERC20(tokenIn).safeTransferFrom(\\n                        from,\\n                        address(this),\\n                        amountIn\\n                    );\\n                IWETH(tokenIn).withdraw(amountIn);\\n            }\\n            payable(to).transfer(address(this).balance);\\n        }\\n    }\\n\\n    /// @notice UniswapV2 pool swap\\n    /// @param stream [pool, direction, recipient]\\n    /// @param from Where to take liquidity for swap\\n    /// @param tokenIn Input token\\n    /// @param amountIn Amount of tokenIn to take for swap\\n    function swapUniV2(\\n        uint256 stream,\\n        address from,\\n        address tokenIn,\\n        uint256 amountIn\\n    ) private {\\n        address pool = stream.readAddress();\\n        uint8 direction = stream.readUint8();\\n        address to = stream.readAddress();\\n\\n        (uint256 r0, uint256 r1, ) = IUniswapV2Pair(pool).getReserves();\\n        require(r0 > 0 && r1 > 0, \\\"Wrong pool reserves\\\");\\n        (uint256 reserveIn, uint256 reserveOut) = direction == 1\\n            ? (r0, r1)\\n            : (r1, r0);\\n\\n        if (amountIn != 0) {\\n            if (from == address(this))\\n                IERC20(tokenIn).safeTransfer(pool, amountIn);\\n            else IERC20(tokenIn).safeTransferFrom(from, pool, amountIn);\\n        } else amountIn = IERC20(tokenIn).balanceOf(pool) - reserveIn; // tokens already were transferred\\n\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 amountOut = (amountInWithFee * reserveOut) /\\n            (reserveIn * 1000 + amountInWithFee);\\n        (uint256 amount0Out, uint256 amount1Out) = direction == 1\\n            ? (uint256(0), amountOut)\\n            : (amountOut, uint256(0));\\n        IUniswapV2Pair(pool).swap(amount0Out, amount1Out, to, new bytes(0));\\n    }\\n\\n    /// @notice UniswapV3 pool swap\\n    /// @param stream [pool, direction, recipient]\\n    /// @param from Where to take liquidity for swap\\n    /// @param tokenIn Input token\\n    /// @param amountIn Amount of tokenIn to take for swap\\n    function swapUniV3(\\n        uint256 stream,\\n        address from,\\n        address tokenIn,\\n        uint256 amountIn\\n    ) private {\\n        address pool = stream.readAddress();\\n        bool zeroForOne = stream.readUint8() > 0;\\n        address recipient = stream.readAddress();\\n\\n        if (from != address(this)) {\\n            require(from == msg.sender, \\\"swapUniV3: unexpected from address\\\");\\n            IERC20(tokenIn).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                uint256(amountIn)\\n            );\\n        }\\n\\n        lastCalledPool = pool;\\n        IUniswapV3Pool(pool).swap(\\n            recipient,\\n            zeroForOne,\\n            int256(amountIn),\\n            zeroForOne ? MIN_SQRT_RATIO + 1 : MAX_SQRT_RATIO - 1,\\n            abi.encode(tokenIn)\\n        );\\n        require(\\n            lastCalledPool == IMPOSSIBLE_POOL_ADDRESS,\\n            \\\"RouteProcessor.swapUniV3: unexpected\\\"\\n        ); // Just to be sure\\n    }\\n\\n    /// @notice algebra pool swap\\n    /// @param stream [pool, direction, recipient]\\n    /// @param from Where to take liquidity for swap\\n    /// @param tokenIn Input token\\n    /// @param amountIn Amount of tokenIn to take for swap\\n    function swapAlgebra(\\n        uint256 stream,\\n        address from,\\n        address tokenIn,\\n        uint256 amountIn\\n    ) private {\\n        address pool = stream.readAddress();\\n        bool zeroForOne = stream.readUint8() > 0;\\n        address recipient = stream.readAddress();\\n\\n        if (from != address(this)) {\\n            require(from == msg.sender, \\\"swapAlgebra: unexpected from address\\\");\\n            IERC20(tokenIn).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                uint256(amountIn)\\n            );\\n        }\\n\\n        lastCalledPool = pool;\\n        IAlgebraPool(pool).swap(\\n            recipient,\\n            zeroForOne,\\n            int256(amountIn),\\n            zeroForOne ? MIN_SQRT_RATIO + 1 : MAX_SQRT_RATIO - 1,\\n            abi.encode(tokenIn)\\n        );\\n        require(\\n            lastCalledPool == IMPOSSIBLE_POOL_ADDRESS,\\n            \\\"RouteProcessor.swapAlgebra: unexpected\\\"\\n        ); // Just to be sure\\n    }\\n\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external {\\n        require(\\n            msg.sender == lastCalledPool,\\n            \\\"RouteProcessor.uniswapV3SwapCallback: call from unknown source\\\"\\n        );\\n        lastCalledPool = IMPOSSIBLE_POOL_ADDRESS;\\n        address tokenIn = abi.decode(data, (address));\\n        int256 amount = amount0Delta > 0 ? amount0Delta : amount1Delta;\\n        require(\\n            amount > 0,\\n            \\\"RouteProcessor.uniswapV3SwapCallback: not positive amount\\\"\\n        );\\n\\n        // Normally, RouteProcessor shouldn't have any liquidity on board\\n        // If some liquidity exists, it is sweept by the next user that makes swap through these tokens\\n        IERC20(tokenIn).safeTransfer(msg.sender, uint256(amount));\\n    }\\n\\n    /// @notice Called to `msg.sender` after executing a swap via IAlgebraPool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IAlgebraPoolActions#swap call\\n    function algebraSwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external {\\n        require(\\n            msg.sender == lastCalledPool,\\n            \\\"RouteProcessor.algebraSwapCallback: call from unknown source\\\"\\n        );\\n        lastCalledPool = IMPOSSIBLE_POOL_ADDRESS;\\n        address tokenIn = abi.decode(data, (address));\\n        int256 amount = amount0Delta > 0 ? amount0Delta : amount1Delta;\\n        require(\\n            amount > 0,\\n            \\\"RouteProcessor.algebraSwapCallback: not positive amount\\\"\\n        );\\n\\n        // Normally, RouteProcessor shouldn't have any liquidity on board\\n        // If some liquidity exists, it is sweept by the next user that makes swap through these tokens\\n        IERC20(tokenIn).safeTransfer(msg.sender, uint256(amount));\\n    }\\n\\n    function _safeTransfer(address token, address to, uint256 amount) internal {\\n        if (token == NATIVE_ADDRESS) {\\n            (bool success, ) = address(to).call{value: amount}(\\\"\\\");\\n            require(success, \\\"Transfer Helper: Failed to transfer ETH\\\");\\n        } else {\\n            IERC20(token).safeTransfer(to, amount);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"priviledgedUserList\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Route\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"algebraSwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"route\",\"type\":\"bytes\"}],\"name\":\"processRoute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"priviledge\",\"type\":\"bool\"}],\"name\":\"setPriviledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"transferValueTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountValueTransfer\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"estimatedFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"route\",\"type\":\"bytes\"}],\"name\":\"transferValueAndprocessRoute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RouteProcessor", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000367db1215bf0effdbc9a10d9fd4dd9dd896f670e00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000d52c556ecbd260cf3bf5b78f3f94d6878939adf7000000000000000000000000367db1215bf0effdbc9a10d9fd4dd9dd896f670e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}