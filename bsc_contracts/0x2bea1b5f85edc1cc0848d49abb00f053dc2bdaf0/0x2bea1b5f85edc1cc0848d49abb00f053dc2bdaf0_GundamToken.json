{"SourceCode": "// File: contracts/interfaces/IBEP20.sol\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * BEP20 standard interface\r\n */\r\ninterface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function decimals() external view returns (uint8);\r\n  function symbol() external view returns (string memory);\r\n  function name() external view returns (string memory);\r\n  function getOwner() external view returns (address);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interfaces/IPancakeRouter01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: contracts/interfaces/IPancakeRouter02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/interfaces/IPancakeFactory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n\r\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\r\n}\r\n\r\n// File: contracts/interfaces/IPancakeBEP20.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\ninterface IPancakeBEP20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n// File: contracts/libraries/SafeMath.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/Address.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Context.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * Basic access control mechanism\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    \r\n}\r\n\r\n// File: contracts/GundamToken.sol\r\n\r\n/*\r\nTG: https://t.me/GundamVerify\r\nWebsite: https://gundam-token.com\r\nAuthor: @DaCryptoDev\r\n */\r\npragma solidity ^0.8.4;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Contract Code\r\n */\r\ncontract GundamToken is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    // Events\r\n    event OwnerUpdateTaxes(uint8 reflectionTax,uint8 secondaryTax);\r\n    event OwnerRemoveLPPercent(uint8 LPPercent);\r\n    event OwnerExtendLPLock(uint256 timeSeconds);\r\n    event OwnerLockLP(uint256 liquidityUnlockSeconds);\r\n    event OwnerUpdateSwapThreshold(uint8 _swapThreshold);\r\n    event OwnerTriggerSwap(uint8 _swapThreshold,bool ignoreLimits);\r\n    event OwnerCreateLP(uint256 LPtokens,uint256 amountWei);\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(uint256 liquidityTokens,uint256 LPBNB);\r\n    // Mappings\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isExcluded;\r\n    mapping(address=>bool)private _marketMakers;\r\n    // Basic Contract Info\r\n    address[] private _excluded;\r\n    string private _name = \"Gundam Token\";\r\n    string private _symbol = \"CHAR\";\r\n    uint8 private _decimals = 18;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 2_500_000_000*(10**_decimals); // 2.5 B, 18 decimals\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    // Burn Wallet\r\n    address public burnWallet = 0x000000000000000000000000000000000000dEaD;\r\n    // Liquidity Wallet\r\n    address public liquidityWallet=0x442D579795CA105048d0A693a6b7699A8AB4D853;\r\n    // Marketing Wallet\r\n    address public marketingWallet=0x8cf419E121D51dd67408F29E8b3b7A08325436f2;\r\n    // BNB distribution\r\n    uint256 public totalLPBNB;\r\n    uint256 public totalMarketingBNB;\r\n    // Taxes 11 %\r\n    uint256 public _reflectFee=2;\r\n    uint256 private _previousReflectFee=_reflectFee;\r\n    uint256 public _secondaryTax=9;\r\n    uint256 private _previousSecondaryFee=_secondaryTax;\r\n    Taxes private _taxes;\r\n    struct Taxes {\r\n        uint8 liquidityTax;\r\n        uint8 marketingTax;\r\n    }\r\n    // PancakeSwap\r\n    IPancakeRouter02 public _pancakeRouter;\r\n    // Mainnet\r\n    address public _pancakeRouterAddress=0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    // address public BUSD=0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    // Testnet\r\n    // address public _pancakeRouterAddress=0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3;\r\n    // address public BUSD=0x8301F2213c0eeD49a7E28Ae4c3e91722919B8B47;\r\n    address public _pancakePairAddress;\r\n    address public activePairLiquidityAddress;\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = false;\r\n    uint8 private swapThreshold=5;\r\n    bool public tradingEnabled=false;\r\n    // Max wallet and TX\r\n    uint256 feeDenominator = 10000;\r\n    uint256 public _maxTxAmount = _tTotal.mul(300).div(feeDenominator); // 3%\r\n    uint256 public _maxWalletToken = _tTotal.mul(300).div(feeDenominator); // 3%\r\n    bool public maxWalletIsSet = true;\r\n    mapping (address => bool) isTxLimitExempt;\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    constructor () {\r\n        _isExcludedFromFee[owner()]=_isExcludedFromFee[burnWallet]=_isExcludedFromFee[address(this)]=_isExcludedFromFee[liquidityWallet]=_isExcludedFromFee[marketingWallet]=true;\r\n        _taxes.liquidityTax=60;\r\n        _taxes.marketingTax=40;\r\n        _pancakeRouter=IPancakeRouter02(_pancakeRouterAddress);\r\n        activePairLiquidityAddress = _pancakeRouter.WETH();\r\n        _pancakePairAddress=IPancakeFactory(_pancakeRouter.factory()).createPair(address(this),activePairLiquidityAddress);\r\n        isTxLimitExempt[_pancakePairAddress]=isTxLimitExempt[owner()]=isTxLimitExempt[address(this)]=isTxLimitExempt[liquidityWallet]=isTxLimitExempt[marketingWallet]=isTxLimitExempt[burnWallet]=true;\r\n        _approve(address(this),address(_pancakeRouter),type(uint256).max);\r\n        excludeFromReward(address(_pancakePairAddress));\r\n        excludeFromReward(address(burnWallet));\r\n        excludeFromReward(address(this));\r\n        excludeFromReward(liquidityWallet);\r\n        _marketMakers[_pancakePairAddress]=true;\r\n        _rOwned[owner()]=_rTotal;\r\n        emit Transfer(address(0),owner(),_tTotal);\r\n    }\r\n\r\n// Basic Internal Functions\r\n    \r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n    function getOwner() external view override returns (address) { return owner();}\r\n    \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    \r\n    receive() external payable {\r\n        require(msg.sender==owner()||msg.sender==_pancakeRouterAddress);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n// Reflections\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tSecondary) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tSecondary, _getRate());\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tSecondary);\r\n    }\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\r\n        uint256 tFee = calculateReflectFee(tAmount);\r\n        uint256 tSecondary = calculateSecondaryFee(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tFee, \"tAmount less than tFee\").sub(tSecondary, \"_getTValues: tAmount less than tSecondary\");\r\n        return (tTransferAmount, tFee, tSecondary);\r\n    }\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tSecondary, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rSecondary = tSecondary.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee, \"rAmount less than rFee\").sub(rSecondary, \"_getRValues: rAmount less than rSecondary\");\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;      \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]], \"_getCurrentSupply: rSupply less than _rOwned\");\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]], \"_getCurrentSupply: tSupply less than _tOwner\");\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n// Taxes\r\n    function calculateReflectFee(uint256 _amount) private view returns (uint256) {\r\n        if (_reflectFee == 0) return 0;\r\n        return _amount.mul(_reflectFee).div(\r\n            10**2\r\n        );\r\n    }\r\n    function calculateSecondaryFee(uint256 _amount) private view returns (uint256) {\r\n        if (_secondaryTax == 0) return 0;\r\n        return _amount.mul(_secondaryTax).div(\r\n            10**2\r\n        );\r\n    }\r\n    function removeAllFee() private {\r\n        if(_reflectFee == 0 && _secondaryTax == 0) return;\r\n        \r\n        _previousReflectFee = _reflectFee;\r\n        _previousSecondaryFee = _secondaryTax;\r\n        \r\n        _reflectFee = 0;\r\n        _secondaryTax = 0;\r\n    }\r\n    function restoreAllFee() private {\r\n        _reflectFee = _previousReflectFee;\r\n        _secondaryTax = _previousSecondaryFee;\r\n    }\r\n    function _takeFees(uint256 tSecondary, uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee, \"_takeFees: _rTotal less than rFee\");\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rSecondary = tSecondary.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rSecondary);\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tSecondary);\r\n    }\r\n    \r\n// Swap and distribution\r\n    function swapAndLiquify(uint8 _swapThreshold,bool ignoreLimits) private lockTheSwap {\r\n        uint256 toSwap=(_swapThreshold*balanceOf(_pancakePairAddress)).div(1000);\r\n        // Get balance of contract\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        // 1% of 2.5 B\r\n        uint256 maxSwapSize=_tTotal.div(100);\r\n        // toSwap cannot exceed 1 %\r\n        toSwap = toSwap > maxSwapSize ? maxSwapSize : toSwap;\r\n        if (contractBalance < toSwap) {\r\n            if (ignoreLimits)\r\n                toSwap = contractBalance;\r\n            else return;\r\n        }\r\n        uint256 totalLiquidityTokens=toSwap.mul(_taxes.liquidityTax).div(100);\r\n        uint256 tokensLeft=toSwap-totalLiquidityTokens;\r\n        uint256 liquidityTokens=totalLiquidityTokens.div(2);\r\n        uint256 liquidityBNBTokens=totalLiquidityTokens-liquidityTokens;\r\n        toSwap=liquidityBNBTokens+tokensLeft;\r\n        uint256 oldBNB=address(this).balance;\r\n        swapTokensForBNB(toSwap);\r\n        uint256 newBNB=address(this).balance-oldBNB;\r\n        uint256 LPBNB=(newBNB*liquidityBNBTokens)/toSwap;\r\n        addLiquidity(liquidityTokens, LPBNB);\r\n        uint256 remainingBNB=address(this).balance-oldBNB;\r\n        uint256 marketingBNB=(remainingBNB*_taxes.marketingTax).div(100);\r\n        totalMarketingBNB+=marketingBNB;\r\n        (bool successMarketing, /* bytes memory data */) = payable(marketingWallet).call{value: marketingBNB, gas: 30000}(\"\");\r\n        require(successMarketing, \"marketing receiver rejected ETH transfer\");\r\n        emit SwapAndLiquify(liquidityTokens,LPBNB);\r\n    }\r\n    function swapTokensForBNB(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        // WBNB\r\n        path[1] = activePairLiquidityAddress;\r\n        _pancakeRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            // Receiver address\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    function addLiquidity(uint256 tokenAmount, uint256 amountWei) private {\r\n        totalLPBNB+=amountWei;\r\n        _pancakeRouter.addLiquidityETH{value: amountWei}(\r\n            // Liquidity Tokens are sent from contract, NOT OWNER!\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            liquidityWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n// Transfer\r\n    function _transfer(address from,address to,uint256 amount) private {\r\n        require(tradingEnabled || from == owner());\r\n        if (tradingEnabled) {\r\n            // Check max wallet\r\n            checkMaxWallet(to, amount);\r\n            // Checks maxTx\r\n            checkTxLimit(from, amount, to);\r\n        }\r\n        \r\n        if (!inSwapAndLiquify &&\r\n            !_marketMakers[from] &&\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n           swapAndLiquify(swapThreshold,false);\r\n        }\r\n        bool takeFee = true;\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to] || !tradingEnabled){\r\n            takeFee = false;\r\n        }\r\n        _tokenTransfer(from,to,amount,takeFee);\r\n    }\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\r\n        if(!takeFee)\r\n            removeAllFee();\r\n        \r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n        \r\n        if(!takeFee)\r\n            restoreAllFee();\r\n    }\r\n   function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tSecondary) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount, \"_transferStandard: _rOwned less than rAmount\");\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeFees(tSecondary, rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tSecondary) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount, \"_transferToExcluded: _rOwned less than rAmount\");\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \r\n        _takeFees(tSecondary, rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tSecondary) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount, \"_transferFromExcluded: _tOwned less than tAmount\");\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount, \"_transferFromExcluded: _rOwned less than rAmount\");\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \r\n        _takeFees(tSecondary, rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tSecondary) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount, \"_transferBothExcluded: _tOwned less than tAmount\");\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount, \"_transferBothExcluded: _rOwned less than rAmount\");\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \r\n        _takeFees(tSecondary, rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    // Check maxWallet\r\n    function checkMaxWallet(address recipient, uint256 amount) internal view {\r\n        if (maxWalletIsSet) {\r\n            if (!isTxLimitExempt[recipient] && recipient != owner() && recipient != address(this)){\r\n                uint256 heldTokens = balanceOf(recipient);\r\n                require((heldTokens + amount) <= _maxWalletToken, \"CHAR: Max wallet exceeded.\");\r\n            }\r\n        }\r\n    }\r\n    // Check for maxTX\r\n    function checkTxLimit(address sender, uint256 amount, address recipient) internal view {\r\n        if (recipient != owner()){\r\n            require(amount <= _maxTxAmount || isTxLimitExempt[sender] || isTxLimitExempt[recipient], \"CHAR: TX Limit Exceeded\");\r\n        }\r\n    }\r\n// View Functions\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n    function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount / (currentRate);\r\n    }\r\n// Owner Functions\r\n    function excludeFromReward(address account) public onlyOwner {\r\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    function excludeFromFee(address account,bool excluded) public onlyOwner {\r\n        _isExcludedFromFee[account]=excluded;\r\n    }\r\n    function ownerWithdrawBNB() public onlyOwner {\r\n        (bool success,) = owner().call{value: (address(this).balance)}(\"\");\r\n        require(success);\r\n    }\r\n    function ownerUpdateTaxes(uint8 reflectFee, uint8 secondaryTaxFee) public onlyOwner {\r\n        require((reflectFee+secondaryTaxFee)<=11);\r\n        _reflectFee=reflectFee;\r\n        _secondaryTax=secondaryTaxFee;\r\n        emit OwnerUpdateTaxes(reflectFee,secondaryTaxFee);\r\n    }\r\n    function ownerFixStuckBNB() public onlyOwner {\r\n        uint256 stuckBNB=address(this).balance-(totalMarketingBNB);\r\n        totalMarketingBNB+=(stuckBNB>0?stuckBNB:0);\r\n    }\r\n    // Cannot withdraw token, or LP-token from contract\r\n    function ownerWithdrawCakeLP(address cakeLP) public onlyOwner {\r\n        require(cakeLP!=address(this));\r\n        IBEP20 token=IBEP20(cakeLP);\r\n        token.transfer(owner(), token.balanceOf(address(this)));\r\n    }\r\n    function ownerTriggerSwap(uint8 _swapThreshold,bool ignoreLimits) public onlyOwner {\r\n        swapAndLiquify(_swapThreshold,ignoreLimits);\r\n        emit OwnerTriggerSwap(_swapThreshold,ignoreLimits);\r\n    }\r\n    function ownerSwitchSwapAndLiquify(bool enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled=enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(enabled);\r\n    }\r\n    function ownerUpdateAMM(address marketMaker,bool enabled) public onlyOwner {\r\n        _marketMakers[marketMaker]=enabled;\r\n    }\r\n    function ownerUpdatePancakePair(address _pancakePair, address pancakeRouter, address _activePairLiquidityAddress) public onlyOwner {\r\n        _pancakePairAddress=_pancakePair;\r\n        _pancakeRouterAddress=pancakeRouter;\r\n        _pancakeRouter=IPancakeRouter02(_pancakeRouterAddress);\r\n        activePairLiquidityAddress=_activePairLiquidityAddress;\r\n    }\r\n    function ownerUpdateSecondaryTaxes(uint8 marketingTax,uint8 liquidityTax) public onlyOwner {\r\n        require((liquidityTax+marketingTax)<=100);\r\n        _taxes.liquidityTax=liquidityTax;\r\n        _taxes.marketingTax=marketingTax;\r\n    }\r\n    function ownerUpdateSwapThreshold(uint8 _swapThreshold) public onlyOwner {\r\n        require(_swapThreshold<=50);\r\n        swapThreshold=_swapThreshold;\r\n        emit OwnerUpdateSwapThreshold(_swapThreshold);\r\n    }\r\n    function ownerWithdrawMarketingBNB(uint256 amountWei) public onlyOwner {\r\n        require(amountWei<=totalMarketingBNB);\r\n        (bool sent,) = address(marketingWallet).call{value: (amountWei)}(\"\");\r\n        require(sent);\r\n        totalMarketingBNB-=amountWei;\r\n    }\r\n    function enableTrading() public onlyOwner {\r\n        tradingEnabled=true;\r\n    }\r\n    // Exempt from max TX\r\n    function setIsTxLimitExempt(address holder, bool exempt) external onlyOwner {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n    function setMaxWalletPercent(uint8 maxWallPercent) external onlyOwner {\r\n        require(maxWallPercent >= 100); // 1% is the smallest we can make the max wallet\r\n        _maxWalletToken = _tTotal.mul(maxWallPercent).div(feeDenominator);\r\n    }\r\n    function setTxLimitInPercent(uint8 maxTxPercent) external onlyOwner {\r\n        require(maxTxPercent >= 50); // 0.5% is the smallest we can make the max transaction\r\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(feeDenominator);\r\n    }\r\n    // Ownable function overrides\r\n    function transferOwnership(address newOwner) public override onlyOwner {\r\n        super.transferOwnership(newOwner);\r\n        // Ensure the new owner is exempt from Tx limit etc.\r\n        isTxLimitExempt[newOwner] = true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LPtokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWei\",\"type\":\"uint256\"}],\"name\":\"OwnerCreateLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeSeconds\",\"type\":\"uint256\"}],\"name\":\"OwnerExtendLPLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityUnlockSeconds\",\"type\":\"uint256\"}],\"name\":\"OwnerLockLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"LPPercent\",\"type\":\"uint8\"}],\"name\":\"OwnerRemoveLPPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_swapThreshold\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"ignoreLimits\",\"type\":\"bool\"}],\"name\":\"OwnerTriggerSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_swapThreshold\",\"type\":\"uint8\"}],\"name\":\"OwnerUpdateSwapThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"reflectionTax\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"secondaryTax\",\"type\":\"uint8\"}],\"name\":\"OwnerUpdateTaxes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"LPBNB\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pancakePairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pancakeRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reflectFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_secondaryTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePairLiquidityAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletIsSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerFixStuckBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ownerSwitchSwapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_swapThreshold\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"ignoreLimits\",\"type\":\"bool\"}],\"name\":\"ownerTriggerSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketMaker\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ownerUpdateAMM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pancakePair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pancakeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_activePairLiquidityAddress\",\"type\":\"address\"}],\"name\":\"ownerUpdatePancakePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"marketingTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"liquidityTax\",\"type\":\"uint8\"}],\"name\":\"ownerUpdateSecondaryTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_swapThreshold\",\"type\":\"uint8\"}],\"name\":\"ownerUpdateSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"reflectFee\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"secondaryTaxFee\",\"type\":\"uint8\"}],\"name\":\"ownerUpdateTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWithdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cakeLP\",\"type\":\"address\"}],\"name\":\"ownerWithdrawCakeLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWei\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawMarketingBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"maxWallPercent\",\"type\":\"uint8\"}],\"name\":\"setMaxWalletPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"maxTxPercent\",\"type\":\"uint8\"}],\"name\":\"setTxLimitInPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLPBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMarketingBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GundamToken", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6a5727ecb76ef6db08e64a72f4c16a28f7dcb1f1549374d2bb9553186550b7e7"}