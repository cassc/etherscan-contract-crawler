{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ncontract GovManager is Ownable {\r\n    event GovernorUpdated (\r\n        address indexed oldGovernor,\r\n        address indexed newGovernor\r\n    );\r\n\r\n    address public GovernorContract;\r\n\r\n    modifier onlyOwnerOrGov() {\r\n        require(\r\n            msg.sender == owner() || msg.sender == GovernorContract,\r\n            \"Authorization Error\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function setGovernorContract(address _address) external onlyOwnerOrGov {\r\n        address oldGov = GovernorContract;\r\n        GovernorContract = _address;\r\n        emit GovernorUpdated(oldGov, GovernorContract);\r\n    }\r\n\r\n    constructor() {\r\n        GovernorContract = address(0);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract MultiManageable is GovManager {\r\n    constructor(address _LockedDealAddress, uint256 _transactionLimit) {\r\n        // isContract function will always return false when used in constructor\r\n        _lockedDealAddress = _LockedDealAddress;\r\n        _setMaxTransactionLimit(_transactionLimit);\r\n    }\r\n\r\n    uint256 private _maxTransactionLimit;\r\n    address private _lockedDealAddress;\r\n\r\n    event maxTransactionChange(uint256 OldVaule, uint256 NewValue);\r\n    event lockedDealChange(address OldVaule, address NewValue);\r\n\r\n    function lockedDealAddress() public view returns (address) {\r\n        return _lockedDealAddress;\r\n    }\r\n\r\n    function maxTransactionLimit() public view returns (uint256) {\r\n        return _maxTransactionLimit;\r\n    }\r\n\r\n    function setLockedDealAddress(\r\n        address _LockedDealAddress\r\n    ) external onlyOwnerOrGov {\r\n        _setLockDealAddresss(_LockedDealAddress);\r\n    }\r\n\r\n    ///@dev The LockedDeal address should be a contract or null address \r\n    /// Null address is a way to stop contract using.\r\n    function _setLockDealAddresss(address newAddress) internal {\r\n        require(\r\n            _lockedDealAddress != newAddress,\r\n            \"Can't set the same LockedDeal address\"\r\n        );\r\n        require(\r\n            newAddress == address(0x0) || Address.isContract(newAddress),\r\n            \"Invalid contract address LockedDeal or is not null\"\r\n        );\r\n        address Old = _lockedDealAddress;\r\n        _lockedDealAddress = newAddress;\r\n        emit lockedDealChange(Old, _lockedDealAddress);\r\n    }\r\n\r\n    function setMaxTransactionLimit(uint256 _newLimit) external onlyOwnerOrGov {\r\n        _setMaxTransactionLimit(_newLimit);\r\n    }\r\n\r\n    function _setMaxTransactionLimit(uint256 _newLimit) internal {\r\n        uint256 Old = _maxTransactionLimit;\r\n        _maxTransactionLimit = _newLimit;\r\n        emit maxTransactionChange(Old, _maxTransactionLimit);\r\n    }\r\n}\r\n\r\n\r\ninterface ILockedDealV2 {\r\n    function CreateNewPool(\r\n        address _Token, //token to lock address\r\n        uint256 _StartTime, //Until what time the pool will start\r\n        uint256 _CliffTime, //Before CliffTime can't withdraw tokens\r\n        uint256 _FinishTime, //Until what time the pool will end\r\n        uint256 _StartAmount, //Total amount of the tokens to sell in the pool\r\n        address _Owner // Who the tokens belong to\r\n    ) external payable;\r\n\r\n    function CreatePoolsWrtTime(\r\n        address _Token,\r\n        uint256[] calldata _StartTime,\r\n        uint256[] calldata _CliffTime,\r\n        uint256[] calldata _FinishTime,\r\n        uint256[] calldata _StartAmount,\r\n        address[] calldata _Owner\r\n    ) external payable;\r\n\r\n    function Index() external returns (uint256);\r\n\r\n    function GetMyPoolsId(\r\n        address _UserAddress\r\n    ) external view returns (uint256[] memory);\r\n\r\n    function GetMyPoolsIdByToken(\r\n        address _UserAddress,\r\n        address[] memory _Tokens\r\n    ) external view returns (uint256[] memory);\r\n\r\n    function WithdrawToken(\r\n        uint256 _PoolId\r\n    ) external returns (uint256 withdrawnAmount);\r\n\r\n    function SplitPoolAmountFrom(\r\n        uint256 _LDpoolId,\r\n        uint256 _Amount,\r\n        address _Address\r\n    ) external returns(uint256 poolId);\r\n\r\n    function Allowance(\r\n        uint256 _poolId,\r\n        address _user\r\n    ) external view returns(uint256 amount);\r\n\r\n    function AllPoolz(uint256 _LDpoolId) external view returns (\r\n        uint256 StartTime,\r\n        uint256 CliffTime,\r\n        uint256 FinishTime,\r\n        uint256 StartAmount,\r\n        uint256 DebitedAmount,\r\n        address Owner,\r\n        address Token\r\n    );\r\n}\r\n\r\n\r\n/// @title contains array utility functions\r\nlibrary Array {\r\n    /// @dev returns a new slice of the array\r\n    function KeepNElementsInArray(uint256[] memory _arr, uint256 _n)\r\n        internal\r\n        pure\r\n        returns (uint256[] memory newArray)\r\n    {\r\n        if (_arr.length == _n) return _arr;\r\n        require(_arr.length > _n, \"can't cut more then got\");\r\n        newArray = new uint256[](_n);\r\n        for (uint256 i = 0; i < _n; ++i) {\r\n            newArray[i] = _arr[i];\r\n        }\r\n        return newArray;\r\n    }\r\n\r\n    function KeepNElementsInArray(address[] memory _arr, uint256 _n)\r\n        internal\r\n        pure\r\n        returns (address[] memory newArray)\r\n    {\r\n        if (_arr.length == _n) return _arr;\r\n        require(_arr.length > _n, \"can't cut more then got\");\r\n        newArray = new address[](_n);\r\n        for (uint256 i = 0; i < _n; ++i) {\r\n            newArray[i] = _arr[i];\r\n        }\r\n        return newArray;\r\n    }\r\n\r\n    /// @return true if the array is ordered\r\n    function isArrayOrdered(uint256[] memory _arr)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        require(_arr.length > 0, \"array should be greater than zero\");\r\n        uint256 temp = _arr[0];\r\n        for (uint256 i = 1; i < _arr.length; ++i) {\r\n            if (temp > _arr[i]) {\r\n                return false;\r\n            }\r\n            temp = _arr[i];\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @return sum of the array elements\r\n    function getArraySum(uint256[] memory _array)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 sum = 0;\r\n        for (uint256 i = 0; i < _array.length; ++i) {\r\n            sum = sum + _array[i];\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    /// @return true if the element exists in the array\r\n    function isInArray(address[] memory _arr, address _elem)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        for (uint256 i = 0; i < _arr.length; ++i) {\r\n            if (_arr[i] == _elem) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function addIfNotExsist(address[] storage _arr, address _elem) internal {\r\n        if (!Array.isInArray(_arr, _elem)) {\r\n            _arr.push(_elem);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/// @author The-Poolz contracts team\r\ncontract MultiWithdraw is MultiManageable {\r\n    constructor(\r\n        address _LockedDealAddress,\r\n        uint256 _maxTransactionLimit\r\n    ) MultiManageable(_LockedDealAddress, _maxTransactionLimit) {}\r\n\r\n    event TokensWithdrawn(\r\n        uint256[] withdrawnPoolIds,\r\n        uint256[] emptyPoolIds,\r\n        uint256 amount\r\n    );\r\n\r\n    modifier notZeroAddress(address _LockedDeal) {\r\n        require(\r\n            _LockedDeal != address(0x0),\r\n            \"LockedDeal can't be zero address\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier isBelowLimit(uint256 _num) {\r\n        require(_num <= maxTransactionLimit(), \" Invalid array length limit\");\r\n        _;\r\n    }\r\n\r\n    function MultiWithdrawAllMyDeals()\r\n        external\r\n        notZeroAddress(lockedDealAddress())\r\n    {\r\n        _processTokenWithdrawals(\r\n            ILockedDealV2(lockedDealAddress()).GetMyPoolsId(msg.sender)\r\n        );\r\n    }\r\n\r\n    function MultiWithdrawTokens(\r\n        uint256[] calldata _poolIds\r\n    ) external notZeroAddress(lockedDealAddress()) {\r\n        _processTokenWithdrawals(_poolIds);\r\n    }\r\n\r\n    function MultiWithdrawByToken(\r\n        address _token\r\n    ) external notZeroAddress(lockedDealAddress()) notZeroAddress(_token) {\r\n        address[] memory tokenElement = new address[](1);\r\n        tokenElement[0] = _token;\r\n        _processTokenWithdrawals(\r\n            ILockedDealV2(lockedDealAddress()).GetMyPoolsIdByToken(\r\n                msg.sender,\r\n                tokenElement\r\n            )\r\n        );\r\n    }\r\n\r\n    function _processTokenWithdrawals(\r\n        uint256[] memory _poolIds\r\n    ) internal isBelowLimit(_poolIds.length) {\r\n        uint256 arrLength = _poolIds.length;\r\n        uint256[] memory withdrawnPoolIds = new uint256[](arrLength);\r\n        uint256[] memory emptyPoolIds = new uint256[](arrLength);\r\n        uint256 totalAmount;\r\n        uint256 tempAmount;\r\n        uint256 j = 0;\r\n        uint256 k = 0;\r\n        for (uint256 i = 0; i < arrLength; ++i) {\r\n            tempAmount = ILockedDealV2(lockedDealAddress()).WithdrawToken(\r\n                _poolIds[i]\r\n            );\r\n            if (tempAmount > 0) {\r\n                withdrawnPoolIds[j++] = _poolIds[i];\r\n                totalAmount += tempAmount;\r\n            } else {\r\n                emptyPoolIds[k++] = _poolIds[i];\r\n            }\r\n        }\r\n        emit TokensWithdrawn(\r\n            Array.KeepNElementsInArray(withdrawnPoolIds, j),\r\n            Array.KeepNElementsInArray(emptyPoolIds, k),\r\n            totalAmount\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LockedDealAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxTransactionLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"withdrawnPoolIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"emptyPoolIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"OldVaule\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"NewValue\",\"type\":\"address\"}],\"name\":\"lockedDealChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"OldVaule\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"NewValue\",\"type\":\"uint256\"}],\"name\":\"maxTransactionChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GovernorContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MultiWithdrawAllMyDeals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"MultiWithdrawByToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_poolIds\",\"type\":\"uint256[]\"}],\"name\":\"MultiWithdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedDealAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setGovernorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LockedDealAddress\",\"type\":\"address\"}],\"name\":\"setLockedDealAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxTransactionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MultiWithdraw", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000436ce2ce8d8d2ccc062f6e92faf410db4d39790500000000000000000000000000000000000000000000000000000000000003e8", "EVMVersion": "byzantium", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://84049640a21f051811b186be0f9f5e68ba95958b3db2ba29f901ee1773bb8fd0"}