{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"LPStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"Ownable.sol\\\";\\nimport \\\"IERC20.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"ReentrancyGuard.sol\\\";\\n\\ninterface IIncentiveVoting {\\n    function getRewardsPerSecond(address _pool, uint256 _week) external view returns (uint256);\\n    function startTime() external view returns (uint256);\\n}\\n\\ninterface IERC20Mintable {\\n    function mint(address _to, uint256 _value) external returns (bool);\\n    function minter() external view returns (address);\\n}\\n\\ninterface ITokenLocker {\\n    function userWeight(address _user) external view returns (uint256);\\n    function totalWeight() external view returns (uint256);\\n}\\n\\ninterface IStableSwap {\\n    function withdraw_admin_fees() external;\\n}\\n\\n\\n// based on the Sushi MasterChef\\n// https://github.com/sushiswap/sushiswap/blob/master/contracts/MasterChef.sol\\ncontract EllipsisLpStaking is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 depositAmount;  // The amount of tokens deposited into the contract.\\n        uint256 adjustedAmount; // The user's effective balance after boosting, used to calculate emission rates.\\n        uint256 rewardDebt;\\n        uint256 claimable;\\n    }\\n    // Info of each pool.\\n    struct PoolInfo {\\n        uint256 adjustedSupply;\\n        uint256 rewardsPerSecond;\\n        uint256 lastRewardTime; // Last second that reward distribution occurs.\\n        uint256 accRewardPerShare; // Accumulated rewards per share, times 1e12. See below.\\n    }\\n\\n    uint256 public immutable maxMintableTokens;\\n    uint256 public mintedTokens;\\n\\n    // Info of each pool.\\n    address[] public registeredTokens;\\n    mapping(address => PoolInfo) public poolInfo;\\n\\n    // token => user => Info of each user that stakes LP tokens.\\n    mapping(address => mapping(address => UserInfo)) public userInfo;\\n    // The timestamp when reward mining starts.\\n    uint256 public immutable startTime;\\n\\n    // account earning rewards => receiver of rewards for this account\\n    // if receiver is set to address(0), rewards are paid to the earner\\n    // this is used to aid 3rd party contract integrations\\n    mapping (address => address) public claimReceiver;\\n\\n    // when set to true, other accounts cannot call\\n    // `deposit` or `claim` on behalf of an account\\n    mapping(address => bool) public blockThirdPartyActions;\\n\\n    // token => timestamp of last admin fee claim for the related pool\\n    // admin fees are claimed once per day when a user claims pending\\n    // rewards for the lp token\\n    mapping(address => uint256) public lastFeeClaim;\\n\\n    IERC20Mintable public immutable rewardToken;\\n    IIncentiveVoting public immutable incentiveVoting;\\n    ITokenLocker public immutable tokenLocker;\\n\\n    event Deposit(\\n        address indexed user,\\n        address indexed token,\\n        uint256 amount\\n    );\\n    event Withdraw(\\n        address indexed user,\\n        address indexed token,\\n        uint256 amount\\n    );\\n    event EmergencyWithdraw(\\n        address indexed token,\\n        address indexed user,\\n        uint256 amount\\n    );\\n    event ClaimedReward(\\n        address indexed caller,\\n        address indexed claimer,\\n        address indexed receiver,\\n        uint256 amount\\n    );\\n    event FeeClaimSuccess(address pool);\\n    event FeeClaimRevert(address pool);\\n\\n    constructor(\\n        IERC20Mintable _rewardToken,\\n        IIncentiveVoting _incentiveVoting,\\n        ITokenLocker _tokenLocker,\\n        uint256 _maxMintable\\n    )\\n    {\\n        startTime = _incentiveVoting.startTime();\\n        rewardToken = _rewardToken;\\n        incentiveVoting = _incentiveVoting;\\n        tokenLocker = _tokenLocker;\\n        maxMintableTokens = _maxMintable;\\n    }\\n\\n    /**\\n        @notice The current number of stakeable LP tokens\\n     */\\n    function poolLength() external view returns (uint256) {\\n        return registeredTokens.length;\\n    }\\n\\n    /**\\n        @notice Add a new token that may be staked within this contract\\n        @dev Called by `IncentiveVoting` after a successful token approval vote\\n     */\\n    function addPool(address _token) external returns (bool) {\\n        require(msg.sender == address(incentiveVoting), \\\"Sender not incentiveVoting\\\");\\n        require(poolInfo[_token].lastRewardTime == 0);\\n        registeredTokens.push(_token);\\n        poolInfo[_token].lastRewardTime = block.timestamp;\\n        return true;\\n    }\\n\\n    /**\\n        @notice Set the claim receiver address for the caller\\n        @dev When the claim receiver is not == address(0), all\\n             emission claims are transferred to this address\\n        @param _receiver Claim receiver address\\n     */\\n    function setClaimReceiver(address _receiver) external {\\n        claimReceiver[msg.sender] = _receiver;\\n    }\\n\\n    /**\\n        @notice Allow or block third-party calls to deposit, withdraw\\n                or claim rewards on behalf of the caller\\n     */\\n    function setBlockThirdPartyActions(bool _block) external {\\n        blockThirdPartyActions[msg.sender] = _block;\\n    }\\n\\n    /**\\n        @notice Get the current number of unclaimed rewards for a user on one or more tokens\\n        @param _user User to query pending rewards for\\n        @param _tokens Array of token addresses to query\\n        @return uint256[] Unclaimed rewards\\n     */\\n    function claimableReward(address _user, address[] calldata _tokens)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory claimable = new uint256[](_tokens.length);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            PoolInfo storage pool = poolInfo[token];\\n            UserInfo storage user = userInfo[token][_user];\\n            (uint256 accRewardPerShare,) = _getRewardData(token);\\n            accRewardPerShare += pool.accRewardPerShare;\\n            claimable[i] = user.claimable + user.adjustedAmount * accRewardPerShare / 1e12 - user.rewardDebt;\\n        }\\n        return claimable;\\n    }\\n\\n    // Get updated reward data for the given token\\n    function _getRewardData(address _token) internal view returns (uint256 accRewardPerShare, uint256 rewardsPerSecond) {\\n        PoolInfo storage pool = poolInfo[_token];\\n        uint256 lpSupply = pool.adjustedSupply;\\n        uint256 start = startTime;\\n        uint256 currentWeek = (block.timestamp - start) / 604800;\\n\\n        if (lpSupply == 0) {\\n            return (0, incentiveVoting.getRewardsPerSecond(_token, currentWeek));\\n        }\\n\\n        uint256 lastRewardTime = pool.lastRewardTime;\\n        uint256 rewardWeek = (lastRewardTime - start) / 604800;\\n        rewardsPerSecond = pool.rewardsPerSecond;\\n        uint256 reward;\\n        uint256 duration;\\n        if (rewardWeek < currentWeek) {\\n            while (rewardWeek < currentWeek) {\\n                uint256 nextRewardTime = (rewardWeek + 1) * 604800 + start;\\n                duration = nextRewardTime - lastRewardTime;\\n                reward = reward + duration * rewardsPerSecond;\\n                rewardWeek += 1;\\n                rewardsPerSecond = incentiveVoting.getRewardsPerSecond(_token, rewardWeek);\\n                lastRewardTime = nextRewardTime;\\n            }\\n        }\\n\\n        duration = block.timestamp - lastRewardTime;\\n        reward = reward + duration * rewardsPerSecond;\\n        return (reward * 1e12 / lpSupply, rewardsPerSecond);\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function _updatePool(address _token) internal returns (uint256 accRewardPerShare) {\\n        PoolInfo storage pool = poolInfo[_token];\\n        uint256 lastRewardTime = pool.lastRewardTime;\\n        require(lastRewardTime > 0, \\\"Invalid pool\\\");\\n        if (block.timestamp <= lastRewardTime) {\\n            return pool.accRewardPerShare;\\n        }\\n        (accRewardPerShare, pool.rewardsPerSecond) = _getRewardData(_token);\\n        pool.lastRewardTime = block.timestamp;\\n        if (accRewardPerShare == 0) return pool.accRewardPerShare;\\n        accRewardPerShare = accRewardPerShare + pool.accRewardPerShare;\\n        pool.accRewardPerShare = accRewardPerShare;\\n        return accRewardPerShare;\\n    }\\n\\n    // calculate adjusted balance and total supply, used for boost\\n    // boost calculations are modeled after veCRV, with a max boost of 2.5x\\n    function _updateLiquidityLimits(address _user, address _token, uint256 _depositAmount, uint256 _accRewardPerShare) internal {\\n        uint256 userWeight = tokenLocker.userWeight(_user);\\n        uint256 adjustedAmount = _depositAmount * 40 / 100;\\n        if (userWeight > 0) {\\n            uint256 lpSupply = IERC20(_token).balanceOf(address(this));\\n            uint256 totalWeight = tokenLocker.totalWeight();\\n            uint256 boost = lpSupply * userWeight / totalWeight * 60 / 100;\\n            adjustedAmount += boost;\\n            if (adjustedAmount > _depositAmount) {\\n                adjustedAmount = _depositAmount;\\n            }\\n        }\\n        UserInfo storage user = userInfo[_token][_user];\\n        uint256 newAdjustedSupply = poolInfo[_token].adjustedSupply - user.adjustedAmount;\\n        user.adjustedAmount = adjustedAmount;\\n        poolInfo[_token].adjustedSupply = newAdjustedSupply + adjustedAmount;\\n        user.rewardDebt = adjustedAmount * _accRewardPerShare / 1e12;\\n    }\\n\\n    /**\\n        @notice Deposit LP tokens into the contract\\n        @dev Also updates the receiver's current boost\\n        @param _token LP token address to deposit.\\n        @param _amount Amount of tokens to deposit.\\n        @param _claimRewards If true, also claim rewards earned on the token.\\n        @return uint256 Claimed reward amount\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        bool _claimRewards\\n    ) external nonReentrant returns (uint256) {\\n        require(_amount > 0, \\\"Cannot deposit zero\\\");\\n        uint256 accRewardPerShare = _updatePool(_token);\\n        UserInfo storage user = userInfo[_token][msg.sender];\\n        uint256 pending;\\n        if (user.adjustedAmount > 0) {\\n            pending = user.adjustedAmount * accRewardPerShare / 1e12 - user.rewardDebt;\\n            if (_claimRewards) {\\n                pending += user.claimable;\\n                user.claimable = 0;\\n                pending = _mintRewards(msg.sender, pending);\\n            } else if (pending > 0) {\\n                user.claimable += pending;\\n                pending = 0;\\n            }\\n        }\\n        IERC20(_token).safeTransferFrom(\\n            address(msg.sender),\\n            address(this),\\n            _amount\\n        );\\n        uint256 depositAmount = user.depositAmount + _amount;\\n        user.depositAmount = depositAmount;\\n        _updateLiquidityLimits(msg.sender, _token, depositAmount, accRewardPerShare);\\n        emit Deposit(msg.sender, _token, _amount);\\n        return pending;\\n    }\\n\\n    /**\\n        @notice Withdraw LP tokens from the contract\\n        @dev Also updates the caller's current boost\\n        @param _token LP token address to withdraw.\\n        @param _amount Amount of tokens to withdraw.\\n        @param _claimRewards If true, also claim rewards earned on the token.\\n        @return uint256 Claimed reward amount\\n     */\\n    function withdraw(\\n        address _token,\\n        uint256 _amount,\\n        bool _claimRewards\\n    ) external nonReentrant returns (uint256) {\\n        require(_amount > 0, \\\"Cannot withdraw zero\\\");\\n        uint256 accRewardPerShare = _updatePool(_token);\\n        UserInfo storage user = userInfo[_token][msg.sender];\\n        uint256 depositAmount = user.depositAmount;\\n        require(depositAmount >= _amount, \\\"withdraw: not good\\\");\\n\\n        uint256 pending = user.adjustedAmount * accRewardPerShare / 1e12 - user.rewardDebt;\\n        if (_claimRewards) {\\n            pending += user.claimable;\\n            user.claimable = 0;\\n            pending = _mintRewards(msg.sender, pending);\\n        } else if (pending > 0) {\\n            user.claimable += pending;\\n            pending = 0;\\n        }\\n\\n        depositAmount -= _amount;\\n        user.depositAmount = depositAmount;\\n        _updateLiquidityLimits(msg.sender, _token, depositAmount, accRewardPerShare);\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n        emit Withdraw(msg.sender, _token, _amount);\\n        return pending;\\n    }\\n\\n    /**\\n        @notice Withdraw a user's complete deposited balance of an LP token\\n                without updating rewards calculations.\\n        @dev Should be used only in an emergency when there is an error in\\n             the reward math that prevents a normal withdrawal.\\n        @param _token LP token address to withdraw.\\n     */\\n    function emergencyWithdraw(address _token) external nonReentrant {\\n        UserInfo storage user = userInfo[_token][msg.sender];\\n        poolInfo[_token].adjustedSupply -= user.adjustedAmount;\\n\\n        uint256 amount = user.depositAmount;\\n        delete userInfo[_token][msg.sender];\\n        IERC20(_token).safeTransfer(address(msg.sender), amount);\\n        emit EmergencyWithdraw(_token, msg.sender, amount);\\n    }\\n\\n    /**\\n        @notice Claim pending rewards for one or more tokens for a user.\\n        @dev Also updates the claimer's boost.\\n        @param _user Address to claim rewards for. Reverts if the caller is not the\\n                     claimer and the claimer has blocked third-party actions.\\n        @param _tokens Array of LP token addresses to claim for.\\n        @return uint256 Claimed reward amount\\n     */\\n    function claim(address _user, address[] calldata _tokens) external returns (uint256) {\\n        if (msg.sender != _user) {\\n            require(!blockThirdPartyActions[_user], \\\"Cannot claim on behalf of this account\\\");\\n        }\\n\\n        // calculate claimable amount\\n        uint256 pending;\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            uint256 accRewardPerShare = _updatePool(token);\\n            UserInfo storage user = userInfo[token][_user];\\n            uint256 rewardDebt = user.adjustedAmount * accRewardPerShare / 1e12;\\n            pending += user.claimable + rewardDebt - user.rewardDebt;\\n            user.claimable = 0;\\n            _updateLiquidityLimits(_user, token, user.depositAmount, accRewardPerShare);\\n\\n            // claim admin fees for each pool once per day\\n            if (lastFeeClaim[token] + 86400 < block.timestamp) {\\n                address pool = IERC20Mintable(token).minter();\\n                try IStableSwap(pool).withdraw_admin_fees() {\\n                    emit FeeClaimSuccess(pool);\\n                } catch {\\n                    emit FeeClaimRevert(pool);\\n                }\\n                lastFeeClaim[token] = block.timestamp;\\n            }\\n        }\\n        return _mintRewards(_user, pending);\\n    }\\n\\n    function _mintRewards(address _user, uint256 _amount) internal returns (uint256) {\\n        uint256 minted = mintedTokens;\\n        if (minted + _amount > maxMintableTokens) {\\n            _amount = maxMintableTokens - minted;\\n        }\\n        if (_amount > 0) {\\n            mintedTokens = minted + _amount;\\n            address receiver = claimReceiver[_user];\\n            if (receiver == address(0)) receiver = _user;\\n            rewardToken.mint(receiver, _amount);\\n            emit ClaimedReward(msg.sender, _user, receiver, _amount);\\n        }\\n        return _amount;\\n    }\\n\\n    /**\\n        @notice Update a user's boost for one or more deposited tokens\\n        @param _user Address of the user to update boosts for\\n        @param _tokens Array of LP tokens to update boost for\\n     */\\n    function updateUserBoosts(address _user, address[] calldata _tokens) external {\\n        for (uint i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            uint256 accRewardPerShare = _updatePool(token);\\n            UserInfo storage user = userInfo[token][_user];\\n            if (user.adjustedAmount > 0) {\\n                uint256 pending = user.adjustedAmount * accRewardPerShare / 1e12 - user.rewardDebt;\\n                if (pending > 0) {\\n                    user.claimable += pending;\\n                }\\n            }\\n            _updateLiquidityLimits(_user, token, user.depositAmount, accRewardPerShare);\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {\r\n      \"LPStaking.sol\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20Mintable\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IIncentiveVoting\",\"name\":\"_incentiveVoting\",\"type\":\"address\"},{\"internalType\":\"contract ITokenLocker\",\"name\":\"_tokenLocker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxMintable\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"FeeClaimRevert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"FeeClaimSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blockThirdPartyActions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"claimableReward\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_claimRewards\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentiveVoting\",\"outputs\":[{\"internalType\":\"contract IIncentiveVoting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastFeeClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"adjustedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_block\",\"type\":\"bool\"}],\"name\":\"setBlockThirdPartyActions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setClaimReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLocker\",\"outputs\":[{\"internalType\":\"contract ITokenLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"updateUserBoosts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adjustedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_claimRewards\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EllipsisLpStaking", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000af41054c1487b0e5e2b9250c0332ecbce6ce9d710000000000000000000000004695e50a38e33ea09d1f623ba8a8db24219bb06a00000000000000000000000022a93f53a0a3e6847d05dd504283e8e296a49aae0000000000000000000000000000000000000000d541eba133c10fb3d0000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}