{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LPTokenPoolAPY/LPTokenPoolAPY.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport {SafeMathUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ncontract GroveCoinStaking is Initializable, OwnableUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    uint256 private immutable DAY_SECONDS = 1 days;\\n\\n    struct PoolDataInfo {\\n        // Introduction\\n        string logoUrl;\\n        string website;\\n        string facebook;\\n        string twitter;\\n        string github;\\n        string telegram;\\n        string instagram;\\n        string discord;\\n        string reddit;\\n        string description;\\n    }\\n\\n    // \u5956\u52b1\u4ee3\u5e01\\n    address public rewardToken;\\n    // \u8d28\u62bc\u4ee3\u5e01\\n    address public lpToken;\\n    // \u603b\u8d28\u62bc\u91cf\\n    uint256 private _totalSupply;\\n    // \u8d26\u6237\u4f59\u989d\uff1a\u7528\u6237\u5f53\u524d\u8d28\u62bc\u4ee3\u5e01\u7684\u6570\u91cf\\n    mapping(address => uint256) private _balances;\\n    // \u6301\u7eed\u65f6\u95f4\uff0c\u5355\u4f4d\u79d2\\n    uint256 public duration;\\n    // \u9501\u4ed3\u65f6\u95f4\\n    uint256 public frozenStakingTime = 0;\\n    // \u603b\u7d2f\u79ef\u5956\u52b1\\n    uint256 public totalAccumulatedReward = 0;\\n    // \u9080\u8bf7\u5956\u52b1\u6bd4\u4f8b\uff0c\u5343\u5206\u4e4b\\n    uint256 public percent = 0;\\n    // \u5f00\u59cb\u65f6\u95f4\\n    uint256 public startTime;\\n    // \u662f\u5426\u4e3a LP \u4ee3\u5e01\\n    bool public isLpToken;\\n    // \u56fa\u5b9a\u5e74\u5316\u6536\u76ca\u7387\uff0c\u4e07\u5206\u4e4b\uff0c\u4f8b\u59825%\u7684\u6536\u76ca\u7387\u8868\u793a\u4e3a500\uff08\u56e0\u4e3a\u4f7f\u7528\u4e86\u4e24\u4f4d\u5c0f\u6570\uff09\\n    uint256 public fixedAnnualInterestRate = 500;\\n\\n    // \u7528\u6237\u5f53\u524d\u5f85\u9886\u53d6\u7684\u5956\u52b1\u6570\u91cf\\n    mapping(address => uint256) public rewards;\\n    // \u7528\u6237\u5b9e\u9645\u9886\u53d6\u5956\u52b1\\n    mapping(address => uint256) public receivedReward;\\n    // \u7528\u6237\u8d28\u62bc\u989d\u5ea6\\n    mapping(address => uint256) public deposits;\\n    // \u7528\u6237\u4e0a\u6b21\u8d28\u62bc\u65f6\u95f4\\n    mapping(address => uint256) public lastStakeTime;\\n    // \u7528\u6237\u4e0a\u4e00\u6b21\u9886\u53d6\u5956\u52b1\u65f6\u95f4\\n    mapping(address => uint256) public lastGetRewardTime;\\n    // \u9080\u8bf7\u4eba->\u88ab\u9080\u8bf7\u4eba\u5730\u5740\u5217\u8868\\n    mapping(address => address[]) public inviterAddress;\\n    // \u9080\u8bf7\u4eba\u5730\u5740\u5217\u8868\u5927\u5c0f\\n    mapping(address => uint256) public inviterSize;\\n    // \u88ab\u9080\u8bf7\u4eba->\u9080\u8bf7\u4eba\\n    mapping(address => address) public inviter;\\n\\n    // Introduction\\n    string public logoUrl;\\n    string public website;\\n    string public facebook;\\n    string public twitter;\\n    string public github;\\n    string public telegram;\\n    string public instagram;\\n    string public discord;\\n    string public reddit;\\n    string public description;\\n\\n    // \u5b9a\u4e49\u4e8b\u4ef6\uff0c\u8bb0\u5f55\u6dfb\u52a0\u5956\u52b1\u3001\u8d28\u62bc\u3001\u64a4\u9500\u8d28\u62bc\u548c\u9886\u53d6\u5956\u52b1\u7684\u4e8b\u4ef6\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward, bool isDevFund);\\n    event RewardCompounded(address indexed user, uint256 amount);\\n    event ParameterUpdatedUint(string parameter, uint256 value);\\n    event ParameterUpdatedBool(string parameter, bool value);\\n\\n    // \u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u5f00\u59cb\u5956\u52b1\\n    modifier checkStart() {\\n        require(block.timestamp >= startTime, \\\"GCS: not start\\\");\\n        _;\\n    }\\n\\n    // \u66f4\u65b0\u7528\u6237\u5956\u52b1\u6570\u636e\\n    modifier updateReward(address account) {\\n        if (account != address(0)) {\\n            uint256 newReward = earned(account);\\n            // \u907f\u514d\u91cd\u590d\u66f4\u65b0\\n            if (newReward != rewards[account]) {\\n                rewards[account] = newReward;\\n            }\\n        }\\n        _;\\n    }\\n\\n    // \u66f4\u65b0\u7528\u6237\u8d28\u62bc\u65f6\u95f4\\n    modifier updateStakeTime(address account) {\\n        _;\\n\\n        if (account != address(0)) {\\n            lastStakeTime[account] = block.timestamp;\\n        }\\n    }\\n    // \u66f4\u65b0\u7528\u6237\u9886\u53d6\u5956\u52b1\u65f6\u95f4\\n    modifier updateGetRewardTime(address account) {\\n        _;\\n\\n        if (account != address(0)) {\\n            lastGetRewardTime[account] = block.timestamp;\\n        }\\n    }\\n\\n    // \u68c0\u67e5\u8d28\u62bc\u7528\u6237\u6240\u6301\u6709\u7684\u8be5\u5e01\u79cd\u4f59\u989d\u662f\u5426\u8db3\u591f\\n    modifier checkBalance(address account, uint256 amount) {\\n        require(\\n            IERC20Upgradeable(lpToken).balanceOf(account) >= amount,\\n            \\\"GCS: Insufficient balance of stake token\\\"\\n        );\\n        _;\\n    }\\n\\n    // \u521d\u59cb\u5316\u51fd\u6570\uff0c\u7531\u5347\u7ea7\u5408\u7ea6\u8c03\u7528\\n    function initialize(\\n        uint256 _percent,\\n        address _rewardToken,\\n        address _lpToken,\\n        bool _isLpToken,\\n        uint256 _startTime,\\n        uint256 _duration,\\n        address _owner,\\n        uint256 _reward,\\n        uint256 _frozenStakingTime,\\n        uint256 _fixedAnnualInterestRate,\\n        PoolDataInfo calldata _dataInfo\\n    ) external initializer {\\n        // \u8c03\u7528\u7236\u5408\u7ea6\u7684\u521d\u59cb\u5316\u51fd\u6570\\n        super.__Ownable_init();\\n\\n        // \u521d\u59cb\u5316\u5404\u4e2a\u53c2\u6570\\n        rewardToken = _rewardToken;\\n        lpToken = _lpToken;\\n        startTime = _startTime;\\n        duration = _duration.mul(DAY_SECONDS);\\n        isLpToken = _isLpToken;\\n        percent = _percent;\\n        frozenStakingTime = _frozenStakingTime.mul(DAY_SECONDS);\\n        fixedAnnualInterestRate = _fixedAnnualInterestRate;\\n\\n        logoUrl = _dataInfo.logoUrl;\\n        website = _dataInfo.website;\\n        facebook = _dataInfo.facebook;\\n        twitter = _dataInfo.twitter;\\n        github = _dataInfo.github;\\n        telegram = _dataInfo.telegram;\\n        instagram = _dataInfo.instagram;\\n        discord = _dataInfo.discord;\\n        reddit = _dataInfo.reddit;\\n        description = _dataInfo.description;\\n\\n        // \u6539\uff0c2023.03.09\uff0c\u65b0\u589e\\n        initialAddRewardAmount(_reward);\\n\\n        // \u8f6c\u79fb\u6240\u6709\u6743\\n        transferOwnership(_owner);\\n    }\\n\\n    // \u67e5\u8be2\u603b\u8d28\u62bc\u91cf\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    // \u67e5\u8be2\u7528\u6237\u8d28\u62bc\u4ee3\u5e01\u4f59\u989d\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    // \u67e5\u8be2\u7528\u6237\u5f53\u524d\u5e94\u83b7\u5f97\u7684\u5956\u52b1\u6570\u91cf\\n    function earned(address account) public view returns (uint256) {\\n        if (lastGetRewardTime[account] > 0) {\\n            uint256 depositAmount = deposits[account];\\n            uint256 stakingDurationInSeconds = block.timestamp -\\n                lastGetRewardTime[account];\\n            // \u5148\u4e58\u540e\u9664\uff0c\u4ee5\u51cf\u5c11\u7cbe\u5ea6\u635f\u5931\\n            return\\n                rewards[account] +\\n                (depositAmount *\\n                    fixedAnnualInterestRate *\\n                    stakingDurationInSeconds) /\\n                (10000 * 365 days);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    // \u7528\u6237\u8d28\u62bc\u51fd\u6570\uff0c\u5c06\u8d28\u62bc\u4ee3\u5e01\u62b5\u62bc\u5230\u5408\u7ea6\u4e2d\uff0c\u5e76\u66f4\u65b0\u8d26\u6237\u4f59\u989d\u3001\u603b\u7684\u8d28\u62bc\u4ee3\u5e01\u6570\u91cf\u548c\u5956\u52b1\u6570\u91cf\u7b49\u4fe1\u606f\u3002\\n    function stake(\\n        uint256 amount,\\n        address from\\n    )\\n        public\\n        checkBalance(msg.sender, amount)\\n        updateReward(msg.sender)\\n        updateGetRewardTime(msg.sender)\\n        updateStakeTime(msg.sender)\\n        checkStart\\n    {\\n        require(amount > 0, \\\"GCS: Cannot stake 0\\\");\\n        require(from != msg.sender, \\\"GCS: Inviter cannot be caller\\\");\\n\\n        // Inviter\\n        bool shouldSetInviter = balanceOf(msg.sender) == 0 &&\\n            inviter[msg.sender] == address(0) &&\\n            from != address(0);\\n        // \u5982\u679c\u662f\u7b2c\u4e00\u6b21\u8d28\u62bc\uff0c\u5219\u6dfb\u52a0\u9080\u8bf7\u4eba\u4fe1\u606f\\n        if (shouldSetInviter) {\\n            inviter[msg.sender] = from;\\n            inviterAddress[from].push(msg.sender);\\n            inviterSize[from] = inviterAddress[from].length;\\n        }\\n\\n        uint256 beforeBalance = IERC20Upgradeable(lpToken).balanceOf(\\n            address(this)\\n        );\\n        IERC20Upgradeable(lpToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n        uint256 afterBalance = IERC20Upgradeable(lpToken).balanceOf(\\n            address(this)\\n        );\\n        require(\\n            afterBalance - beforeBalance >= amount,\\n            \\\"GCS: Transfer failed or incorrect amount received\\\"\\n        );\\n\\n        // \u66f4\u65b0\u7528\u6237\u8d28\u62bc\u6570\u636e\\n        uint256 newDeposit = deposits[msg.sender].add(amount);\\n        deposits[msg.sender] = newDeposit;\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    // \u7528\u6237\u64a4\u9500\u8d28\u62bc\u51fd\u6570\uff0c\u4ece\u5408\u7ea6\u4e2d\u53d6\u56de\u8d28\u62bc\u4ee3\u5e01\uff0c\u5e76\u66f4\u65b0\u8d26\u6237\u4f59\u989d\u3001\u603b\u7684\u8d28\u62bc\u4ee3\u5e01\u6570\u91cf\u548c\u5956\u52b1\u6570\u91cf\u7b49\u4fe1\u606f\u3002\\n    function withdraw(\\n        uint256 amount\\n    )\\n        public\\n        updateReward(msg.sender)\\n        updateGetRewardTime(msg.sender)\\n        checkStart\\n    {\\n        require(amount > 0, \\\"GCS: Cannot withdraw 0\\\");\\n        // \u68c0\u67e5\u7528\u6237\u8d28\u62bc\u4ee3\u5e01\u4f59\u989d\u662f\u5426\u8db3\u591f\\n        require(deposits[msg.sender] >= amount, \\\"GCS: Insufficient balance\\\");\\n        // \u68c0\u67e5\u662f\u5426\u5728\u51bb\u7ed3\u671f\u5185\\n        require(\\n            block.timestamp >= unfrozenStakeTime(msg.sender),\\n            \\\"GCS: Cannot withdrawal during freezing\\\"\\n        );\\n\\n        // \u66f4\u65b0\u7528\u6237\u8d28\u62bc\u6570\u636e\\n        deposits[msg.sender] = deposits[msg.sender].sub(amount);\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        IERC20Upgradeable(lpToken).safeTransfer(msg.sender, amount);\\n\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    // \u7528\u6237\u9000\u51fa\u51fd\u6570\uff0c\u9000\u51fa\u8d28\u62bc\uff0c\u5e76\u9886\u53d6\u5df2\u7ecf\u83b7\u53d6\u7684\u5956\u52b1\\n    function exit() external {\\n        withdraw(balanceOf(msg.sender));\\n        getReward();\\n    }\\n\\n    // \u5185\u90e8\u51fd\u6570\u5904\u7406\u5956\u52b1\u7684\u903b\u8f91\\n    function _processReward(\\n        address account\\n    ) internal returns (uint256, uint256) {\\n        uint256 reward = earned(account);\\n        require(reward > 0, \\\"GCS: No reward to get\\\");\\n\\n        uint256 inviterReward = reward.mul(percent).div(1000);\\n        uint256 userReward = reward.sub(inviterReward);\\n\\n        // \u5c06\u7528\u6237\u7684\u5f85\u9886\u53d6\u5956\u52b1\u91cd\u7f6e\u4e3a\u96f6\\n        rewards[account] = 0;\\n\\n        return (userReward, inviterReward);\\n    }\\n\\n    // \u63d0\u53d6\u5956\u52b1\\n    function getReward()\\n        public\\n        updateReward(msg.sender)\\n        updateGetRewardTime(msg.sender)\\n        checkStart\\n    {\\n        (uint256 userReward, uint256 inviterReward) = _processReward(\\n            msg.sender\\n        );\\n\\n        // \u53d1\u9001\u5956\u52b1\u7ed9\u7528\u6237\\n        receivedReward[msg.sender] = receivedReward[msg.sender].add(userReward);\\n        IERC20Upgradeable(rewardToken).safeTransfer(msg.sender, userReward);\\n\\n        emit RewardPaid(msg.sender, userReward, false);\\n\\n        // \u5982\u679c\u5b58\u5728\u9080\u8bf7\u4eba\uff0c\u53d1\u9001\u5956\u52b1\u7ed9\u9080\u8bf7\u4eba\\n        address inviterAddr = inviter[msg.sender];\\n        if (inviterAddr != address(0) && inviterReward > 0) {\\n            IERC20Upgradeable(rewardToken).safeTransfer(\\n                inviterAddr,\\n                inviterReward\\n            );\\n\\n            emit RewardPaid(inviterAddr, inviterReward, true);\\n        }\\n    }\\n\\n    // \u590d\u6295\u5956\u52b1\\n    function compoundReward()\\n        public\\n        updateStakeTime(msg.sender)\\n        updateGetRewardTime(msg.sender)\\n        checkStart\\n    {\\n        // \u5956\u52b1\u5e01\u548c\u8d28\u62bc\u5e01\u76f8\u540c\uff0c\u624d\u5141\u8bb8\u590d\u6295\\n        require(\\n            rewardToken == lpToken,\\n            \\\"GCS: Reward token is not the same as stake token\\\"\\n        );\\n\\n        (uint256 userReward, uint256 inviterReward) = _processReward(\\n            msg.sender\\n        );\\n\\n        // \u590d\u6295\u7528\u6237\u5956\u52b1\\n        deposits[msg.sender] = deposits[msg.sender].add(userReward);\\n        _totalSupply = _totalSupply.add(userReward);\\n        _balances[msg.sender] = _balances[msg.sender].add(userReward);\\n\\n        emit RewardCompounded(msg.sender, userReward);\\n\\n        // \u5982\u679c\u5b58\u5728\u9080\u8bf7\u4eba\uff0c\u5c06\u9080\u8bf7\u4eba\u7684\u5956\u52b1\u4e5f\u590d\u6295\\n        address inviterAddr = inviter[msg.sender];\\n        if (inviterAddr != address(0) && inviterReward > 0) {\\n            deposits[inviterAddr] = deposits[inviterAddr].add(inviterReward);\\n            _totalSupply = _totalSupply.add(inviterReward);\\n            _balances[inviterAddr] = _balances[inviterAddr].add(inviterReward);\\n\\n            emit RewardCompounded(inviterAddr, inviterReward);\\n        }\\n    }\\n\\n    // \u521d\u59cb\u8bbe\u7f6e\u5956\u52b1\u6570\u91cf\\n    function initialAddRewardAmount(uint256 reward) private onlyOwner {\\n        require(reward > 0, \\\"GCS: Reward must be greater than 0\\\");\\n\\n        // \u68c0\u67e5\u5408\u7ea6\u4e2d\u662f\u5426\u6709\u8db3\u591f\u7684\u5956\u52b1\u4ee3\u5e01\\n        uint256 currentBalance = IERC20Upgradeable(rewardToken).balanceOf(\\n            address(this)\\n        );\\n        require(\\n            currentBalance >= totalAccumulatedReward.add(reward),\\n            \\\"GCS: Not enough tokens in the contract\\\"\\n        );\\n\\n        // \u7d2f\u52a0\u65b0\u7684\u5956\u52b1\u5230\u603b\u5956\u52b1\u4e2d\\n        totalAccumulatedReward = totalAccumulatedReward.add(reward);\\n\\n        emit RewardAdded(reward);\\n    }\\n\\n    // \u8ffd\u52a0\u5956\u52b1\\n    function appendRewardAmount(uint256 additionalReward) public onlyOwner {\\n        require(\\n            additionalReward > 0,\\n            \\\"GCS: Additional reward must be greater than 0\\\"\\n        );\\n\\n        IERC20Upgradeable(rewardToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            additionalReward\\n        );\\n\\n        // \u68c0\u67e5\u5408\u7ea6\u4e2d\u662f\u5426\u6709\u8db3\u591f\u7684\u5956\u52b1\u4ee3\u5e01\u7528\u4e8e\u8ffd\u52a0\u7684\u5956\u52b1\\n        uint256 currentBalance = IERC20Upgradeable(rewardToken).balanceOf(\\n            address(this)\\n        );\\n        require(\\n            currentBalance >= additionalReward,\\n            \\\"GCS: Not enough tokens in the contract for additional reward\\\"\\n        );\\n\\n        // \u7d2f\u52a0\u65b0\u7684\u5956\u52b1\u5230\u603b\u5956\u52b1\u4e2d\\n        totalAccumulatedReward = totalAccumulatedReward.add(additionalReward);\\n\\n        emit RewardAdded(additionalReward);\\n    }\\n\\n    // \u8ba1\u7b97\u7528\u6237\u89e3\u9501\u65f6\u95f4\\n    function unfrozenStakeTime(address account) public view returns (uint256) {\\n        return lastStakeTime[account] + frozenStakingTime;\\n    }\\n\\n    // \u66f4\u65b0\u9879\u76ee\u4ecb\u7ecd\u4fe1\u606f\\n    function updateIntroduction(\\n        PoolDataInfo calldata _dataInfo\\n    ) external onlyOwner {\\n        logoUrl = _dataInfo.logoUrl;\\n        website = _dataInfo.website;\\n        facebook = _dataInfo.facebook;\\n        twitter = _dataInfo.twitter;\\n        github = _dataInfo.github;\\n        telegram = _dataInfo.telegram;\\n        instagram = _dataInfo.instagram;\\n        discord = _dataInfo.discord;\\n        reddit = _dataInfo.reddit;\\n        description = _dataInfo.description;\\n    }\\n\\n    // \u8bbe\u7f6e\u8d28\u62bc\u51bb\u7ed3\u671f\\n    function setFrozenStakingTime(\\n        uint256 _frozenStakingTime\\n    ) external onlyOwner {\\n        // \u6570\u503c\u672a\u53d1\u751f\u53d8\u5316\u5219\u4e0d\u66f4\u65b0\\n        require(\\n            _frozenStakingTime != frozenStakingTime,\\n            \\\"GCS: Frozen staking time is the same\\\"\\n        );\\n\\n        frozenStakingTime = _frozenStakingTime;\\n\\n        emit ParameterUpdatedUint(\\\"frozenStakingTime\\\", _frozenStakingTime);\\n    }\\n\\n    // \u8bbe\u7f6e\u9080\u8bf7\u5956\u52b1\u6bd4\u4f8b\\n    function setPercent(uint256 _percent) external onlyOwner {\\n        require(_percent >= 0, \\\"GCS: Percent must be greater than 0\\\");\\n        require(_percent < 1000, \\\"GCS: Percent must be less than 1000\\\");\\n        // \u6570\u503c\u672a\u53d1\u751f\u53d8\u5316\u5219\u4e0d\u66f4\u65b0\\n        require(_percent != percent, \\\"GCS: Percent is the same\\\");\\n\\n        percent = _percent;\\n\\n        emit ParameterUpdatedUint(\\\"percent\\\", _percent);\\n    }\\n\\n    // \u8bbe\u7f6e\u662f\u5426\u4f7f\u7528LP\u4ee3\u5e01\\n    function setLpToken(bool _isLpToken) external onlyOwner {\\n        // \u6570\u503c\u672a\u53d1\u751f\u53d8\u5316\u5219\u4e0d\u66f4\u65b0\\n        require(_isLpToken != isLpToken, \\\"GCS: LP token status is the same\\\");\\n\\n        isLpToken = _isLpToken;\\n\\n        emit ParameterUpdatedBool(\\\"isLpToken\\\", _isLpToken);\\n    }\\n\\n    // \u8bbe\u7f6e\u56fa\u5b9a\u5e74\u5316\u6536\u76ca\u7387\\n    function setFixedAnnualInterestRate(uint256 _rate) external onlyOwner {\\n        // \u5f00\u59cb\u540e\u4e0d\u5141\u8bb8\u4fee\u6539\\n        require(block.timestamp < startTime, \\\"GCS: Cannot modify after start\\\");\\n        require(\\n            _rate > 0,\\n            \\\"GCS: Fixed annual interest rate must be greater than 0\\\"\\n        );\\n        // \u6570\u503c\u672a\u53d1\u751f\u53d8\u5316\u5219\u4e0d\u66f4\u65b0\\n        require(\\n            _rate != fixedAnnualInterestRate,\\n            \\\"GCS: Fixed annual interest rate is the same\\\"\\n        );\\n\\n        fixedAnnualInterestRate = _rate;\\n\\n        emit ParameterUpdatedUint(\\\"fixedAnnualInterestRate\\\", _rate);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LPTokenPoolAPY/LPTokenPoolAPYFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n// \u5f15\u5165\u5f00\u6e90\u7684 Ownable \u5408\u7ea6\uff0c\u5b83\u5141\u8bb8\u53ea\u6709\u5408\u7ea6\u7684\u6240\u6709\u8005\uff08\u5373\u90e8\u7f72\u8005\uff09\u53ef\u4ee5\u8c03\u7528\u67d0\u4e9b\u65b9\u6cd5\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n// \u5f15\u5165\u5f00\u6e90\u7684 Clones \u5408\u7ea6\uff0c\u5b83\u5141\u8bb8\u901a\u8fc7\u590d\u5236\u73b0\u6709\u5408\u7ea6\u6765\u521b\u5efa\u65b0\u7684\u5408\u7ea6\u5b9e\u4f8b\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n// \u5f15\u5165\u5f00\u6e90\u7684 IERC20 \u5408\u7ea6\u548c SafeERC20 \u5e93\uff0c\u5b83\u4eec\u63d0\u4f9b\u4e86\u5b89\u5168\u7684 ERC20 \u4ee3\u5e01\u8f6c\u8d26\u529f\u80fd\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport {GroveCoinStaking} from \\\"./LPTokenPoolAPY.sol\\\";\\n\\ncontract LPTokenPoolAPYFactory is Ownable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    uint256 public fee;\\n    address public cloneAddress;\\n\\n    event CampaignCreated(\\n        address indexed creator,\\n        address indexed campaignAddress\\n    );\\n    event FeeUpdated(uint256 oldFee, uint256 newFee);\\n    event FeesWithdrawn(address indexed to, uint256 amount);\\n    event ParameterUpdatedAddress(string parameter, address value);\\n\\n    // \u4fdd\u5b58\u6bcf\u4e2a\u521b\u5efa\u8005\u521b\u5efa\u7684\u5408\u7ea6\u5730\u5740\\n    mapping(address => address[]) private creatorToCampaigns;\\n\\n    // \u6539\uff0c2023.03.15\uff0c\u907f\u514d\u7528\u6237\u8fc7\u591a\u652f\u4ed8\u8d39\u7528\\n    modifier feePaid() {\\n        require(msg.value >= fee, \\\"Fee\\\");\\n        _;\\n        uint256 excess = msg.value - fee;\\n        if (excess > 0) {\\n            (bool success, ) = payable(msg.sender).call{value: excess}(\\\"\\\");\\n            require(success, \\\"Refund failed\\\");\\n        }\\n    }\\n\\n    constructor(uint256 _fee, address _cloneAddress) {\\n        fee = _fee;\\n        cloneAddress = _cloneAddress;\\n    }\\n\\n    function createCampaign(\\n        uint256 _percent,\\n        address _rewardToken,\\n        address _lpToken,\\n        bool _isLpToken,\\n        uint256 _startTime,\\n        uint256 _duration,\\n        uint256 _reward,\\n        uint256 _frozenStakingTime,\\n        uint256 _fixedAnnualInterestRate,\\n        GroveCoinStaking.PoolDataInfo calldata _dataInfo\\n    ) external payable feePaid returns (address campaignAddress) {\\n        require(_percent >= 0, \\\"GCS: Percent must be greater than 0\\\");\\n        require(_percent < 1000, \\\"GCS: Percent must be less than 1000\\\");\\n        require(\\n            _rewardToken != address(0),\\n            \\\"GCS: Reward token address cannot be 0\\\"\\n        );\\n        require(_lpToken != address(0), \\\"GCS: LP token address cannot be 0\\\");\\n        require(\\n            _startTime > block.timestamp,\\n            \\\"GCS: Start time must be greater than current time\\\"\\n        );\\n        require(_duration > 0, \\\"GCS: Duration must be greater than 0\\\");\\n        require(_reward > 0, \\\"GCS: Reward must be greater than 0\\\");\\n        require(\\n            _fixedAnnualInterestRate > 0,\\n            \\\"GCS: Fixed annual interest rate must be greater than 0\\\"\\n        );\\n\\n        // \u4f7f\u7528 Clones \u5408\u7ea6\u590d\u5236\u4e00\u4e2a\u65b0\u7684 GroveCoinStaking \u5408\u7ea6\u5b9e\u4f8b\\n        campaignAddress = Clones.clone(cloneAddress);\\n\\n        // \u8c03\u7528 GroveCoinStaking \u7684\u521d\u59cb\u5316\u51fd\u6570\uff0c\u5bf9\u5408\u7ea6\u8fdb\u884c\u521d\u59cb\u5316\u8bbe\u7f6e\\n        GroveCoinStaking lpTokenPoolAPY = GroveCoinStaking(campaignAddress);\\n\\n        // \u4ece\u8c03\u7528\u8005\u7684\u94b1\u5305\u4e2d\u8f6c\u8d26\u5956\u52b1\u4ee3\u5e01\u5230\u65b0\u521b\u5efa\u7684 GroveCoinStaking \u5408\u7ea6\u5b9e\u4f8b\u4e2d\\n        IERC20Upgradeable(_rewardToken).safeTransferFrom(\\n            msg.sender,\\n            campaignAddress,\\n            _reward\\n        );\\n\\n        lpTokenPoolAPY.initialize(\\n            _percent,\\n            _rewardToken,\\n            _lpToken,\\n            _isLpToken,\\n            _startTime,\\n            _duration,\\n            msg.sender,\\n            _reward,\\n            _frozenStakingTime,\\n            _fixedAnnualInterestRate,\\n            _dataInfo\\n        );\\n\\n        // \u5c06\u65b0\u521b\u5efa\u7684\u5408\u7ea6\u5730\u5740\u5b58\u5165\u6620\u5c04\u4e2d\\n        creatorToCampaigns[msg.sender].push(campaignAddress);\\n\\n        emit CampaignCreated(msg.sender, campaignAddress);\\n\\n        return campaignAddress;\\n    }\\n\\n    function setFee(uint256 newFee) external onlyOwner {\\n        require(newFee > 0, \\\"GCS: Fee must be greater than 0\\\");\\n        // \u6ca1\u6709\u53d8\u5316\u5c31\u4e0d\u7528\u6539\u4e86\\n        require(newFee != fee, \\\"GCS: Fee is the same\\\");\\n\\n        uint256 oldFee = fee;\\n        fee = newFee;\\n\\n        emit FeeUpdated(oldFee, newFee);\\n    }\\n\\n    function setCloneAddress(address _cloneAddress) external onlyOwner {\\n        require(_cloneAddress != address(0), \\\"GCS: Invalid address\\\");\\n        // \u6ca1\u6709\u53d8\u5316\u5c31\u4e0d\u7528\u6539\u4e86\\n        require(_cloneAddress != cloneAddress, \\\"GCS: CloneAddress is the same\\\");\\n\\n        cloneAddress = _cloneAddress;\\n\\n        emit ParameterUpdatedAddress(\\\"cloneAddress\\\", _cloneAddress);\\n    }\\n\\n    // \u83b7\u53d6\u67d0\u4e2a\u521b\u5efa\u8005\u521b\u5efa\u7684\u6240\u6709\u5408\u7ea6\u5730\u5740\\n    function getCampaignsByCreator(\\n        address creator\\n    ) external view returns (address[] memory) {\\n        return creatorToCampaigns[creator];\\n    }\\n\\n    // \u6539\uff0c2023.04.29\uff0c\u65b0\u589e\\n    // \u53d6\u8d70\u5408\u7ea6\u4e2d\u7684\u6240\u6709\u624b\u7eed\u8d39\\n    function withdrawFees() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        require(balance > 0, \\\"No fees available to withdraw\\\");\\n\\n        (bool success, ) = payable(msg.sender).call{value: balance}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n\\n        emit FeesWithdrawn(msg.sender, balance);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_cloneAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"campaignAddress\",\"type\":\"address\"}],\"name\":\"CampaignCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"parameter\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"ParameterUpdatedAddress\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cloneAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLpToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_frozenStakingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fixedAnnualInterestRate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"logoUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"facebook\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"github\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"instagram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"discord\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reddit\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct GroveCoinStaking.PoolDataInfo\",\"name\":\"_dataInfo\",\"type\":\"tuple\"}],\"name\":\"createCampaign\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"campaignAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getCampaignsByCreator\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cloneAddress\",\"type\":\"address\"}],\"name\":\"setCloneAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LPTokenPoolAPYFactory", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "000000000000000000000000000000000000000000000000000009184e72a00000000000000000000000000016d8d1aadb7e52a13c4569d06e1c3e8aa02de9d3", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}