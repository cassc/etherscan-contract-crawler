{"SourceCode": "// File: @openzeppelin/contracts@4.7.0/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts@4.7.0/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: github/tomdef1/Contracts/Staking_ASX_001.sol\r\n\r\n\r\n// 0.8.19 as deploying on BNB\r\npragma solidity 0.8.19;\r\n\r\n// 4.7.0 as compatible with non PUSH0 chains ie BNB & 0.8.19\r\n\r\n\r\n\r\n// Declaring the contract\r\ncontract Staking_ASX_001 is ReentrancyGuard {\r\n    // State variables\r\n    IERC20 public stakingToken;            // Token users will stake\r\n    IERC20 public rewardToken;             // Token users will earn as rewards\r\n\r\n    address public owner;                  // Owner of the contract\r\n    uint256 public lockupPeriod;           // Time that must pass before stakers can withdraw\r\n    uint256 public stakingPeriodLength;    // Total length of the staking period\r\n    bool public stakingActive = false;     // Indicates if the staking period is currently active\r\n    uint256 public startTime;              // When the current staking period started\r\n    uint256 public totalStaked;            // Total amount of tokens staked\r\n    uint256 public totalRewards;           // Total amount of rewards to distribute\r\n    uint256 public rewardsDistributed;     // Total rewards distributed so far\r\n\r\n    // Mappings\r\n    mapping(address => uint256) public stakes;          // Amount staked by each address\r\n    mapping(address => uint256) public lastStakedTime;  // Last time each address staked\r\n    mapping(address => uint256) public rewards;         // Rewards owed to each address\r\n    mapping(address => bool) public isController;       // Addresses allowed to perform certain restricted actions\r\n\r\n    // Events\r\n    event Staked(address indexed user, uint256 amount, uint256 total);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 reward);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event StakingPeriodEnded(uint256 remainingRewards);\r\n\r\n    // Modifiers\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyController() {\r\n        require(isController[msg.sender], \"Caller is not a controller\");\r\n        _;\r\n    }\r\n\r\n    // Constructor\r\n    constructor(\r\n        uint256 _stakingPeriodLength,\r\n        uint256 _lockupPeriod,\r\n        address _stakingToken,\r\n        address _rewardToken,\r\n        uint256 _totalRewards\r\n    ) {\r\n        owner = msg.sender;                   // Sets the contract deployer as the owner\r\n        stakingPeriodLength = _stakingPeriodLength;\r\n        lockupPeriod = _lockupPeriod;\r\n        stakingToken = IERC20(_stakingToken);\r\n        rewardToken = IERC20(_rewardToken);\r\n        totalRewards = _totalRewards;\r\n    }\r\n\r\n    // Functions\r\n\r\n    // Starts the staking period\r\n    function start() external onlyOwner {\r\n        require(!stakingActive, \"Staking already started\");\r\n        stakingActive = true;\r\n        startTime = block.timestamp;\r\n        rewardsDistributed = 0;\r\n    }\r\n\r\n    // Allows users to stake tokens\r\n    function stake(uint256 amount) external nonReentrant {\r\n        require(amount > 0, \"Cannot stake 0\");\r\n        require(stakingToken.transferFrom(msg.sender, address(this), amount), \"Stake failed\");\r\n\r\n        if (stakingActive && stakes[msg.sender] > 0) {\r\n            rewards[msg.sender] += calculateReward(msg.sender);\r\n        }\r\n\r\n        stakes[msg.sender] += amount;\r\n        totalStaked += amount;\r\n        lastStakedTime[msg.sender] = block.timestamp;\r\n\r\n        emit Staked(msg.sender, amount, stakes[msg.sender]);\r\n    }\r\n\r\n    // Allows users to withdraw their staked tokens\r\n    function withdraw(uint256 amount) external nonReentrant {\r\n        require(stakes[msg.sender] >= amount, \"Withdrawing more than you have!\");\r\n        require(block.timestamp - lastStakedTime[msg.sender] > lockupPeriod, \"Lockup period not yet passed\");\r\n\r\n        if (stakingActive) {\r\n            rewards[msg.sender] += calculateReward(msg.sender);\r\n        }\r\n\r\n        stakes[msg.sender] -= amount;\r\n        totalStaked -= amount;\r\n        require(stakingToken.transfer(msg.sender, amount), \"Withdraw failed\");\r\n\r\n        emit Withdrawn(msg.sender, amount);\r\n    }\r\n\r\n    // Allows users to claim their rewards\r\n    function claimRewards() external nonReentrant {\r\n        if (stakingActive) {\r\n            rewards[msg.sender] += calculateReward(msg.sender);\r\n        }\r\n        \r\n        uint256 reward = rewards[msg.sender];\r\n        if (reward > 0) {\r\n            rewards[msg.sender] = 0; // Prevent re-entrancy attack\r\n            rewardsDistributed += reward;\r\n            require(rewardToken.transfer(msg.sender, reward), \"Reward transfer failed\");\r\n            emit RewardPaid(msg.sender, reward);\r\n        }\r\n    }\r\n\r\n    // Internal function to calculate rewards\r\n    function calculateReward(address user) internal view returns (uint256) {\r\n        uint256 stakedAmount = stakes[user];\r\n        if (stakedAmount == 0) {\r\n            return 0;\r\n        }\r\n        uint256 timeStaked = stakingActive ? block.timestamp - lastStakedTime[user] : stakingPeriodLength;\r\n        uint256 reward = (stakedAmount * timeStaked * totalRewards) / (totalStaked * stakingPeriodLength);\r\n        return reward;\r\n    }\r\n\r\n    // Ends the current staking period and returns any remaining rewards to the owner\r\n    function endStakingPeriod() external onlyOwner {\r\n        require(stakingActive, \"Staking is not currently active\");\r\n        stakingActive = false;\r\n        uint256 remainingRewards = totalRewards - rewardsDistributed;\r\n        if (remainingRewards > 0) {\r\n            require(rewardToken.transfer(owner, remainingRewards), \"Failed to return remaining rewards\");\r\n        }\r\n        emit StakingPeriodEnded(remainingRewards);\r\n    }\r\n\r\n    // Transfers ownership of the contract to a new owner\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    // Functions to change constructor perameters after deployment\r\n    // Setter function to change the staking period length\r\n    function setStakingPeriodLength(uint256 newLength) external onlyOwner {\r\n        require(newLength > 0, \"Staking period length must be greater than 0\");\r\n        stakingPeriodLength = newLength;\r\n    }\r\n\r\n    // Setter function to change the lockup period\r\n    function setLockupPeriod(uint256 newLockupPeriod) external onlyOwner {\r\n        require(newLockupPeriod >= 0, \"Lockup period cannot be negative\");\r\n        lockupPeriod = newLockupPeriod;\r\n    }\r\n\r\n    // Setter function to change the staking token\r\n    function setStakingToken(address newStakingToken) external onlyOwner {\r\n        require(newStakingToken != address(0), \"Staking token cannot be the zero address\");\r\n        stakingToken = IERC20(newStakingToken);\r\n    }\r\n\r\n    // Setter function to change the reward token\r\n    function setRewardToken(address newRewardToken) external onlyOwner {\r\n        require(newRewardToken != address(0), \"Reward token cannot be the zero address\");\r\n        rewardToken = IERC20(newRewardToken);\r\n    }\r\n\r\n    // Setter function to change the total rewards\r\n    function setTotalRewards(uint256 newTotalRewards) external onlyOwner {\r\n        require(newTotalRewards >= 0, \"Total rewards cannot be negative\");\r\n        totalRewards = newTotalRewards;\r\n    }\r\n\r\n    // Allows the owner to add a controller\r\n    function addController(address controller) external onlyOwner {\r\n        isController[controller] = true;\r\n    }\r\n\r\n    // Allows the owner to remove a controller\r\n    function removeController(address controller) external onlyOwner {\r\n        isController[controller] = false;\r\n    }\r\n\r\n    // Read function to get the remaining time of the staking period\r\n    function getTimeLeft() public view returns (uint256) {\r\n        if (stakingActive) {\r\n            uint256 timePassed = block.timestamp - startTime;\r\n            if (timePassed < stakingPeriodLength) {\r\n                return stakingPeriodLength - timePassed;\r\n            } else {\r\n                return 0; // Staking period has ended\r\n            }\r\n        } else {\r\n            return 0; // Staking period is not active\r\n        }\r\n    }\r\n\r\n    // Read function to get the rewards earned in the current period by a user\r\n    function getCurrentPeriodRewards(address user) public view returns (uint256) {\r\n        if (stakingActive) {\r\n            return calculateReward(user);\r\n        } else {\r\n            return 0; // No rewards if staking period is not active\r\n        }\r\n    }\r\n\r\n    // Read function to get the total rewards earned by a user across all periods\r\n    function getTotalRewardsEarned(address user) public view returns (uint256) {\r\n        return rewards[user] + getCurrentPeriodRewards(user);\r\n    }\r\n\r\n    // Read function to get the amount a user is entitled to withdraw\r\n    function getWithdrawableAmount(address user) public view returns (uint256) {\r\n        if (block.timestamp - lastStakedTime[user] > lockupPeriod) {\r\n            return stakes[user];\r\n        } else {\r\n            return 0; // Nothing withdrawable if within the lockup period\r\n        }\r\n    }\r\n\r\n    // Read function to get all current staking parameters\r\n    function getStakingParameters() public view returns (\r\n        uint256 _lockupPeriod, \r\n        uint256 _stakingPeriodLength, \r\n        uint256 _totalStaked, \r\n        uint256 _totalRewards, \r\n        uint256 _rewardsDistributed, \r\n        bool _stakingActive, \r\n        uint256 _timeLeft\r\n    ) {\r\n        return (\r\n            lockupPeriod, \r\n            stakingPeriodLength, \r\n            totalStaked, \r\n            totalRewards, \r\n            rewardsDistributed, \r\n            stakingActive, \r\n            getTimeLeft()\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingPeriodLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockupPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingRewards\",\"type\":\"uint256\"}],\"name\":\"StakingPeriodEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endStakingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCurrentPeriodRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockupPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingPeriodLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDistributed\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stakingActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_timeLeft\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTotalRewardsEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastStakedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLockupPeriod\",\"type\":\"uint256\"}],\"name\":\"setLockupPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewardToken\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLength\",\"type\":\"uint256\"}],\"name\":\"setStakingPeriodLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStakingToken\",\"type\":\"address\"}],\"name\":\"setStakingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTotalRewards\",\"type\":\"uint256\"}],\"name\":\"setTotalRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPeriodLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking_ASX_001", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000278d000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000ebd3619642d78f0c98c84f6fa9a678653fb5a99b000000000000000000000000ebd3619642d78f0c98c84f6fa9a678653fb5a99b0000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4cd23a23aec0101b3929589854757fc5366e0d7952c3c70d9429a3f4eb471bfa"}