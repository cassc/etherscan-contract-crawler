{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract FXST_Swap {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public token;\r\n    uint256 public tokensPerOLDFXST;\r\n    address public swapOwner;\r\n\r\n    IERC20 OLDFXST = IERC20(0xFF702E389ca1bC4A6D103e245956cFb0521Ae9c5);\r\n\r\n    constructor(\r\n        address _tokenAddress,\r\n        address _owner,\r\n        uint256 _tokensPerOLDFXST\r\n    ) {\r\n        token = IERC20(_tokenAddress);\r\n        swapOwner = _owner;\r\n        tokensPerOLDFXST = _tokensPerOLDFXST;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == swapOwner, \"ONLY_OWNER_CAN_ACCESS_THIS_FUNCTION\");\r\n        _;\r\n    }\r\n\r\n    function updateRate(uint256 newTokensPerOLDFXST)\r\n        public\r\n        onlyOwner\r\n    {\r\n        tokensPerOLDFXST = newTokensPerOLDFXST;\r\n    }\r\n\r\n    function endSwap() public onlyOwner {\r\n        uint256 contractTokenBalance = token.balanceOf(address(this));\r\n        token.transfer(msg.sender, contractTokenBalance);\r\n    }\r\n\r\n    function swapWithOLDFXST(uint256 _OLDFXSTAmount) public {\r\n        require(_OLDFXSTAmount > 0, \"Invalid OLDFXST amount\");\r\n        require(\r\n            OLDFXST.balanceOf(msg.sender) >= _OLDFXSTAmount,\r\n            \"Insufficient OLDFXST balance\"\r\n        );\r\n\r\n        // Check allowance\r\n        uint256 allowance = OLDFXST.allowance(msg.sender, address(this));\r\n        require(allowance >= _OLDFXSTAmount, \"Allowance is too low\");\r\n\r\n        uint256 tokenAmount = _OLDFXSTAmount;\r\n        require(\r\n            token.balanceOf(address(this)) >= tokenAmount,\r\n            \"Insufficient balance in contract\"\r\n        );\r\n\r\n        // Transfer OLDFXST tokens from the user to the contract\r\n        require(\r\n            OLDFXST.transferFrom(msg.sender, swapOwner, _OLDFXSTAmount),\r\n            \"Failed to transfer OLDFXST tokens to swapOwner\"\r\n        );\r\n\r\n        // Transfer new tokens to the user\r\n        require(\r\n            token.transfer(msg.sender, tokenAmount),\r\n            \"Failed to transfer new tokens to the user\"\r\n        );\r\n    }\r\n\r\n    function recoverTokens(address tokenToRecover) public onlyOwner {\r\n        IERC20 tokenContract = IERC20(tokenToRecover);\r\n        uint256 contractTokenBalance = tokenContract.balanceOf(address(this));\r\n        require(contractTokenBalance > 0, \"No tokens to recover\");\r\n\r\n        bool sent = tokenContract.transfer(msg.sender, contractTokenBalance);\r\n        require(sent, \"Failed to recover tokens\");\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokensPerOLDFXST\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"endSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToRecover\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_OLDFXSTAmount\",\"type\":\"uint256\"}],\"name\":\"swapWithOLDFXST\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensPerOLDFXST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTokensPerOLDFXST\",\"type\":\"uint256\"}],\"name\":\"updateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FXST_Swap", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000a99600043e84181a9d4137ad1cefb8cfe913867400000000000000000000000033c33e3e732aa78b7168d030ab941c2c1881f4820000000000000000000000000000000000000000000000000000000000000001", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://769153450f589a99a0dd66d6640fb149b9117ca4a2fcad163778ca9ec453f6fa"}