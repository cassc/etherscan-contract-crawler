{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    address private _owner;\r\n    //\u5f00\u59cb\u65f6\u95f4,\u53ea\u80fd\u5927\u4e8e\u5f53\u524d\u65f6\u95f4\r\n    uint256 _startTime;\r\n    uint256 immutable baseInterval = 1 days;\r\n    mapping(uint8 => OrgRecord) orgRecord;\r\n\r\n    mapping(uint8 => address[]) orgWallet;\r\n    mapping(address => WalletRecord) walletRecords;\r\n\r\n    event Organization(uint8 indexed organizationId, uint256 releaseAllTime);\r\n    event ChangeOwner(address indexed oldOwner, address indexed newOwner);\r\n    //1\r\n    uint256[5] orgOne = [0 * 10**18, 0, 30, 30, 100];\r\n    //2\r\n    uint256[5] orgTwo   = [0 * 10**18, 100, 6 * 30, 3 * 30, 250];\r\n    //IDO3\r\n    uint256[5] orgThree = [150000000 * 10**18, 0, 0 * 30, 3 * 30, 250];\r\n    //team4\r\n    uint256[5] orgFour = [150000000 * 10**18, 0, 12 * 30, 3 * 30, 125];\r\n    //\u793e\u533a\u5206\u7ea25\r\n    uint256[5] orgFive = [300000000 * 10**18, 0, 12 * 30, 3 * 30, 125];\r\n    //\u73a9\u5bb6\u5956\u52b16\uff0c\u6d41\u52a8\r\n    uint256[5] orgSix = [1800000000 * 10**18, 1000, 0, 0, 0];\r\n    //\u5e73\u53f0\u53d1\u5c55\u548c\u751f\u6001\u57fa\u91d17\uff0c\u6d41\u52a8\r\n    uint256[5] orgSeven = [600000000 * 10**18, 1000, 0, 0, 0];\r\n    uint256[5][7] orgRecords = [\r\n        orgOne,\r\n        orgTwo,\r\n        orgThree,\r\n        orgFour,\r\n        orgFive,\r\n        orgSix,\r\n        orgSeven\r\n    ];\r\n    //\u673a\u6784\u5177\u4f53\u4fe1\u606f\r\n    struct OrgRecord {\r\n        //\u673a\u6784\u603b\u53d1\u653e\u91cf\r\n        uint256 orgTotal;\r\n        //\u673a\u6784\u5269\u4f59\u53d1\u653e\u91cf\r\n        uint256 orgBalance;\r\n    }\r\n    //\u94b1\u5305\u9501\u4ed3\u5177\u4f53\u4fe1\u606f\r\n    struct WalletRecord {\r\n        //\u94b1\u5305\u9501\u4ed3\u603b\u6570\r\n        uint256 lockTotal;\r\n        //\u5269\u4f59\u9501\u4ed3\u6570\u91cf\r\n        uint256 lockBalanceNum;\r\n        //\u673a\u6784\u7d22\u5f15\r\n        uint8 index;\r\n        //\u521d\u59cb\u89e3\u9501\u5343\u5206\u6bd4\uff08\u9ed8\u8ba4\u5343\u5206\u6bd4\uff09\r\n        uint256 firstUnlockPre;\r\n        //\u521d\u59cb\u91ca\u653e\u95f4\u9694\r\n        uint256 releaseInterval;\r\n        // \u521d\u59cb\u91ca\u653e\u95f4\u9694\u65f6\u95f4\u4e4b\u540e\u6bcf\u6b21\u91ca\u653e\u7684\u95f4\u9694\u65f6\u95f4\uff08day\uff09\r\n        uint256 intervalTime;\r\n        // \u4ee5\u540e\u6bcf\u6b21\u91ca\u653e\u7684\u5343\u5206\u6bd4\uff08\u9ed8\u8ba4\u5343\u5206\u6bd4\uff09\r\n        uint256 secondUnlockPre;\r\n        //\u6700\u8fd1\u4e00\u6b21\u91ca\u653e\u7684\u65f6\u95f4\r\n        uint256 lastRelease;\r\n        //\u91ca\u653e\u5b8c\u6210\u7684\u6700\u540e\u65f6\u95f4\r\n        uint256 releaseAllTime;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"not onwer\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _owner = msg.sender;\r\n        //\u8bbe\u7f6e\u673a\u6784\u4fe1\u606f\r\n        for (uint8 i = 0; i < orgRecords.length; i++) {\r\n            uint8 x = i + 1;\r\n            orgRecord[x].orgTotal = orgRecords[i][0];\r\n            orgRecord[x].orgBalance = orgRecords[i][0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    //\u94b1\u5305\u5269\u4f59\u9501\u4ed3\u91cf\r\n    function lockNum(address account) external view returns (uint256) {\r\n        uint256 balanceLockNum = _releaseTokenSearch(account);\r\n\r\n        return balanceLockNum;\r\n    }\r\n\r\n    //\u94b1\u5305\u603b\u9501\u4ed3\u91cf\r\n    function totalLock(address account) external view returns (uint256) {\r\n        return walletRecords[account].lockTotal;\r\n    }\r\n\r\n    //\u5f00\u59cb\u65f6\u95f4\r\n    function searchStartTime() external view returns (uint256) {\r\n        return _startTime;\r\n    }\r\n\r\n    //\u673a\u6784\u4e0b\u7684\u94b1\u5305\r\n    function wallets(uint8 index)\r\n        external\r\n        view\r\n        onlyOwner\r\n        returns (address[] memory)\r\n    {\r\n        return orgWallet[index];\r\n    }\r\n\r\n    //\u94b1\u5305\u6240\u5c5e\u673a\u6784\r\n    function belongOrg(address account) external view returns (uint8) {\r\n        return walletRecords[account].index;\r\n    }\r\n\r\n    //\u67e5\u8be2\u5408\u7ea6\u62e5\u6709\u8005\r\n    function searchOwner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    //\u4fee\u6539\u5408\u7ea6\u62e5\u6709\u8005\r\n    function changeOwner(address account) external onlyOwner {\r\n        emit ChangeOwner(_owner, account);\r\n        _owner = account;\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u6d3b\u52a8\u7684\u5f00\u59cb\u65f6\u95f4\r\n    function setStartTime(uint256 startTime) external onlyOwner {\r\n        require(_startTime == 0, \"startTime exist\");\r\n        require(startTime >= block.timestamp, \"time error\");\r\n        _startTime = startTime;\r\n        //\u904d\u5386\u5df2\u5b58\u5728\u7684\u6240\u6709\u6570\u636e\uff0c\u5e76\u5f00\u59cb\u5206\u53d1\r\n        for (uint8 i = 0; i < 5; i++) {\r\n            uint256 _releaseAllTime;\r\n            (_releaseAllTime, , , , ) = _releaseAll(orgRecords[i]);\r\n            uint8 y = i + 1;\r\n            for (uint8 x = 0; x < orgWallet[y].length; x++) {\r\n                if (orgWallet[y].length != 0) {\r\n                    walletRecords[orgWallet[y][x]]\r\n                        .releaseAllTime = _releaseAllTime;\r\n                    _releaseToken(orgWallet[y][x], true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     \u6dfb\u52a0\u7ba1\u7406\u673a\u6784\u53ca\u5176\u5bf9\u5e94token\u6570\u91cf\r\n    _organizationId:\u673a\u6784id\r\n    _walletArray\uff1a\u5bf9\u5e94\u673a\u6784\u7684\u94b1\u5305\u5730\u5740\u6570\u7ec4\r\n    _amountArray\uff1a\u5bf9\u5e94\u673a\u6784\u7684\u94b1\u5305\u5730\u5740token\u6570\u91cf\r\n    _firstUnlockPre\uff1a\u521d\u59cb\u89e3\u9501\u5343\u5206\u6bd4\uff08\u9ed8\u8ba4\u5343\u5206\u6bd4\uff09\r\n    _releaseInterval:\u521d\u59cb\u91ca\u653e\u95f4\u9694\u65f6\u95f4\uff08day\uff09\r\n    _intervalTime:\u521d\u59cb\u91ca\u653e\u95f4\u9694\u65f6\u95f4\u4e4b\u540e\u6bcf\u6b21\u91ca\u653e\u7684\u95f4\u9694\u65f6\u95f4\uff08day\uff09\r\n    _secondUnlockPre: \u4ee5\u540e\u6bcf\u6b21\u91ca\u653e\u7684\u5343\u5206\u6bd4\uff08\u9ed8\u8ba4\u5343\u5206\u6bd4\uff09\r\n    \u6240\u6709\u673a\u6784\u4e4b\u95f4\u7684\u94b1\u5305\u4e0d\u80fd\u91cd\u590d\r\n     */\r\n    function setOrganization(\r\n        uint8 _organizationId,\r\n        address[] memory _walletArray,\r\n        uint256[] memory _amountArray\r\n    ) external onlyOwner {\r\n        require(_organizationId != 0, \"orgid is zero\");\r\n        require(_walletArray.length == _amountArray.length, \"length error\");\r\n        uint8 organizationId = _organizationId - 1;\r\n\r\n        //\u5224\u65ad\u673a\u6784\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\u5224\u65ad\u662f\u5426\u8d85\u8fc7\u673a\u6784\u603b\u989d\uff0c\u6ca1\u8d85\u8fc7\u7ee7\u7eed\u6dfb\u52a0\r\n        uint256 orgTotal;\r\n        OrgRecord storage oneOrgRecord = orgRecord[_organizationId];\r\n        for (uint256 i = 0; i < _amountArray.length; i++) {\r\n            orgTotal += _amountArray[i];\r\n        }\r\n        require(oneOrgRecord.orgBalance >= orgTotal, \"total error\");\r\n        oneOrgRecord.orgBalance = oneOrgRecord.orgBalance - orgTotal;\r\n        uint256 _releaseAllTime;\r\n        uint256 _releaseIntervalValue;\r\n        uint256 _intervalTimeValue;\r\n        uint256 _firstUnlockPre;\r\n        uint256 _secondUnlockPre;\r\n\r\n        (\r\n            _releaseAllTime,\r\n            _releaseIntervalValue,\r\n            _intervalTimeValue,\r\n            _firstUnlockPre,\r\n            _secondUnlockPre\r\n        ) = _releaseAll(orgRecords[organizationId]);\r\n\r\n        for (uint256 i = 0; i < _walletArray.length; i++) {\r\n            orgWallet[_organizationId].push(_walletArray[i]);\r\n            walletRecords[_walletArray[i]] = WalletRecord(\r\n                _amountArray[i],\r\n                _amountArray[i],\r\n                _organizationId,\r\n                _firstUnlockPre,\r\n                _releaseIntervalValue,\r\n                _intervalTimeValue,\r\n                _secondUnlockPre,\r\n                0,\r\n                _releaseAllTime\r\n            );\r\n            _transfer(_owner, _walletArray[i], _amountArray[i]);\r\n        }\r\n        emit Organization(_organizationId, _releaseAllTime);\r\n    }\r\n\r\n    //\u7edf\u8ba1\u9501\u4ed3\u7684\u6570\u91cf\r\n    function _releaseToken(address account, bool isSetTime) private {\r\n        WalletRecord storage walletRecorde = walletRecords[account];\r\n        uint8 _organizationId = walletRecorde.index;\r\n        if (\r\n            _organizationId == 0 || walletRecords[account].lockBalanceNum == 0\r\n        ) {\r\n            return;\r\n        }\r\n        uint256 nowTime = block.timestamp;\r\n\r\n        if (\r\n            _organizationId != 6 && _organizationId != 7 && _organizationId != 0\r\n        ) {\r\n            require(_startTime != 0, \"no start time\");\r\n            //\u5982\u679c\u662f\u8bbe\u7f6e\u65f6\u95f4\uff0c\u90a3\u4e48\u8bbe\u7f6e\u7684\u65f6\u95f4\u5fc5\u987b\u5927\u4e8e\u5f53\u524d\u65f6\u95f4\r\n            if (isSetTime) {\r\n                require(nowTime < _startTime, \"not initial time\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        //\u56e0\u4e3a\u91ca\u653e\u662f\u6839\u636e\u5343\u5206\u6bd4\uff0c\u6240\u4ee5\u7edf\u8ba1\u5176\u4e2d\u4e00\u4e2a\u5373\u53ef\r\n        require(walletRecorde.lockBalanceNum != 0, \"all released\");\r\n        //\u5224\u65ad\u662f\u5426\u4ec5\u5728\u521d\u59cb\u91ca\u653e\u65f6\u95f4\u5185\r\n        uint256 lockBalanceValue = _lockBalanceNum(walletRecorde, nowTime);\r\n        walletRecorde.lockBalanceNum = lockBalanceValue;\r\n        walletRecorde.lastRelease = nowTime;\r\n    }\r\n\r\n    //\u67e5\u8be2\u5269\u4f59\u9501\u4ed3\u91cf\r\n    function _releaseTokenSearch(address account)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        WalletRecord storage walletRecorde = walletRecords[account];\r\n        uint8 _organizationId = walletRecorde.index;\r\n        if (_organizationId == 0 || walletRecorde.lockBalanceNum == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 nowTime = block.timestamp;\r\n        uint256 lockTotalValue = walletRecorde.lockTotal;\r\n\r\n        if (\r\n            _organizationId != 6 &&\r\n            _organizationId != 7 &&\r\n            (_startTime == 0 || nowTime < _startTime)\r\n        ) {\r\n            return lockTotalValue;\r\n        }\r\n\r\n        return _lockBalanceNum(walletRecorde, nowTime);\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        //\u90e8\u7f72\u5408\u7ea6\u7684\u5730\u5740\u53ea\u80fd\u8f6c\u7ed9\u673a\u6784\u4e0b\u7684\u94b1\u5305,\u4e14\u53ea\u80fd\u8f6c\u4e00\u6b21\r\n        if (from == _owner) {\r\n            require(\r\n                walletRecords[to].index != 0 &&\r\n                    walletRecords[to].lastRelease == 0,\r\n                \"can not tx\"\r\n            );\r\n        }\r\n        _releaseToken(from, false);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        uint256 lockBalanceNumValue = walletRecords[from].lockBalanceNum;\r\n        require(fromBalance - lockBalanceNumValue >= amount, \"not enough\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        require(\r\n            fromBalance >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n        }\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(\r\n                currentAllowance >= amount,\r\n                \"ERC20: insufficient allowance\"\r\n            );\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    //\u8ba1\u7b97\u5168\u90e8\u91ca\u653e\u5b8c\u6210\u7684\u65f6\u95f4\r\n    function _releaseAll(uint256[5] storage oneOrgRecordMsg)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 _firstUnlockPre = oneOrgRecordMsg[1];\r\n        //\u521d\u59cb\u91ca\u653e\u95f4\u9694\r\n        uint256 _releaseInterval = oneOrgRecordMsg[2].mul(baseInterval);\r\n        //\u4e4b\u540e\u91ca\u653e\u95f4\u9694\r\n        uint256 _intervalTime = oneOrgRecordMsg[3].mul(baseInterval);\r\n        uint256 _secondUnlockPre = oneOrgRecordMsg[4];\r\n\r\n        if (_secondUnlockPre == 0) {\r\n            return (\r\n                _startTime,\r\n                _releaseInterval,\r\n                _intervalTime,\r\n                _firstUnlockPre,\r\n                _secondUnlockPre\r\n            );\r\n        }\r\n        uint256 baseNum = 1000;\r\n        uint256 firstBalance = baseNum.sub(_firstUnlockPre);\r\n        //\u7b2c\u4e8c\u6b21\u53d1\u653e\u7684\u603b\u6b21\u6570\r\n        uint256 times = (firstBalance.sub(firstBalance.mod(_secondUnlockPre)))\r\n            .div(_secondUnlockPre);\r\n        uint256 _releaseAllTimes = _startTime.add(_releaseInterval).add(\r\n            times.mul(_intervalTime)\r\n        );\r\n        return (\r\n            _releaseAllTimes,\r\n            _releaseInterval,\r\n            _intervalTime,\r\n            _firstUnlockPre,\r\n            _secondUnlockPre\r\n        );\r\n    }\r\n\r\n    //\u8ba1\u7b97\u94b1\u5305\u7684\u9501\u5b9a\u4f59\u989d\r\n    function _lockBalanceNum(\r\n        WalletRecord storage walletRecorde,\r\n        uint256 nowTime\r\n    ) private view returns (uint256) {\r\n        /**\u56e0\u4e3a\u91ca\u653e\u662f\u6839\u636e\u5343\u5206\u6bd4\uff0c\u6240\u4ee5\u7edf\u8ba1\u5176\u4e2d\u4e00\u4e2a\u5373\u53ef\r\n        //\u5224\u65ad\u662f\u5426\u4ec5\u5728\u521d\u59cb\u91ca\u653e\u65f6\u95f4\u5185\r\n        \u5224\u65ad\u662f\u5426\u662f\u521d\u6b21\u91ca\u653e\r\n        */\r\n        uint256 lastTime;\r\n        uint256 duration;\r\n        //\u521d\u6b21\u91ca\u653e(\u8bc1\u660e\u8fd8\u6709\u521d\u59cb\u91ca\u653e)\r\n        if (walletRecorde.lastRelease == 0) {\r\n            //\u5728\u521d\u59cb\u95f4\u9694\u65f6\u95f4\u5185\r\n            if (walletRecorde.releaseInterval.add(_startTime) > nowTime) {\r\n                return\r\n                    walletRecorde.lockBalanceNum.sub(\r\n                        walletRecorde\r\n                            .lockTotal\r\n                            .mul(walletRecorde.firstUnlockPre)\r\n                            .div(1000)\r\n                    );\r\n            } else {\r\n                //\u91ca\u653e\u5b8c\u5168\u90e8\r\n                if (nowTime > walletRecorde.releaseAllTime) {\r\n                    return 0;\r\n                } else {\r\n                    //\u5728\u7b2c\u4e8c\u6b21\u95f4\u9694\u65f6\u95f4\r\n                    lastTime = _startTime.add(walletRecorde.releaseInterval);\r\n                    duration = nowTime.sub(lastTime);\r\n                    uint256 times = (\r\n                        duration.sub(duration.mod(walletRecorde.intervalTime))\r\n                    ).div(walletRecorde.intervalTime).add(1);\r\n\r\n                    return\r\n                        walletRecorde.lockBalanceNum.sub(\r\n                            walletRecorde\r\n                                .lockTotal\r\n                                .mul(\r\n                                    walletRecorde.firstUnlockPre.add(\r\n                                        times.mul(walletRecorde.secondUnlockPre)\r\n                                    )\r\n                                )\r\n                                .div(1000)\r\n                        );\r\n                }\r\n            }\r\n        } else {\r\n            //\u91ca\u653e\u5b8c\u5168\u90e8\r\n            if (nowTime > walletRecorde.releaseAllTime) {\r\n                return 0;\r\n            } else {\r\n                //\u5728\u7b2c\u4e8c\u6b21\u95f4\u9694\u65f6\u95f4\r\n                duration = nowTime.sub(walletRecorde.lastRelease);\r\n                uint256 times = (\r\n                    (duration.sub(duration.mod(walletRecorde.intervalTime)))\r\n                ).div(walletRecorde.intervalTime).add(1);\r\n\r\n                return\r\n                    walletRecorde.lockBalanceNum.sub(\r\n                        times.mul(\r\n                            walletRecorde\r\n                                .lockTotal\r\n                                .mul(walletRecorde.secondUnlockPre)\r\n                                .div(1000)\r\n                        )\r\n                    );\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract DistributionERC20 is ERC20 {\r\n    constructor(\r\n        uint256 initialSupply,\r\n        string memory name,\r\n        string memory symbol\r\n    ) ERC20(name, symbol) {\r\n        _mint(msg.sender, initialSupply);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"organizationId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseAllTime\",\"type\":\"uint256\"}],\"name\":\"Organization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"belongOrg\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"searchOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"searchStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_organizationId\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_walletArray\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountArray\",\"type\":\"uint256[]\"}],\"name\":\"setOrganization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"totalLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"wallets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DistributionERC20", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000009b18ab5df7180b6b8000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004424244590000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044242445900000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bc30c164976d34ef0564ebe00fb933021c30f54416baefb9de2a4de6b216bf2b"}