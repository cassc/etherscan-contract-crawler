{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ncontract SparkToken is Context, IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    string public name = \"Spark Token\";\r\n    string public symbol = \"SKT\";\r\n    uint256 public decimals = 18;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 public burnTotalSupply;\r\n    uint256 public minTotalSupply = 10000 * 10 ** decimals;\r\n\r\n    address public usdt = 0x55d398326f99059fF775485246999027B3197955;\r\n    IUniswapV2Router02 public uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    address public uniswapV2Pair;\r\n    address lpDealAddress;\r\n\r\n    mapping(address => address) private recommenderMap;\r\n\r\n    address market = 0x3235a40E73b592aeaA7E1D747A1cA2570d921D89;\r\n    address daoFund = 0x3F5d63590103eddBeA9e034Cb78a5b0F8D112D4A;\r\n    address platform = 0x82D10a3960f20E0604e5Ef3387b0AF6BAECF8777;\r\n    address liquidityManager;\r\n    uint8 private marketRate = 10;\r\n    uint8 private daoFundRate = 10;\r\n    uint8 private lpRate = 10;\r\n    uint8 private lpShareRate = 10;\r\n    uint8 private burnRate = 10;\r\n    uint8 private level = 8;\r\n    mapping(address => bool) private excluded;\r\n    uint256 minLpRate = 100000;\r\n    uint256 minRecommend = 10 ** decimals / 1000;\r\n\r\n    uint256 minLpDealTokenCount = 10 ** decimals;\r\n\r\n    uint256 private startTime;\r\n    uint256 limit = 50 * 10 ** decimals;\r\n    mapping(address => bool) private notLimit;\r\n    mapping(address => bool) private transNotLimit;\r\n\r\n    mapping(address => bool) private blacklist;\r\n\r\n    mapping(address => uint32) private lastTradeTime;\r\n    uint16 private tradeInterval = 30;\r\n\r\n    bool lock;\r\n    modifier swapLock() {\r\n        require(!lock, \"SparkToken: swap locked\");\r\n        lock = true;\r\n        _;\r\n        lock = false;\r\n    }\r\n\r\n    constructor(uint256 _startTime) {\r\n        _mint(owner(), 100000 * 10 ** decimals);\r\n        startTime = _startTime;\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n        .createPair(address(this), usdt);\r\n\r\n        excluded[address(this)] = true;\r\n        excluded[address(uniswapV2Router)] = true;\r\n        excluded[market] = true;\r\n        excluded[daoFund] = true;\r\n        excluded[platform] = true;\r\n        excluded[owner()] = true;\r\n\r\n        notLimit[address(this)] = true;\r\n        notLimit[uniswapV2Pair] = true;\r\n        notLimit[address(uniswapV2Router)] = true;\r\n        notLimit[market] = true;\r\n        notLimit[daoFund] = true;\r\n        notLimit[platform] = true;\r\n        notLimit[owner()] = true;\r\n\r\n        transNotLimit[market] = true;\r\n        transNotLimit[daoFund] = true;\r\n        transNotLimit[platform] = true;\r\n        transNotLimit[owner()] = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function initLiquidityManager(address _liquidityManager) public onlyOwner {\r\n        liquidityManager = _liquidityManager;\r\n        excluded[liquidityManager] = true;\r\n        notLimit[liquidityManager] = true;\r\n        Address.functionCall(\r\n            liquidityManager,\r\n            abi.encodeWithSelector(\r\n                    0x544b08b5,\r\n                    address(uniswapV2Router),\r\n                    usdt,\r\n                    address(this),\r\n                    uniswapV2Pair,\r\n                    platform,\r\n                    minLpDealTokenCount\r\n            )\r\n        );\r\n    }\r\n\r\n    function setMinLpDealTokenCount(uint256 _minLpDealTokenCount) public onlyOwner {\r\n        minLpDealTokenCount = _minLpDealTokenCount;\r\n        Address.functionCall(liquidityManager, abi.encodeWithSelector(0x921118ae, minLpDealTokenCount));\r\n    }\r\n\r\n    function setLpDealAddress(address _lpDealAddress) public onlyOwner {\r\n        lpDealAddress = _lpDealAddress;\r\n    }\r\n\r\n    function addBlackList(address _addr, bool _state) public onlyOwner {\r\n        blacklist[_addr] = _state;\r\n    }\r\n\r\n    function setStartTime(uint256 _startTime) public onlyOwner {\r\n        startTime = _startTime;\r\n    }\r\n\r\n    function start() public onlyOwner {\r\n        startTime = block.timestamp;\r\n    }\r\n\r\n    function setExcluded(address _addr, bool _state) public onlyOwner {\r\n        excluded[_addr] = _state;\r\n    }\r\n\r\n    function setNotLimit(address _addr, bool _state) public onlyOwner {\r\n        notLimit[_addr] = _state;\r\n    }\r\n\r\n    function setTransNotLimit(address _addr, bool _state) public onlyOwner {\r\n        transNotLimit[_addr] = _state;\r\n    }\r\n\r\n    function getRecommenderList(address _addr, uint256 _level) public view returns(address[] memory list) {\r\n        require(_level <= 8, \"SparkToken: level > 8\");\r\n        require(excluded[_msgSender()], \"SparkToken: No permission\");\r\n        list = new address[](_level);\r\n        address recommender = recommenderMap[_addr];\r\n        for (uint256 i ; i < _level ; i++) {\r\n            list[i] = recommender;\r\n            recommender = recommenderMap[recommender];\r\n        }\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 amount) public {\r\n        address spender = _msgSender();\r\n        require(excluded[spender], \"SparkToken: Cannot burn\");\r\n        _burn(spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"SparkToken: transfer from the zero address\");\r\n        require(to != address(0), \"SparkToken: transfer to the zero address\");\r\n        require(!blacklist[from], \"SparkToken: Blacklist users\");\r\n\r\n        _tradeControl(from, to);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"SparkToken: transfer amount exceeds balance\");\r\n\r\n        _balances[from] = fromBalance - amount;\r\n\r\n        if (amount >= minRecommend) {\r\n            _saveRecommender(from, to);\r\n        }\r\n\r\n        uint256 finalAmount = _fee(from, to, amount);\r\n\r\n        if (!Address.isContract(from) && !Address.isContract(to)) {\r\n            _swapForLiquidity();\r\n        }\r\n\r\n        if (!transNotLimit[from] && !notLimit[to]) {\r\n            require(_balances[to] + finalAmount <= limit, \"SparkToken: limit 50\");\r\n        }\r\n        _balances[to] += finalAmount;\r\n\r\n        emit Transfer(from, to, finalAmount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) private {\r\n        require(account != address(0), \"SparkToken: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) private {\r\n        require(account != address(0), \"SparkToken: burn from the zero address\");\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"SparkToken: burn amount exceeds balance\");\r\n\r\n        _balances[account] = accountBalance - amount;\r\n\r\n        _baseBurn(account, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"SparkToken: approve from the zero address\");\r\n        require(spender != address(0), \"SparkToken: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"SparkToken: insufficient allowance\");\r\n\r\n            _approve(owner, spender, currentAllowance - amount);\r\n        }\r\n    }\r\n\r\n    function _saveRecommender(address from, address to) private {\r\n        if (recommenderMap[to] != address(0)) {\r\n            return;\r\n        }\r\n\r\n        if (from == to) {\r\n            return;\r\n        }\r\n\r\n        if (Address.isContract(to)\r\n            || to == address(0)) {\r\n            return;\r\n        }\r\n\r\n        if (to == owner()) {\r\n            return;\r\n        }\r\n\r\n        if (excluded[to] && !excluded[from]) {\r\n            return;\r\n        }\r\n\r\n        recommenderMap[to] = Address.isContract(from) ? platform : from;\r\n    }\r\n\r\n    function _tradeControl(address from, address to) private {\r\n        if (from == address(uniswapV2Pair) || to == address(uniswapV2Pair)) {\r\n            address addr = from == address(uniswapV2Pair) ? to : from;\r\n            if (!notLimit[addr]) {\r\n                if (startTime > block.timestamp) {\r\n\r\n                    revert(\"SparkToken: Transaction not started\");\r\n\r\n                } else if (startTime + 10 > block.timestamp && from == address(uniswapV2Pair)) {\r\n\r\n                    blacklist[addr] = true;\r\n\r\n                } else if (startTime + 3600 > block.timestamp && from == address(uniswapV2Pair)) {\r\n\r\n                    require(lastTradeTime[addr] + tradeInterval <= block.timestamp, \"SparkToken: Insufficient interval\");\r\n                    lastTradeTime[addr] = uint32(block.timestamp);\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function _fee(address from, address to, uint256 amount) private returns(uint256 finalAmount) {\r\n        if (from == address(uniswapV2Pair) || to == address(uniswapV2Pair)) {\r\n            address addr = from == address(uniswapV2Pair) ? to : from;\r\n            if (excluded[addr]) {\r\n                finalAmount = amount;\r\n            } else {\r\n                finalAmount = _countFee(from, addr, amount);\r\n            }\r\n        } else {\r\n            finalAmount = amount;\r\n        }\r\n    }\r\n\r\n    function _countFee(address from, address addr, uint256 amount) private returns(uint256 finalAmount) {\r\n        uint256 marketFee = amount * marketRate / 1000;\r\n        uint256 daoFundFee = amount * daoFundRate / 1000;\r\n        uint256 lpFee = amount * lpRate / 1000;\r\n        uint256 lpShareFee = amount * lpShareRate / 1000;\r\n        uint256 burnFee = amount * burnRate / 1000;\r\n\r\n        uint256 totalRate = _countBonusLevel();\r\n\r\n        uint256 bonusFee = amount * totalRate / 1000;\r\n\r\n        if (level == 0) {\r\n            burnFee = 0;\r\n            bonusFee = 0;\r\n        }\r\n\r\n        finalAmount = amount - marketFee - daoFundFee - lpFee - lpShareFee - burnFee - bonusFee;\r\n\r\n        if (level > 0) {\r\n            address recommender = recommenderMap[addr];\r\n            IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\r\n            for (uint256 i ; i < level && recommender != address(0) ; i++) {\r\n                if (pair.balanceOf(recommender) < 1000 && !excluded[recommender]) {\r\n                    recommender = recommenderMap[recommender];\r\n                    continue;\r\n                }\r\n\r\n                uint256 bonus = amount * 5 / 1000;\r\n\r\n                if (_balances[recommender] >= limit && !excluded[recommender]) {\r\n                    burnFee += bonus;\r\n                } else {\r\n                    _addBalance(from, recommender, bonus);\r\n                }\r\n\r\n                bonusFee -= bonus;\r\n\r\n                recommender = recommenderMap[recommender];\r\n            }\r\n        }\r\n\r\n        if (bonusFee > 0) {\r\n            _addBalance(from, platform, bonusFee);\r\n        }\r\n        if (marketFee > 0) {\r\n            _addBalance(from, market, marketFee);\r\n        }\r\n        _addBalance(from, daoFund, daoFundFee);\r\n        _addBalance(from, liquidityManager, lpFee + lpShareFee);\r\n\r\n        if (burnFee > 0) {\r\n            _baseBurn(from, burnFee);\r\n        }\r\n    }\r\n\r\n    function _baseBurn(address from, uint256 amount) private {\r\n        uint256 finalBurn = 0;\r\n        if (_totalSupply > minTotalSupply) {\r\n            finalBurn = amount;\r\n            if (_totalSupply - amount < minTotalSupply) {\r\n                finalBurn = _totalSupply - minTotalSupply;\r\n            }\r\n            _totalSupply -= finalBurn;\r\n            burnTotalSupply += finalBurn;\r\n            emit Transfer(from, address(0), finalBurn);\r\n\r\n            if (_totalSupply <= 10000 * 10 ** decimals) {\r\n                if (level > 0) {\r\n                    level = 0;\r\n                }\r\n            } else if (_totalSupply < 30000 * 10 ** decimals) {\r\n                if (level > 2) {\r\n                    marketRate = 0;\r\n                    daoFundRate = 20;\r\n                    level = 2;\r\n                }\r\n            } else if (_totalSupply < 50000 * 10 ** decimals) {\r\n                if (level > 4) {\r\n                    level = 4;\r\n                }\r\n            } else if (_totalSupply < 80000 * 10 ** decimals) {\r\n                if (level > 6) {\r\n                    level = 6;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (finalBurn < amount) {\r\n            _addBalance(from, platform, amount - finalBurn);\r\n        }\r\n    }\r\n\r\n    function _countBonusLevel() private view returns(uint256 totalRate) {\r\n        for (uint256 i ; i < level ; i++) {\r\n            totalRate += 5;\r\n        }\r\n    }\r\n\r\n    function _addBalance(address from, address to, uint256 amount) private {\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _swapForLiquidity() private swapLock {\r\n        uint256 tokens = _balances[liquidityManager];\r\n        if (tokens < minLpDealTokenCount) {\r\n            return;\r\n        }\r\n\r\n        Address.functionCall(liquidityManager, abi.encodeWithSelector(0x24b1c2ba, lpRate, lpShareRate));\r\n    }\r\n\r\n    function _baseTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"SparkToken: transfer from the zero address\");\r\n        require(to != address(0), \"SparkToken: transfer to the zero address\");\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"SparkToken: transfer amount exceeds balance\");\r\n        _balances[from] = fromBalance - amount;\r\n\r\n        _balances[to] += amount;\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"addBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"getRecommenderList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityManager\",\"type\":\"address\"}],\"name\":\"initLiquidityManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpDealAddress\",\"type\":\"address\"}],\"name\":\"setLpDealAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minLpDealTokenCount\",\"type\":\"uint256\"}],\"name\":\"setMinLpDealTokenCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setNotLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setTransNotLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SparkToken", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000007131b88a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d0cc77801da65cdaf4f1f6c8614b707d2141c431f5803cf662e7fe9c07aee349"}