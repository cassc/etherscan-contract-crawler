{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ncontract PaymentDistributer {\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function distribute(address[] calldata recipients, uint256[] calldata amounts) external payable  {\r\n      \r\n        require(recipients.length == amounts.length, \"Invalid input data\");\r\n        require(recipients.length > 0, \"Zero size array not allowed\");\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            payable(recipients[i]).transfer(amounts[i]);\r\n        }\r\n    }\r\n     function signUp(address[] calldata recipients, uint256[] calldata amounts) external payable  {\r\n       \r\n        require(recipients.length == amounts.length, \"Invalid input data\");\r\n        require(recipients.length > 0, \"Zero size array not allowed\");\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            payable(recipients[i]).transfer(amounts[i]);\r\n        }\r\n    }\r\n         function smartMatrix(address[] calldata recipients, uint256[] calldata amounts) external payable  {\r\n        \r\n        require(recipients.length == amounts.length, \"Invalid input data\");\r\n        require(recipients.length > 0, \"Zero size array not allowed\");\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            payable(recipients[i]).transfer(amounts[i]);\r\n        }\r\n    }\r\n    \r\n         function pooling(address[] calldata recipients, uint256[] calldata amounts) external payable  {\r\n      \r\n        require(recipients.length == amounts.length, \"Invalid input data\");\r\n        require(recipients.length > 0, \"Zero size array not allowed\");\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            payable(recipients[i]).transfer(amounts[i]);\r\n        }\r\n    }\r\n             function teamEarning(address[] calldata recipients, uint256[] calldata amounts) external payable  {\r\n      \r\n        require(recipients.length == amounts.length, \"Invalid input data\");\r\n        require(recipients.length > 0, \"Zero size array not allowed\");\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            payable(recipients[i]).transfer(amounts[i]);\r\n        }\r\n    }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"pooling\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"signUp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"smartMatrix\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"teamEarning\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PaymentDistributer", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0bf99d54c67c2c69fe83282e1452fb65437d65fd522664c741bd65ea42c5d714"}