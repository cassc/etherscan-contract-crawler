{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/compound/CDelegateInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\ncontract CDelegationStorage {\\n  /**\\n   * @notice Implementation address for this contract\\n   */\\n  address public implementation;\\n}\\n\\nabstract contract CDelegateInterface is CDelegationStorage {\\n  /**\\n   * @notice Emitted when implementation is changed\\n   */\\n  event NewImplementation(address oldImplementation, address newImplementation);\\n\\n  /**\\n   * @notice Called by the admin to update the implementation of the delegator\\n   * @param implementation_ The address of the new implementation for delegation\\n   * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n   * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n   */\\n  function _setImplementationSafe(\\n    address implementation_,\\n    bool allowResign,\\n    bytes calldata becomeImplementationData\\n  ) external virtual;\\n\\n  /**\\n   * @notice Called by the delegator on a delegate to initialize it for duty\\n   * @dev Should revert if any issues arise which make it unfit for delegation\\n   * @param data The encoded bytes data for any initialization\\n   */\\n  function _becomeImplementation(bytes calldata data) public virtual;\\n\\n  /**\\n   * @notice Function called before all delegator functions\\n   * @dev Checks comptroller.autoImplementation and upgrades the implementation if necessary\\n   */\\n  function _prepare() external payable virtual;\\n\\n  function contractType() external virtual returns (string memory);\\n}\\n\",\r\n      \"keccak256\": \"0x4046c6e652c022f839f1c6dbd62e8d2c704db867d2a15ce4286208c1971ad1c0\"\r\n    },\r\n    \"contracts/compound/CErc20Delegator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./CDelegateInterface.sol\\\";\\n\\n/**\\n * @title Compound's CErc20Delegator Contract\\n * @notice CTokens which wrap an EIP-20 underlying and delegate to an implementation\\n * @author Compound\\n */\\ncontract CErc20Delegator is CDelegationStorage {\\n  /**\\n   * @notice Construct a new money market\\n   * @param underlying_ The address of the underlying asset\\n   * @param comptroller_ The address of the Comptroller\\n   * @param interestRateModel_ The address of the interest rate model\\n   * @param name_ ERC-20 name of this token\\n   * @param symbol_ ERC-20 symbol of this token\\n   * @param implementation_ The address of the implementation the contract delegates to\\n   * @param becomeImplementationData The encoded args for becomeImplementation\\n   */\\n  constructor(\\n    address underlying_,\\n    ComptrollerInterface comptroller_,\\n    address payable fuseAdmin_,\\n    InterestRateModel interestRateModel_,\\n    string memory name_,\\n    string memory symbol_,\\n    address implementation_,\\n    bytes memory becomeImplementationData,\\n    uint256 reserveFactorMantissa_,\\n    uint256 adminFeeMantissa_\\n  ) {\\n    // First delegate gets to initialize the delegator (i.e. storage contract)\\n    delegateTo(\\n      implementation_,\\n      abi.encodeWithSignature(\\n        \\\"initialize(address,address,address,address,string,string,uint256,uint256)\\\",\\n        underlying_,\\n        comptroller_,\\n        fuseAdmin_,\\n        interestRateModel_,\\n        name_,\\n        symbol_,\\n        reserveFactorMantissa_,\\n        adminFeeMantissa_\\n      )\\n    );\\n\\n    // New implementations always get set via the settor (post-initialize)\\n    delegateTo(\\n      implementation_,\\n      abi.encodeWithSignature(\\n        \\\"_setImplementationSafe(address,bool,bytes)\\\",\\n        implementation_,\\n        false,\\n        becomeImplementationData\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @notice Internal method to delegate execution to another contract\\n   * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\n   * @param callee The contract to delegatecall\\n   * @param data The raw data to delegatecall\\n   * @return The returned bytes from the delegatecall\\n   */\\n  function delegateTo(address callee, bytes memory data) internal returns (bytes memory) {\\n    (bool success, bytes memory returnData) = callee.delegatecall(data);\\n    assembly {\\n      if eq(success, 0) {\\n        revert(add(returnData, 0x20), returndatasize())\\n      }\\n    }\\n    return returnData;\\n  }\\n\\n  /**\\n   * @notice Delegates execution to an implementation contract\\n   * @dev It returns to the external caller whatever the implementation returns or forwards reverts\\n   */\\n  receive() external payable {}\\n\\n  fallback() external payable {\\n    // Cannot send value to CErc20Delegator\\n    require(msg.value == 0, \\\"CErc20Delegator:fallback: cannot send value to fallback\\\");\\n\\n    // Check for automatic implementation\\n    delegateTo(implementation, abi.encodeWithSignature(\\\"_prepare()\\\"));\\n\\n    // delegate all other functions to current implementation\\n    (bool success, ) = implementation.delegatecall(msg.data);\\n\\n    assembly {\\n      let free_mem_ptr := mload(0x40)\\n      returndatacopy(free_mem_ptr, 0, returndatasize())\\n\\n      switch success\\n      case 0 {\\n        revert(free_mem_ptr, returndatasize())\\n      }\\n      default {\\n        return(free_mem_ptr, returndatasize())\\n      }\\n    }\\n  }\\n}\\n\",\r\n      \"keccak256\": \"0x36a3f442ba5cf5c7b02f13f39ffce27c8648cc82a70aa8638d4b26d9932fee2f\"\r\n    },\r\n    \"contracts/compound/ComptrollerInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\nabstract contract ComptrollerInterface {\\n  /// @notice Indicator that this is a Comptroller contract (for inspection)\\n  bool public constant isComptroller = true;\\n\\n  function getMaxRedeemOrBorrow(\\n    address account,\\n    address cToken,\\n    bool isBorrow\\n  ) external virtual returns (uint256);\\n\\n  /*** Assets You Are In ***/\\n\\n  function enterMarkets(address[] calldata cTokens) external virtual returns (uint256[] memory);\\n\\n  function exitMarket(address cToken) external virtual returns (uint256);\\n\\n  /*** Policy Hooks ***/\\n\\n  function mintAllowed(\\n    address cToken,\\n    address minter,\\n    uint256 mintAmount\\n  ) external virtual returns (uint256);\\n\\n  function redeemAllowed(\\n    address cToken,\\n    address redeemer,\\n    uint256 redeemTokens\\n  ) external virtual returns (uint256);\\n\\n  function redeemVerify(\\n    address cToken,\\n    address redeemer,\\n    uint256 redeemAmount,\\n    uint256 redeemTokens\\n  ) external virtual;\\n\\n  function borrowAllowed(\\n    address cToken,\\n    address borrower,\\n    uint256 borrowAmount\\n  ) external virtual returns (uint256);\\n\\n  function borrowWithinLimits(address cToken, uint256 accountBorrowsNew) external virtual returns (uint256);\\n\\n  function repayBorrowAllowed(\\n    address cToken,\\n    address payer,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external virtual returns (uint256);\\n\\n  function liquidateBorrowAllowed(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    address liquidator,\\n    address borrower,\\n    uint256 repayAmount\\n  ) external virtual returns (uint256);\\n\\n  function seizeAllowed(\\n    address cTokenCollateral,\\n    address cTokenBorrowed,\\n    address liquidator,\\n    address borrower,\\n    uint256 seizeTokens\\n  ) external virtual returns (uint256);\\n\\n  function transferAllowed(\\n    address cToken,\\n    address src,\\n    address dst,\\n    uint256 transferTokens\\n  ) external virtual returns (uint256);\\n\\n  /*** Liquidity/Liquidation Calculations ***/\\n\\n  function liquidateCalculateSeizeTokens(\\n    address cTokenBorrowed,\\n    address cTokenCollateral,\\n    uint256 repayAmount\\n  ) external view virtual returns (uint256, uint256);\\n\\n  /*** Pool-Wide/Cross-Asset Reentrancy Prevention ***/\\n\\n  function _beforeNonReentrant() external virtual;\\n\\n  function _afterNonReentrant() external virtual;\\n}\\n\",\r\n      \"keccak256\": \"0xec5cefaf4f7f7495e8965610d89504222bf86349d052385a69dda0c17f9b57ee\"\r\n    },\r\n    \"contracts/compound/InterestRateModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\nabstract contract InterestRateModel {\\n  /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n  bool public constant isInterestRateModel = true;\\n\\n  /**\\n   * @notice Calculates the current borrow interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getBorrowRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves\\n  ) public view virtual returns (uint256);\\n\\n  /**\\n   * @notice Calculates the current supply interest rate per block\\n   * @param cash The total amount of cash the market has\\n   * @param borrows The total amount of borrows the market has outstanding\\n   * @param reserves The total amount of reserves the market has\\n   * @param reserveFactorMantissa The current reserve factor the market has\\n   * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n   */\\n  function getSupplyRate(\\n    uint256 cash,\\n    uint256 borrows,\\n    uint256 reserves,\\n    uint256 reserveFactorMantissa\\n  ) public view virtual returns (uint256);\\n}\\n\",\r\n      \"keccak256\": \"0x587a54b49d48df2cd91583eac93ddde4e2849f79d0441f179bf835e9dffe24e9\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true,\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"},{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"fuseAdmin_\",\"type\":\"address\"},{\"internalType\":\"contract InterestRateModel\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"becomeImplementationData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFeeMantissa_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CErc20Delegator", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000027b5fc5333246f63280da8e3e533512efa747c1300000000000000000000000031d76a64bc8bbeffb601fac5884372def910f044000000000000000000000000fc1f56c58286e7215701a773b61bff2e18a177de0000000000000000000000007b8a724df0ee566303fcc2699f7c124fcbecf686000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000a0306a5f502b14e1de5e3c653f8597d98519236400000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e4a6172766973206a4649415420456c6c69707369732e66696e616e6365203342524c20286a42524c2c2042525a2c2042525a2028576f726d686f6c65292900000000000000000000000000000000000000000000000000000000000000000007663362726c2d310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "1", "Implementation": "0xa53754f3f7f09cca16e75e37e5bebed579ce3f3f", "SwarmSource": "none://164736f6c634300080a000a"}