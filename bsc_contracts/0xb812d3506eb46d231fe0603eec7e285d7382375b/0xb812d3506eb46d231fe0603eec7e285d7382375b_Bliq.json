{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: contracts/bliq.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ninterface IBoracle {\r\n    function blaPrice() external view returns (uint256);\r\n    function decimals() external view returns (uint256);\r\n}\r\n\r\ncontract Bliq {\r\n    address public owner;\r\n    uint256 public decimals;\r\n    uint256 public totalUsdtBorrowed;\r\n    uint256 internal constant minFeeBp = 50;\r\n    uint256 internal constant maxFeeBp = 500;\r\n    uint256 internal constant minBorrowAmount = 10;\r\n    uint256 internal collateralRatio_initial = 250;\r\n    uint256 internal collateralRatio_maintain = 200;\r\n    address internal blackholeAddress = address(1); // not set\r\n    IBoracle internal boracle;\r\n    IERC20 internal usdt;\r\n    IERC20 internal bla;\r\n    mapping(address => uint256) public blaBalances;\r\n    mapping(address => uint256) public usdtBorrowed;\r\n\r\n    event TransferOwnership(address newOwner);\r\n    event SetBoracleAddress(address newBoracleAddress); \r\n    event SetCollateralRatio(uint256 ratio_initial, uint256 ratio_maintain);\r\n    event DepositUsdt(uint256 amount);\r\n    event WithdrawUsdt(uint256 amount);\r\n    event StakeBla(address user, uint256 amount);\r\n    event UnstakeBla(address user, uint256 amount);\r\n    event BorrowUsdt(address user, uint256 amount, uint256 fee);\r\n    event ReturnUsdt(address user, uint256 amount);\r\n    event Liquidate(address borrower, address liquidator, uint price, uint256 amount_usdt, uint256 amount_bla);\r\n    \r\n    constructor(address address_Boracle, address address_Usdt, address address_bla) {\r\n        boracle = IBoracle(address_Boracle);\r\n        usdt = IERC20(address_Usdt);\r\n        bla = IERC20(address_bla);\r\n        owner = msg.sender;\r\n        decimals = boracle.decimals();\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not the owner\");\r\n        _;\r\n    }\r\n\r\n    function getBlaPrice() public view returns (uint256) {\r\n        uint256 price = boracle.blaPrice();\r\n        return price;\r\n    }\r\n    \r\n    function getAvailableUsdt() public view returns (uint256){\r\n        return usdt.balanceOf(address(this));\r\n    }\r\n    \r\n    function getTotalBlaLocked() public view returns (uint256){\r\n        return bla.balanceOf(address(this));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"Zero address\");\r\n        require(newOwner != owner, \"New owner must be different from current owner\");\r\n        owner = newOwner;\r\n        emit TransferOwnership(newOwner);\r\n    }\r\n\r\n    function setBoracleAddress(address newBoracleAddress) external onlyOwner {\r\n        require(newBoracleAddress != address(0), \"Zero address\");\r\n        boracle = IBoracle(newBoracleAddress);\r\n        decimals = boracle.decimals();\r\n        emit SetBoracleAddress(newBoracleAddress);\r\n    }\r\n\r\n    function setCollateralRatio(uint256 ratio_initial, uint256 ratio_maintain) external onlyOwner {\r\n        require(ratio_initial > 0, \"Zero ratio_initial\");\r\n        require(ratio_maintain > 0, \"Zero ratio_maintain\");\r\n        collateralRatio_initial = ratio_initial;\r\n        collateralRatio_maintain = ratio_maintain;\r\n        emit SetCollateralRatio(ratio_initial, ratio_maintain);\r\n    }\r\n\r\n    // Owner deposit USDT\r\n\r\n    function depositUsdt(uint256 amount) external onlyOwner {\r\n        // check\r\n        require(amount > 0, \"Amount should be greater than zero\");\r\n\r\n        // send\r\n        require(usdt.transferFrom(msg.sender, address(this), amount), \"Failed to transfer USDT\");\r\n\r\n        // emit\r\n        emit DepositUsdt(amount);\r\n    }\r\n\r\n    function withdrawUsdt(uint256 amount) external onlyOwner {\r\n        // check\r\n        require(amount > 0, \"Amount should be greater than zero\");\r\n        uint256 availableUsdt = getAvailableUsdt();\r\n        require(availableUsdt >= amount, \"Not enough available USDT\");\r\n        \r\n        // send \r\n        require(usdt.transfer(msg.sender, amount), \"Failed to transfer USDT\");\r\n\r\n        // emit\r\n        emit WithdrawUsdt(amount);\r\n    }\r\n\r\n    // User stake BLA\r\n\r\n    function stakeBla(uint256 amount) external {\r\n        // check\r\n        require(bla.allowance(msg.sender, address(this)) >= amount, \"Insufficient allowance\");\r\n        require(amount > 0, \"Amount should be greater than zero\");\r\n\r\n        // update\r\n        blaBalances[msg.sender] = blaBalances[msg.sender] + amount;\r\n\r\n        // send\r\n        require(bla.transferFrom(msg.sender, address(this), amount), \"Failed to transfer BLA\");\r\n\r\n        // emit\r\n        emit StakeBla(msg.sender, amount);\r\n    }\r\n\r\n    function unstakeBla(uint256 amount) external {\r\n        // check\r\n        require(amount > 0, \"Amount should be greater than zero\");\r\n        require(blaBalances[msg.sender] >= amount, \"Insufficient BLA balance\");\r\n        uint256 _minStakeBla = minStakeBla(msg.sender);\r\n        require(blaBalances[msg.sender] - amount >= _minStakeBla, \"Not enough collateral\");\r\n\r\n        // update\r\n        blaBalances[msg.sender] = blaBalances[msg.sender] - amount;\r\n\r\n        // send\r\n        require(bla.transfer(msg.sender, amount), \"Failed to transfer BLA\");\r\n\r\n        // emit\r\n        emit UnstakeBla(msg.sender, amount);\r\n    }\r\n\r\n    // User borrow USDT\r\n\r\n    function maxBorrowedUsdt (address borrower) public view returns (uint256) {\r\n        uint256 price = getBlaPrice();\r\n        return blaBalances[borrower] * price *100 / collateralRatio_initial / 10**decimals;\r\n    }\r\n\r\n    function minStakeBla (address borrower) public view returns (uint256) {\r\n        uint256 price = getBlaPrice();\r\n        return usdtBorrowed[borrower] * collateralRatio_initial * 10**decimals / 100 / price;\r\n    }\r\n\r\n    function liqStakeBla (address borrower) public view returns (uint256) {\r\n        uint256 price = getBlaPrice();\r\n        return usdtBorrowed[borrower] * collateralRatio_maintain * 10**decimals / 100 / price;\r\n    }\r\n\r\n    function feeBp (uint256 amount) public view returns (uint256) {\r\n        require(amount > 0, \"Amount should be greater than zero\");\r\n        uint256 availableUsdt = getAvailableUsdt();\r\n        require(availableUsdt >= amount, \"Not enough available USDT\");\r\n        uint256 a = totalUsdtBorrowed + amount;\r\n        uint256 b = totalUsdtBorrowed + availableUsdt;\r\n        return (maxFeeBp-minFeeBp) * a / b + minFeeBp;\r\n    }\r\n\r\n    function borrowUsdt(uint256 amount) external {\r\n        // check\r\n        require(amount >= minBorrowAmount * 10**18, \"Amount should be greater than minBorrowAmount\");\r\n        uint256 availableUsdt = getAvailableUsdt();\r\n        require(availableUsdt >= amount, \"Not enough available USDT\");\r\n        uint256 _maxBorrowedUsdt = maxBorrowedUsdt(msg.sender);\r\n        require(_maxBorrowedUsdt >= amount + usdtBorrowed[msg.sender], \"Amount is greater then the borrow limit\");\r\n\r\n        // fee\r\n        uint256 price = getBlaPrice();\r\n        uint256 _feeBp = feeBp(amount);\r\n        uint256 fee = amount * 10**decimals * _feeBp / price / 10**4;\r\n        uint256 feeForOwner = fee / 2;\r\n        require(bla.transfer(blackholeAddress, fee - feeForOwner), \"Failed to transfer BLA\");\r\n        blaBalances[owner] = blaBalances[owner] + feeForOwner;\r\n        blaBalances[msg.sender] = blaBalances[msg.sender] - fee;\r\n\r\n        // update\r\n        totalUsdtBorrowed = totalUsdtBorrowed + amount;\r\n        usdtBorrowed[msg.sender] = usdtBorrowed[msg.sender] + amount;\r\n\r\n        // send\r\n        require(usdt.transfer(msg.sender, amount), \"Failed to transfer USDT\");\r\n\r\n        // emit\r\n        emit BorrowUsdt(msg.sender, amount, fee);\r\n    }\r\n\r\n    function returnUsdt(uint256 amount) external {\r\n        // check\r\n        require(amount > 0, \"Amount should be greater than zero\");\r\n        require(usdtBorrowed[msg.sender] >= amount, \"Insufficient USDT borrowed\");\r\n\r\n        // update\r\n        totalUsdtBorrowed = totalUsdtBorrowed - amount;\r\n        usdtBorrowed[msg.sender] = usdtBorrowed[msg.sender] - amount;\r\n\r\n        // send\r\n        require(usdt.transferFrom(msg.sender, address(this), amount), \"Failed to transfer USDT\");\r\n\r\n        // emit\r\n        emit ReturnUsdt(msg.sender, amount);\r\n    }\r\n\r\n    // Liquidation\r\n\r\n    function liquidate(address borrower, uint256 amount_usdt, bool force) external {\r\n        // check\r\n        require(blaBalances[borrower] > 0, \"Borrower has no BLA balance to liquidate\");\r\n        uint256 _liqStakeBla = liqStakeBla(borrower);\r\n        require(blaBalances[borrower] < _liqStakeBla, \"Borrower's BLA is still sufficient\");\r\n        require(amount_usdt<=usdtBorrowed[borrower], \"The amount_usdt is over the borrowed amount\");\r\n\r\n        // update\r\n        //// sender return usdt for borrower\r\n        totalUsdtBorrowed = totalUsdtBorrowed - amount_usdt;\r\n        usdtBorrowed[borrower] = usdtBorrowed[borrower] - amount_usdt;\r\n        //// sender recieve bla reward from borrower\r\n        uint256 price = boracle.blaPrice();\r\n        uint256 amount_bla = amount_usdt * 10**decimals * 110 / 100 / price;\r\n        if (force==false) {\r\n            require(amount_bla<=blaBalances[borrower], \"Borrower can't afford the BLA reward\");\r\n        }\r\n        if (amount_bla>blaBalances[borrower]) {\r\n            amount_bla = blaBalances[borrower];\r\n        }\r\n        blaBalances[msg.sender] = blaBalances[msg.sender] + amount_bla;\r\n        blaBalances[borrower] = blaBalances[borrower] - amount_bla;\r\n\r\n        // send\r\n        require(usdt.transferFrom(msg.sender, address(this), amount_usdt), \"Failed to transfer USDT\");\r\n\r\n        // emit\r\n        emit Liquidate(borrower, msg.sender, price, amount_usdt, amount_bla);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_Boracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address_Usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address_bla\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"BorrowUsdt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositUsdt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_usdt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_bla\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReturnUsdt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBoracleAddress\",\"type\":\"address\"}],\"name\":\"SetBoracleAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio_initial\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratio_maintain\",\"type\":\"uint256\"}],\"name\":\"SetCollateralRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeBla\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnstakeBla\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawUsdt\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blaBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrowUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"feeBp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlaPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBlaLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"liqStakeBla\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_usdt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"maxBorrowedUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"minStakeBla\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"returnUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBoracleAddress\",\"type\":\"address\"}],\"name\":\"setBoracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio_initial\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratio_maintain\",\"type\":\"uint256\"}],\"name\":\"setCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeBla\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsdtBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeBla\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usdtBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Bliq", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000003e33d899e3ec740582448d7cda659986a3b176ce00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000006aee38ee96ab844d1e5a93f636c62e43f479b3e2", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://797d9b3f70467ea53217bd0908451ace97406a3a2809ee06095a9b82d104defd"}