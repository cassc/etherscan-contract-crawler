{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-04-17\r\n*/\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.6;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable {\r\n    address public _owner;\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract MT is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // get balance\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    // no fee.\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n\r\n    // custom limit amount percent\r\n    mapping(address => bool) private _isCustomLimitAmount;\r\n    mapping(address => uint256) private _customLimitAmountPercent;\r\n    uint256 public _limitAmountPercent;\r\n\r\n    // custom other fee\r\n    mapping(address => bool) private _isCustomOtherFee;\r\n    mapping(address => uint256) private _customOtherFee;\r\n\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal;\r\n    uint256 public _tTotalFeeMax;\r\n    uint256 private _rTotal;\r\n    uint256 private _tFeeTotal;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _decimals;\r\n\r\n    // for fees.\r\n    uint256 public _feeBuyBonus;\r\n    uint256 public _feeBuyFund;\r\n    uint256 public _feeBuyDestroy;\r\n\r\n    uint256 public _feeSellBonus;\r\n    uint256 public _feeSellFund;\r\n    uint256 public _feeSellDestroy;\r\n    // fee to other\r\n    uint256 public _feeOther;\r\n    // free for pool locker\r\n    uint256 public _feeFromPoolLockerTechnical; // for Technical\r\n    uint256 public _feeFromPoolLockerFund;// for fund\r\n\r\n    address private _destroyAddress = address(0x000000000000000000000000000000000000dEaD);\r\n\r\n    /** addresses for online **/\r\n    address public _mainAddress = address(0x54952f727806E98E5Cbf60d245031f2D417554d7);// main address.\r\n    address public _technicalAddress = address(0x2b2fB8d736E318059F1A572eb910dF60efd4bFb3);// technical address.\r\n    address public _bonusAddress = address(0x7c355082bDB119b5a885754cD6917787419E4267);// bonus address.\r\n    address public _fundAddress = address(0x1458B095CcfCd325d70BC1f231A438A622EEae09);// fund address.\r\n    address public _otherAddress = address(0xCB9Af777C90736b5848825065E7fc9264d1D81fA);// other address\r\n    address public _minerAddress = address(0xCD3Ea18cdea3FEb5eF1Ae8b77E2b03Cd6CAaBc6b);// miner address\r\n    address public _withdrawalAddress = address(0xe2766532B511265227368035DcdE85dCBDF59F74);// withdrawal address\r\n    /** addresses for online **/\r\n\r\n    // pair\r\n    address public uniswapV2Pair;\r\n    // the pool locker contract address\r\n    address public poolLocker;\r\n\r\n    constructor(address tokenOwner) {\r\n        _name = \"LITTLE BEE\";\r\n        _symbol = \"LB\";\r\n        _decimals = 18;\r\n\r\n        // fees\r\n        _feeBuyBonus = 3; // buy fee send to Bonus address\r\n        _feeBuyFund = 1; // buy fee send to fund address\r\n        _feeBuyDestroy = 1;// buy fee send to destroy address\r\n\r\n        _feeSellBonus = 3;// sell fee send to Bonus address\r\n        _feeSellFund = 1;// sell fee send to fund address\r\n        _feeSellDestroy = 1;// sell fee send to destroy address\r\n\r\n        _feeOther = 7; // transfer fee by send to other address\r\n\r\n        // for pool locker\r\n        _feeFromPoolLockerTechnical = 1; // transfer fee by send from pool locker\r\n        _feeFromPoolLockerFund = 1; // transfer fee by send from pool locker\r\n\r\n        // total supply\r\n        _tTotal = 2100000 * 10**_decimals;\r\n        // at least 1 leave\r\n        uint256 leaveAmount = 1 * 10**_decimals;\r\n        _tTotalFeeMax = _tTotal.sub(leaveAmount);\r\n        _rTotal = (MAX - (MAX % _tTotal));\r\n        _rOwned[tokenOwner] = _rTotal;\r\n\r\n\r\n        // set excluded from fee address\r\n        _isExcludedFromFee[tokenOwner] = true;\r\n        _isExcludedFromFee[_mainAddress] = true;\r\n        _isExcludedFromFee[_technicalAddress] = true;\r\n        _isExcludedFromFee[_bonusAddress] = true;\r\n        _isExcludedFromFee[_fundAddress] = true;\r\n        _isExcludedFromFee[_otherAddress] = true;\r\n\r\n        // default set _withdrawalAddress fee to other 5%\r\n        _isCustomOtherFee[_withdrawalAddress] = true;\r\n        _customOtherFee[_withdrawalAddress] = 5;\r\n\r\n        // set limit amount\r\n        _limitAmountPercent = 90; // the max percent of transfer amount by balance\r\n        // set default limit amount, set limit amount percent = 100 , means no  limit\r\n       _isCustomLimitAmount[_mainAddress] = true;\r\n       _isCustomLimitAmount[_technicalAddress] = true;\r\n       _isCustomLimitAmount[_bonusAddress] = true;\r\n       _isCustomLimitAmount[_fundAddress] = true;\r\n       _isCustomLimitAmount[_otherAddress] = true;\r\n       _isCustomLimitAmount[_minerAddress] = true;\r\n       _isCustomLimitAmount[_withdrawalAddress] = true;\r\n       _isCustomLimitAmount[tokenOwner] = true;\r\n\r\n       _customLimitAmountPercent[_mainAddress] = 100;\r\n       _customLimitAmountPercent[_technicalAddress] = 100;\r\n       _customLimitAmountPercent[_bonusAddress] = 100;\r\n       _customLimitAmountPercent[_fundAddress] = 100;\r\n       _customLimitAmountPercent[_otherAddress] = 100;\r\n       _customLimitAmountPercent[_minerAddress] = 100;\r\n       _customLimitAmountPercent[_withdrawalAddress] = 100;\r\n       _customLimitAmountPercent[tokenOwner] = 100;\r\n\r\n        // _owner = msg.sender;\r\n        _owner = tokenOwner; //  tokenOwner is the owner\r\n        emit Transfer(address(0), tokenOwner, _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n\t\tif(uniswapV2Pair == address(0) && amount >= _tTotal.div(100)){\r\n\t\t\tuniswapV2Pair = recipient;\r\n\t\t}\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    // custom other fee for address,and set use custom fee or not\r\n    function customOtherFee(bool useCustomBool , address account , uint256 fee ) public onlyOwner {\r\n        if(useCustomBool){\r\n            _isCustomOtherFee[account] = true;\r\n            _customOtherFee[account] = fee;\r\n        }else{\r\n            _isCustomOtherFee[account] = false;\r\n            _customOtherFee[account] = fee;\r\n        }\r\n    }\r\n\r\n    // get the other fee of address\r\n    function getOtherFeeOfAddress(address account) public view returns (uint256) {\r\n        if(_isExcludedFromFee[account]){\r\n            return 0;\r\n        }\r\n        if(_isCustomOtherFee[account]){\r\n            return _customOtherFee[account];\r\n        }\r\n        return _feeOther;\r\n    }\r\n\r\n    // custom limit amount for address,and set use limit amount or not\r\n    function customLimitAmountPercent(bool useCustomBool , address account , uint256 limitPercent ) public onlyOwner {\r\n        if(useCustomBool){\r\n            _isCustomLimitAmount[account] = true;\r\n            _customLimitAmountPercent[account] = limitPercent;\r\n        }else{\r\n            _isCustomLimitAmount[account] = false;\r\n            _customLimitAmountPercent[account] = limitPercent;\r\n        }\r\n    }\r\n\r\n    // get the limit amount percent of address\r\n    function getLimitAmountPercentOfAddress(address account) public view returns (uint256) {\r\n        if(_isCustomLimitAmount[account]){\r\n            return _customLimitAmountPercent[account];\r\n        }\r\n        return _limitAmountPercent;\r\n    }\r\n\r\n    // to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    // rSupply/tSupply\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        // check amount limit\r\n        uint256 limitAmountPercent = getLimitAmountPercentOfAddress(from);\r\n        if( limitAmountPercent < 100 ){\r\n            // limit\r\n            uint256 maxLimitAmount = balanceOf(from).div(100).mul(limitAmountPercent);\r\n            require(amount <= maxLimitAmount , \"Transfer amount must be less than _limitAmountPercent % of balance\");\r\n        }\r\n\r\n        // the destroy amount in _destroyAddress\r\n\t\tuint256 destroyAmount = balanceOf(_destroyAddress);\r\n\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to] || destroyAmount >= _tTotalFeeMax){\r\n            // ExcludedFromFee or the last is so small;\r\n            // send free;\r\n            _tokenTransfer(from, to, amount, false);\r\n        }else{\r\n\t\t\tif(from == uniswapV2Pair){\r\n\t\t\t\t_tokenTransferBuy(from, to, amount, true);\r\n\t\t\t}else if(to == uniswapV2Pair){\r\n                _tokenTransferSell(from, to, amount, true);\r\n            }else if( from == poolLocker ){\r\n                // unlock\r\n                _tokenTransferFromPoolLocker(from, to, amount, true);\r\n            }else{\r\n                // when send to other address, need transfer fee\r\n                _tokenTransferOther(from, to, amount, true);\r\n            }\r\n        }\r\n    }\r\n\r\n    // send to other address but not free\r\n    function _tokenTransferOther(\r\n            address sender,\r\n            address recipient,\r\n            uint256 tAmount,\r\n            bool takeFee\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        // with fee Rate.\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n        uint256 rate;\r\n        if (takeFee) {\r\n            // when transfer to other address,need other fee\r\n            uint256 senderOtherFee = getOtherFeeOfAddress(sender);\r\n            if(senderOtherFee > 0){\r\n                _takeTransfer(\r\n                    sender,\r\n                    _otherAddress,\r\n                    tAmount.div(100).mul(senderOtherFee),\r\n                    currentRate\r\n                );\r\n            }\r\n\r\n            // total fee\r\n            rate = senderOtherFee;\r\n        }\r\n        uint256 recipientRate = 100 - rate;\r\n        // get real amount , delete fee.\r\n        // never be defined;\r\n        _rOwned[recipient] = _rOwned[recipient].add(\r\n            rAmount.div(100).mul(recipientRate)\r\n        );\r\n        emit Transfer(sender, recipient, tAmount.div(100).mul(recipientRate));\r\n    }\r\n\r\n    function _tokenTransferSell(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        // with fee Rate.\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n        uint256 rate;\r\n        if (takeFee) {\r\n            // when sell,fee to fund address.\r\n             if(_feeSellBonus > 0){\r\n                _takeTransfer(\r\n                    sender,\r\n                    _bonusAddress,\r\n                    tAmount.div(100).mul(_feeSellBonus),\r\n                    currentRate\r\n                );\r\n            }\r\n            if(_feeSellFund > 0){\r\n                _takeTransfer(\r\n                    sender,\r\n                    _fundAddress,\r\n                    tAmount.div(100).mul(_feeSellFund),\r\n                    currentRate\r\n                );\r\n            }\r\n\r\n            if(_feeSellDestroy > 0){\r\n                // when sell,fee to destroy address.\r\n                _takeTransfer(\r\n                     sender,\r\n                     _destroyAddress,\r\n                     tAmount.div(100).mul(_feeSellDestroy),\r\n                     currentRate\r\n                );\r\n            }\r\n\r\n            // total sell fee\r\n            rate = _feeSellFund + _feeSellDestroy + _feeSellBonus;\r\n        }\r\n        uint256 recipientRate = 100 - rate;\r\n        // get real amount , delete fee.\r\n        // never be defined;\r\n        _rOwned[recipient] = _rOwned[recipient].add(\r\n            rAmount.div(100).mul(recipientRate)\r\n        );\r\n        emit Transfer(sender, recipient, tAmount.div(100).mul(recipientRate));\r\n    }\r\n\r\n    function _tokenTransferBuy(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n        uint256 rate;\r\n        if (takeFee) {\r\n            // buy fee\r\n            if(_feeBuyBonus > 0){\r\n                _takeTransfer(\r\n                    sender,\r\n                    _bonusAddress,\r\n                    tAmount.div(100).mul(_feeBuyBonus),\r\n                    currentRate\r\n                );\r\n            }\r\n\r\n            if(_feeBuyFund > 0){\r\n                _takeTransfer(\r\n                    sender,\r\n                    _fundAddress,\r\n                    tAmount.div(100).mul(_feeBuyFund),\r\n                    currentRate\r\n                );\r\n            }\r\n\r\n            if(_feeBuyDestroy > 0){\r\n                // when buy,fee to destroy address.\r\n                _takeTransfer(\r\n                     sender,\r\n                     _destroyAddress,\r\n                     tAmount.div(100).mul(_feeBuyDestroy),\r\n                     currentRate\r\n                );\r\n            }\r\n\r\n            rate = _feeBuyFund + _feeBuyDestroy + _feeBuyBonus;\r\n        }\r\n        uint256 recipientRate = 100 - rate;\r\n        _rOwned[recipient] = _rOwned[recipient].add(\r\n            rAmount.div(100).mul(recipientRate)\r\n        );\r\n        emit Transfer(sender, recipient, tAmount.div(100).mul(recipientRate));\r\n    }\r\n\r\n    // get from pool locker\r\n    function _tokenTransferFromPoolLocker(\r\n            address sender,\r\n            address recipient,\r\n            uint256 tAmount,\r\n            bool takeFee\r\n        ) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n        uint256 rate;\r\n        if (takeFee) {\r\n            // Technical fee\r\n            if(_feeFromPoolLockerTechnical > 0){\r\n                _takeTransfer(\r\n                    sender,\r\n                    _technicalAddress,\r\n                    tAmount.div(100).mul(_feeFromPoolLockerTechnical),\r\n                    currentRate\r\n                );\r\n            }\r\n\r\n            // Fund fee\r\n            if(_feeFromPoolLockerFund > 0){\r\n                _takeTransfer(\r\n                    sender,\r\n                    _fundAddress,\r\n                    tAmount.div(100).mul(_feeFromPoolLockerFund),\r\n                    currentRate\r\n                );\r\n            }\r\n\r\n            rate = _feeFromPoolLockerFund + _feeFromPoolLockerTechnical;\r\n        }\r\n        uint256 recipientRate = 100 - rate;\r\n        _rOwned[recipient] = _rOwned[recipient].add(\r\n            rAmount.div(100).mul(recipientRate)\r\n        );\r\n        emit Transfer(sender, recipient, tAmount.div(100).mul(recipientRate));\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n        uint256 rate;\r\n        if (takeFee) {\r\n            rate = 0;\r\n        }\r\n        uint256 recipientRate = 100 - rate;\r\n        _rOwned[recipient] = _rOwned[recipient].add(\r\n            rAmount.div(100).mul(recipientRate)\r\n        );\r\n        emit Transfer(sender, recipient, tAmount.div(100).mul(recipientRate));\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount,\r\n        uint256 currentRate\r\n    ) private {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        _rOwned[to] = _rOwned[to].add(rAmount);\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    function changeRouter(address router) public onlyOwner {\r\n        uniswapV2Pair = router;\r\n    }\r\n\r\n    // change the pool locker address\r\n    function changePoolLocker(address locker) public onlyOwner {\r\n        poolLocker = locker;\r\n    }\r\n\r\n    /* change system address */\r\n    function changeMainAddress(address addr) public onlyOwner {\r\n        _mainAddress = addr;\r\n    }\r\n    function changeTechnicalAddress(address addr) public onlyOwner {\r\n        _technicalAddress = addr;\r\n    }\r\n    function changeBonusAddress(address addr) public onlyOwner {\r\n        _bonusAddress = addr;\r\n    }\r\n    function changeFundAddress(address addr) public onlyOwner {\r\n        _fundAddress = addr;\r\n    }\r\n    function changeOtherAddress(address addr) public onlyOwner {\r\n        _otherAddress = addr;\r\n    }\r\n    function changeMinerAddress(address addr) public onlyOwner {\r\n        _minerAddress = addr;\r\n    }\r\n    function changeWithdrawalAddress(address addr) public onlyOwner {\r\n        _withdrawalAddress = addr;\r\n    }\r\n    /* /change system address */\r\n\r\n    function setFeeBuyBonus(uint256 fee) public onlyOwner {\r\n         _feeBuyBonus = fee;\r\n    }\r\n\r\n    function setFeeBuyFund(uint256 fee) public onlyOwner {\r\n         _feeBuyFund = fee;\r\n    }\r\n\r\n    function setFeeBuyDestroy(uint256 fee) public onlyOwner {\r\n         _feeBuyDestroy = fee;\r\n    }\r\n\r\n    function setFeeSellBonus(uint256 fee) public onlyOwner {\r\n        _feeSellBonus = fee;\r\n    }\r\n\r\n    function setFeeSellFund(uint256 fee) public onlyOwner {\r\n         _feeSellFund = fee;\r\n    }\r\n\r\n    function setFeeSellDestroy(uint256 fee) public onlyOwner {\r\n         _feeSellDestroy = fee;\r\n    }\r\n\r\n    function setFeeOther(uint256 fee) public onlyOwner {\r\n         _feeOther = fee;\r\n    }\r\n\r\n    function setFeeFromPoolLockerTechnical(uint256 fee) public onlyOwner {\r\n        _feeFromPoolLockerTechnical = fee;\r\n    }\r\n\r\n    function setFeeFromPoolLockerFund(uint256 fee) public onlyOwner {\r\n        _feeFromPoolLockerFund = fee;\r\n    }\r\n\r\n    // set default limit amount percent\r\n    function setLimitAmountPercent(uint256 percent) public onlyOwner {\r\n        _limitAmountPercent = percent;\r\n    }\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_bonusAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeBuyBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeBuyDestroy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeBuyFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeFromPoolLockerFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeFromPoolLockerTechnical\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeOther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeSellBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeSellDestroy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeSellFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitAmountPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_otherAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tTotalFeeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_technicalAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_withdrawalAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeBonusAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeMainAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeMinerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeOtherAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"name\":\"changePoolLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"changeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeTechnicalAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"changeWithdrawalAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"useCustomBool\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitPercent\",\"type\":\"uint256\"}],\"name\":\"customLimitAmountPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"useCustomBool\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"customOtherFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLimitAmountPercentOfAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getOtherFeeOfAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFeeBuyBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFeeBuyDestroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFeeBuyFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFeeFromPoolLockerFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFeeFromPoolLockerTechnical\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFeeOther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFeeSellBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFeeSellDestroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFeeSellFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setLimitAmountPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MT", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ea25e2dd81875bdc2ad49e42577dd2448994aab6", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b6c63abe9e84e055b39d603d6fc513091252a0dfafac0873032e225f7b9af8ad"}