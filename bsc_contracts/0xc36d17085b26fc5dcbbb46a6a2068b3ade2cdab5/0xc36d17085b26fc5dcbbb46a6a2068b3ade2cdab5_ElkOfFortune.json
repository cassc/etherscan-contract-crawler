{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\ncontract ElkOfFortune {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public token;\r\n\r\n    /** base parameters **/\r\n    uint256 public EGGS_TO_HIRE_1MINERS = 2592000;\r\n    uint256 public REFERRAL = 40;\r\n    uint256 public PERCENTS_DIVIDER = 1000;\r\n    uint256 public PROJECT = 40;\r\n    uint256 public BUYBACK = 10;\r\n    uint256 public PARTNER = 10;\r\n    uint256 public MARKETING = 20;\r\n    uint256 public MARKET_EGGS_DIVISOR = 5;\r\n\r\n    /** bonus **/\r\n    uint256 public COMPOUND_BONUS = 20; /** 2% **/\r\n    uint256 public COMPOUND_BONUS_MAX_TIMES = 10; /** 10 days. **/\r\n    uint256 public COMPOUND_STEP = 24 * 60 * 60; /** every 24 hours. **/\r\n\r\n    /** withdrawal tax **/\r\n    uint256 public WITHDRAWAL_TAX = 800;\r\n    uint256 public WITHDRAWAL_TAX_DAYS = 2;\r\n\r\n    /* lottery */\r\n    bool public LOTTERY_ACTIVATED = false;\r\n    uint256 public LOTTERY_START_TIME;\r\n    uint256 public LOTTERY_PERCENT = 5;\r\n    uint256 public LOTTERY_MAX_DEPOSITOR_PERCENT = 5;\r\n    uint256 public LOTTERY_STEP = 24 * 60 * 60; /** every 24 hours. **/\r\n    uint256 public LOTTERY_TICKET_PRICE = 15 ether; /** 15 ELK **/\r\n    uint256 public MAX_LOTTERY_TICKET_COMPOUND = 50;\r\n    uint256 public MAX_LOTTERY_TICKET_DEPOSIT = 50;\r\n\r\n    uint256 public lotteryRound = 0;\r\n\r\n    /* statistics */\r\n    uint256 public totalStaked;\r\n    uint256 public totalDeposits;\r\n    uint256 public totalCompound;\r\n    uint256 public totalRefBonus;\r\n    uint256 public totalWithdrawn;\r\n    uint256 public totalLotteryBonus;\r\n\r\n    /* miner parameters */\r\n    uint256 public marketEggs;\r\n    uint256 PSN = 10000;\r\n    uint256 PSNH = 5000;\r\n    bool public contractStarted = false;\r\n\r\n    /** whale control features **/\r\n    uint256 public CUTOFF_STEP = 48 * 60 * 60; /** 48 hours  **/\r\n    uint256 public MIN_INVEST = 300 ether; /** 300 ELK  **/\r\n    uint256 public WITHDRAW_COOLDOWN = 24 * 60 * 60; /** 24 hours  **/\r\n    uint256 public WITHDRAW_LIMIT = 30000 ether; /** 30000 ELK  **/\r\n    uint256 public WALLET_DEPOSIT_LIMIT = 1000000 ether; /** 1,000,000 ELK  **/\r\n\r\n    /* addresses */\r\n    address payable public owner;\r\n    address payable public project;\r\n    address payable public partner;\r\n    address payable public marketing;\r\n    address payable public buyback;\r\n\r\n    struct User {\r\n        uint256 initialDeposit;\r\n        uint256 userDeposit;\r\n        uint256 miners;\r\n        uint256 claimedEggs;\r\n        uint256 totalLotteryBonus;\r\n        uint256 lastHatch;\r\n        address referrer;\r\n        uint256 referralsCount;\r\n        uint256 referralEggRewards;\r\n        uint256 totalWithdrawn;\r\n        uint256 dailyCompoundBonus;\r\n        uint256 withdrawCount;\r\n        uint256 lastWithdrawTime;\r\n    }\r\n\r\n    struct LotteryParticipant {\r\n        address addr;\r\n        uint256 depositTickets;\r\n        uint256 compoundTickets;\r\n        uint256 totalTickets;\r\n        uint256 depositAmount;\r\n    }\r\n\r\n    struct LotteryHistory {\r\n        uint256 round;\r\n        address lotteryWinner;\r\n        address maxDepositWinner;\r\n        uint256 lotteryPot;\r\n        uint256 maxDepositorPot;\r\n        address[] participants;\r\n        uint256 totalParticipants;\r\n        uint256 totalTickets;\r\n    }\r\n\r\n    mapping(uint256 => LotteryHistory) public lotteries; // round => Lottery\r\n    mapping(address => User) public users; // address > User\r\n    mapping(uint256 => mapping(address => LotteryParticipant)) public lotteryParticipants; /** round => address => LotteryParticipant **/\r\n\r\n    event LotteryWinner(\r\n        address indexed winner,\r\n        uint256 pot,\r\n        uint256 indexed round\r\n    );\r\n\r\n    event MaxDepositorWinner(\r\n        address indexed winner,\r\n        uint256 pot,\r\n        uint256 depositAmount,\r\n        uint256 indexed round\r\n    );\r\n\r\n    constructor(\r\n        address erc20Token,\r\n        address payable _project,\r\n        address payable _partner,\r\n        address payable _marketing,\r\n        address payable _buyback\r\n    ) {\r\n        require(\r\n            !isContract(_project) &&\r\n                !isContract(_partner) &&\r\n                !isContract(_marketing) &&\r\n                !isContract(_buyback)\r\n        );\r\n        token = IERC20(erc20Token);\r\n        owner = payable(msg.sender);\r\n        project = _project;\r\n        partner = _partner;\r\n        marketing = _marketing;\r\n        buyback = _buyback;\r\n    }\r\n\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Admin use only\");\r\n        _;\r\n    }\r\n\r\n    function startContract(address addr, uint256 amount)\r\n        public\r\n        payable\r\n        onlyOwner\r\n    {\r\n        require(!contractStarted, \"Contract is already started\");\r\n        require(marketEggs == 0, \"Market eggs have already been set\");\r\n        contractStarted = true;\r\n        marketEggs = 86400000000;\r\n        LOTTERY_ACTIVATED = true;\r\n        LOTTERY_START_TIME = block.timestamp;\r\n        buyEggs(addr, amount);\r\n    }\r\n\r\n    //fund contract with ELK before launch.\r\n    function fundContract(uint256 amount) external payable onlyOwner {\r\n        require(amount > 0);\r\n        token.transferFrom(address(msg.sender), address(this), amount);\r\n    }\r\n\r\n    function hatchEggs(bool isCompound) public {\r\n        require(contractStarted, \"Contract not yet Started.\");\r\n        User storage user = users[msg.sender];\r\n        uint256 eggsUsed = getMyEggs();\r\n        uint256 eggsForCompound = eggsUsed;\r\n\r\n        if (isCompound) {\r\n            uint256 dailyCompoundBonus = getDailyCompoundBonus(msg.sender, eggsForCompound);\r\n            eggsForCompound = eggsForCompound.add(dailyCompoundBonus);\r\n            uint256 eggsUsedValue = calculateEggSell(eggsForCompound);\r\n            user.userDeposit = user.userDeposit.add(eggsUsedValue);\r\n            totalCompound = totalCompound.add(eggsUsedValue);\r\n\r\n            if (LOTTERY_ACTIVATED && eggsUsedValue >= LOTTERY_TICKET_PRICE && msg.sender != owner) {\r\n                buyTickets(msg.sender, eggsUsedValue, true);\r\n            }\r\n        }\r\n\r\n        if (block.timestamp.sub(user.lastHatch) >= COMPOUND_STEP) {\r\n            if (user.dailyCompoundBonus < COMPOUND_BONUS_MAX_TIMES) {\r\n                user.dailyCompoundBonus = user.dailyCompoundBonus.add(1);\r\n            }\r\n        }\r\n\r\n        user.miners = user.miners.add(eggsForCompound.div(EGGS_TO_HIRE_1MINERS));\r\n        user.claimedEggs = 0;\r\n        user.lastHatch = block.timestamp;\r\n\r\n        if (block.timestamp.sub(user.lastWithdrawTime) >= COMPOUND_STEP) {\r\n            user.withdrawCount = 0;\r\n        }\r\n\r\n        marketEggs = marketEggs.add(eggsUsed.div(MARKET_EGGS_DIVISOR));\r\n    }\r\n\r\n    function sellEggs() public {\r\n        require(contractStarted, \"Contract not yet Started.\");\r\n        User storage user = users[msg.sender];\r\n        if (user.lastHatch.add(WITHDRAW_COOLDOWN) > block.timestamp) {\r\n            revert(\"Withdrawals can only be done after withdraw cooldown.\");\r\n        }\r\n\r\n        uint256 hasEggs = getMyEggs();\r\n        uint256 eggValue = calculateEggSell(hasEggs);\r\n\r\n        if (WITHDRAW_LIMIT != 0 && eggValue > WITHDRAW_LIMIT) {\r\n            eggValue = WITHDRAW_LIMIT;\r\n        }\r\n\r\n        user.withdrawCount = user.withdrawCount.add(1);\r\n        if (user.withdrawCount >= WITHDRAWAL_TAX_DAYS) {\r\n            eggValue = eggValue.sub(eggValue.mul(WITHDRAWAL_TAX).div(PERCENTS_DIVIDER));\r\n        }\r\n\r\n        user.dailyCompoundBonus = 0;\r\n        user.lastWithdrawTime = block.timestamp;\r\n        user.claimedEggs = 0;\r\n        user.lastHatch = block.timestamp;\r\n        marketEggs = marketEggs.add(hasEggs);\r\n\r\n        if (getBalance() < eggValue) {\r\n            eggValue = getBalance();\r\n        }\r\n        uint256 eggsPayout = eggValue.sub(payFeesSell(eggValue));\r\n        user.totalWithdrawn = user.totalWithdrawn.add(eggsPayout);\r\n        totalWithdrawn = totalWithdrawn.add(eggsPayout);\r\n        token.transfer(msg.sender, eggsPayout);\r\n\r\n        // if no new investment or compound, sell will also trigger lottery\r\n        if (block.timestamp.sub(LOTTERY_START_TIME) >= LOTTERY_STEP) {\r\n            chooseWinners();\r\n        }\r\n    }\r\n\r\n    function buyEggs(address ref, uint256 amount) public payable {\r\n        require(contractStarted, \"Contract not yet Started.\");\r\n\r\n        User storage user = users[msg.sender];\r\n\r\n        require(amount >= MIN_INVEST, \"Mininum investment not met.\");\r\n        require(\r\n            user.initialDeposit.add(amount) <= WALLET_DEPOSIT_LIMIT,\r\n            \"Max deposit limit reached.\"\r\n        );\r\n\r\n        token.transferFrom(address(msg.sender), address(this), amount);\r\n        uint256 eggsBought = calculateEggBuy(amount, getBalance().sub(amount));\r\n        user.userDeposit = user.userDeposit.add(amount);\r\n        user.initialDeposit = user.initialDeposit.add(amount);\r\n        user.claimedEggs = user.claimedEggs.add(eggsBought);\r\n\r\n        if (user.referrer == address(0)) {\r\n            if (ref != msg.sender) {\r\n                user.referrer = ref;\r\n            }\r\n\r\n            address upline1 = user.referrer;\r\n            if (upline1 != address(0)) {\r\n                users[upline1].referralsCount = users[upline1]\r\n                    .referralsCount\r\n                    .add(1);\r\n            }\r\n        }\r\n\r\n        if (user.referrer != address(0)) {\r\n            address upline = user.referrer;\r\n            if (upline != address(0)) {\r\n                /** referral rewards will be in ELK value **/\r\n                uint256 refRewards = amount.mul(REFERRAL).div(PERCENTS_DIVIDER);\r\n                users[upline].referralEggRewards = users[upline]\r\n                    .referralEggRewards\r\n                    .add(refRewards);\r\n                token.transfer(upline, refRewards);\r\n                totalRefBonus = totalRefBonus.add(refRewards);\r\n            }\r\n        }\r\n\r\n        uint256 eggsPayout = payFees(amount);\r\n        totalStaked = totalStaked.add(amount.sub(eggsPayout));\r\n        totalDeposits = totalDeposits.add(1);\r\n\r\n        if (LOTTERY_ACTIVATED &&  amount >= LOTTERY_TICKET_PRICE && msg.sender != owner) {\r\n            buyTickets(msg.sender, amount, false);\r\n        }\r\n\r\n        hatchEggs(false);\r\n    }\r\n\r\n    function payFees(uint256 eggValue) internal returns (uint256) {\r\n        (\r\n            uint256 projectFee,\r\n            uint256 partnerFee,\r\n            ,\r\n            uint256 buybackFee\r\n        ) = getFees(eggValue);\r\n        token.transfer(project, projectFee);\r\n        token.transfer(partner, partnerFee);\r\n        token.transfer(buyback, buybackFee);\r\n        return projectFee.add(partnerFee).add(buybackFee);\r\n    }\r\n\r\n    function payFeesSell(uint256 eggValue) internal returns (uint256) {\r\n        (\r\n            uint256 projectFee,\r\n            ,\r\n            uint256 marketingFee,\r\n            uint256 buybackFee\r\n        ) = getFees(eggValue);\r\n        token.transfer(project, projectFee);\r\n        token.transfer(marketing, marketingFee);\r\n        token.transfer(buyback, buybackFee);\r\n        return projectFee.add(marketingFee).add(buybackFee);\r\n    }\r\n\r\n    function getFees(uint256 eggValue)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 _projectFee,\r\n            uint256 _partnerFee,\r\n            uint256 _marketingFee,\r\n            uint256 _buybackFee\r\n        )\r\n    {\r\n        _projectFee = eggValue.mul(PROJECT).div(PERCENTS_DIVIDER);\r\n        _partnerFee = eggValue.mul(PARTNER).div(PERCENTS_DIVIDER);\r\n        _marketingFee = eggValue.mul(MARKETING).div(PERCENTS_DIVIDER);\r\n        _buybackFee = eggValue.mul(BUYBACK).div(PERCENTS_DIVIDER);\r\n    }\r\n\r\n    /** lottery section! **/\r\n    function buyTickets(address userAddress, uint256 amount, bool isCompound) private {\r\n        require(amount != 0, \"zero purchase amount\");\r\n\r\n        LotteryHistory storage currentLottery = lotteries[lotteryRound];\r\n        LotteryParticipant storage participant = lotteryParticipants[lotteryRound][userAddress];\r\n\r\n        uint256 numDepositTickets = participant.depositTickets;\r\n        uint256 numCompoundTickets = participant.compoundTickets;\r\n\r\n        uint256 numTickets = amount.div(LOTTERY_TICKET_PRICE);\r\n\r\n        if (numDepositTickets == 0 && numCompoundTickets == 0 && numTickets > 0) {\r\n            currentLottery.totalParticipants = currentLottery.totalParticipants.add(1);\r\n            currentLottery.participants.push(userAddress);\r\n        }\r\n\r\n        if (isCompound) {\r\n            if (numCompoundTickets.add(numTickets) > MAX_LOTTERY_TICKET_COMPOUND) {\r\n                numTickets = MAX_LOTTERY_TICKET_COMPOUND.sub(numCompoundTickets);\r\n            }\r\n            participant.compoundTickets = numCompoundTickets.add(numTickets);\r\n        } else {\r\n            if (numDepositTickets.add(numTickets) > MAX_LOTTERY_TICKET_DEPOSIT) {\r\n                numTickets = MAX_LOTTERY_TICKET_DEPOSIT.sub(numDepositTickets);\r\n            }\r\n            participant.depositTickets = numDepositTickets.add(numTickets);\r\n            participant.depositAmount = participant.depositAmount.add(amount);\r\n        }\r\n        participant.totalTickets = participant.totalTickets.add(numTickets);\r\n        participant.addr = userAddress;\r\n        lotteryParticipants[lotteryRound][userAddress] = participant;\r\n\r\n        _updatePots();\r\n        currentLottery.totalTickets = currentLottery.totalTickets.add(numTickets);\r\n\r\n        if (block.timestamp.sub(LOTTERY_START_TIME) >= LOTTERY_STEP) {\r\n            chooseWinners();\r\n        }\r\n    }\r\n\r\n    function _updatePots() private {\r\n        // 1% of contract balance\r\n        LotteryHistory storage currentLottery = lotteries[lotteryRound];\r\n        uint256 balance = getBalance();\r\n\r\n        currentLottery.lotteryPot = balance.mul(LOTTERY_PERCENT).div(\r\n            PERCENTS_DIVIDER\r\n        );\r\n        currentLottery.maxDepositorPot = balance.mul(LOTTERY_MAX_DEPOSITOR_PERCENT).div(PERCENTS_DIVIDER);\r\n    }\r\n\r\n    function chooseWinners() public {\r\n        require(\r\n            (block.timestamp.sub(LOTTERY_START_TIME) >= LOTTERY_STEP),\r\n            \"current lottery round is still in progress\"\r\n        );\r\n\r\n        LotteryHistory storage currentLottery = lotteries[lotteryRound];\r\n        uint256 totalParticipants = currentLottery.totalParticipants;\r\n        if (totalParticipants != 0) {\r\n            _updatePots();\r\n            _chooseLotteryWinner();\r\n            _chooseMaxDepositor();\r\n        }\r\n\r\n        /** reset lotteryRound **/\r\n        LOTTERY_START_TIME = block.timestamp;\r\n        lotteryRound = lotteryRound.add(1);\r\n    }\r\n\r\n    function _chooseLotteryWinner() private {\r\n        require(\r\n            (block.timestamp.sub(LOTTERY_START_TIME) >= LOTTERY_STEP),\r\n            \"current lottery round is still in progress\"\r\n        );\r\n        LotteryHistory storage currentLottery = lotteries[lotteryRound];\r\n        require(\r\n            currentLottery.totalParticipants > 0,\r\n            \"there are no participants in current lottery\"\r\n        );\r\n\r\n        uint256 totalParticipants = currentLottery.totalParticipants;\r\n        address[] memory participants = currentLottery.participants;\r\n\r\n        require(\r\n            participants.length == totalParticipants,\r\n            \"there was a problem with participants tracking\"\r\n        );\r\n        // find random lottery winner\r\n        uint256[] memory init_range = new uint256[](totalParticipants);\r\n        uint256[] memory end_range = new uint256[](totalParticipants);\r\n\r\n        uint256 last_range = 0;\r\n\r\n        for (uint256 i = 0; i < totalParticipants; i++) {\r\n            address currentAddress = participants[i];\r\n            uint256 numTickets = lotteryParticipants[lotteryRound][currentAddress].totalTickets;\r\n            uint256 range0 = last_range.add(1);\r\n            uint256 range1 = range0.add(numTickets.div(1e18));\r\n\r\n            init_range[i] = range0;\r\n            end_range[i] = range1;\r\n            last_range = range1;\r\n        }\r\n\r\n        uint256 random = _getRandom().mod(last_range).add(1);\r\n        for (uint256 i = 0; i < totalParticipants; i++) {\r\n            if ((random >= init_range[i]) && (random <= end_range[i])) {\r\n                /** winner found **/\r\n                address winnerAddress = participants[i];\r\n                currentLottery.lotteryWinner = winnerAddress;\r\n                uint256 pot = currentLottery.lotteryPot;\r\n                /** lottery prize will be converted to buy miners **/\r\n                _payoutLottery(winnerAddress, pot);\r\n                emit LotteryWinner(winnerAddress, pot, lotteryRound);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _payoutLottery(address winnerAddress, uint256 amount) private {\r\n        User storage user = users[winnerAddress];\r\n        uint256 eggsReward = calculateEggBuy(amount, getBalance().sub(amount));\r\n        user.miners = user.miners.add(eggsReward.div(EGGS_TO_HIRE_1MINERS));\r\n        /** record users total lottery rewards **/\r\n        user.totalLotteryBonus = user.totalLotteryBonus.add(amount);\r\n        totalLotteryBonus = totalLotteryBonus.add(amount);\r\n    }\r\n\r\n    /** select lottery winner **/\r\n    function _getRandom() private view returns (uint256) {\r\n        bytes32 _blockhash = blockhash(block.number - 1);\r\n        uint256 currentPot = lotteries[lotteryRound].lotteryPot;\r\n        return\r\n            uint256(\r\n                keccak256(\r\n                    abi.encode(\r\n                        _blockhash,\r\n                        block.timestamp,\r\n                        currentPot,\r\n                        block.difficulty,\r\n                        marketEggs,\r\n                        getBalance()\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function _chooseMaxDepositor() private {\r\n        require(\r\n            (block.timestamp.sub(LOTTERY_START_TIME) >= LOTTERY_STEP),\r\n            \"current lottery round is still in progress\"\r\n        );\r\n        LotteryHistory storage currentLottery = lotteries[lotteryRound];\r\n        require(\r\n            currentLottery.totalParticipants > 0,\r\n            \"there are no participants in current lottery\"\r\n        );\r\n\r\n        /** lottery prize will be converted to buy miners **/\r\n        uint256 pot = currentLottery.maxDepositorPot;\r\n        (uint256 maxDeposit, address maxDepositor) = getLargestDepositor();\r\n        currentLottery.maxDepositWinner = maxDepositor;\r\n        _payoutLottery(maxDepositor, pot);\r\n        emit MaxDepositorWinner(maxDepositor, pot, maxDeposit, lotteryRound);\r\n    }\r\n\r\n    function getLargestDepositor() public view returns (uint256 maxDeposit, address maxDepositor) {\r\n        LotteryHistory storage currentLottery = lotteries[lotteryRound];\r\n        uint256 totalParticipants = currentLottery.totalParticipants;\r\n        address[] memory participants = currentLottery.participants;\r\n\r\n        // loop through total participants and compare every deposit to find the max\r\n        maxDeposit = 0;\r\n        maxDepositor;\r\n        for (uint256 i = 0; i < totalParticipants; i++) {\r\n            LotteryParticipant storage participant = lotteryParticipants[lotteryRound][participants[i]];\r\n            if (maxDeposit < participant.depositAmount) {\r\n                maxDeposit = participant.depositAmount;\r\n                maxDepositor = participant.addr;\r\n            }\r\n        }\r\n    }\r\n\r\n    function chooseLotteryWinner() public onlyOwner {\r\n        _chooseLotteryWinner();\r\n    }\r\n\r\n    function chooseMaxDepositor() public onlyOwner {\r\n        _chooseMaxDepositor();\r\n    }\r\n\r\n    function getDailyCompoundBonus(address _adr, uint256 amount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (users[_adr].dailyCompoundBonus == 0) {\r\n            return 0;\r\n        } else {\r\n            /** add compound bonus percentage **/\r\n            uint256 totalBonus = users[_adr].dailyCompoundBonus.mul(\r\n                COMPOUND_BONUS\r\n            );\r\n            uint256 result = amount.mul(totalBonus).div(PERCENTS_DIVIDER);\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function getLotteryHistory(uint256 round)\r\n        public\r\n        view\r\n        returns (\r\n            address lotteryWinner,\r\n            address maxDepositWinner,\r\n            uint256 lotteryPot,\r\n            uint256 maxDepositorPot,\r\n            uint256 totalParticipants,\r\n            uint256 totalTickets\r\n        )\r\n    {\r\n        lotteryWinner = lotteries[round].lotteryWinner;\r\n        maxDepositWinner = lotteries[round].maxDepositWinner;\r\n        lotteryPot = lotteries[round].lotteryPot;\r\n        maxDepositorPot = lotteries[round].maxDepositorPot;\r\n        totalParticipants = lotteries[round].totalParticipants;\r\n        totalTickets = lotteries[round].totalTickets;\r\n    }\r\n\r\n    function getLotteryInfo()\r\n        public\r\n        view\r\n        returns (\r\n            uint256 round,\r\n            uint256 startTime,\r\n            uint256 step,\r\n            uint256 ticketPrice,\r\n            uint256 maxDepositTicket,\r\n            uint256 maxCompoundTicket,\r\n            uint256 lotteryPercent,\r\n            uint256 maxDepositorPercent\r\n        )\r\n    {\r\n        round = lotteryRound;\r\n        startTime = LOTTERY_START_TIME;\r\n        step = LOTTERY_STEP;\r\n        ticketPrice = LOTTERY_TICKET_PRICE;\r\n        lotteryPercent = LOTTERY_PERCENT;\r\n        maxDepositorPercent = LOTTERY_MAX_DEPOSITOR_PERCENT;\r\n        maxDepositTicket = MAX_LOTTERY_TICKET_DEPOSIT;\r\n        maxCompoundTicket = MAX_LOTTERY_TICKET_COMPOUND;\r\n    }\r\n\r\n    function getUserInfo(address _adr)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 _initialDeposit,\r\n            uint256 _userDeposit,\r\n            uint256 _miners,\r\n            uint256 _claimedEggs,\r\n            uint256 _totalLotteryBonus,\r\n            uint256 _lastHatch,\r\n            address _referrer,\r\n            uint256 _referrals,\r\n            uint256 _totalWithdrawn,\r\n            uint256 _referralEggRewards,\r\n            uint256 _dailyCompoundBonus,\r\n            uint256 _lastWithdrawTime,\r\n            uint256 _withdrawCount\r\n        )\r\n    {\r\n        _initialDeposit = users[_adr].initialDeposit;\r\n        _userDeposit = users[_adr].userDeposit;\r\n        _miners = users[_adr].miners;\r\n        _claimedEggs = users[_adr].claimedEggs;\r\n        _totalLotteryBonus = users[_adr].totalLotteryBonus;\r\n        _lastHatch = users[_adr].lastHatch;\r\n        _referrer = users[_adr].referrer;\r\n        _referrals = users[_adr].referralsCount;\r\n        _totalWithdrawn = users[_adr].totalWithdrawn;\r\n        _referralEggRewards = users[_adr].referralEggRewards;\r\n        _dailyCompoundBonus = users[_adr].dailyCompoundBonus;\r\n        _lastWithdrawTime = users[_adr].lastWithdrawTime;\r\n        _withdrawCount = users[_adr].withdrawCount;\r\n    }\r\n\r\n    function getBalance() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function getTimeStamp() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function getUserTickets(address _userAddress) public view returns (uint256 compound, uint256 deposit) {\r\n        LotteryParticipant storage participant = lotteryParticipants[lotteryRound][_userAddress];\r\n        compound = participant.compoundTickets;\r\n        deposit = participant.depositTickets;\r\n    }\r\n\r\n    function getLotteryTimer() public view returns (uint256) {\r\n        return LOTTERY_START_TIME.add(LOTTERY_STEP);\r\n    }\r\n\r\n    function getLotteryParticipants(uint256 round) public view returns (address[] memory) {\r\n        return lotteries[round].participants;\r\n    }\r\n\r\n    function getAvailableEarnings(address _adr) public view returns (uint256) {\r\n        uint256 userEggs = users[_adr].claimedEggs.add(\r\n            getEggsSinceLastHatch(_adr)\r\n        );\r\n        return calculateEggSell(userEggs);\r\n    }\r\n\r\n    function calculateTrade(\r\n        uint256 rt,\r\n        uint256 rs,\r\n        uint256 bs\r\n    ) public view returns (uint256) {\r\n        return\r\n            SafeMath.div(\r\n                SafeMath.mul(PSN, bs),\r\n                SafeMath.add(\r\n                    PSNH,\r\n                    SafeMath.div(\r\n                        SafeMath.add(\r\n                            SafeMath.mul(PSN, rs),\r\n                            SafeMath.mul(PSNH, rt)\r\n                        ),\r\n                        rt\r\n                    )\r\n                )\r\n            );\r\n    }\r\n\r\n    function calculateEggSell(uint256 eggs) public view returns (uint256) {\r\n        return calculateTrade(eggs, marketEggs, getBalance());\r\n    }\r\n\r\n    function calculateEggBuy(uint256 eth, uint256 contractBalance)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return calculateTrade(eth, contractBalance, marketEggs);\r\n    }\r\n\r\n    function calculateEggBuySimple(uint256 eth) public view returns (uint256) {\r\n        return calculateEggBuy(eth, getBalance());\r\n    }\r\n\r\n    /** How many miners and eggs per day user will recieve based on ELK deposit **/\r\n    function getEggsYield(uint256 amount)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        uint256 eggsAmount = calculateEggBuy(\r\n            amount,\r\n            getBalance().add(amount).sub(amount)\r\n        );\r\n        uint256 miners = eggsAmount.div(EGGS_TO_HIRE_1MINERS);\r\n        uint256 day = 1 days;\r\n        uint256 eggsPerDay = day.mul(miners);\r\n        uint256 earningsPerDay = calculateEggSellForYield(eggsPerDay, amount);\r\n        return (miners, earningsPerDay);\r\n    }\r\n\r\n    function calculateEggSellForYield(uint256 eggs, uint256 amount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return calculateTrade(eggs, marketEggs, getBalance().add(amount));\r\n    }\r\n\r\n    function getSiteInfo()\r\n        public\r\n        view\r\n        returns (\r\n            uint256 _totalStaked,\r\n            uint256 _totalDeposits,\r\n            uint256 _totalCompound,\r\n            uint256 _totalRefBonus,\r\n            uint256 _totalLotteryBonus,\r\n            uint256 _totalWithdrawn\r\n        )\r\n    {\r\n        _totalStaked = totalStaked;\r\n        _totalDeposits = totalDeposits;\r\n        _totalCompound = totalCompound;\r\n        _totalRefBonus = totalRefBonus;\r\n        _totalLotteryBonus = totalLotteryBonus;\r\n        _totalWithdrawn = totalWithdrawn;\r\n    }\r\n\r\n    function getMyMiners() public view returns (uint256) {\r\n        return users[msg.sender].miners;\r\n    }\r\n\r\n    function getMyEggs() public view returns (uint256) {\r\n        return\r\n            users[msg.sender].claimedEggs.add(\r\n                getEggsSinceLastHatch(msg.sender)\r\n            );\r\n    }\r\n\r\n    function getEggsSinceLastHatch(address adr) public view returns (uint256) {\r\n        uint256 secondsSinceLastHatch = block.timestamp.sub(\r\n            users[adr].lastHatch\r\n        );\r\n        /** get min time. **/\r\n        uint256 cutoffTime = min(secondsSinceLastHatch, CUTOFF_STEP);\r\n        uint256 secondsPassed = min(EGGS_TO_HIRE_1MINERS, cutoffTime);\r\n        return secondsPassed.mul(users[adr].miners);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /** lottery enabler **/\r\n    function ENABLE_LOTTERY() public onlyOwner {\r\n        require(contractStarted);\r\n        LOTTERY_ACTIVATED = true;\r\n        LOTTERY_START_TIME = block.timestamp;\r\n    }\r\n\r\n    function DISABLE_LOTTERY() public onlyOwner {\r\n        require(contractStarted);\r\n        LOTTERY_ACTIVATED = false;\r\n    }\r\n\r\n    /** wallet addresses **/\r\n    function CHANGE_OWNERSHIP(address value) external onlyOwner {\r\n        owner = payable(value);\r\n    }\r\n\r\n    function CHANGE_PROJECT(address value) external onlyOwner {\r\n        project = payable(value);\r\n    }\r\n\r\n    function CHANGE_PARTNER(address value) external onlyOwner {\r\n        partner = payable(value);\r\n    }\r\n\r\n    function CHANGE_MARKETING(address value) external onlyOwner {\r\n        marketing = payable(value);\r\n    }\r\n\r\n    /** percentage **/\r\n\r\n    /**\r\n        2592000 - 3%\r\n        2160000 - 4%\r\n        1728000 - 5%\r\n        1440000 - 6%\r\n        1200000 - 7%\r\n        1080000 - 8%\r\n         959000 - 9%\r\n         864000 - 10%\r\n         720000 - 12%\r\n    **/\r\n    function PRC_EGGS_TO_HIRE_1MINERS(uint256 value) external onlyOwner {\r\n        require(value >= 720000 && value <= 2592000); /** min 3% max 12%**/\r\n        EGGS_TO_HIRE_1MINERS = value;\r\n    }\r\n\r\n    function PRC_PROJECT(uint256 value) external onlyOwner {\r\n        require(value >= 10 && value <= 100); /** 10% max **/\r\n        PROJECT = value;\r\n    }\r\n\r\n    function PRC_PARTNER(uint256 value) external onlyOwner {\r\n        require(value >= 10 && value <= 50); /** 5% max **/\r\n        PARTNER = value;\r\n    }\r\n\r\n    function PRC_MARKETING(uint256 value) external onlyOwner {\r\n        require(value >= 10 && value <= 50); /** 5% max **/\r\n        MARKETING = value;\r\n    }\r\n\r\n    function PRC_REFERRAL(uint256 value) external onlyOwner {\r\n        require(value >= 10 && value <= 100); /** 10% max **/\r\n        REFERRAL = value;\r\n    }\r\n\r\n    function PRC_MARKET_EGGS_DIVISOR(uint256 value) external onlyOwner {\r\n        require(value <= 80); /** 50 = 2% **/\r\n        MARKET_EGGS_DIVISOR = value;\r\n    }\r\n\r\n    /** withdrawal tax **/\r\n    function SET_WITHDRAWAL_TAX(uint256 value) external onlyOwner {\r\n        require(value <= 900); /** Max Tax is 90% or lower **/\r\n        WITHDRAWAL_TAX = value;\r\n    }\r\n\r\n    function SET_WITHDRAW_DAYS_TAX(uint256 value) external onlyOwner {\r\n        require(value <= 6); /** Max 6 days **/\r\n        WITHDRAWAL_TAX_DAYS = value;\r\n    }\r\n\r\n    /** bonus **/\r\n    function SET_COMPOUND_BONUS(uint256 value) external onlyOwner {\r\n        require(value >= 10 && value <= 500); /** 50% max **/\r\n        COMPOUND_BONUS = value;\r\n    }\r\n\r\n    function SET_COMPOUND_BONUS_MAX_TIMES(uint256 value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(value <= 20); /** 20 max **/\r\n        COMPOUND_BONUS_MAX_TIMES = value;\r\n    }\r\n\r\n    function SET_COMPOUND_STEP(uint256 value) external onlyOwner {\r\n        require(value <= 24);\r\n        COMPOUND_STEP = value * 60 * 60;\r\n    }\r\n\r\n    /* lottery setters */\r\n    function SET_LOTTERY_STEP(uint256 value) external onlyOwner {\r\n        require(value <= 48);\r\n        LOTTERY_STEP = value * 60 * 60;\r\n    }\r\n\r\n    function SET_LOTTERY_PERCENT(uint256 value) external onlyOwner {\r\n        require(value >= 5 && value <= 50); /** 5% max **/\r\n        LOTTERY_PERCENT = value;\r\n    }\r\n\r\n    function SET_LOTTERY_MAX_DEPOSITOR_PERCENT(uint256 value)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(value >= 5 && value <= 50); /** 5% max **/\r\n        LOTTERY_MAX_DEPOSITOR_PERCENT = value;\r\n    }\r\n\r\n    function SET_LOTTERY_TICKET_PRICE(uint256 value) external onlyOwner {\r\n        LOTTERY_TICKET_PRICE = value * 1 ether;\r\n    }\r\n\r\n    function SET_MAX_LOTTERY_TICKET_COMPOUND(uint256 value) external onlyOwner {\r\n        require(value >= 1 && value <= 500);\r\n        MAX_LOTTERY_TICKET_COMPOUND = value;\r\n    }\r\n\r\n    function SET_MAX_LOTTERY_TICKET_DEPOSIT(uint256 value) external onlyOwner {\r\n        require(value >= 1 && value <= 500);\r\n        MAX_LOTTERY_TICKET_DEPOSIT = value;\r\n    }\r\n\r\n    function SET_INVEST_MIN(uint256 value) external onlyOwner {\r\n        MIN_INVEST = value * 1 ether;\r\n    }\r\n\r\n    function SET_CUTOFF_STEP(uint256 value) external onlyOwner {\r\n        CUTOFF_STEP = value * 60 * 60;\r\n    }\r\n\r\n    function SET_WITHDRAW_COOLDOWN(uint256 value) external onlyOwner {\r\n        require(value <= 24);\r\n        WITHDRAW_COOLDOWN = value * 60 * 60;\r\n    }\r\n\r\n    function SET_WITHDRAW_LIMIT(uint256 value) external onlyOwner {\r\n        require(value == 0 || value >= 1);\r\n        WITHDRAW_LIMIT = value * 1 ether;\r\n    }\r\n\r\n    function SET_WALLET_DEPOSIT_LIMIT(uint256 value) external onlyOwner {\r\n        require(value >= 20);\r\n        WALLET_DEPOSIT_LIMIT = value * 1 ether;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two numbers, throws on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two numbers, truncating the quotient.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two numbers, throws on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_partner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_marketing\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_buyback\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pot\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"LotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"MaxDepositorWinner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUYBACK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CHANGE_MARKETING\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CHANGE_OWNERSHIP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CHANGE_PARTNER\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"CHANGE_PROJECT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_BONUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_BONUS_MAX_TIMES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPOUND_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CUTOFF_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISABLE_LOTTERY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EGGS_TO_HIRE_1MINERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENABLE_LOTTERY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_ACTIVATED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_MAX_DEPOSITOR_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_START_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOTTERY_TICKET_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKETING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET_EGGS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOTTERY_TICKET_COMPOUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOTTERY_TICKET_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_INVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PARTNER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTS_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_EGGS_TO_HIRE_1MINERS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_MARKETING\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_MARKET_EGGS_DIVISOR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_PARTNER\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_PROJECT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PRC_REFERRAL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJECT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_COMPOUND_BONUS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_COMPOUND_BONUS_MAX_TIMES\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_COMPOUND_STEP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_CUTOFF_STEP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_INVEST_MIN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_LOTTERY_MAX_DEPOSITOR_PERCENT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_LOTTERY_PERCENT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_LOTTERY_STEP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_LOTTERY_TICKET_PRICE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_MAX_LOTTERY_TICKET_COMPOUND\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_MAX_LOTTERY_TICKET_DEPOSIT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_WALLET_DEPOSIT_LIMIT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_WITHDRAWAL_TAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_WITHDRAW_COOLDOWN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_WITHDRAW_DAYS_TAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SET_WITHDRAW_LIMIT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WALLET_DEPOSIT_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_TAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_TAX_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_COOLDOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyEggs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyback\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractBalance\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"}],\"name\":\"calculateEggBuySimple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggs\",\"type\":\"uint256\"}],\"name\":\"calculateEggSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateEggSellForYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bs\",\"type\":\"uint256\"}],\"name\":\"calculateTrade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chooseLotteryWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chooseMaxDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chooseWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getAvailableEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDailyCompoundBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getEggsSinceLastHatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getEggsYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eggValue\",\"type\":\"uint256\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_partnerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buybackFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLargestDepositor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxDeposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maxDepositor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getLotteryHistory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lotteryWinner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxDepositWinner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lotteryPot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDepositorPot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTickets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"step\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDepositTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCompoundTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDepositorPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getLotteryParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyMiners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDeposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCompound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRefBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalLotteryBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimedEggs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalLotteryBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastHatch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralEggRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dailyCompoundBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastWithdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"compound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isCompound\",\"type\":\"bool\"}],\"name\":\"hatchEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lotteryWinner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxDepositWinner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lotteryPot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDepositorPot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTickets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lotteryParticipants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"compoundTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketEggs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketing\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"project\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"startContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLotteryBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedEggs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLotteryBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHatch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralEggRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyCompoundBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ElkOfFortune", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000eeeeeb57642040be42185f49c52f7e9b38f8eeee00000000000000000000000045d7c37c8453ebaccfd8d623de2cedae75370f42000000000000000000000000e5ec80188bd20bb2b93e98c23c429e25e713c0e9000000000000000000000000a4d047d0acfd7b79fa65cd42d9d01051590e1f96000000000000000000000000ea765e02e75dd1993838cac9d04fa1b220e731eb", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f63f012dc9404e51400a9f624f8baff292a6553ad44cb98afcd629c85d87e5c7"}