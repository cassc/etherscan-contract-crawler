{"SourceCode": "// SPDX-License-Identifier: Unlicense\r\n\r\npragma solidity ^0.8.9;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, \"SafeMath: subtraction overflow\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, \"SafeMath: division by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, \"SafeMath: modulo by zero\");\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ninterface IBEP20 {\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IFactory {\r\n  function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n  function factory() external pure returns (address);\r\n  function WETH() external pure returns (address);\r\n\r\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external payable;\r\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n      uint amountIn,\r\n      uint amountOutMin,\r\n      address[] calldata path,\r\n      address to,\r\n      uint deadline\r\n  ) external;\r\n\r\n  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IWETH {\r\n  function deposit() external payable;\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal view returns (address) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n  address private _owner;\r\n\r\n  address[] public multisigWallets;\r\n  mapping (address => mapping (string => uint256)) public timelocks;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n  event MultisigWalletAdded(address indexed multisigWallet);\r\n  event MultisigWalletRemoved(address indexed multisigWallet);\r\n  event Unlocking(address indexed multisigWallet, string indexed id, uint256 unlockTimestamp);\r\n  event Locked(address indexed multisigWallet, string indexed id);\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyMultisigWallet() {\r\n    bool authorized = false;\r\n\r\n    for (uint8 i = 0; i < multisigWallets.length; i++) {\r\n      if (multisigWallets[i] == _msgSender()) {\r\n        authorized = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    require(authorized, \"Multisig: caller is not a multisig wallet\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyUnlocked(string memory id) {\r\n    uint8 count = 0;\r\n\r\n    for (uint8 i = 0; i < multisigWallets.length; i++) {\r\n      uint256 timelock = timelocks[multisigWallets[i]][id];\r\n\r\n      if (timelock != 0 && timelock <= block.timestamp) {\r\n        count++;\r\n      }\r\n    }\r\n\r\n    require(count >= 2, \"Timelock: action is not unlocked by at least 2 multisig wallets\");\r\n    _;\r\n\r\n    for (uint256 i = 0; i < multisigWallets.length; i++) {\r\n      timelocks[multisigWallets[i]][id] = 0;\r\n      emit Locked(multisigWallets[i], id);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n    multisigWallets = new address[](3);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public onlyOwner onlyUnlocked(\"OWNERSHIP\") {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner onlyUnlocked(\"OWNERSHIP\") {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n\r\n  function addMultisigWallet(address multisigWallet) public onlyOwner {\r\n    for (uint8 i = 0; i < multisigWallets.length; i++) {\r\n      require(multisigWallets[i] != multisigWallet, \"Multsig: already added\");\r\n    }\r\n\r\n    for (uint8 i = 0; i < multisigWallets.length; i++) {\r\n      if (multisigWallets[i] == address(0)) {\r\n        multisigWallets[i] = multisigWallet;\r\n        emit MultisigWalletAdded(multisigWallet);\r\n        return;\r\n      }\r\n    }\r\n\r\n    revert(\"Multisig: maximum reached\");\r\n  }\r\n\r\n  function removeMultisigWallet() external onlyMultisigWallet {\r\n    for (uint8 i = 0; i < multisigWallets.length; i++) {\r\n      if (multisigWallets[i] == _msgSender()) {\r\n        multisigWallets[i] = address(0);\r\n        emit MultisigWalletRemoved(_msgSender());\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  function unlock(string memory id) external onlyMultisigWallet {\r\n    uint256 unlockTimestamp = block.timestamp + 3 days;\r\n    timelocks[_msgSender()][id] = unlockTimestamp < block.timestamp ? 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff : unlockTimestamp;\r\n    emit Unlocking(_msgSender(), id, unlockTimestamp);\r\n  }\r\n\r\n  function lock(string memory id) external onlyMultisigWallet {\r\n    timelocks[_msgSender()][id] = 0;\r\n    emit Locked(_msgSender(), id);\r\n  }\r\n}\r\n\r\ncontract Booster is Ownable, IBEP20 {\r\n  using SafeMath for uint256;\r\n\r\n  address constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n  string constant NAME = \"Booster\";\r\n  string constant SYMBOL = \"BOOST\";\r\n  uint8 constant DECIMALS = 18;\r\n  uint256 constant TOTAL_SUPPLY = 10 ** uint256(DECIMALS) * 1e15; // 1 Quadtrillion\r\n\r\n  address constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n\r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n  uint256 public holders;\r\n  mapping (address => uint256) public lastTransfer;\r\n  bool public tradingEnabled;\r\n\r\n  address private _pair;\r\n\r\n  address public signer;\r\n  address public dev;\r\n  address public rewardSetter;\r\n  address public rewardToken;\r\n  address[] private _rewardTokens;\r\n  mapping (address => uint256) public totalRewards;\r\n  mapping (address => uint256) private _accumulatedRewardPerShare;\r\n  mapping (address => mapping (address => uint256)) private _rewards;\r\n  mapping (address => mapping (address => uint256)) private _rewardDebts;\r\n  mapping (address => mapping (address => uint256)) public claimNonce;\r\n\r\n  event TradingEnabled(uint256 timestamp);\r\n  event SignerUpdated(address indexed previousSigner, address indexed newSigner);\r\n  event DevUpdated(address indexed previousDev, address indexed newDev);\r\n  event RewardSetterUpdated(address indexed previousRewardSetter, address indexed newRewardSetter);\r\n  event RewardTokenUpdated(address indexed previousRewardToken, address indexed newRewardToken);\r\n  event RewardClaimed(address indexed account, address indexed rewardToken, uint256 userReward, uint256 devReward);\r\n\r\n  constructor() {\r\n    _updateBalance(_msgSender(), TOTAL_SUPPLY, true);\r\n    emit Transfer(address(0), _msgSender(), TOTAL_SUPPLY);\r\n    _transfer(_msgSender(), BURN_ADDRESS, TOTAL_SUPPLY.div(2));\r\n\r\n    IRouter router = IRouter(ROUTER);\r\n    _pair = IFactory(router.factory()).createPair(address(this), router.WETH());\r\n\r\n    signer = 0x05812C5691649ca4e26642c9233A3bf428d4F72d;\r\n    dev = _msgSender();\r\n    rewardSetter = _msgSender();\r\n    rewardToken = address(this);\r\n\r\n    _rewardTokens = [\r\n      rewardToken,\r\n      router.WETH(),\r\n      0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56, // BUSD\r\n      0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c, // BTCB\r\n      0x2170Ed0880ac9A755fd29B2688956BD959F933F8, // ETH\r\n      0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47, // ADA\r\n      0xbA2aE424d960c26247Dd6c32edC70B295c744C43, // DOGE\r\n      0x7083609fCE4d1d8Dc0C979AAb8c869Ea2C873402, // DOT\r\n      0x4338665CBB7B2485A8855A139b75D5e34AB0DB94, // LTC\r\n      0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD, // LINK\r\n      0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82 // CAKE\r\n    ];\r\n  }\r\n\r\n  receive() external payable { }\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view override returns (address) {\r\n    return owner();\r\n  }\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external pure override returns (string memory) {\r\n    return NAME;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external pure override returns (string memory) {\r\n    return SYMBOL;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external pure override returns (uint8) {\r\n    return DECIMALS;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-totalSupply}.\r\n   */\r\n  function totalSupply() external pure override returns (uint256) {\r\n    return TOTAL_SUPPLY;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-balanceOf}.\r\n   */\r\n  function balanceOf(address account) external view override returns (uint256) {\r\n    return _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-transfer}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `recipient` cannot be the zero address.\r\n   * - the caller must have a balance of at least `amount`.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-allowance}.\r\n   */\r\n  function allowance(address owner, address spender) external view override returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-approve}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function approve(address spender, uint256 amount) external override returns (bool) {\r\n    _approve(_msgSender(), spender, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev See {BEP20-transferFrom}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance. This is not\r\n   * required by the EIP. See the note at the beginning of {BEP20};\r\n   *\r\n   * Requirements:\r\n   * - `sender` and `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   * - the caller must have allowance for `sender`'s tokens of at least\r\n   * `amount`.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {BEP20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {BEP20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   * - `spender` must have allowance for the caller of at least\r\n   * `subtractedValue`.\r\n   */\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n   *\r\n   * This is internal function is equivalent to {transfer}, and can be used to\r\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `sender` cannot be the zero address.\r\n   * - `recipient` cannot be the zero address.\r\n   * - `sender` must have a balance of at least `amount`.\r\n   */\r\n  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n    require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n    require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n    uint256 minBalance = 10 ** uint256(DECIMALS);\r\n\r\n    if (_balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\") < minBalance) {\r\n      require(_balances[sender] > minBalance, \"Booster: 1 BOOST must remain in wallet\");\r\n      amount = _balances[sender].sub(minBalance);\r\n    }\r\n\r\n    _updateBalance(sender, amount, false);\r\n\r\n    if (_balances[_pair] != 0) { // initial liquidity provided\r\n      require(tradingEnabled, \"Booster: trading not enabled yet\");\r\n\r\n      if (sender != address(this) && recipient == _pair) { // address other than this selling\r\n        uint256 fee = amount.div(10); // 10%\r\n        amount = amount.sub(fee);\r\n        _updateBalance(address(this), fee, true);\r\n        emit Transfer(sender, address(this), fee);\r\n        uint256 _reward;\r\n        IRouter router = IRouter(ROUTER);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        uint256 balance = address(this).balance;\r\n        IWETH weth = IWETH(router.WETH());\r\n        IBEP20 wethToken = IBEP20(router.WETH());\r\n\r\n        if (rewardToken == address(this)) {\r\n          uint256 swap = fee.div(2);\r\n          _reward = fee.sub(swap);\r\n          _approve(address(this), ROUTER, swap);\r\n          router.swapExactTokensForETHSupportingFeeOnTransferTokens(swap, router.getAmountsOut(swap, path)[1].mul(85).div(100), path, address(this), block.timestamp);\r\n          balance = address(this).balance.sub(balance);\r\n          weth.deposit{ value: balance }();\r\n          wethToken.transfer(_pair, balance);\r\n        } else {\r\n          _approve(address(this), ROUTER, fee);\r\n          router.swapExactTokensForETHSupportingFeeOnTransferTokens(fee, router.getAmountsOut(fee, path)[1].mul(85).div(100), path, address(this), block.timestamp);\r\n          balance = address(this).balance.sub(balance);\r\n          uint256 liquidity = balance.div(2);\r\n          balance = balance.sub(liquidity);\r\n          weth.deposit{ value: liquidity }();\r\n          wethToken.transfer(_pair, liquidity);\r\n\r\n          if (rewardToken == router.WETH()) {\r\n            _reward = balance;\r\n          } else {\r\n            IBEP20 token = IBEP20(rewardToken);\r\n            _reward = token.balanceOf(address(this));\r\n            path[0] = router.WETH();\r\n            path[1] = rewardToken;\r\n            router.swapExactETHForTokensSupportingFeeOnTransferTokens{ value: balance }(router.getAmountsOut(balance, path)[1].mul(95).div(100), path, address(this), block.timestamp);\r\n            _reward = token.balanceOf(address(this)).sub(_reward);\r\n          }\r\n        }\r\n\r\n        totalRewards[rewardToken] = totalRewards[rewardToken].add(_reward);\r\n        uint256 supply = TOTAL_SUPPLY.sub(_balances[BURN_ADDRESS]).sub(_balances[address(this)]).sub(_balances[_pair]).sub(amount);\r\n\r\n        if (supply != 0) {\r\n          _accumulatedRewardPerShare[rewardToken] = _accumulatedRewardPerShare[rewardToken].add(_reward.mul(1e18).div(supply));\r\n        }\r\n      }\r\n    }\r\n\r\n    _updateBalance(recipient, amount, true);\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n   *\r\n   * This is internal function is equivalent to `approve`, and can be used to\r\n   * e.g. set automatic allowances for certain subsystems, etc.\r\n   *\r\n   * Emits an {Approval} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `owner` cannot be the zero address.\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function _approve(address owner, address spender, uint256 amount) internal {\r\n    require(owner != address(0), \"BEP20: approve from the zero address\");\r\n    require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n    _allowances[owner][spender] = amount;\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function _updateBalance(address account, uint256 amount, bool add) private {\r\n    if (account != BURN_ADDRESS && account != address(this) && account != _pair) {\r\n      for (uint8 i = 0; i < _rewardTokens.length; i++) {\r\n        _rewards[account][_rewardTokens[i]] = _rewards[account][_rewardTokens[i]].add(_accumulatedRewardPerShare[_rewardTokens[i]].mul(_balances[account]).div(1e18).sub(_rewardDebts[account][_rewardTokens[i]]));\r\n      }\r\n    }\r\n\r\n    if (amount != 0) {\r\n      if (add) {\r\n        if (_balances[account] == 0) {\r\n          holders = holders.add(1);\r\n        }\r\n\r\n        _balances[account] = _balances[account].add(amount);\r\n\r\n        if (lastTransfer[account] == 0) {\r\n          lastTransfer[account] = block.timestamp;\r\n        }\r\n      } else {\r\n        _balances[account] = _balances[account].sub(amount);\r\n        lastTransfer[account] = block.timestamp;\r\n      }\r\n    }\r\n\r\n    if (account != BURN_ADDRESS && account != address(this) && account != _pair) {\r\n      for (uint8 i = 0; i < _rewardTokens.length; i++) {\r\n        _rewardDebts[account][_rewardTokens[i]] = _accumulatedRewardPerShare[_rewardTokens[i]].mul(_balances[account]).div(1e18);\r\n      }\r\n    }\r\n  }\r\n\r\n  function enableTrading() external onlyOwner {\r\n    tradingEnabled = true;\r\n    emit TradingEnabled(block.timestamp);\r\n  }\r\n\r\n  function withdrawLiquidity() external onlyOwner onlyUnlocked(\"LIQUIDITY\") {\r\n    IBEP20 pair = IBEP20(_pair);\r\n    uint256 amount = pair.balanceOf(address(this));\r\n    pair.transfer(_msgSender(), amount);\r\n  }\r\n\r\n  function setSigner(address _signer) external onlyOwner onlyUnlocked(\"SIGNER\") {\r\n    emit SignerUpdated(signer, _signer);\r\n    signer = _signer;\r\n  }\r\n\r\n  function setDev(address _dev) external onlyOwner onlyUnlocked(\"DEV\") {\r\n    emit DevUpdated(dev, _dev);\r\n    dev = _dev;\r\n  }\r\n\r\n  function setRewardSetter(address _rewardSetter) external onlyOwner onlyUnlocked(\"REWARD_SETTER\") {\r\n    emit RewardSetterUpdated(rewardSetter, _rewardSetter);\r\n    rewardSetter = _rewardSetter;\r\n  }\r\n\r\n  function setRewardToken(address _rewardToken) external {\r\n    require(_msgSender() == rewardSetter, \"Booster: caller is not the reward setter\");\r\n    bool valid;\r\n\r\n    for (uint8 i = 0; i < _rewardTokens.length; i++) {\r\n      if (_rewardTokens[i] == _rewardToken) {\r\n        valid = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    require(valid, \"Booster: invalid reward token\");\r\n    emit RewardTokenUpdated(rewardToken, _rewardToken);\r\n    rewardToken = _rewardToken;\r\n  }\r\n\r\n  function reward(address account, address _rewardToken) public view returns (uint256) {\r\n    if (account == BURN_ADDRESS || account == address(this) || account == _pair) {\r\n      return 0;\r\n    }\r\n\r\n    return _rewards[account][_rewardToken].add(_accumulatedRewardPerShare[_rewardToken].mul(_balances[account]).div(1e18).sub(_rewardDebts[account][_rewardToken]));\r\n  }\r\n\r\n  function claimReward(address _rewardToken, uint8 level, uint256 nonce, bytes memory signature) external {\r\n    if (signature.length == 0) {\r\n      level = 50;\r\n    } else {\r\n      require(signature.length == 65, \"Booster: invalid signature length\");\r\n      bytes32 r;\r\n      bytes32 s;\r\n      uint8 v;\r\n\r\n      assembly {\r\n        r := mload(add(signature, 32))\r\n        s := mload(add(signature, 64))\r\n        v := byte(0, mload(add(signature, 96)))\r\n      }\r\n\r\n      require(ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", keccak256(abi.encodePacked(_msgSender(), _rewardToken, level, nonce)))), v, r, s) == signer, \"Booster: invalid signature\");\r\n      require(nonce == claimNonce[_msgSender()][_rewardToken] + 1, \"Booster: claim nonce must increment\");\r\n      claimNonce[_msgSender()][_rewardToken] = nonce;\r\n    }\r\n\r\n    uint256 _reward = reward(_msgSender(), _rewardToken);\r\n    require(_reward != 0, \"Booster: no reward to claim\");\r\n    _rewards[_msgSender()][_rewardToken] = _reward;\r\n    _rewardDebts[_msgSender()][_rewardToken] = _accumulatedRewardPerShare[_rewardToken].mul(_balances[_msgSender()]).div(1e18);\r\n    IRouter router = IRouter(ROUTER);\r\n    uint256 balance = _rewardToken == router.WETH() ? address(this).balance : IBEP20(_rewardToken).balanceOf(address(this));\r\n\r\n    if (_reward > balance) {\r\n      _reward = balance;\r\n    }\r\n\r\n    _rewards[_msgSender()][_rewardToken] = _rewards[_msgSender()][_rewardToken].sub(_reward);\r\n    uint256 userReward = _reward.mul(level).div(100);\r\n    uint256 devReward = _reward.sub(userReward);\r\n\r\n    if (_rewardToken == router.WETH()) {\r\n      if (userReward != 0) {\r\n        (bool success, ) = _msgSender().call{ value: userReward }(\"\");\r\n        require(success, \"Booster: sending BNB to user failed\");\r\n      }\r\n\r\n      if (devReward != 0) {\r\n        (bool success, ) = dev.call{ value: devReward }(\"\");\r\n        require(success, \"Booster: sending BNB to dev failed\");\r\n      }\r\n    } else {\r\n      IBEP20 token = IBEP20(_rewardToken);\r\n\r\n      if (userReward != 0) {\r\n        token.transfer(_msgSender(), userReward);\r\n      }\r\n\r\n      if (devReward != 0) {\r\n        token.transfer(dev, devReward);\r\n      }\r\n    }\r\n\r\n    emit RewardClaimed(_msgSender(), _rewardToken, userReward, devReward);\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousDev\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDev\",\"type\":\"address\"}],\"name\":\"DevUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"multisigWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"multisigWallet\",\"type\":\"address\"}],\"name\":\"MultisigWalletAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"multisigWallet\",\"type\":\"address\"}],\"name\":\"MultisigWalletRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devReward\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousRewardSetter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRewardSetter\",\"type\":\"address\"}],\"name\":\"RewardSetterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousRewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRewardToken\",\"type\":\"address\"}],\"name\":\"RewardTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousSigner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"SignerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"multisigWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"}],\"name\":\"Unlocking\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"multisigWallet\",\"type\":\"address\"}],\"name\":\"addMultisigWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"multisigWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeMultisigWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardSetter\",\"type\":\"address\"}],\"name\":\"setRewardSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"timelocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Booster", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2dbf6e65ba4c2dfc5a709aec3a5573fc1dde75ce7f785f3fb7bb79ef0996340a"}