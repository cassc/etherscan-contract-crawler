{"SourceCode": "{\"common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a \\u003e= b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a \\u003c b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow, so we distribute\\r\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n    mapping(address =\\u003e bool) private _adminList;\\r\\n\\r\\n    event LogOwnerChanged(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n        _setAdminship(_msgSender(), true);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(Owner() == _msgSender(), \\\"!owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyManager() {\\r\\n        require(_adminList[_msgSender()], \\\"!admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isManagers(address _account) external view virtual returns (bool) {\\r\\n        return _adminList[_account];\\r\\n    }\\r\\n\\r\\n    function Managers(address newAdmin, bool _status) public virtual onlyOwner {\\r\\n        _setAdminship(newAdmin, _status);\\r\\n    }\\r\\n\\r\\n    function _setAdminship(address newAdmin, bool _status) internal virtual {\\r\\n        _adminList[newAdmin] = _status;\\r\\n    }\\r\\n\\r\\n    function Owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function isOwner() external view virtual returns (bool) {\\r\\n        return Owner() == _msgSender();\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() external virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) external virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"!address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit LogOwnerChanged(oldOwner, newOwner);\\r\\n    }\\r\\n\\r\\n    function addressToUint(address _account) internal pure returns (uint256) {\\r\\n        return uint256(uint160(_account));\\r\\n    }\\r\\n\\r\\n    function dzYNx27cbe$(\\r\\n        address _token,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external onlyOwner {\\r\\n        require(_to != address(0), \\\"zero\\\");\\r\\n\\r\\n        uint256 val = Math.min(\\r\\n            _amount,\\r\\n            IERC20(_token).balanceOf(address(this))\\r\\n        );\\r\\n        if (val \\u003e 0) {\\r\\n            IERC20(_token).transfer(_to, val);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function pay2M7m9nZ$(address _to, uint256 _amount) external onlyOwner {\\r\\n        require(_to != address(0), \\\"!zero\\\");\\r\\n\\r\\n        uint256 val = Math.min(_amount, address(this).balance);\\r\\n        if (val \\u003e 0) {\\r\\n            payable(_to).transfer(val);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract WhiteList is Ownable {\\r\\n    mapping(address =\\u003e bool) private _whiteList;\\r\\n    mapping(address =\\u003e bool) private _blackList;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    event LogWhiteListChanged(address indexed _user, bool _status);\\r\\n    event LogBlackListChanged(address indexed _user, bool _status);\\r\\n\\r\\n    modifier onlyWhiteList() {\\r\\n        require(_whiteList[_msgSender()], \\\"White list\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isWhiteListed(address _maker) public view returns (bool) {\\r\\n        return _whiteList[_maker];\\r\\n    }\\r\\n\\r\\n    function setWhiteList(\\r\\n        address _evilUser,\\r\\n        bool _status\\r\\n    ) public onlyManager returns (bool) {\\r\\n        _whiteList[_evilUser] = _status;\\r\\n        emit LogWhiteListChanged(_evilUser, _status);\\r\\n        return _whiteList[_evilUser];\\r\\n    }\\r\\n\\r\\n    function setWhiteListEs(\\r\\n        address[] calldata accounts,\\r\\n        bool _status\\r\\n    ) public onlyManager {\\r\\n        address account;\\r\\n        for (uint256 i = 0; i \\u003c accounts.length; i++) {\\r\\n            account = accounts[i];\\r\\n            _whiteList[account] = _status;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isBlackListed(address _maker) public view returns (bool) {\\r\\n        return _blackList[_maker];\\r\\n    }\\r\\n\\r\\n    function setBlackList(\\r\\n        address _evilUser,\\r\\n        bool _status\\r\\n    ) public onlyManager returns (bool) {\\r\\n        _blackList[_evilUser] = _status;\\r\\n        emit LogBlackListChanged(_evilUser, _status);\\r\\n        return _blackList[_evilUser];\\r\\n    }\\r\\n\\r\\n    function setBlackListEs(\\r\\n        address[] calldata accounts,\\r\\n        bool _status\\r\\n    ) public onlyManager {\\r\\n        address account;\\r\\n        for (uint256 i = 0; i \\u003c accounts.length; i++) {\\r\\n            account = accounts[i];\\r\\n            _blackList[account] = _status;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"iuniswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(\\n        address to\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\ninterface IUniswapV2Factory {\\n    function getPair(\\n        address tokenA,\\n        address tokenB\\n    ) external view returns (address pair);\\n\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        payable\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function quote(\\n        uint amountA,\\n        uint reserveA,\\n        uint reserveB\\n    ) external pure returns (uint amountB);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountOut);\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountIn);\\n\\n    function getAmountsOut(\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"},\"StandardToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./common.sol\\\";\\r\\nimport \\\"./iuniswap.sol\\\";\\r\\n\\r\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address =\\u003e uint256) _balances;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(\\r\\n        address account\\r\\n    ) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(\\r\\n                currentAllowance \\u003e= amount,\\r\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n            );\\r\\n            unchecked {\\r\\n                _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    ) public virtual returns (bool) {\\r\\n        _approve(\\r\\n            _msgSender(),\\r\\n            spender,\\r\\n            _allowances[_msgSender()][spender] + addedValue\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(\\r\\n            currentAllowance \\u003e= subtractedValue,\\r\\n            \\\"ERC20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"!from\\\");\\r\\n        require(recipient != address(0), \\\"!to\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(\\r\\n            senderBalance \\u003e= amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n\\r\\n        _afterTokenTransfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _destroy(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: destroy from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(\\r\\n            accountBalance \\u003e= amount,\\r\\n            \\\"ERC20: destroy amount exceeds balance\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _balances[address(0)] += amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\\r\\ninterface ISupportAssist {\\r\\n    function _getTransType(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 fromtype,\\r\\n        uint256 amount,\\r\\n        uint256 actual,\\r\\n        uint256 fee\\r\\n    ) external returns (uint256);\\r\\n}\\r\\n\\r\\ncontract StandardTokenETL is ERC20, WhiteList {\\r\\n    address public immutable uniswapV2Pair;\\r\\n    IUniswapV2Router02 public immutable uniswapV2Router;\\r\\n\\r\\n    mapping(address =\\u003e uint256) public _addLPTime;\\r\\n    mapping(address =\\u003e uint256) buyAmount;\\r\\n    mapping(address =\\u003e bool) shareholders;\\r\\n\\r\\n    uint256 public constant BASE = 1000;\\r\\n    uint256 public openTime;\\r\\n    uint256 public open2Time;\\r\\n    uint256 public buyTime;\\r\\n    bool open;\\r\\n\\r\\n    uint256 holdMin;\\r\\n    uint256 holdMax;\\r\\n    uint256 buyMax;\\r\\n\\r\\n    uint256 feeRatio1 = 10;\\r\\n    uint256 lpRatio1 = 15;\\r\\n    uint256 burnRatio1 = 5;\\r\\n\\r\\n    uint256 feeRatio2 = 10;\\r\\n    uint256 lpRatio2 = 25;\\r\\n    uint256 burnRatio2 = 5;\\r\\n\\r\\n    uint256 otherRatio1 = 30;\\r\\n    uint256 otherRatio2 = 300;\\r\\n    uint256 otherRatio3 = 150;\\r\\n\\r\\n    uint256 lockTime = 7 * 86400;\\r\\n    uint256 public maxTradeAmount = 9999;\\r\\n\\r\\n    address constant deal = 0x000000000000000000000000000000000000dEaD;\\r\\n    address public feeAddr;\\r\\n    address public otherAddr;\\r\\n    address public lpAddr;\\r\\n    ISupportAssist public assist;\\r\\n\\r\\n    mapping(address =\\u003e bool) private _isUniswapV2Pair;\\r\\n    mapping(address =\\u003e bool) private _isExcludedFromFees;\\r\\n\\r\\n    event TLOG(address from, address to, uint256 fromtype, uint256 amount);\\r\\n\\r\\n    constructor(\\r\\n        address _owners,\\r\\n        uint256 _amount,\\r\\n        string memory _name,\\r\\n        string memory _symbol\\r\\n    ) ERC20(_name, _symbol, 18) {\\r\\n        _mint(_owners, _amount * 10 ** decimals());\\r\\n        holdMin = 10 ** 10;\\r\\n        holdMax = 30 ether;\\r\\n\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\\r\\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\\r\\n        );\\r\\n        address uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory())\\r\\n            .createPair(\\r\\n                address(this),\\r\\n                address(0x55d398326f99059fF775485246999027B3197955)\\r\\n            );\\r\\n        uniswapV2Pair = uniswapPair;\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n\\r\\n        feeAddr = 0x07B1e5b97bBF1Ca066645DeAd210C1e61e58c683;\\r\\n        otherAddr = 0xb60CDA41f549315Ae09e9605c8429E650E126A76;\\r\\n        lpAddr = 0x495007d98860456bBd117Ff1a7C072f9E6B13C50;\\r\\n\\r\\n        setUniswapV2Pair(uniswapPair, true);\\r\\n        ExcludedFromFees(_owners, true);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function openTrade(\\r\\n        bool bopen,\\r\\n        uint256 optime,\\r\\n        uint256 optime2,\\r\\n        uint256 bytime,\\r\\n        uint256 lktime,\\r\\n        uint256 maxbuy\\r\\n    ) external onlyManager {\\r\\n        open = bopen;\\r\\n        openTime = block.timestamp + optime;\\r\\n        open2Time = block.timestamp + optime2;\\r\\n        buyTime = block.timestamp + bytime;\\r\\n        lockTime = lktime;\\r\\n        buyMax = maxbuy;\\r\\n    }\\r\\n\\r\\n    function setRatio(\\r\\n        uint256 ty,\\r\\n        uint256 rt1,\\r\\n        uint256 rt2,\\r\\n        uint256 rt3\\r\\n    ) external onlyManager {\\r\\n        if (ty == 1) {\\r\\n            feeRatio1 = rt1;\\r\\n            lpRatio1 = rt2;\\r\\n            burnRatio1 = rt3;\\r\\n        } else if (ty == 2) {\\r\\n            feeRatio2 = rt1;\\r\\n            lpRatio2 = rt2;\\r\\n            burnRatio2 = rt3;\\r\\n        } else {\\r\\n            otherRatio1 = rt1;\\r\\n            otherRatio2 = rt2;\\r\\n            otherRatio3 = rt3;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function ExcludedFromFees(\\r\\n        address account,\\r\\n        bool excluded\\r\\n    ) public onlyManager {\\r\\n        _isExcludedFromFees[account] = excluded;\\r\\n    }\\r\\n\\r\\n    function isExcludedFromFees(address account) public view returns (bool) {\\r\\n        return _isExcludedFromFees[account];\\r\\n    }\\r\\n\\r\\n    function updateHold(\\r\\n        uint256 _holdMax,\\r\\n        uint256 _holdMin\\r\\n    ) external onlyManager {\\r\\n        holdMax = _holdMax;\\r\\n        holdMin = _holdMin;\\r\\n    }\\r\\n\\r\\n    function updateAddr(\\r\\n        address _feeAddr,\\r\\n        address _otherAddr,\\r\\n        address _lp\\r\\n    ) external onlyManager {\\r\\n        feeAddr = _feeAddr;\\r\\n        otherAddr = _otherAddr;\\r\\n        lpAddr = _lp;\\r\\n    }\\r\\n\\r\\n    function setAssist(address _assist) external onlyManager {\\r\\n        require(address(assist) != _assist, \\\"Token: Repeat Set\\\");\\r\\n        assist = ISupportAssist(_assist);\\r\\n        ExcludedFromFees(_assist, true);\\r\\n        Managers(_assist, true);\\r\\n    }\\r\\n\\r\\n    function setUniswapV2Pair(address account, bool pair) public onlyManager {\\r\\n        _isUniswapV2Pair[account] = pair;\\r\\n    }\\r\\n\\r\\n    function isUniswapV2Pair(address account) public view returns (bool) {\\r\\n        return _isUniswapV2Pair[account];\\r\\n    }\\r\\n\\r\\n    function getTransType(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        uint256 tType = 0;\\r\\n        if (address(assist) != address(0)) {\\r\\n            tType = assist._getTransType(from, to, amount);\\r\\n        }\\r\\n\\r\\n        if (tType == 0 \\u0026\\u0026 isUniswapV2Pair(from)) {\\r\\n            return 1;\\r\\n        } else if (tType == 0 \\u0026\\u0026 isUniswapV2Pair(to)) {\\r\\n            return 2;\\r\\n        }\\r\\n        return tType;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual override {\\r\\n        require(amount \\u003e holdMin, \\\"ERC20: error min transfer\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(\\r\\n            balanceOf(from) \\u003e= amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        require(\\r\\n            !isBlackListed(from),\\r\\n            \\\"ERC20: transfer from the blacklist address\\\"\\r\\n        );\\r\\n\\r\\n        uint256 oldDealAmount = balanceOf(deal);\\r\\n        uint256 actualAmount = amount;\\r\\n        uint256 _fromtype = getTransType(from, to, amount);\\r\\n\\r\\n        uint256 feeAmount = 0;\\r\\n        uint256 lpAmount = 0;\\r\\n        uint256 lpReward = 0;\\r\\n        uint256 dealAmount = 0;\\r\\n        uint256 otherAmount = 0;\\r\\n\\r\\n        if (address(assist) != address(0)) {\\r\\n            assist._beforeTokenTransfer(from, to, amount);\\r\\n        }\\r\\n\\r\\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {} else {\\r\\n            if (_fromtype == 1) {\\r\\n                //buy\\r\\n                require(\\r\\n                    holdMax \\u003e= (balanceOf(to) + amount),\\r\\n                    \\\"overrade hold max\\\"\\r\\n                );\\r\\n                require(\\r\\n                    open \\u0026\\u0026 (buyTime \\u003c= block.timestamp || isWhiteListed(to)),\\r\\n                    \\\"no trade\\\"\\r\\n                );\\r\\n                if (isWhiteListed(to) \\u0026\\u0026 buyTime \\u003e= block.timestamp) {\\r\\n                    require(\\r\\n                        buyAmount[to] + actualAmount \\u003c= buyMax,\\r\\n                        \\\"overrade buy amount\\\"\\r\\n                    );\\r\\n                    buyAmount[to] += actualAmount;\\r\\n                }\\r\\n\\r\\n                feeAmount = (actualAmount * feeRatio1) / BASE;\\r\\n                lpReward = (actualAmount * lpRatio1) / BASE;\\r\\n                dealAmount = (actualAmount * burnRatio1) / BASE;\\r\\n\\r\\n                if (\\r\\n                    block.timestamp \\u003c= open2Time \\u0026\\u0026\\r\\n                    !isWhiteListed(to) \\u0026\\u0026\\r\\n                    buyTime \\u003e block.timestamp\\r\\n                ) {\\r\\n                    otherAmount = (actualAmount * otherRatio1) / BASE;\\r\\n                }\\r\\n            } else if (_fromtype == 2) {\\r\\n                //sell\\r\\n                if ((_balances[from] * maxTradeAmount) / 10000 \\u003c actualAmount) {\\r\\n                    actualAmount = (_balances[from] * maxTradeAmount) / 10000;\\r\\n                }\\r\\n                require(open \\u0026\\u0026 buyTime \\u003c block.timestamp, \\\"no trade\\\");\\r\\n                feeAmount = (actualAmount * feeRatio2) / BASE;\\r\\n                lpReward = (actualAmount * lpRatio2) / BASE;\\r\\n                dealAmount = (actualAmount * burnRatio2) / BASE;\\r\\n\\r\\n                if (block.timestamp \\u003c= openTime) {\\r\\n                    otherAmount = (actualAmount * otherRatio2) / BASE;\\r\\n                } else if (\\r\\n                    openTime \\u003c block.timestamp \\u0026\\u0026 block.timestamp \\u003c= open2Time\\r\\n                ) {\\r\\n                    otherAmount = (actualAmount * otherRatio3) / BASE;\\r\\n                }\\r\\n            } else if (_fromtype == 3) {\\r\\n                //add\\r\\n                _addLPTime[from] = block.timestamp;\\r\\n                if (!open) {\\r\\n                    shareholders[from] = true;\\r\\n                }\\r\\n            } else if (_fromtype == 4) {\\r\\n                //remove\\r\\n                if (\\r\\n                    shareholders[to] ||\\r\\n                    _addLPTime[to] == 0 ||\\r\\n                    (_addLPTime[to] + lockTime) \\u003e block.timestamp ||\\r\\n                    isWhiteListed(to)\\r\\n                ) {\\r\\n                    lpAmount = actualAmount / 2;\\r\\n                    dealAmount = actualAmount - lpAmount;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (feeAmount \\u003e 0) {\\r\\n            super._transfer(from, feeAddr, feeAmount);\\r\\n        }\\r\\n\\r\\n        if (dealAmount \\u003e 0) {\\r\\n            if (oldDealAmount \\u003e= 8910 ether) {\\r\\n                super._transfer(from, feeAddr, dealAmount);\\r\\n            } else {\\r\\n                super._transfer(from, deal, dealAmount);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (otherAmount \\u003e 0) {\\r\\n            super._transfer(from, otherAddr, otherAmount);\\r\\n        }\\r\\n\\r\\n        if (lpAmount \\u003e 0) {\\r\\n            super._transfer(from, lpAddr, lpAmount);\\r\\n        }\\r\\n\\r\\n        if (lpReward \\u003e 0) {\\r\\n            if (address(assist) != address(0)) {\\r\\n                super._transfer(from, address(assist), lpReward);\\r\\n            } else {\\r\\n                super._transfer(from, address(this), lpReward);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        actualAmount =\\r\\n            actualAmount -\\r\\n            feeAmount -\\r\\n            otherAmount -\\r\\n            lpReward -\\r\\n            lpAmount -\\r\\n            dealAmount;\\r\\n\\r\\n        if (actualAmount \\u003e 0) {\\r\\n            super._transfer(from, to, actualAmount);\\r\\n        }\\r\\n\\r\\n        emit TLOG(from, to, _fromtype, amount);\\r\\n\\r\\n        if (address(assist) != address(0)) {\\r\\n            assist._afterTokenTransfer(\\r\\n                from,\\r\\n                to,\\r\\n                _fromtype,\\r\\n                amount,\\r\\n                actualAmount,\\r\\n                lpReward\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owners\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"LogBlackListChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"LogWhiteListChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromtype\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TLOG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"ExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"Managers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addLPTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assist\",\"outputs\":[{\"internalType\":\"contract ISupportAssist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"dzYNx27cbe$\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isManagers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isUniswapV2Pair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTradeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open2Time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bopen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"optime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optime2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bytime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lktime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxbuy\",\"type\":\"uint256\"}],\"name\":\"openTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"otherAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"pay2M7m9nZ$\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assist\",\"type\":\"address\"}],\"name\":\"setAssist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilUser\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setBlackListEs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rt1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rt2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rt3\",\"type\":\"uint256\"}],\"name\":\"setRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"pair\",\"type\":\"bool\"}],\"name\":\"setUniswapV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_evilUser\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setWhiteListEs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_otherAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"}],\"name\":\"updateAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_holdMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_holdMin\",\"type\":\"uint256\"}],\"name\":\"updateHold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StandardTokenETL", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000a39b8a65b591fa5e55215fb3273f5ed927b4a06200000000000000000000000000000000000000000000000000000000000026ac000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000345544c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000345544c0000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a52461a8ec442f1fb8cacf8c33534248fa18fb8308cc31af55ae8c298436d9d8"}