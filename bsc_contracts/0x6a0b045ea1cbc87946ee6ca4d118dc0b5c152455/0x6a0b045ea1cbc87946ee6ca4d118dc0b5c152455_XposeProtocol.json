{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        unchecked {\\r\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n        }\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n\\r\\n        _afterTokenTransfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\"\r\n    },\r\n    \"/contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"\r\n    },\r\n    \"/contracts/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\"\r\n    },\r\n    \"/contracts/IPancakeFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakeFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\"\r\n    },\r\n    \"/contracts/IPancakePair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface IPancakePair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\"\r\n    },\r\n    \"/contracts/IPancakeRouter01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\ninterface IPancakeRouter01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\"\r\n    },\r\n    \"/contracts/IPancakeRouter02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity >=0.6.2;\\r\\n\\r\\nimport './IPancakeRouter01.sol';\\r\\n\\r\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\"\r\n    },\r\n    \"/contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/contracts/XposeProtocol.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IPancakeFactory.sol\\\";\\r\\nimport \\\"./IPancakePair.sol\\\";\\r\\nimport \\\"./IPancakeRouter01.sol\\\";\\r\\nimport \\\"./IPancakeRouter02.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title BEP20Token\\r\\n * @author AmberSoft (visit https://ambersoft.llc)\\r\\n *\\r\\n * @dev Mintable BEP20 token with burning and optional functions implemented.\\r\\n * Any address with minter role can mint new tokens.\\r\\n * For full specification of ERC-20 standard see:\\r\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\r\\n */\\r\\ncontract XposeProtocol is Context, IERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address public immutable WETH;\\r\\n\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    IPancakeRouter02 public immutable pancakeswapV2Router;\\r\\n    address public immutable pancakeswapV2Pair;\\r\\n\\r\\n    // Fees\\r\\n    uint256 public _liquidityPoolFee = 50;\\r\\n    uint256 public _marketingPoolFee = 40;\\r\\n    uint256 public _burnFee = 5;\\r\\n    uint256 public _communityRewardPoolFee = 5;\\r\\n\\r\\n    // Main fee\\r\\n    uint256 public _commonFee = 5;\\r\\n    uint256 private _maxCommonFee = 5;\\r\\n    uint256 public _specialFee = 10;\\r\\n    uint256 private _maxSpecialFee = 10;\\r\\n\\r\\n    // Vote config\\r\\n    uint256 private _minAcceptedVotes = 3;\\r\\n    uint256 private _minDeclinedVotes = 3;\\r\\n\\r\\n    // Fee votes\\r\\n    uint256 public _votedCommonFee;\\r\\n    bool public _inVoteCommonFee = false;\\r\\n    mapping(address => bool) public _votesCommonFee;\\r\\n    address[] public _votedCommonFeeWallets;\\r\\n    uint256 public _currentOffsetVoteCommonFee = 0;\\r\\n\\r\\n    uint256 public _votedSpecialFee;\\r\\n    bool public _inVoteSpecialFee = false;\\r\\n    mapping(address => bool) public _votesSpecialFee;\\r\\n    address[] public _votedSpecialFeeWallets;\\r\\n    uint256 public _currentOffsetVoteSpecialFee = 0;\\r\\n\\r\\n    // Pools votes\\r\\n    address payable public _votedMarketingPoolWallet;\\r\\n    bool public _inVoteMarketingPoolWallet = false;\\r\\n    mapping(address => bool) public _votesMarketingPoolWallet;\\r\\n    address[] public _votedMarketingPoolWalletWallets;\\r\\n    uint256 public _currentOffsetVoteMarketingPoolWallet = 0;\\r\\n\\r\\n    address payable public _votedCommunityRewardPoolWallet;\\r\\n    bool public _inVoteCommunityRewardPoolWallet = false;\\r\\n    mapping(address => bool) public _votesCommunityRewardPoolWallet;\\r\\n    address[] public _votedCommunityRewardPoolWalletWallets;\\r\\n    uint256 public _currentOffsetVoteCommunityRewardPoolWallet = 0;\\r\\n\\r\\n    // Sent to pools on transaction\\r\\n    bool public _swapOnTransaction = true;\\r\\n\\r\\n    bool public _swapOnCommunity = true;\\r\\n    bool public _swapOnMarketing = true;\\r\\n    bool public _swapOnLiquidity = true;\\r\\n\\r\\n    // Trigger amount to auto swap\\r\\n    uint256 public _liquidityTriggerAmount = 5 * 10 ** 14; // = 500,000 tokens\\r\\n    uint256 public _marketingTriggerAmount = 5 * 10 ** 14; // = 500,000 tokens\\r\\n    uint256 public _communityTriggerAmount = 5 * 10 ** 14; // = 500,000 tokens\\r\\n\\r\\n    // Current amount to swap\\r\\n    uint256 public _currentLiquidityTriggerAmount = 0;\\r\\n    uint256 public _currentMarketingTriggerAmount = 0;\\r\\n    uint256 public _currentCommunityTriggerAmount = 0;\\r\\n\\r\\n    // Total amount\\r\\n    uint256 public _totalLiquidityTriggerAmount = 0;\\r\\n    uint256 public _totalMarketingTriggerAmount = 0;\\r\\n    uint256 public _totalCommunityTriggerAmount = 0;\\r\\n\\r\\n    // Multisig wallets\\r\\n    mapping(address => bool) private _multisigWallets;\\r\\n\\r\\n    // Excluded from fee\\r\\n    mapping(address => bool) private _excludedFromFee;\\r\\n\\r\\n    // Special addresses\\r\\n    mapping(address => bool) private _includedInSpecialFee;\\r\\n\\r\\n    // Pools addresses\\r\\n    address payable private _marketingPoolWallet;\\r\\n    address payable private _communityRewardPoolWallet;\\r\\n\\r\\n    // Delayed Team Reward\\r\\n    address private immutable _teamWallet;\\r\\n    uint256 public immutable _timeToReleaseFirstStep;\\r\\n    uint256 public immutable _timeToReleaseSecondStep;\\r\\n    uint256 public immutable _lockedTokensForTeam;\\r\\n    uint256 public _percentFromSupplyForTeam = 15;\\r\\n    uint256 public immutable _percentReleaseFirstStep = 60;\\r\\n    uint256 public immutable _percentReleaseSecondStep = 40;\\r\\n\\r\\n    bool inSwapAndLiquify;\\r\\n\\r\\n    modifier lockTheSwap {\\r\\n        inSwapAndLiquify = true;\\r\\n        _;\\r\\n        inSwapAndLiquify = false;\\r\\n    }\\r\\n\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 ethReceived,\\r\\n        uint256 tokensIntoLiqudity\\r\\n    );\\r\\n    \\r\\n    bool inSwapAndCommunity;\\r\\n\\r\\n    modifier lockTheSwapCommunity {\\r\\n        inSwapAndCommunity = true;\\r\\n        _;\\r\\n        inSwapAndCommunity = false;\\r\\n    }\\r\\n\\r\\n    event SwapAndCommunity(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 ethReceived\\r\\n    );\\r\\n    \\r\\n    bool inSwapAndMarketing;\\r\\n\\r\\n    modifier lockTheSwapMarketing {\\r\\n        inSwapAndMarketing = true;\\r\\n        _;\\r\\n        inSwapAndMarketing = false;\\r\\n    }\\r\\n\\r\\n    event SwapAndMarketing(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 ethReceived\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        string memory contractName,\\r\\n        string memory contractSymbol,\\r\\n        uint8 contractDecimals,\\r\\n        uint256 initialSupply,\\r\\n        address payable initialMarketingPoolWallet,\\r\\n        address payable initialCommunityRewardPoolWallet,\\r\\n        address routerAddress, // 0xD99D1c33F9fC3444f8101754aBC46c52416550D1 - test, 0x10ED43C718714eb63d5aA57B78B54704E256024E - main\\r\\n        address contractTeamWallet\\r\\n    ) public payable {\\r\\n        require(initialMarketingPoolWallet != address(0), \\\"Marketing pool wallet can't be 0\\\");\\r\\n        require(initialCommunityRewardPoolWallet != address(0), \\\"Community Reward pool wallet can't be 0\\\");\\r\\n        require(contractTeamWallet != address(0), \\\"Team wallet can't be 0\\\");\\r\\n        require(initialSupply >= 1000000000000000000, \\\"Initial supply can't be less than 1000000000000000000\\\");\\r\\n\\r\\n        _name = contractName;\\r\\n        _symbol = contractSymbol;\\r\\n        _decimals = contractDecimals;\\r\\n        _communityRewardPoolWallet = initialCommunityRewardPoolWallet;\\r\\n        _marketingPoolWallet = initialMarketingPoolWallet;\\r\\n\\r\\n        // Initiate multisig wallets @TODO change wallets\\r\\n        _multisigWallets[0xB6FA2fA21C9fdBe4C83CCa147bDe8d73439cDb62] = true;\\r\\n        _multisigWallets[0xed8004888E6A84731e8fB3E26d899b18b7EA3aE9] = true;\\r\\n        _multisigWallets[0x0E665191Bd0791Fa47644D62196e2727c9a8Ab0F] = true;\\r\\n        _multisigWallets[0xD1D9B3399840846F302Df0f904EC977b3AEbd7c6 ] = true;\\r\\n        _multisigWallets[0xc8BB3909dF983B5a9634D1C8B0c89Cc6551D84c6] = true;\\r\\n\\r\\n        IPancakeRouter02 _pancakeswapV2Router = IPancakeRouter02(routerAddress);\\r\\n        WETH = _pancakeswapV2Router.WETH();\\r\\n\\r\\n        // Create a Pancake pair for this new token\\r\\n        pancakeswapV2Pair = IPancakeFactory(_pancakeswapV2Router.factory())\\r\\n            .createPair(address(this), _pancakeswapV2Router.WETH());\\r\\n\\r\\n        // set the rest of the contract variables\\r\\n        pancakeswapV2Router = _pancakeswapV2Router;\\r\\n\\r\\n        excludeFromFee(address(this));\\r\\n        excludeFromFee(_msgSender());\\r\\n        excludeFromFee(routerAddress);\\r\\n\\r\\n        _teamWallet = contractTeamWallet;\\r\\n        _lockedTokensForTeam = (initialSupply.mul(_percentFromSupplyForTeam)).div(100);\\r\\n        _timeToReleaseFirstStep = block.timestamp + 243 days;\\r\\n        _timeToReleaseSecondStep = block.timestamp + 365 days;\\r\\n        // set tokenOwnerAddress as owner of initial supply, more tokens can be minted later\\r\\n        _mint(_msgSender(), initialSupply.sub((initialSupply.mul(_percentFromSupplyForTeam)).div(100)));\\r\\n    }\\r\\n\\r\\n    function releaseTeamFirstStep() external {\\r\\n        require(block.timestamp >= _timeToReleaseFirstStep, \\\"It's not time yet\\\");\\r\\n\\r\\n        uint256 releaseAmount = (_lockedTokensForTeam.mul(_percentReleaseFirstStep)).div(100);\\r\\n        _mint(_teamWallet, releaseAmount);\\r\\n    }\\r\\n\\r\\n    function releaseTeamSecondStep() external {\\r\\n        require(block.timestamp >= _timeToReleaseSecondStep, \\\"It's not time yet\\\");\\r\\n\\r\\n        uint256 releaseAmount = (_lockedTokensForTeam.mul(_percentReleaseSecondStep)).div(100);\\r\\n        _mint(_teamWallet, releaseAmount);\\r\\n    }\\r\\n\\r\\n    // Vote methods\\r\\n\\r\\n    // Common Fee\\r\\n    function startVoteForCommonFee(uint256 newCommonFee) external {\\r\\n        require(_multisigWallets[_msgSender()], \\\"Only multisig wallets can start vote\\\");\\r\\n        require(!_inVoteCommonFee, \\\"Vote is already started\\\");\\r\\n        require(newCommonFee <= 5, \\\"Maximum fee is 5\\\");\\r\\n\\r\\n        _inVoteCommonFee = true;\\r\\n        _votedCommonFee = newCommonFee;\\r\\n        _votesCommonFee[_msgSender()] = true;\\r\\n        _votedCommonFeeWallets.push(_msgSender());\\r\\n    }\\r\\n\\r\\n    function voteForCommonFee(bool vote) external {\\r\\n        require(_multisigWallets[_msgSender()], \\\"Only multisig wallets can voting\\\");\\r\\n        require(_inVoteCommonFee, \\\"Voting hasn't started\\\");\\r\\n\\r\\n        bool isInVote = false;\\r\\n        for (uint i = _currentOffsetVoteCommonFee; i < _votedCommonFeeWallets.length; i++) {\\r\\n            if(_votedCommonFeeWallets[i] == _msgSender()) {\\r\\n                isInVote = true;\\r\\n            }\\r\\n        }\\r\\n        require(!isInVote, \\\"You can vote only once\\\");\\r\\n\\r\\n        _votesCommonFee[_msgSender()] = vote;\\r\\n        _votedCommonFeeWallets.push(_msgSender());\\r\\n\\r\\n        uint8 currentVoteStatus = checkVotingCommonFee();\\r\\n        if(currentVoteStatus < 2) {\\r\\n            endCommonFeeVote(currentVoteStatus == 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkVotingCommonFee() internal returns (uint8) {\\r\\n        uint256 acceptedVotes = 0;\\r\\n        uint256 declinedVotes = 0;\\r\\n\\r\\n        for (uint i = _currentOffsetVoteCommonFee; i < _votedCommonFeeWallets.length; i++) {\\r\\n            address voteWallet = _votedCommonFeeWallets[i];\\r\\n            if (_votesCommonFee[voteWallet]) {\\r\\n                acceptedVotes = acceptedVotes.add(1);\\r\\n            } else {\\r\\n                declinedVotes = declinedVotes.add(1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (acceptedVotes >= _minAcceptedVotes) {\\r\\n            return 1;\\r\\n        }\\r\\n\\r\\n        if (declinedVotes >= _minDeclinedVotes) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return 2;\\r\\n    }\\r\\n\\r\\n    function endCommonFeeVote(bool decision) internal {\\r\\n        if(decision) {\\r\\n            _commonFee = _votedCommonFee;\\r\\n        }\\r\\n\\r\\n        // set to default\\r\\n        _votedCommonFee = 0;\\r\\n        _inVoteCommonFee = false;\\r\\n        for (uint i = _currentOffsetVoteCommonFee; i < _votedCommonFeeWallets.length; i++) {\\r\\n            address voteWallet = _votedCommonFeeWallets[i];\\r\\n            delete _votesCommonFee[voteWallet];\\r\\n            delete _votedCommonFeeWallets[i];\\r\\n        }\\r\\n        _currentOffsetVoteCommonFee = _votedCommonFeeWallets.length;\\r\\n    }\\r\\n\\r\\n    // Special fee\\r\\n    function startVoteForSpecialFee(uint256 newSpecialFee) external {\\r\\n        require(_multisigWallets[_msgSender()], \\\"Only multisig wallets can start vote\\\");\\r\\n        require(!_inVoteSpecialFee, \\\"Vote is already started\\\");\\r\\n        require(newSpecialFee <= 10, \\\"Maximum fee is 10\\\");\\r\\n\\r\\n        _inVoteSpecialFee = true;\\r\\n        _votedSpecialFee = newSpecialFee;\\r\\n        _votesSpecialFee[_msgSender()] = true;\\r\\n        _votedSpecialFeeWallets.push(_msgSender());\\r\\n    }\\r\\n\\r\\n    function voteForSpecialFee(bool vote) external {\\r\\n        require(_multisigWallets[_msgSender()], \\\"Only multisig wallets can voting\\\");\\r\\n        require(_inVoteSpecialFee, \\\"Voting hasn't started\\\");\\r\\n\\r\\n        bool isInVote = false;\\r\\n        for (uint i = _currentOffsetVoteSpecialFee; i < _votedSpecialFeeWallets.length; i++) {\\r\\n            if(_votedSpecialFeeWallets[i] == _msgSender()) {\\r\\n                isInVote = true;\\r\\n            }\\r\\n        }\\r\\n        require(!isInVote, \\\"You can vote only once\\\");\\r\\n\\r\\n        _votesSpecialFee[_msgSender()] = vote;\\r\\n        _votedSpecialFeeWallets.push(_msgSender());\\r\\n\\r\\n        uint8 currentVoteStatus = checkVotingSpecialFee();\\r\\n        if(currentVoteStatus < 2) {\\r\\n            endSpecialFeeVote(currentVoteStatus == 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkVotingSpecialFee() internal returns (uint8) {\\r\\n        uint256 acceptedVotes = 0;\\r\\n        uint256 declinedVotes = 0;\\r\\n\\r\\n        for (uint i = _currentOffsetVoteSpecialFee; i < _votedSpecialFeeWallets.length; i++) {\\r\\n            address voteWallet = _votedSpecialFeeWallets[i];\\r\\n            if (_votesSpecialFee[voteWallet]) {\\r\\n                acceptedVotes = acceptedVotes.add(1);\\r\\n            } else {\\r\\n                declinedVotes = declinedVotes.add(1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (acceptedVotes >= _minAcceptedVotes) {\\r\\n            return 1;\\r\\n        }\\r\\n\\r\\n        if (declinedVotes >= _minDeclinedVotes) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return 2;\\r\\n    }\\r\\n\\r\\n    function endSpecialFeeVote(bool decision) internal {\\r\\n        if(decision) {\\r\\n            _specialFee = _votedSpecialFee;\\r\\n        }\\r\\n\\r\\n        // set to default\\r\\n        _votedSpecialFee = 0;\\r\\n        _inVoteSpecialFee = false;\\r\\n        for (uint i = _currentOffsetVoteSpecialFee; i < _votedSpecialFeeWallets.length; i++) {\\r\\n            address voteWallet = _votedSpecialFeeWallets[i];\\r\\n            delete _votesSpecialFee[voteWallet];\\r\\n            delete _votedSpecialFeeWallets[i];\\r\\n        }\\r\\n        _currentOffsetVoteSpecialFee = _votedSpecialFeeWallets.length;\\r\\n    }\\r\\n    \\r\\n    // Marketing wallet\\r\\n    function startVoteForMarketingPoolWallet(address payable newMarketingPoolWallet) external {\\r\\n        require(newMarketingPoolWallet != address(0), \\\"Marketing pool wallet can't be 0\\\");\\r\\n        require(_multisigWallets[_msgSender()], \\\"Only multisig wallets can start vote\\\");\\r\\n        require(!_inVoteMarketingPoolWallet, \\\"Vote is already started\\\");\\r\\n\\r\\n        _inVoteMarketingPoolWallet = true;\\r\\n        _votedMarketingPoolWallet = newMarketingPoolWallet;\\r\\n        _votesMarketingPoolWallet[_msgSender()] = true;\\r\\n        _votedMarketingPoolWalletWallets.push(_msgSender());\\r\\n    }\\r\\n\\r\\n    function voteForMarketingPoolWallet(bool vote) external {\\r\\n        require(_multisigWallets[_msgSender()], \\\"Only multisig wallets can voting\\\");\\r\\n        require(_inVoteMarketingPoolWallet, \\\"Voting hasn't started\\\");\\r\\n\\r\\n        bool isInVote = false;\\r\\n        for (uint i = _currentOffsetVoteMarketingPoolWallet; i < _votedMarketingPoolWalletWallets.length; i++) {\\r\\n            if(_votedMarketingPoolWalletWallets[i] == _msgSender()) {\\r\\n                isInVote = true;\\r\\n            }\\r\\n        }\\r\\n        require(!isInVote, \\\"You can vote only once\\\");\\r\\n\\r\\n        _votesMarketingPoolWallet[_msgSender()] = vote;\\r\\n        _votedMarketingPoolWalletWallets.push(_msgSender());\\r\\n\\r\\n        uint8 currentVoteStatus = checkVotingMarketingPoolWallet();\\r\\n        if(currentVoteStatus < 2) {\\r\\n            endMarketingPoolWalletVote(currentVoteStatus == 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkVotingMarketingPoolWallet() internal returns (uint8) {\\r\\n        uint256 acceptedVotes = 0;\\r\\n        uint256 declinedVotes = 0;\\r\\n\\r\\n        for (uint i = _currentOffsetVoteMarketingPoolWallet; i < _votedMarketingPoolWalletWallets.length; i++) {\\r\\n            address voteWallet = _votedMarketingPoolWalletWallets[i];\\r\\n            if (_votesMarketingPoolWallet[voteWallet]) {\\r\\n                acceptedVotes = acceptedVotes.add(1);\\r\\n            } else {\\r\\n                declinedVotes = declinedVotes.add(1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (acceptedVotes >= _minAcceptedVotes) {\\r\\n            return 1;\\r\\n        }\\r\\n\\r\\n        if (declinedVotes >= _minDeclinedVotes) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return 2;\\r\\n    }\\r\\n\\r\\n    function endMarketingPoolWalletVote(bool decision) internal {\\r\\n        if(decision) {\\r\\n            _marketingPoolWallet = _votedMarketingPoolWallet;\\r\\n        }\\r\\n\\r\\n        // set to default\\r\\n        _inVoteMarketingPoolWallet = false;\\r\\n        for (uint i = _currentOffsetVoteMarketingPoolWallet; i < _votedMarketingPoolWalletWallets.length; i++) {\\r\\n            address voteWallet = _votedMarketingPoolWalletWallets[i];\\r\\n            delete _votesMarketingPoolWallet[voteWallet];\\r\\n            delete _votedMarketingPoolWalletWallets[i];\\r\\n        }\\r\\n\\r\\n        _currentOffsetVoteMarketingPoolWallet = _votedMarketingPoolWalletWallets.length;\\r\\n    }\\r\\n    \\r\\n    // Community reward wallet\\r\\n    function startVoteForCommunityRewardPoolWallet(address payable newCommunityRewardPoolWallet) external {\\r\\n        require(newCommunityRewardPoolWallet != address(0), \\\"Community reward pool wallet can't be 0\\\");\\r\\n        require(_multisigWallets[_msgSender()], \\\"Only multisig wallets can start vote\\\");\\r\\n        require(!_inVoteCommunityRewardPoolWallet, \\\"Vote is already started\\\");\\r\\n\\r\\n        _inVoteCommunityRewardPoolWallet = true;\\r\\n        _votedCommunityRewardPoolWallet = newCommunityRewardPoolWallet;\\r\\n        _votesCommunityRewardPoolWallet[_msgSender()] = true;\\r\\n        _votedCommunityRewardPoolWalletWallets.push(_msgSender());\\r\\n    }\\r\\n\\r\\n    function voteForCommunityRewardPoolWallet(bool vote) external {\\r\\n        require(_multisigWallets[_msgSender()], \\\"Only multisig wallets can voting\\\");\\r\\n        require(_inVoteCommunityRewardPoolWallet, \\\"Voting hasn't started\\\");\\r\\n\\r\\n        bool isInVote = false;\\r\\n        for (uint i = _currentOffsetVoteCommunityRewardPoolWallet; i < _votedCommunityRewardPoolWalletWallets.length; i++) {\\r\\n            if(_votedCommunityRewardPoolWalletWallets[i] == _msgSender()) {\\r\\n                isInVote = true;\\r\\n            }\\r\\n        }\\r\\n        require(!isInVote, \\\"You can vote only once\\\");\\r\\n\\r\\n        _votesCommunityRewardPoolWallet[_msgSender()] = vote;\\r\\n        _votedCommunityRewardPoolWalletWallets.push(_msgSender());\\r\\n\\r\\n        uint8 currentVoteStatus = checkVotingCommunityRewardPoolWallet();\\r\\n        if(currentVoteStatus < 2) {\\r\\n            endCommunityRewardPoolWalletVote(currentVoteStatus == 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function checkVotingCommunityRewardPoolWallet() internal returns (uint8) {\\r\\n        uint256 acceptedVotes = 0;\\r\\n        uint256 declinedVotes = 0;\\r\\n\\r\\n        for (uint i = _currentOffsetVoteCommunityRewardPoolWallet; i < _votedCommunityRewardPoolWalletWallets.length; i++) {\\r\\n            address voteWallet = _votedCommunityRewardPoolWalletWallets[i];\\r\\n            if (_votesCommunityRewardPoolWallet[voteWallet]) {\\r\\n                acceptedVotes = acceptedVotes.add(1);\\r\\n            } else {\\r\\n                declinedVotes = declinedVotes.add(1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (acceptedVotes >= _minAcceptedVotes) {\\r\\n            return 1;\\r\\n        }\\r\\n\\r\\n        if (declinedVotes >= _minDeclinedVotes) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return 2;\\r\\n    }\\r\\n\\r\\n    function endCommunityRewardPoolWalletVote(bool decision) internal {\\r\\n        if(decision) {\\r\\n            _communityRewardPoolWallet = _votedCommunityRewardPoolWallet;\\r\\n        }\\r\\n\\r\\n        // set to default\\r\\n        _inVoteCommunityRewardPoolWallet = false;\\r\\n        for (uint i = _currentOffsetVoteCommunityRewardPoolWallet; i < _votedCommunityRewardPoolWalletWallets.length; i++) {\\r\\n            address voteWallet = _votedCommunityRewardPoolWalletWallets[i];\\r\\n            delete _votesCommunityRewardPoolWallet[voteWallet];\\r\\n            delete _votedCommunityRewardPoolWalletWallets[i];\\r\\n        }\\r\\n\\r\\n        _currentOffsetVoteCommunityRewardPoolWallet = _votedCommunityRewardPoolWalletWallets.length;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n        require(sender != address(0), \\\"BEP20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"BEP20: transfer to the zero address\\\");\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"BEP20: transfer amount exceeds balance\\\");\\r\\n        uint256 totalSendAmount = amount;\\r\\n\\r\\n        // Only if address is not excluded from fee\\r\\n        if(!isExcludedFromFee(_msgSender())) {\\r\\n            uint256 feeAmount = 0;\\r\\n            if(isIncludedInSpecialFee(_msgSender())) {\\r\\n                // Special fee\\r\\n                feeAmount = (totalSendAmount.mul(_specialFee)).div(100);\\r\\n            } else {\\r\\n                // Common fee\\r\\n                feeAmount = (totalSendAmount.mul(_commonFee)).div(100);\\r\\n            }\\r\\n            uint256 liquidityPoolAmount = (feeAmount.mul(_liquidityPoolFee)).div(100);\\r\\n            uint256 marketingPoolAmount = (feeAmount.mul(_marketingPoolFee)).div(100);\\r\\n            uint256 burnAmount = (feeAmount.mul(_burnFee)).div(100);\\r\\n            uint256 communityRewardPoolAmount = (feeAmount.mul(_communityRewardPoolFee)).div(100);\\r\\n\\r\\n            totalSendAmount = totalSendAmount\\r\\n                .sub(liquidityPoolAmount)\\r\\n                .sub(marketingPoolAmount)\\r\\n                .sub(burnAmount)\\r\\n                .sub(communityRewardPoolAmount);\\r\\n\\r\\n            _balances[address(this)] = _balances[address(this)]\\r\\n                .add(liquidityPoolAmount)\\r\\n                .add(marketingPoolAmount)\\r\\n                .add(burnAmount)\\r\\n                .add(communityRewardPoolAmount);\\r\\n\\r\\n            // Burn\\r\\n            _burn(address(this), burnAmount);\\r\\n            \\r\\n            // Community Reward Pool\\r\\n            _currentCommunityTriggerAmount = _currentCommunityTriggerAmount.add(communityRewardPoolAmount);\\r\\n            _totalCommunityTriggerAmount = _totalCommunityTriggerAmount.add(communityRewardPoolAmount);\\r\\n            \\r\\n            // Marketing Pool\\r\\n            _currentMarketingTriggerAmount = _currentMarketingTriggerAmount.add(marketingPoolAmount);\\r\\n            _totalMarketingTriggerAmount = _totalMarketingTriggerAmount.add(marketingPoolAmount);\\r\\n            \\r\\n            // Liquidity Pool\\r\\n            _currentLiquidityTriggerAmount = _currentLiquidityTriggerAmount.add(liquidityPoolAmount);\\r\\n            _totalLiquidityTriggerAmount = _totalLiquidityTriggerAmount.add(liquidityPoolAmount);\\r\\n            \\r\\n            if(\\r\\n                _swapOnTransaction &&\\r\\n                sender != pancakeswapV2Pair\\r\\n            ) {\\r\\n                if(_currentCommunityTriggerAmount >= _communityTriggerAmount && !inSwapAndCommunity && _swapOnCommunity) {\\r\\n                    swapAndCommunity(_currentCommunityTriggerAmount);\\r\\n                    _currentCommunityTriggerAmount = 0;\\r\\n                }\\r\\n                \\r\\n                if(_currentMarketingTriggerAmount >= _marketingTriggerAmount && !inSwapAndMarketing && _swapOnMarketing) {\\r\\n                    swapAndMarketing(_currentMarketingTriggerAmount);\\r\\n                    _currentMarketingTriggerAmount = 0;                    \\r\\n                }\\r\\n                \\r\\n                if(_currentLiquidityTriggerAmount >= _liquidityTriggerAmount && !inSwapAndLiquify && _swapOnLiquidity) {\\r\\n                    swapAndLiquify(_currentLiquidityTriggerAmount);\\r\\n                    _currentLiquidityTriggerAmount = 0;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _balances[recipient] = _balances[recipient].add(totalSendAmount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    // to recieve ETH from pancakeswapV2Router when swaping\\r\\n    receive() external payable {}\\r\\n\\r\\n    /**\\r\\n    * Evaluates whether address is a contract and exists.\\r\\n    */\\r\\n    function isContract(address addr) view private returns (bool) {\\r\\n        uint size;\\r\\n        assembly {size := extcodesize(addr)}\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    function swapAndCommunity(uint256 amount) internal lockTheSwapCommunity {\\r\\n        // capture the contract's current ETH balance.\\r\\n        uint256 initialBalance = address(this).balance;\\r\\n\\r\\n        // swap tokens for ETH\\r\\n        swapTokensForEth(amount);\\r\\n\\r\\n        // how much ETH did we just swap into?\\r\\n        uint256 newBalance = address(this).balance.sub(initialBalance);\\r\\n\\r\\n        // Send\\r\\n        if (_communityRewardPoolWallet.send(newBalance))\\r\\n        {\\r\\n            emit SwapAndCommunity(amount, newBalance);\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            revert();\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function swapAndMarketing(uint256 amount) internal lockTheSwapMarketing {\\r\\n        // capture the contract's current ETH balance.\\r\\n        uint256 initialBalance = address(this).balance;\\r\\n\\r\\n        // swap tokens for ETH\\r\\n        swapTokensForEth(amount);\\r\\n\\r\\n        // how much ETH did we just swap into?\\r\\n        uint256 newBalance = address(this).balance.sub(initialBalance);\\r\\n\\r\\n        // Send\\r\\n        if ( _marketingPoolWallet.send(newBalance) )\\r\\n        {\\r\\n            emit SwapAndMarketing(amount, newBalance);\\r\\n        }\\r\\n        else\\r\\n        {\\r\\n            revert();\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\\r\\n        // split the contract balance into halves\\r\\n        uint256 half = contractTokenBalance.div(2);\\r\\n        //ETH\\r\\n        uint256 otherHalf = contractTokenBalance.sub(half);\\r\\n        //BNB\\r\\n\\r\\n        // capture the contract's current ETH balance.\\r\\n        // this is so that we can capture exactly the amount of ETH that the\\r\\n        // swap creates, and not make the liquidity event include any ETH that\\r\\n        // has been manually sent to the contract\\r\\n        uint256 initialBalance = address(this).balance;\\r\\n\\r\\n        // swap tokens for ETH\\r\\n        swapTokensForEth(half);\\r\\n        // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\\r\\n\\r\\n        // how much ETH did we just swap into?\\r\\n        uint256 newBalance = address(this).balance.sub(initialBalance);\\r\\n\\r\\n        // add liquidity to Pancake\\r\\n        addLiquidity(otherHalf, newBalance);\\r\\n\\r\\n        emit SwapAndLiquify(half, newBalance, otherHalf);\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) private {\\r\\n        // generate the Pancake pair path of token -> weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = pancakeswapV2Router.WETH();\\r\\n\\r\\n        _approve(address(this), address(pancakeswapV2Router), tokenAmount);\\r\\n\\r\\n        // make the swap\\r\\n        pancakeswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        // approve token transfer to cover all possible scenarios\\r\\n        _approve(address(this), address(pancakeswapV2Router), tokenAmount);\\r\\n\\r\\n        // add the liquidity\\r\\n        pancakeswapV2Router.addLiquidityETH{value : ethAmount}(\\r\\n            address(this),\\r\\n            tokenAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            owner(),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setFees(uint256 liquidityPoolFee,uint256 marketingPoolFee,uint256 burnFee,uint256 communityRewardPoolFee) public onlyOwner {\\r\\n        uint256 totalFees = liquidityPoolFee.add(marketingPoolFee).add(burnFee).add(communityRewardPoolFee);\\r\\n        require(totalFees == 100, \\\"BEP20: Sum of fees must be 100.\\\");\\r\\n\\r\\n        _liquidityPoolFee = liquidityPoolFee;\\r\\n        _marketingPoolFee = marketingPoolFee;\\r\\n        _burnFee = burnFee;\\r\\n        _communityRewardPoolFee = communityRewardPoolFee;\\r\\n    }\\r\\n\\r\\n    function setSwapOnTransaction(bool swapOnTransaction) public onlyOwner {\\r\\n        _swapOnTransaction = swapOnTransaction;\\r\\n    }\\r\\n\\r\\n    function setSwapOnValues(bool swapOnCommunity, bool swapOnMarketing, bool swapOnLiquidity) public onlyOwner {\\r\\n        _swapOnCommunity = swapOnCommunity;\\r\\n        _swapOnMarketing = swapOnMarketing;\\r\\n        _swapOnLiquidity = swapOnLiquidity;\\r\\n    }\\r\\n\\r\\n    function setTriggerAmounts(uint256 liquidityTriggerAmount, uint256 marketingTriggerAmount, uint256 communityTriggerAmount) public onlyOwner {\\r\\n        _liquidityTriggerAmount = liquidityTriggerAmount;\\r\\n        _marketingTriggerAmount = marketingTriggerAmount;\\r\\n        _communityTriggerAmount = communityTriggerAmount;\\r\\n    }\\r\\n\\r\\n    function excludeFromFee(address account) public onlyOwner {\\r\\n        _excludedFromFee[account] = true;\\r\\n    }\\r\\n\\r\\n    function includeInFee(address account) public onlyOwner {\\r\\n        _excludedFromFee[account] = false;\\r\\n    }\\r\\n\\r\\n    function isExcludedFromFee(address account) public view returns (bool) {\\r\\n        return _excludedFromFee[account];\\r\\n    }\\r\\n\\r\\n    // special fee methods\\r\\n    function includeInSpecialFee(address account) public onlyOwner {\\r\\n        _includedInSpecialFee[account] = true;\\r\\n    }\\r\\n\\r\\n    function excludeFromSpecialFee(address account) public onlyOwner {\\r\\n        _includedInSpecialFee[account] = false;\\r\\n    }\\r\\n\\r\\n    function isIncludedInSpecialFee(address account) public view returns (bool) {\\r\\n        return _includedInSpecialFee[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {BEP20} uses, unless {_setupDecimals} is\\r\\n     * called.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IBEP20-balanceOf} and {IBEP20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IBEP20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IBEP20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IBEP20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IBEP20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IBEP20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IBEP20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {BEP20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"BEP20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IBEP20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IBEP20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"BEP20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"BEP20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"BEP20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"BEP20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"BEP20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\r\\n     *\\r\\n     * WARNING: This function should only be called from the constructor. Most\\r\\n     * applications that interact with token contracts will not expect\\r\\n     * {decimals} to ever change, and may work incorrectly if it does.\\r\\n     */\\r\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"contractSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"contractDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"initialMarketingPoolWallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"initialCommunityRewardPoolWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractTeamWallet\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"}],\"name\":\"SwapAndCommunity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"}],\"name\":\"SwapAndMarketing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_commonFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_communityRewardPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_communityTriggerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_currentCommunityTriggerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_currentLiquidityTriggerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_currentMarketingTriggerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_currentOffsetVoteCommonFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_currentOffsetVoteCommunityRewardPoolWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_currentOffsetVoteMarketingPoolWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_currentOffsetVoteSpecialFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inVoteCommonFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inVoteCommunityRewardPoolWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inVoteMarketingPoolWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inVoteSpecialFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityTriggerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lockedTokensForTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingTriggerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_percentFromSupplyForTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_percentReleaseFirstStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_percentReleaseSecondStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_specialFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapOnCommunity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapOnLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapOnMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapOnTransaction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_timeToReleaseFirstStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_timeToReleaseSecondStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalCommunityTriggerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalLiquidityTriggerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalMarketingTriggerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_votedCommonFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_votedCommonFeeWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_votedCommunityRewardPoolWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_votedCommunityRewardPoolWalletWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_votedMarketingPoolWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_votedMarketingPoolWalletWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_votedSpecialFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_votedSpecialFeeWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_votesCommonFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_votesCommunityRewardPoolWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_votesMarketingPoolWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_votesSpecialFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromSpecialFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInSpecialFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isIncludedInSpecialFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapV2Router\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseTeamFirstStep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseTeamSecondStep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityPoolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingPoolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"communityRewardPoolFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"swapOnTransaction\",\"type\":\"bool\"}],\"name\":\"setSwapOnTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"swapOnCommunity\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapOnMarketing\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"swapOnLiquidity\",\"type\":\"bool\"}],\"name\":\"setSwapOnValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityTriggerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingTriggerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"communityTriggerAmount\",\"type\":\"uint256\"}],\"name\":\"setTriggerAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCommonFee\",\"type\":\"uint256\"}],\"name\":\"startVoteForCommonFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newCommunityRewardPoolWallet\",\"type\":\"address\"}],\"name\":\"startVoteForCommunityRewardPoolWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newMarketingPoolWallet\",\"type\":\"address\"}],\"name\":\"startVoteForMarketingPoolWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSpecialFee\",\"type\":\"uint256\"}],\"name\":\"startVoteForSpecialFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"}],\"name\":\"voteForCommonFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"}],\"name\":\"voteForCommunityRewardPoolWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"}],\"name\":\"voteForMarketingPoolWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"vote\",\"type\":\"bool\"}],\"name\":\"voteForSpecialFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "XposeProtocol", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000008d5f36da7344a4000000000000000000000000008b991b7b55bde2f96f239bc1704bbb735b42c4af00000000000000000000000087eb865bbc69645d81a5f99f8fbc081fab5cc8e300000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000b13121ec52f63798664b904473e98b39004eb184000000000000000000000000000000000000000000000000000000000000000e58706f73652050726f746f636f6c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025850000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "byzantium", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}