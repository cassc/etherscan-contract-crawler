{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n  \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n   \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n     function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\nlibrary EnumerableSet {\r\n   \r\n    struct Set {\r\n        bytes32[] _values;\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        \r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            \r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n    \r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            set._values.pop();\r\n\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    \r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    \r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   \r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    \r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    \r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n   \r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   \r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    \r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n   \r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n   \r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   \r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    \r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    \r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    \r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    \r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   \r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\n\r\ncontract TokenReceiver{\r\n    constructor (address token) public{\r\n        IERC20(token).approve(msg.sender,10 ** 12 * 10**18);\r\n    }\r\n}\r\n\r\ncontract CSJToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n\r\n    mapping(address => bool) private _updated;\r\n   \r\n    uint8 private _decimals = 9;\r\n    uint256 private _tTotal = 2600000 * 10 ** 9;\r\n\r\n    string private _name = \"CSJ\";\r\n    string private _symbol = \"CSJ\";\r\n    \r\n    uint256 public _buyLPFee = 30;\r\n    uint256 public _buyBurnFee = 20;\r\n    uint256 public _buyMarketFee = 10;\r\n    address public buyMarketAddress;\r\n \r\n    uint256 public _sellBurnFee = 20;\r\n    uint256 public _sellMarketFee = 10;\r\n    address public sellMarketAddress;\r\n    uint256 public _sellLPFee = 30;\r\n\r\n    uint256 public _shareFee = 20;\r\n    uint[] internal shareConfig = [15,5];\r\n\r\n    uint256 public totalBuyFee = 80;\r\n    uint256 public totalSellFee = 80;\r\n\r\n    uint public depreciateFee = 280;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n\r\n    mapping(address => bool) public ammPairs;\r\n\r\n    bool inSwapAndLiquify;\r\n    \r\n    IERC20 public uniswapV2Pair;\r\n    address public usdt;    \r\n\r\n    address public holder;\r\n    address public tokenReceiver;\r\n\r\n    uint public lPAmount;\r\n    uint public buyMkAmount;\r\n    uint public sellMkAmount;\r\n    uint public recommeCondition = 0;\r\n\r\n    uint public mkTxAmount = 158 * 10 ** 9;\r\n    uint public lpTxAmount = 1000 * 10 ** 9;\r\n    uint public maxTxAmount = 1 * 10**9;\r\n\r\n    uint public addPriceTokenAmount = 1e3;\r\n\r\n    address constant public rootAddress = address(0x000000000000000000000000000000000000dEaD);\r\n    \r\n    mapping (address => address) public _recommerMapping;\r\n\r\n    uint256 currentIndex;\r\n    uint256 distributorGas = 500000;\r\n    uint256 public minPeriod = 600;\r\n    uint256 public LPFeefenhong;\r\n\r\n    address private fromAddress;\r\n    address private toAddress;\r\n\r\n   EnumerableSet.AddressSet lpProviders;\r\n\r\n   struct TimeValue{\r\n       uint[] times;\r\n       mapping(uint => uint) prices;\r\n   }\r\n\r\n   TimeValue internal timeValues;\r\n\r\n   bool public checkLiquidityTx = true;\r\n   bool public depreciateLimit = true;\r\n    \r\n    constructor (\r\n        address _route,\r\n        address _usdt,\r\n        address _holder,\r\n        address _buyMk,\r\n        address _sellMk) public {\r\n        \r\n         usdt = _usdt;\r\n         holder = _holder;\r\n         buyMarketAddress = _buyMk;\r\n         sellMarketAddress = _sellMk;\r\n\r\n        _recommerMapping[rootAddress] = address(0xdeaddead);\r\n        _recommerMapping[holder] = rootAddress;\r\n       \r\n        _tOwned[holder] = _tTotal;\r\n        \r\n        _isExcludedFromFee[_holder] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_route);\r\n        uniswapV2Router = _uniswapV2Router;\r\n         \r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), usdt);\r\n        \r\n        uniswapV2Pair = IERC20(_uniswapV2Pair);\r\n        ammPairs[_uniswapV2Pair] = true;\r\n        tokenReceiver = address(new TokenReceiver(address(usdt)));\r\n        _owner = msg.sender;\r\n\r\n        LPFeefenhong = block.timestamp;\r\n        emit Transfer(address(0), _holder, _tTotal);\r\n    }\r\n\r\n    function _addTimeValue(uint time,uint value)internal{\r\n        uint[] storage times = timeValues.times;\r\n        uint len = times.length;\r\n        if( len == 0 || time != times[len -1]){\r\n            times.push(time);\r\n        }\r\n        timeValues.prices[time] = value;\r\n    }\r\n\r\n    function _getMatchValue(uint time)internal view returns(uint){\r\n        uint[] storage times = timeValues.times;\r\n        uint len = times.length;\r\n        if( len == 0) return 0;\r\n\r\n        for( (uint i,uint k) = (len,0); i > 0 && k < 25; (i--,k++)){\r\n\r\n            if( times[i -1] <= time ){\r\n                return timeValues.prices[times[i -1]];\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getPrices()external view returns(uint[] memory _times,uint[] memory _prices){\r\n        uint[] storage times = timeValues.times;\r\n\r\n        uint len = times.length;\r\n\r\n        uint size = len;\r\n        if( len > 24) size = 24;\r\n\r\n        _times = new uint[](size);\r\n        _prices = new uint[](size);\r\n\r\n        for( (uint i,uint k) = (len,0); i > 0 && k < size; (i--,k++)){\r\n            _times[k] = times[i-1];\r\n            _prices[k] = timeValues.prices[times[i-1]];\r\n        }\r\n\r\n    }\r\n\r\n    function setSwitch(bool clt,bool dl)external onlyOwner{\r\n        checkLiquidityTx = clt;\r\n        depreciateLimit = dl;\r\n    }\r\n\r\n    function setAmmPair(address pair,bool hasPair)external onlyOwner{\r\n        ammPairs[pair] = hasPair;\r\n    }\r\n\r\n    function setTxAmount(uint _mk,uint _lp,uint _tx)external onlyOwner{\r\n        mkTxAmount = _mk;\r\n        lpTxAmount = _lp;\r\n        maxTxAmount = _tx;\r\n    }\r\n\r\n    function setTokenAmount(uint apta,uint rc)external onlyOwner{\r\n        addPriceTokenAmount = apta;\r\n        recommeCondition = rc;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    \r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n     function isExcludedFromFee(address account) public view returns(bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n    \r\n    receive() external payable {}\r\n\r\n    function _take(uint256 tValue,address from,address to) private {\r\n        _tOwned[to] = _tOwned[to].add(tValue);\r\n        emit Transfer(from, to, tValue);\r\n    }\r\n    \r\n    function getForefathers(address owner,uint num) internal view returns(address[] memory fathers){\r\n        fathers = new address[](num);\r\n        address parent  = owner;\r\n        for( uint i = 0; i < num; i++){\r\n            parent = _recommerMapping[parent];\r\n            if( parent == rootAddress || parent == address(0) ) break;\r\n            fathers[i] = parent;\r\n        }\r\n    }\r\n\r\n    function _takeShare(uint tShare,address from,address user) private {\r\n\r\n        address[] memory farthers = getForefathers(user,shareConfig.length);\r\n\r\n        uint len = farthers.length;\r\n\r\n        uint sended = 0;\r\n        for( uint i = 0; i < len; i++ ){\r\n            address parent = farthers[i];\r\n            if( parent == address(0)) break;\r\n            uint tv = tShare * shareConfig[i] / _shareFee;\r\n            _tOwned[parent] = _tOwned[parent].add(tv);\r\n            emit Transfer(from, parent, tv);\r\n            sended += tv;\r\n        }  \r\n        \r\n        if( tShare > sended && tShare - sended > 10000 ){\r\n            _take(tShare - sended,from,address(0));\r\n        }\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function addRelationEx(address recommer,address user) internal {\r\n        if( \r\n            recommer != user \r\n            && _recommerMapping[user] == address(0x0) \r\n            && _recommerMapping[recommer] != address(0x0) ){\r\n                _recommerMapping[user] = recommer;\r\n        }       \r\n    }\r\n\r\n    struct Param{\r\n        bool takeFee;\r\n        bool isBuy;\r\n        bool isDepreciate;\r\n        uint tTransferAmount;\r\n        uint tLP;\r\n        uint tBuyMk;\r\n        uint tSellMk;\r\n        uint tBurn;\r\n        uint tShare;\r\n        address user;\r\n    }\r\n\r\n     function _initParam(uint256 tAmount,Param memory param) private view  {\r\n        uint tFee = 0;\r\n        if( param.isBuy){\r\n            param.tLP = tAmount * _buyLPFee / 1000;\r\n            param.tBuyMk = tAmount * _buyMarketFee / 1000;\r\n            param.tBurn = tAmount * _buyBurnFee / 1000;\r\n            param.tShare = tAmount * _shareFee / 1000;\r\n            tFee = tAmount * totalBuyFee / 1000;\r\n        }else{\r\n            param.tLP = tAmount * _sellLPFee / 1000;\r\n            param.tSellMk = tAmount * _sellMarketFee / 1000;\r\n            param.tBurn = tAmount * _sellBurnFee / 1000;\r\n            param.tShare = tAmount * _shareFee / 1000;\r\n            tFee = tAmount * totalSellFee / 1000;\r\n            if( param.isDepreciate){\r\n                param.tBurn += tAmount * depreciateFee / 1000;\r\n                tFee += tAmount * depreciateFee / 1000;\r\n            }\r\n            \r\n        }\r\n        param.tTransferAmount = tAmount.sub(tFee);\r\n    }\r\n\r\n    function _takeFee(Param memory param,address from)private {\r\n        if( param.tLP > 0 ){\r\n            _take(param.tLP, from, address(this));\r\n            lPAmount += param.tLP;\r\n        }\r\n        if( param.tBuyMk > 0 ){\r\n            _take(param.tBuyMk, from, address(this));\r\n            buyMkAmount += param.tBuyMk;\r\n        }\r\n\r\n        if( param.tSellMk > 0 ){\r\n            _take(param.tSellMk, from, address(this));\r\n            sellMkAmount += param.tSellMk;\r\n        }\r\n        if( param.tBurn > 0 ){\r\n            _take(param.tBurn, from, address(0));\r\n        }\r\n        if( param.tShare > 0 ){\r\n             _takeShare(param.tShare,from,param.user);\r\n        }\r\n    }\r\n\r\n    function _isLiquidity(address from,address to)internal view returns(bool isAdd,bool isDel){\r\n\r\n        address token0 = IUniswapV2Pair(address(uniswapV2Pair)).token0();\r\n        address token1 = IUniswapV2Pair(address(uniswapV2Pair)).token0();\r\n        (uint r0,uint r1,) = IUniswapV2Pair(address(uniswapV2Pair)).getReserves();\r\n        uint bal1 = IERC20(token1).balanceOf(address(uniswapV2Pair));\r\n        uint bal0 = IERC20(token0).balanceOf(address(uniswapV2Pair));\r\n        if( ammPairs[to] ){\r\n           \r\n            if( token0 == address(this) ){\r\n                if( bal1 > r1){\r\n                    uint change1 = bal1 - r1;\r\n                    isAdd = change1 > addPriceTokenAmount;\r\n                }\r\n            }else{\r\n                if( bal0 > r0){\r\n                    uint change0 = bal0 - r0;\r\n                    isAdd = change0 > addPriceTokenAmount;\r\n                }\r\n            }\r\n        }\r\n\r\n        if( ammPairs[from] ){\r\n            if( token0 == address(this) ){\r\n                if( bal1 < r1 && r1 > 0){\r\n                    uint change1 = r1 - bal1;\r\n                    isDel = change1 > 0;\r\n                }\r\n            }else{\r\n                if( bal0 < r0 && r0 > 0){\r\n                    uint change0 = r0 - bal0;\r\n                    isDel = change0 > 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function _getCurrentPrice()internal view returns(uint){\r\n        address t0 = IUniswapV2Pair(address(uniswapV2Pair)).token0();\r\n        (uint r0,uint r1,) = IUniswapV2Pair(address(uniswapV2Pair)).getReserves();\r\n        \r\n        if( r0 > 0 && r1 > 0 ){\r\n             if( t0 == address(this)){\r\n                return r1 * 10 ** 18 / r0;\r\n            }else{\r\n                return r0 * 10 ** 18 / r1;\r\n            }   \r\n        }\r\n    }\r\n\r\n    function _depreciateExceedLimit(uint price)internal view returns(bool){\r\n        uint time = _getCurrentTime() / 3600 * 3600;\r\n\r\n        uint priceOf24HourBefore = _getMatchValue( time - 24 * 3600);\r\n\r\n        if( priceOf24HourBefore > 0 ){\r\n            return price < priceOf24HourBefore * 70 / 100;\r\n        }\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if( \r\n            !_isContract(to) \r\n            && _recommerMapping[to] == address(0) \r\n            && amount >= recommeCondition){\r\n            \r\n            if( ammPairs[from]  ){\r\n                addRelationEx(holder,to);\r\n            }else{\r\n                addRelationEx(from,to);\r\n            }\r\n        }\r\n\r\n        bool hasLiquidity = uniswapV2Pair.totalSupply() > 1000;\r\n\r\n        bool isAddLiquidity;\r\n        bool isDelLiquidity;\r\n        if( checkLiquidityTx ){\r\n            ( isAddLiquidity, isDelLiquidity) = _isLiquidity(from,to);\r\n        }\r\n\r\n        uint price = 0;\r\n        if( hasLiquidity ){\r\n            uint time = _getCurrentTime() / 3600 * 3600;\r\n            price = _getCurrentPrice();\r\n            _addTimeValue(time, price);\r\n        }\r\n       \r\n        Param memory param;\r\n\r\n        param.tTransferAmount = amount;\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        \r\n        if( \r\n            contractTokenBalance >= maxTxAmount \r\n            && !inSwapAndLiquify \r\n            && !isAddLiquidity\r\n            && !ammPairs[from] \r\n            && hasLiquidity ){\r\n\r\n            inSwapAndLiquify = true;\r\n            uint v = buyMkAmount;\r\n            if( v >= mkTxAmount && v <= balanceOf(address(this))){\r\n                buyMkAmount = 0;\r\n                swapAndMarket(v,buyMarketAddress);\r\n            }  \r\n\r\n            v = sellMkAmount;\r\n            if( v >= mkTxAmount && v <= balanceOf(address(this))){\r\n                sellMkAmount = 0;\r\n                swapAndMarket(v,sellMarketAddress);\r\n            }  \r\n\r\n            inSwapAndLiquify = false;\r\n        }\r\n\r\n        bool takeFee = false;\r\n\r\n        if( ammPairs[from] && !_isExcludedFromFee[to] && !isDelLiquidity ){\r\n            takeFee = true;\r\n            param.isBuy = true;\r\n            param.user = to;\r\n        }\r\n\r\n        if( ammPairs[to] && !_isExcludedFromFee[from] && !isAddLiquidity){\r\n            takeFee = true;\r\n            param.user = from;\r\n\r\n            if( depreciateLimit && price > 0 && _depreciateExceedLimit(price) ){\r\n                param.isDepreciate = true;\r\n            }\r\n        }\r\n\r\n        param.takeFee = takeFee;\r\n        if( takeFee ){\r\n            _initParam(amount,param);\r\n        }\r\n        \r\n        _tokenTransfer(from,to,amount,param);\r\n\r\n        if (fromAddress == address(0)) fromAddress = from;\r\n        if (toAddress == address(0)) toAddress = to;\r\n        if ( !ammPairs[fromAddress] ) setShare(fromAddress);\r\n        if ( !ammPairs[toAddress] ) setShare(toAddress);\r\n        fromAddress = from;\r\n        toAddress = to;\r\n\r\n        if (\r\n            from != address(this) \r\n            && LPFeefenhong.add(minPeriod) <= block.timestamp \r\n            && lPAmount >= lpTxAmount\r\n            && lPAmount <= balanceOf(address(this))\r\n            && hasLiquidity ) {\r\n\r\n            process(distributorGas);\r\n            LPFeefenhong = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function swapAndMarket(uint256 tokenAmount,address to) private  {\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            to,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount,Param memory param) private {\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(param.tTransferAmount);\r\n         emit Transfer(sender, recipient, param.tTransferAmount);\r\n        if(param.takeFee){\r\n            _takeFee(param,sender);\r\n        }\r\n    }\r\n\r\n    function donateDust(address addr, uint256 amount) external onlyOwner {\r\n        TransferHelper.safeTransfer(addr, _msgSender(), amount);\r\n    }\r\n\r\n    function donateEthDust(uint256 amount) external onlyOwner {\r\n        TransferHelper.safeTransferETH(_msgSender(), amount);\r\n    }\r\n\r\n     function _isContract(address a) internal view returns(bool){\r\n        uint256 size;\r\n        assembly {size := extcodesize(a)}\r\n        return size > 0;\r\n    }\r\n    \r\n     function process(uint256 gas) private {\r\n        uint256 shareholderCount = lpProviders.length();\r\n\r\n        if (shareholderCount == 0) return;\r\n\r\n        uint256 nowbanance = lPAmount;\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n\r\n        uint ts = uniswapV2Pair.totalSupply();\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n\r\n            uint256 amount = nowbanance.mul(uniswapV2Pair.balanceOf(lpProviders.at(currentIndex))).div(ts);\r\n\r\n            if (balanceOf(address(this)) < amount || lPAmount < amount ) return;\r\n\r\n            if (amount > 1 * 10 ** 6) {\r\n                distributeDividend(lpProviders.at(currentIndex), amount);   \r\n            }\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function distributeDividend(address shareholder, uint256 amount) internal {\r\n        lPAmount = lPAmount.sub(amount);\r\n        _tOwned[address(this)] = _tOwned[address(this)].sub(amount);\r\n        _tOwned[shareholder] = _tOwned[shareholder].add(amount);\r\n        emit Transfer(address(this), shareholder, amount);\r\n    }\r\n\r\n    function setShare(address shareholder) private {\r\n        if (_updated[shareholder]) {\r\n            if (uniswapV2Pair.balanceOf(shareholder) == 0) quitShare(shareholder);\r\n            return;\r\n        }\r\n        if (uniswapV2Pair.balanceOf(shareholder) == 0) return;\r\n        lpProviders.add(shareholder);\r\n        _updated[shareholder] = true;\r\n    }\r\n\r\n    function quitShare(address shareholder) private {\r\n        lpProviders.remove(shareholder);\r\n        _updated[shareholder] = false;\r\n    }\r\n\r\n    function _getCurrentTime()internal view returns(uint){\r\n        return block.timestamp;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_route\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyMk\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sellMk\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LPFeefenhong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMarketFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_recommerMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_shareFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addPriceTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ammPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMkAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkLiquidityTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depreciateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depreciateLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donateDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donateEthDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_times\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lPAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mkTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recommeCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMkAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasPair\",\"type\":\"bool\"}],\"name\":\"setAmmPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"clt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"dl\",\"type\":\"bool\"}],\"name\":\"setSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"apta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rc\",\"type\":\"uint256\"}],\"name\":\"setTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tx\",\"type\":\"uint256\"}],\"name\":\"setTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CSJToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000d108bebf9bdca87d94167a008eae430363a7a681000000000000000000000000134819540a0a5819b24fcae316a4cc3ab2f75f700000000000000000000000004b4faac8b492fc15ac0511bcb41ae500af8ebc0d", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5ce2051b12dc8829953e89990260e8ed2c65ea38de6a496c9d3a362849251e08"}