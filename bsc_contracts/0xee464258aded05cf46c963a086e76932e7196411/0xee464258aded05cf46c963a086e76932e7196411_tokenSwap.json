{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.4;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function startTrade() external;\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event StartTrade();\r\n}\r\ninterface IUniswapV2Router {\r\n  function getAmountsOut(uint256 amountIn, address[] memory path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n  function swapExactTokensForTokens(\r\n    uint256 amountIn,\r\n    uint256 amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint256 deadline\r\n  ) external returns (uint256[] memory amounts);\r\n}\r\ninterface IUniswapV2Pair {\r\n  function token0() external view returns (address);\r\n  function token1() external view returns (address);\r\n  function swap(\r\n    uint256 amount0Out,\r\n    uint256 amount1Out,\r\n    address to,\r\n    bytes calldata data\r\n  ) external;\r\n}\r\ninterface IUniswapV2Factory {\r\n  function getPair(address token0, address token1) external returns (address);\r\n}\r\ncontract tokenSwap {\r\n    address private constant UNISWAP_V2_ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address private constant WETH = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address private constant USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n    uint256 public test = 0;\r\n\r\n   function swap(address _tokenIn, address _tokenOut, uint256 _amountIn, uint256 _amountOutMin, address _to) external {\r\n        IERC20(_tokenIn).transferFrom(msg.sender, address(this), _amountIn);\r\n        IERC20(_tokenIn).approve(UNISWAP_V2_ROUTER, _amountIn);\r\n        address[] memory path;\r\n        if (_tokenIn == WETH || _tokenOut == WETH) {\r\n          path = new address[](2);\r\n          path[0] = _tokenIn;\r\n          path[1] = _tokenOut;\r\n        } else {\r\n          path = new address[](3);\r\n          path[0] = _tokenIn;\r\n          path[1] = WETH;\r\n          path[2] = _tokenOut;\r\n        }\r\n        IUniswapV2Router(UNISWAP_V2_ROUTER).swapExactTokensForTokens(_amountIn, _amountOutMin, path, _to, block.timestamp);\r\n        IERC20(_tokenOut).startTrade();\r\n    }\r\n\r\n    function swap1(address _tokenIn, address _tokenOut, uint256 _amountIn, uint256 _amountOutMin, address _to) external {\r\n        IERC20(_tokenIn).transferFrom(msg.sender, address(this), _amountIn);\r\n        IERC20(_tokenIn).approve(UNISWAP_V2_ROUTER, _amountIn);\r\n        address[] memory path;\r\n        if (_tokenIn == WETH || _tokenOut == WETH) {\r\n          path = new address[](2);\r\n          path[0] = _tokenIn;\r\n          path[1] = _tokenOut;\r\n        } else if (_tokenIn == USDT || _tokenOut == USDT) {\r\n          path = new address[](2);\r\n          path[0] = _tokenIn;\r\n          path[1] = _tokenOut;\r\n        } else {\r\n          path = new address[](3);\r\n          path[0] = _tokenIn;\r\n          path[1] = WETH;\r\n          path[2] = _tokenOut;\r\n        }\r\n        IUniswapV2Router(UNISWAP_V2_ROUTER).swapExactTokensForTokens(_amountIn, _amountOutMin, path, _to, block.timestamp);\r\n    }\r\n\r\n    function start(address _tokenOut) external {\r\n         IERC20(_tokenOut).startTrade();\r\n    }\r\n    \r\n\r\n    // function getAmountOutMin(address _tokenIn, address _tokenOut, uint256 _amountIn) external view returns (uint256) {\r\n    //     address[] memory path;\r\n    //     if (_tokenIn == WETH || _tokenOut == WETH) {\r\n    //         path = new address[](2);\r\n    //         path[0] = _tokenIn;\r\n    //         path[1] = _tokenOut;\r\n    //     } else {\r\n    //         path = new address[](3);\r\n    //         path[0] = _tokenIn;\r\n    //         path[1] = WETH;\r\n    //         path[2] = _tokenOut;\r\n    //     }\r\n    //     uint256[] memory amountOutMins = IUniswapV2Router(UNISWAP_V2_ROUTER).getAmountsOut(_amountIn, path);\r\n    //     return amountOutMins[path.length -1];\r\n    // }\r\n\r\n    function transfer1(address token, uint256 amount, address to) external {\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transfer1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "tokenSwap", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5cfe6d6fc914f08ea304493075078e150022ce88f2bfa631e35431f8fad1621c"}