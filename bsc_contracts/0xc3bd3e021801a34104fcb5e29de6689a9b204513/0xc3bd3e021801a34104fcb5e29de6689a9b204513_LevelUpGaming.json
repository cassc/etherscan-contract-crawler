{"SourceCode": "/**\r\n\r\n\r\n\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2557\u2591\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\r\n\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\r\n\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u255a\u2588\u2588\u2557\u2591\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\r\n\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2591\u255a\u2588\u2588\u2588\u2588\u2554\u255d\u2591\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2551\u2591\u2591\u2591\u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u255d\u2591\r\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u255a\u2588\u2588\u2554\u255d\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2591\u2591\u2591\u2591\u2591\r\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u255d\u2591\u2591\u2591\u2591\u2591\r\n\r\n\r\n@title:             LevelUp ($LVLUP) Gaming Token\r\n@website:           www.level-up.game\r\n@1st game:          www.pacatto.cc\r\n\r\nSocials:\r\n@Global Telegram:   https://t.me/levelup_games\r\n@Chinese Telegram:  https://t.me/LevelUP_CN\r\n@Arabic Telegram:   https://t.me/LevelUP_Arabic\r\n@Twitter:           https://twitter.com/LevelUpBSC\r\n\r\n@description:       LevelUp is a Blockchain Gaming Platform aiming to provide game\r\n                    developers with the capabilities to launch their own P2E blockchain\r\n                    games at ease. No solidity coding is required, simply navigate through\r\n                    our platform and customize your own Tokenomics with just a few clicks.\r\n\r\n                    Players will get access to a library\r\n                    of games powered by both LevelUp\r\n                    and our vetted game developing partnerships.\r\n\r\n                    Play your choice of games and get\r\n                    incentivized with $LVLUP earnings!\r\n\r\n*/\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n// SafeMath library\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n//IBEP20 interface\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// abstract contract\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n    mapping (address => bool) internal authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n    }\r\n\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        authorizations[adr] = true;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\n\r\n// IDEXFactory interface\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n\r\n// IDEXRouter interface\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// prize pool contract\r\n\r\ncontract LevelUpPrizePool {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address public tokenAddress;\r\n    uint256 public maxDailyClaimAmount = 0;\r\n    uint256 claimLimit = 50;\r\n    uint256 minClaimLimit = 20;\r\n    uint256 blockTimestamp;\r\n    uint256 public claimCooldownTimerInterval = 86400; // 24hrs\r\n\r\n    mapping (address => uint) private claimCooldownTimer;\r\n\r\n    address public main;\r\n    IBEP20 public LevelUp = IBEP20(main);\r\n\r\n    mapping (address => bool) internal authorized;\r\n    bool initialized;\r\n    modifier initialization() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == tokenAddress); _;\r\n    }\r\n    modifier auth() {\r\n        require(isAuth(msg.sender), \"!AUTHORIZED\"); _;\r\n    }\r\n\r\n    function authorize(address adr) public onlyToken {\r\n        authorized[adr] = true;\r\n    }\r\n\r\n    function isAuth(address adr) public view returns (bool) {\r\n        return authorized[adr];\r\n    }\r\n\r\n    constructor (address payable _main) {\r\n        main = _main;\r\n        tokenAddress = msg.sender;\r\n    }\r\n    function claim(address caller, uint256 amount) internal {\r\n\r\n        LevelUp.approve(address(this),amount);\r\n        LevelUp.transfer(caller, amount);\r\n\r\n    }\r\n    function claimReward(address caller, uint256 amount, uint256 heldTokens, uint256 id, bytes32[] calldata merkleProof) external onlyToken{\r\n        require(id > 0);\r\n        uint256 rewardLimit = heldTokens.mul(claimLimit).div(1000);\r\n        require (amount <= rewardLimit);\r\n\r\n        require (amount <= maxDailyClaimAmount);\r\n\r\n\r\n        claim(caller, amount);\r\n        claimCooldownTimer[caller] = block.timestamp + claimCooldownTimerInterval;\r\n\r\n    }\r\n\r\n    function claimTransfer(address caller, uint256 amount) external auth{\r\n        claim(caller, amount);\r\n    }\r\n\r\n    function newCoin(IBEP20 coin) public onlyToken{\r\n        LevelUp = coin;\r\n    }\r\n\r\n    function setmaxDailyClaimAmount(uint256 amount) external onlyToken {\r\n        maxDailyClaimAmount = amount;\r\n    }\r\n\r\n    function setClaimLimit(uint256 percentage) external onlyToken {\r\n        if(percentage < minClaimLimit) {\r\n            claimLimit = minClaimLimit;\r\n        }\r\n        else {\r\n            claimLimit = percentage;\r\n        }\r\n    }\r\n\r\n    function getClaimLimit() public view returns (uint256) {\r\n        return claimLimit;\r\n    }\r\n\r\n    function getmaxDaiyClaimLimit() public view returns (uint256) {\r\n        return maxDailyClaimAmount;\r\n    }\r\n\r\n    function getClaimCooldownTimer(address player) public view returns (uint256) {\r\n        return claimCooldownTimer[player];\r\n    }\r\n\r\n    function setClaimCooldownTimer(address player) external onlyToken {\r\n        claimCooldownTimer[player] = block.timestamp + claimCooldownTimerInterval;\r\n    }\r\n\r\n    function checkClaimCooldownTimer(address player) public view returns (uint256, bool){\r\n        return (claimCooldownTimer[player], (claimCooldownTimer[player] > block.timestamp));\r\n    }\r\n    \r\n    \r\n\r\n}\r\n\r\n\r\ncontract LevelUpGaming is IBEP20, Auth {\r\n    using SafeMath for uint256;\r\n\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n\r\n    address public prizePoolHolder;\r\n\r\n    string constant _name = \"LevelUp Gaming\";\r\n    string constant _symbol = \"LVLUP\";\r\n    uint8 constant _decimals = 9;\r\n\r\n    uint256 _totalSupply = 200 * 10**6 * (10 ** _decimals); // 200m total supply\r\n    uint256 public _maxTxAmount = _totalSupply.mul(5).div(1000); // 1m max transaction amount on sells\r\n    uint256 public _maxWalletToken = _totalSupply.mul(1).div(100); // max wallet size 2m\r\n\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    mapping (address => bool) isCooldownExempt;\r\n    mapping (address => bool) isTxLimitExempt;\r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) _isCheater;\r\n\r\n    uint256 public liquidityFee             = 2;\r\n    uint256 public developerFee             = 4;\r\n    uint256 public rewardsFee               = 8;\r\n    uint256 public rewardsFeeSell           = 11;\r\n    uint256 public rewardsFeeCheater        = 50;\r\n    uint256 public liquidityFeeCheater      = 9;\r\n    uint256 public developerFeeFeeCheater   = 25;\r\n\r\n    uint256 public totalFee         = 14;\r\n    uint256 public totalFeeCheater  = 85;\r\n\r\n    uint256 feeDenominator          = 100;\r\n    uint256 public sellMulti = 1000;\r\n\r\n    address public autoLiquidityReceiver;\r\n    address public developerFeeReceiver;\r\n\r\n\r\n    bool public tradingIsEnabled = false;\r\n\r\n    uint256 targetLiquidity = 20;\r\n    uint256 targetLiquidityDenominator = 100;\r\n\r\n    event TradingIsEnabled(bool enabled);\r\n    event UpdateLevelUpPrizePool(address indexed newAddress, address indexed oldAddress);\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    LevelUpPrizePool prizePoolWallet;\r\n\r\n    bool public swapEnabled = true;\r\n    uint256 public swapThreshold = _totalSupply * 10 / 10000; // 0.01% of supply\r\n    uint256 swapPercent = 100;\r\n    bool inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor () Auth(msg.sender) {\r\n        //testnet\r\n        //router = IDEXRouter(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3);\r\n        // mainnet\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n\r\n        pair = IDEXFactory(router.factory()).createPair(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c, address(this));\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n\r\n        prizePoolWallet = new LevelUpPrizePool(payable(address(this)));\r\n\r\n        isFeeExempt[msg.sender] = true;\r\n        isTxLimitExempt[msg.sender] = true;\r\n\r\n        autoLiquidityReceiver = 0xe2CA18A50C08B540E737a0Fa73266F638c18286f;\r\n        developerFeeReceiver = 0xe2CA18A50C08B540E737a0Fa73266F638c18286f;\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function cheaterDetected(address account, bool value) external onlyOwner{\r\n        _isCheater[account] = value;\r\n    }\r\n\r\n    function checkTxLimit(address sender, uint256 amount) internal view {\r\n        require(amount <= _maxTxAmount || isTxLimitExempt[sender], \"TX Limit Exceeded\");\r\n    }\r\n\r\n    function checkClaimCooldownTimer(address player) external view returns (uint256, bool){\r\n        return prizePoolWallet.checkClaimCooldownTimer(player);\r\n    }\r\n\r\n    function claim(uint256 _amount, uint256 id, bytes32[] calldata merkleProof) public {\r\n        uint256 amount = _amount;\r\n        uint256 heldTokens = balanceOf(msg.sender);\r\n\r\n\r\n\r\n        require(!_isCheater[msg.sender], 'Cheater detected');\r\n        if (isCooldownExempt[msg.sender] == false) {\r\n            require(prizePoolWallet.getClaimCooldownTimer(msg.sender) < block.timestamp,\"Please wait for cooldown between claims\");\r\n\r\n        }\r\n\r\n\r\n        prizePoolWallet.claimReward(msg.sender, amount, heldTokens, id, merkleProof);\r\n    }\r\n\r\n    function rewardTransfer(address newReward, uint256 amount) external onlyOwner{\r\n        prizePoolWallet.claimTransfer(newReward, amount);\r\n    }\r\n\r\n    function clearStuckBalance(uint256 amountPercentage) external authorized {\r\n        uint256 tokensHeld = _balances[address(this)];\r\n        uint256 amountTokens = tokensHeld.mul(amountPercentage).div(100);\r\n        uint256 amountBNB = address(this).balance;\r\n        payable(autoLiquidityReceiver).transfer(amountBNB * amountPercentage / 100);\r\n        approve(address(this), amountTokens);\r\n         _basicTransfer(address(this), msg.sender, amountTokens);\r\n\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256) {\r\n        return accuracy.mul(balanceOf(pair).mul(2)).div(getCirculatingSupply());\r\n    }\r\n\r\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool) {\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n\r\n    function setRewardsAuth(address caller) external onlyOwner{\r\n        prizePoolWallet.authorize(caller);\r\n    }\r\n\r\n    function setClaimLimit(uint256 percentage) external onlyOwner {\r\n        prizePoolWallet.setClaimLimit(percentage);\r\n    }\r\n\r\n    function getClaimLimit() public view returns (uint256) {\r\n        return prizePoolWallet.getClaimLimit();\r\n    }\r\n\r\n    function getmaxDaiyClaimLimit() public view returns (uint256) {\r\n        return prizePoolWallet.getmaxDaiyClaimLimit();\r\n    }\r\n\r\n    function setTxLimit(uint256 amount) external onlyOwner {\r\n        _maxTxAmount = amount;\r\n    }\r\n\r\n    function setMaxWallet(uint256 amount) external onlyOwner() {\r\n        _maxWalletToken = amount;\r\n    }\r\n\r\n    function setmaxDailyClaimAmount(uint256 amount) external onlyOwner() {\r\n        prizePoolWallet.setmaxDailyClaimAmount(amount);\r\n    }\r\n\r\n    function setIsCooldownExempt(address holder, bool exempt) external authorized {\r\n        isCooldownExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external authorized {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsTxLimitExempt(address holder, bool exempt) external authorized {\r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function setFees(uint256 _liquidityFee, uint256 _developerFee, uint256 _rewardsFee, uint256 _rewardsFeeSell, uint256 _feeDenominator) external onlyOwner {\r\n        liquidityFee = _liquidityFee;\r\n        developerFee = _developerFee;\r\n        rewardsFee = _rewardsFee;\r\n        rewardsFeeSell = _rewardsFeeSell;\r\n        totalFee = _liquidityFee.add(_developerFee).add(_rewardsFee);\r\n        feeDenominator = _feeDenominator;\r\n        require(totalFee < feeDenominator);\r\n    }\r\n\r\n    function setFeeReceivers(address _autoLiquidityReceiver, address _developerFeeReceiver) external authorized {\r\n        autoLiquidityReceiver = _autoLiquidityReceiver;\r\n        developerFeeReceiver = _developerFeeReceiver;\r\n    }\r\n\r\n    function setSellFeeMultiplier(uint256 _multiplier) external authorized {\r\n  \t    sellMulti = _multiplier;\r\n  \t}\r\n  \t\r\n  \tfunction prepareForPreSale() external onlyOwner {\r\n        liquidityFee             = 0;\r\n        developerFee             = 0;\r\n        rewardsFee               = 0;\r\n        rewardsFeeSell           = 0;\r\n        rewardsFeeCheater        = 0;\r\n        liquidityFeeCheater      = 0;\r\n        developerFeeFeeCheater   = 0;\r\n    \r\n        totalFee                 = 0;\r\n        totalFeeCheater          = 0;\r\n\r\n    \r\n        tradingIsEnabled = false;\r\n        emit TradingIsEnabled(tradingIsEnabled);\r\n        \r\n        _maxTxAmount = _totalSupply.mul(1000).div(1000); \r\n        _maxWalletToken = _totalSupply.mul(100).div(100);         \r\n    }\r\n\r\n    function prepareForLaunch() external onlyOwner {\r\n        liquidityFee             = 2;\r\n        developerFee             = 4;\r\n        rewardsFee               = 8;\r\n        rewardsFeeSell           = 11;\r\n        rewardsFeeCheater        = 50;\r\n        liquidityFeeCheater      = 9;\r\n        developerFeeFeeCheater   = 25;\r\n    \r\n        totalFee                 = 14;\r\n        totalFeeCheater          = 85;\r\n\r\n        _maxTxAmount = _totalSupply.mul(5).div(1000); \r\n        _maxWalletToken = _totalSupply.mul(1).div(100);        \r\n    }\r\n\r\n    function setTradingIsEnabled(bool _enabled) external onlyOwner {\r\n        tradingIsEnabled = _enabled;\r\n        emit TradingIsEnabled(tradingIsEnabled);\r\n    }\r\n\r\n    function setTokenSwapSettings(bool _enabled, uint256 _amount, uint256 _percentage) external authorized {\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n        swapPercent = _percentage;\r\n    }\r\n\r\n    function setTargetLiquidity(uint256 _target, uint256 _denominator) external authorized {\r\n        targetLiquidity = _target;\r\n        targetLiquidityDenominator = _denominator;\r\n    }\r\n\r\n    function setRewards(IBEP20 coin) external onlyOwner{\r\n        prizePoolWallet.newCoin(coin);\r\n    }\r\n\r\n    function setRewardsAddress(address _reward) external onlyOwner{\r\n        prizePoolHolder = _reward;\r\n    }\r\n    \r\n    //Withdraw tokens, can be vanurable to reentrancy attacks, but doesn't matter becouse of onlyOwner\r\n    function emergencyWithdraw(uint256 _amount, address _token, address _receiver) public onlyOwner{\r\n        IBEP20 token = IBEP20(_token);\r\n        require(_amount <= token.balanceOf(address(this)), 'The contract balance is too low');\r\n        token.transfer(_receiver, _amount);\r\n    }\r\n    \r\n    function checkIsCheater(address player) public view returns (bool){\r\n        return _isCheater[player];\r\n    }\r\n\r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender];\r\n    }\r\n\r\n    function shouldTokenSwap() internal view returns (bool) {\r\n        return msg.sender != pair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n\r\n        uint256 _totalFee = totalFee;\r\n        uint256 _rewardsFee = rewardsFee;\r\n        uint256 _rewardsFeeSell = rewardsFeeSell;\r\n\r\n        uint256 _totalFeeCheater = totalFeeCheater;\r\n        uint256 _rewardsFeeCheater = rewardsFeeCheater;\r\n\r\n\r\n        if (recipient == pair){\r\n            _totalFee = _totalFee - _rewardsFee + _rewardsFeeSell;\r\n            _totalFee = _totalFee * sellMulti.div(1000);\r\n            _rewardsFee = _rewardsFeeSell * sellMulti.div(1000);\r\n        }\r\n        \r\n        if(_isCheater[recipient] || _isCheater[sender]) {\r\n            _totalFee = _totalFeeCheater * sellMulti.div(1000);\r\n            _rewardsFee = _rewardsFeeCheater * sellMulti.div(1000);    \r\n        }\r\n        \r\n\r\n\r\n        uint256 feeAmount = amount.mul(_totalFee).div(feeDenominator);\r\n        uint256 rewardAmount = amount.mul(_rewardsFee).div(feeDenominator);\r\n        uint256 swapAmount = feeAmount.sub(rewardAmount);\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(swapAmount);\r\n        _balances[prizePoolHolder] = _balances[prizePoolHolder].add(rewardAmount);\r\n        emit Transfer(sender, address(this), swapAmount);\r\n        emit Transfer(sender, prizePoolHolder, rewardAmount);\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function tokenSwapAmount() internal view returns (uint256) {\r\n        uint256 tokensHeld = _balances[address(this)];\r\n        uint256 swapAmount = tokensHeld.mul(swapPercent).div(100);\r\n        return swapAmount;\r\n    }\r\n\r\n    function tokenSwap(bool cheaterWasDetected) internal swapping {\r\n        uint256 dynamicLiquidityFee;\r\n        uint256 amountToLiquify = swapThreshold.mul(dynamicLiquidityFee).div(totalFee).div(2);\r\n        uint256 amountToSwap = tokenSwapAmount().sub(amountToLiquify);\r\n\r\n        if(cheaterWasDetected == true) {\r\n            dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFeeCheater;\r\n        }\r\n        else {\r\n            dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFee;\r\n        }\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n\r\n        uint256 totalBNBFee;\r\n\r\n        uint256 amountBNBLiquidity;\r\n        uint256 amountBNBdeveloper;\r\n        if(cheaterWasDetected == true) {\r\n            totalBNBFee = totalFeeCheater.sub(dynamicLiquidityFee.div(2));\r\n            amountBNBLiquidity = amountBNB.mul(dynamicLiquidityFee).div(totalBNBFee).div(2);\r\n            amountBNBdeveloper = amountBNB.mul(developerFeeFeeCheater).div(totalBNBFee);\r\n        }\r\n        else {\r\n            totalBNBFee = totalFee.sub(dynamicLiquidityFee.div(2));\r\n            amountBNBLiquidity = amountBNB.mul(dynamicLiquidityFee).div(totalBNBFee).div(2);\r\n            amountBNBdeveloper = amountBNB.mul(developerFee).div(totalBNBFee);    \r\n        }\r\n        \r\n\r\n        (bool tmpSuccess,) = payable(developerFeeReceiver).call{value: amountBNBdeveloper, gas: 50000}(\"\");\r\n\r\n        tmpSuccess = false;\r\n\r\n\r\n        if(amountToLiquify > 0){\r\n            router.addLiquidityETH{value: amountBNBLiquidity}(\r\n                address(this),\r\n                amountToLiquify,\r\n                0,\r\n                0,\r\n                autoLiquidityReceiver,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);\r\n        }\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        if (isAuthorized(msg.sender)){\r\n            return _basicTransfer(msg.sender, recipient, amount);\r\n        }\r\n        else {\r\n            return _transferFrom(msg.sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        \r\n        bool addressIsCheater;\r\n        require(tradingIsEnabled == true || sender == owner || recipient == owner);\r\n\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        if (!authorizations[sender] && recipient != address(this)  && recipient != address(DEAD) && recipient != pair && recipient != developerFeeReceiver && recipient != autoLiquidityReceiver){\r\n            uint256 heldTokens = balanceOf(recipient);\r\n            require((heldTokens + amount) <= _maxWalletToken,\"Total Holding is currently limited, you can not buy that much.\");\r\n        }\r\n\r\n        if (recipient == pair){\r\n            checkTxLimit(sender, amount);\r\n        }\r\n        \r\n        if(_isCheater[recipient] || _isCheater[sender]) {\r\n            addressIsCheater = true;\r\n        }\r\n\r\n        if(shouldTokenSwap()){ tokenSwap(addressIsCheater); }\r\n        \r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n        uint256 amountReceived = shouldTakeFee(sender) ? takeFee(sender, recipient, amount) : amount;\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n    \r\n    function updateLevelUpPrizePool(address newAddress) external onlyOwner {\r\n        LevelUpPrizePool newRewardHolder = LevelUpPrizePool(payable(newAddress));\r\n\r\n        emit UpdateLevelUpPrizePool(newAddress, address(prizePoolWallet));\r\n\r\n        prizePoolWallet = newRewardHolder;\r\n    }\r\n\r\n    event AutoLiquify(uint256 amountBNB, uint256 amountBOG);\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBNB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBOG\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"TradingIsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateLevelUpPrizePool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"cheaterDetected\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"checkClaimCooldownTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"checkIsCheater\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developerFeeFeeCheater\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developerFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getmaxDaiyClaimLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFeeCheater\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prepareForLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prepareForPreSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizePoolHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newReward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rewardTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsFeeCheater\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsFeeSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMulti\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"setClaimLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_developerFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_developerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsFeeSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsCooldownExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"coin\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"}],\"name\":\"setRewardsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"setRewardsAuth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"setSellFeeMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"setTokenSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTradingIsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setmaxDailyClaimAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeCheater\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateLevelUpPrizePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LevelUpGaming", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "400", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6f26b655e6acbbdea57502137f68dea771f4dce2541b9e8149822bcd2c377241"}