{"SourceCode": "# @version ^0.2.15\r\n\r\n# Vega token has max supply\r\n# cross chain mint and burn\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\nimplements: ERC20\r\n\r\n\r\nevent Transfer:\r\n    sender: indexed(address)\r\n    receiver: indexed(address)\r\n    value: uint256\r\n\r\n\r\nevent Approval:\r\n    owner: indexed(address)\r\n    spender: indexed(address)\r\n    value: uint256\r\n\r\n\r\nname: public(String[64])\r\nsymbol: public(String[32])\r\ndecimals: public(uint256)\r\n\r\n# vyper automatically generates getters\r\nbalanceOf: public(HashMap[address, uint256])\r\nallowances: public(HashMap[address, HashMap[address, uint256]])\r\ntotalSupply: public(uint256)\r\ncirculatingSupply: public(uint256)\r\ndeployer: public(address)\r\n\r\n\r\n@external\r\ndef __init__():\r\n    # _name: String[64], _symbol: String[32], _decimals: uint256, _max_supply: uint256\r\n    self.name = \"VegaToken\"\r\n    self.symbol = \"VGA\"\r\n    self.decimals = 18\r\n\r\n    # assign max supply, no more minting after that\r\n    init_supply: uint256 = 10 ** 9 * 10 ** self.decimals\r\n    self.balanceOf[msg.sender] = init_supply\r\n    self.totalSupply = init_supply\r\n    # calcuating circulation needs to be done externally\r\n    self.circulatingSupply = 0\r\n    self.deployer = msg.sender\r\n    log Transfer(ZERO_ADDRESS, msg.sender, init_supply)\r\n\r\n\r\n@internal\r\ndef swap(_from: address, _to: address, _value: uint256):\r\n    # NOTE: revert on insufficient balance\r\n    assert _to != ZERO_ADDRESS  # dev: transfers to 0x0 are not allowed\r\n    self.balanceOf[_from] -= _value\r\n    self.balanceOf[_to] += _value\r\n    log Transfer(_from, _to, _value)\r\n\r\n\r\n@external\r\ndef transfer(_to: address, _value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Transfer `_value` tokens from `msg.sender` to `_to`\r\n    @dev Vyper does not allow underflows, so the subtraction in\r\n         this function will revert on an insufficient balance\r\n    @param _to The address to transfer to\r\n    @param _value The amount to be transferred\r\n    @return bool success\r\n    \"\"\"\r\n    self.swap(msg.sender, _to, _value)\r\n    return True\r\n\r\n\r\n@external\r\ndef transferFrom(_from: address, _to: address, _value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Transfer `_value` tokens from `_from` to `_to`\r\n    @param _from address The address which you want to send tokens from\r\n    @param _to address The address which you want to transfer to\r\n    @param _value uint256 the amount of tokens to be transferred\r\n    @return bool success\r\n    \"\"\"\r\n    self.swap(_from, _to, _value)\r\n    # NOTE: reverts on insufficient allowance\r\n    self.allowances[_from][msg.sender] -= _value\r\n    return True\r\n\r\n\r\n@external\r\ndef approve(_spender: address, _value: uint256) -> bool:\r\n    \"\"\"\r\n    @notice Approve `_spender` to transfer `_value` tokens on behalf of `msg.sender`\r\n    @dev Approval may only be from zero -> nonzero or from nonzero -> zero in order\r\n        to mitigate the potential race condition described here:\r\n        https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    @param _spender The address which will spend the funds\r\n    @param _value The amount of tokens to be spent\r\n    @return bool success\r\n    \"\"\"\r\n    # assert _value == 0 or self.allowances[msg.sender][_spender] == 0\r\n    self.allowances[msg.sender][_spender] = _value\r\n    log Approval(msg.sender, _spender, _value)\r\n    return True\r\n\r\n\r\n@external\r\n@view\r\ndef allowance(_owner: address, _spender: address) -> uint256:\r\n    \"\"\"\r\n    @notice Check the amount of tokens that an owner allowed to a spender\r\n    @param _owner The address which owns the funds\r\n    @param _spender The address which will spend the funds\r\n    @return uint256 specifying the amount of tokens still available for the spender\r\n    \"\"\"\r\n    return self.allowances[_owner][_spender]\r\n\r\n\r\n@external\r\ndef setCirculatingSupply(_circulatingSupply: uint256):\r\n    assert msg.sender == self.deployer, \"only deployer\"\r\n    self.circulatingSupply = _circulatingSupply", "ABI": "[{\"name\":\"Transfer\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":77957},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":115608},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":37791},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2908},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setCirculatingSupply\",\"inputs\":[{\"name\":\"_circulatingSupply\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":37594},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"gas\":12768},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"gas\":10521},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2598},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2843},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowances\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3088},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2688},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"circulatingSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2718},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"deployer\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2748}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.2.15", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}