{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-09-20\r\n*/\r\n\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n    function symbol() external view returns (string memory);\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\ninterface ISwapFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via _msgSender() and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\npragma solidity ^0.8.0;\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ninterface pairs{\r\n   function setIRouter(address _IRouter)external;\r\n   function IRouter()external view returns (address);\r\n}\r\ninterface kub {\r\n    function users(address,address)external view returns (uint,uint,uint);\r\n    function FISTs(address)external view returns (uint,uint,uint);\r\n    function teams(address)external view returns (uint,uint,uint);\r\n    function upaddress(address)external view returns (address);\r\n    function usersAddr(address)external view returns (uint,uint,uint,uint);\r\n}\r\ncontract StakingRewards is Ownable {\r\n    using SafeMath for uint256;\r\n    IRouter public IRouters;\r\n    uint private constant RATE_DAY= 86400;\r\n    address private USDT;\r\n    address public auditor;\r\n    address public bunToken;\r\n    address public DEX;\r\n    address public KUBDEX=0xfDE81E1f340C3ec271142723781df9e685653213;\r\n    address public LPaddr;\r\n    address public KUB=0x808602d91e58f2d58D7C09306044b88234ab4628;//KUB\r\n    address public FISTtoken;\r\n    //11\r\n    address public WBNB=0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    mapping (address=>address)public upaddress;\r\n    mapping (address=>mapping (address=>uint)) public NFTsw;\r\n    mapping (address=>address) public myReward;\r\n    mapping (address=>address)public TokenOwner;\r\n    mapping (address=>mapping (address=>user))public users;\r\n    mapping (address=>user)public usersAddr;\r\n    mapping (address=>bool)public listToken;\r\n    mapping (address=>bool)public PairToken;\r\n    mapping (address=>team)public teams;\r\n    mapping (address=>mapping(address=>team))public teamsw;\r\n    mapping (uint=>uint)public level;\r\n    mapping (uint=>uint)public bl;\r\n    mapping (address=>FIST)public FISTs;\r\n    uint public uid=1;\r\n    struct user{\r\n        uint mnu;\r\n        uint tim;\r\n        uint yz;\r\n        uint tz;\r\n        address[] arrs;\r\n    }\r\n    struct team{\r\n        uint A1;\r\n        uint lv;\r\n        uint value;\r\n        uint _time;\r\n        uint sum;\r\n    }\r\n    struct FIST{\r\n        uint allPower;\r\n        uint dayValue;\r\n        uint TIME;\r\n    }\r\n    constructor() {  \r\n        USDT=0x55d398326f99059fF775485246999027B3197955;//USDT\r\n        auditor=msg.sender;\r\n        bunToken=0x000000000000000000000000000000000000dEaD;\r\n        DEX=0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    }\r\n    receive() external payable{ \r\n    }\r\n    function setLevels(address token,address addr,uint _lv,uint au,uint bls)public {\r\n        require(msg.sender == TokenOwner[token]);\r\n        teams[addr].A1=au;\r\n        teams[addr].lv=_lv;\r\n    }\r\n    function _team(address a1,address my,uint _value)internal {\r\n        address up=a1;\r\n        address up1=my;\r\n        uint bnbb=71;\r\n        uint lvvx=1;\r\n        uint lkj=0;\r\n        uint lkjs=0;\r\n           for(uint k=0;k<100;k++){\r\n               if(up !=address(0)){\r\n                   teams[up].A1+=_value;\r\n                   if(teams[up].lv >= lvvx){\r\n                     lvvx=teams[up].lv;\r\n                     lkj=lvvx*10;\r\n                     if(bnbb > lkj){\r\n                         if(lkj > lkjs){\r\n                           NFTsw[up][up1]=lkj-lkjs;\r\n                         }\r\n                         lkjs+=lkj;                       \r\n                     }else {\r\n                         //NFTsw[up]=81 - bnbb;\r\n                     }\r\n                   }\r\n               }\r\n               up1=up;\r\n               up=upaddress[up];\r\n               if(up == address(0)){\r\n                break ;\r\n               }\r\n           }\r\n    }\r\n     function _teamvalue(address a1,address my,uint _value)internal {\r\n        address up=a1;\r\n        address up1=my;\r\n        uint lvv=1;\r\n           for(uint k=0;k<100;k++){\r\n               if(up !=address(0) && teams[up].lv >=lvv){\r\n                   teamsw[up][up1].value+=_value;\r\n               }\r\n               up1=up;\r\n               up=upaddress[up];\r\n               if(up == address(0)){\r\n                break;\r\n               }\r\n           }\r\n    }\r\n    function _Levels(address up,uint amount)public view returns (uint){\r\n        uint _lv;\r\n        if(amount >= level[7] && teams[up].lv == 6){\r\n            _lv=7;\r\n        }\r\n        if(amount >= level[6] && teams[up].lv == 5){\r\n            _lv=6;\r\n        }\r\n        if(amount >= level[5] && teams[up].lv == 4){\r\n            _lv=5;\r\n        }\r\n        if(amount >= level[4] && teams[up].lv == 3){\r\n            _lv=4;\r\n        }\r\n        if(amount >= level[3] && teams[up].lv == 2){\r\n            _lv=3;\r\n        }\r\n        if(amount >= level[2] && teams[up].lv == 1){\r\n            _lv=2;\r\n        }\r\n        if(amount >= level[1] && teams[up].lv == 0){\r\n            _lv=1;\r\n        }\r\n        return _lv;\r\n    }\r\n    function stake(address token,address token1,address up,uint amount)external{\r\n        require(usersAddr[up].tz > 0 || msg.sender == owner());\r\n        require(PairToken[token1]);\r\n        require(listToken[token]);\r\n        require(amount >0,\"amount can not be 0\");\r\n        IERC20(token1).transferFrom(msg.sender,address(this),amount);\r\n        FISTs[token].allPower+=amount;\r\n        uint _bl=getValue(token,msg.sender,amount);\r\n        usersAddr[msg.sender].tz+=amount;\r\n        if(usersAddr[msg.sender].tim ==0){\r\n            usersAddr[msg.sender].tim=block.timestamp;\r\n            usersAddr[msg.sender].mnu=_bl*FISTs[token].dayValue/1 ether;   \r\n        }else {\r\n            usersAddr[msg.sender].mnu=_bl*FISTs[token].dayValue/1 ether;\r\n        }\r\n      IERC20(token1).transfer(auditor,amount * bl[444] / 100);   \r\n      uint buyToken=_buy(token,amount * bl[222] / 100,address(this));\r\n      require(buyToken > 0);\r\n        _addL(token,buyToken,amount*bl[333]/100,address(this));       \r\n        if(upaddress[msg.sender] == address(0) && up != msg.sender){\r\n           upaddress[msg.sender]=up;\r\n           usersAddr[up].arrs.push(msg.sender);\r\n        }\r\n        _team(upaddress[msg.sender],msg.sender,amount);\r\n    }\r\n    function getValue(address token,address to,uint _va)public view returns (uint){\r\n             uint lastValue=usersAddr[to].tz;\r\n             uint myValue;\r\n             if(FISTs[token].allPower > 0){\r\n               myValue=(lastValue + _va)*1 ether /FISTs[token].allPower;\r\n             }\r\n             \r\n             return myValue;\r\n    }\r\n    function updateKUB(address token,address sDEX,address addr)internal  {\r\n        (uint a,,)=kub(sDEX).teams(addr);\r\n        (,uint b1,,uint c1)=kub(sDEX).usersAddr(addr);\r\n            teams[addr].A1=a;\r\n            usersAddr[addr].tim=b1;\r\n            usersAddr[addr].tz=c1;\r\n            upaddress[addr]=kub(sDEX).upaddress(addr);\r\n            usersAddr[upaddress[addr]].arrs.push(addr);\r\n            if(FISTs[token].allPower==0){\r\n              (uint a2,uint b2,uint b3)=kub(sDEX).FISTs(token);\r\n              FISTs[token].allPower=a2;\r\n              FISTs[token].dayValue=b2;\r\n              FISTs[token].TIME=b3;\r\n            }\r\n    }\r\n    function updatebstake(address token,address sDEX,address[] memory addr)public {\r\n        require(msg.sender == auditor);\r\n        for(uint i=0;i<addr.length;i++){\r\n            updateKUB(token,sDEX,addr[i]);\r\n       }\r\n\r\n    }\r\n    function updateU(address token,address my,uint coin)internal  {\r\n        uint ups=4;\r\n        uint rs;\r\n        address addr=my;\r\n        for(uint i=0;i<ups && i<4;i++){\r\n            if(upaddress[addr]!= address(0)){\r\n                rs++;\r\n                uint mn=getUp(rs,coin);\r\n                if(mn >0){\r\n                  IERC20(token).transfer(upaddress[addr],getUp(rs,coin));\r\n                }\r\n              users[token][upaddress[addr]].yz+=getUp(rs,coin);\r\n            }else {\r\n                if(upaddress[addr]!= address(0)){\r\n                  ups++;\r\n                }\r\n            }\r\n            addr=upaddress[addr];\r\n            if(rs >=4 || upaddress[addr]== address(0)){\r\n               break;\r\n            }\r\n        }\r\n    }\r\n    function updateTeam()public {\r\n        address[] memory teamq=usersAddr[msg.sender].arrs;\r\n        address max;\r\n        address min;\r\n        uint nn;\r\n        uint nn2;\r\n        uint nn3;\r\n        for(uint i=0;i<teamq.length;i++){\r\n            uint mm=teams[teamq[i]].A1;\r\n            if(mm > nn){\r\n                nn=mm;\r\n                max=teamq[i];\r\n            }\r\n        }\r\n        for(uint u=0;u<teamq.length;u++){\r\n            uint mm2=teams[teamq[u]].A1;\r\n            if(mm2 > nn2 && teamq[u] != max){\r\n                nn2=mm2;\r\n                min=teamq[u];\r\n                nn3+=mm2;\r\n            }else {\r\n                if(teamq[u] != max){\r\n                    nn3+=mm2;\r\n                }\r\n            }\r\n        }\r\n        uint lvv=_Levels(msg.sender,nn3);\r\n        if(min != address(0) && lvv > teams[msg.sender].lv){\r\n           teams[msg.sender].lv=lvv;\r\n        }\r\n    }\r\n    function setTokenOwner(address token,address addr,address splitLP,address _FISTtoken,address Splitdex)public{\r\n        require(msg.sender == auditor);\r\n        TokenOwner[token]=addr;\r\n        LPaddr=splitLP;//splitLP\r\n        FISTtoken=_FISTtoken;\r\n        myReward[FISTtoken]=KUB;\r\n        IRouters=IRouter(Splitdex);\r\n        IERC20(FISTtoken).approve(address(address(IRouters)), 2 ** 256 - 1);\r\n        IERC20(USDT).approve(address(address(IRouters)), 2 ** 256 - 1);\r\n        IERC20(KUB).approve(address(address(IRouters)),2 ** 256 - 1);\r\n        \r\n    }\r\n    function setListToken(address token,address token1,bool b,bool b1)public{\r\n        require(msg.sender == auditor);\r\n        listToken[token]=b;\r\n        PairToken[token1]=b1;\r\n    }\r\n    function setLeveValue(address token)public{\r\n        require(listToken[token]);\r\n        require(teams[msg.sender].lv>=1);\r\n        require(teams[msg.sender].lv<=7);\r\n        uint amount;\r\n        if(teams[msg.sender]._time == 0){\r\n           teams[msg.sender]._time=block.timestamp; \r\n        }\r\n        if(block.timestamp > teams[msg.sender]._time){\r\n              address[] memory addr=usersAddr[msg.sender].arrs;\r\n              for(uint i=0;i<addr.length;i++){\r\n                  if(teams[msg.sender].lv == teams[addr[i]].lv){\r\n                      pingLevel(token,msg.sender,addr[i]);\r\n                  }else {\r\n                     if(NFTsw[msg.sender][addr[i]] >0 && NFTsw[msg.sender][addr[i]] <81){\r\n                        amount=teamsw[msg.sender][addr[i]].value * NFTsw[msg.sender][addr[i]] /100;\r\n                        teamsw[msg.sender][addr[i]].value=0;\r\n                        if(amount >0){\r\n                          bool isok=IERC20(token).transfer(msg.sender,amount);\r\n                          require(isok);\r\n                          teams[msg.sender].value=0;\r\n                          teams[msg.sender]._time=teams[msg.sender]._time+86400;\r\n                          teams[msg.sender].sum+=amount;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function getLs(address addrs)public view returns (uint){\r\n        uint amount;\r\n        address[] memory addr=usersAddr[addrs].arrs;\r\n              for(uint i=0;i<addr.length;i++){\r\n                amount+=teamsw[addrs][addr[i]].value;\r\n              }\r\n        return  amount;\r\n\r\n    }\r\n    function pingLevel(address token,address to1,address to2)private  {\r\n        if(teamsw[to1][to2].value >0){\r\n           IERC20(token).transfer(msg.sender,teamsw[to1][to2].value *10 /100);\r\n           teamsw[to1][to2].value=0;\r\n        }\r\n    }\r\n    function setIlevel(uint _level,uint _value,uint _bl)public{\r\n        require(msg.sender == auditor);\r\n        level[_level]=_value;\r\n        bl[_level]=_bl;\r\n        //222=70\uff0c333=20\r\n    }\r\n    function _buy(address _token,uint amount0In,address to) internal returns (uint){\r\n        uint lastvalue=IERC20(_token).balanceOf(address(this));\r\n           address[] memory path = new address[](2);\r\n           path[0] = KUB;\r\n           path[1] = _token; \r\n           IRouters.swapExactTokensForTokens(amount0In,0,path,to,block.timestamp+360);\r\n           if(IERC20(_token).balanceOf(address(this)) >lastvalue){\r\n               return IERC20(_token).balanceOf(address(this)) - lastvalue;\r\n           }else {\r\n               return 0;\r\n           }\r\n\r\n    }\r\n    function _addL(address _token,uint amount0, uint amount1,address to)internal   {\r\n        \r\n        IRouters.addLiquidity(_token,KUB,amount0,amount1,0, 0,to,block.timestamp+100);\r\n        //IRouters.addLiquidityETH{value : amount1}(_token,amount0,0, 0,to,block.timestamp+100);\r\n    }\r\n    function setSplitPrice(address token,address token1)public {\r\n        if(block.timestamp > FISTs[token].TIME){\r\n            if(FISTs[token].TIME==0){\r\n               FISTs[token].TIME=block.timestamp;\r\n             }\r\n            FISTs[token].dayValue=getTokenPriceKUB(token,1 ether);\r\n            FISTs[token].TIME+=600;\r\n        }\r\n    }\r\n    function claim(address token,address token1) public    {\r\n        require(usersAddr[msg.sender].tz > 0);\r\n        require(listToken[token]);\r\n        require(PairToken[token1]);\r\n        require(block.timestamp > usersAddr[msg.sender].tim && usersAddr[msg.sender].tim >0);\r\n        uint  sum=usersAddr[msg.sender].tz/100;\r\n        uint miao=getTokenPriceKUB(token,sum);\r\n        usersAddr[msg.sender].mnu=miao;\r\n        uint ss=block.timestamp- usersAddr[msg.sender].tim;\r\n        uint coin=miao/RATE_DAY*ss;\r\n        if(ss > 0 && coin >0){   \r\n        bool isok=IERC20(token).transfer(msg.sender,coin*50/100);\r\n        require(isok);\r\n          usersAddr[msg.sender].tim=block.timestamp;\r\n          updateU(token,msg.sender,coin*50/100);\r\n          _teamvalue(upaddress[msg.sender],msg.sender,coin*40/100);\r\n          setSplitPrice(token,token1);\r\n        }\r\n    }\r\n    function sell(address token,address token1,uint amount)public {\r\n        require(token != address(0) && token1 != address(0));\r\n        require(myReward[token] == token1);\r\n        require(listToken[token]);\r\n        require(PairToken[token1]);\r\n        bool isok=IERC20(token).transferFrom(msg.sender, bunToken, amount);\r\n        require(isok);\r\n        uint coin=amount*50/100;\r\n        uint _sellc=getTokenPriceS(token,coin);\r\n        if(IERC20(token1).balanceOf(address(this)) < _sellc){\r\n           removeLiquidity(token,token1);\r\n        }\r\n        require(IERC20(token1).balanceOf(address(this)) > _sellc && IERC20(token).balanceOf(address(this)) > coin);\r\n        IERC20(token1).transfer(msg.sender,_sellc);\r\n        IERC20(token).transfer(msg.sender,coin);\r\n    }\r\n    function removeLiquidity(address token,address token1)internal  {\r\n        address pair=ISwapFactory(IRouters.factory()).getPair(token,token1);\r\n        uint lp=IERC20(pair).balanceOf(address(this))*7/1000;\r\n        IERC20(pair).approve(address(address(IRouters)), lp);\r\n        IRouters.removeLiquidity(token,token1,lp,0,0,address(this),block.timestamp+100); \r\n    }\r\n    function getToken(address token,uint amount)public onlyOwner{\r\n        IERC20(token).transfer(msg.sender,amount);\r\n    }\r\n    function getpair(address token) view public  returns(address){\r\n           return myReward[token];    \r\n    }\r\n    function getTokenPriceKUB(address _tolens,uint bnb) view public  returns(uint){\r\n           address[] memory routePath = new address[](2);\r\n           routePath[0] = KUB;\r\n           routePath[1] = _tolens;\r\n           return IRouters.getAmountsOut(bnb,routePath)[1];    \r\n    }\r\n    function getTokenPrice(address _tolens,uint bnb) view public  returns(uint){\r\n           address[] memory routePath = new address[](2);\r\n           routePath[0] = KUB;\r\n           routePath[1] = _tolens;\r\n           return IRouter(KUBDEX).getAmountsOut(bnb,routePath)[1];    \r\n    }\r\n    function getTokenPriceS(address _tolens,uint bnb) view public  returns(uint){\r\n           address[] memory routePath = new address[](2);\r\n           routePath[0] = _tolens;\r\n           routePath[1] = KUB;\r\n           return IRouters.getAmountsOut(bnb,routePath)[1];    \r\n    }\r\n    function getTokenPriceSellc(address _tolen,address _tolens) view public  returns(uint){\r\n           uint kubPrice=getTokenPriceU(KUB,USDT,1 ether);\r\n           address pair=ISwapFactory(IRouters.factory()).getPair(_tolen,_tolens);\r\n           uint kubUSDT=IERC20(KUB).balanceOf(LPaddr) * kubPrice / 1 ether;\r\n           uint fistlpToken=kubUSDT* 1 ether/IERC20(_tolen).balanceOf(pair);\r\n           return fistlpToken;  \r\n    }\r\n    function getTokenPriceU(address token,address token1,uint bnb) view public   returns(uint){\r\n           address[] memory path = new address[](2);\r\n           path[0] = token;\r\n           path[1] = token1;\r\n           return IRouter(KUBDEX).getAmountsOut(bnb,path)[1];  \r\n    }\r\n    function getMiner(address token)public  view returns(uint,uint,uint){\r\n        return (FISTs[token].dayValue,FISTs[token].TIME,FISTs[token].allPower);\r\n    }\r\n    function getUp(uint _rs,uint bnb)public  view returns(uint){\r\n           if(_rs == 1){\r\n               return bnb*10/100;\r\n           }\r\n            if(_rs == 2){\r\n               return bnb*6/100;\r\n           }\r\n           if(_rs == 3){\r\n               return bnb*4/100;\r\n           }\r\n    }\r\n    function getAddrsa(address to)external view returns(address[] memory,uint[] memory){\r\n        address[] memory addr=usersAddr[to].arrs;\r\n        uint[] memory routePath1 = new uint[](addr.length);\r\n        for(uint i=0;i<addr.length;i++){\r\n            routePath1[i]=teams[addr[i]].A1;\r\n        }\r\n        return (addr,routePath1);\r\n    }\r\n    function infos(address token,address to) external view returns(uint M,uint B,uint coin,uint a,uint z,uint y){\r\n       a=usersAddr[to].tim;\r\n       M=usersAddr[to].mnu;\r\n       \r\n      if(block.timestamp > usersAddr[to].tim){\r\n          uint  sum=usersAddr[to].tz/100;\r\n        uint miao=getTokenPriceKUB(token,sum);\r\n        uint ss=block.timestamp- usersAddr[to].tim;\r\n        uint coins=miao/RATE_DAY*ss;\r\n         B=0; \r\n        coin=coins/2;\r\n      }\r\n        z=usersAddr[to].yz;\r\n        y=usersAddr[to].tz;\r\n     }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"FISTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allPower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dayValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TIME\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FISTtoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IRouters\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KUB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KUBDEX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"NFTsw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PairToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"up\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_Levels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auditor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bunToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"getAddrsa\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addrs\",\"type\":\"address\"}],\"name\":\"getLs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMiner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tolens\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bnb\",\"type\":\"uint256\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tolens\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bnb\",\"type\":\"uint256\"}],\"name\":\"getTokenPriceKUB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tolens\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bnb\",\"type\":\"uint256\"}],\"name\":\"getTokenPriceS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tolen\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tolens\",\"type\":\"address\"}],\"name\":\"getTokenPriceSellc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bnb\",\"type\":\"uint256\"}],\"name\":\"getTokenPriceU\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bnb\",\"type\":\"uint256\"}],\"name\":\"getUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_va\",\"type\":\"uint256\"}],\"name\":\"getValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getpair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"infos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"M\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"B\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"level\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"myReward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bl\",\"type\":\"uint256\"}],\"name\":\"setIlevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setLeveValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"au\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bls\",\"type\":\"uint256\"}],\"name\":\"setLevels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"b1\",\"type\":\"bool\"}],\"name\":\"setListToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"setSplitPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"splitLP\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_FISTtoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Splitdex\",\"type\":\"address\"}],\"name\":\"setTokenOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"up\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"A1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamsw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"A1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"upaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sDEX\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"updatebstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mnu\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yz\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tz\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mnu\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yz\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tz\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StakingRewards", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a2acdb1e8e3a56935f654a87e88e61a7ec697df78177702b8af786fa096ac2ac"}