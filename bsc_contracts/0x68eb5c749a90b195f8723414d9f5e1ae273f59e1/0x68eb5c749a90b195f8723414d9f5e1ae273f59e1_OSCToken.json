{"SourceCode": "pragma experimental ABIEncoderV2;\r\npragma solidity ^0.6.12;\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    function decimals() external view returns (uint8);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n\r\ncontract Context {\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n     /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC165 {\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\ninterface IERC721 is IERC165 {\r\n   \r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    \r\n\r\n   \r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n   \r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n   \r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n  \r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n    \r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    \r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n \r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    \r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface AddLiquidityPool{\r\n    function swapAndLiquify(uint256 tokenAmount)external;\r\n}\r\n \r\ncontract ERC20 is Context,IERC20,Ownable{\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n\r\n    mapping (address => uint) public _balances;\r\n\r\n    mapping (address => mapping (address => uint)) private _allowances;\r\n\r\n    uint256 public BASE_RATIO = 10**18; \r\n    uint256 public SPY = 116;//0.0116;\r\n\r\n    uint private _totalSupply;\r\n    uint256 public extraSupply; \r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    uint256 public _liquidityFee=50;\r\n    uint256 public _referrerFee=80;\r\n    uint256 public _technologyFundFee=20;\r\n\r\n    \r\n\r\n    uint256 public _NFTFee=50;\r\n    uint256 public _burnFee=20;\r\n    uint256 public _publicityFundFee=20;\r\n    uint256 public _bountyFee=10;\r\n\r\n\r\n    uint256 public _marketingFee = 150;\r\n    uint256 public numTokensToSell=10*10**18;\r\n    uint256 public numTokensSellToNftDividendsFee=10*10**18;\r\n\r\n    mapping(address => uint256) public lastUpdateTime; \r\n    \r\n\r\n    mapping(address => address) public referralRelationships; // store referall relationship: referree > referrer\r\n    mapping(address => bool) public alreadyBuy;\r\n    mapping (address => bool) public _isExcludedFromFee;\r\n    mapping(address=>bool) private isExcludedFromReferral;\r\n    mapping(address => bool) public rewardBlacklist;\r\n\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndSendEnabled = true;\r\n    bool isCreatePair;\r\n\r\n    address public usdtAddress=0x55d398326f99059fF775485246999027B3197955;\r\n    address public NFTAddress=0xdAF4e3026858b50BAC0C04071542DB2970778115;\r\n    address public marketingAddress=0x33a27888b1dd4c6E8889d7c17d83776c588C37CF;\r\n    address public publicityFundAddress1=0xf114a59B7a2dcD08f2a0bb31F7B9E369A582B26e;\r\n    address public publicityFundAddress2=0x1650b250A250e49DF3c9A3D69a1E81D9330d92A7;\r\n    address public publicityFundAddress3=0x822Bca239BD08F6e7f660015Db95B7B51e64bC85;\r\n    address public publicityFundAddress4=0x07AE0fDea35D647C10f6CaF1a15e490617f3814c;\r\n    address public publicityFundAddress5=0x828364E66AAA03FCFA441D421aaceF54d6D72a78;\r\n    address public technologyFundAddress=0x9F06bF9B93e0C772B161F8EdA9F9D56a083A38a6;\r\n    address public bountyAddress=0xc1d8A211127fF25CEaD3D476B94a1B727Eb2084F;\r\n    address public addLiquidityPool=0xF622d5ad1212142E7B7568FfAA6D0350629C556d;\r\n    \r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public  uniswapV2Pair;\r\n\r\n    bool public swapAndLiquifyEnabled = true;\r\n\r\n    address[] shareholders;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    mapping(address => bool) private _updated;\r\n    uint256 currentIndex;  \r\n    bool public openNftDividends=false;\r\n\r\n    constructor (string memory name, string memory symbol, uint8 decimals, uint totalSupply) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n        _totalSupply = totalSupply;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n         // Create a uniswap pair for this new token\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), usdtAddress);\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[marketingAddress] = true;\r\n        _isExcludedFromFee[address(addLiquidityPool)] = true;\r\n        _isExcludedFromFee[address(publicityFundAddress1)] = true;\r\n        _isExcludedFromFee[address(publicityFundAddress2)] = true;\r\n        _isExcludedFromFee[address(publicityFundAddress3)] = true;\r\n        _isExcludedFromFee[address(publicityFundAddress4)] = true;\r\n        _isExcludedFromFee[address(publicityFundAddress5)] = true;\r\n        _isExcludedFromFee[address(technologyFundAddress)] = true;\r\n        _isExcludedFromFee[address(bountyAddress)] = true;\r\n        isExcludedFromReferral[owner()]=true;\r\n        isExcludedFromReferral[marketingAddress]=true;\r\n        isExcludedFromReferral[address(publicityFundAddress1)]=true;\r\n        isExcludedFromReferral[address(publicityFundAddress2)]=true;\r\n        isExcludedFromReferral[address(publicityFundAddress3)]=true;\r\n        isExcludedFromReferral[address(publicityFundAddress4)]=true;\r\n        isExcludedFromReferral[address(publicityFundAddress5)]=true;\r\n        isExcludedFromReferral[address(technologyFundAddress)] = true;\r\n        isExcludedFromReferral[address(bountyAddress)] = true;\r\n        rewardBlacklist[address(this)]=true;\r\n        rewardBlacklist[uniswapV2Pair]=true;\r\n        rewardBlacklist[owner()]=true;\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view  override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint) {\r\n        return _totalSupply.add(extraSupply);\r\n    }\r\n    function balanceOf(address account) public view override returns (uint) {\r\n         return _balances[account].add(getReward(account));\r\n    }\r\n    function transfer(address recipient, uint amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view override returns (uint) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n\r\n    modifier calculateReward(address account) {\r\n        if (account != address(0)) {\r\n            uint256 reward = getReward(account);\r\n            if (reward > 0) {\r\n                _balances[account] = _balances[account].add(reward);\r\n                extraSupply = extraSupply.add(reward);\r\n                \r\n            }\r\n            lastUpdateTime[account] = lastTime();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function setRewardBlacklist(address account, bool enable) public onlyOwner {\r\n        rewardBlacklist[account] = enable;\r\n    }\r\n \r\n    function getReward(address account) public view returns (uint256) {\r\n       \r\n        if (lastUpdateTime[account] == 0 || rewardBlacklist[account]) {\r\n            return 0;\r\n        }\r\n        return\r\n            _balances[account].mul(SPY).div(1000000).mul(\r\n                (lastTime().sub(lastUpdateTime[account])).div(10 minutes)\r\n            );\r\n    }\r\n  \r\n    function lastTime() public view returns (uint256) {\r\n        return block.timestamp;\r\n        // return Math.min(block.timestamp, rewardEndTime);\r\n    }\r\n\r\n    function _transfer(address from,address to, uint256 amount) calculateReward(from) calculateReward(to) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        uint256 liquidityPoolBalance = balanceOf(address(addLiquidityPool));\r\n\r\n        if (\r\n            !inSwapAndLiquify &&\r\n            from != uniswapV2Pair &&\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n           swapAndLiquify(liquidityPoolBalance);\r\n        }\r\n\r\n        if (from==uniswapV2Pair&&!alreadyBuy[to]){\r\n            alreadyBuy[to]=true;\r\n        }\r\n        if (!address(from).isContract()&&!address(to).isContract()){\r\n            _updateReferralRelationship(from,to);\r\n        }\r\n        bool takeFee = true;\r\n \r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        }\r\n        uint256 totalFee;\r\n\r\n        if (takeFee){\r\n            if (from==uniswapV2Pair){\r\n                totalFee=totalFee.add(calculateByBuy(from,to,amount));\r\n   \r\n            }else if (to==uniswapV2Pair){\r\n                totalFee=totalFee.add(calculateBySell(from,amount));\r\n            }else{\r\n                totalFee=totalFee.add(calculateByTransfer(from,amount));\r\n            }\r\n        }\r\n\r\n        _balances[from] = _balances[from].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        uint256 trunAmount=amount.sub(totalFee);\r\n        _balances[to] = _balances[to].add(trunAmount);\r\n        emit Transfer(from, to, trunAmount);\r\n        if(!address(from).isContract() && from != address(0) ) setShare(from);\r\n        if(!address(to).isContract() && to != address(0) ) setShare(to);\r\n\r\n        if(_balances[address(this)] >= numTokensSellToNftDividendsFee&&openNftDividends) {\r\n             process(500000);\r\n        }\r\n        if (to==uniswapV2Pair&&!isCreatePair){\r\n            require(from==owner());\r\n            isCreatePair=true;\r\n        }\r\n\r\n    }\r\n\r\n    function dividendsToReferrer(address from,uint256 Amount)private{\r\n        uint8 i=1;\r\n        address userAddress=from;\r\n        while (true) {\r\n            address referalAddress=referralRelationships[userAddress]; \r\n            if (i==11){\r\n                break;\r\n            }\r\n            uint AmountDividend=getAmountDividend(Amount);\r\n            if(referalAddress==address(0)){\r\n                _balances[address(0xdead)] = _balances[address(0xdead)].add(AmountDividend);\r\n                emit Transfer(from, address(0xdead), AmountDividend);\r\n            }else{\r\n                _balances[referalAddress] = _balances[referalAddress].add(AmountDividend);\r\n                emit Transfer(from, referalAddress, AmountDividend);\r\n            }\r\n            userAddress =referalAddress;\r\n            i++;\r\n        }\r\n    }\r\n\r\n    function getAmountDividend(uint256 amount)private pure returns(uint256){\r\n         return amount.mul(8).div(10);\r\n    }\r\n\r\n    function calculateByBuy(address from,address to,uint256 amount)internal returns(uint256 totalFee){\r\n            uint256 LPFee=calculateLiquidityFee(amount);\r\n            _takeLiquidityFee(from,LPFee);\r\n            uint256 referrerFee=calculateReferrerFee(amount);\r\n            _takeReferrerFee(to,referrerFee);\r\n            uint256 technologyFundFee=calculateTechnologyFundFee(amount);\r\n            _takeTechnologyFundFee(from,technologyFundFee);\r\n            \r\n            return totalFee=LPFee.add(referrerFee).add(technologyFundFee);\r\n    }\r\n\r\n    function calculateBySell(address from,uint256 amount)internal returns(uint256 totalFee){\r\n            uint256 LPFee=calculateLiquidityFee(amount);\r\n            _takeLiquidityFee(from,LPFee);\r\n            uint256 NFTFee=calculateNFTFee(amount);\r\n            _takeNFTFee(from,NFTFee);\r\n            uint256 BurnFee=calculateBurnFee(amount);\r\n            _takeBurnFee(from,BurnFee);\r\n            uint256 PublicityFundFee=calculatePublicityFundFee(amount);\r\n            _takePublicityFundFee(from,PublicityFundFee);\r\n            uint256 BountyFee=calculateBountyFee(amount);\r\n            _takeBountyFee(from,BountyFee);\r\n            return totalFee=LPFee.add(NFTFee).add(BurnFee).add(PublicityFundFee).add(BountyFee);\r\n    }\r\n    function calculateByTransfer(address from,uint256 amount)internal returns(uint256 totalFee){\r\n            uint256 MarketingFee=calculateMarketingFee(amount);\r\n            _takeMarketingFee(from,MarketingFee);\r\n            return MarketingFee;\r\n    }\r\n    function _approve(address owner, address spender, uint amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function setNumTokensSellToNftDividendsFee(uint256 _num)public onlyOwner{\r\n        numTokensSellToNftDividendsFee=_num;\r\n    }\r\n\r\n    function setMarketingFeePercent(uint256 marketingFee) external onlyOwner() {\r\n        _marketingFee = marketingFee;\r\n    }\r\n    function setReferrerFeePercent(uint256 referrerFee) external onlyOwner() {\r\n        _referrerFee = referrerFee;\r\n    }\r\n    function setPublicityFundFeePercent(uint256 publicityFundFee) external onlyOwner() {\r\n        _publicityFundFee = publicityFundFee;\r\n    }\r\n    function setBountyFeePercent(uint256 bountyFee) external onlyOwner() {\r\n        _bountyFee = bountyFee;\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n    }\r\n\r\n    function setBurnPercent(uint256 burnFee) external onlyOwner() {\r\n        _burnFee = burnFee;\r\n    }\r\n\r\n    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {\r\n        _liquidityFee = liquidityFee;\r\n    }\r\n\r\n    function setTechnologyFundFeePercent(uint256 technologyFundFee) external onlyOwner() {\r\n        _technologyFundFee = technologyFundFee;\r\n    }\r\n\r\n    \r\n\r\n    function setAddLiquidityPool(address _addLiquidityPool) external onlyOwner() {\r\n        addLiquidityPool = _addLiquidityPool;\r\n    }\r\n\r\n    function setNftAddress(address _addr)public onlyOwner{\r\n        NFTAddress=_addr;\r\n    }\r\n\r\n    function setOpenNftDividends(bool _bool)public onlyOwner{\r\n        openNftDividends=_bool;\r\n    }\r\n\r\n\r\n    function calculateNFTFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_NFTFee).div(\r\n            10**3\r\n        );\r\n    }\r\n\r\n\r\n    function calculateMarketingFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_marketingFee).div(\r\n            10**3\r\n        );\r\n    }\r\n\r\n    function calculateBurnFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_burnFee).div(\r\n            10**3\r\n        );\r\n    }\r\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_liquidityFee).div(\r\n            10**3\r\n        );\r\n    }\r\n    function calculateTechnologyFundFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_technologyFundFee).div(\r\n            10**3\r\n        );\r\n    }\r\n\r\n    function calculatePublicityFundFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_publicityFundFee).div(\r\n            10**3\r\n        );\r\n    }\r\n\r\n    function calculateBountyFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_bountyFee).div(\r\n            10**3\r\n        );\r\n    }\r\n\r\n    function calculateReferrerFee(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul(_referrerFee).div(\r\n            10**3\r\n        );\r\n    }\r\n\r\n\r\n    function _takeMarketingFee(address from,uint256 MarketingFee) private {\r\n        if (MarketingFee==0)return;\r\n        _balances[address(marketingAddress)]= _balances[address(marketingAddress)].add(MarketingFee);\r\n        emit Transfer(from, address(marketingAddress),MarketingFee);\r\n    }\r\n    function _takeNFTFee(address from,uint256 NFTFee) private {\r\n        if (NFTFee==0)return;\r\n        _balances[address(this)]= _balances[address(this)].add(NFTFee);\r\n        emit Transfer(from, address(this),NFTFee);\r\n    }\r\n\r\n\r\n    function _takeLiquidityFee(address from,uint256 LiquidityFee) private {\r\n        if(LiquidityFee==0)return;\r\n\r\n        _balances[address(addLiquidityPool)] = _balances[address(addLiquidityPool)].add(LiquidityFee);  \r\n        emit Transfer(from, address(addLiquidityPool),LiquidityFee);\r\n        \r\n    }\r\n\r\n    function _takeTechnologyFundFee(address from,uint256 TechnologyFundFee) private {\r\n        if(TechnologyFundFee==0)return;\r\n\r\n        _balances[address(technologyFundAddress)] = _balances[address(technologyFundAddress)].add(TechnologyFundFee);  \r\n        emit Transfer(from, address(technologyFundAddress),TechnologyFundFee);\r\n        \r\n    }\r\n    function _takeBountyFee(address from,uint256 BountyFee) private {\r\n        if(BountyFee==0)return;\r\n        _balances[address(bountyAddress)] = _balances[address(bountyAddress)].add(BountyFee);  \r\n        emit Transfer(from, address(bountyAddress),BountyFee);\r\n    }\r\n\r\n    function _takePublicityFundFee(address from,uint256 PublicityFundFee) private {\r\n        if(PublicityFundFee==0)return;\r\n        _balances[address(publicityFundAddress1)] = _balances[address(publicityFundAddress1)].add(PublicityFundFee.div(5));  \r\n        _balances[address(publicityFundAddress2)] = _balances[address(publicityFundAddress2)].add(PublicityFundFee.div(5));  \r\n        _balances[address(publicityFundAddress3)] = _balances[address(publicityFundAddress3)].add(PublicityFundFee.div(5));  \r\n        _balances[address(publicityFundAddress4)] = _balances[address(publicityFundAddress4)].add(PublicityFundFee.div(5));  \r\n        _balances[address(publicityFundAddress5)] = _balances[address(publicityFundAddress5)].add(PublicityFundFee.div(5));  \r\n        emit Transfer(from, address(publicityFundAddress1),PublicityFundFee.div(5));\r\n        emit Transfer(from, address(publicityFundAddress2),PublicityFundFee.div(5));\r\n        emit Transfer(from, address(publicityFundAddress3),PublicityFundFee.div(5));\r\n        emit Transfer(from, address(publicityFundAddress4),PublicityFundFee.div(5));\r\n        emit Transfer(from, address(publicityFundAddress5),PublicityFundFee.div(5));\r\n    }\r\n\r\n\r\n\r\n    function _takeBurnFee(address from,uint256 BurnFee) private {\r\n        if (BurnFee==0)return;\r\n        _balances[address(0xdead)] = _balances[address(0xdead)].add(BurnFee);\r\n        emit Transfer(from, address(0xdead),BurnFee);\r\n    }\r\n\r\n    function _takeReferrerFee(address from,uint256 ReferrerFee) private {\r\n\r\n        dividendsToReferrer(from,ReferrerFee);\r\n    }\r\n\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n\r\n   function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap{\r\n\r\n        if(contractTokenBalance >= numTokensToSell){\r\n            AddLiquidityPool(addLiquidityPool).swapAndLiquify(contractTokenBalance);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function _updateReferralRelationship(address from, address to) internal {\r\n\r\n        if (address(from).isContract()||address(to).isContract()){\r\n            return;\r\n        }\r\n\r\n        if (alreadyBuy[to]==true){\r\n          return;\r\n        }\r\n        if(isExcludedFromReferral[to]){\r\n            return;\r\n        }\r\n        if (from== to) { // referrer cannot be user himself/herself\r\n          return;\r\n        }\r\n\r\n        if (referralRelationships[to] != address(0)) { // referrer has been set\r\n          return;\r\n        }\r\n\r\n        if (referralRelationships[from] == to) { \r\n          return;\r\n        }\r\n\r\n        referralRelationships[to] = from;\r\n\r\n    }\r\n\r\n    function getReferralRelationship(address user) public view returns(address){\r\n        return referralRelationships[user];\r\n    }\r\n    function process(uint256 gas) private {\r\n        \r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if(shareholderCount == 0)return;\r\n        uint256 nowbanance = _balances[address(this)];\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n                \r\n            }\r\n            uint256 amount = nowbanance.mul(IERC721(NFTAddress).balanceOf(shareholders[currentIndex])).div(IERC721(NFTAddress).totalSupply());\r\n\r\n            if(_balances[address(this)] < amount)return;\r\n                distributeDividend(shareholders[currentIndex],amount);\r\n                gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n                gasLeft = gasleft();\r\n                currentIndex++;\r\n                iterations++;\r\n            }\r\n    }\r\n\r\n    function distributeDividend(address shareholder ,uint256 amount) internal {\r\n            _balances[address(this)] = _balances[address(this)].sub(amount);\r\n            _balances[shareholder] = _balances[shareholder].add(amount);\r\n             emit Transfer(address(this), shareholder, amount);\r\n    }\r\n\r\n    function setShare(address shareholder) private {\r\n           if(_updated[shareholder] ){      \r\n                if(IERC721(NFTAddress).balanceOf(shareholder) == 0) quitShare(shareholder);              \r\n                return;  \r\n           }\r\n           if(IERC721(NFTAddress).balanceOf(shareholder) == 0) return;  \r\n            addShareholder(shareholder);\r\n            _updated[shareholder] = true;\r\n      }\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n    function quitShare(address shareholder) private {\r\n           removeShareholder(shareholder);   \r\n           _updated[shareholder] = false; \r\n      }\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    \r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract OSCToken is ERC20 {\r\n  using SafeERC20 for IERC20;\r\n  using Address for address;\r\n  using SafeMath for uint;\r\n  constructor () public ERC20(\"OSC Token\", \"OSC\", 18,10000000*10**18) {\r\n       _balances[msg.sender] = totalSupply();\r\n        emit Transfer(address(0),msg.sender, totalSupply());\r\n  }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_NFTFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_bountyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_publicityFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_referrerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_technologyFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"alreadyBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReferralRelationship\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToNftDividendsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openNftDividends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicityFundAddress1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicityFundAddress2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicityFundAddress3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicityFundAddress4\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicityFundAddress5\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralRelationships\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addLiquidityPool\",\"type\":\"address\"}],\"name\":\"setAddLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bountyFee\",\"type\":\"uint256\"}],\"name\":\"setBountyFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setBurnPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"}],\"name\":\"setMarketingFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setNftAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToNftDividendsFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setOpenNftDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"publicityFundFee\",\"type\":\"uint256\"}],\"name\":\"setPublicityFundFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referrerFee\",\"type\":\"uint256\"}],\"name\":\"setReferrerFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setRewardBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"technologyFundFee\",\"type\":\"uint256\"}],\"name\":\"setTechnologyFundFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndSendEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"technologyFundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OSCToken", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a9d181222c0ad586325076d05c86fdd002c6fa6aa887ebd318a125beed77ad20"}