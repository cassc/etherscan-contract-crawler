{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.11;\r\npragma experimental ABIEncoderV2;\r\n\r\n// lotto360.io - fruitland game\r\n\r\ncontract Fruitland {\r\n    address private owner;\r\n    uint256 private ctFee = 5;\r\n    bool private status = false;\r\n    uint256 private currentSpinId = 0;\r\n    uint8 public prizeMultiplier = 100;\r\n    uint256 public minSpinAmount = 10000000000000000; // 0.01 bnb\r\n    uint256 public maxSpinAmount = 10000000000000000; // 0.01 bnb\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    enum SpinStatus {\r\n        Ready,\r\n        Closed\r\n    }\r\n\r\n    struct Spin {\r\n        uint256 id;\r\n        uint256 amount;\r\n        uint256 purchaseTime;\r\n        uint256 spinTime;\r\n        uint256 ctFee;\r\n        uint8 multiplier;\r\n        uint256 result;\r\n        uint256 guess;\r\n        address user;\r\n        SpinStatus status;\r\n    }\r\n\r\n    mapping(uint256 => Spin) private Spins;\r\n    mapping(address => uint256[]) private UserSpins;\r\n\r\n    /**************************************************************************************************\r\n     * @dev modifiers\r\n     **************************************************************************************************/\r\n    modifier nonContract() {\r\n        require(tx.origin == msg.sender, \"Contract not allowed\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**************************************************************************************************\r\n     * @dev events\r\n     **************************************************************************************************/\r\n    event SpinPurchased(uint256 id, address user, uint256 amount, uint256 time, uint256 multiplier);\r\n\r\n    event SlotSpined(\r\n        uint256 id,\r\n        address user,\r\n        uint256 amount,\r\n        uint256 guess,\r\n        uint256 result,\r\n        uint256 time,\r\n        uint256 multiplier\r\n    );\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event MinSpinAmountUpdated(uint256 minSpinAmount);\r\n    event MaxSpinAmountUpdated(uint256 maxSpinAmount);\r\n    event TokenTransferred(address to, uint256 amount);\r\n    event MultiplierUpdated(uint8 multiplier);\r\n    event InjectFunds(address indexed sender);\r\n\r\n    /**************************************************************************************************\r\n     * @dev Contspiner Functions\r\n     **************************************************************************************************/\r\n    function FundsInject() public payable {\r\n        emit InjectFunds(msg.sender);\r\n    }\r\n\r\n    function SetContractFee(uint8 _ctFee) external onlyOwner nonContract {\r\n        ctFee = _ctFee;\r\n    }\r\n\r\n    function SetPrizeMultiplier(uint8 _prizeMultiplier) external onlyOwner nonContract {\r\n        prizeMultiplier = _prizeMultiplier;\r\n        emit MultiplierUpdated(prizeMultiplier);\r\n    }\r\n\r\n    function SetMinSpinAmount(uint256 _minSpinAmount) external onlyOwner nonContract {\r\n        minSpinAmount = _minSpinAmount;\r\n        emit MinSpinAmountUpdated(minSpinAmount);\r\n    }\r\n\r\n    function SetMaxSpinAmount(uint256 _maxSpinAmount) external onlyOwner nonContract {\r\n        maxSpinAmount = _maxSpinAmount;\r\n        emit MaxSpinAmountUpdated(maxSpinAmount);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner nonContract {\r\n        address oldOwner = owner;\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    /**************************************************************************************************\r\n     * @dev MainGame Functions\r\n     **************************************************************************************************/\r\n    function PurchaseSpin() public payable nonContract {\r\n        require(msg.value >= minSpinAmount, \"Spin amount must be greater than minimum amount\");\r\n        require(msg.value <= maxSpinAmount, \"Spin amount must be less than maximum amount\");\r\n\r\n        require(!_anyReadySpins(msg.sender), \"You already purchase a spin\");\r\n\r\n        uint256 toPay = ((msg.value - ((msg.value / 100) * ctFee)) * prizeMultiplier);\r\n        require(address(this).balance > toPay, \"Spin prize is bigger than contract balance, try small amount\");\r\n\r\n        currentSpinId++;\r\n\r\n        Spins[currentSpinId - 1] = Spin({\r\n            id: currentSpinId,\r\n            amount: msg.value,\r\n            purchaseTime: block.timestamp,\r\n            spinTime: 0,\r\n            ctFee: ctFee,\r\n            multiplier: prizeMultiplier,\r\n            guess: 0,\r\n            result: 0,\r\n            user: msg.sender,\r\n            status: SpinStatus.Ready\r\n        });\r\n\r\n        UserSpins[msg.sender].push(currentSpinId);\r\n\r\n        emit SpinPurchased(currentSpinId, msg.sender, msg.value, block.timestamp, prizeMultiplier);\r\n    }\r\n\r\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n    function SpinSlot(\r\n        uint256 seed,\r\n        uint256 guess,\r\n        uint256 spinId,\r\n        address user\r\n    ) public onlyOwner nonContract returns (uint256) {\r\n        Spin memory spin = Spins[spinId - 1];\r\n        require(spin.status == SpinStatus.Ready, \"Spin is spinned before\");\r\n        require(user == spin.user, \"Spin belongs to other user\");\r\n        require(guess > 999999, \"Guessed number is too low\");\r\n        require(guess < 2000000, \"Guessed number is too high\");\r\n\r\n        uint256 result = uint256(_generateRandomNumber(seed));\r\n\r\n        Spins[spinId - 1].spinTime = block.timestamp;\r\n        Spins[spinId - 1].result = result;\r\n        Spins[spinId - 1].guess = guess;\r\n        Spins[spinId - 1].status = SpinStatus.Closed;\r\n\r\n        if (guess == result) {\r\n            uint256 toPay = (spin.amount - ((spin.amount / 100) * ctFee)) * prizeMultiplier;\r\n            _transferTokens(spin.user, toPay);\r\n        }\r\n\r\n        emit SlotSpined(spin.id, spin.user, spin.amount, guess, result, block.timestamp, spin.multiplier);\r\n        return result;\r\n    }\r\n\r\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n    function _generateRandomNumber(uint256 _seed) private view onlyOwner nonContract returns (uint256) {\r\n        uint256 number = uint256(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    _seed,\r\n                    block.number,\r\n                    block.coinbase,\r\n                    block.gaslimit,\r\n                    block.timestamp,\r\n                    blockhash(block.number - 1),\r\n                    status\r\n                )\r\n            )\r\n        );\r\n\r\n        return (number % 1000000) + 1000000;\r\n    }\r\n\r\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n    function _anyReadySpins(address user) private view returns (bool) {\r\n        uint256[] memory userSpins = UserSpins[user];\r\n        for (uint256 i = 0; i < userSpins.length; i++) {\r\n            uint256 spinId = userSpins[i];\r\n            if (Spins[spinId - 1].status == SpinStatus.Ready) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**************************************************************************************************\r\n     * @dev Payment Functions\r\n     **************************************************************************************************/\r\n    function _transferTokens(address _to, uint256 _amount) private onlyOwner nonContract {\r\n        uint256 currentBalance = address(this).balance;\r\n        require(currentBalance >= _amount, \"insufficient contract balance\");\r\n        payable(_to).transfer(_amount);\r\n\r\n        emit TokenTransferred(_to, _amount);\r\n    }\r\n\r\n    function WithdrawToken(address to, uint256 amount) public onlyOwner nonContract {\r\n        _transferTokens(to, amount);\r\n    }\r\n\r\n    /**************************************************************************************************\r\n     * @dev Getter Functions\r\n     **************************************************************************************************/\r\n    function GetSpins() public view onlyOwner nonContract returns (Spin[] memory) {\r\n        Spin[] memory spins = new Spin[](currentSpinId);\r\n        for (uint256 i = 0; i < currentSpinId; i++) {\r\n            spins[i] = Spins[i];\r\n        }\r\n        return spins;\r\n    }\r\n\r\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n    function GetSpinById(uint256 spinId) public view onlyOwner returns (Spin memory) {\r\n        return Spins[spinId - 1];\r\n    }\r\n\r\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n    function GetUserSpins(address userAddress) public view onlyOwner nonContract returns (Spin[] memory) {\r\n        uint256[] memory userSpins = UserSpins[userAddress];\r\n        uint256 size = userSpins.length;\r\n        Spin[] memory spins = new Spin[](size);\r\n\r\n        for (uint256 i = 0; i < size; i++) {\r\n            uint256 spinId = userSpins[i];\r\n            spins[i] = Spins[spinId - 1];\r\n        }\r\n        return spins;\r\n    }\r\n\r\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n    function UserGetSpinById(uint256 spinId) public view returns (Spin memory) {\r\n        Spin memory spin;\r\n        if (Spins[spinId - 1].user == msg.sender) {\r\n            spin = Spins[spinId - 1];\r\n        }\r\n        return spin;\r\n    }\r\n\r\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n    function GetReadySpin() public view returns (Spin memory) {\r\n        uint256[] memory userSpins = UserSpins[msg.sender];\r\n        Spin memory spin;\r\n        for (uint256 i = 0; i < userSpins.length; i++) {\r\n            uint256 spinId = userSpins[i];\r\n            if (Spins[spinId - 1].status == SpinStatus.Ready) {\r\n                spin = Spins[spinId - 1];\r\n            }\r\n        }\r\n        return spin;\r\n    }\r\n\r\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n    function GetMyHistory() public view returns (Spin[] memory) {\r\n        uint256[] memory userSpins = UserSpins[msg.sender];\r\n        uint256 size = userSpins.length;\r\n        Spin[] memory spins = new Spin[](size);\r\n\r\n        for (uint256 i = 0; i < size; i++) {\r\n            uint256 spinId = userSpins[i];\r\n            spins[i] = Spins[spinId - 1];\r\n        }\r\n        return spins;\r\n    }\r\n\r\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n    function GetSettingForUser()\r\n        public\r\n        view\r\n        returns (\r\n            uint8,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (prizeMultiplier, minSpinAmount, maxSpinAmount);\r\n    }\r\n\r\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n    function GetSettingForAdmin()\r\n        public\r\n        view\r\n        onlyOwner\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            address\r\n        )\r\n    {\r\n        return (prizeMultiplier, minSpinAmount, maxSpinAmount, ctFee, currentSpinId, owner);\r\n    }\r\n\r\n    function SetStatus(bool newStatus) public {\r\n        status = newStatus;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"InjectFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSpinAmount\",\"type\":\"uint256\"}],\"name\":\"MaxSpinAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minSpinAmount\",\"type\":\"uint256\"}],\"name\":\"MinSpinAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"multiplier\",\"type\":\"uint8\"}],\"name\":\"MultiplierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"guess\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"SlotSpined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"SpinPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FundsInject\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetMyHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spinTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ctFee\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"multiplier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guess\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum Fruitland.SpinStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Fruitland.Spin[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetReadySpin\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spinTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ctFee\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"multiplier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guess\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum Fruitland.SpinStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Fruitland.Spin\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetSettingForAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetSettingForUser\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"spinId\",\"type\":\"uint256\"}],\"name\":\"GetSpinById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spinTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ctFee\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"multiplier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guess\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum Fruitland.SpinStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Fruitland.Spin\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GetSpins\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spinTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ctFee\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"multiplier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guess\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum Fruitland.SpinStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Fruitland.Spin[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"GetUserSpins\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spinTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ctFee\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"multiplier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guess\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum Fruitland.SpinStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Fruitland.Spin[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PurchaseSpin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_ctFee\",\"type\":\"uint8\"}],\"name\":\"SetContractFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSpinAmount\",\"type\":\"uint256\"}],\"name\":\"SetMaxSpinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSpinAmount\",\"type\":\"uint256\"}],\"name\":\"SetMinSpinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_prizeMultiplier\",\"type\":\"uint8\"}],\"name\":\"SetPrizeMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"SetStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guess\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spinId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"SpinSlot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"spinId\",\"type\":\"uint256\"}],\"name\":\"UserGetSpinById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spinTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ctFee\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"multiplier\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guess\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum Fruitland.SpinStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct Fruitland.Spin\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSpinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSpinAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizeMultiplier\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Fruitland", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c707c8c9696412a85e0598f9c6310ca9ddfd55fddb11ba3f118d516929e26aee"}