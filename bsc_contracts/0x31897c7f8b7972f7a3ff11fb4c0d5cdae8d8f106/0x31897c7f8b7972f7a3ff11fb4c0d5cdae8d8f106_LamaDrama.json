{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n\r\nIn the expansive and enchanting Cryptoverse, there exist a thousand Lamas, guardians of digital wealth, \r\nand keepers of hidden codes. Each Lama, distinguished and unique, holds a fragment of the secret cipher \r\nthat can unlock vast vaults of virtual value! Legend whispers that assembling forty Lamas of the same \r\nlineage unveils unparalleled financial fortune and boundless bounty!\r\n\r\nThus begins your spirited quest to collect these legendary Lamas. Aspiring collectors, \r\nit's time to embark through the realms of coded curiosities to gather the esteemed forty and unlock your fortune! \r\n\r\nWebsite: https://www.lama-drama.com/\r\nTelegram: https://t.me/Let_the_drama_begin\r\n\r\nAuthor: TonyBoy\r\n\r\n**/\r\n\r\npragma solidity 0.8.16;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\n    // Main Lama Drama contract variables and functions\r\n\r\ncontract LamaDrama is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private bots;\r\n\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    mapping(address => uint256) private _holderTickets;\r\n\r\n    mapping(address => bool) private _isExcludedFromLottery;\r\n    modifier notExcludedFromLottery(address account) {\r\n    require(!_isExcludedFromLottery[account], \"Address excluded from lottery\");\r\n    _;\r\n    }\r\n\r\n    bool public transferDelayEnabled = false;\r\n    address payable private _taxWallet;\r\n\r\n    // Lottery Features and Ticket Pricing + Time for lottery\r\n\r\n    uint256 private _lotteryPool = 0;\r\n    uint256 private _lotteryTaxRate = 28;\r\n    uint256 private _lastLotteryTime;\r\n    uint256 private constant _lotteryDuration = 1 hours;\r\n    uint256 private _ticketPrice = 1000;\r\n    address[] private _holders;\r\n    address private _lastWinner;\r\n\r\n    // Auto Tax Adjustments and Variables\r\n\r\n    uint256 private _initialBuyTax = 8;\r\n    uint256 private _initialSellTax = 16;\r\n    uint256 private _finalBuyTax = 8;\r\n    uint256 private _finalSellTax = 8;\r\n    uint256 private _reduceBuyTaxAt = 15;\r\n    uint256 private _reduceSellTaxAt = 50;\r\n    uint256 private _buyCount = 0;\r\n\r\n    // Auto Liquidity Injections Variables\r\n\r\n    uint256 liquidityRate = 20;\r\n\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 10000000 * 10 ** _decimals;\r\n    string private constant _name = unicode\"Lama Drama\";\r\n    string private constant _symbol = unicode\"LAMA\";\r\n    uint256 public _maxTxAmount = 10000000 * 10 ** _decimals;\r\n    uint256 public _maxWalletSize = 10000000 * 10 ** _decimals;\r\n    uint256 public _maxTaxSwap = 50000 * 10 ** _decimals;\r\n    uint256 public _swapThreshold = 50000 * 10 ** _decimals;\r\n    uint256 private _lastSwapTime;\r\n\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() {\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\nfunction _transfer(address from, address to, uint256 amount) private {\r\n    require(from != address(0), \"ERC20: transfer from the zero address\");\r\n    require(to != address(0), \"ERC20: transfer to the zero address\");\r\n    require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n    uint256 taxAmount = 0;\r\n    uint256 liquidityAmount;\r\n\r\n    if (from != owner() && to != owner()) {\r\n        taxAmount = amount\r\n            .mul(\r\n                (_buyCount > _reduceBuyTaxAt)\r\n                    ? _finalBuyTax\r\n                    : _initialBuyTax\r\n            )\r\n            .div(100);\r\n\r\n        \r\n        liquidityAmount = taxAmount.mul(2).div(100);\r\n        _balances[address(this)] = _balances[address(this)].add(liquidityAmount);\r\n        \r\n        if (transferDelayEnabled) {\r\n            if (\r\n                to != address(uniswapV2Router) &&\r\n                to != address(uniswapV2Pair)\r\n            ) {\r\n                require(\r\n                    _holderLastTransferTimestamp[tx.origin] < block.timestamp,\r\n                    \"_transfer:: Transfer Delay enabled. Only one purchase per block allowed.\"\r\n                );\r\n                _holderLastTransferTimestamp[tx.origin] = block.timestamp;\r\n            }\r\n        }\r\n\r\n        if (\r\n            from == uniswapV2Pair &&\r\n            to != address(uniswapV2Router) &&\r\n            !_isExcludedFromFee[to]\r\n        ) {\r\n            require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n            require(\r\n                balanceOf(to) + amount <= _maxWalletSize,\r\n                \"Exceeds the maxWalletSize.\"\r\n            );\r\n            _buyCount++;\r\n\r\n            // Lottery Entry\r\n            _addToLottery(to, amount);\r\n\r\n            // Check for a Draw Lottery\r\n            if (block.timestamp.sub(_lastLotteryTime) > _lotteryDuration) {\r\n                _drawWinner();\r\n                _resetTickets();\r\n                _lastLotteryTime = block.timestamp;\r\n            }\r\n        }\r\n\r\n        if (to == uniswapV2Pair && from != address(this)) {\r\n            taxAmount = amount\r\n                .mul(\r\n                    (_buyCount > _reduceSellTaxAt)\r\n                        ? _finalSellTax\r\n                        : _initialSellTax\r\n                )\r\n                .div(100);\r\n\r\n            \r\n            liquidityAmount = taxAmount.div(2);\r\n            taxAmount = taxAmount.sub(liquidityAmount);\r\n        }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n            // Check for Swap Threshold to be met\r\n    if (\r\n        !inSwap && \r\n        to == uniswapV2Pair &&\r\n        swapEnabled &&\r\n        contractTokenBalance >= _swapThreshold &&\r\n        block.timestamp - _lastSwapTime > 10 // Time Interval for Swaps | Prevent the loop\r\n) {\r\n        inSwap = true; // Start the swap logic with incoming transaction\r\n        _lastSwapTime = block.timestamp; // Update the last swap time when you enter the swap logic\r\n\r\n        uint256 tokensToSwap = contractTokenBalance > _maxTaxSwap ? _maxTaxSwap : contractTokenBalance;\r\n\r\n    // Calculate tokens for each action\r\n        uint256 liquidityTokens = tokensToSwap.mul(liquidityRate).div(100);  \r\n        uint256 taxTokens = tokensToSwap.sub(liquidityTokens);\r\n\r\n        uint256 half = liquidityTokens.div(2);\r\n        uint256 otherHalf = liquidityTokens.sub(half);\r\n        uint256 tokensToSwapForBNB = taxTokens.add(half);\r\n\r\n    // Swap tokens for BNB\r\n        swapTokensForEth(tokensToSwapForBNB);\r\n    \r\n    // Calculate BNB for each action (lottery + marketing)\r\n        uint256 newBalance = address(this).balance;\r\n        uint256 lotteryBNB = newBalance.mul(_lotteryTaxRate).div(100);\r\n        uint256 marketingBNB = newBalance.sub(lotteryBNB);\r\n\r\n        _lotteryPool = _lotteryPool.add(lotteryBNB);  // Increase the lottery pool\r\n        _taxWallet.transfer(marketingBNB);  // Send BNB to marketing wallet or tax wallet\r\n\r\n    // Add liquidity injection\r\n        addLiquidity(otherHalf, half.mul(address(this).balance).div(tokensToSwapForBNB));\r\n\r\n        inSwap = false; // Stop the Swap and prevent the loop\r\n}\r\n    }\r\n\r\n    if (taxAmount > 0) {\r\n        _balances[address(this)] = _balances[address(this)].add(taxAmount);\r\n        emit Transfer(from, address(this), taxAmount);\r\n    }\r\n\r\n    _balances[from] = _balances[from].sub(amount);\r\n    _balances[to] = _balances[to].add(amount.sub(taxAmount));\r\n    emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a > b) ? b : a;\r\n    }\r\n\r\n    function _addToLottery(address buyer, uint256 amount) private notExcludedFromLottery(buyer) {\r\n    uint256 tickets = amount.div(_ticketPrice);\r\n    if (_holderTickets[buyer] == 0 && tickets > 0) {\r\n        _holders.push(buyer); \r\n    }\r\n    _holderTickets[buyer] = _holderTickets[buyer].add(tickets);\r\n    }\r\n\r\n    function _drawWinner() private returns (address) {\r\n    uint256 totalTickets = 0;\r\n    \r\n    for (uint256 i = 0; i < _holders.length; i++) {\r\n        totalTickets = totalTickets.add(_holderTickets[_holders[i]]);\r\n    }\r\n\r\n    require(totalTickets > 0, \"No tickets to draw a winner from.\");\r\n\r\n    // Random selection of the winner amongst the tickets in the current round\r\n    uint256 randomTicket = _pseudoRandom() % totalTickets + 1;\r\n    uint256 checkedTickets = 0;\r\n\r\n    for (uint256 i = 0; i < _holders.length; i++) {\r\n    checkedTickets = checkedTickets.add(_holderTickets[_holders[i]]);\r\n    if (randomTicket <= checkedTickets) {\r\n        // Winner is found here and distributes the pool balance to the winner\r\n        if (address(this).balance > 0) {\r\n            payable(_holders[i]).transfer(address(this).balance);\r\n            _lotteryPool = 0;  // Lottery Pool reset\r\n        }\r\n\r\n        // Store the last winner's address\r\n        _lastWinner = _holders[i];\r\n\r\n        return _holders[i];\r\n    }\r\n    }\r\n\r\n    return address(0);\r\n    }\r\n\r\n    function _pseudoRandom() private view returns (uint256) {\r\n    return uint256(keccak256(abi.encodePacked(block.difficulty, block.timestamp, _holders)));\r\n    }\r\n\r\n    function _resetTickets() private {\r\n    // Reset the ticket count for all holders.\r\n    for (uint256 i = 0; i < _holders.length; i++) {\r\n        _holderTickets[_holders[i]] = 0;\r\n    }\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    // Automatic Liquidity addition from the taxes\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n    // Approve the router to spend the tokens\r\n    _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n    // Add the liquidity\r\n    uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n        address(this),\r\n        tokenAmount,\r\n        0,  // set min amount to 0 to ensure all tokens are added\r\n        0,  // set min amount to 0 to ensure all ETH is added\r\n        owner(),\r\n        block.timestamp\r\n    );\r\n    }\r\n\r\n    function getTicketsOf(address holder) public view returns (uint256) {\r\n    return _holderTickets[holder];\r\n    }\r\n\r\n    function getTotalTicketsForCurrentRound() public view returns (uint256) {\r\n    uint256 totalTickets = 0;\r\n    for (uint256 i = 0; i < _holders.length; i++) {\r\n        totalTickets = totalTickets.add(_holderTickets[_holders[i]]);\r\n    }\r\n    return totalTickets;\r\n    }\r\n\r\n    function getCurrentLotteryPool() public view returns (uint256) {\r\n    return _lotteryPool;\r\n    }\r\n\r\n    function getReadableLotteryPool() public view returns (uint256, uint256) {\r\n    uint256 baseValue = _lotteryPool.div(1e18);\r\n    uint256 fractionalValue = _lotteryPool % 1e18; \r\n    return (baseValue, fractionalValue);\r\n    }\r\n\r\n    function getLastWinner() public view returns (address) {\r\n    return _lastWinner;\r\n    }\r\n\r\n    function excludeFromLottery(address account) external onlyOwner {\r\n    _isExcludedFromLottery[account] = true;\r\n    }\r\n\r\n    function includeInLottery(address account) external onlyOwner {\r\n    _isExcludedFromLottery[account] = false;\r\n    }\r\n\r\n    function isExcludedFromLottery(address account) external view returns (bool) {\r\n    return _isExcludedFromLottery[account];\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize = _tTotal;\r\n        transferDelayEnabled = false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    // Called only once and never again\r\n    // Uniswap Router: 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n    // Pancakeswap Router: 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n    // Pancakeswap Testnet Router: 0xD99D1c33F9fC3444f8101754aBC46c52416550D1\r\n\r\n    function openTrading() external onlyOwner {\r\n        require(!tradingOpen, \"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            uniswapV2Router.WETH()\r\n        );\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender() == _taxWallet);\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if (tokenBalance > 0) {\r\n            swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0) {\r\n            sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentLotteryPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReadableLotteryPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getTicketsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTicketsForCurrentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromLottery\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LamaDrama", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6d9f63221d1fe594e6b4d67aa720c74ee0a40cc505581298d4f8b6d4e65cf3b4"}