{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Farm/MasterCharge/MintMasterCharge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Elastic-2.0\\n\\npragma solidity 0.8.4;\\nimport './MasterCharge.sol';\\n\\ncontract MintMasterCharge is MasterCharge {\\n\\tconstructor(\\n\\t\\tIERC20Metadata _rewardToken,\\n\\t\\tuint256 _rewardPerBlock,\\n\\t\\tuint256 _startBlock,\\n\\t\\tuint256 _bonusEndBlock,\\n\\t\\tIPancakeRouter02 _router,\\n\\t\\taddress[] memory _rewardToStablePath\\n\\t)\\n\\t\\tMasterCharge(\\n\\t\\t\\t_rewardToken,\\n\\t\\t\\t_rewardPerBlock,\\n\\t\\t\\t_startBlock,\\n\\t\\t\\t_bonusEndBlock,\\n\\t\\t\\t_router,\\n\\t\\t\\t_rewardToStablePath\\n\\t\\t)\\n\\t{}\\n\\n\\t/*\\n\\t * @dev This method mints reward tokens as a way to fund farms\\n\\t */\\n\\tfunction _fundRewardTokens(address recipient, uint256 amount)\\n\\t\\tinternal\\n\\t\\toverride\\n\\t{\\n\\t\\tIMintableToken(address(rewardToken)).mint(recipient, amount);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"/contracts/util/PriceCalculator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Elastic-2.0\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '../Interfaces/IPancakeRouter02.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\n\\nabstract contract PriceCalculator {\\n\\tfunction _getTokenPrice(\\n\\t\\tIPancakeRouter02 router,\\n\\t\\taddress[] memory tokenToStable\\n\\t) internal view virtual returns (uint256) {\\n\\t\\t//special case where token is stable\\n\\t\\tif (tokenToStable.length == 1) {\\n\\t\\t\\treturn 1e18;\\n\\t\\t}\\n\\n\\t\\tuint256[] memory amounts = router.getAmountsOut(1e14, tokenToStable);\\n\\t\\tuint256 priceMultiplier = uint256(\\n\\t\\t\\t10 **\\n\\t\\t\\t\\t(uint256(18) -\\n\\t\\t\\t\\t\\t(\\n\\t\\t\\t\\t\\t\\tIERC20Metadata(tokenToStable[tokenToStable.length - 1])\\n\\t\\t\\t\\t\\t\\t\\t.decimals()\\n\\t\\t\\t\\t\\t))\\n\\t\\t);\\n\\t\\treturn amounts[amounts.length - 1] * 1e4 * priceMultiplier;\\n\\t}\\n\\n\\tfunction _getLPTokenPrice(\\n\\t\\tIPancakeRouter02 router,\\n\\t\\taddress[] memory token0ToStable,\\n\\t\\taddress[] memory token1ToStable,\\n\\t\\tIERC20 lpToken\\n\\t) internal view virtual returns (uint256) {\\n\\t\\tuint256 token0InPool = IERC20(token0ToStable[0]).balanceOf(\\n\\t\\t\\taddress(lpToken)\\n\\t\\t);\\n\\t\\tuint256 token1InPool = IERC20(token1ToStable[0]).balanceOf(\\n\\t\\t\\taddress(lpToken)\\n\\t\\t);\\n\\n\\t\\tuint256 token0BalanceMultiplier = uint256(\\n\\t\\t\\t10**(uint256(18) - (IERC20Metadata(token0ToStable[0]).decimals()))\\n\\t\\t);\\n\\n\\t\\tuint256 token1BalanceMultiplier = uint256(\\n\\t\\t\\t10**(uint256(18) - (IERC20Metadata(token1ToStable[0]).decimals()))\\n\\t\\t);\\n\\n\\t\\tuint256 totalPriceOfPool = token0InPool *\\n\\t\\t\\ttoken0BalanceMultiplier *\\n\\t\\t\\t(_getTokenPrice(router, token0ToStable)) +\\n\\t\\t\\ttoken1InPool *\\n\\t\\t\\ttoken1BalanceMultiplier *\\n\\t\\t\\t(_getTokenPrice(router, token1ToStable));\\n\\n\\t\\treturn totalPriceOfPool / (lpToken.totalSupply());\\n\\t}\\n}\\n\"\r\n    },\r\n    \"/contracts/Sentry/Sentry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Elastic-2.0\\n\\npragma solidity 0.8.4;\\n\\nimport './ISentryStrategy.sol';\\nimport './ISanctionsList.sol';\\nimport '@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\n\\n/**\\n * @title Charge Defi Sentry contract\\n * @notice Allows registration of custom contracts to allow actions per address. Contracts can extend this contract and\\n \\t\\t  use the canExecute modifier for functions that need to be restricted\\n *\\n */\\nabstract contract Sentry is AccessControlEnumerable {\\n\\t// Strategies that can be used to determine to block action;\\n\\tISentryStrategy[] public sentryStrategies;\\n\\n\\t// Contract that looks up sanctioned wallets provided by Chainanalysis\\n\\tISanctionsList public sanctionsList;\\n\\n\\tevent AddSentryStrategy(address indexed strategy);\\n\\tevent RemoveSentryStrategy(address indexed strategy);\\n\\tevent UpdateSanctionsList(address indexed sanctionsList);\\n\\n\\tmodifier canExecute(address _address) {\\n\\t\\t// if sanctions list is registered, only accounts not on the list can proceed\\n\\t\\tif (address(sanctionsList) != address(0)) {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\t!sanctionsList.isSanctioned(_address),\\n\\t\\t\\t\\t'Address is sanctioned'\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\t// accounts that are allowed via sentry strategies can proceed\\n\\t\\tfor (uint256 i = 0; i < sentryStrategies.length; i++) {\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tsentryStrategies[i].isAllowed(_address),\\n\\t\\t\\t\\t'Blocked by strategy'\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Adds an address as ISentryStrategy\\n\\t * @param strategy The strategy contract\\n\\t */\\n\\tfunction addSentryStrategy(ISentryStrategy strategy)\\n\\t\\texternal\\n\\t\\tonlyRole(DEFAULT_ADMIN_ROLE)\\n\\t{\\n\\t\\trequire(sentryStrategies.length <= 10, 'Too many strategies');\\n\\n\\t\\tfor (uint256 i = 0; i < sentryStrategies.length; i++) {\\n\\t\\t\\trequire(sentryStrategies[i] != strategy, 'Strategy exists');\\n\\t\\t}\\n\\t\\tsentryStrategies.push(strategy);\\n\\n\\t\\temit AddSentryStrategy(address(strategy));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Removes an address as ISentryStrategy\\n\\t * @param strategy The strategy contract\\n\\t */\\n\\tfunction removeSentryStrategy(ISentryStrategy strategy)\\n\\t\\texternal\\n\\t\\tonlyRole(DEFAULT_ADMIN_ROLE)\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < sentryStrategies.length; i++) {\\n\\t\\t\\tif (sentryStrategies[i] == strategy) {\\n\\t\\t\\t\\tsentryStrategies[i] = sentryStrategies[\\n\\t\\t\\t\\t\\tsentryStrategies.length - 1\\n\\t\\t\\t\\t];\\n\\t\\t\\t\\tsentryStrategies.pop();\\n\\t\\t\\t\\temit RemoveSentryStrategy(address(strategy));\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\trevert('Strategy not found');\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates the sanctions list\\n\\t * @param _sanctionsList The new sanctions list\\n\\t */\\n\\tfunction updateSanctionsList(ISanctionsList _sanctionsList)\\n\\t\\texternal\\n\\t\\tonlyRole(DEFAULT_ADMIN_ROLE)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\taddress(sanctionsList) != address(_sanctionsList),\\n\\t\\t\\t'Should be a new address'\\n\\t\\t);\\n\\t\\tsanctionsList = _sanctionsList;\\n\\t\\temit UpdateSanctionsList(address(sanctionsList));\\n\\t}\\n}\\n\"\r\n    },\r\n    \"/contracts/Sentry/ISentryStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Elastic-2.0\\n\\npragma solidity 0.8.4;\\n\\ninterface ISentryStrategy {\\n\\tfunction isAllowed(address addr) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/Sentry/ISanctionsList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Elastic-2.0\\n\\npragma solidity 0.8.4;\\n\\ninterface ISanctionsList {\\n\\tfunction isSanctioned(address addr) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/Interfaces/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Elastic-2.0\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n// For interacting with our own strategy\\ninterface IStrategy {\\n\\tfunction stakedToken() external view returns (IERC20);\\n\\n\\tfunction earnedToken() external view returns (IERC20);\\n\\n\\tfunction stakedTokenPrice() external view returns (uint256);\\n\\n\\t// Total staked tokens managed by strategy\\n\\tfunction stakedLockedTotal() external view returns (uint256);\\n\\n\\t// Main staked token compounding function\\n\\tfunction earn() external;\\n\\n\\t// Transfer want tokens ChargeMaster -> IFOStrategy\\n\\tfunction deposit(uint256 _amount) external returns (uint256);\\n\\n\\t// Transfer want tokens IFOStrategy -> ChargeMaster\\n\\tfunction withdraw(uint256 _amount) external returns (uint256);\\n\\n\\tfunction recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount)\\n\\t\\texternal;\\n}\\n\"\r\n    },\r\n    \"/contracts/Interfaces/IPancakeRouter02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Elastic-2.0\\n\\npragma solidity 0.8.4;\\nimport './IPancakeRouter01.sol';\\n\\ninterface IPancakeRouter02 is IPancakeRouter01 {\\n\\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountETH);\\n\\n\\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountETH);\\n\\n\\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external;\\n\\n\\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable;\\n\\n\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external;\\n}\\n\"\r\n    },\r\n    \"/contracts/Interfaces/IPancakeRouter01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Elastic-2.0\\n\\npragma solidity 0.8.4;\\n\\ninterface IPancakeRouter01 {\\n\\tfunction factory() external pure returns (address);\\n\\n\\tfunction WETH() external pure returns (address);\\n\\n\\tfunction addLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 amountADesired,\\n\\t\\tuint256 amountBDesired,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t)\\n\\t\\texternal\\n\\t\\treturns (\\n\\t\\t\\tuint256 amountA,\\n\\t\\t\\tuint256 amountB,\\n\\t\\t\\tuint256 liquidity\\n\\t\\t);\\n\\n\\tfunction addLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint256 amountTokenDesired,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (\\n\\t\\t\\tuint256 amountToken,\\n\\t\\t\\tuint256 amountETH,\\n\\t\\t\\tuint256 liquidity\\n\\t\\t);\\n\\n\\tfunction removeLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountA, uint256 amountB);\\n\\n\\tfunction removeLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountToken, uint256 amountETH);\\n\\n\\tfunction removeLiquidityWithPermit(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountA, uint256 amountB);\\n\\n\\tfunction removeLiquidityETHWithPermit(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountToken, uint256 amountETH);\\n\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapTokensForExactTokens(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapExactETHForTokens(\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256[] memory amounts);\\n\\n\\tfunction swapTokensForExactETH(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapExactTokensForETH(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapETHForExactTokens(\\n\\t\\tuint256 amountOut,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256[] memory amounts);\\n\\n\\tfunction quote(\\n\\t\\tuint256 amountA,\\n\\t\\tuint256 reserveA,\\n\\t\\tuint256 reserveB\\n\\t) external pure returns (uint256 amountB);\\n\\n\\tfunction getAmountOut(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 reserveIn,\\n\\t\\tuint256 reserveOut\\n\\t) external pure returns (uint256 amountOut);\\n\\n\\tfunction getAmountIn(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 reserveIn,\\n\\t\\tuint256 reserveOut\\n\\t) external pure returns (uint256 amountIn);\\n\\n\\tfunction getAmountsOut(uint256 amountIn, address[] calldata path)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256[] memory amounts);\\n\\n\\tfunction getAmountsIn(uint256 amountOut, address[] calldata path)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"/contracts/Interfaces/IMintableToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Elastic-2.0\\n\\npragma solidity 0.8.4;\\n\\ninterface IMintableToken {\\n\\tfunction mint(address recipient_, uint256 amount_) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/Interfaces/IMasterCharge.sol\": {\r\n      \"content\": \"pragma solidity 0.8.4;\\n\\ninterface IMasterCharge {\\n\\tfunction deposit(uint256 pid, uint256 amount) external;\\n\\n\\tfunction withdraw(uint256 pid, uint256 amount) external;\\n\\n\\tfunction emergencyWithdraw(uint256 pid) external;\\n\\n\\tfunction userInfo(uint256 pid, address user)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256, uint256);\\n\\n\\tfunction TVL(uint256 pid) external view returns (uint256);\\n\\n\\tfunction APR(uint256 pid) external view returns (uint256);\\n\\n\\tfunction stakedTokenPrice(uint256 _pid) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/contracts/Farm/MasterCharge/MasterCharge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Elastic-2.0\\n\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '../../Interfaces/IMintableToken.sol';\\nimport '../../Interfaces/IStrategy.sol';\\nimport '../../util/PriceCalculator.sol';\\nimport '../../Interfaces/IMasterCharge.sol';\\nimport '../../ContractWhitelisted.sol';\\nimport '../../Sentry/Sentry.sol';\\n\\n/*\\n * @dev Farm contract for the launch of the charge ecosystem\\n *\\n * This contract accepts staked tokens and rewards users with reward tokens.\\n * The contract has features to deposit the staked token in external farms to earn yield.\\n * Yield management is handled by strategy contracts\\n */\\nabstract contract MasterCharge is\\n\\tAccessControlEnumerable,\\n\\tReentrancyGuard,\\n\\tPriceCalculator,\\n\\tIMasterCharge,\\n\\tContractWhitelisted,\\n\\tSentry\\n{\\n\\tusing SafeMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\tusing SafeERC20 for IERC20Metadata;\\n\\n\\tuint256 public blocksPerYear = 10512000;\\n\\n\\t// The block number when reward mining ends.\\n\\tuint256 public bonusEndBlock;\\n\\n\\t// The block number when reward mining starts.\\n\\tuint256 public startBlock;\\n\\n\\t// reward tokens created per block.\\n\\tuint256 public rewardPerBlock;\\n\\n\\t// dev rewards in basis points of total rewards\\n\\tuint256 public devRewardPoint;\\n\\n\\t// dev reward address for rewards.\\n\\taddress public devAddress;\\n\\n\\t// project rewards in basis points of total rewards\\n\\tuint256 public projectRewardPoint;\\n\\n\\t// project reward address for rewards.\\n\\taddress public projectAddress;\\n\\n\\t// The precision factor\\n\\tuint256 public PRECISION_FACTOR;\\n\\n\\t// The reward token\\n\\tIERC20Metadata public rewardToken;\\n\\n\\t// The path to convert reward to stable\\n\\taddress[] public rewardToStablePath;\\n\\n\\t// Router to compute prices\\n\\tIPancakeRouter02 public router;\\n\\n\\t// Total allocation points. Must be the sum of all allocation points\\n\\tuint256 public totalAllocPoint = 0;\\n\\n\\t// Info of each user that stakes tokens (stakedToken)\\n\\tmapping(uint256 => mapping(address => UserInfo)) public override userInfo;\\n\\n\\t// Info of each staking pool\\n\\tPoolInfo[] public poolInfo;\\n\\n\\tstruct UserInfo {\\n\\t\\tuint256 amount; // How many staked tokens the user has provided\\n\\t\\tuint256 rewardDebt; // Reward debt\\n\\t}\\n\\n\\tstruct PoolInfo {\\n\\t\\tIERC20 stakedToken; // The staked token\\n\\t\\tuint256 allocPoint; // How many allocation points assigned to this pool.\\n\\t\\tuint256 lastRewardBlock; // The block number of the last pool update\\n\\t\\tuint256 accTokenPerShare; // Accrued token per share\\n\\t\\tIStrategy strategy; // The staking strategy\\n\\t}\\n\\n\\t// Funds reward tokens\\n\\tfunction _fundRewardTokens(address recipient, uint256 amount)\\n\\t\\tinternal\\n\\t\\tvirtual;\\n\\n\\tevent AddPool(address indexed stakedToken, uint256 allocPoint);\\n\\tevent UpdatePool(uint256 indexed pid, uint256 allocPoint);\\n\\tevent AdminTokenRecovery(address tokenRecovered, uint256 amount);\\n\\tevent Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n\\tevent EmergencyWithdraw(\\n\\t\\taddress indexed user,\\n\\t\\tuint256 indexed pid,\\n\\t\\tuint256 amount\\n\\t);\\n\\tevent NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\\n\\tevent NewRewardPerBlock(uint256 rewardPerBlock);\\n\\tevent NewDevRewardPoint(uint256 point);\\n\\tevent NewDevAddress(address indexed newAddress);\\n\\tevent NewProjectRewardPoint(uint256 point);\\n\\tevent NewProjectAddress(address indexed newAddress);\\n\\tevent NewBlocksPerYear(uint256 blocksPerYear);\\n\\tevent RewardsStop(uint256 blockNumber);\\n\\tevent Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n\\tconstructor(\\n\\t\\tIERC20Metadata _rewardToken,\\n\\t\\tuint256 _rewardPerBlock,\\n\\t\\tuint256 _startBlock,\\n\\t\\tuint256 _bonusEndBlock,\\n\\t\\tIPancakeRouter02 _router,\\n\\t\\taddress[] memory _rewardToStablePath\\n\\t) {\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\n\\t\\trewardToken = _rewardToken;\\n\\t\\trewardPerBlock = _rewardPerBlock;\\n\\t\\tstartBlock = _startBlock;\\n\\t\\tbonusEndBlock = _bonusEndBlock;\\n\\n\\t\\tuint256 decimalsRewardToken = uint256(rewardToken.decimals());\\n\\t\\trequire(decimalsRewardToken < 30, 'Must be inferior to 30');\\n\\n\\t\\tPRECISION_FACTOR = uint256(10**(uint256(30).sub(decimalsRewardToken)));\\n\\n\\t\\trouter = _router;\\n\\t\\trewardToStablePath = _rewardToStablePath;\\n\\t}\\n\\n\\tmodifier poolExists(uint256 pid) {\\n\\t\\trequire(pid < poolInfo.length, 'Pool does not exist');\\n\\t\\t_;\\n\\t}\\n\\n\\t/*\\n\\t * @notice Deposit staked tokens and collect reward tokens (if any)\\n\\t * @param _amount: amount to deposit (in stakedToken)\\n\\t * @param _pid: The id of the pool\\n\\t */\\n\\tfunction deposit(uint256 _amount, uint256 _pid)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tnonReentrant\\n\\t\\tpoolExists(_pid)\\n\\t\\tisAllowedContract(msg.sender)\\n\\t\\tcanExecute(msg.sender)\\n\\t{\\n\\t\\tUserInfo storage user = userInfo[_pid][msg.sender];\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\n\\n\\t\\t_updatePool(_pid);\\n\\n\\t\\tif (user.amount > 0) {\\n\\t\\t\\tuint256 pending = user\\n\\t\\t\\t\\t.amount\\n\\t\\t\\t\\t.mul(pool.accTokenPerShare)\\n\\t\\t\\t\\t.div(PRECISION_FACTOR)\\n\\t\\t\\t\\t.sub(user.rewardDebt);\\n\\t\\t\\tif (pending > 0) {\\n\\t\\t\\t\\t_safeRewardTransfer(address(msg.sender), pending);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (_amount > 0) {\\n\\t\\t\\tpool.stakedToken.safeTransferFrom(\\n\\t\\t\\t\\taddress(msg.sender),\\n\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t_amount\\n\\t\\t\\t);\\n\\t\\t\\tuint256 amountDeposit = pool.strategy.deposit(_amount);\\n\\t\\t\\tuser.amount = user.amount.add(amountDeposit);\\n\\t\\t}\\n\\n\\t\\tuser.rewardDebt = user.amount.mul(pool.accTokenPerShare).div(\\n\\t\\t\\tPRECISION_FACTOR\\n\\t\\t);\\n\\n\\t\\temit Deposit(msg.sender, _pid, _amount);\\n\\t}\\n\\n\\t/*\\n\\t * @notice Withdraw staked tokens and collect reward tokens\\n\\t * @param _amount: amount to withdraw (in stakedToken)\\n\\t * @param _pid: The id of the pool\\n\\t */\\n\\tfunction withdraw(uint256 _amount, uint256 _pid)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tnonReentrant\\n\\t\\tpoolExists(_pid)\\n\\t{\\n\\t\\tUserInfo storage user = userInfo[_pid][msg.sender];\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\n\\n\\t\\trequire(user.amount >= _amount, 'Amount to withdraw too high');\\n\\n\\t\\tuint256 stakedTokenSupply = pool.strategy.stakedLockedTotal();\\n\\t\\trequire(stakedTokenSupply > 0, 'Strategy has 0 tokens');\\n\\n\\t\\t_updatePool(_pid);\\n\\n\\t\\tuint256 pending = user\\n\\t\\t\\t.amount\\n\\t\\t\\t.mul(pool.accTokenPerShare)\\n\\t\\t\\t.div(PRECISION_FACTOR)\\n\\t\\t\\t.sub(user.rewardDebt);\\n\\n\\t\\tif (_amount > 0) {\\n\\t\\t\\tuint256 amountRemove = pool.strategy.withdraw(_amount);\\n\\t\\t\\tuser.amount = amountRemove > user.amount\\n\\t\\t\\t\\t? 0\\n\\t\\t\\t\\t: user.amount.sub(amountRemove);\\n\\n\\t\\t\\t_amount = Math.min(\\n\\t\\t\\t\\t_amount,\\n\\t\\t\\t\\tpool.stakedToken.balanceOf(address(this))\\n\\t\\t\\t);\\n\\t\\t\\tpool.stakedToken.safeTransfer(address(msg.sender), _amount);\\n\\t\\t}\\n\\n\\t\\tif (pending > 0) {\\n\\t\\t\\t_safeRewardTransfer(address(msg.sender), pending);\\n\\t\\t}\\n\\n\\t\\tuser.rewardDebt = user.amount.mul(pool.accTokenPerShare).div(\\n\\t\\t\\tPRECISION_FACTOR\\n\\t\\t);\\n\\n\\t\\temit Withdraw(msg.sender, _pid, _amount);\\n\\t}\\n\\n\\t/*\\n\\t * @notice Withdraw staked tokens without caring about rewards\\n\\t * @param _pid: The id of the pool\\n\\t * @dev Needs to be for emergency.\\n\\t */\\n\\tfunction emergencyWithdraw(uint256 _pid)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tnonReentrant\\n\\t\\tpoolExists(_pid)\\n\\t{\\n\\t\\tUserInfo storage user = userInfo[_pid][msg.sender];\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\n\\n\\t\\tuint256 amountToTransfer = user.amount;\\n\\t\\tuser.amount = 0;\\n\\t\\tuser.rewardDebt = 0;\\n\\n\\t\\tif (amountToTransfer > 0) {\\n\\t\\t\\tpool.strategy.withdraw(amountToTransfer);\\n\\t\\t\\tpool.stakedToken.safeTransfer(\\n\\t\\t\\t\\taddress(msg.sender),\\n\\t\\t\\t\\tamountToTransfer\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\temit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n\\t}\\n\\n\\t// Update reward variables for all pools. Be careful of gas spending!\\n\\tfunction massUpdatePools() public {\\n\\t\\tuint256 length = poolInfo.length;\\n\\t\\tfor (uint256 pid = 0; pid < length; ++pid) {\\n\\t\\t\\t_updatePool(pid);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice It allows the admin to recover wrong tokens sent to the contract\\n\\t * @param _tokenAddress: the address of the token to withdraw\\n\\t * @param _tokenAmount: the number of tokens to withdraw\\n\\t * @dev This function is only callable by admin.\\n\\t */\\n\\tfunction recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount)\\n\\t\\texternal\\n\\t\\tonlyRole(DEFAULT_ADMIN_ROLE)\\n\\t{\\n\\t\\trequire(\\n\\t\\t\\t_tokenAddress != address(rewardToken),\\n\\t\\t\\t'Cannot be reward token'\\n\\t\\t);\\n\\n\\t\\tIERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\\n\\n\\t\\temit AdminTokenRecovery(_tokenAddress, _tokenAmount);\\n\\t}\\n\\n\\t/*\\n\\t * @notice Stop rewards\\n\\t * @dev Only callable by owner\\n\\t */\\n\\tfunction stopReward() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tbonusEndBlock = block.number;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Allows admin to add a pool\\n\\t * @param _allocPoint: the allocation points for the pool\\n\\t * @param _stakedToken: the staking token\\n\\t * @param _strategy: the staking strategy\\n\\t * @param _withUpdate: weather to update pools\\n\\t * @dev This function is only callable by admin. Do not call more than once for a single token\\n\\t */\\n\\tfunction addPool(\\n\\t\\tuint256 _allocPoint,\\n\\t\\tIERC20 _stakedToken,\\n\\t\\tIStrategy _strategy,\\n\\t\\tbool _withUpdate\\n\\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\trequire(\\n\\t\\t\\taddress(_strategy.stakedToken()) == address(_stakedToken),\\n\\t\\t\\t'Mismatch staked token'\\n\\t\\t);\\n\\t\\tif (_withUpdate) {\\n\\t\\t\\tmassUpdatePools();\\n\\t\\t}\\n\\t\\tuint256 lastRewardBlock = block.number > startBlock\\n\\t\\t\\t? block.number\\n\\t\\t\\t: startBlock;\\n\\t\\ttotalAllocPoint = totalAllocPoint.add(_allocPoint);\\n\\t\\tpoolInfo.push(\\n\\t\\t\\tPoolInfo({\\n\\t\\t\\t\\tstakedToken: _stakedToken,\\n\\t\\t\\t\\tallocPoint: _allocPoint,\\n\\t\\t\\t\\tlastRewardBlock: lastRewardBlock,\\n\\t\\t\\t\\taccTokenPerShare: 0,\\n\\t\\t\\t\\tstrategy: _strategy\\n\\t\\t\\t})\\n\\t\\t);\\n\\n\\t\\t//approve strategy to spend master tokens\\n\\t\\t_stakedToken.approve(address(_strategy), type(uint256).max);\\n\\t\\temit AddPool(address(_stakedToken), _allocPoint);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Allows admin to update a pool\\n\\t * @param _pid: pool id\\n\\t * @param _allocPoint: the allocation points for the pool\\n\\t * @param _withUpdate: weather to update pools\\n\\t * @dev This function is only callable by admin\\n\\t */\\n\\tfunction updatePool(\\n\\t\\tuint256 _pid,\\n\\t\\tuint256 _allocPoint,\\n\\t\\tbool _withUpdate\\n\\t) external onlyRole(DEFAULT_ADMIN_ROLE) poolExists(_pid) {\\n\\t\\tif (_withUpdate) {\\n\\t\\t\\tmassUpdatePools();\\n\\t\\t}\\n\\t\\ttotalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(\\n\\t\\t\\t_allocPoint\\n\\t\\t);\\n\\t\\tpoolInfo[_pid].allocPoint = _allocPoint;\\n\\t\\temit UpdatePool(_pid, _allocPoint);\\n\\t}\\n\\n\\t/*\\n\\t * @notice Update reward per block\\n\\t * @dev Only callable by owner.\\n\\t * @param _rewardPerBlock: the reward per block\\n\\t */\\n\\tfunction updateRewardPerBlock(uint256 _rewardPerBlock)\\n\\t\\texternal\\n\\t\\tonlyRole(DEFAULT_ADMIN_ROLE)\\n\\t{\\n\\t\\trewardPerBlock = _rewardPerBlock;\\n\\t\\temit NewRewardPerBlock(_rewardPerBlock);\\n\\t}\\n\\n\\t/*\\n\\t * @notice Update dev reward point\\n\\t * @dev Only callable by owner.\\n\\t * @param _devRewardPoint: the dev reward points of total rewards\\n\\t */\\n\\tfunction updateDevRewardPoint(uint256 _devRewardPoint)\\n\\t\\texternal\\n\\t\\tonlyRole(DEFAULT_ADMIN_ROLE)\\n\\t{\\n\\t\\tdevRewardPoint = _devRewardPoint;\\n\\t\\temit NewDevRewardPoint(_devRewardPoint);\\n\\t}\\n\\n\\t/*\\n\\t * @notice Update project reward point\\n\\t * @dev Only callable by owner.\\n\\t * @param _projectRewardPoint: the project reward points of total rewards\\n\\t */\\n\\tfunction updateProjectRewardPoint(uint256 _projectRewardPoint)\\n\\t\\texternal\\n\\t\\tonlyRole(DEFAULT_ADMIN_ROLE)\\n\\t{\\n\\t\\tprojectRewardPoint = _projectRewardPoint;\\n\\t\\temit NewProjectRewardPoint(_projectRewardPoint);\\n\\t}\\n\\n\\t/*\\n\\t * @notice Update dev address\\n\\t * @dev Only callable by owner.\\n\\t * @param _devAddress: the new address\\n\\t */\\n\\tfunction updateDevAddress(address _devAddress)\\n\\t\\texternal\\n\\t\\tonlyRole(DEFAULT_ADMIN_ROLE)\\n\\t{\\n\\t\\trequire(_devAddress != devAddress, 'Same address');\\n\\t\\trequire(_devAddress != address(0), 'Cannot be burn address');\\n\\n\\t\\temit NewDevAddress(_devAddress);\\n\\t\\tdevAddress = _devAddress;\\n\\t}\\n\\n\\t/*\\n\\t * @notice Update project reward address\\n\\t * @dev Only callable by owner.\\n\\t * @param _projectAddress: the new address\\n\\t */\\n\\tfunction updateProjectAddress(address _projectAddress)\\n\\t\\texternal\\n\\t\\tonlyRole(DEFAULT_ADMIN_ROLE)\\n\\t{\\n\\t\\trequire(_projectAddress != projectAddress, 'Same address');\\n\\t\\trequire(_projectAddress != address(0), 'Cannot be burn address');\\n\\n\\t\\temit NewProjectAddress(_projectAddress);\\n\\t\\tprojectAddress = _projectAddress;\\n\\t}\\n\\n\\t/**\\n\\t * @notice It allows the admin to update start and end blocks\\n\\t * @dev This function is only callable by owner.\\n\\t * @param _startBlock: the new start block\\n\\t * @param _bonusEndBlock: the new end block\\n\\t */\\n\\tfunction updateStartAndEndBlocks(\\n\\t\\tuint256 _startBlock,\\n\\t\\tuint256 _bonusEndBlock\\n\\t) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\trequire(block.number < startBlock, 'Pool has started');\\n\\t\\trequire(\\n\\t\\t\\t_startBlock < _bonusEndBlock,\\n\\t\\t\\t'New startBlock must be lower than new endBlock'\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tblock.number < _startBlock,\\n\\t\\t\\t'New startBlock must be higher than current block'\\n\\t\\t);\\n\\n\\t\\tstartBlock = _startBlock;\\n\\t\\tbonusEndBlock = _bonusEndBlock;\\n\\n\\t\\t// Set the lastRewardBlock as the startBlock\\n\\t\\tuint256 length = poolInfo.length;\\n\\t\\tfor (uint256 pid = 0; pid < length; ++pid) {\\n\\t\\t\\tpoolInfo[pid].lastRewardBlock = startBlock;\\n\\t\\t}\\n\\n\\t\\temit NewStartAndEndBlocks(_startBlock, _bonusEndBlock);\\n\\t}\\n\\n\\t/*\\n\\t * @notice Update number of blocks per year\\n\\t * @dev Only callable by owner.\\n\\t * @param _blocksPerYear: the new number of blocks\\n\\t */\\n\\tfunction updateBlocksPerYear(uint256 _blocksPerYear)\\n\\t\\texternal\\n\\t\\tonlyRole(DEFAULT_ADMIN_ROLE)\\n\\t{\\n\\t\\trequire(_blocksPerYear != blocksPerYear, 'Same number');\\n\\n\\t\\temit NewBlocksPerYear(_blocksPerYear);\\n\\t\\tblocksPerYear = _blocksPerYear;\\n\\t}\\n\\n\\t/*\\n\\t * @notice View function to see pending reward on frontend.\\n\\t * @param _user: user address\\n\\t * @param _pid: pool id\\n\\t * @return Pending reward for a given user\\n\\t */\\n\\tfunction pendingReward(address _user, uint256 _pid)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tUserInfo storage user = userInfo[_pid][_user];\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\n\\t\\tuint256 stakedTokenSupply = pool.strategy.stakedLockedTotal();\\n\\t\\tif (block.number > pool.lastRewardBlock && stakedTokenSupply != 0) {\\n\\t\\t\\tuint256 multiplier = _getMultiplier(\\n\\t\\t\\t\\tpool.lastRewardBlock,\\n\\t\\t\\t\\tblock.number\\n\\t\\t\\t);\\n\\t\\t\\tuint256 reward = multiplier\\n\\t\\t\\t\\t.mul(rewardPerBlock)\\n\\t\\t\\t\\t.mul(pool.allocPoint)\\n\\t\\t\\t\\t.div(totalAllocPoint);\\n\\t\\t\\tuint256 adjustedTokenPerShare = pool.accTokenPerShare.add(\\n\\t\\t\\t\\treward.mul(PRECISION_FACTOR).div(stakedTokenSupply)\\n\\t\\t\\t);\\n\\t\\t\\treturn\\n\\t\\t\\t\\tuser\\n\\t\\t\\t\\t\\t.amount\\n\\t\\t\\t\\t\\t.mul(adjustedTokenPerShare)\\n\\t\\t\\t\\t\\t.div(PRECISION_FACTOR)\\n\\t\\t\\t\\t\\t.sub(user.rewardDebt);\\n\\t\\t} else {\\n\\t\\t\\treturn\\n\\t\\t\\t\\tuser\\n\\t\\t\\t\\t\\t.amount\\n\\t\\t\\t\\t\\t.mul(pool.accTokenPerShare)\\n\\t\\t\\t\\t\\t.div(PRECISION_FACTOR)\\n\\t\\t\\t\\t\\t.sub(user.rewardDebt);\\n\\t\\t}\\n\\t}\\n\\n\\t/*\\n\\t * @notice View function to see APR on frontend.\\n\\t * @param _pid: pool id\\n\\t * @return APR for pool\\n\\t */\\n\\tfunction APR(uint256 _pid) external view override returns (uint256) {\\n\\t\\tif (block.number > bonusEndBlock) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\n\\n\\t\\tuint256 reward = blocksPerYear\\n\\t\\t\\t.mul(rewardPerBlock)\\n\\t\\t\\t.mul(pool.allocPoint)\\n\\t\\t\\t.div(totalAllocPoint);\\n\\n\\t\\treturn\\n\\t\\t\\tTVL(_pid) > 0\\n\\t\\t\\t\\t? (reward * _getTokenPrice(router, rewardToStablePath)) /\\n\\t\\t\\t\\t\\tTVL(_pid)\\n\\t\\t\\t\\t: 0;\\n\\t}\\n\\n\\t/*\\n\\t * @notice View function to see TVL on frontend.\\n\\t * @param _pid: pool id\\n\\t * @return TVL for pool\\n\\t */\\n\\tfunction TVL(uint256 _pid) public view override returns (uint256) {\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\n\\n\\t\\treturn\\n\\t\\t\\tpool\\n\\t\\t\\t\\t.strategy\\n\\t\\t\\t\\t.stakedLockedTotal()\\n\\t\\t\\t\\t.mul(pool.strategy.stakedTokenPrice())\\n\\t\\t\\t\\t.div(1e18);\\n\\t}\\n\\n\\t/*\\n\\t * @notice View function to get staked token price on frontend.\\n\\t * @param _pid: pool id\\n\\t * @return Price of staked token\\n\\t */\\n\\tfunction stakedTokenPrice(uint256 _pid)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\n\\t\\treturn pool.strategy.stakedTokenPrice();\\n\\t}\\n\\n\\t/*\\n\\t * @notice View function to get staked locked total on frontend\\n\\t * @param _pid: pool id\\n\\t * @return Total number of tokens staked\\n\\t */\\n\\tfunction stakedLockedTotal(uint256 _pid) public view returns (uint256) {\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\n\\t\\treturn pool.strategy.stakedLockedTotal();\\n\\t}\\n\\n\\t/*\\n\\t * @notice View function to see number of pools.\\n\\t * @return Number of pools\\n\\t */\\n\\tfunction numPools() external view returns (uint256) {\\n\\t\\treturn poolInfo.length;\\n\\t}\\n\\n\\t/*\\n\\t * @notice Update reward variables of the given pool to be up-to-date.\\n\\t * @param _pid: The pool id\\n\\t */\\n\\tfunction _updatePool(uint256 _pid) internal {\\n\\t\\tPoolInfo storage pool = poolInfo[_pid];\\n\\t\\tif (block.number <= pool.lastRewardBlock) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tuint256 stakedTokenSupply = pool.strategy.stakedLockedTotal();\\n\\n\\t\\tif (stakedTokenSupply == 0) {\\n\\t\\t\\tpool.lastRewardBlock = block.number;\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tuint256 multiplier = _getMultiplier(pool.lastRewardBlock, block.number);\\n\\t\\tuint256 reward = multiplier\\n\\t\\t\\t.mul(rewardPerBlock)\\n\\t\\t\\t.mul(pool.allocPoint)\\n\\t\\t\\t.div(totalAllocPoint);\\n\\t\\tpool.accTokenPerShare = pool.accTokenPerShare.add(\\n\\t\\t\\treward.mul(PRECISION_FACTOR).div(stakedTokenSupply)\\n\\t\\t);\\n\\t\\tpool.lastRewardBlock = block.number;\\n\\n\\t\\tif (reward > 0) {\\n\\t\\t\\t// fund pool\\n\\t\\t\\t_fundRewardTokens(address(this), reward);\\n\\n\\t\\t\\tif (devAddress != address(0) && devRewardPoint > 0) {\\n\\t\\t\\t\\t// fund dev wallet\\n\\t\\t\\t\\t_fundRewardTokens(\\n\\t\\t\\t\\t\\tdevAddress,\\n\\t\\t\\t\\t\\treward.mul(devRewardPoint).div(10000)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (projectAddress != address(0) && projectRewardPoint > 0) {\\n\\t\\t\\t\\t// fund project wallet\\n\\t\\t\\t\\t_fundRewardTokens(\\n\\t\\t\\t\\t\\tprojectAddress,\\n\\t\\t\\t\\t\\treward.mul(projectRewardPoint).div(10000)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/*\\n\\t * @notice Safe transfer function, just in case if rounding error causes pool to not have enough\\n\\t */\\n\\tfunction _safeRewardTransfer(address _to, uint256 _amount) internal {\\n\\t\\t_amount = Math.min(_amount, rewardToken.balanceOf(address(this)));\\n\\t\\trewardToken.safeTransfer(_to, _amount);\\n\\t}\\n\\n\\t/*\\n\\t * @notice Return reward multiplier over the given _from to _to block.\\n\\t * @param _from: block to start\\n\\t * @param _to: block to finish\\n\\t */\\n\\tfunction _getMultiplier(uint256 _from, uint256 _to)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tif (_to <= bonusEndBlock) {\\n\\t\\t\\treturn _to.sub(_from);\\n\\t\\t} else if (_from >= bonusEndBlock) {\\n\\t\\t\\treturn 0;\\n\\t\\t} else {\\n\\t\\t\\treturn bonusEndBlock.sub(_from);\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"/contracts/ContractWhitelisted.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Elastic-2.0\\npragma solidity 0.8.4;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nabstract contract ContractWhitelisted is AccessControlEnumerable {\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\n\\tbytes32 public constant whitelisterRole = keccak256('whitelister');\\n\\n\\t// List of contracts that are able to interact with farm\\n\\tEnumerableSet.AddressSet private _whiteListOfContracts;\\n\\n\\tconstructor() {\\n\\t\\t_setupRole(whitelisterRole, msg.sender);\\n\\t}\\n\\n\\tmodifier isAllowedContract(address _address) {\\n\\t\\tif (Address.isContract(_address) || msg.sender != tx.origin) {\\n\\t\\t\\trequire(isAddressOf(_address), 'Illegal, rejected ');\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\t/*\\n\\t * @notice Adds address to whitelisted contracts list\\n\\t * @param _address: Contract address to whitelist\\n\\t */\\n\\tfunction addAddress(address _address)\\n\\t\\texternal\\n\\t\\tonlyRole(whitelisterRole)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn _whiteListOfContracts.add(_address);\\n\\t}\\n\\n\\t/*\\n\\t * @notice Removes address from whitelisted contracts list\\n\\t * @param _address: Contract address to remove from whitelist\\n\\t */\\n\\tfunction delAddress(address _address)\\n\\t\\texternal\\n\\t\\tonlyRole(whitelisterRole)\\n\\t\\treturns (bool)\\n\\t{\\n\\t\\treturn _whiteListOfContracts.remove(_address);\\n\\t}\\n\\n\\tfunction getAddressLength() public view returns (uint256) {\\n\\t\\treturn _whiteListOfContracts.length();\\n\\t}\\n\\n\\tfunction isAddressOf(address _address) public view returns (bool) {\\n\\t\\treturn (_whiteListOfContracts.contains(_address));\\n\\t}\\n\\n\\tfunction getAddress(uint256 index) public view returns (address) {\\n\\t\\trequire(index <= getAddressLength() - 1, 'index out of bounds');\\n\\t\\treturn _whiteListOfContracts.at(index);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable {\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardToStablePath\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"AddSentryStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenRecovered\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocksPerYear\",\"type\":\"uint256\"}],\"name\":\"NewBlocksPerYear\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"NewDevAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"point\",\"type\":\"uint256\"}],\"name\":\"NewDevRewardPoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"NewProjectAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"point\",\"type\":\"uint256\"}],\"name\":\"NewProjectRewardPoint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"NewRewardPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"NewStartAndEndBlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"RemoveSentryStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RewardsStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sanctionsList\",\"type\":\"address\"}],\"name\":\"UpdateSanctionsList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"APR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"TVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISentryStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"addSentryStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"delAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devRewardPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAddressOf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectRewardPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISentryStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"removeSentryStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardToStablePath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sanctionsList\",\"outputs\":[{\"internalType\":\"contract ISanctionsList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sentryStrategies\",\"outputs\":[{\"internalType\":\"contract ISentryStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"stakedLockedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"stakedTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocksPerYear\",\"type\":\"uint256\"}],\"name\":\"updateBlocksPerYear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"updateDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devRewardPoint\",\"type\":\"uint256\"}],\"name\":\"updateDevRewardPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_projectAddress\",\"type\":\"address\"}],\"name\":\"updateProjectAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectRewardPoint\",\"type\":\"uint256\"}],\"name\":\"updateProjectRewardPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISanctionsList\",\"name\":\"_sanctionsList\",\"type\":\"address\"}],\"name\":\"updateSanctionsList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"name\":\"updateStartAndEndBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelisterRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MintMasterCharge", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001c6bc8e962427deb4106ae06a7fa2d715687395c0000000000000000000000000000000000000000000000000002efe5a6b300d8000000000000000000000000000000000000000000000000000000000124a469000000000000000000000000000000000000000000000000000000000180ed6900000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000020000000000000000000000001c6bc8e962427deb4106ae06a7fa2d715687395c000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}