{"SourceCode": "/********************** @2022 Wizarre, All rights reserved *********************\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMmMMMMMMMMMMMMMNNMMMMNddNMMMMmmmmmNMMMMNddNMMMMNMMMMMMMMMMMMMMmMMMMMMMMM\r\nMMMMMMMMdysNhoossydNMmosyyMM+ddd-NhssdNMMNdsshN-ddd+MMsysomMNdyssoohNysdMMMMMMMM\r\nMMMMMMMMmss::NMMh/+o+/-ohhMMhhdm`:hNNmMMMMmMNy:.mdhhMNhho-/+o+/dMMN-:ssmMMMMMMMM\r\nMMMMMMMMNoMhyhdNNNmsoyNh/:mMMMs.oNMhoNMMMMmodMNo.yMMMd:/hNyoymNNNdhyhNoNMMMMMMMM\r\nMMMMMMMNy/:shhhhy/-syyhhy`.hho :hho-yhhhhhhy-shh: ohh.`yhhyyo./yhhhhs:/hNMMMMMMM\r\nMMMMMMMd `+://sso:`.`---/:osoo.syhh+yyyssyyyohhyo-osso:/---`.`/oss//:o  mMMMMMMM\r\nMMMMMMMd `s+s+:..``.-+yhmyddhhsmyoyosddyyddsoyoymsyhdhymhy+-.``..:+s+y  mMMMMMMM\r\nMMMMMMMd  sm`  -shhy. sMNys+ho+ssymyoodmmhooydyos+oh+yyMMo -yhhs-  `ms  mMMMMMMM\r\nMMMMMMMd `yds` `/ss+:/hddddhhodNNhdssyNMMNyssdhNNhshhddddh/:+ss/` `ydy  mMMMMMMM\r\nMMMMMMMd  ooNh/-..`````     :sdhdssddshmmhsddsydhdo-     `````..-/dNoo  mMMMMMMM\r\nMMMMMMMd `md+ymddysohs.   `odmmdoyNoNmohhoNNoNssdmmho`   .yhosyddmy+dm  mMMMMMMM\r\nMMMMMMMd `Nmh+/oyo-+o` `  syMMsM/dy/NhdyhhhN:yd+MsMNyo  ` `o+-oyo:+hmm  mMMMMMMM\r\nMMMMMMMd  -NNy+/+yy.  :../odyhohssohyhsooshshossh+hyd+/`-:  -yy+/+yNm.  mMMMMMMM\r\nMMMMMMMd -/-::yNN/   +/`so/shhssyhyy+yy++hy+hshysyhho:oo`++   +Nms::-/. mMMMMMMM\r\nMMMMMMMd oMy/MMh.   ss hMNNhs+:/++++/yhyyhy/++++::oshNhNy ys   .hMM:hM+ mMMMMMMM\r\nMMMMMMMd hMooMo    ym`oMdhymhyo/    `ooo+oo`    .shhdmyhM+`ms    oM+oMy mMMMMMMM\r\nMMMMMMMd mMsy-    yM:`Nmsdyhysys:  ` `:ys/` ` `hmMMdsshsom /My    :ysMm mMMMMMMM\r\nMMMMMMMd.MMd.    yMh :yssMNhshymNy: /``Nm .: .yNdMN/hmMddM- dMs    .mMM`mMMMMMMM\r\nMMMMMMMdoMh`    oMM- :omdoMMMMdhddm/ s.--.s /mhshMhydhhdoN/ :MM+    `dM+mMMMMMMM\r\nMMMMMMMdmh`    :MMd  /yhhh+s:ysyy+hN+`d..d`+ddhyyssNNyddss+  mMM-    `ddmMMMMMMM\r\nMMMMMMMMh`     dMMy  :hodoNoy+hysdmym-+dd/-mymhdhdyd+NNmyN-  hMMd     `hMMMMMMMM\r\nMMMMMMMM.      .sNMh- /yddyms+NMm:mmhs`Nm yMmhdssyhs+dy+o: -dMNs`      .MMMMMMMM\r\nMMMMMMMNd:       .sNNs.`sNNyhhoNMm+dh-`dd`:Moymhhdyhsdho`.sNNs.       /mMMMMMMMM\r\nMMMMMMMdhmo:`      .odm+`:sddmmsmmo/o +--+ /dymddhhmms-`+md+`      `:sNymMMMMMMM\r\nMMMMMMMd/sy:do-      `:hh/`:sdmdydm- ./  /``odmyhydo-./dy:`      -sh:yy:mMMMMMMM\r\nMMMMMMMd`m/.+shh+-      .os/`:ohdds  - // - `hMNhs-./s+.     `-+hhs/./m mMMMMMMM\r\nMMMMMMMd -.mho/-hNds:.    `-/-`.oo`    --    `oo-`-/-`   `./sdNy-/sdm`- mMMMMMMM\r\nMMMMMMMd  oMoo/.mNyooss+/-`  ``       `/:`       ``  .-/+ssoohMm.+osMo  mMMMMMMM\r\nMMMMMMMd  myssh+hN.`o++/oNmo+/-.`  `.+hddh/.`  `.-++smm+/++o`.Nhohssyd  mMMMMMMM\r\nMMMMMMMd  ++++osys-..--:/++:/yso+/:/o+-``-+o/:/+oss::++/:--..:syso++++  mMMMMMMM\r\nMMMMMMMMh/.`-+hdmoohdmmmmddhmmmy+ooh/ .ys` +hoo+ymmmhddmmmmdhoomdh+-`.+hMMMMMMMM\r\nMMMMMMMMMNmhs.`::`yhymdyoshNdsddyy. .+mNNm+` -yydhsmNhsoymdyhs /:`.sdmNMMMMMMMMM\r\nMMMMMMMMMsohh.ymhy+//+./NMNssh+::.`+dmymmymd/`.::+hosNMm/.+//+yhmy.dh+yMMMMMMMMM\r\nMMMMMMMMMNhysmMMMMMMMMh+MNhNMMMNNMdysyNMMNssydMNNMMMNhNN+dMMMMMMMMmsydNMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM*/\r\n// SPDX-License-Identifier: None\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/IAccessControl.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/AccessControl.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role, _msgSender());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(uint160(account), 20),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/Pausable.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.13;\r\n\r\n\r\n\r\ninterface IERC721Mint {\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n    function mint(address receiver) external returns (uint256);\r\n}\r\n\r\ninterface IERC1155 {\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids) external view returns (uint256[] memory);\r\n\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    function burn(address account, uint256 id, uint256 value) external;\r\n\r\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) external;\r\n}\r\n\r\ncontract SummonWizard is AccessControl, Pausable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    bytes32 public constant MODIFY_ENTITIES_ROLE = keccak256(\"MODIFY_ENTITIES_ROLE\");\r\n    uint256 private constant SINGLE_WIZARD_MULTIPLY_COST = 2;\r\n\r\n    IERC20 tokenContract;\r\n    IERC721Mint landContract;\r\n    IERC721Mint wizardContract;\r\n    IERC1155 enhancementContract;\r\n\r\n    address public tokenBankAddress;\r\n    uint32 public landCooldownPeriod = 172800; // initial 48h\r\n    uint32 public wizardMaturePeriod = 259200; // initial 72h\r\n    uint8 public wizardSoulsDefaultAmount = 6; // amount of souls +1 because it stops at \"1\"\r\n    uint256[] public summonCosts = [100000, 60000, 37500, 22500, 15000]; // per single Wizard, so for 2x Wizard it will be 2x\r\n    uint256[] public singleUseLandEnhancementIds = [1];\r\n    uint256[] public singleUseWizardEnhancementIds = [0];\r\n    mapping(uint256 => LandCooldown) public landsCooldown;\r\n    mapping(uint256 => Wizard) public wizards;\r\n\r\n    struct Wizard {\r\n        uint8 soulsRemainingAmount; //0=uninitialized, 1=no more souls, 6=default souls amount\r\n        uint32 matureTimestamp;\r\n    }\r\n\r\n    struct LandCooldown {\r\n        uint32 start;\r\n        uint32 period;\r\n    }\r\n\r\n    struct SingleWizardCost {\r\n        uint256 id;\r\n        uint256 cost;\r\n    }\r\n\r\n    event Summoned(address receiver, uint256 newWizardId, uint256[] landIds, uint256[] wizardIds, uint256[] ingredientIds, uint256 costSum);\r\n    event SummonedExtra(address receiver, uint256 newWizardId, uint256[] landIds, uint256[] wizardIds, uint256[] ingredientIds);\r\n    event IncreasedWizardSoulAmount(uint256 wizardId, uint8 remainingSoulsAmount);\r\n    event DecreasedWizardSoulAmount(uint256 wizardId, uint8 remainingSoulsAmount);\r\n    event SetLandCooldown(uint256 landId, uint32 period);\r\n    event SetWizardMatureTimestamp(uint256 wizardId, uint32 period);\r\n    event SetSummonCosts(uint256[] _costs);\r\n\r\n    constructor (\r\n        IERC20 _tokenAddress,\r\n        IERC721Mint _landContractAddress,\r\n        IERC721Mint _wizardContractAddress,\r\n        IERC1155 _enhancementContractAddress\r\n    ) {\r\n        tokenContract = _tokenAddress;\r\n        landContract = _landContractAddress;\r\n        wizardContract = _wizardContractAddress;\r\n        enhancementContract = _enhancementContractAddress;\r\n\r\n        tokenBankAddress = _msgSender();\r\n\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        _setupRole(MODIFY_ENTITIES_ROLE, _msgSender());\r\n    }\r\n\r\n    function summon(\r\n        uint256[] calldata _landIds,\r\n        uint256[] calldata _wizardIds,\r\n        uint256[] calldata _ingredientIds\r\n    ) external whenNotPaused returns (uint256){\r\n        // Input validation\r\n        require(_landIds.length <= 1, \"MAX_1_LAND\");\r\n        require(_wizardIds.length <= 2, \"MAX_2_WIZARDS\");\r\n        require(_ingredientIds.length <= 3, \"MAX_3_INGREDIENTS\");\r\n\r\n        uint256 _i;\r\n        uint256 _j;\r\n\r\n        // can be negative\r\n        int256 _landNftAmount = 1;\r\n        int256 _wizardNftAmount = 2;\r\n\r\n        // Check Ingredients\r\n        for (_i = 0; _i < _ingredientIds.length; _i++) {\r\n            // If single-land given then reduce amount of required wizards\r\n            for (_j = 0; _j < singleUseLandEnhancementIds.length; _j++) {\r\n                if (_ingredientIds[_i] == singleUseLandEnhancementIds[_j]) {\r\n                    _landNftAmount--;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // If single-wizard given then reduce amount of required wizards\r\n            for (_j = 0; _j < singleUseWizardEnhancementIds.length; _j++) {\r\n                if (_ingredientIds[_i] == singleUseWizardEnhancementIds[_j]) {\r\n                    _wizardNftAmount--;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Validation\r\n        require(_wizardNftAmount >= 0 && _landNftAmount >= 0, \"TOO_MANY_SINGLE_WIZARD_OR_LAND_INGREDIENTS\");\r\n        require(_landIds.length == uint256(_landNftAmount), \"WRONG_LAND_AMOUNT\");\r\n        require(_wizardIds.length == uint256(_wizardNftAmount), \"WRONG_WIZARDS_AMOUNT_OR_EPHEMERAL_ELIXIRS\");\r\n        if (2 == _wizardIds.length) {\r\n            require(_wizardIds[0] != _wizardIds[1], \"WIZARDS_CAN_NOT_BE_THE_SAME\");\r\n        }\r\n\r\n        // Check if last Land cooldown allows to make summoning & sender is Land owner\r\n        if (_landIds.length > 0) {\r\n            require(_msgSender() == landContract.ownerOf(_landIds[0]), \"USER_IS_NOT_LAND_OWNER\");\r\n            require((landsCooldown[_landIds[0]].start + landsCooldown[_landIds[0]].period) <= uint32(block.timestamp), \"LAND_DURING_COOLDOWN\");\r\n\r\n            // Set a new cooldown start for used land\r\n            landsCooldown[_landIds[0]].start = uint32(block.timestamp);\r\n            landsCooldown[_landIds[0]].period = landCooldownPeriod;\r\n        }\r\n\r\n        // Calculate token cost\r\n        uint256 _costSum = _summonCost(_wizardIds);\r\n\r\n        // Check if is owner of selected Wizard\r\n        for (_i = 0; _i < _wizardIds.length; _i++) {\r\n            require(_msgSender() == wizardContract.ownerOf(_wizardIds[_i]), \"USER_IS_NOT_WIZARD_OWNER\");\r\n\r\n            // Check if Wizard is matured\r\n            require(_isWizardMatured(_wizardIds[_i]), \"WIZARD_IS_NOT_YET_MATURED\");\r\n\r\n            _decreaseWizardSoulAmount(_wizardIds[_i]);\r\n        }\r\n\r\n        // Transfer user's SCRL to our Bank address\r\n        tokenContract.transferFrom(_msgSender(), tokenBankAddress, _costSum);\r\n\r\n        // Burn all used ingredients\r\n        if (_ingredientIds.length > 0) {\r\n            _burn(_ingredientIds);\r\n        }\r\n\r\n        // Mint a new Wizard for user\r\n        uint256 _newWizardId = wizardContract.mint(_msgSender());\r\n\r\n        // Set Wizard mature time\r\n        wizards[_newWizardId].matureTimestamp = uint32((block.timestamp) + uint256(wizardMaturePeriod));\r\n\r\n        emit Summoned(_msgSender(), _newWizardId, _landIds, _wizardIds, _ingredientIds, _costSum);\r\n\r\n        return _newWizardId;\r\n    }\r\n\r\n    function summonExtra(\r\n        address receiver,\r\n        uint256[] calldata _landIds,\r\n        uint256[] calldata _wizardIds,\r\n        uint256[] calldata _ingredientIds\r\n    ) external whenNotPaused onlyRole(MODIFY_ENTITIES_ROLE) returns (uint256){\r\n        // Input validation\r\n        require(_landIds.length <= 1, \"MAX_1_LAND\");\r\n        require(_wizardIds.length <= 2, \"MAX_2_WIZARDS\");\r\n        require(_ingredientIds.length <= 3, \"MAX_3_INGREDIENTS\");\r\n\r\n        uint256 _i;\r\n        uint256 _j;\r\n\r\n        // can be negative\r\n        int256 _landNftAmount = 1;\r\n        int256 _wizardNftAmount = 2;\r\n\r\n        // Check Ingredients\r\n        for (_i = 0; _i < _ingredientIds.length; _i++) {\r\n            // If single-land given then reduce amount of required wizards\r\n            for (_j = 0; _j < singleUseLandEnhancementIds.length; _j++) {\r\n                if (_ingredientIds[_i] == singleUseLandEnhancementIds[_j]) {\r\n                    _landNftAmount--;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // If single-wizard given then reduce amount of required wizards\r\n            for (_j = 0; _j < singleUseWizardEnhancementIds.length; _j++) {\r\n                if (_ingredientIds[_i] == singleUseWizardEnhancementIds[_j]) {\r\n                    _wizardNftAmount--;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Validation\r\n        require(_wizardNftAmount >= 0 && _landNftAmount >= 0, \"TOO_MANY_SINGLE_WIZARD_OR_LAND_INGREDIENTS\");\r\n        require(_landIds.length == uint256(_landNftAmount), \"WRONG_LAND_AMOUNT\");\r\n        require(_wizardIds.length == uint256(_wizardNftAmount), \"WRONG_WIZARDS_AMOUNT_OR_EPHEMERAL_ELIXIRS\");\r\n        if (2 == _wizardIds.length) {\r\n            require(_wizardIds[0] != _wizardIds[1], \"WIZARDS_CAN_NOT_BE_THE_SAME\");\r\n        }\r\n\r\n        // Mint a new Wizard for user\r\n        uint256 _newWizardId = wizardContract.mint(receiver);\r\n\r\n        // Set Wizard mature time\r\n        wizards[_newWizardId].matureTimestamp = uint32((block.timestamp) + uint256(wizardMaturePeriod));\r\n\r\n        emit SummonedExtra(receiver, _newWizardId, _landIds, _wizardIds, _ingredientIds);\r\n\r\n        return _newWizardId;\r\n    }\r\n\r\n    function summonCostPerWizard(uint256[] calldata _wizardIds) external view returns (SingleWizardCost[] memory _costsStruct, uint256[] memory _costsArray){\r\n        _costsStruct = new SingleWizardCost[](_wizardIds.length);\r\n        _costsArray = new uint256[](_wizardIds.length);\r\n        uint256[] memory _singleWizardIdArray = new uint256[](1);\r\n        uint256 _singleWizardCost;\r\n        for (uint256 _i = 0; _i < _wizardIds.length; _i++) {\r\n            // Check if Wizard exists\r\n            try wizardContract.ownerOf(_wizardIds[_i]){\r\n                // Cost for only one Wizard per entry\r\n                _singleWizardIdArray[0] = _wizardIds[_i];\r\n                _singleWizardCost = _summonCost(_singleWizardIdArray) / SINGLE_WIZARD_MULTIPLY_COST;\r\n            } catch {\r\n                // No Wizard, so cost 0\r\n                _singleWizardCost = 0;\r\n            }\r\n\r\n            // Put into output struct\r\n            _costsStruct[_i] = SingleWizardCost(\r\n                _wizardIds[_i],\r\n                _singleWizardCost\r\n            );\r\n            _costsArray[_i] = _singleWizardCost;\r\n        }\r\n    }\r\n\r\n    function summonCostForWizardsWithItems(uint256[] calldata _wizardIds, uint256[] calldata _ingredientIds) external view returns (uint256){\r\n        require(_wizardIds.length <= 2, \"MAX_2_WIZARDS\");\r\n        require(_ingredientIds.length <= 3, \"MAX_3_INGREDIENTS\");\r\n\r\n        uint256 _i;\r\n        uint256 _j;\r\n        int256 _wizardNftAmount = 2;\r\n        for (_i = 0; _i < _ingredientIds.length; _i++) {\r\n            for (_j = 0; _j < singleUseWizardEnhancementIds.length; _j++) {\r\n                if (_ingredientIds[_i] == singleUseWizardEnhancementIds[_j]) {\r\n                    _wizardNftAmount--;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        require(_wizardNftAmount >= 0, \"TOO_MANY_SINGLE_WIZARDS\");\r\n        require(_wizardIds.length == uint256(_wizardNftAmount), \"WRONG_WIZARDS_AMOUNT_OR_EPHEMERAL_ELIXIRS\");\r\n        if (2 == _wizardIds.length) {\r\n            require(_wizardIds[0] != _wizardIds[1], \"WIZARDS_CAN_NOT_BE_THE_SAME\");\r\n        }\r\n\r\n        return _summonCost(_wizardIds);\r\n    }\r\n\r\n    function setTokenBankAddress(address _tokenBankAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        tokenBankAddress = _tokenBankAddress;\r\n    }\r\n\r\n    function setLandCooldownPeriod(uint32 _landCooldownPeriod) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        landCooldownPeriod = _landCooldownPeriod;\r\n    }\r\n\r\n    function setSingleUseLandEnhancementIds(uint256[] calldata _ids) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        delete singleUseLandEnhancementIds;\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            singleUseLandEnhancementIds.push(_ids[i]);\r\n        }\r\n    }\r\n\r\n    function setSingleUseWizardEnhancementIds(uint256[] calldata _ids) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        delete singleUseWizardEnhancementIds;\r\n        for (uint256 i = 0; i < _ids.length; i++) {\r\n            singleUseWizardEnhancementIds.push(_ids[i]);\r\n        }\r\n    }\r\n\r\n    function setWizardSoulsDefaultAmount(uint8 _souls) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        wizardSoulsDefaultAmount = _souls;\r\n    }\r\n\r\n    function setSummonCosts(uint256[] calldata _costs) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        delete summonCosts;\r\n        for (uint256 i = 0; i < _costs.length; i++) {\r\n            require(_costs[i] > 0, \"COST_MUST_BE_ABOVE_0\");\r\n            summonCosts.push(_costs[i]);\r\n        }\r\n\r\n        emit SetSummonCosts(_costs);\r\n    }\r\n\r\n    function setSingleLandCooldownPeriod(uint256 _landId, uint32 _period) external whenNotPaused onlyRole(MODIFY_ENTITIES_ROLE) {\r\n        landsCooldown[_landId].period = _period;\r\n\r\n        emit SetLandCooldown(_landId, _period);\r\n    }\r\n\r\n    function setGlobalWizardMaturePeriod(uint32 _wizardMaturePeriod) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        wizardMaturePeriod = _wizardMaturePeriod;\r\n    }\r\n\r\n    function setSingleWizardMatureTimestamp(uint256 _wizardId, uint32 _timestamp) external whenNotPaused onlyRole(MODIFY_ENTITIES_ROLE) {\r\n        wizards[_wizardId].matureTimestamp = _timestamp;\r\n\r\n        emit SetWizardMatureTimestamp(_wizardId, _timestamp);\r\n    }\r\n\r\n    function isWizardMatured(uint256 _wizardId) external view returns (bool){\r\n        return _isWizardMatured(_wizardId);\r\n    }\r\n\r\n    function _isWizardMatured(uint256 _wizardId) internal view returns (bool){\r\n        return uint32(block.timestamp) >= wizards[_wizardId].matureTimestamp;\r\n    }\r\n\r\n    function initializeWizardSouls(uint256 _wizardId) external onlyRole(MODIFY_ENTITIES_ROLE) {\r\n        _setupWizard(_wizardId);\r\n    }\r\n\r\n    // Returns in \"human form\", so real amount of souls (so 5x instead of 6x)\r\n    function getWizardSoulsRemainingAmount(uint256 _wizardId) external view returns (uint8) {\r\n        // Wizard not in mapping\r\n        if (0 == wizards[_wizardId].soulsRemainingAmount) {\r\n            // Check if Wizard exists\r\n            try wizardContract.ownerOf(_wizardId){\r\n                return wizardSoulsDefaultAmount - 1;\r\n            } catch {\r\n                return 0;\r\n            }\r\n        } else {\r\n            // Wizard in mapping\r\n            // Decrease by 1 (6-1=5) to return a real amount of souls externally\r\n            return wizards[_wizardId].soulsRemainingAmount - 1;\r\n        }\r\n    }\r\n\r\n    function increaseWizardSoulAmount(uint256 _wizardId) external whenNotPaused onlyRole(MODIFY_ENTITIES_ROLE) {\r\n        // Set 5 souls if not performed any summoning yet\r\n        if (0 == wizards[_wizardId].soulsRemainingAmount) {\r\n            // 5 souls but we stop at 1, so 5+1=6\r\n            wizards[_wizardId].soulsRemainingAmount = wizardSoulsDefaultAmount;\r\n        }\r\n\r\n        wizards[_wizardId].soulsRemainingAmount++;\r\n\r\n        emit IncreasedWizardSoulAmount(_wizardId, wizards[_wizardId].soulsRemainingAmount);\r\n    }\r\n\r\n    function decreaseWizardSoulAmount(uint256 _wizardId) external whenNotPaused onlyRole(MODIFY_ENTITIES_ROLE) {\r\n        _decreaseWizardSoulAmount(_wizardId);\r\n\r\n        emit DecreasedWizardSoulAmount(_wizardId, wizards[_wizardId].soulsRemainingAmount);\r\n    }\r\n\r\n    function _decreaseWizardSoulAmount(uint256 _wizardId) internal {\r\n        _setupWizard(_wizardId);\r\n\r\n        require(wizards[_wizardId].soulsRemainingAmount > 1, \"SOULLESS_WIZARD\");\r\n        wizards[_wizardId].soulsRemainingAmount--;\r\n    }\r\n\r\n    function _setupWizard(uint256 _wizardId) internal {\r\n        // Set 5 souls if not performed any summoning yet\r\n        if (0 == wizards[_wizardId].soulsRemainingAmount) {\r\n            // 5 souls but we stop at 1, so 5+1=6\r\n            wizards[_wizardId].soulsRemainingAmount = wizardSoulsDefaultAmount;\r\n        }\r\n    }\r\n\r\n    function _summonCost(uint256[] memory _wizardIds) internal view returns (uint256){\r\n        uint256 _i;\r\n        uint256 _cost = 0;\r\n        uint256 _costSum = 0;\r\n        uint256 _tmpWizardSoulsRemainingAmount;\r\n\r\n        for (_i = 0; _i < _wizardIds.length; _i++) {\r\n            // Calculate cost\r\n            if (0 == wizards[_wizardIds[_i]].soulsRemainingAmount) {\r\n                // 5 souls but we stop at 1, so 5+1=6\r\n                _tmpWizardSoulsRemainingAmount = wizardSoulsDefaultAmount;\r\n            } else {\r\n                _tmpWizardSoulsRemainingAmount = wizards[_wizardIds[_i]].soulsRemainingAmount;\r\n            }\r\n\r\n            require(_tmpWizardSoulsRemainingAmount > 1, \"SOULLESS_WIZARD\");\r\n            _tmpWizardSoulsRemainingAmount --;\r\n\r\n            if (summonCosts.length < _tmpWizardSoulsRemainingAmount) {\r\n                // If amount of souls is out of price boundaries, e.g. more souls than usual\r\n                // then set cost equal minimal cost for all extra souls\r\n                _cost = summonCosts[summonCosts.length - 1];\r\n            } else {\r\n                _cost = summonCosts[_tmpWizardSoulsRemainingAmount - 1];\r\n            }\r\n\r\n            _costSum += _cost;\r\n        }\r\n\r\n        // Cost of single-use wizards\r\n        if (1 == _wizardIds.length) {\r\n            // One single-use wizard used: double used wizard cost\r\n            _costSum = _costSum * SINGLE_WIZARD_MULTIPLY_COST;\r\n        } else if (0 == _wizardIds.length) {\r\n            // Two single-use wizard used: 2x minimal cost\r\n            _costSum += summonCosts[summonCosts.length - 1] * 2;\r\n        }\r\n\r\n        _costSum = _costSum * 10 ** 18;\r\n\r\n        return _costSum;\r\n    }\r\n\r\n    function _burn(uint256[] calldata _ingredientIds) internal {\r\n        uint256[] memory _burnValues = new uint256[](_ingredientIds.length);\r\n        uint256 _i;\r\n        for (_i = 0; _i < _ingredientIds.length; _i++) {\r\n            _burnValues[_i] = 1;\r\n        }\r\n        enhancementContract.burnBatch(_msgSender(), _ingredientIds, _burnValues);\r\n    }\r\n\r\n    function returnAccidentallySent(IERC20 _tokenToSent) external onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        uint256 _amount = _tokenToSent.balanceOf(address(this));\r\n        _tokenToSent.safeTransfer(_msgSender(), _amount);\r\n    }\r\n\r\n    function pause() public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        _unpause();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Mint\",\"name\":\"_landContractAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Mint\",\"name\":\"_wizardContractAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC1155\",\"name\":\"_enhancementContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wizardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"remainingSoulsAmount\",\"type\":\"uint8\"}],\"name\":\"DecreasedWizardSoulAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wizardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"remainingSoulsAmount\",\"type\":\"uint8\"}],\"name\":\"IncreasedWizardSoulAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"landId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"period\",\"type\":\"uint32\"}],\"name\":\"SetLandCooldown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_costs\",\"type\":\"uint256[]\"}],\"name\":\"SetSummonCosts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wizardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"period\",\"type\":\"uint32\"}],\"name\":\"SetWizardMatureTimestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWizardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"landIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"wizardIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ingredientIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"costSum\",\"type\":\"uint256\"}],\"name\":\"Summoned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWizardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"landIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"wizardIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ingredientIds\",\"type\":\"uint256[]\"}],\"name\":\"SummonedExtra\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MODIFY_ENTITIES_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wizardId\",\"type\":\"uint256\"}],\"name\":\"decreaseWizardSoulAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wizardId\",\"type\":\"uint256\"}],\"name\":\"getWizardSoulsRemainingAmount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wizardId\",\"type\":\"uint256\"}],\"name\":\"increaseWizardSoulAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wizardId\",\"type\":\"uint256\"}],\"name\":\"initializeWizardSouls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wizardId\",\"type\":\"uint256\"}],\"name\":\"isWizardMatured\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landCooldownPeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"landsCooldown\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"start\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"period\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenToSent\",\"type\":\"address\"}],\"name\":\"returnAccidentallySent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_wizardMaturePeriod\",\"type\":\"uint32\"}],\"name\":\"setGlobalWizardMaturePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_landCooldownPeriod\",\"type\":\"uint32\"}],\"name\":\"setLandCooldownPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_landId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_period\",\"type\":\"uint32\"}],\"name\":\"setSingleLandCooldownPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"setSingleUseLandEnhancementIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"setSingleUseWizardEnhancementIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wizardId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_timestamp\",\"type\":\"uint32\"}],\"name\":\"setSingleWizardMatureTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_costs\",\"type\":\"uint256[]\"}],\"name\":\"setSummonCosts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenBankAddress\",\"type\":\"address\"}],\"name\":\"setTokenBankAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_souls\",\"type\":\"uint8\"}],\"name\":\"setWizardSoulsDefaultAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"singleUseLandEnhancementIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"singleUseWizardEnhancementIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_landIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_wizardIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ingredientIds\",\"type\":\"uint256[]\"}],\"name\":\"summon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_wizardIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ingredientIds\",\"type\":\"uint256[]\"}],\"name\":\"summonCostForWizardsWithItems\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_wizardIds\",\"type\":\"uint256[]\"}],\"name\":\"summonCostPerWizard\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"internalType\":\"struct SummonWizard.SingleWizardCost[]\",\"name\":\"_costsStruct\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_costsArray\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"summonCosts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_landIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_wizardIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ingredientIds\",\"type\":\"uint256[]\"}],\"name\":\"summonExtra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBankAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wizardMaturePeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wizardSoulsDefaultAmount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wizards\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"soulsRemainingAmount\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"matureTimestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SummonWizard", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000052c1751c89fc913ed274d72e8d56dce4ee44a5cf0000000000000000000000008ad8498c26a47c3a323a3d697c59829dd59591c7000000000000000000000000d6f8a35f202e2575acdf929f0069c2e8b3e65ada000000000000000000000000b0221f5bbc58510968473f4f7b4377e5b8582fc0", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5f4f0269a0b0a6a38253895f59568fca1a080c412be05cf15f9e2f712dd0d8ed"}