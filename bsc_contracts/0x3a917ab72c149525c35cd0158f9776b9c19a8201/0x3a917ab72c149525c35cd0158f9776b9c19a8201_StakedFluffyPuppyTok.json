{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\n// A fork of Reflect.Finance\r\n\r\npragma solidity ^0.6.2;\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: openzeppelin-solidity\\contracts\\GSN\\Context.sol\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\math\\SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\utils\\Address.sol\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\access\\Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract StakedFluffyPuppyToken is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    enum TransferType {\r\n        STANDARD, TO_EXCLUDED, FROM_EXCLUDED, BOTH_EXCLUDED\r\n    }\r\n\r\n    struct TValues {\r\n        uint256 transferAmount;\r\n        uint256 reflectionFee;\r\n        uint256 devFee;\r\n    }\r\n\r\n    struct RInputs {\r\n        uint256 transferAmount;\r\n        uint256 reflectionFee;\r\n        uint256 devFee;\r\n        uint256 currentRate;\r\n    }\r\n\r\n    struct RValues {\r\n        uint256 rAmount;\r\n        uint256 rTransferAmount;\r\n        uint256 rReflectionFee;\r\n        uint256 rDevFee;\r\n    }\r\n\r\n    struct DappValues {\r\n        bool isApproved;\r\n        uint256 flufBalance;\r\n        uint256 sFlufBalance;\r\n        uint256 currentFeePercentage;\r\n        uint256 nextFeePercentage;\r\n        uint256 reflectionFeePercentage;\r\n        uint256 devFeePercentage;\r\n        uint256 minAmountToStake;\r\n    }\r\n\r\n    mapping (address => bool) private _isExcludedFromReflections;\r\n    address[] private _excludedFromReflections;\r\n\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    address[] private _excludedFromFee;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    uint256 private constant _tTotal = 1 * 10**9 * 10**18;\r\n\r\n    IERC20 public fluf = IERC20(0xf967a0Bc934a432C1De2b2329Ba9bdd78b5605B8);\r\n\r\n    address private constant devWallet = 0xcB5A4d56f5dF144d3B38FC18a365771a170e7403;\r\n\r\n    string private _name = 'Staked Fluffy Puppy Token';\r\n    string private _symbol = 'SFLUF';\r\n\r\n    uint256 public reflectionFeePercentage = 75;\r\n    uint256 public devFeePercentage = 25;\r\n\r\n    uint256 public minAmountToStake = 50000 * 10**18;\r\n\r\n    uint256 public lowerFeePercentage = 5;\r\n    uint256 public higherFeePercentage = 10;\r\n    uint256 public currentFeePercentage = lowerFeePercentage;\r\n    uint256 public nextFeePercentage = higherFeePercentage;\r\n\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n\r\n    uint8 private _decimals = 18;\r\n\r\n    event MinAmountToStakeUpdated(uint256 newMinAmount);\r\n    event FeePercentagesUpdated(uint256 lowerFeePercentage, uint256 higherFeePercentage);\r\n    event ReflectionAndDevFeePercentagesUpdated(uint256 reflectionFeePercentage, uint256 devFeePercentage);\r\n\r\n    constructor () public {\r\n        _tOwned[address(this)] = _tTotal;\r\n        _rOwned[address(this)] = _rTotal;\r\n\r\n        _isExcludedFromReflections[owner()] = true;\r\n        _excludedFromReflections.push(owner());\r\n\r\n        _isExcludedFromReflections[address(this)] = true;\r\n        _excludedFromReflections.push(address(this));\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _excludedFromFee.push(owner());\r\n\r\n        _isExcludedFromFee[devWallet] = true;\r\n        _excludedFromFee.push(devWallet);\r\n\r\n        emit Transfer(address(0), address(this), _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcludedFromReflections[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function dappValues(address account) public view returns (DappValues memory) {\r\n        return DappValues(\r\n            fluf.allowance(account, address(this)) > 0,\r\n            fluf.balanceOf(account),\r\n            balanceOf(account),\r\n            currentFeePercentage,\r\n            nextFeePercentage,\r\n            reflectionFeePercentage,\r\n            devFeePercentage,\r\n            minAmountToStake\r\n        );\r\n    }\r\n\r\n    function isExcludedFromReflections(address account) public view returns (bool) {\r\n        return _isExcludedFromReflections[account];\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function totalReflectionFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function reflect(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(!_isExcludedFromReflections[sender], \"Excluded addresses cannot call this function\");\r\n        (,RValues memory _rValues) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(_rValues.rAmount, \"Error while calculating reflection\");\r\n        _rTotal = _rTotal.sub(_rValues.rAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n\r\n        (,RValues memory _rValues) = _getValues(tAmount);\r\n\r\n        if (!deductTransferFee) {\r\n            return _rValues.rAmount;\r\n        } else {\r\n            return _rValues.rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeAccountFromReflections(address account) external onlyOwner() {\r\n        require(!_isExcludedFromReflections[account], \"Account is already excluded\");\r\n\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n\r\n        _isExcludedFromReflections[account] = true;\r\n        _excludedFromReflections.push(account);\r\n    }\r\n\r\n    function includeAccountToReflections(address account) external onlyOwner() {\r\n        require(_isExcludedFromReflections[account], \"Account is already included\");\r\n\r\n        for (uint256 i = 0; i < _excludedFromReflections.length; i++) {\r\n            if (_excludedFromReflections[i] == account) {\r\n                _excludedFromReflections[i] = _excludedFromReflections[_excludedFromReflections.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcludedFromReflections[account] = false;\r\n                _excludedFromReflections.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeAccountFromFee(address account) external onlyOwner() {\r\n        require(!_isExcludedFromFee[account], \"Account is already excluded from fee\");\r\n        _isExcludedFromFee[account] = true;\r\n        _excludedFromFee.push(account);\r\n    }\r\n\r\n    function includeAccountToFee(address account) external onlyOwner() {\r\n        require(_isExcludedFromFee[account], \"Account is already included to fee\");\r\n\r\n        for (uint256 i = 0; i < _excludedFromFee.length; i++) {\r\n            if (_excludedFromFee[i] == account) {\r\n                _excludedFromFee[i] = _excludedFromFee[_excludedFromFee.length - 1];\r\n                _isExcludedFromFee[account] = false;\r\n                _excludedFromFee.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setFeePercentages(uint256 _lowerFeePercentage, uint256 _higherFeePercentage) external onlyOwner() {\r\n        lowerFeePercentage = _lowerFeePercentage;\r\n        higherFeePercentage = _higherFeePercentage;\r\n\r\n        currentFeePercentage = _lowerFeePercentage;\r\n        nextFeePercentage = _higherFeePercentage;\r\n\r\n        emit FeePercentagesUpdated(lowerFeePercentage, higherFeePercentage);\r\n    }\r\n\r\n    function setReflectionAndDevFeePercentages(uint256 _reflectionFeePercentage, uint256 _devFeePercentage) external onlyOwner() {\r\n        reflectionFeePercentage = _reflectionFeePercentage;\r\n        devFeePercentage = _devFeePercentage;\r\n\r\n        emit ReflectionAndDevFeePercentagesUpdated(_reflectionFeePercentage, _devFeePercentage);\r\n    }\r\n\r\n    function flufToSFluf(uint256 _amount) public {\r\n        fluf.transferFrom(msg.sender, address(this), _amount);\r\n        _transfer(address(this), msg.sender, _amount);\r\n    }\r\n\r\n    function sFlufToFluf(uint256 _amount) public {\r\n        uint256 flufTransferAmount = _getTValues(_amount).transferAmount;\r\n        _transfer(msg.sender, address(this), _amount);\r\n        fluf.transfer(msg.sender, flufTransferAmount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (sender == address(this)) {\r\n            require(amount >= minAmountToStake, \"Stake amount must be equal to or greater than the minimum amount to stake\");\r\n        }\r\n\r\n        TransferType transferType;\r\n\r\n        if (_isExcludedFromReflections[sender] && !_isExcludedFromReflections[recipient]) {\r\n            transferType = TransferType.FROM_EXCLUDED;\r\n        } else if (!_isExcludedFromReflections[sender] && _isExcludedFromReflections[recipient]) {\r\n            transferType = TransferType.TO_EXCLUDED;\r\n        } else if (!_isExcludedFromReflections[sender] && !_isExcludedFromReflections[recipient]) {\r\n            transferType = TransferType.STANDARD;\r\n        } else if (_isExcludedFromReflections[sender] && _isExcludedFromReflections[recipient]) {\r\n            transferType = TransferType.BOTH_EXCLUDED;\r\n        } else {\r\n            transferType = TransferType.STANDARD;\r\n        }\r\n\r\n        _transfer(sender, recipient, amount, transferType);\r\n\r\n        if (currentFeePercentage == lowerFeePercentage) {\r\n            currentFeePercentage = higherFeePercentage;\r\n            nextFeePercentage = lowerFeePercentage;\r\n        } else {\r\n            currentFeePercentage = lowerFeePercentage;\r\n            nextFeePercentage = higherFeePercentage;\r\n        }\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 tAmount, TransferType transferType) private {\r\n        (TValues memory _tValues, RValues memory _rValues) = _getValues(tAmount);\r\n\r\n        if (transferType == TransferType.STANDARD) {\r\n            _rOwned[sender] = _rOwned[sender].sub(_rValues.rAmount, \"Error while calculating rOwned\");\r\n            _rOwned[recipient] = _rOwned[recipient].add(_rValues.rTransferAmount);\r\n        } else if (transferType == TransferType.TO_EXCLUDED) {\r\n            _rOwned[sender] = _rOwned[sender].sub(_rValues.rAmount, \"Error while calculating rOwned\");\r\n\r\n            _tOwned[recipient] = _tOwned[recipient].add(_tValues.transferAmount);\r\n            _rOwned[recipient] = _rOwned[recipient].add(_rValues.rTransferAmount);\r\n        } else if (transferType == TransferType.FROM_EXCLUDED) {\r\n            _tOwned[sender] = _tOwned[sender].sub(tAmount, \"Error while calculating tOwned\");\r\n            _rOwned[sender] = _rOwned[sender].sub(_rValues.rAmount, \"Error while calculating rOwned\");\r\n\r\n            _rOwned[recipient] = _rOwned[recipient].add(_rValues.rTransferAmount);\r\n        } else if (transferType == TransferType.BOTH_EXCLUDED) {\r\n            _tOwned[sender] = _tOwned[sender].sub(tAmount, \"Error while calculating tOwned\");\r\n            _rOwned[sender] = _rOwned[sender].sub(_rValues.rAmount, \"Error while calculating rOwned\");\r\n\r\n            _tOwned[recipient] = _tOwned[recipient].add(_tValues.transferAmount);\r\n            _rOwned[recipient] = _rOwned[recipient].add(_rValues.rTransferAmount);\r\n        }\r\n\r\n        _rOwned[devWallet] = _rOwned[devWallet].add(_rValues.rDevFee);\r\n\r\n        _reflectFee(_rValues.rReflectionFee, _tValues.reflectionFee);\r\n\r\n        emit Transfer(sender, recipient, _tValues.transferAmount);\r\n\r\n        if (_tValues.devFee != 0) {\r\n            emit Transfer(sender, devWallet, _tValues.devFee);\r\n        }\r\n    }\r\n\r\n    function setFlufAddress(address flufAddress) public onlyOwner {\r\n        fluf = IERC20(flufAddress);\r\n    }\r\n\r\n    function setMinAmountToStake(uint256 newMinAmount) public onlyOwner {\r\n        require(newMinAmount < minAmountToStake, \"New minimum amount is equal to or more than old minimum amount\");\r\n        minAmountToStake = newMinAmount;\r\n        emit MinAmountToStakeUpdated(newMinAmount);\r\n    }\r\n\r\n    function _reflectFee(uint256 rReflectionFee, uint256 reflectionFee) private {\r\n        _rTotal = _rTotal.sub(rReflectionFee, \"Error while subtracting the reflection fee from the total amount\");\r\n        _tFeeTotal = _tFeeTotal.add(reflectionFee);\r\n    }\r\n\r\n    function _getValues(uint256 transferAmount) private view returns (TValues memory, RValues memory) {\r\n        TValues memory _tValues = _getTValues(transferAmount);\r\n        uint256 currentRate = _getRate();\r\n\r\n        RValues memory _rValues = _getRValues(\r\n            RInputs(transferAmount, _tValues.reflectionFee, _tValues.devFee, currentRate)\r\n        );\r\n\r\n        return (_tValues, _rValues);\r\n    }\r\n\r\n    function _getTValues(uint256 transferAmount) private view returns (TValues memory) {\r\n        uint256 feeAmount = 0;\r\n        uint256 reflectionFee = 0;\r\n        uint256 devFee = 0;\r\n\r\n        bool isNoFeeAddress = false;\r\n\r\n        for (uint i = 0; i < _excludedFromFee.length; i++) {\r\n            if (_msgSender() == _excludedFromFee[i]) {\r\n                isNoFeeAddress = true;\r\n            }\r\n        }\r\n\r\n        if (!isNoFeeAddress) {\r\n            feeAmount = transferAmount.mul(currentFeePercentage).div(100);\r\n            reflectionFee = feeAmount.mul(reflectionFeePercentage).div(100);\r\n            devFee = feeAmount.sub(reflectionFee, \"Error while calculating dev fee\");\r\n        }\r\n\r\n        uint256 tTransferAmount = transferAmount.sub(feeAmount, \"Error while calculating transfer amount\");\r\n\r\n        return TValues(tTransferAmount, reflectionFee, devFee);\r\n    }\r\n\r\n    function _getRValues(RInputs memory rInputs) private pure returns (RValues memory) {\r\n        uint256 rAmount = rInputs.transferAmount.mul(rInputs.currentRate);\r\n        uint256 rReflectionFee = rInputs.reflectionFee.mul(rInputs.currentRate);\r\n        uint256 rDevFee = rInputs.devFee.mul(rInputs.currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rReflectionFee, \"Error while calculating rTransferAmount\");\r\n        rTransferAmount = rTransferAmount.sub(rDevFee, \"Error while calculating rTransferAmount\");\r\n\r\n        return RValues(rAmount, rTransferAmount, rReflectionFee, rDevFee);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n\r\n        for (uint256 i = 0; i < _excludedFromReflections.length; i++) {\r\n            if (_rOwned[_excludedFromReflections[i]] > rSupply || _tOwned[_excludedFromReflections[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excludedFromReflections[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excludedFromReflections[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n\r\n        return (rSupply, tSupply);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lowerFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"higherFeePercentage\",\"type\":\"uint256\"}],\"name\":\"FeePercentagesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinAmount\",\"type\":\"uint256\"}],\"name\":\"MinAmountToStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reflectionFeePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devFeePercentage\",\"type\":\"uint256\"}],\"name\":\"ReflectionAndDevFeePercentagesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dappValues\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"flufBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sFlufBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reflectionFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountToStake\",\"type\":\"uint256\"}],\"internalType\":\"struct StakedFluffyPuppyToken.DappValues\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccountFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccountFromReflections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fluf\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"flufToSFluf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"higherFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccountToFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccountToReflections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReflections\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountToStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sFlufToFluf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lowerFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_higherFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setFeePercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"flufAddress\",\"type\":\"address\"}],\"name\":\"setFlufAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinAmount\",\"type\":\"uint256\"}],\"name\":\"setMinAmountToStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reflectionFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFeePercentage\",\"type\":\"uint256\"}],\"name\":\"setReflectionAndDevFeePercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReflectionFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakedFluffyPuppyToken", "CompilerVersion": "v0.6.2+commit.bacdbe57", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5189b63a2c5be2d6e6c6e9fbde287a07dabc78c3da7fe53cf459cc374c53701b"}