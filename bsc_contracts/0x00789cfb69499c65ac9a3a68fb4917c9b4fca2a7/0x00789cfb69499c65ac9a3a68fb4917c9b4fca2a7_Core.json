{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/base/USDMToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\r\\nimport \\\"../interfaces/IUSDMToken.sol\\\";\\r\\nimport \\\"../refs/CoreRef.sol\\\";\\r\\n\\r\\ncontract USDMToken is IUSDMToken, ERC20Burnable, CoreRef {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // solhint-disable-next-line var-name-mixedcase\\r\\n    bytes32 public DOMAIN_SEPARATOR;\\r\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\r\\n    bytes32 public constant PERMIT_TYPEHASH =\\r\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\r\\n    mapping(address => uint256) public nonces;\\r\\n\\r\\n    /// @notice USDM token constructor\\r\\n    /// @param _core USDM Core address to reference\\r\\n    constructor(address _core) ERC20(\\\"USD Mars\\\", \\\"USDM\\\") CoreRef(_core) {\\r\\n        uint256 chainId;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        DOMAIN_SEPARATOR = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256(\\r\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\r\\n                ),\\r\\n                keccak256(bytes(name())),\\r\\n                keccak256(bytes(\\\"1\\\")),\\r\\n                chainId,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Mint USDM tokens\\r\\n    /// @param account The account to mint to\\r\\n    /// @param amount The amount to mint\\r\\n    function mint(address account, uint256 amount)\\r\\n        external\\r\\n        override\\r\\n        onlyMinter\\r\\n        whenNotPaused\\r\\n    {\\r\\n        _mint(account, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Burn USDM tokens from caller\\r\\n    /// @param amount The amount to burn\\r\\n    function burn(uint256 amount) public override(IUSDMToken, ERC20Burnable) {\\r\\n        ERC20Burnable.burn(amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Permit spending of USDM\\r\\n    /// @param owner The USDM holder\\r\\n    /// @param spender The approved operator\\r\\n    /// @param value The amount approved\\r\\n    /// @param deadline The deadline after which the approval is no longer valid\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external override {\\r\\n        // solhint-disable-next-line not-rely-on-time\\r\\n        require(deadline >= block.timestamp, \\\"USDMToken::permit: Expired\\\");\\r\\n        bytes32 digest =\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\r\\n                    \\\"\\\\x19\\\\x01\\\",\\r\\n                    DOMAIN_SEPARATOR,\\r\\n                    keccak256(\\r\\n                        abi.encode(\\r\\n                            PERMIT_TYPEHASH,\\r\\n                            owner,\\r\\n                            spender,\\r\\n                            value,\\r\\n                            nonces[owner]++,\\r\\n                            deadline\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\r\\n        require(\\r\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\r\\n            \\\"USDMToken::permit: Invalid signature\\\"\\r\\n        );\\r\\n        _approve(owner, spender, value);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/base/XMSToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\nimport \\\"../interfaces/IXMSToken.sol\\\";\\r\\nimport \\\"../refs/CoreRef.sol\\\";\\r\\n\\r\\n// XMSToken with Governance.\\r\\ncontract XMSToken is IXMSToken, CoreRef {\\r\\n    string public constant override name = \\\"Mars Ecosystem Token\\\";\\r\\n\\r\\n    string public constant override symbol = \\\"XMS\\\";\\r\\n\\r\\n    uint8 public constant override decimals = 18;\\r\\n\\r\\n    /// @notice Total number of tokens in circulation\\r\\n    uint256 public override totalSupply = 1_000_000_000e18;\\r\\n\\r\\n    // Allowance amounts on behalf of others\\r\\n    mapping(address => mapping(address => uint96)) internal _allowances;\\r\\n\\r\\n    // Official record of token balances for each account\\r\\n    mapping(address => uint96) internal _balances;\\r\\n\\r\\n    /// @notice A record of each accounts delegate\\r\\n    mapping(address => address) public override delegates;\\r\\n\\r\\n    /// @notice A record of votes checkpoints for each account, by index\\r\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\r\\n\\r\\n    /// @notice The number of checkpoints for each account\\r\\n    mapping(address => uint32) public numCheckpoints;\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the contract's domain\\r\\n    bytes32 public constant DOMAIN_TYPEHASH =\\r\\n        keccak256(\\r\\n            \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\r\\n        );\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\r\\n    bytes32 public constant DELEGATION_TYPEHASH =\\r\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the permit struct used by the contract\\r\\n    bytes32 public constant PERMIT_TYPEHASH =\\r\\n        keccak256(\\r\\n            \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\r\\n        );\\r\\n\\r\\n    /// @notice A record of states for signing / validating signatures\\r\\n    mapping(address => uint256) public nonces;\\r\\n\\r\\n    constructor(address _treasury, address _core) CoreRef(_core) {\\r\\n        _balances[_treasury] = uint96(totalSupply);\\r\\n        emit Transfer(address(0), _treasury, totalSupply);\\r\\n    }\\r\\n\\r\\n    function mint(address _to, uint256 _amount) external override onlyGovernor {\\r\\n        require(_to != address(0), \\\"XMSToken::mint: Zero address\\\");\\r\\n        uint96 amount =\\r\\n            safe96(_amount, \\\"XMSToken::mint: Amount exceeds 96 bits\\\");\\r\\n        uint96 safeSupply =\\r\\n            safe96(totalSupply, \\\"XMSToken::mint: TotalSupply exceeds 96 bits\\\");\\r\\n        totalSupply = add96(\\r\\n            safeSupply,\\r\\n            amount,\\r\\n            \\\"XMSToken::mint: TotalSupply exceeds 96 bits\\\"\\r\\n        );\\r\\n\\r\\n        // transfer the amount to the recipient\\r\\n        _balances[_to] = add96(\\r\\n            _balances[_to],\\r\\n            amount,\\r\\n            \\\"XMSToken::mint: Transfer amount overflows\\\"\\r\\n        );\\r\\n        emit Transfer(address(0), _to, amount);\\r\\n\\r\\n        // move delegates\\r\\n        _moveDelegates(address(0), delegates[_to], amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\r\\n     * @param account The address of the account holding the funds\\r\\n     * @param spender The address of the account spending the funds\\r\\n     * @return The number of tokens approved\\r\\n     */\\r\\n    function allowance(address account, address spender)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowances[account][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Approve `spender` to transfer up to `amount` from `msg.sender`\\r\\n     * @dev This will overwrite the approval amount for `spender`\\r\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\r\\n     * @param spender The address of the account which may transfer tokens\\r\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\r\\n     * @return Whether or not the approval succeeded\\r\\n     */\\r\\n    function approve(address spender, uint256 amount)\\r\\n        external\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint96 amount_;\\r\\n        if (amount == uint256(-1)) {\\r\\n            amount_ = uint96(-1);\\r\\n        } else {\\r\\n            amount_ = safe96(\\r\\n                amount,\\r\\n                \\\"XMSToken::approve: Amount exceeds 96 bits\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        _allowances[msg.sender][spender] = amount_;\\r\\n\\r\\n        emit Approval(msg.sender, spender, amount_);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Triggers an approval from owner to spends\\r\\n     * @param owner The address to approve from\\r\\n     * @param spender The address to be approved\\r\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\r\\n     * @param expiry The time at which to expire the signature\\r\\n     * @param v The recovery byte of the signature\\r\\n     * @param r Half of the ECDSA signature pair\\r\\n     * @param s Half of the ECDSA signature pair\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external override {\\r\\n        uint96 amount_;\\r\\n        if (amount == uint256(-1)) {\\r\\n            amount_ = uint96(-1);\\r\\n        } else {\\r\\n            amount_ = safe96(\\r\\n                amount,\\r\\n                \\\"XMSToken::permit: Amount exceeds 96 bits\\\"\\r\\n            );\\r\\n        }\\r\\n        bytes32 domainSeparator =\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    DOMAIN_TYPEHASH,\\r\\n                    keccak256(bytes(name)),\\r\\n                    getChainId(),\\r\\n                    address(this)\\r\\n                )\\r\\n            );\\r\\n\\r\\n        bytes32 digest =\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\r\\n                    \\\"\\\\x19\\\\x01\\\",\\r\\n                    domainSeparator,\\r\\n                    keccak256(\\r\\n                        abi.encode(\\r\\n                            PERMIT_TYPEHASH,\\r\\n                            owner,\\r\\n                            spender,\\r\\n                            amount,\\r\\n                            nonce,\\r\\n                            expiry\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n        address signatory = ecrecover(digest, v, r, s);\\r\\n        require(signatory == owner, \\\"XMSToken::permit: Unauthorized\\\");\\r\\n        require(nonce == nonces[owner]++, \\\"XMSToken::permit: Invalid nonce\\\");\\r\\n        require(signatory != address(0), \\\"XMSToken::permit: Invalid signature\\\");\\r\\n\\r\\n        require(\\r\\n            block.timestamp <= expiry,\\r\\n            \\\"XMSToken::permit: Signature expired\\\"\\r\\n        );\\r\\n        _allowances[owner][spender] = amount_;\\r\\n\\r\\n        emit Approval(owner, spender, amount_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the number of tokens held by the `account`\\r\\n     * @param account The address of the account to get the balance of\\r\\n     * @return The number of tokens held\\r\\n     */\\r\\n    function balanceOf(address account)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `msg.sender` to `to`\\r\\n     * @param to The address of the destination account\\r\\n     * @param rawAmount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transfer(address to, uint256 rawAmount)\\r\\n        external\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint96 amount =\\r\\n            safe96(rawAmount, \\\"XMSToken::transfer: Amount exceeds 96 bits\\\");\\r\\n        _transferTokens(msg.sender, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer `amount` tokens from `from` to `to`\\r\\n     * @param from The address of the source account\\r\\n     * @param to The address of the destination account\\r\\n     * @param rawAmount The number of tokens to transfer\\r\\n     * @return Whether or not the transfer succeeded\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 rawAmount\\r\\n    ) external override returns (bool) {\\r\\n        address spender = msg.sender;\\r\\n        uint96 spenderAllowance = _allowances[from][spender];\\r\\n        uint96 amount =\\r\\n            safe96(rawAmount, \\\"XMSToken::transferFrom: Amount exceeds 96 bits\\\");\\r\\n\\r\\n        if (spender != from && spenderAllowance != uint96(-1)) {\\r\\n            uint96 newAllowance =\\r\\n                sub96(\\r\\n                    spenderAllowance,\\r\\n                    amount,\\r\\n                    \\\"XMSToken::transferFrom: Transfer amount exceeds spender allowance\\\"\\r\\n                );\\r\\n            _allowances[from][spender] = newAllowance;\\r\\n\\r\\n            emit Approval(from, spender, newAllowance);\\r\\n        }\\r\\n\\r\\n        _transferTokens(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\r\\n     * @param delegatee The address to delegate votes to\\r\\n     */\\r\\n    function delegate(address delegatee) external override {\\r\\n        return _delegate(msg.sender, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Delegates votes from signatory to `delegatee`\\r\\n     * @param delegatee The address to delegate votes to\\r\\n     * @param nonce The contract state required to match the signature\\r\\n     * @param expiry The time at which to expire the signature\\r\\n     * @param v The recovery byte of the signature\\r\\n     * @param r Half of the ECDSA signature pair\\r\\n     * @param s Half of the ECDSA signature pair\\r\\n     */\\r\\n    function delegateBySig(\\r\\n        address delegatee,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external override {\\r\\n        bytes32 domainSeparator =\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    DOMAIN_TYPEHASH,\\r\\n                    keccak256(bytes(name)),\\r\\n                    getChainId(),\\r\\n                    address(this)\\r\\n                )\\r\\n            );\\r\\n\\r\\n        bytes32 structHash =\\r\\n            keccak256(\\r\\n                abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\\r\\n            );\\r\\n\\r\\n        bytes32 digest =\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\r\\n            );\\r\\n\\r\\n        address signatory = ecrecover(digest, v, r, s);\\r\\n        require(\\r\\n            signatory != address(0),\\r\\n            \\\"XMSToken::delegateBySig: Invalid signature\\\"\\r\\n        );\\r\\n        require(\\r\\n            nonce == nonces[signatory]++,\\r\\n            \\\"XMSToken::delegateBySig: Invalid nonce\\\"\\r\\n        );\\r\\n        require(\\r\\n            block.timestamp <= expiry,\\r\\n            \\\"XMSToken::delegateBySig: Signature expired\\\"\\r\\n        );\\r\\n        return _delegate(signatory, delegatee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current votes balance for `account`\\r\\n     * @param account The address to get votes balance\\r\\n     * @return The number of current votes for `account`\\r\\n     */\\r\\n    function getCurrentVotes(address account)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint96)\\r\\n    {\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        return\\r\\n            nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Determine the prior number of votes for an account as of a block number\\r\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\r\\n     * @param account The address of the account to check\\r\\n     * @param blockNumber The block number to get the vote balance at\\r\\n     * @return The number of votes the account had as of the given block\\r\\n     */\\r\\n    function getPriorVotes(address account, uint256 blockNumber)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint96)\\r\\n    {\\r\\n        require(\\r\\n            blockNumber < block.number,\\r\\n            \\\"XMSToken::getPriorVotes: Not yet determined\\\"\\r\\n        );\\r\\n\\r\\n        uint32 nCheckpoints = numCheckpoints[account];\\r\\n        if (nCheckpoints == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // First check most recent balance\\r\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\r\\n            return checkpoints[account][nCheckpoints - 1].votes;\\r\\n        }\\r\\n\\r\\n        // Next check implicit zero balance\\r\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint32 lower = 0;\\r\\n        uint32 upper = nCheckpoints - 1;\\r\\n        while (upper > lower) {\\r\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\r\\n            Checkpoint memory cp = checkpoints[account][center];\\r\\n            if (cp.fromBlock == blockNumber) {\\r\\n                return cp.votes;\\r\\n            } else if (cp.fromBlock < blockNumber) {\\r\\n                lower = center;\\r\\n            } else {\\r\\n                upper = center - 1;\\r\\n            }\\r\\n        }\\r\\n        return checkpoints[account][lower].votes;\\r\\n    }\\r\\n\\r\\n    function _delegate(address delegator, address delegatee) internal {\\r\\n        address currentDelegate = delegates[delegator];\\r\\n        uint96 delegatorBalance = _balances[delegator];\\r\\n        delegates[delegator] = delegatee;\\r\\n\\r\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\r\\n\\r\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\r\\n    }\\r\\n\\r\\n    function _transferTokens(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint96 amount\\r\\n    ) internal {\\r\\n        require(\\r\\n            from != address(0),\\r\\n            \\\"XMSToken::_transferTokens: Cannot transfer from the zero address\\\"\\r\\n        );\\r\\n        require(\\r\\n            to != address(0),\\r\\n            \\\"XMSToken::_transferTokens: Cannot transfer to the zero address\\\"\\r\\n        );\\r\\n\\r\\n        _balances[from] = sub96(\\r\\n            _balances[from],\\r\\n            amount,\\r\\n            \\\"XMSToken::_transferTokens: Transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        _balances[to] = add96(\\r\\n            _balances[to],\\r\\n            amount,\\r\\n            \\\"XMSToken::_transferTokens: Transfer amount overflows\\\"\\r\\n        );\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        _moveDelegates(delegates[from], delegates[to], amount);\\r\\n    }\\r\\n\\r\\n    function _moveDelegates(\\r\\n        address srcRep,\\r\\n        address dstRep,\\r\\n        uint96 amount\\r\\n    ) internal {\\r\\n        if (srcRep != dstRep && amount > 0) {\\r\\n            if (srcRep != address(0)) {\\r\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\r\\n                uint96 srcRepOld =\\r\\n                    srcRepNum > 0\\r\\n                        ? checkpoints[srcRep][srcRepNum - 1].votes\\r\\n                        : 0;\\r\\n                uint96 srcRepNew =\\r\\n                    sub96(\\r\\n                        srcRepOld,\\r\\n                        amount,\\r\\n                        \\\"XMSToken::_moveDelegates: Vote amount overflows\\\"\\r\\n                    );\\r\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\r\\n            }\\r\\n\\r\\n            if (dstRep != address(0)) {\\r\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\r\\n                uint96 dstRepOld =\\r\\n                    dstRepNum > 0\\r\\n                        ? checkpoints[dstRep][dstRepNum - 1].votes\\r\\n                        : 0;\\r\\n                uint96 dstRepNew =\\r\\n                    add96(\\r\\n                        dstRepOld,\\r\\n                        amount,\\r\\n                        \\\"XMSToken::_moveDelegates: Vote amount overflows\\\"\\r\\n                    );\\r\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _writeCheckpoint(\\r\\n        address delegatee,\\r\\n        uint32 nCheckpoints,\\r\\n        uint96 oldVotes,\\r\\n        uint96 newVotes\\r\\n    ) internal {\\r\\n        uint32 blockNumber =\\r\\n            safe32(\\r\\n                block.number,\\r\\n                \\\"XMSToken::_writeCheckpoint: Block number exceeds 32 bits\\\"\\r\\n            );\\r\\n\\r\\n        if (\\r\\n            nCheckpoints > 0 &&\\r\\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\\r\\n        ) {\\r\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\r\\n        } else {\\r\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\\r\\n                blockNumber,\\r\\n                newVotes\\r\\n            );\\r\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\r\\n        }\\r\\n\\r\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\r\\n    }\\r\\n\\r\\n    function safe32(uint256 n, string memory errorMessage)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint32)\\r\\n    {\\r\\n        require(n < 2**32, errorMessage);\\r\\n        return uint32(n);\\r\\n    }\\r\\n\\r\\n    function safe96(uint256 n, string memory errorMessage)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint96)\\r\\n    {\\r\\n        require(n < 2**96, errorMessage);\\r\\n        return uint96(n);\\r\\n    }\\r\\n\\r\\n    function add96(\\r\\n        uint96 a,\\r\\n        uint96 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint96) {\\r\\n        uint96 c = a + b;\\r\\n        require(c >= a, errorMessage);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub96(\\r\\n        uint96 a,\\r\\n        uint96 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint96) {\\r\\n        require(b <= a, errorMessage);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function getChainId() internal pure returns (uint256) {\\r\\n        uint256 chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        return chainId;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/core/Core.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./Permissions.sol\\\";\\r\\nimport \\\"../interfaces/ICore.sol\\\";\\r\\nimport \\\"../base/XMSToken.sol\\\";\\r\\nimport \\\"../base/USDMToken.sol\\\";\\r\\n\\r\\n/// @title Source of truth for USDM Protocol\\r\\n/// @author USDM Protocol\\r\\n/// @notice Maintains roles, access control, usdm, xms, genesisGroup, and the XMS treasury\\r\\ncontract Core is ICore, Permissions {\\r\\n    /// @notice XMS support ratio\\r\\n    uint256 public override xmsSupportRatio = 250_000;\\r\\n    /// @notice XMS support ratio precision\\r\\n    uint256 public override xmsSupportRatioPrecision = 1e5;\\r\\n\\r\\n    /// @notice The address of the USDM contract\\r\\n    IUSDMToken public override usdm;\\r\\n\\r\\n    /// @notice The address of the XMS contract\\r\\n    IXMSToken public override xms;\\r\\n\\r\\n    /// @notice The address of the GenesisGroup contract\\r\\n    address public override genesisGroup;\\r\\n    /// @notice Determines whether in genesis period or not\\r\\n    bool public override hasGenesisGroupCompleted;\\r\\n\\r\\n    /// @notice Governance contract process lp\\r\\n    address[] public override approvedPairs;\\r\\n    mapping(address => bool) public override approvedPairExisted;\\r\\n    mapping(address => address[]) public override approvedContracts;\\r\\n    mapping(address => mapping(address => bool))\\r\\n        public\\r\\n        override approvedContractExisted;\\r\\n\\r\\n    constructor() {\\r\\n        _setupGovernor(msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets XMS support ratio, x * 10 ** 5\\r\\n    /// @param _xmsSupportRatio New XMS support ratio\\r\\n    function setXMSSupportRatio(uint256 _xmsSupportRatio)\\r\\n        external\\r\\n        override\\r\\n        onlyGovernor\\r\\n    {\\r\\n        _setXMSSupportRatio(_xmsSupportRatio);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets USDM address to a new address\\r\\n    /// @param token New usdm address\\r\\n    function setUSDM(address token) external override onlyGovernor {\\r\\n        _setUSDM(token);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets XMS address to a new address\\r\\n    /// @param token New xms address\\r\\n    function setXMS(address token) external override onlyGovernor {\\r\\n        _setXMS(token);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets Genesis Group address\\r\\n    /// @param _genesisGroup New genesis group address\\r\\n    function setGenesisGroup(address _genesisGroup)\\r\\n        external\\r\\n        override\\r\\n        onlyGovernor\\r\\n    {\\r\\n        genesisGroup = _genesisGroup;\\r\\n        emit GenesisGroupUpdate(_genesisGroup);\\r\\n    }\\r\\n\\r\\n    /// @notice Sends XMS tokens from treasury to an address\\r\\n    /// @param to The address to send XMS to\\r\\n    /// @param amount The amount of XMS to send\\r\\n    function allocateXMS(address to, uint256 amount)\\r\\n        external\\r\\n        override\\r\\n        onlyGovernor\\r\\n    {\\r\\n        allocateToken(address(xms), to, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Sends X tokens from treasury to an address\\r\\n    /// @param _token The X token\\r\\n    /// @param to The address to send X to\\r\\n    /// @param amount The amount of X to send\\r\\n    function allocateToken(\\r\\n        address _token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public override onlyGovernor {\\r\\n        IERC20 token = IERC20(_token);\\r\\n        require(\\r\\n            token.balanceOf(address(this)) >= amount,\\r\\n            \\\"Core::allocateToken: Not enough token\\\"\\r\\n        );\\r\\n\\r\\n        token.transfer(to, amount);\\r\\n\\r\\n        emit TokenAllocation(to, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Approve XMS tokens from treasury to an address\\r\\n    /// @param to The address to approve XMS to\\r\\n    /// @param amount The amount of XMS to approve\\r\\n    function approveXMS(address to, uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        onlyGovernor\\r\\n    {\\r\\n        approveToken(address(xms), to, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Approve X tokens from treasury to an address\\r\\n    /// @param _token The X token\\r\\n    /// @param to The address to approve X to\\r\\n    /// @param amount The amount of X to approve\\r\\n    function approveToken(\\r\\n        address _token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public override onlyGovernor {\\r\\n        IERC20 token = IERC20(_token);\\r\\n\\r\\n        token.approve(to, amount);\\r\\n\\r\\n        emit TokenApprove(to, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Marks the end of the genesis period\\r\\n    /// @dev Can only be called once\\r\\n    function completeGenesisGroup() external override {\\r\\n        require(\\r\\n            !hasGenesisGroupCompleted,\\r\\n            \\\"Core::completeGenesisGroup: Genesis Group already complete\\\"\\r\\n        );\\r\\n        require(\\r\\n            msg.sender == genesisGroup,\\r\\n            \\\"Core::completeGenesisGroup: Caller is not Genesis Group\\\"\\r\\n        );\\r\\n\\r\\n        hasGenesisGroupCompleted = true;\\r\\n\\r\\n        // solhint-disable-next-line not-rely-on-time\\r\\n        emit GenesisPeriodComplete(block.timestamp);\\r\\n    }\\r\\n\\r\\n    function getApprovedPairsLength() public view override returns (uint256) {\\r\\n        return approvedPairs.length;\\r\\n    }\\r\\n\\r\\n    function getApprovedContractsLength(address _pair)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return approvedContracts[_pair].length;\\r\\n    }\\r\\n\\r\\n    function setApprovedPairAndContract(address _pair, address _contract)\\r\\n        public\\r\\n        override\\r\\n        onlyGovernor\\r\\n    {\\r\\n        require(\\r\\n            !approvedContractExisted[_pair][_contract],\\r\\n            \\\"Core::setApprovedPairAndContract: Exist\\\"\\r\\n        );\\r\\n        if (!approvedPairExisted[_pair]) {\\r\\n            approvedPairs.push(_pair);\\r\\n            approvedPairExisted[_pair] = true;\\r\\n        }\\r\\n        address[] storage contracts = approvedContracts[_pair];\\r\\n        contracts.push(_contract);\\r\\n        approvedContractExisted[_pair][_contract] = true;\\r\\n    }\\r\\n\\r\\n    function removeApprovedPairAndContract(address _pair, address _contract)\\r\\n        public\\r\\n        override\\r\\n        onlyGovernor\\r\\n    {\\r\\n        require(\\r\\n            approvedContractExisted[_pair][_contract],\\r\\n            \\\"Core::setApprovedPairAndContract: Not exist\\\"\\r\\n        );\\r\\n        address[] storage contracts = approvedContracts[_pair];\\r\\n        uint256 idx_i;\\r\\n        for (uint256 i; i < contracts.length; i++) {\\r\\n            if (contracts[i] == _contract) {\\r\\n                idx_i = i;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        contracts[idx_i] = contracts[contracts.length - 1];\\r\\n        contracts.pop();\\r\\n        if (contracts.length == 0) {\\r\\n            uint256 idx_j;\\r\\n            for (uint256 j; j < approvedPairs.length; j++) {\\r\\n                if (approvedPairs[j] == _pair) {\\r\\n                    idx_j = j;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            approvedPairs[idx_j] = approvedPairs[approvedPairs.length - 1];\\r\\n            approvedPairs.pop();\\r\\n            delete approvedPairExisted[_pair];\\r\\n        }\\r\\n        delete approvedContractExisted[_pair][_contract];\\r\\n    }\\r\\n\\r\\n    function _setXMSSupportRatio(uint256 _xmsSupportRatio) internal {\\r\\n        xmsSupportRatio = _xmsSupportRatio;\\r\\n        emit XMSSupportRatioUpdate(_xmsSupportRatio);\\r\\n    }\\r\\n\\r\\n    function _setUSDM(address token) internal {\\r\\n        usdm = IUSDMToken(token);\\r\\n        emit USDMUpdate(token);\\r\\n    }\\r\\n\\r\\n    function _setXMS(address token) internal {\\r\\n        xms = IXMSToken(token);\\r\\n        emit XMSUpdate(token);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/core/Permissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"../interfaces/IPermissions.sol\\\";\\r\\n\\r\\n/// @title Access control module for Core\\r\\n/// @author USDM Protocol\\r\\ncontract Permissions is IPermissions, AccessControl {\\r\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\r\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n    bytes32 public constant PCV_CONTROLLER_ROLE =\\r\\n        keccak256(\\\"PCV_CONTROLLER_ROLE\\\");\\r\\n    bytes32 public constant GOVERN_ROLE = keccak256(\\\"GOVERN_ROLE\\\");\\r\\n    bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\r\\n\\r\\n    constructor() {\\r\\n        // Appointed as a governor so guardian can have indirect access to revoke ability\\r\\n        _setupGovernor(address(this));\\r\\n\\r\\n        _setRoleAdmin(MINTER_ROLE, GOVERN_ROLE);\\r\\n        _setRoleAdmin(BURNER_ROLE, GOVERN_ROLE);\\r\\n        _setRoleAdmin(PCV_CONTROLLER_ROLE, GOVERN_ROLE);\\r\\n        _setRoleAdmin(GOVERN_ROLE, GOVERN_ROLE);\\r\\n        _setRoleAdmin(GUARDIAN_ROLE, GOVERN_ROLE);\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernor() {\\r\\n        require(\\r\\n            isGovernor(msg.sender),\\r\\n            \\\"Permissions::onlyGovernor: Caller is not a governor\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGuardian() {\\r\\n        require(\\r\\n            isGuardian(msg.sender),\\r\\n            \\\"Permissions::onlyGuardian: Caller is not a guardian\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Creates a new role to be maintained\\r\\n    /// @param role The new role id\\r\\n    /// @param adminRole The admin role id for `role`\\r\\n    /// @dev Can also be used to update admin of existing role\\r\\n    function createRole(bytes32 role, bytes32 adminRole)\\r\\n        external\\r\\n        override\\r\\n        onlyGovernor\\r\\n    {\\r\\n        _setRoleAdmin(role, adminRole);\\r\\n    }\\r\\n\\r\\n    /// @notice Grants minter role to address\\r\\n    /// @param minter New minter\\r\\n    function grantMinter(address minter) external override onlyGovernor {\\r\\n        grantRole(MINTER_ROLE, minter);\\r\\n    }\\r\\n\\r\\n    /// @notice Grants burner role to address\\r\\n    /// @param burner New burner\\r\\n    function grantBurner(address burner) external override onlyGovernor {\\r\\n        grantRole(BURNER_ROLE, burner);\\r\\n    }\\r\\n\\r\\n    /// @notice Grants controller role to address\\r\\n    /// @param pcvController New controller\\r\\n    function grantPCVController(address pcvController)\\r\\n        external\\r\\n        override\\r\\n        onlyGovernor\\r\\n    {\\r\\n        grantRole(PCV_CONTROLLER_ROLE, pcvController);\\r\\n    }\\r\\n\\r\\n    /// @notice Grants governor role to address\\r\\n    /// @param governor New governor\\r\\n    function grantGovernor(address governor) external override onlyGovernor {\\r\\n        grantRole(GOVERN_ROLE, governor);\\r\\n    }\\r\\n\\r\\n    /// @notice Grants guardian role to address\\r\\n    /// @param guardian New guardian\\r\\n    function grantGuardian(address guardian) external override onlyGovernor {\\r\\n        grantRole(GUARDIAN_ROLE, guardian);\\r\\n    }\\r\\n\\r\\n    /// @notice Revokes minter role from address\\r\\n    /// @param minter Ex minter\\r\\n    function revokeMinter(address minter) external override onlyGovernor {\\r\\n        revokeRole(MINTER_ROLE, minter);\\r\\n    }\\r\\n\\r\\n    /// @notice Revokes burner role from address\\r\\n    /// @param burner Ex burner\\r\\n    function revokeBurner(address burner) external override onlyGovernor {\\r\\n        revokeRole(BURNER_ROLE, burner);\\r\\n    }\\r\\n\\r\\n    /// @notice Revokes pcvController role from address\\r\\n    /// @param pcvController Ex pcvController\\r\\n    function revokePCVController(address pcvController)\\r\\n        external\\r\\n        override\\r\\n        onlyGovernor\\r\\n    {\\r\\n        revokeRole(PCV_CONTROLLER_ROLE, pcvController);\\r\\n    }\\r\\n\\r\\n    /// @notice Revokes governor role from address\\r\\n    /// @param governor Ex governor\\r\\n    function revokeGovernor(address governor) external override onlyGovernor {\\r\\n        revokeRole(GOVERN_ROLE, governor);\\r\\n    }\\r\\n\\r\\n    /// @notice Revokes guardian role from address\\r\\n    /// @param guardian Ex guardian\\r\\n    function revokeGuardian(address guardian) external override onlyGovernor {\\r\\n        revokeRole(GUARDIAN_ROLE, guardian);\\r\\n    }\\r\\n\\r\\n    /// @notice Revokes a role from address\\r\\n    /// @param role The role to revoke\\r\\n    /// @param account The address to revoke the role from\\r\\n    function revokeOverride(bytes32 role, address account)\\r\\n        external\\r\\n        override\\r\\n        onlyGuardian\\r\\n    {\\r\\n        require(\\r\\n            role != GOVERN_ROLE,\\r\\n            \\\"Permissions::revokeOverride: Guardian cannot revoke governor\\\"\\r\\n        );\\r\\n\\r\\n        // External call because this contract is appointed as a governor and has access to revoke\\r\\n        this.revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if address is a minter\\r\\n    /// @param _address Address to check\\r\\n    /// @return true _address is a minter\\r\\n    function isMinter(address _address) external view override returns (bool) {\\r\\n        return hasRole(MINTER_ROLE, _address);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if address is a burner\\r\\n    /// @param _address Address to check\\r\\n    /// @return true _address is a burner\\r\\n    function isBurner(address _address) external view override returns (bool) {\\r\\n        return hasRole(BURNER_ROLE, _address);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if address is a controller\\r\\n    /// @param _address Address to check\\r\\n    /// @return true _address is a controller\\r\\n    function isPCVController(address _address)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return hasRole(PCV_CONTROLLER_ROLE, _address);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if address is a governor\\r\\n    /// @param _address Address to check\\r\\n    /// @return true _address is a governor\\r\\n    function isGovernor(address _address)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return hasRole(GOVERN_ROLE, _address);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if address is a guardian\\r\\n    /// @param _address Address to check\\r\\n    /// @return true _address is a guardian\\r\\n    function isGuardian(address _address) public view override returns (bool) {\\r\\n        return hasRole(GUARDIAN_ROLE, _address);\\r\\n    }\\r\\n\\r\\n    function _setupGovernor(address governor) internal {\\r\\n        _setupRole(GOVERN_ROLE, governor);\\r\\n    }\\r\\n\\r\\n    function _setupMinter(address minter) internal {\\r\\n        _setupRole(MINTER_ROLE, minter);\\r\\n    }\\r\\n\\r\\n    function _setupBurner(address burner) internal {\\r\\n        _setupRole(BURNER_ROLE, burner);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/ICore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IPermissions.sol\\\";\\r\\nimport \\\"../interfaces/IXMSToken.sol\\\";\\r\\nimport \\\"../interfaces/IUSDMToken.sol\\\";\\r\\n\\r\\n/// @title Core Interface\\r\\n/// @author USDM Protocol\\r\\ninterface ICore is IPermissions {\\r\\n    // ----------- Events -----------\\r\\n\\r\\n    event XMSSupportRatioUpdate(uint256 _xmsSupportRatio);\\r\\n    event USDMUpdate(address indexed _usdm);\\r\\n    event XMSUpdate(address indexed _xms);\\r\\n    event GenesisGroupUpdate(address indexed _genesisGroup);\\r\\n    event TokenAllocation(address indexed _to, uint256 _amount);\\r\\n    event TokenApprove(address indexed _to, uint256 _amount);\\r\\n    event GenesisPeriodComplete(uint256 _timestamp);\\r\\n\\r\\n    // ----------- Governor only state changing api -----------\\r\\n\\r\\n    function setXMSSupportRatio(uint256 _xmsSupportRatio) external;\\r\\n\\r\\n    function setUSDM(address token) external;\\r\\n\\r\\n    function setXMS(address token) external;\\r\\n\\r\\n    function setGenesisGroup(address _genesisGroup) external;\\r\\n\\r\\n    function allocateXMS(address to, uint256 amount) external;\\r\\n\\r\\n    function allocateToken(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function approveXMS(address to, uint256 amount) external;\\r\\n\\r\\n    function approveToken(\\r\\n        address token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function setApprovedPairAndContract(address _pair, address _contract)\\r\\n        external;\\r\\n\\r\\n    function removeApprovedPairAndContract(address _pair, address _contract)\\r\\n        external;\\r\\n\\r\\n    // ----------- Genesis Group only state changing api -----------\\r\\n\\r\\n    function completeGenesisGroup() external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function getApprovedPairsLength() external view returns (uint256);\\r\\n\\r\\n    function getApprovedContractsLength(address _pair)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function approvedPairs(uint256 idx) external view returns (address);\\r\\n\\r\\n    function approvedPairExisted(address pair) external view returns (bool);\\r\\n\\r\\n    function approvedContracts(address pair, uint256 idx)\\r\\n        external\\r\\n        view\\r\\n        returns (address);\\r\\n\\r\\n    function approvedContractExisted(address pair, address _contract)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n\\r\\n    function xmsSupportRatio() external view returns (uint256);\\r\\n\\r\\n    function xmsSupportRatioPrecision() external view returns (uint256);\\r\\n\\r\\n    function usdm() external view returns (IUSDMToken);\\r\\n\\r\\n    function xms() external view returns (IXMSToken);\\r\\n\\r\\n    function genesisGroup() external view returns (address);\\r\\n\\r\\n    function hasGenesisGroupCompleted() external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/ICoreRef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./ICore.sol\\\";\\r\\n\\r\\n/// @title CoreRef interface\\r\\n/// @author USDM Protocol\\r\\ninterface ICoreRef {\\r\\n    // ----------- Events -----------\\r\\n\\r\\n    event CoreUpdate(address indexed _core);\\r\\n\\r\\n    // ----------- Governor only state changing api -----------\\r\\n\\r\\n    function setCore(address core_) external;\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function core() external view returns (ICore);\\r\\n\\r\\n    function usdm() external view returns (IUSDMToken);\\r\\n\\r\\n    function xms() external view returns (IXMSToken);\\r\\n\\r\\n    function usdmBalance() external view returns (uint256);\\r\\n\\r\\n    function xmsBalance() external view returns (uint256);\\r\\n\\r\\n    function getUSDMAmountGovernance() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/IPermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/// @title Permissions interface\\r\\n/// @author USDM Protocol\\r\\ninterface IPermissions {\\r\\n    // ----------- Governor only state changing api -----------\\r\\n\\r\\n    function createRole(bytes32 role, bytes32 adminRole) external;\\r\\n\\r\\n    function grantMinter(address minter) external;\\r\\n\\r\\n    function grantBurner(address burner) external;\\r\\n\\r\\n    function grantPCVController(address pcvController) external;\\r\\n\\r\\n    function grantGovernor(address governor) external;\\r\\n\\r\\n    function grantGuardian(address guardian) external;\\r\\n\\r\\n    function revokeMinter(address minter) external;\\r\\n\\r\\n    function revokeBurner(address burner) external;\\r\\n\\r\\n    function revokePCVController(address pcvController) external;\\r\\n\\r\\n    function revokeGovernor(address governor) external;\\r\\n\\r\\n    function revokeGuardian(address guardian) external;\\r\\n\\r\\n    // ----------- Revoker only state changing api -----------\\r\\n\\r\\n    function revokeOverride(bytes32 role, address account) external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function isBurner(address _address) external view returns (bool);\\r\\n\\r\\n    function isMinter(address _address) external view returns (bool);\\r\\n\\r\\n    function isGovernor(address _address) external view returns (bool);\\r\\n\\r\\n    function isGuardian(address _address) external view returns (bool);\\r\\n\\r\\n    function isPCVController(address _address) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/IUSDMToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IUSDMToken is IERC20 {\\r\\n    // ----------- Minter State changing api -----------\\r\\n\\r\\n    function mint(address _to, uint256 _amount) external;\\r\\n\\r\\n    // ----------- Burner State changing api -----------\\r\\n\\r\\n    // ----------- State changing api -----------\\r\\n\\r\\n    function burn(uint256 _amount) external;\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/interfaces/IXMSToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IXMSToken is IERC20 {\\r\\n    struct Checkpoint {\\r\\n        uint32 fromBlock;\\r\\n        uint96 votes;\\r\\n    }\\r\\n\\r\\n    // ----------- Events -----------\\r\\n\\r\\n    /// @notice An event thats emitted when an account changes its delegate\\r\\n    event DelegateChanged(\\r\\n        address indexed delegator,\\r\\n        address indexed fromDelegate,\\r\\n        address indexed toDelegate\\r\\n    );\\r\\n\\r\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\r\\n    event DelegateVotesChanged(\\r\\n        address indexed delegate,\\r\\n        uint256 previousBalance,\\r\\n        uint256 newBalance\\r\\n    );\\r\\n\\r\\n    // ----------- Minter State changing api -----------\\r\\n\\r\\n    function mint(address _to, uint256 _amount) external;\\r\\n\\r\\n    // ----------- State changing api -----------\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function delegates(address delegator) external view returns (address);\\r\\n\\r\\n    function delegate(address delegatee) external;\\r\\n\\r\\n    function delegateBySig(\\r\\n        address delegatee,\\r\\n        uint256 nonce,\\r\\n        uint256 expiry,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    // ----------- Getters -----------\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function getCurrentVotes(address account) external view returns (uint96);\\r\\n\\r\\n    function getPriorVotes(address account, uint256 blockNumber)\\r\\n        external\\r\\n        view\\r\\n        returns (uint96);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/Workspace/Mars/mars-swap-master/contracts/refs/CoreRef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../interfaces/ICoreRef.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\n/// @title A Reference to Core\\r\\n/// @author USDM Protocol\\r\\n/// @notice Defines some modifiers and utilities around interacting with Core\\r\\nabstract contract CoreRef is ICoreRef, Pausable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    ICore private _core;\\r\\n\\r\\n    /// @notice CoreRef constructor\\r\\n    /// @param core_ USDM Core to reference\\r\\n    constructor(address core_) {\\r\\n        _core = ICore(core_);\\r\\n    }\\r\\n\\r\\n    modifier ifMinterSelf() {\\r\\n        if (_core.isMinter(address(this))) {\\r\\n            _;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    modifier ifBurnerSelf() {\\r\\n        if (_core.isBurner(address(this))) {\\r\\n            _;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    modifier onlyMinter() {\\r\\n        require(\\r\\n            _core.isMinter(msg.sender),\\r\\n            \\\"CoreRef::onlyMinter: Caller is not a minter\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyBurner() {\\r\\n        require(\\r\\n            _core.isBurner(msg.sender),\\r\\n            \\\"CoreRef::onlyBurner: Caller is not a burner\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPCVController() {\\r\\n        require(\\r\\n            _core.isPCVController(msg.sender),\\r\\n            \\\"CoreRef::onlyPCVController: Caller is not a PCV controller\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernor() {\\r\\n        require(\\r\\n            _core.isGovernor(msg.sender),\\r\\n            \\\"CoreRef::onlyGovernor: Caller is not a governor\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGuardianOrGovernor() {\\r\\n        require(\\r\\n            _core.isGovernor(msg.sender) || _core.isGuardian(msg.sender),\\r\\n            \\\"CoreRef::onlyGuardianOrGovernor: Caller is not a guardian or governor\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyUSDM() {\\r\\n        require(\\r\\n            msg.sender == address(usdm()),\\r\\n            \\\"CoreRef::onlyUSDM: Caller is not USDM\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyGenesisGroup() {\\r\\n        require(\\r\\n            msg.sender == _core.genesisGroup(),\\r\\n            \\\"CoreRef::onlyGenesisGroup: Caller is not GenesisGroup\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier postGenesis() {\\r\\n        require(\\r\\n            _core.hasGenesisGroupCompleted(),\\r\\n            \\\"CoreRef::postGenesis: Still in genesis period\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier nonContract() {\\r\\n        require(\\r\\n            !Address.isContract(msg.sender),\\r\\n            \\\"CoreRef::nonContract: Caller is a contract\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Set new Core reference address\\r\\n    /// @param core_ The new core address\\r\\n    function setCore(address core_) external override onlyGovernor {\\r\\n        _core = ICore(core_);\\r\\n        emit CoreUpdate(core_);\\r\\n    }\\r\\n\\r\\n    /// @notice Set pausable methods to paused\\r\\n    function pause() public override onlyGuardianOrGovernor {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /// @notice Set pausable methods to unpaused\\r\\n    function unpause() public override onlyGuardianOrGovernor {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /// @notice Address of the Core contract referenced\\r\\n    /// @return ICore implementation address\\r\\n    function core() public view override returns (ICore) {\\r\\n        return _core;\\r\\n    }\\r\\n\\r\\n    /// @notice Address of the USDM contract referenced by Core\\r\\n    /// @return IUSDMToken implementation address\\r\\n    function usdm() public view override returns (IUSDMToken) {\\r\\n        return _core.usdm();\\r\\n    }\\r\\n\\r\\n    /// @notice Address of the XMS contract referenced by Core\\r\\n    /// @return IUSDMToken implementation address\\r\\n    function xms() public view override returns (IXMSToken) {\\r\\n        return _core.xms();\\r\\n    }\\r\\n\\r\\n    /// @notice USDM balance of contract\\r\\n    /// @return USDM amount held\\r\\n    function usdmBalance() public view override returns (uint256) {\\r\\n        return usdm().balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice XMS balance of contract\\r\\n    /// @return XMS amount held\\r\\n    function xmsBalance() public view override returns (uint256) {\\r\\n        return xms().balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @notice Calculate the usdm amount of governance\\r\\n    function getUSDMAmountGovernance()\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256 usdmAmount)\\r\\n    {\\r\\n        address pair;\\r\\n        address _contract;\\r\\n        for (uint256 i; i < core().getApprovedPairsLength(); i++) {\\r\\n            pair = core().approvedPairs(i);\\r\\n            for (uint256 j; j < core().getApprovedContractsLength(pair); j++) {\\r\\n                _contract = core().approvedContracts(pair, j);\\r\\n                usdmAmount += core()\\r\\n                    .usdm()\\r\\n                    .balanceOf(pair)\\r\\n                    .mul(IERC20(pair).balanceOf(_contract))\\r\\n                    .div(IERC20(pair).totalSupply());\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _burnUSDMHeld() internal {\\r\\n        usdm().burn(usdmBalance());\\r\\n    }\\r\\n\\r\\n    function _mintUSDM(uint256 amount) internal {\\r\\n        usdm().mint(address(this), amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_genesisGroup\",\"type\":\"address\"}],\"name\":\"GenesisGroupUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"GenesisPeriodComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenApprove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_usdm\",\"type\":\"address\"}],\"name\":\"USDMUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_xmsSupportRatio\",\"type\":\"uint256\"}],\"name\":\"XMSSupportRatioUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_xms\",\"type\":\"address\"}],\"name\":\"XMSUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARDIAN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PCV_CONTROLLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocateXMS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveXMS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedContractExisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvedContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedPairExisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvedPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeGenesisGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"adminRole\",\"type\":\"bytes32\"}],\"name\":\"createRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisGroup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getApprovedContractsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getApprovedPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"}],\"name\":\"grantBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"grantGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"grantGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"grantMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pcvController\",\"type\":\"address\"}],\"name\":\"grantPCVController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasGenesisGroupCompleted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isBurner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isPCVController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"removeApprovedPairAndContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"}],\"name\":\"revokeBurner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"revokeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"revokeGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"revokeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pcvController\",\"type\":\"address\"}],\"name\":\"revokePCVController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setApprovedPairAndContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_genesisGroup\",\"type\":\"address\"}],\"name\":\"setGenesisGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setUSDM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setXMS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_xmsSupportRatio\",\"type\":\"uint256\"}],\"name\":\"setXMSSupportRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdm\",\"outputs\":[{\"internalType\":\"contract IUSDMToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xms\",\"outputs\":[{\"internalType\":\"contract IXMSToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xmsSupportRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xmsSupportRatioPrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Core", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}