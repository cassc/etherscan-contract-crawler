{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract PeerToPeerCoinFlip {\r\n    address public owner;\r\n    uint256 private constant MAX_GAMES = 4; // Maximum number of games\r\n    uint256 private constant NO_PLAYER = type(uint256).max;\r\n    uint256[4] public allowedWagers = [0.01 ether, 0.02 ether, 0.05 ether, 0.1 ether];\r\n    uint256 public constant DEVELOPER_FEE_PERCENT = 20; // 20% developer fee\r\n\r\n    struct Game {\r\n        uint256 playerId;\r\n        uint256 wager;\r\n        bool isActive;\r\n    }\r\n\r\n    Game[MAX_GAMES] public games;\r\n\r\n    event GameCreated(uint256 indexed gameId, uint256 wager);\r\n    event GameJoined(uint256 indexed gameId);\r\n    event GameCompleted(uint256 indexed gameId, address indexed winner, uint256 prize);\r\n    event GameReset(uint256 indexed gameId);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        for (uint256 i = 0; i < MAX_GAMES; ++i) {\r\n            games[i].playerId = NO_PLAYER;\r\n            games[i].isActive = false;\r\n        }\r\n    }\r\n\r\n    function createGame(uint256 gameId, uint256 wagerIndex) public payable {\r\n        require(gameId < MAX_GAMES, \"Invalid game ID\");\r\n        require(wagerIndex < allowedWagers.length, \"Invalid wager index\");\r\n        require(msg.value == allowedWagers[wagerIndex], \"Incorrect wager amount\");\r\n        require(games[gameId].playerId == NO_PLAYER, \"Game already in progress\");\r\n\r\n        games[gameId].playerId = uint256(uint160(msg.sender));\r\n        games[gameId].wager = msg.value;\r\n        games[gameId].isActive = true;\r\n\r\n        emit GameCreated(gameId, msg.value);\r\n    }\r\n\r\n    function joinGame(uint256 gameId) public payable {\r\n        require(gameId < MAX_GAMES, \"Invalid game ID\");\r\n        require(games[gameId].isActive, \"Game is not active\");\r\n        require(games[gameId].playerId != NO_PLAYER, \"No game exists\");\r\n        require(games[gameId].playerId != uint256(uint160(msg.sender)), \"Creator cannot join their own game\");\r\n        require(msg.value == games[gameId].wager, \"Incorrect wager amount\");\r\n\r\n        // Perform the coin flip logic here, and determine the winner\r\n        address winner = block.timestamp % 2 == 0 ? address(uint160(games[gameId].playerId)) : msg.sender;\r\n        uint256 totalPrize = msg.value + games[gameId].wager;\r\n        uint256 developerFee = (totalPrize * DEVELOPER_FEE_PERCENT) / 100;\r\n        uint256 prize = totalPrize - developerFee;\r\n\r\n        // Transfer the winnings\r\n        payable(winner).transfer(prize);\r\n        // Transfer the developer fee\r\n        payable(owner).transfer(developerFee);\r\n\r\n        // Reset the game\r\n        emit GameCompleted(gameId, winner, prize);\r\n        resetGame(gameId);\r\n    }\r\n\r\n    function resetGame(uint256 gameId) private {\r\n        require(gameId < MAX_GAMES, \"Invalid game ID\");\r\n        games[gameId].playerId = NO_PLAYER;\r\n        games[gameId].wager = 0;\r\n        games[gameId].isActive = false;\r\n\r\n        emit GameReset(gameId);\r\n    }\r\n\r\n    // Allow the contract to receive Ether\r\n    receive() external payable {}\r\n\r\n    // Administrative functions like withdrawal, setting wagers, etc., to be added here\r\n    // Ensure only the owner can call these\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"name\":\"GameCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"}],\"name\":\"GameCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"GameJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"GameReset\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEVELOPER_FEE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedWagers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wagerIndex\",\"type\":\"uint256\"}],\"name\":\"createGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"joinGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PeerToPeerCoinFlip", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e7c4e2676c0b313ea4ef487764b2d2c9f387d0b22303ce95d837e60dead18745"}