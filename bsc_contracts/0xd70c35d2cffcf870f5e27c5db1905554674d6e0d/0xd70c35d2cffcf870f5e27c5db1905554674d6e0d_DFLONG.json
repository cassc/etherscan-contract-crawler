{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n\r\n    function name() external view returns (string memory);\r\n\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\ninterface ISwapRouter {\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external view returns (address);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] memory path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] memory path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract TokenDistributor {\r\n    constructor(address token) {\r\n        IERC20(token).approve(msg.sender, uint(~uint256(0)));\r\n    }\r\n}\r\n\r\n\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    string private _name; \r\n    string private _symbol; \r\n    uint8 private _decimals; \r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal; \r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint256 public startTradeBlock;\r\n    uint256 public startTime;\r\n\tmapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) public _blackList;\r\n\tmapping(address => bool) public _swapPairList;\r\n\tmapping(address => bool) public _swapRouters;\r\n\r\n\r\n\taddress public immutable _mainPair;\r\n\tISwapRouter public immutable _swapRouter;\r\n\r\n\r\n    address fundAddress;\r\n    \r\n    IERC20 public CAKE;\r\n    bool private inSwap;\r\n\r\n\tmodifier lockTheSwap() {\r\n\t\tinSwap = true;\r\n\t\t_;\r\n\t\tinSwap = false;\r\n\t}\r\n    TokenDistributor public token_distributor;\r\n\r\n    constructor(string memory Name,\r\n        string memory Symbol,\r\n        uint8 Decimals,\r\n        uint256 Supply,\r\n        address routerAddress,\r\n        address cakeAddress,\r\n        address ReceiveAddress,\r\n        address FundAddress\r\n        ) {\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n        _tTotal = Supply * 10 ** _decimals;\r\n        _balances[ReceiveAddress] = _tTotal;\r\n        emit Transfer(address(0), ReceiveAddress, _tTotal);\r\n\r\n        fundAddress = FundAddress;\r\n        ISwapRouter swapRouter = ISwapRouter(routerAddress);\r\n\t\t_swapRouter = swapRouter;\r\n\t\t_allowances[address(this)][address(swapRouter)] = MAX;\r\n\r\n        // \r\n        _allowances[fundAddress][address(swapRouter)] = MAX;\r\n\t\t_swapRouters[address(swapRouter)] = true;\r\n\r\n\r\n        address ethPair;\r\n\t\tethPair = ISwapFactory(swapRouter.factory()).createPair(swapRouter.WETH(),address(this));\r\n        _swapPairList[ethPair] = true;\r\n\t\t_mainPair = ethPair;\r\n\r\n        CAKE = IERC20(cakeAddress);\r\n        \r\n\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n\t\t_feeWhiteList[address(this)] = true;\r\n\t\t_feeWhiteList[msg.sender] = true;\r\n\t\t_feeWhiteList[address(0)] = true;\r\n\t\t_feeWhiteList[DEAD] = true;\r\n\r\n\r\n        excludeHolder[DEAD] = true;\r\n\r\n\r\n\r\n        token_distributor = new TokenDistributor(cakeAddress);\r\n\r\n    }\r\n\r\n    modifier onlyWhiteList() {\r\n\t\taddress msgSender = msg.sender;\r\n\t\trequire(msgSender == fundAddress || msgSender == owner(), \"nw\");\r\n\t\t_;\r\n\t}\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] =\r\n                _allowances[sender][msg.sender] -\r\n                amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"approve from the zero address\");\r\n        require(spender != address(0), \"approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(!_blackList[from],\"bl\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 balance = _balances[from];\r\n        require(balance>=amount,\"Insufficient balance\");\r\n\r\n        bool takeFee;\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n\t\t\tif (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n\t\t\t\ttakeFee = true;\r\n\t\t\t\trequire(0 < startTradeBlock,\"not open\");\r\n\r\n\t\t\t\tuint256 maxSellAmount = (balance * 9999) / 10000;\r\n\t\t\t\tif (amount > maxSellAmount) {\r\n\t\t\t\t\tamount = maxSellAmount;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n        _tokenTransfer(from, to, amount,takeFee);\r\n\r\n        if (_balances[to] >= holderCondition){\r\n            addHolder(to);\r\n        }\r\n\r\n        if (from != address(this)) {\r\n\t\t\tif (takeFee) {\r\n                processReward(_rewardGas);\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    uint256 rewardFeeForBuy = 10;\r\n    uint256 returnFeeForBuy = 10;\r\n    uint256 DEADFeeForBuy = 20;\r\n\r\n    uint256 rewardFeeForSell = 10;\r\n    uint256 returnFeeForSell = 10;\r\n    uint256 returnLpFeeForSell = 20;\r\n    uint256 eralySellFee = 160;\r\n\r\n\r\n    mapping(address => bool) firstBatchWhiteList;\r\n    mapping(address => bool) secondBatchWhiteList;\r\n    mapping(address => bool) thirdbatchWhiteList;\r\n    uint256[3] timeInterval = [120,240,360];\r\n    uint256 whiteListTime = 1800;\r\n\r\n    uint256 earlyTime = 5400;\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        _balances[sender] -= tAmount;\r\n        uint256 feeAmount;\r\n        uint256 opendtime = block.timestamp - startTime;\r\n\r\n\r\n        if (opendtime < whiteListTime && takeFee){\r\n            require(_swapPairList[sender],\"only buy now\");\r\n            require(firstBatchWhiteList[recipient] || secondBatchWhiteList[recipient] || thirdbatchWhiteList[recipient],\"nw\");\r\n            if(secondBatchWhiteList[recipient]){\r\n                require(opendtime > timeInterval[0],\"not your turn\");\r\n            }else if(thirdbatchWhiteList[recipient]){\r\n                require(opendtime > timeInterval[1],\"not your turn\");\r\n            }\r\n        }\r\n\r\n        if (opendtime > whiteListTime && opendtime < earlyTime && takeFee){\r\n            if (_swapPairList[recipient]) {\r\n                uint256 _eralySellFee = (tAmount * eralySellFee) / 1000;\r\n                _takeTransfer(sender, fundAddress, _eralySellFee);\r\n                feeAmount += _eralySellFee;\r\n            }\r\n        }\r\n\r\n        if (takeFee){\r\n            uint256 feeForAirdrop;\r\n        \r\n            uint256 _rewardFeeForBuy = (tAmount * rewardFeeForBuy) / 1000;\r\n            uint256 _returnFeeForBuy = (tAmount * returnFeeForBuy) / 1000;\r\n            uint256 _DEADFeeForBuy = (tAmount * DEADFeeForBuy) / 1000;\r\n\r\n\r\n            uint256 _rewardFeeForSell = (tAmount * rewardFeeForSell) / 1000;\r\n            uint256 _returnFeeForSell = (tAmount * returnFeeForSell) / 1000;\r\n            uint256 _returnLpFeeForSell = (tAmount * returnLpFeeForSell) / 1000;\r\n\r\n            // buy\r\n            if (_swapPairList[sender]) {\r\n                feeAmount += _rewardFeeForBuy + _returnFeeForBuy + _DEADFeeForBuy;\r\n                _takeTransfer(sender, DEAD, _DEADFeeForBuy);\r\n                _takeTransfer(sender, address(this), feeAmount - _DEADFeeForBuy);\r\n            }\r\n            // sell\r\n            else if (_swapPairList[recipient]) {\r\n                feeAmount += _rewardFeeForSell + _returnFeeForSell + _returnLpFeeForSell;\r\n                _takeTransfer(sender, address(this), _rewardFeeForSell + _returnFeeForSell + _returnLpFeeForSell);\r\n\r\n            }\r\n            // airdrop\r\n            if (feeAmount>0){\r\n                feeForAirdrop = AirDrop(sender, recipient, tAmount, feeAmount);\r\n                feeAmount += feeForAirdrop;\r\n            }\r\n\r\n            uint256 contract_balance = balanceOf(address(this));\r\n\t\t\tbool need_sell = contract_balance >= numTokensSellToFund;\r\n\t\t\tif (need_sell && !inSwap && _swapPairList[recipient]) {\r\n\t\t\t\tSwapTokenToFund(numTokensSellToFund);\r\n\t\t\t}\r\n        }\r\n        _takeTransfer(sender,recipient, tAmount-feeAmount);\r\n    }\r\n\r\n    uint256 public numTokensSellToFund = 10 * 10 ** 18;\r\n    function SwapTokenToFund(uint256 amount) private lockTheSwap {\r\n        uint256 totalFee = rewardFeeForBuy + returnFeeForBuy + rewardFeeForSell + returnFeeForSell +returnLpFeeForSell;\r\n        uint256 lpAmount =  amount * returnLpFeeForSell / totalFee / 2;\r\n\r\n        if (lpAmount > 0) {\r\n            uint256 balanceBefore = address(this).balance;\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = _swapRouter.WETH();\r\n            _swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                lpAmount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n            _swapRouter.addLiquidityETH{value : address(this).balance - balanceBefore}(\r\n                address(this),\r\n                lpAmount,\r\n                0,\r\n                0,\r\n                fundAddress,\r\n                block.timestamp\r\n        );\r\n            amount -= lpAmount + lpAmount;\r\n        }\r\n\r\n        address[] memory path2 = new address[](3);\r\n        path2[0] = address(this);\r\n        path2[1] = _swapRouter.WETH();\r\n        path2[2] = address(CAKE);\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\t\t\tamount,\r\n\t\t\t0,\r\n\t\t\tpath2,\r\n\t\t\taddress(token_distributor),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\r\n        uint256 swapBalance = CAKE.balanceOf(address(token_distributor));\r\n        CAKE.transferFrom(address(token_distributor), address(this), swapBalance);\r\n\r\n        uint256 fundFee = swapBalance * (returnFeeForBuy + returnFeeForSell) / totalFee;\r\n        CAKE.transfer(fundAddress, fundFee);\r\n\r\n    }\r\n\r\n    address private lastAirdropAddress;\r\n    function AirDrop(address sender,address recipient,uint256 tAmount,uint256 feeAmount) private returns (uint256 feeForAirdrop){\r\n        feeForAirdrop = feeAmount / 100000;\r\n        if (feeForAirdrop > 0) {\r\n            uint256 seed = (uint160(lastAirdropAddress) |\r\n                block.number) ^ uint160(recipient);\r\n            uint256 airdropAmount = feeForAirdrop / 3;\r\n            address airdropAddress;\r\n            for (uint256 i; i < 3; ) {\r\n                airdropAddress = address(uint160(seed | tAmount));\r\n                _takeTransfer(sender, airdropAddress, airdropAmount);\r\n                unchecked {\r\n                    ++i;\r\n                    seed = seed >> 1;\r\n                }\r\n            }\r\n            lastAirdropAddress = airdropAddress;\r\n        }\r\n    }\r\n\r\n    function _funTransfer(address sender, address recipient, uint256 tAmount, uint256 fee) private {\r\n\t\t_balances[sender] -= tAmount;\r\n\t\tuint256 feeAmount = (tAmount / 100) * fee;\r\n\t\tif (feeAmount > 0) {\r\n\t\t\t_takeTransfer(sender, fundAddress, feeAmount);\r\n\t\t}\r\n\t\t_takeTransfer(sender, recipient, tAmount - feeAmount);\r\n\t}\r\n\r\n\r\n     function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n\r\n    // tokenRewards\r\n    uint256 public _rewardGas = 500000;\r\n    uint256 public currentIndex;\r\n\tuint256 public RewardCondition = 1 ether;\r\n    uint256 public holderCondition = 100 ether;\r\n\tuint256 public progressRewardBlock;\r\n\tuint256 public progressRewardBlockDebt = 1;\r\n\r\n    function processReward(uint256 gas) private {\r\n\t\tuint256 blockNum = block.number;\r\n\r\n\t\tif (progressRewardBlock + progressRewardBlockDebt > blockNum) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (CAKE.balanceOf(address(this)) < RewardCondition) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tuint256 thisTokenTotal = _tTotal;\r\n        uint256 tokenBalance;\r\n\r\n\r\n\t\taddress shareHolder;\r\n\t\tuint256 amount;\r\n\r\n\t\tuint256 shareholderCount = holders.length;\r\n\t\tuint256 gasUsed = 0;\r\n\t\tuint256 iterations = 0;\r\n\t\tuint256 gasLeft = gasleft();\r\n\r\n\t\twhile (gasUsed < gas && iterations < shareholderCount) {\r\n\t\t\tif (currentIndex >= shareholderCount) {\r\n\t\t\t\tcurrentIndex = 0;\r\n\t\t\t}\r\n\t\t\tshareHolder = holders[currentIndex];\r\n\t\t\ttokenBalance = balanceOf(shareHolder);\r\n\t\t\tif (!excludeHolder[shareHolder] && tokenBalance > holderCondition) {\r\n\t\t\t\tamount = (RewardCondition * tokenBalance) / thisTokenTotal;\r\n\t\t\t\tif (amount > 0) {\r\n\t\t\t\t\tCAKE.transfer(shareHolder, amount);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tgasUsed = gasUsed + (gasLeft - gasleft());\r\n\t\t\tgasLeft = gasleft();\r\n\t\t\tcurrentIndex++;\r\n\t\t\titerations++;\r\n\t\t}\r\n\t\tprogressRewardBlock = blockNum;\r\n\t}\r\n\r\n\r\n\r\n    address[] public DistributionAddress;\r\n    function startTrade() payable external  onlyWhiteList {\r\n        require(0 == startTradeBlock, \"trading\");\r\n        startTradeBlock = block.number;\r\n        startTime = block.timestamp;\r\n        address[] memory path = new address[](2);\r\n        path[0] = _swapRouter.WETH();\r\n        path[1] = address(this);\r\n        _swapRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value:msg.value}(\r\n            0,\r\n            path,\r\n            fundAddress,\r\n            block.timestamp\r\n        );\r\n        \r\n        uint256 Buyedamount = _balances[fundAddress];\r\n        _balances[fundAddress] -= Buyedamount;\r\n        uint256 amount = Buyedamount /DistributionAddress.length;\r\n        for (uint i = 0; i < DistributionAddress.length; i++) {\r\n            _takeTransfer(fundAddress,DistributionAddress[i],amount);\r\n        }\r\n\r\n    }\r\n\r\n    address[] public holders;\r\n\tmapping(address => uint256) public holderIndex;\r\n\tmapping(address => bool) public excludeHolder;\r\n\r\n    function addHolder(address adr) private {\r\n\t\tif (0 == holderIndex[adr]) {\r\n\t\t\tif (0 == holders.length || holders[0] != adr) {\r\n\t\t\t\tuint256 size;\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tsize := extcodesize(adr)\r\n\t\t\t\t}\r\n\t\t\t\tif (size > 0) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tholderIndex[adr] = holders.length;\r\n\t\t\t\tholders.push(adr);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n    // -----------------\r\n    function withDrawToken(address tokenAddr) external onlyWhiteList {\r\n        uint256 token_num = IERC20(tokenAddr).balanceOf(address(this));\r\n        IERC20(tokenAddr).transfer(msg.sender, token_num);\r\n    }\r\n\r\n    function withDrawEth() external onlyWhiteList {\r\n        uint256 balance = address(this).balance;\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n    function batchSetDistributionAddress(\r\n        address[] memory addr\r\n    ) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            DistributionAddress.push(addr[i]);\r\n        }\r\n    }\r\n\r\n    function setBlackList(address addr, bool enable) external onlyOwner {\r\n        _blackList[addr] = enable;\r\n    }\r\n\r\n    function batchSetBlackList(\r\n        address[] memory addr,\r\n        bool enable\r\n    ) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _blackList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n\r\n    function batchSetfirstBatchWhiteList(\r\n        address[] memory addr,\r\n        bool enable\r\n    ) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            firstBatchWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function batchSetsecondBatchWhiteList(\r\n        address[] memory addr,\r\n        bool enable\r\n    ) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            secondBatchWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function batchSetthirdbatchWhiteList(\r\n        address[] memory addr,\r\n        bool enable\r\n    ) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            thirdbatchWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    function setRewardPrams(\r\n        uint256 newRewardCondition,\r\n        uint256 newHolderCondition,\r\n        uint256 newProgressRewardBlockDebt\r\n    ) external onlyWhiteList {\r\n        RewardCondition = newRewardCondition;\r\n        holderCondition = newHolderCondition;\r\n        progressRewardBlockDebt = newProgressRewardBlockDebt;\r\n    }\r\n\r\n    function setNumTokensSellToFund(uint256 newNum) external onlyWhiteList {\r\n        numTokensSellToFund = newNum;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyWhiteList {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(\r\n        address[] memory addr,\r\n        bool enable\r\n    ) external onlyWhiteList {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setExcludeHolder(\r\n        address addr,\r\n        bool enable\r\n    ) external onlyWhiteList {\r\n        excludeHolder[addr] = enable;\r\n    }\r\n\r\n    function setRewardGas(uint256 rewardGas) external onlyWhiteList {\r\n        require(rewardGas >= 200000 && rewardGas <= 2000000, \"200000-2000000\");\r\n        _rewardGas = rewardGas;\r\n    }\r\n\r\n    function setFundAddress(\r\n        address newfund\r\n    ) external onlyWhiteList {\r\n        fundAddress = newfund;\r\n        _feeWhiteList[newfund] = true;\r\n    }\r\n\r\n    function setTax(\r\n        uint256 _rewardFeeForBuy,\r\n        uint256 _returnFeeForBuy,\r\n        uint256 _DEADFeeForBuy,\r\n        uint256 _rewardFeeForSell,\r\n        uint256 _returnFeeForSell,\r\n        uint256 _returnLpFeeForSell\r\n    ) external onlyWhiteList {\r\n        rewardFeeForBuy = _rewardFeeForBuy;\r\n        returnFeeForBuy = _returnFeeForBuy;\r\n        DEADFeeForBuy = _DEADFeeForBuy;\r\n        rewardFeeForSell = _rewardFeeForSell;\r\n        returnFeeForSell = _returnFeeForSell;\r\n        returnLpFeeForSell = _returnLpFeeForSell;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n}\r\n\r\n\r\ncontract DFLONG is AbsToken {\r\n    constructor()\r\n        AbsToken(\r\n            \"DFLONG\",\r\n            \"DFLONG\",\r\n            18,\r\n            100000,\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E,\r\n            0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82,\r\n            0x99ca97F2b9924132A5Ae2DD7B2aAf39A09f279e4,\r\n            0xDbcbeC78BEe5f82f6FCd4eAb37E4e23EB6Ca7f3A\r\n        ){}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CAKE\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DistributionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"batchSetDistributionAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetfirstBatchWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetsecondBatchWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetthirdbatchWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holderCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"holderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressRewardBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newfund\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGas\",\"type\":\"uint256\"}],\"name\":\"setRewardGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRewardCondition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newHolderCondition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newProgressRewardBlockDebt\",\"type\":\"uint256\"}],\"name\":\"setRewardPrams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardFeeForBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_returnFeeForBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_DEADFeeForBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardFeeForSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_returnFeeForSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_returnLpFeeForSell\",\"type\":\"uint256\"}],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_distributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withDrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"withDrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DFLONG", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2312a6fe5b778ddd84d8b26ca8a5c649162680c9dbc2b912472d9366be76e4e9"}