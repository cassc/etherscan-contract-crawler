{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract BigBlueWhale is Ownable, ReentrancyGuard {\r\n    bool public started;\r\n\r\n    uint8[5] public INIT_PERCENTAGES = [20, 18, 15, 12, 8];\r\n    uint256[5] public INIT_AMOUNTS = [\r\n        80 ether,\r\n        30 ether,\r\n        10 ether,\r\n        1 ether,\r\n        0.05 ether\r\n    ];\r\n    uint256[3] public PERCENTAGES = [250, 100, 20];\r\n    uint256 TIME_STEP = 86400;\r\n    address public developer = 0xFfF1746052f181414eA290542B9FD782f1593CdA;\r\n    address public marketing = 0xD29105cB1486fa883C04042440dc9E81EE2B0Fbc;\r\n\r\n    mapping(address => Stake) public stake;\r\n    mapping(address => address[]) public level1;\r\n    mapping(address => address[]) public level2;\r\n    mapping(address => address[]) public level3;\r\n\r\n    struct Stake {\r\n        uint256 stake;\r\n        uint256 notWithdrawn;\r\n        uint256 timestamp;\r\n        address partner;\r\n        uint8 percentage;\r\n        uint256 refEarning;\r\n        uint256 earning;\r\n        uint256 fastBonus;\r\n        uint256[3] levelBusiness;\r\n    }\r\n\r\n    event StakeChanged(\r\n        address indexed user,\r\n        address indexed partner,\r\n        uint256 amount\r\n    );\r\n\r\n    modifier whenStarted() {\r\n        require(started, \"Not started yet\");\r\n        _;\r\n    }\r\n\r\n    constructor(address newOwner) {\r\n        transferOwnership(newOwner);\r\n    }\r\n\r\n    receive() external payable onlyOwner {}\r\n\r\n    function start() external onlyOwner {\r\n        started = true;\r\n    }\r\n\r\n    function getLevel1Data(address account)\r\n        external\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return level1[account];\r\n    }\r\n\r\n    function getLevel2Data(address account)\r\n        external\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return level2[account];\r\n    }\r\n\r\n    function getLevel3Data(address account)\r\n        external\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return level3[account];\r\n    }\r\n\r\n    function deposit(address partner)\r\n        external\r\n        payable\r\n        whenStarted\r\n        nonReentrant\r\n    {\r\n        uint256 msgValue = msg.value;\r\n        address sender = _msgSender();\r\n\r\n        require(msgValue >= 0.05 ether, \"Too low amount to deposit\");\r\n\r\n        _updateNotWithdrawn();\r\n\r\n        Stake storage userStake = stake[sender];\r\n\r\n        userStake.stake += msgValue;\r\n\r\n        if (userStake.percentage == 0) {\r\n            require(\r\n                partner != sender &&\r\n                    (stake[partner].stake > 0 || partner == marketing),\r\n                \"Invalid partner address\"\r\n            );\r\n\r\n            userStake.partner = partner;\r\n\r\n            if (partner != address(0)) {\r\n                address _partner = partner;\r\n                for (uint256 i = 0; i < 3 && _partner != address(0); i++) {\r\n                    if (i == 0) level1[_partner].push(sender);\r\n                    else if (i == 1) level2[_partner].push(sender);\r\n                    else if (i == 2) level3[_partner].push(sender);\r\n\r\n                    _partner = stake[_partner].partner;\r\n                }\r\n            }\r\n        }\r\n\r\n        _updatePercentage(sender);\r\n\r\n        address account = userStake.partner;\r\n\r\n        for (uint8 i; i < 3 && account != address(0); i++) {\r\n            stake[account].levelBusiness[i] += msgValue;\r\n            account = stake[account].partner;\r\n        }\r\n\r\n        uint256 bonus = (msgValue * 7) / 100;\r\n        userStake.notWithdrawn += bonus;\r\n        userStake.fastBonus += bonus;\r\n\r\n        uint256 fee = (msgValue * 5) / 100;\r\n        payable(marketing).transfer(fee);\r\n        payable(developer).transfer(fee);\r\n\r\n        emit StakeChanged(sender, userStake.partner, userStake.stake);\r\n    }\r\n\r\n    function reinvest(uint256 amount) external whenStarted nonReentrant {\r\n        require(amount >= 0.0004 ether, \"Too low amount to reinvest\");\r\n\r\n        address sender = _msgSender();\r\n        _updateNotWithdrawn();\r\n\r\n        Stake storage userStake = stake[sender];\r\n\r\n        require(amount <= userStake.notWithdrawn, \"Balance too low\");\r\n\r\n        userStake.notWithdrawn -= amount;\r\n        userStake.stake += amount;\r\n\r\n        _updatePercentage(sender);\r\n\r\n        emit StakeChanged(sender, userStake.partner, userStake.stake);\r\n    }\r\n\r\n    function withdraw(uint256 amount) external whenStarted nonReentrant {\r\n        require(amount >= 0.001 ether, \"Too low amount to withdraw\");\r\n\r\n        address sender = _msgSender();\r\n        _updateNotWithdrawn();\r\n\r\n        Stake storage userStake = stake[sender];\r\n\r\n        require(amount <= userStake.notWithdrawn, \"Balance too low\");\r\n\r\n        userStake.notWithdrawn -= amount;\r\n        userStake.earning += amount;\r\n\r\n        payable(sender).transfer(amount);\r\n    }\r\n\r\n    function pendingReward(address account) public view returns (uint256) {\r\n        Stake storage userStake = stake[account];\r\n        uint256 elapsedTime = block.timestamp - userStake.timestamp;\r\n\r\n        uint256 amount = ((userStake.stake *\r\n            (elapsedTime / TIME_STEP) *\r\n            userStake.percentage) / 1000);\r\n\r\n        // Calculate the maximum withdrawable amount based on the stake conditions\r\n        uint256 maxWithdrawable = userStake.stake *\r\n            2 -\r\n            userStake.earning -\r\n            userStake.notWithdrawn;\r\n\r\n        // Ensure the calculated amount does not exceed the maximum withdrawable amount\r\n        if (amount > maxWithdrawable) {\r\n            amount = maxWithdrawable;\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function _updateNotWithdrawn() private {\r\n        uint256 pending = pendingReward(_msgSender());\r\n        Stake storage userStake = stake[_msgSender()];\r\n\r\n        // Update the user's timestamp and notWithdrawn balance\r\n        userStake.timestamp = block.timestamp;\r\n        userStake.notWithdrawn += pending;\r\n\r\n        // Traverse the referral tree to update notWithdrawn for each level\r\n        _traverseTree(userStake.partner, pending);\r\n    }\r\n\r\n    function _traverseTree(address account, uint256 value) private {\r\n        if (value != 0) {\r\n            for (uint8 i; i < 3; i++) {\r\n                if (stake[account].stake > 0) {\r\n                    uint256 amount = ((value * PERCENTAGES[i]) / 1000);\r\n                    stake[account].refEarning += amount;\r\n                    if (\r\n                        (stake[account].earning +\r\n                            stake[account].notWithdrawn +\r\n                            amount) > stake[account].stake * 2\r\n                    ) {\r\n                        amount =\r\n                            (stake[account].stake * 2) -\r\n                            stake[account].earning -\r\n                            stake[account].notWithdrawn;\r\n                    }\r\n                    stake[account].notWithdrawn += amount;\r\n\r\n                    account = stake[account].partner;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _updatePercentage(address account) private {\r\n        uint256 stakeAmount = stake[account].stake;\r\n\r\n        for (uint256 i = INIT_AMOUNTS.length; i > 0; i--) {\r\n            if (stakeAmount >= INIT_AMOUNTS[i - 1]) {\r\n                stake[account].percentage = INIT_PERCENTAGES[i - 1];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getLevelBusiness(address account)\r\n        external\r\n        view\r\n        returns (uint256[3] memory levelIncome)\r\n    {\r\n        levelIncome = stake[account].levelBusiness;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"INIT_AMOUNTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"INIT_PERCENTAGES\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PERCENTAGES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLevel1Data\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLevel2Data\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLevel3Data\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLevelBusiness\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"levelIncome\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"level1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"level2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"level3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"notWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"percentage\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"refEarning\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earning\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fastBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BigBlueWhale", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000cd8a2cd41c084d7f633287cf9315da4b577e9e85", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://280ab9d2bf01981dd3442b359d4d7ed634fbec4d1840dff0b4b3d9339117be99"}