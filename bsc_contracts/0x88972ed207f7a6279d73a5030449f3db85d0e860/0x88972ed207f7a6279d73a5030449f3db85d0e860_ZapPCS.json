{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-04-25\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-01-10\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2021-12-27\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2021-06-19\r\n */\r\n\r\n/**\r\n \r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.12;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity >=0.4.0;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\npragma solidity >=0.6.0;\r\n\r\n/**\r\n * @title SafeBEP20\r\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IBEP20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IBEP20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IBEP20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeBEP20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeBEP20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeBEP20: BEP20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity >=0.4.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity >=0.4.24 <0.8.0;\r\n\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(\r\n            _initializing || _isConstructor() || !_initialized,\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            cs := extcodesize(self)\r\n        }\r\n        return cs == 0;\r\n    }\r\n}\r\n\r\npragma solidity >=0.4.24 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {}\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard is Initializable, ContextUpgradeable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() public {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.12;\r\n\r\ninterface IPlanetFarm {\r\n    function poolLength() external view returns (uint256);\r\n\r\n    function poolInfo() external view returns (uint256);\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    // View function to see pending BSWs on frontend.\r\n    function pendingGAMMA(uint256 _pid, address _user)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    // Deposit LP tokens to MasterChef for BSW allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n\r\n    // Withdraw LP tokens from MasterChef.\r\n    function withdraw(uint256 _pid, uint256 _amount) external;\r\n\r\n    // Stake BSW tokens to MasterChef\r\n    function enterStaking(uint256 _amount) external;\r\n\r\n    // Withdraw BSW tokens from STAKING.\r\n    function leaveStaking(uint256 _amount) external;\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw(uint256 _pid) external;\r\n}\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IPlanetFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n    function INIT_CODE_PAIR_HASH() external view returns (bytes32);\r\n}\r\n\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x095ea7b3, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper::safeApprove: approve failed\"\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0xa9059cbb, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper::safeTransfer: transfer failed\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper::transferFrom: transferFrom failed\"\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(\r\n            success,\r\n            \"TransferHelper::safeTransferETH: ETH transfer failed\"\r\n        );\r\n    }\r\n}\r\n\r\ninterface IPlanetRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IPlanetRouter02 is IPlanetRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IPlanetPair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface AggregatorEthereumV3 {\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function getRoundData(uint80 _roundId)\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\ncontract ZapPCS is OwnableUpgradeable, ReentrancyGuard {\r\n    using SafeBEP20 for IBEP20;\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint112;\r\n\r\n    /* ========== CONSTANT VARIABLES ========== */\r\n\r\n    address private constant CAKE = 0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82;\r\n    address private constant TUSD = 0x14016E85a25aeb13065688cAFB43044C2ef86784;\r\n    address private constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address private constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\r\n    address private constant USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n    address private constant DAI = 0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3;\r\n    address private constant USDC = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;\r\n    address private constant VAI = 0x4BD17003473389A42DAF6a0a729f6Fdb328BbBd7;\r\n    address private constant BTCB = 0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c;\r\n    address private constant ETH = 0x2170Ed0880ac9A755fd29B2688956BD959F933F8;\r\n    address private constant ADA = 0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47;\r\n    address private constant XRP = 0x1D2F0da169ceB9fC7B3144628dB156f3F6c60dBE;\r\n    address private constant DOGE = 0xbA2aE424d960c26247Dd6c32edC70B295c744C43;\r\n    address private constant AQUA = 0x72B7D61E8fC8cF971960DD9cfA59B8C829D91991;\r\n    address private constant GAMMA = 0xb3Cb6d2f8f2FDe203a022201C81a96c167607F15;\r\n    address private constant BSW = 0x965F527D9159dCe6288a2219DB51fc6Eef120dD1;\r\n    address private constant UST = 0x23396cF899Ca06c4472205fC903bDB4de249D6fC;\r\n    address private constant SHIB = 0x2859e4544C4bB03966803b044A93563Bd2D0DD4D;\r\n    address private constant SOL = 0x570A5D26f7765Ecb712C0924E4De545B89fD43dF;\r\n    address private constant DOT = 0x7083609fCE4d1d8Dc0C979AAb8c869Ea2C873402;\r\n    address private constant LINK = 0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD;\r\n    address private constant EMP = 0x3b248CEfA87F836a4e6f6d6c9b42991b88Dc1d58;\r\n    address private constant ESHARE = 0xDB20F6A8665432CE895D724b417f77EcAC956550;\r\n    address private constant GMT = 0x3019BF2a2eF8040C242C9a4c5c4BD4C81678b2A1;\r\n    address private constant CMX = 0xE3D2D7552295E3d1D3Fa151A44E10ec304Eb0689;\r\n\r\n    IPlanetRouter02 private constant ROUTER =\r\n        IPlanetRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    IPlanetFarm private constant FARM =\r\n        IPlanetFarm(0xa5f8C5Dbd5F286960b9d90548680aE5ebFf07652);\r\n    IPlanetFactory private constant FACTORY =\r\n        IPlanetFactory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    mapping(address => bool) private notFlip;\r\n    mapping(address => address) private routePairAddresses;\r\n    address[] public tokens;\r\n    mapping(address => address) public chainLink;\r\n\r\n    /*struct PoolInfo {\r\n        IBEP20 lpToken; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. BSWs to distribute per block.\r\n        uint256 lastRewardBlock; // Last block number that BSWs distribution occurs.\r\n        uint256 accBSWPerShare; // Accumulated BSWs per share, times 1e12. See below.\r\n    }\r\n    PoolInfo[] public poolInfo;\r\n    */\r\n\r\n    /* ========== INITIALIZER ========== */\r\n\r\n    function initialize() external initializer {\r\n        __Ownable_init();\r\n        require(owner() != address(0), \"Zap: owner must be set\");\r\n\r\n        setNotFlip(CAKE);\r\n        setNotFlip(TUSD);\r\n        setNotFlip(WBNB);\r\n        setNotFlip(BUSD);\r\n        setNotFlip(USDT);\r\n        setNotFlip(DAI);\r\n        setNotFlip(USDC);\r\n        setNotFlip(VAI);\r\n        setNotFlip(BTCB);\r\n        setNotFlip(ETH);\r\n        setNotFlip(ADA);\r\n        setNotFlip(XRP);\r\n        setNotFlip(DOGE);\r\n        setNotFlip(UST);\r\n        setNotFlip(SHIB);\r\n        setNotFlip(DOT);\r\n        setNotFlip(LINK);\r\n        setNotFlip(SOL);\r\n        setNotFlip(EMP);\r\n        setNotFlip(ESHARE);\r\n\r\n        setRoutePairAddress(VAI, BUSD);\r\n        setRoutePairAddress(DAI, BUSD);\r\n        setRoutePairAddress(TUSD, BUSD);\r\n        setRoutePairAddress(UST, BUSD);\r\n        setRoutePairAddress(GMT, USDC);\r\n        setRoutePairAddress(CMX, USDT);\r\n        setRoutePairAddress(EMP, ETH);\r\n        \r\n\r\n\r\n\r\n\r\n\r\n        //set chainLink priceFeed\r\n\r\n        setPriceFeed(CAKE, address(0xB6064eD41d4f67e353768aA239cA86f4F73665a1));\r\n        setPriceFeed(WBNB, address(0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE));\r\n        setPriceFeed(BUSD, address(0xcBb98864Ef56E9042e7d2efef76141f15731B82f));\r\n        setPriceFeed(USDT, address(0xB97Ad0E74fa7d920791E90258A6E2085088b4320));\r\n        setPriceFeed(DAI, address(0x132d3C0B1D2cEa0BC552588063bdBb210FDeecfA));\r\n        setPriceFeed(USDC, address(0x51597f405303C4377E36123cBc172b13269EA163));\r\n        setPriceFeed(VAI, address(0x058316f8Bb13aCD442ee7A216C7b60CFB4Ea1B53));\r\n        setPriceFeed(BTCB, address(0x264990fbd0A4796A3E3d8E37C4d5F87a3aCa5Ebf));\r\n        setPriceFeed(ETH, address(0x9ef1B8c0E4F7dc8bF5719Ea496883DC6401d5b2e));\r\n        setPriceFeed(ADA, address(0xa767f745331D267c7751297D982b050c93985627));\r\n        setPriceFeed(XRP, address(0x93A67D414896A280bF8FFB3b389fE3686E014fda));\r\n        setPriceFeed(DOGE, address(0x3AB0A0d137D4F946fBB19eecc6e92E64660231C8));\r\n        setPriceFeed(SOL, address(0x0E8a53DD9c13589df6382F13dA6B3Ec8F919B323));\r\n        setPriceFeed(DOT, address(0xC333eb0086309a16aa7c8308DfD32c8BBA0a2592));\r\n        setPriceFeed(LINK, address(0xca236E327F629f9Fc2c30A4E95775EbF0B89fac8));\r\n        setPriceFeed(SHIB, address(0xA615Be6cb0f3F36A641858dB6F30B9242d0ABeD8));\r\n        setPriceFeed(TUSD, address(0xa3334A9762090E827413A7495AfeCE76F41dFc06));\r\n\r\n        transferOwnership(0x22267AD91Bf10e427601c25901f34700379720a0);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    /* ========== View Functions ========== */\r\n\r\n    function isFlip(address _address) public view returns (bool) {\r\n        return !notFlip[_address];\r\n    }\r\n\r\n    function routePair(address _address) external view returns (address) {\r\n        return routePairAddresses[_address];\r\n    }\r\n\r\n    function priceFeed(address token) external view returns (uint256) {\r\n        return _priceFeed(token);\r\n    }\r\n\r\n    function lpPrice(address token)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 _reserve0,\r\n            uint256 _reserve1,\r\n            uint256 _price0,\r\n            uint256 _price1,\r\n            uint256 _ratio0,\r\n            //uint256 _ratio1,\r\n            uint256 _totalSupply,\r\n            uint256 _lp\r\n        )\r\n    {\r\n        require(isFlip(token), \"not LP token\");\r\n        IPlanetPair pair = IPlanetPair(token);\r\n        (uint112 r0, uint112 r1, ) = pair.getReserves();\r\n        uint256 price0 = _priceFeed(pair.token0());\r\n        uint256 price1 = _priceFeed(pair.token1());\r\n        uint256 totalSupply = pair.totalSupply();\r\n        uint256 ratio0 = uint256(r0).mul(price0).div(totalSupply);\r\n        uint256 ratio1 = uint256(r1).mul(price1).div(totalSupply);\r\n        uint256 lp = ratio0 + ratio1;\r\n        _reserve0 = r0;\r\n        _reserve1 = r1;\r\n        _price0 = price0;\r\n        _price1 = price1;\r\n        _ratio0 = ratio0;\r\n        //_ratio1 = ratio1;\r\n        _totalSupply = totalSupply;\r\n        _lp = lp;\r\n    }\r\n\r\n    /*\r\n    function getVersion() public view returns (uint256) {\r\n        return priceFeed.version();\r\n    }\r\n    */\r\n\r\n    /**\r\n     * Returns the latest price\r\n     */\r\n    function getLatestPrice(address token) public view returns (uint256) {\r\n        address pricefeed = chainLink[token];\r\n        (, int256 price, , , ) = AggregatorEthereumV3(pricefeed)\r\n            .latestRoundData();\r\n        return uint256(price * 10000000000);\r\n    }\r\n\r\n    /**\r\n     * Returns the Conversion Rate\r\n     */\r\n    // Chainlink price field\r\n    function getConversionRate(uint256 ethAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 ethPrice = getLatestPrice(BSW);\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 10**18;\r\n        return ethAmountInUsd;\r\n    }\r\n\r\n    function getAPR(uint256 _allocPoint, uint256 _totalAllocPoint, address lpToken, uint256 _rewardPerBloc) public view returns(\r\n        uint256 _tvl,\r\n        uint256 _br,\r\n        uint256 _apr\r\n        )\r\n        {\r\n            //PoolInfo storage pool = FARM.poolInfo[_pid];\r\n            //IBEP20 lpToken = pool.lpToken;   \r\n            //uint256 ap = pool.allocPoint;\r\n            //(IBEP20 lpToken,uint256 ap,,) = FARM.poolInfo(_pid);\r\n            //uint256 tp = FARM.totalAllocPoint;\r\n            uint256 tp = _totalAllocPoint;\r\n            uint256 ap = _allocPoint;\r\n            //uint256 rewardPerBloc = FARM.BSWPerBlock();\r\n            uint256 rewardPerBloc = _rewardPerBloc;\r\n            IPlanetPair pair = IPlanetPair(lpToken);\r\n            uint256 tvl = _lpPrice(lpToken).mul(pair.totalSupply()).div(1e12);\r\n            uint256 br = rewardPerBloc.mul(_priceFeed(BSW)).mul(10512000);//per block reward for the pool 10512000=1200*24*365\r\n            \r\n            uint256 poolReward= br.mul(ap).div(tp);// the actual APR * 1e18 to avoid floating points\r\n            uint256 apr = poolReward.div(tvl);// the actual APR * 1e18 to avoid floating points\r\n             _tvl = tvl;\r\n             _br = br;\r\n             _apr = apr;\r\n    }\r\n    \r\n\r\n    /* ========== External Functions ========== */\r\n    function zapInToken(\r\n        address _from,\r\n        uint256 amount,\r\n        address _to\r\n    ) external {\r\n        IBEP20(_from).safeTransferFrom(msg.sender, address(this), amount);\r\n        _approveTokenIfNeeded(_from);\r\n\r\n        if (isFlip(_to)) {\r\n            IPlanetPair pair = IPlanetPair(_to);\r\n            address token0 = pair.token0();\r\n            address token1 = pair.token1();\r\n            if (_from == token0 || _from == token1) {\r\n                // swap half amount for other\r\n                address other = _from == token0 ? token1 : token0;\r\n                _approveTokenIfNeeded(other);\r\n                uint256 sellAmount = amount.div(2);\r\n                uint256 otherAmount = _swap(\r\n                    _from,\r\n                    sellAmount,\r\n                    other,\r\n                    address(this)\r\n                );\r\n                ROUTER.addLiquidity(\r\n                    _from,\r\n                    other,\r\n                    amount.sub(sellAmount),\r\n                    otherAmount,\r\n                    0,\r\n                    0,\r\n                    msg.sender,\r\n                    block.timestamp\r\n                );\r\n            } else {\r\n                uint256 bnbAmount = _swapTokenForBNB(\r\n                    _from,\r\n                    amount,\r\n                    address(this)\r\n                );\r\n                _swapBNBToFlip(_to, bnbAmount, msg.sender);\r\n            }\r\n        } else {\r\n            _swap(_from, amount, _to, msg.sender);\r\n        }\r\n    }\r\n\r\n    function zapIn(address _to) external payable {\r\n        _swapBNBToFlip(_to, msg.value, msg.sender);\r\n    }\r\n\r\n    function zapOut(address _from, uint256 amount) external {\r\n        IBEP20(_from).safeTransferFrom(msg.sender, address(this), amount);\r\n        _approveTokenIfNeeded(_from);\r\n\r\n        if (!isFlip(_from)) {\r\n            _swapTokenForBNB(_from, amount, msg.sender);\r\n        } else {\r\n            IPlanetPair pair = IPlanetPair(_from);\r\n            address token0 = pair.token0();\r\n            address token1 = pair.token1();\r\n            if (token0 == WBNB || token1 == WBNB) {\r\n                ROUTER.removeLiquidityETH(\r\n                    token0 != WBNB ? token0 : token1,\r\n                    amount,\r\n                    0,\r\n                    0,\r\n                    msg.sender,\r\n                    block.timestamp\r\n                );\r\n            } else {\r\n                ROUTER.removeLiquidity(\r\n                    token0,\r\n                    token1,\r\n                    amount,\r\n                    0,\r\n                    0,\r\n                    msg.sender,\r\n                    block.timestamp\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /* ========== Private Functions ========== */\r\n    function _lpPrice(address token) private view returns (uint256) {\r\n        require(isFlip(token), \"not LP token\");\r\n        IPlanetPair pair = IPlanetPair(token);\r\n        (uint112 r0, uint112 r1, ) = pair.getReserves();\r\n        uint256 price0 = _priceFeed(pair.token0());\r\n        uint256 price1 = _priceFeed(pair.token1());\r\n        uint256 totalSupply = pair.totalSupply();\r\n        uint256 ratio0 = uint256(r0).mul(price0).div(totalSupply);\r\n        uint256 ratio1 = uint256(r1).mul(price1).div(totalSupply);\r\n        return ratio0.add(ratio1);\r\n    }\r\n\r\n    function _priceFeed(address token) private view returns (uint256) {\r\n        uint256 _price = 0;\r\n        if (!isFlip(token)) {\r\n            address pricefeed = chainLink[token];\r\n            (, int256 price, , , ) = AggregatorEthereumV3(pricefeed)\r\n                .latestRoundData();\r\n            _price = uint256(price);\r\n        } else {\r\n            address lp = FACTORY.getPair(WBNB, token);\r\n            IPlanetPair pair = IPlanetPair(lp);\r\n            (uint112 r0, uint112 r1, ) = pair.getReserves();\r\n            address pricefeed = chainLink[WBNB];\r\n            (, int256 wbnbPrice, , , ) = AggregatorEthereumV3(pricefeed)\r\n                .latestRoundData();\r\n\r\n            if (pair.token0() == WBNB) {\r\n                _price = uint256(r0).mul(uint256(wbnbPrice)).div(uint256(r1));\r\n            } else {\r\n                _price = uint256(r1).mul(uint256(wbnbPrice)).div(uint256(r0));\r\n            }\r\n        }\r\n        return _price;\r\n    }\r\n\r\n    function _approveTokenIfNeeded(address token) private {\r\n        if (IBEP20(token).allowance(address(this), address(ROUTER)) == 0) {\r\n            IBEP20(token).safeApprove(address(ROUTER), uint256(-1));\r\n        }\r\n    }\r\n\r\n    function _swapBNBToFlip(\r\n        address flip,\r\n        uint256 amount,\r\n        address receiver\r\n    ) private {\r\n        if (!isFlip(flip)) {\r\n            _swapBNBForToken(flip, amount, receiver);\r\n        } else {\r\n            // flip\r\n            IPlanetPair pair = IPlanetPair(flip);\r\n            address token0 = pair.token0();\r\n            address token1 = pair.token1();\r\n            if (token0 == WBNB || token1 == WBNB) {\r\n                address token = token0 == WBNB ? token1 : token0;\r\n                uint256 swapValue = amount.div(2);\r\n                uint256 tokenAmount = _swapBNBForToken(\r\n                    token,\r\n                    swapValue,\r\n                    address(this)\r\n                );\r\n\r\n                _approveTokenIfNeeded(token);\r\n                ROUTER.addLiquidityETH{value: amount.sub(swapValue)}(\r\n                    token,\r\n                    tokenAmount,\r\n                    0,\r\n                    0,\r\n                    receiver,\r\n                    block.timestamp\r\n                );\r\n            } else {\r\n                uint256 swapValue = amount.div(2);\r\n                uint256 token0Amount = _swapBNBForToken(\r\n                    token0,\r\n                    swapValue,\r\n                    address(this)\r\n                );\r\n                uint256 token1Amount = _swapBNBForToken(\r\n                    token1,\r\n                    amount.sub(swapValue),\r\n                    address(this)\r\n                );\r\n\r\n                _approveTokenIfNeeded(token0);\r\n                _approveTokenIfNeeded(token1);\r\n                ROUTER.addLiquidity(\r\n                    token0,\r\n                    token1,\r\n                    token0Amount,\r\n                    token1Amount,\r\n                    0,\r\n                    0,\r\n                    receiver,\r\n                    block.timestamp\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function _swapBNBForToken(\r\n        address token,\r\n        uint256 value,\r\n        address receiver\r\n    ) private returns (uint256) {\r\n        address[] memory path;\r\n\r\n        if (routePairAddresses[token] != address(0)) {\r\n            path = new address[](3);\r\n            path[0] = WBNB;\r\n            path[1] = routePairAddresses[token];\r\n            path[2] = token;\r\n        } else {\r\n            path = new address[](2);\r\n            path[0] = WBNB;\r\n            path[1] = token;\r\n        }\r\n\r\n        uint256[] memory amounts = ROUTER.swapExactETHForTokens{value: value}(\r\n            0,\r\n            path,\r\n            receiver,\r\n            block.timestamp\r\n        );\r\n        return amounts[amounts.length - 1];\r\n    }\r\n\r\n    function _swapTokenForBNB(\r\n        address token,\r\n        uint256 amount,\r\n        address receiver\r\n    ) private returns (uint256) {\r\n        address[] memory path;\r\n        if (routePairAddresses[token] != address(0)) {\r\n            path = new address[](3);\r\n            path[0] = token;\r\n            path[1] = routePairAddresses[token];\r\n            path[2] = WBNB;\r\n        } else {\r\n            path = new address[](2);\r\n            path[0] = token;\r\n            path[1] = WBNB;\r\n        }\r\n\r\n        uint256[] memory amounts = ROUTER.swapExactTokensForETH(\r\n            amount,\r\n            0,\r\n            path,\r\n            receiver,\r\n            block.timestamp\r\n        );\r\n        return amounts[amounts.length - 1];\r\n    }\r\n\r\n    function _swap(\r\n        address _from,\r\n        uint256 amount,\r\n        address _to,\r\n        address receiver\r\n    ) private returns (uint256) {\r\n        address intermediate = routePairAddresses[_from];\r\n        if (intermediate == address(0)) {\r\n            intermediate = routePairAddresses[_to];\r\n        }\r\n\r\n        address[] memory path;\r\n        if (intermediate != address(0) && (_from == WBNB || _to == WBNB)) {\r\n            // [WBNB, BUSD, VAI] or [VAI, BUSD, WBNB]\r\n            path = new address[](3);\r\n            path[0] = _from;\r\n            path[1] = intermediate;\r\n            path[2] = _to;\r\n        } else if (\r\n            intermediate != address(0) &&\r\n            (_from == intermediate || _to == intermediate)\r\n        ) {\r\n            // [VAI, BUSD] or [BUSD, VAI]\r\n            path = new address[](2);\r\n            path[0] = _from;\r\n            path[1] = _to;\r\n        } else if (\r\n            intermediate != address(0) &&\r\n            routePairAddresses[_from] == routePairAddresses[_to]\r\n        ) {\r\n            // [VAI, DAI] or [VAI, USDC]\r\n            path = new address[](3);\r\n            path[0] = _from;\r\n            path[1] = intermediate;\r\n            path[2] = _to;\r\n        } else if (\r\n            routePairAddresses[_from] != address(0) &&\r\n            routePairAddresses[_to] != address(0) &&\r\n            routePairAddresses[_from] != routePairAddresses[_to]\r\n        ) {\r\n            // routePairAddresses[xToken] = xRoute\r\n            // [VAI, BUSD, WBNB, xRoute, xToken]\r\n            path = new address[](5);\r\n            path[0] = _from;\r\n            path[1] = routePairAddresses[_from];\r\n            path[2] = WBNB;\r\n            path[3] = routePairAddresses[_to];\r\n            path[4] = _to;\r\n        } else if (\r\n            intermediate != address(0) &&\r\n            routePairAddresses[_from] != address(0)\r\n        ) {\r\n            // [VAI, BUSD, WBNB, TUSD]\r\n            path = new address[](4);\r\n            path[0] = _from;\r\n            path[1] = intermediate;\r\n            path[2] = WBNB;\r\n            path[3] = _to;\r\n        } else if (\r\n            intermediate != address(0) && routePairAddresses[_to] != address(0)\r\n        ) {\r\n            // [TUSD, WBNB, BUSD, VAI]\r\n            path = new address[](4);\r\n            path[0] = _from;\r\n            path[1] = WBNB;\r\n            path[2] = intermediate;\r\n            path[3] = _to;\r\n        } else if (_from == WBNB || _to == WBNB) {\r\n            // [WBNB, TUSD] or [TUSD, WBNB]\r\n            path = new address[](2);\r\n            path[0] = _from;\r\n            path[1] = _to;\r\n        } else {\r\n            // [USDT, TUSD] or [TUSD, USDT]\r\n            path = new address[](3);\r\n            path[0] = _from;\r\n            path[1] = WBNB;\r\n            path[2] = _to;\r\n        }\r\n\r\n        uint256[] memory amounts = ROUTER.swapExactTokensForTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            receiver,\r\n            block.timestamp\r\n        );\r\n        return amounts[amounts.length - 1];\r\n    }\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n    function setPriceFeed(address asset, address feed) public onlyOwner {\r\n        chainLink[asset] = feed;\r\n    }\r\n\r\n    function setRoutePairAddress(address asset, address route)\r\n        public\r\n        onlyOwner\r\n    {\r\n        routePairAddresses[asset] = route;\r\n    }\r\n\r\n    function setNotFlip(address token) public onlyOwner {\r\n        bool needPush = notFlip[token] == false;\r\n        notFlip[token] = true;\r\n        if (needPush) {\r\n            tokens.push(token);\r\n        }\r\n    }\r\n\r\n    function removeToken(uint256 i) external onlyOwner {\r\n        address token = tokens[i];\r\n        notFlip[token] = false;\r\n        tokens[i] = tokens[tokens.length - 1];\r\n        tokens.pop();\r\n    }\r\n\r\n    function sweep() external onlyOwner {\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            address token = tokens[i];\r\n            if (token == address(0)) continue;\r\n            uint256 amount = IBEP20(token).balanceOf(address(this));\r\n            if (amount > 0) {\r\n                _swapTokenForBNB(token, amount, owner());\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdraw(address token) external onlyOwner {\r\n        if (token == address(0)) {\r\n            payable(owner()).transfer(address(this).balance);\r\n            return;\r\n        }\r\n\r\n        IBEP20(token).transfer(owner(), IBEP20(token).balanceOf(address(this)));\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"chainLink\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalAllocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBloc\",\"type\":\"uint256\"}],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_br\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"getConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isFlip\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"lpPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reserve0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserve1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ratio0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"routePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setNotFlip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"route\",\"type\":\"address\"}],\"name\":\"setRoutePairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"zapIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"zapInToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"zapOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ZapPCS", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7b4eda6db7dabf47b15c93495c1ee4dca3fe02b249cb94e06494357bb00369b2"}