{"SourceCode": "// SPDX-License-Identifier:MIT\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nabstract contract ERC20 is IERC20,Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) internal _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    uint256 _totalSupply;\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address _owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[_owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        if(owner() == account){\r\n            _totalSupply = _totalSupply.add(amount);\r\n        }\r\n        \r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    function burn(uint256 _value) public{\r\n        \r\n        _burn(msg.sender,_value);\r\n    }\r\n\r\n    function _approve(address _owner, address spender, uint256 value) internal {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[_owner][spender] = value;\r\n        emit Approval(_owner, spender, value);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\nabstract contract ERC20Detailed  {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    \r\n    constructor (string memory __name, string memory __symbol, uint8 __decimals)  {\r\n        _name = __name;\r\n        _symbol = __symbol;\r\n        _decimals = __decimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\nabstract contract Pausable is Context {\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\ncontract MOMCOIN is ERC20, ERC20Detailed, Pausable {\r\n\r\n    using SafeMath for uint256;\r\n    uint256 tokenBalance;\r\n    uint256 deployTime;\r\n    uint256 maxSlotTime = 7884000;\r\n\r\n\r\n\r\n    uint256 public withdrawlAmount;\r\n    uint256 public maxSupply;\r\n    uint256 public RemainingReward;\r\n    uint256 public time;\r\n    uint256 public Duration = 7884000 minutes; \r\n    uint256 slotTime = 1 minutes;\r\n\r\n\r\n    address public pancakePair;\r\n    \r\n    uint256 public maxsSellingAmount = 2E18;\r\n    uint256 public maxBuyAmount = 50E18;\r\n    uint256 public maxTrPerDay = 50E18;\r\n    uint256 public maxMultisendPday = 1000E18;\r\n    uint256 public locktime = 1 days;\r\n    address public multisendaccount;\r\n\r\n\r\n    mapping (address => bool) public _isExcluded;\r\n    mapping (address => bool) public  blacklist;\r\n\r\n    mapping (address => uint256) public selling;\r\n    mapping (address => uint256) public buying;\r\n\r\n\r\n    // transfer conditions mapping\r\n    mapping(address => uint256) public _firstTransfer;\r\n    mapping(address => uint256) public _totTransfers;\r\n\r\n    //pancake/uniswap/sunswap selling condition \r\n    mapping(address => uint256) public _firstSelltime;\r\n    mapping(address => uint256) public _totalAmountSell;\r\n\r\n    // pancake/uniswap/sunswap buying condition\r\n    mapping(address => uint256) public _firstBuytime;\r\n    mapping(address => uint256) public _totalAmountBuy;\r\n\r\n    // multisendtoken receiver condition\r\n    mapping(address => uint256) public _firstReceivetime;\r\n    mapping(address => uint256) public _totalAmountreceive;\r\n\r\n\r\n    event Multisended(uint256 total, address tokenAddress);\r\n\r\n\r\n    \r\n    constructor()\r\n    ERC20Detailed(\"MAD OVER MUSIC\", \"MOM COIN\",18)\r\n    {\r\n        deployTime = block.timestamp;\r\n        RemainingReward = 1900000*(10**18);\r\n        _isExcluded[msg.sender] = true;\r\n        _isExcluded[address(this)] = true;\r\n        _mint(owner(),100000*(10**18));\r\n        _mint(address(this), 1900000*(10**18));\r\n        tokenBalance = balanceOf(address(this));\r\n        Duration= Duration.div(60);\r\n        maxSupply = 2000000*(10**18);\r\n    }\r\n\r\n    function calculatingPerMinutes()\r\n    public\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 totalTime;\r\n        totalTime = (block.timestamp.sub(deployTime)).div(slotTime);\r\n        if(totalTime >= maxSlotTime){\r\n            totalTime = maxSlotTime;\r\n        }\r\n        return totalTime;\r\n    }\r\n\r\n    function WithdrawableTokens(address _user)\r\n    public\r\n    view\r\n    returns(uint256)\r\n    {\r\n        uint256 _reward;\r\n        uint256 TokenPerMinutes;\r\n        if(_user == owner()){\r\n            uint256 calcTime = calculatingPerMinutes();\r\n            TokenPerMinutes = (tokenBalance.div(Duration));\r\n            _reward =  (calcTime.mul(TokenPerMinutes));\r\n\r\n            return _reward.sub(withdrawlAmount);  \r\n        }\r\n        else{\r\n            return 0;\r\n        }       \r\n    }\r\n    \r\n    function updateTime(uint256 _time)\r\n    public\r\n    onlyOwner\r\n    {\r\n        Withdraw();\r\n        deployTime = block.timestamp;\r\n        Duration = _time;\r\n        maxSlotTime = _time;\r\n    }\r\n\r\n    function setPause()\r\n    public\r\n    onlyOwner\r\n    {_pause();}\r\n\r\n    function setUnPause()\r\n    public\r\n    onlyOwner\r\n    {_unpause();}\r\n\r\n    function Withdraw()\r\n    public\r\n    onlyOwner\r\n    {\r\n        uint256 transferReward = WithdrawableTokens(msg.sender);\r\n        withdrawlAmount += transferReward;\r\n        RemainingReward -= transferReward;\r\n        require(withdrawlAmount <= balanceOf(address(this)), \"Not enough balance!\");\r\n        _transfer(address(this),owner(),transferReward);\r\n        _totalSupply = _totalSupply.add(transferReward);\r\n    }\r\n    /////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n    function addPairAddress(address _pair)\r\n    public\r\n    onlyOwner\r\n    whenNotPaused\r\n    {pancakePair=_pair;}\r\n        \r\n    function setBuyLimit(uint256 _amount)\r\n    public\r\n    onlyOwner\r\n    whenNotPaused\r\n    {maxBuyAmount=_amount*1E18;}\r\n\r\n    function setMaxSell(uint256 _amount)\r\n    public\r\n    onlyOwner\r\n    whenNotPaused\r\n    {maxsSellingAmount=_amount*1E18;}\r\n\r\n    function setPerDayTransferLimit(uint256 _amount)\r\n    public\r\n    onlyOwner\r\n    whenNotPaused\r\n    {maxTrPerDay=_amount*1E18;}\r\n\r\n    function setMaxMultiSendPday(uint256 _amount)\r\n    public\r\n    onlyOwner\r\n    whenNotPaused\r\n    {maxMultisendPday=_amount*1E18;}\r\n\r\n    function addToblackList(address _addr)\r\n    public\r\n    onlyOwner\r\n    whenNotPaused\r\n    {\r\n        require(blacklist[_addr]==false,\"already blacklisted\");\r\n        blacklist[_addr]=true;\r\n    }\r\n\r\n    function removeFromBlackList(address _addr)\r\n    public\r\n    onlyOwner\r\n    whenNotPaused\r\n    {\r\n        require(blacklist[_addr]==true,\"already removed from blacklist\");\r\n        blacklist[_addr]=false;\r\n    }\r\n\r\n    function multiSendToken( address[] calldata _contributors, uint256[] calldata __balances)\r\n    external\r\n    whenNotPaused  \r\n    {\r\n        uint8 i = 0;\r\n        for (i; i < _contributors.length; i++)\r\n        {_transfer(msg.sender,_contributors[i], __balances[i]);}\r\n    }\r\n\r\n    function sendMultiBnb(address payable[]  memory  _contributors, uint256[] memory __balances)\r\n    public\r\n    payable whenNotPaused\r\n    {\r\n        uint256 total = msg.value;\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n            require(total >= __balances[i],\"Invalid Amount\");\r\n            total = total - __balances[i];\r\n            _contributors[i].transfer(__balances[i]);\r\n        }\r\n        emit Multisended(  msg.value , msg.sender);\r\n    }\r\n\r\n\r\n    function Buy()\r\n    external\r\n    payable\r\n    whenNotPaused\r\n    {require(msg.value > 0,\"Select amount first\");}\r\n    \r\n    \r\n    function Sell(uint256 _token)\r\n    external\r\n    whenNotPaused\r\n    {\r\n        require(_token > 0,\"Select amount first\");\r\n        _transfer(msg.sender,address(this),_token);\r\n    }\r\n\r\n    function WithDrawBNB(uint256 _amount)\r\n    public\r\n    onlyOwner\r\n    whenNotPaused\r\n    {payable(msg.sender).transfer(_amount);}\r\n    \r\n    function getTokens(uint256 _amount)\r\n    public\r\n    onlyOwner\r\n    whenNotPaused\r\n    {_transfer(address(this),msg.sender,_amount);}\r\n\r\n    \r\n    function ExcludefromLimits(address _addr,bool _state)\r\n    public\r\n    onlyOwner\r\n    whenNotPaused\r\n    {_isExcluded[_addr]=_state;}\r\n\r\n    function setMultiSendAccount(address _addr)\r\n    public\r\n    onlyOwner\r\n    whenNotPaused\r\n    {multisendaccount=_addr;}\r\n\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount)\r\n    internal\r\n    whenNotPaused\r\n    override\r\n    {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(blacklist[sender]==false,\"you are blacklisted\");\r\n        require(blacklist[recipient]==false,\"you are blacklisted\");\r\n        _beforeTokenTransfer(sender, recipient, amount);  \r\n        \r\n         if(sender==owner() && recipient == pancakePair  ){\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\t\r\n         selling[sender]=selling[sender].add(amount);\r\n\r\n        }    \r\n\r\n          else if(sender==owner()){\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n        }\r\n\r\n        /*<<<<<<>>>>>>*/    /*  SELLING LIMIT    */   /*<<<<<<>>>>>>*/\r\n\r\n        else if (recipient == pancakePair )\r\n        {\r\n            if(_isExcluded[sender]==false )\r\n            {\r\n                if(block.timestamp < _firstSelltime[sender].add(locktime))\r\n                {\t\t\t \r\n                    require(_totalAmountSell[sender]+amount <= maxsSellingAmount, \"You can't sell more than maxsSellingAmount 1\");\r\n\t\t\t\t    _totalAmountSell[sender]= _totalAmountSell[sender].add(amount);\r\n                    _balances[sender] = _balances[sender].sub(amount);\r\n                    _balances[recipient] = _balances[recipient].add(amount);\r\n                }  \r\n\r\n        else if(block.timestamp>_firstSelltime[sender].add(locktime))\r\n        {\r\n               _totalAmountSell[sender]=0;\r\n                 require(_totalAmountSell[sender].add(amount) <= maxsSellingAmount, \"You can't sell more than maxsSellingAmount 2\");\r\n                  _balances[sender] = _balances[sender].sub(amount);\r\n                _balances[recipient] = _balances[recipient].add(amount);\r\n                _totalAmountSell[sender] =_totalAmountSell[sender].add(amount);\r\n                _firstSelltime[sender]=block.timestamp;\r\n        }\r\n\r\n        }\r\n        else\r\n        {\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            _totalAmountSell[sender] =_totalAmountSell[sender].add(amount);\r\n        }\r\n\r\n\t\t}\r\n                \r\n    /*<<<<<<>>>>>>*/    /*  BUYING CONDITION    */   /*<<<<<<>>>>>>*/\r\n\r\n    else if(sender==pancakePair)\r\n    {\r\n        if(_isExcluded[recipient]==false )\r\n        {\r\n        if(block.timestamp < _firstBuytime[recipient].add(locktime))\r\n        {\t\t\t \r\n            require(_totalAmountBuy[recipient]+amount <= maxBuyAmount, \"You can't sell more than maxBuyAmount 1\");\r\n\t\t\t_totalAmountBuy[recipient]= _totalAmountBuy[recipient].add(amount);\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n\t\t}  \r\n        else if(block.timestamp>_firstBuytime[recipient].add(locktime))\r\n        {\r\n            _totalAmountBuy[recipient]=0;\r\n            require(_totalAmountBuy[recipient].add(amount) <= maxBuyAmount, \"You can't sell more than maxBuyAmount 2\");\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            _totalAmountBuy[recipient] =_totalAmountBuy[recipient].add(amount);\r\n            _firstBuytime[recipient]=block.timestamp;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        _totalAmountBuy[recipient] =_totalAmountBuy[recipient].add(amount);\r\n    }\r\n            \r\n\r\n    }\r\n    /*<<<<<<>>>>>>*/    /*  MULTISEND ACCOUNT TRANSFER    */   /*<<<<<<>>>>>>*/\r\n\r\n    else if(sender==multisendaccount)\r\n    {\r\n        if(block.timestamp < _firstReceivetime[recipient].add(locktime))\r\n        {\t\t\t \r\n            require(_totalAmountreceive[recipient]+amount <= maxMultisendPday, \"You can't transfer more than maxMultisendPday to receiver address 1\");\r\n\t\t\t_totalAmountreceive[recipient]= _totalAmountreceive[recipient].add(amount);\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n\t\t}  \r\n\r\n        else if(block.timestamp>_firstReceivetime[recipient].add(locktime))\r\n        {\r\n            _totalAmountreceive[recipient]=0;\r\n            require(_totalAmountreceive[recipient].add(amount) <= maxMultisendPday, \"You can't transfer more than maxMultisendPday to receiver address 2\");\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            _totalAmountreceive[recipient] =_totalAmountreceive[recipient].add(amount);\r\n            _firstReceivetime[recipient]=block.timestamp;\r\n        }\r\n        else\r\n        {\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n        }    \r\n    }\r\n    /*<<<<<<>>>>>>*/    /*  EXCLUDE RECEIVER    */   /*<<<<<<>>>>>>*/\r\n\r\n    else if(_isExcluded[recipient]==true )\r\n    {\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n    }\r\n\r\n    /*<<<<<<>>>>>>*/    /*  NORMAL TRANSFER    */   /*<<<<<<>>>>>>*/\r\n\r\n    else if(_isExcluded[sender]==false )\r\n    {\r\n       if(block.timestamp < _firstTransfer[sender].add(locktime))\r\n       {\t\t\t \r\n           require(_totTransfers[sender]+amount <= maxTrPerDay, \"You can't transfer more than maxTrPerDay 1\");\r\n\t\t\t_totTransfers[sender]= _totTransfers[sender].add(amount);\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n\t\t}  \r\n\r\n        else if(block.timestamp>_firstTransfer[sender].add(locktime))\r\n        {\r\n            _totTransfers[sender]=0;\r\n            require(_totTransfers[sender].add(amount) <= maxTrPerDay, \"You can't transfer more than maxTrPerDay 2\");\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            _totTransfers[sender] =_totTransfers[sender].add(amount);\r\n            _firstTransfer[sender]=block.timestamp;\r\n        }\r\n        else\r\n        {\r\n            _balances[sender] = _balances[sender].sub(amount);\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n        }\r\n    }\r\n        \r\n    /*<<<<<<>>>>>>*/    /*  BUYING CONDITION    */   /*<<<<<<>>>>>>*/\r\n\r\n    else if(_isExcluded[sender]==true )\r\n    {\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n    }\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"Multisended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"ExcludefromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RemainingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"Sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithDrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"WithdrawableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_firstBuytime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_firstReceivetime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_firstSelltime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_firstTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_totTransfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_totalAmountBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_totalAmountSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_totalAmountreceive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"addPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addToblackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculatingPerMinutes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locktime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMultisendPday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTrPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxsSellingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"__balances\",\"type\":\"uint256[]\"}],\"name\":\"multiSendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisendaccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removeFromBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"selling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"__balances\",\"type\":\"uint256[]\"}],\"name\":\"sendMultiBnb\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxMultiSendPday\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMultiSendAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setPerDayTransferLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUnPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"updateTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawlAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MOMCOIN", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://83b69ed23e2ec520137d7c6011bfd2020b88bf75268e664ed172eb156642fa7d"}