{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ContractRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IContractRegistry.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IMatrix.sol\\\";\\nimport \\\"./interfaces/IBuybackController.sol\\\";\\n\\ncontract ContractRegistry is IContractRegistry {\\n\\n    mapping(bytes32 => address) contractAddresses;\\n    mapping(string => ILiquidityController) liquidityControllers;\\n    mapping(address => address) priceCalcAddresses;\\n    mapping(string => IBuybackController) buybackControllers;\\n    mapping(address => bool) realmGuardians;\\n    mapping(address => bool) coinMasters;\\n\\n    IMatrix[] public matrices;\\n\\n    constructor() {\\n        realmGuardians[msg.sender] = true;\\n    }\\n\\n    modifier onlyRealmGuardian() {\\n        require(isRealmGuardian(msg.sender));\\n        _;\\n    }\\n\\n    function contractAddressExists(bytes32 nameHash) public view override returns (bool) {\\n        return contractAddresses[nameHash] != address(0);\\n    }\\n\\n    function matrixExists(uint256 level) public view override returns (bool) {\\n        return matrices.length > level;\\n    }\\n\\n    function liquidityControllerExists(string calldata name) public view override returns (bool) {\\n        return address(liquidityControllers[name]) != address(0);\\n    }\\n\\n    function buybackControllerExists(string calldata name) public view override returns (bool) {\\n        return address(buybackControllers[name]) != address(0);\\n    }\\n\\n    function priceCalculatorExists(address currency) public view override returns (bool) {\\n        return priceCalcAddresses[currency] != address(0);\\n    }\\n\\n    function getContractAddress(bytes32 nameHash) public view override returns (address) {\\n        require(contractAddresses[nameHash] != address(0), 'Contract address does not exist');\\n        return contractAddresses[nameHash];\\n    }\\n\\n    function getMatrix(uint256 level) public view override returns (IMatrix) {\\n        require(matrices.length > level, 'Matrix does not exist');\\n        return matrices[level];\\n    }\\n\\n    function getLiquidityController(string calldata name) public view override returns (ILiquidityController) {\\n        require(address(liquidityControllers[name]) != address(0), 'Liquidity controller address does not exist');\\n        return liquidityControllers[name];\\n    }\\n\\n    function getBuybackController(string calldata name) public view override returns (IBuybackController) {\\n        require(address(buybackControllers[name]) != address(0), 'Buyback controller address does not exist');\\n        return buybackControllers[name];\\n    }\\n\\n    function getPriceCalculator(address currency) public view override returns (address) {\\n        require(priceCalcAddresses[currency] != address(0), 'Price calculator address does not exist');\\n        return priceCalcAddresses[currency];\\n    }\\n\\n    function isRealmGuardian(address guardianAddress) public view override returns (bool) {\\n        return realmGuardians[guardianAddress];\\n    }\\n\\n    function isCoinMaster(address masterAddress) public view override returns (bool) {\\n        return coinMasters[masterAddress];\\n    }\\n\\n    function setContractAddress(string calldata name, address newAddress) public onlyRealmGuardian {\\n        contractAddresses[keccak256(abi.encodePacked(name))] = newAddress;\\n    }\\n\\n    function setMatrixAddress(uint256 level, address newAddress) public onlyRealmGuardian {\\n        matrices[level] = IMatrix(newAddress);\\n    }\\n\\n    function addMatrixLevel(address newAddress) public onlyRealmGuardian {\\n        matrices.push(IMatrix(newAddress));\\n    }\\n\\n    function setLiquidityControllerAddress(string calldata name, ILiquidityController newController) public onlyRealmGuardian {\\n        liquidityControllers[name] = newController;\\n    }\\n\\n    function setBuybackControllerAddress(string calldata name, IBuybackController newController) public onlyRealmGuardian {\\n        buybackControllers[name] = newController;\\n    }\\n\\n    function setPriceCalcAddress(address currencyAddress, address newAddress) public onlyRealmGuardian {\\n        priceCalcAddresses[currencyAddress] = newAddress;\\n    }\\n\\n    function setRealmGuardian(address guardianAddress, bool admitted) public onlyRealmGuardian {\\n        realmGuardians[guardianAddress] = admitted;\\n    }\\n\\n    function setCoinMaster(address masterAddress, bool admitted) public onlyRealmGuardian {\\n        coinMasters[masterAddress] = admitted;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IContractRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IMatrix.sol\\\";\\nimport \\\"./ILiquidityController.sol\\\";\\nimport \\\"./IBuybackController.sol\\\";\\n\\ninterface IContractRegistry {\\n\\n    function contractAddressExists(bytes32 nameHash) external view returns (bool);\\n    function matrixExists(uint256 level) external view returns (bool);\\n    function liquidityControllerExists(string calldata name) external view returns (bool);\\n    function buybackControllerExists(string calldata name) external view returns (bool);\\n    function priceCalculatorExists(address currency) external view returns (bool);\\n\\n    function getContractAddress(bytes32 nameHash) external view returns (address);\\n    function getMatrix(uint256 level) external view returns (IMatrix);\\n    function getLiquidityController(string calldata name) external view returns (ILiquidityController);\\n    function getBuybackController(string calldata name) external view returns (IBuybackController);\\n    function getPriceCalculator(address currency) external view returns (address);\\n    function isRealmGuardian(address guardianAddress) external view returns (bool);\\n    function isCoinMaster(address masterAddress) external view returns (bool);\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMatrix.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMatrix {\\n\\n    event NodeAdded(uint256 indexed nftId, uint256 indexed parentId, uint256 indexed parentLeg);\\n    event SubtreeNodeAdded(uint256 indexed nftId, uint256 indexed offset, uint256 indexed level);\\n\\n    struct Node {\\n        uint256 ID;\\n        uint256 ParentID;\\n        uint256 L0;\\n        uint256 L1;\\n        uint256 L2;\\n        uint256 parentLeg;\\n    }\\n\\n    function addNode(uint256 nodeId, uint256 parentId) external;\\n    function getDistributionNodes(uint256 nodeId) external view returns (uint256[] memory distributionNodes);\\n    function getUsersInLevels(uint256 nodeId, uint256 numberOfLevels) external view returns (uint256[] memory levels, uint256 totalUsers);\\n    function getSubNodesToLevel(uint256 nodeId, uint256 toDepthLevel) external view returns (Node memory parentNode, Node[] memory subNodes);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBuybackController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBuybackController {\\n\\n    event BoughtBackMFI(address indexed token, uint256 tokenAmount, uint256 mfiReceived);\\n\\n    function buyBackMFI(address token, uint256 tokenAmount, uint256 minMFIOut) external;\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/ILiquidityController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ILiquidityController {\\n\\n    event LiquidityProvided(address indexed tokenUsed, uint256 mfiProvided, uint256 liquidityTokensProvided, uint256 lpTokensReceived);\\n    event LiquidityRemoved(address indexed tokenUsed, uint256 lpTokensRedeemed, uint256 mfiReceived, uint256 liquidityTokensReceived);\\n\\n    function getLPTokenAddress(address tokenToUse) external view returns (address);\\n    function claimableTokensFromTreasuryLPTokens(address tokenToUse) external view returns (uint256);\\n    function mfiRequiredForProvidingLiquidity(address tokenToUse, uint256 amount, uint256 MFIMin) external view returns (uint256);\\n    function provideLiquidity(address tokenToUse, uint256 amount, uint256 MFIMin) external;\\n    function removeLiquidity(address tokenToUse, uint256 lpTokenAmount, uint256 tokenMin) external;\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"addMatrixLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"buybackControllerExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nameHash\",\"type\":\"bytes32\"}],\"name\":\"contractAddressExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getBuybackController\",\"outputs\":[{\"internalType\":\"contract IBuybackController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nameHash\",\"type\":\"bytes32\"}],\"name\":\"getContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getLiquidityController\",\"outputs\":[{\"internalType\":\"contract ILiquidityController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"getMatrix\",\"outputs\":[{\"internalType\":\"contract IMatrix\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"getPriceCalculator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterAddress\",\"type\":\"address\"}],\"name\":\"isCoinMaster\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardianAddress\",\"type\":\"address\"}],\"name\":\"isRealmGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"liquidityControllerExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"matrices\",\"outputs\":[{\"internalType\":\"contract IMatrix\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"matrixExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"priceCalculatorExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract IBuybackController\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setBuybackControllerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"admitted\",\"type\":\"bool\"}],\"name\":\"setCoinMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract ILiquidityController\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setLiquidityControllerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setMatrixAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setPriceCalcAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardianAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"admitted\",\"type\":\"bool\"}],\"name\":\"setRealmGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ContractRegistry", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}