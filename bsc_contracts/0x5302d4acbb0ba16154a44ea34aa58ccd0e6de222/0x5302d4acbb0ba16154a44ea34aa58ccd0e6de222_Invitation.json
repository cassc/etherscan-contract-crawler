{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n\r\npragma solidity =0.8.6;\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Invitation {\r\n \r\n\r\n    struct User{\r\n        address parentAddr;\r\n        uint256 vipTime;\r\n        address[] invitees;\r\n    }\r\n\r\n    mapping(address => User) public _users;\r\n\r\n    mapping(address => bool) public _whiteAddress;\r\n\r\n\r\n    address public root = 0x7d1b5a54b17a4D2bC2CEA69ae29d1A441020bbE1;\r\n    uint public monthPrice = 1e18; //1\u5929\u591a\u5c11\u4ef7\u683c 0.0333B\r\n    uint public weekPrice = 3e18; //1\u5468\u591a\u5c11\u4ef7\u683c \r\n    uint public dayPrice = 1e17; //1\u5929\u591a\u5c11\u4ef7\u683c 30\u5929\u4ee5\u4e0b 0.1B\u6bcf\u5929\r\n    uint public longPrice = 5e18;\r\n    uint public userAward   =20;\r\n    uint public parentAward =20;\r\n\r\n\r\n    modifier onlyOwner() {\r\n        require( root == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    constructor(){\r\n        _whiteAddress[0x624C327Fc9dcAe61b4AcAADC94074f5B83bE77dD] = true;\r\n    }\r\n\r\n    function bind( address user, uint time,address invi) payable  external {\r\n        uint times = time * 86400;\r\n        //\u5982\u679c\u4e4b\u524d\u6ca1\u6709\u63a8\u8350\u4eba\uff0c\u8fd9\u6b21\u4f20\u4e86\u63a8\u8350\u4eba\uff0c\u5219\u7ed1\u5b9a\u63a8\u8350\u4eba\r\n        if((user!=invi && getInvitation(invi)|| _whiteAddress[invi])&& _users[user].parentAddr==address(0) ){\r\n           _users[user].parentAddr = invi;\r\n           _users[invi].invitees.push(user);\r\n        }\r\n        \r\n        //\u5982\u679c\u5df2\u6709\u63a8\u8350\u4eba\uff0c\u90a3\u4e48\u7ed9\u63a8\u8350\u4eba\u8fd4\r\n        if( _users[user].parentAddr!=address(0)){\r\n            uint inviTime =times*parentAward/100;\r\n            addTime(invi,inviTime);\r\n            times = times + times*userAward/100;\r\n        }\r\n        if(time==1){\r\n            require(msg.value >= dayPrice, \"none payable\");\r\n        }else if(time==7){\r\n            require(msg.value >= weekPrice, \"none payable\");\r\n        }else if(time==30){\r\n            require(msg.value >= monthPrice, \"none payable\");\r\n        }else if(time==300){\r\n            require(msg.value >= longPrice, \"none payable\");\r\n            _users[user].vipTime+= 30*times;\r\n        }else{\r\n             require(msg.value >= time* dayPrice, \"none payable\");\r\n        }\r\n        addTime(user,times);\r\n        payable(root).transfer(msg.value);\r\n    }\r\n\r\n    function addTime(address user,uint times) private   {\r\n        if(getInvitation(user)) {\r\n            _users[user].vipTime+=times;\r\n        }else{\r\n            _users[user].vipTime = block.timestamp+times;\r\n        }\r\n    }\r\n\r\n    function getInvitation(address user) public view returns(bool) {\r\n        return block.timestamp <  _users[user].vipTime;\r\n    }\r\n\r\n    function updateRoot(address user) onlyOwner external  {\r\n        root = user;\r\n    }\r\n\r\n\r\n    function updateAccount(address user ,uint256 b) onlyOwner external  {\r\n         _users[user].vipTime =block.timestamp+ b*86400;\r\n    }\r\n\r\n    function updateAccountTimes(address user ,uint256 b) onlyOwner external  {\r\n         _users[user].vipTime = b;\r\n    }\r\n\r\n    function updateAccounts(address[] memory users ,uint256[] memory bs) onlyOwner external  {\r\n        for(uint i ;i<users.length;i++){\r\n            if(getInvitation(users[i])) {\r\n                _users[users[i]].vipTime+=bs[i]*86400;\r\n            }else{\r\n                _users[users[i]].vipTime = block.timestamp+bs[i]*86400;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function setWhiteAddress(address[] memory users ,bool d) onlyOwner external  {\r\n        for(uint i ;i<users.length;i++){\r\n            _whiteAddress[users[i]] = d;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function withdraw(address token, address recipient,uint amount) onlyOwner  external {\r\n        token.call(abi.encodeWithSelector(0xa9059cbb, recipient, amount));\r\n    }\r\n\r\n    function withdraw(address token) onlyOwner  external {\r\n        token.call(abi.encodeWithSelector(0xa9059cbb, root, IERC20(token).balanceOf(address(this))));\r\n    }\r\n\r\n    function withdrawBNB() onlyOwner  external {\r\n        payable(root).transfer(address(this).balance);\r\n    }\r\n\r\n    function updateMouthPrice(uint amount) external  {\r\n        monthPrice = amount;\r\n    }\r\n\r\n    function updateDayPrice(uint amount) external  {\r\n        dayPrice = amount;\r\n    }\r\n\r\n    function updateWeekPrice(uint amount) external  {\r\n        weekPrice = amount;\r\n    }\r\n\r\n\r\n    function getUserInfo(address user) public view returns(User memory _user){\r\n        _user = _users[user];\r\n    }\r\n\r\n    function getPrice() public view returns(uint[] memory price) {\r\n        price = new uint[](4);\r\n        price[0] = dayPrice;\r\n        price[1] = weekPrice;\r\n        price[2] = monthPrice;\r\n        price[3] = longPrice;\r\n        \r\n    } \r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"parentAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vipTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_whiteAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"invi\",\"type\":\"address\"}],\"name\":\"bind\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dayPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getInvitation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"price\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"parentAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vipTime\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"invitees\",\"type\":\"address[]\"}],\"internalType\":\"struct Invitation.User\",\"name\":\"_user\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"longPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"monthPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parentAward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"d\",\"type\":\"bool\"}],\"name\":\"setWhiteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"updateAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"updateAccountTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bs\",\"type\":\"uint256[]\"}],\"name\":\"updateAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateDayPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateMouthPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"updateRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateWeekPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userAward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weekPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Invitation", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a9725c4d19eb4ca60ae218d17541d2dc086047c5cbefea5bcde4d27831c4f82a"}