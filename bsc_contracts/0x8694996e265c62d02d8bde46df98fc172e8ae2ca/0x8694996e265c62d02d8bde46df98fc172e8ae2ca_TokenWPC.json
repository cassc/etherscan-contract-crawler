{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/token/TokenWPC.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport \\\"./BEP20.sol\\\";\\nimport \\\"../base/Ownable.sol\\\";\\nimport \\\"../lib/SafeMath.sol\\\";\\n\\ninterface IPair {\\n    function sync() external;\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\\ninterface IFactory {\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB\\n    ) external view returns (address pair);\\n}\\n\\nabstract contract Excludes {\\n    mapping(address => bool) internal _Excludes;\\n\\n    function setExclude(address _user, bool b) public {\\n        _authorizeExcludes();\\n        _Excludes[_user] = b;\\n    }\\n\\n    function setExcludes(address[] memory _user, bool b) public {\\n        _authorizeExcludes();\\n        for (uint256 i = 0; i < _user.length; i++) {\\n            _Excludes[_user[i]] = b;\\n        }\\n    }\\n\\n    function isExcludes(address _user) public view returns (bool) {\\n        return _Excludes[_user];\\n    }\\n\\n    function _authorizeExcludes() internal virtual {}\\n}\\n\\nabstract contract Managers {\\n    mapping(address => bool) internal _managers;\\n\\n    modifier onlyManager() {\\n        require(isManager(msg.sender), \\\"Managers: caller is not a manager\\\");\\n        _;\\n    }\\n\\n    function setManager(address user, bool b) public {\\n        _authorizeManagers();\\n        _managers[user] = b;\\n    }\\n\\n    function setManagers(address[] memory user, bool b) public {\\n        _authorizeManagers();\\n        for (uint256 i = 0; i < user.length; i++) {\\n            _managers[user[i]] = b;\\n        }\\n    }\\n\\n    function isManager(address user) public view returns (bool) {\\n        return _managers[user];\\n    }\\n\\n    function _authorizeManagers() internal virtual {}\\n}\\n\\ninterface IRouter {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n}\\n\\ncontract TokenStation {\\n    constructor(address token) {\\n        IBEP20(token).approve(msg.sender, type(uint256).max);\\n    }\\n\\n    function getAddr() external view returns (address) {\\n        return address(this);\\n    }\\n}\\n\\nabstract contract TokenBurnable is BEP20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {TRC20-_burn}.\\n     */\\n    function burn(uint256 amount) external {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {TRC20-_burn} and {TRC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for `accounts`'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) external {\\n        address spender = _msgSender();\\n        _spendAllowance(account, spender, amount);\\n        _burn(account, amount);\\n    }\\n}\\n\\ncontract TokenWPC is TokenBurnable, Excludes, Managers, Ownable {\\n    using SafeMath for uint256;\\n\\n    address public pair;\\n    address[] private _buyPath;\\n    address[] private _sellPath;\\n\\n    uint256 public constant calcBase = 10000;\\n    // \u4e70\uff1a5%\u6ed1\u70b9\uff0c\u6709\u4e0a\u7ea7\uff0c3%\u7ed9\u4e0a\u7ea7\uff0c2%\u7ed9\u57fa\u91d1\u4f1a\u5408\u7ea6\uff0c\u65e0\u4e0a\u7ea7\uff0c5%\u5168\u90e8\u7ed9\u57fa\u91d1\u4f1a\u5408\u7ea6\u3002\\n    uint256 public feeRateOfBuy = 500;\\n    uint256 public feeRateOfBuy2Upper = 300;\\n    uint256 public feeRateOfBuy2Station = 200;\\n\\n    uint256 public markedPrice;\\n    uint256 public markedTime;\\n\\n    uint256 public oneDay = 1 days;\\n    uint256 public oneMonth = 30 days;\\n\\n    address public blackHole = 0x000000000000000000000000000000000000dEaD;\\n    address public ZERO = address(0);\\n    IRouter public router = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); //BSC\\n    IBEP20 public USDT = IBEP20(0x55d398326f99059fF775485246999027B3197955); //BSC\\n\\n    uint256 listingTime; //\u4e0aPancake\u65f6\u95f4\\n\\n    TokenStation private usdtStation;\\n    TokenStation private wpcStation;\\n\\n    mapping(address => address) public uppers;\\n    mapping(address => mapping(address => bool)) public lowers;\\n\\n    mapping(address => uint256) public accumulativeBuy;\\n    //\u6bcf\u4e2a\u5730\u5740\u7d2f\u8ba1\u6700\u591a\u8d2d\u4e70500\u679a\\n    uint256 public maxWPCPerAddr = 500 ether;\\n    //\u5355\u6b21\u6700\u591a\u8d2d\u4e70500U\u7684\\n    uint256 public maxUPerTransaction = 500 ether;\\n\\n    //\u4e0a\u4e2d\u5fc3\u5316\u4ea4\u6613\u6240\u524d\u53ef\u4ee5\u81ea\u7531\u4ea4\u6613\\n    bool public freeTrade;\\n    //\u65e0\u6da8\u505c\u9650\u5236\\n    bool public freeSell;\\n    //\u65e0\u8dcc\u505c\u9650\u5236\\n    bool public freeBuy;\\n\\n    bool public swapTaxFeeAuto;\\n\\n    bool public saveMarketAuto;\\n    //\u6bcf\u6b21\u53ef\u5904\u7406\u6298\u5408U\u7684\u4e0a\u9650\uff0c\u9632\u6b62\u7838\u76d8,\u5982\u679c\u662f0\u5219\u65e0\u9650\u5236\u3002\u9ed8\u8ba4500U\\n    uint256 public swapTaxFeeLimitByUSDT;\\n\\n    uint256 public saveMarketAt = 10 ether;\\n    uint256 public swapTaxFeeAt = 0.1 ether;\\n\\n    address public platform;\\n\\n    bool public initialized;\\n\\n    event OnSaveMarket(address indexed initiator, uint256 amountOfU);\\n    event OnSwapTaxFee(address indexed initiator, uint256 amountOfWPC);\\n\\n    mapping(address => bool) public primaries; //primary investors\\n\\n    bool inSwap;\\n    modifier lockSwap() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    constructor(\\n        address _platform\\n    ) BEP20(_platform, \\\"WPC Token\\\", \\\"WPC\\\", 21 * 10 ** 6) {\\n        platform = _platform;\\n    }\\n\\n    function initialize() external onlyOwner() {\\n        require(!initialized, \\\"already initialized\\\");\\n        address[] memory path = new address[](2);\\n        path[0] = address(USDT);\\n        path[1] = address(this);\\n        _buyPath = path;\\n        address[] memory path2 = new address[](2);\\n        path2[0] = address(this);\\n        path2[1] = address(USDT);\\n        _sellPath = path2;\\n\\n        USDT.approve(address(router), type(uint256).max);\\n        _approve(address(this), address(router), type(uint256).max);\\n\\n        listingTime = block.timestamp;\\n        usdtStation = new TokenStation(address(USDT));\\n        wpcStation = new TokenStation(address(this));\\n\\n        _Excludes[address(this)] = true;\\n        _Excludes[platform] = true;\\n        _Excludes[blackHole] = true;\\n        _Excludes[wpcStation.getAddr()] = true;\\n\\n        swapTaxFeeAuto = true;\\n        swapTaxFeeLimitByUSDT = 500 ether;\\n\\n        primaries[address(this)] = true;\\n        primaries[platform] = true;\\n        primaries[blackHole] = true;\\n\\n        emit OwnershipTransferred(_owner, platform);\\n        _owner = platform;\\n        _managers[platform] = true;\\n\\n        initialized = true;\\n    }\\n\\n    function monthSinceListing() public view returns (uint256) {\\n        return block.timestamp.sub(listingTime).div(oneMonth);\\n    }\\n\\n    function daySinceListing() public view returns (uint256) {\\n        return block.timestamp.sub(listingTime).div(oneDay);\\n    }\\n\\n    function stationBalanceOfWPC() public view returns (uint256) {\\n        return balanceOf(wpcStation.getAddr());\\n    }\\n\\n    function stationBalanceOfUSDT() public view returns (uint256) {\\n        return USDT.balanceOf(usdtStation.getAddr());\\n    }\\n\\n    function setFreeTrade(bool b) external onlyManager {\\n        freeTrade = b;\\n    }\\n\\n    function setFreeBuy(bool b) external onlyManager {\\n        freeBuy = b;\\n    }\\n\\n    function setFreeSell(bool b) external onlyManager {\\n        freeSell = b;\\n    }\\n\\n    function setSwapTaxFeeAuto(bool b) external onlyManager {\\n        swapTaxFeeAuto = b;\\n    }\\n\\n    function setSwapTaxFeeLimitByUSDT(uint256 limitU) external onlyManager {\\n        swapTaxFeeLimitByUSDT = limitU;\\n    }\\n\\n    function setSaveMarketAt(uint256 at) external onlyManager {\\n        saveMarketAt = at;\\n    }\\n\\n    function setSwapTaxFeeAt(uint256 at) external onlyManager {\\n        swapTaxFeeAt = at;\\n    }\\n\\n    function setMaxWPCPerAddr(uint256 newVal) external onlyManager {\\n        maxWPCPerAddr = newVal;\\n    }\\n\\n    function setMaxUPerTransaction(uint256 newVal) external onlyManager {\\n        maxUPerTransaction = newVal;\\n    }\\n\\n    function setPrimaries(\\n        address[] memory accounts,\\n        bool b\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            primaries[accounts[i]] = b;\\n        }\\n    }\\n\\n    function setListingTime(uint256 t) external onlyManager {\\n        if (t == 0) {\\n            listingTime = block.timestamp;\\n            markedTime = block.timestamp;\\n        } else {\\n            listingTime = t;\\n            markedTime = t;\\n        }\\n        markedPrice = getSellPrice4USDT(1 ether);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        if (freeTrade || isExcludes(from) || isExcludes(to)) {\\n            super._transfer(from, to, amount);\\n            return;\\n        }\\n\\n        uint256 currentPrice = getSellPrice4USDT(1 ether); //\u5c31\u662f1\u4e2aWPC\u53ef\u4ee5\u5151\u6362\u51fa\u591a\u5c11U\\n        if (markedPrice == 0 || (block.timestamp.sub(markedTime) >= oneDay)) {\\n            markedTime = block.timestamp;\\n            markedPrice = currentPrice;\\n        }\\n\\n        if (_isPair(from)) {\\n            //Buy\\n            if (!freeBuy) {\\n                if (currentPrice <= 1 ether) {\\n                    require(primaries[to], \\\"not primary investor\\\");\\n                }\\n\\n                if (currentPrice > markedPrice) {\\n                    //\u5728\u6da8\\n                    uint256 theDay = daySinceListing();\\n                    uint256 riseLimit;\\n                    //\u9012\u51cf\u5f0f\uff1a\u6da8\u505c\u673a\u5236\u6539\u6210\u7b2c\u4e00\u5929100%\u7b2c\u4e8c\u592950%\u7b2c\u4e09\u592910%\u4e4b\u540e\u4e00\u76f410%,\u81ea\u52a8\u505c\u6b62\u4ea4\u6613\uff0c\u53ea\u80fd\u5356\u4e0d\u80fd\u4e70\\n                    if (theDay == 0) {\\n                        //100%\\n                        riseLimit = calcBase;\\n                    } else if (theDay == 1) {\\n                        //50%\\n                        riseLimit = 5000;\\n                    } else {\\n                        //10%\\n                        riseLimit = 1000;\\n                    }\\n\\n                    uint256 rised = currentPrice\\n                        .sub(markedPrice)\\n                        .mul(calcBase)\\n                        .div(markedPrice);\\n\\n                    require(rised < riseLimit, \\\"can not buy at limit up\\\");\\n                }\\n\\n                uint256 buyFee = _handBuyFee(from, to, amount);\\n                amount = amount.sub(buyFee);\\n\\n                uint256 limitAmount = getBuyPrice4WPC(maxUPerTransaction);\\n                require(\\n                    amount <= limitAmount,\\n                    \\\"exceeds the max limit per transaction\\\"\\n                );\\n\\n                if (accumulativeBuy[to].add(amount) <= maxWPCPerAddr) {\\n                    //\u6bcf\u4e2a\u5730\u5740\u53ea\u80fd\u7d2f\u8ba1\u4e70maxWPCPerAddr\u4e2aWPC\\n                    accumulativeBuy[to] = accumulativeBuy[to].add(amount);\\n                } else {\\n                    revert(\\\"exceeds the allowance of this address\\\");\\n                }\\n            }\\n        } else if (_isPair(to)) {\\n            if (!freeSell) {\\n                //Sell\\n                if (currentPrice < markedPrice) {\\n                    //\u5728\u8dcc\\n                    uint256 fall = markedPrice\\n                        .sub(currentPrice)\\n                        .mul(calcBase)\\n                        .div(markedPrice);\\n\\n                    require(fall < 1000, \\\"can not sell at limit down\\\");\\n                }\\n\\n                uint256 sellFee = _handSellFee(from, amount);\\n                amount = amount.sub(sellFee);\\n            }\\n            if (swapTaxFeeAuto && !inSwap) {\\n                _swapTaxFee();\\n            }\\n        } else {\\n            //\u7ed1\u5b9a\u4e0a\u4e0b\u7ea7\u5173\u7cfb\\n            if (amount == 1 ether) {\\n                //\u4e0a\u7ea7\u53d1\u51fa\u7ed1\u5b9a\u8bf7\u6c42\\n                if (uppers[to] == ZERO) {\\n                    //\u5982\u679c\u53d7\u9080\u7684\u4eba\u8fd8\u6ca1\u6709\u4e0a\u7ea7\u624d\u53ef\u4ee5\\n                    lowers[from][to] = true;\\n                }\\n            } else if (amount == 0.5 ether) {\\n                //\u4e0b\u7ea7\u56de\u5e94\\n                if (lowers[to][from]) {\\n                    //\u5f62\u6210\u7ed1\u5b9a\u5173\u7cfb\\n                    uppers[from] = to;\\n                }\\n            }\\n\\n            //\u666e\u901a\u5730\u5740\u4e92\u8f6c\\n            uint256 fee = _dynamicFeeByMonth(amount);\\n            amount = amount.sub(fee);\\n            //\u521d\u59cb20%...\u7b2c\u56db\u4e2a\u67085%\uff0c\u4ee3\u5e01\u81ea\u52a8\u6253\u5165\u9ed1\u6d1e\u9500\u6bc1\\n            super._transfer(from, blackHole, fee);\\n\\n            if (swapTaxFeeAuto && !inSwap) {\\n                //\u81ea\u52a8\u51fa\u6210U\u5230\u57fa\u91d1\u4f1a\u90a3\u91cc\\n                _swapTaxFee();\\n            }\\n        }\\n\\n        super._transfer(from, to, amount);\\n    }\\n\\n    function saveMarket() public onlyManager {\\n        _saveMarket();\\n    }\\n\\n    function _saveMarket() private lockSwap {\\n        uint256 amount = USDT.balanceOf(usdtStation.getAddr());\\n        if (amount > saveMarketAt) {\\n            //\u91d1\u989d\u592a\u5c0f\u6ca1\u610f\u4e49\\n            USDT.transferFrom(usdtStation.getAddr(), address(this), amount);\\n\\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                amount,\\n                0,\\n                _buyPath,\\n                blackHole,\\n                block.timestamp + 9\\n            );\\n\\n            emit OnSaveMarket(msg.sender, amount);\\n        }\\n    }\\n\\n    function swapTaxFee() public onlyManager {\\n        _swapTaxFee();\\n    }\\n\\n    function getSellPrice4USDT(\\n        uint256 amountWPC\\n    ) public view returns (uint256) {\\n        uint256[] memory amounts = router.getAmountsOut(amountWPC, _sellPath);\\n        if (amounts.length > 1) return amounts[1];\\n        return 0;\\n    }\\n\\n    function getBuyPrice4WPC(uint256 amountUSDT) public view returns (uint256) {\\n        uint256[] memory amounts = router.getAmountsOut(amountUSDT, _buyPath);\\n        if (amounts.length > 1) return amounts[1];\\n        return 0;\\n    }\\n\\n    function rescueLossToken(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) public onlyOwner {\\n        IBEP20(token).transfer(to, amount);\\n    }\\n\\n    function _swapTaxFee() private lockSwap {\\n        uint256 totalFee = balanceOf(wpcStation.getAddr());\\n        if (totalFee > swapTaxFeeAt) {\\n            //\u91d1\u989d\u592a\u5c0f\u6ca1\u610f\u4e49\\n            uint256 canSell;\\n            if (swapTaxFeeLimitByUSDT > 0) {\\n                canSell = getBuyPrice4WPC(swapTaxFeeLimitByUSDT);\\n                canSell = canSell > totalFee ? totalFee : canSell;\\n            } else {\\n                canSell = totalFee;\\n            }\\n\\n            super._transfer(wpcStation.getAddr(), address(this), canSell);\\n\\n            router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                canSell,\\n                0,\\n                _sellPath,\\n                usdtStation.getAddr(),\\n                block.timestamp + 9\\n            );\\n\\n            emit OnSwapTaxFee(msg.sender, canSell);\\n        }\\n    }\\n\\n    function _ifLiquidityAdded() private view returns (bool isAddLP) {\\n        address token0 = IPair(pair).token0();\\n        address token1 = IPair(pair).token1();\\n        (uint256 r0, uint256 r1, ) = IPair(pair).getReserves();\\n        uint256 bal0 = IBEP20(token0).balanceOf(pair);\\n        uint256 bal1 = IBEP20(token1).balanceOf(pair);\\n        if (token0 == address(this)) return bal1.sub(r1) > 1000;\\n        else return bal0.sub(r0) > 1000;\\n    }\\n\\n    function _ifLiquidityRemoved() private view returns (bool isRemoveLP) {\\n        address token0 = IPair(pair).token0();\\n        if (token0 == address(this)) return false;\\n        (uint256 r0, , ) = IPair(pair).getReserves();\\n        uint256 bal0 = IBEP20(token0).balanceOf(pair);\\n        return r0 > bal0.add(1000);\\n    }\\n\\n    function _isPair(address p) private returns (bool) {\\n        if (pair == ZERO) {\\n            pair = IFactory(router.factory()).getPair(\\n                address(USDT),\\n                address(this)\\n            );\\n        }\\n\\n        if (pair == ZERO) {\\n            pair = IFactory(router.factory()).createPair(\\n                address(USDT),\\n                address(this)\\n            );\\n            listingTime = block.timestamp;\\n        }\\n\\n        return pair == p;\\n    }\\n\\n    function _handBuyFee(\\n        //from\u662fpair\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private returns (uint256 buyFee) {\\n        buyFee = amount.mul(feeRateOfBuy).div(calcBase); //5%\\n        uint256 toStation;\\n        address theUpper = uppers[to];\\n        if (theUpper != ZERO) {\\n            //\u6709\u4e0a\u7ea7\\n            uint256 toUpper = amount.mul(feeRateOfBuy2Upper).div(calcBase); //3%\\n            bool oriValue = isExcludes(theUpper);\\n            if (!oriValue) {\\n                _Excludes[theUpper] = true;\\n            }\\n            //\u8fd4\u73b0\u65e0\u6ed1\u70b9\\n            super._transfer(from, theUpper, toUpper);\\n\\n            if (oriValue != isExcludes(theUpper)) {\\n                _Excludes[theUpper] = oriValue;\\n            }\\n\\n            toStation = amount.mul(feeRateOfBuy2Station).div(calcBase); //2%\\n\\n            buyFee = toUpper.add(toStation);\\n        } else {\\n            toStation = buyFee;\\n        }\\n\\n        super._transfer(from, wpcStation.getAddr(), toStation);\\n    }\\n\\n    function _handSellFee(\\n        address from,\\n        uint256 amount\\n    ) private returns (uint256 sellFee) {\\n        sellFee = _dynamicFeeByMonth(amount);\\n        super._transfer(from, wpcStation.getAddr(), sellFee);\\n    }\\n\\n    function _dynamicFeeByMonth(\\n        uint256 amount\\n    ) private view returns (uint256 fee) {\\n        uint256 theMonth = monthSinceListing();\\n\\n        if (theMonth == 0) {\\n            //\u7b2c\u4e00\u4e2a\u670820%\\n            fee = amount.mul(2000).div(calcBase);\\n        } else if (theMonth == 1) {\\n            //\u7b2c\u4e8c\u4e2a\u670815%\\n            fee = amount.mul(1500).div(calcBase);\\n        } else if (theMonth == 2) {\\n            //\u7b2c\u4e09\u4e2a\u670810%\\n            fee = amount.mul(1000).div(calcBase);\\n        } else {\\n            //\u7b2c\u56db\u4e2a\u6708\u53ca\u4ee5\u540e5%\\n            fee = amount.mul(500).div(calcBase);\\n        }\\n    }\\n\\n    function _authorizeExcludes() internal virtual override onlyOwner {}\\n\\n    function _authorizeManagers() internal virtual override onlyOwner {}\\n}\\n\"\r\n    },\r\n    \"/contracts/token/BEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport \\\"../base/Context.sol\\\";\\nimport \\\"../interface/IBEP20.sol\\\";\\nimport \\\"../interface/IBEP20Metadata.sol\\\";\\n\\ncontract BEP20 is Context, IBEP20, IBEP20Metadata {\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(address platform, string memory name_, string memory symbol_, uint256 supply) {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        _mint(platform, supply * 10 ** decimals());\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n    unchecked {\\n        _approve(owner, spender, currentAllowance - subtractedValue);\\n    }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n    unchecked {\\n        _balances[from] = fromBalance - amount;\\n        // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n        // decrementing then incrementing.\\n        _balances[to] += amount;\\n    }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n    unchecked {\\n        // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n        _balances[account] += amount;\\n    }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n    unchecked {\\n        _balances[account] = accountBalance - amount;\\n        // Overflow not possible: amount <= accountBalance <= totalSupply.\\n        _totalSupply -= amount;\\n    }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - amount);\\n        }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\"\r\n    },\r\n    \"/contracts/lib/SafeMath.sol\": {\r\n      \"content\": \"// File: @openzeppelin/contracts/math/SafeMath.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/interface/IBEP20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/**\\n * @dev Interface for the optional metadata functions from the BEP20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IBEP20Metadata {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\"\r\n    },\r\n    \"/contracts/interface/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/**\\n * @dev Interface of the BEP20 standard as defined in the EIP.\\n */\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"/contracts/base/Ownable.sol\": {\r\n      \"content\": \"// File: @openzeppelin/contracts/access/Ownable.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address internal _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"/contracts/base/Context.sol\": {\r\n      \"content\": \"// File: @openzeppelin/contracts/utils/Context.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this;\\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfU\",\"type\":\"uint256\"}],\"name\":\"OnSaveMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfWPC\",\"type\":\"uint256\"}],\"name\":\"OnSwapTaxFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accumulativeBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blackHole\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daySinceListing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRateOfBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRateOfBuy2Station\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRateOfBuy2Upper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeTrade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUSDT\",\"type\":\"uint256\"}],\"name\":\"getBuyPrice4WPC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWPC\",\"type\":\"uint256\"}],\"name\":\"getSellPrice4USDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isExcludes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lowers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"markedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"markedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUPerTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWPCPerAddr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"monthSinceListing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"primaries\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueLossToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saveMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saveMarketAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saveMarketAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setExclude\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_user\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setExcludes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setFreeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setFreeSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setFreeTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"setListingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setManagers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"setMaxUPerTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"setMaxWPCPerAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setPrimaries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"setSaveMarketAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"at\",\"type\":\"uint256\"}],\"name\":\"setSwapTaxFeeAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setSwapTaxFeeAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitU\",\"type\":\"uint256\"}],\"name\":\"setSwapTaxFeeLimitByUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stationBalanceOfUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stationBalanceOfWPC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTaxFeeAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTaxFeeAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTaxFeeLimitByUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uppers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TokenWPC", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000068a2e1c3552c92742b21f3dac32b6c19600efccb", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}