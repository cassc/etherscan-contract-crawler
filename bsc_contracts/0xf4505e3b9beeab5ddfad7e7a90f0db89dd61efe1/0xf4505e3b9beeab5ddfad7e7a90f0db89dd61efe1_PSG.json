{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2022-02-13\r\n */\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * BEP20 standard interface.\r\n */\r\n interface IBEP20 {\r\n   function totalSupply() external view returns (uint256);\r\n   function decimals() external view returns (uint8);\r\n   function symbol() external view returns (string memory);\r\n   function name() external view returns (string memory);\r\n   function getOwner() external view returns (address);\r\n   function balanceOf(address account) external view returns (uint256);\r\n   function transfer(address recipient, uint256 amount) external returns (bool);\r\n   function allowance(address _owner, address spender) external view returns (uint256);\r\n   function approve(address spender, uint256 amount) external returns (bool);\r\n   function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n   event Transfer(address indexed from, address indexed to, uint256 value);\r\n   event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n   function _msgSender() internal view virtual returns (address) {\r\n       return msg.sender;\r\n   }\r\n\r\n   function _msgData() internal view virtual returns (bytes calldata) {\r\n       return msg.data;\r\n   }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n   address private _owner;\r\n\r\n   event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n     constructor() {\r\n       _transferOwnership(_msgSender());\r\n   }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n     function owner() public view virtual returns (address) {\r\n       return _owner;\r\n   }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n     modifier onlyOwner() {\r\n       require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n       _;\r\n   }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n     function renounceOwnership() public virtual onlyOwner {\r\n       _transferOwnership(address(0));\r\n   }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n     function transferOwnership(address newOwner) public virtual onlyOwner {\r\n       require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n       _transferOwnership(newOwner);\r\n   }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n     function _transferOwnership(address newOwner) internal virtual {\r\n       address oldOwner = _owner;\r\n       _owner = newOwner;\r\n       emit OwnershipTransferred(oldOwner, newOwner);\r\n   }\r\n}\r\n\r\ninterface IDEXFactory {\r\n   function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n   function factory() external pure returns (address);\r\n   function WETH() external pure returns (address);\r\n\r\n     function addLiquidity(\r\n         address tokenA,\r\n         address tokenB,\r\n         uint amountADesired,\r\n         uint amountBDesired,\r\n         uint amountAMin,\r\n         uint amountBMin,\r\n         address to,\r\n         uint deadline\r\n         ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n     function addLiquidityETH(\r\n         address token,\r\n         uint amountTokenDesired,\r\n         uint amountTokenMin,\r\n         uint amountETHMin,\r\n         address to,\r\n         uint deadline\r\n         ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n         \r\n   function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n       uint amountIn,\r\n       uint amountOutMin,\r\n       address[] calldata path,\r\n       address to,\r\n       uint deadline\r\n       ) external;\r\n\r\n   function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n       uint amountOutMin,\r\n       address[] calldata path,\r\n       address to,\r\n       uint deadline\r\n       ) external payable;\r\n\r\n   function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n       uint amountIn,\r\n       uint amountOutMin,\r\n       address[] calldata path,\r\n       address to,\r\n       uint deadline\r\n       ) external;\r\n\r\n   function swapTokensForExactETH(\r\n       uint amountOut, \r\n       uint amountInMax, \r\n       address[] calldata path, \r\n       address to, \r\n       uint deadline\r\n       ) external;\r\n}\r\n\r\n\r\ncontract PSG is IBEP20, Ownable {\r\n   using SafeMath for uint256;\r\n\r\n   address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n   address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n   address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n   string constant _name = \"Princess Striker Gem\";\r\n   string constant _symbol = \"PRSG\";\r\n   uint8 constant _decimals = 18;\r\n   uint256 max_uint = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\r\n   uint256 _totalSupply = 1 * 10**8 * 10**_decimals;\r\n\r\n   mapping (address => uint256) _balances;\r\n   mapping (address => mapping (address => uint256)) _allowances;\r\n   mapping (address => bool) isFeeExempt;\r\n\r\n\r\n   uint256 public burnFee         = 0;\r\n\r\n\r\n   uint256 public rewardFeeSellGEM   = 6;\r\n   uint256 public marketingFeeSellGEM    = 2;\r\n\r\n   uint256 public totalFeeSellGEM        = marketingFeeSellGEM + rewardFeeSellGEM + burnFee;\r\n\r\n   uint256 public rewardFeeBuyGEM   = 6;\r\n   uint256 public marketingFeeBuyGEM    = 2;\r\n\r\n   uint256 public totalFeeBuyGEM        = marketingFeeBuyGEM + rewardFeeBuyGEM + burnFee;\r\n\r\n   uint256 public feeDenominator  = 100;\r\n\r\n   address public marketingFeeReceiver;\r\n\r\n   address public rewardFeeReceiver;\r\n\r\n\r\n   address public burnFeeReceiver = DEAD;\r\n\r\n   uint256 targetLiquidity = 99;\r\n   uint256 targetLiquidityDenominator = 100;\r\n\r\n   IDEXRouter public router;\r\n   address public pair;\r\n\r\n\r\n   bool public swapEnabled = true;\r\n   uint256 public swapThreshold = _totalSupply * 10 / 10000;\r\n   bool inSwap;\r\n   modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n   constructor () {\r\n       router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n       pair = IDEXFactory(router.factory()).createPair(WBNB, address(this));\r\n       _allowances[address(this)][address(router)] = max_uint;\r\n\r\n       isFeeExempt[msg.sender] = true;        \r\n\r\n       marketingFeeReceiver = 0x25138716849F9f080aa3084a56ab0c3149738925;\r\n\r\n       rewardFeeReceiver = 0x9F9f859F5b3FE311D81Bf1C979a73b6E638ADA29;\r\n\r\n       _balances[msg.sender] = _totalSupply;\r\n       emit Transfer(address(0), msg.sender, _totalSupply);\r\n   }\r\n\r\n   receive() external payable { }\r\n\r\n   function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n   function decimals() external pure override returns (uint8) { return _decimals; }\r\n   function symbol() external pure override returns (string memory) { return _symbol; }\r\n   function name() external pure override returns (string memory) { return _name; }\r\n   function getOwner() external view override returns (address) { return  owner(); }\r\n   function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n   function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n   function approve(address spender, uint256 amount) public override returns (bool) {\r\n       _allowances[msg.sender][spender] = amount;\r\n       emit Approval(msg.sender, spender, amount);\r\n       return true;\r\n   }\r\n\r\n   function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n       return _transferFrom(msg.sender, recipient, amount);\r\n   }\r\n\r\n   function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n       if(_allowances[sender][msg.sender] != max_uint){\r\n           _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n       }\r\n       return _transferFrom(sender, recipient, amount);\r\n   }\r\n\r\n   function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n       if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n       if(shouldSwapBack()){ swapBack(sender); }\r\n\r\n        //Exchange tokens\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n        uint256 amountReceived = (!shouldTakeFee(sender) || !shouldTakeFee(recipient)) ? amount : takeFee(sender, amount);\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n    \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function shouldTakeFee(address sender) internal view returns (bool) {\r\n        return !isFeeExempt[sender];\r\n    }\r\n\r\n    function takeFee(address sender, uint256 amount) internal returns (uint256) {\r\n\r\n        uint256 feeAmount = \r\n        sender != address(router)\r\n        ? amount.mul(totalFeeSellGEM).div(feeDenominator)\r\n        : amount.mul(totalFeeBuyGEM).div(feeDenominator);\r\n\r\n\r\n        uint256 burnTokens = \r\n        sender != address(router)\r\n        ? feeAmount.mul(burnFee).div(totalFeeSellGEM)\r\n        : feeAmount.mul(burnFee).div(totalFeeBuyGEM);\r\n\r\n\r\n        uint256 contractTokens = feeAmount.sub(burnTokens);\r\n\r\n        _balances[address(this)] = _balances[address(this)].add(contractTokens);\r\n        _balances[burnFeeReceiver] = _balances[burnFeeReceiver].add(burnTokens);\r\n        emit Transfer(sender, address(this), contractTokens);\r\n        \r\n        if(burnTokens > 0){\r\n            emit Transfer(sender, burnFeeReceiver, burnTokens);    \r\n        }\r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != pair\r\n        && !inSwap\r\n        && swapEnabled\r\n        && _balances[address(this)] >= swapThreshold;\r\n    }\r\n\r\n    function clearStuckBalance(uint256 amountPercentage) external onlyOwner {\r\n        uint256 amountBNB = address(this).balance;\r\n        payable(msg.sender).transfer(amountBNB * amountPercentage / 100);\r\n    }\r\n\r\n    function swapBack(address sender) internal swapping {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        _allowances[address(this)][address(router)] = swapThreshold;\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            swapThreshold,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n            );\r\n\r\n        uint256 amountBNB = address(this).balance.sub(balanceBefore);\r\n        \r\n        uint256 amountBNBReward = \r\n        sender != address(router)\r\n        ? amountBNB.mul(rewardFeeSellGEM).div(totalFeeSellGEM)\r\n        : amountBNB.mul(rewardFeeBuyGEM).div(totalFeeBuyGEM);\r\n\r\n\r\n\r\n        uint256 amountBNBMarketing = \r\n        sender != address(router)\r\n        ? amountBNB.mul(marketingFeeSellGEM).div(totalFeeSellGEM)\r\n        : amountBNB.mul(marketingFeeBuyGEM).div(totalFeeBuyGEM);\r\n\r\n\r\n        (bool tmpSuccess,) = payable(marketingFeeReceiver).call{value: amountBNBMarketing, gas: 30000}(\"\");\r\n\r\n        (bool tmpSuccess2,) = payable(rewardFeeReceiver).call{value: amountBNBReward, gas: 30000}(\"\");\r\n        \r\n        // only to supress warning msg\r\n        tmpSuccess = false;\r\n        tmpSuccess2 = false;\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setFees(uint256 _rewardFeeBuyGEM, uint256 _marketingFeeBuyGEM, uint256 _rewardFeeSellGEM, uint256 _marketingFeeSellGEM, uint256 _burnFee) external onlyOwner {\r\n        rewardFeeBuyGEM = _rewardFeeBuyGEM;\r\n        marketingFeeBuyGEM = _marketingFeeBuyGEM;\r\n        rewardFeeSellGEM = _rewardFeeSellGEM;\r\n        marketingFeeSellGEM = _marketingFeeSellGEM;\r\n        burnFee = _burnFee;\r\n        totalFeeBuyGEM = _rewardFeeBuyGEM.add(_marketingFeeBuyGEM).add(_burnFee);\r\n        require(totalFeeBuyGEM < 20, \"BuyGEM Fees cannot be more than 20%\");\r\n\r\n        totalFeeSellGEM = _rewardFeeSellGEM.add(_marketingFeeSellGEM).add(_burnFee);\r\n        require(totalFeeSellGEM < 20, \"SellGEM Fees cannot be more than 20%\");\r\n\r\n    }\r\n\r\n    function setmarketingFeeReceivers(address _marketingFeeReceiver) external onlyOwner {\r\n        marketingFeeReceiver = _marketingFeeReceiver;\r\n    }\r\n\r\n    function setrewardFeeReceivers(address _rewardFeeReceiver) external onlyOwner {\r\n        rewardFeeReceiver = _rewardFeeReceiver;\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _amount) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n        swapThreshold = _amount;\r\n    }\r\n\r\n    \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPercentage\",\"type\":\"uint256\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeBuyGEM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeSellGEM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFeeBuyGEM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFeeSellGEM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardFeeBuyGEM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeBuyGEM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardFeeSellGEM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFeeSellGEM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"}],\"name\":\"setmarketingFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardFeeReceiver\",\"type\":\"address\"}],\"name\":\"setrewardFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeBuyGEM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeSellGEM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PSG", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3b4567ffe638a87eacfe068f145b15b0c5ee4a0aa94cb4f5d14fb3f08e0daad7"}