{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n                /// @solidity memory-safe-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account\\u0027s ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn\\u0027t\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``\\u0027s tokens,\\r\\n     * given ``owner``\\u0027s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``\\u0027s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``\\u0027s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\"},\"ILinkdaoOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\nimport \\\"../Ownable.sol\\\";\\r\\n\\r\\ncontract ILinkdaoOracle is Ownable {\\r\\n    mapping(uint256 =\\u003e uint256) private coinPrices;\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    function update(uint256 _reqId, uint256 priceInCents) public onlyOwner {\\r\\n        coinPrices[_reqId] = priceInCents;\\r\\n    }\\r\\n\\r\\n    function getPrice(uint256 _reqId) public view returns (uint256) {\\r\\n        return coinPrices[_reqId];\\r\\n    }\\r\\n}\\r\\n\"},\"LinkdaoStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"../Ownable.sol\\\";\\nimport \\\"../SafeMath.sol\\\";\\nimport \\\"../SafeERC20.sol\\\";\\nimport \\\"../ILinkdaoOracle.sol\\\";\\nimport \\\"../Vault.sol\\\";\\n\\ncontract LinkDao_DeFi is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address public LINKDAO_TOKEN_ADDRESS;\\n    address public LINKDAO_ORACLE_ADDRESS;\\n\\n    uint256 public constant MIN_INVESTMENT = 25 ether;\\n    uint256 public constant MIN_WITHDRAW = 10 ether;\\n    uint256 public constant MIN_REINVEST = 10 ether;\\n\\n    uint256 public constant TOTAL_PERCENTAGE = 10000; // 100%\\n    uint256 public constant MAX_REWARD_PERCENTAGE = 20000; // 200%\\n\\n    uint256 REWARD_PERIOD = 30 days;\\n    \\n    uint256 public constant PACKAGE1_ROI_PERCENTAGE = 600; // 6%\\n    uint256 public constant PACKAGE2_ROI_PERCENTAGE = 800; // 8%\\n    uint256 public constant PACKAGE3_ROI_PERCENTAGE = 1000; // 10%\\n    uint256 public constant PACKAGE4_ROI_PERCENTAGE = 1200; // 12%\\n\\n    uint256 public WITHDRAW_FEE = 1000; //10%\\n\\n    uint256 public constant PACKAGE1_ROI_MIN_INVESTMENT = 25 ether;\\n    uint256 public constant PACKAGE2_ROI_MIN_INVESTMENT = 100 ether;\\n    uint256 public constant PACKAGE3_ROI_MIN_INVESTMENT = 200 ether;\\n    uint256 public constant PACKAGE4_ROI_MIN_INVESTMENT = 500 ether;\\n\\n    uint256 public totalInvestment;\\n    uint256 public totalInvestmentAmount;\\n    uint256 public totalReward;\\n    uint256 public totalInvestors;\\n\\n    address public LKD_BALANCE_WALLET;\\n\\n    uint256 public currentID;\\n    uint256 public deposited_LKDReward;\\n\\n    struct Investor {\\n        address investor;\\n        uint256[4] totalInvestment;\\n        uint256 totalReward;\\n        uint256 startDate;\\n        uint256[] userInvestments;\\n    }\\n\\n    struct Investment {\\n        address investor;\\n        uint256 totalInvestment;\\n        uint256 totalReward;\\n        uint256 roiPercentage;\\n        uint256 maxReward;\\n        uint256 lkdPrice;\\n        uint256 startDate;\\n        uint256 lastCheckpoint;\\n    }\\n\\n    mapping(address =\\u003e Investor) public investors;\\n    mapping(uint256 =\\u003e Investment) public investments;\\n\\n    event InvestmentEvent(\\n        address investor,\\n        uint256 investmentNumber,\\n        uint256 roiPercentage,\\n        uint256 lkdPrice,\\n        uint256 startDate\\n    );\\n\\n    constructor(\\n        address _linkDaoToken,\\n        address _linkDaoOracleAddress,\\n        address _lkdBalanceWallet\\n    ) {\\n        require(_linkDaoToken != address(0), \\\"Invalid LinkDao token address\\\");\\n        require(\\n            _linkDaoOracleAddress != address(0),\\n            \\\"Invalid LinkDao oracle address\\\"\\n        );\\n\\n        LINKDAO_TOKEN_ADDRESS = _linkDaoToken;\\n        LINKDAO_ORACLE_ADDRESS = _linkDaoOracleAddress;\\n        LKD_BALANCE_WALLET = _lkdBalanceWallet;\\n    }\\n\\n    function setLinkdaoOracleAddress(\\n        address _linkDaoOracleAddress\\n    ) external onlyOwner {\\n        require(\\n            _linkDaoOracleAddress != address(0),\\n            \\\"Invalid LinkDao oracle address\\\"\\n        );\\n\\n        LINKDAO_ORACLE_ADDRESS = _linkDaoOracleAddress;\\n    }\\n\\n    function setLinkdaoBalanceAddress(\\n        address _lkdBalanceWallet\\n    ) external onlyOwner {\\n        require(\\n            _lkdBalanceWallet != address(0),\\n            \\\"Invalid LinkDao balance address\\\"\\n        );\\n\\n        LKD_BALANCE_WALLET = _lkdBalanceWallet;\\n    }\\n\\n    function getLinkdaoPrice() public view returns (uint256 price) {\\n        price = ILinkdaoOracle(LINKDAO_ORACLE_ADDRESS).getPrice(0);\\n    }\\n\\n    function getPackageROI(\\n        uint256 _amount\\n    ) private pure returns (uint256 packageROI, uint256 index) {\\n        if (_amount \\u003e= PACKAGE4_ROI_MIN_INVESTMENT) {\\n            packageROI = PACKAGE4_ROI_PERCENTAGE;\\n            index = 3;\\n        } else if (_amount \\u003e= PACKAGE3_ROI_MIN_INVESTMENT) {\\n            packageROI = PACKAGE3_ROI_PERCENTAGE;\\n            index = 2;\\n        } else if (_amount \\u003e= PACKAGE2_ROI_MIN_INVESTMENT) {\\n            packageROI = PACKAGE2_ROI_PERCENTAGE;\\n            index = 1;\\n        } else {\\n            packageROI = PACKAGE1_ROI_PERCENTAGE;\\n            index = 0;\\n        }\\n    }\\n\\n    function getUserInvestments(\\n        address _investor\\n    ) public view returns (uint256[] memory) {\\n        return investors[_investor].userInvestments;\\n    }\\n\\n    function setWithdrawalFee(uint256 _updatedFee) external onlyOwner {\\n        WITHDRAW_FEE = _updatedFee;\\n    }\\n\\n    function investAmount(uint256 _amount) external {\\n        require(\\n            _amount \\u003e= MIN_INVESTMENT,\\n            \\\"Invest amount must be greater than 0\\\"\\n        );\\n\\n        uint256 _price = getLinkdaoPrice();\\n\\n        uint256 _lkdAmount = _amount.mul(100).div(_price);\\n\\n        (uint256 packageROI, uint256 index) = getPackageROI(_amount);\\n\\n        if (investors[msg.sender].investor == address(0)) {\\n            investors[msg.sender].investor = msg.sender;\\n            investors[msg.sender].startDate = block.timestamp;\\n\\n            totalInvestors = totalInvestors.add(1);\\n        }\\n\\n        totalInvestment = totalInvestment.add(1);\\n        totalInvestmentAmount = totalInvestmentAmount.add(_lkdAmount);\\n        investors[msg.sender].totalInvestment[index] = investors[msg.sender]\\n            .totalInvestment[index]\\n            .add(_lkdAmount);\\n        investors[msg.sender].userInvestments.push(totalInvestment);\\n\\n        uint256 _maxReward = _lkdAmount.mul(2);\\n\\n        currentID = currentID.add(1);\\n\\n        investments[currentID] = Investment({\\n            investor: msg.sender,\\n            totalInvestment: _lkdAmount,\\n            totalReward: 0,\\n            roiPercentage: packageROI,\\n            maxReward: _maxReward,\\n            startDate: block.timestamp,\\n            lkdPrice: _price,\\n            lastCheckpoint: block.timestamp\\n        });\\n\\n        emit InvestmentEvent(\\n            msg.sender,\\n            totalInvestment,\\n            packageROI,\\n            _price,\\n            block.timestamp\\n        );\\n\\n        IERC20(LINKDAO_TOKEN_ADDRESS).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _lkdAmount\\n        );\\n    }\\n\\n    function investAmountFrom(address _msgSender, uint256 _amount) external {\\n        require(\\n            _amount \\u003e= MIN_INVESTMENT,\\n            \\\"Invest amount must be greater than 0\\\"\\n        );\\n\\n        uint256 _price = getLinkdaoPrice();\\n\\n        uint256 _lkdAmount = _amount.mul(100).div(_price);\\n\\n        (uint256 packageROI, uint256 index) = getPackageROI(_amount);\\n\\n        if (investors[_msgSender].investor == address(0)) {\\n            investors[_msgSender].investor = _msgSender;\\n            investors[_msgSender].startDate = block.timestamp;\\n\\n            totalInvestors = totalInvestors.add(1);\\n        }\\n\\n        totalInvestment = totalInvestment.add(1);\\n        totalInvestmentAmount = totalInvestmentAmount.add(_lkdAmount);\\n        investors[_msgSender].totalInvestment[index] = investors[_msgSender]\\n            .totalInvestment[index]\\n            .add(_lkdAmount);\\n        investors[_msgSender].userInvestments.push(totalInvestment);\\n\\n        uint256 _maxReward = _lkdAmount.mul(2);\\n\\n        currentID = currentID.add(1);\\n\\n        investments[currentID] = Investment({\\n            investor: _msgSender,\\n            totalInvestment: _lkdAmount,\\n            totalReward: 0,\\n            roiPercentage: packageROI,\\n            maxReward: _maxReward,\\n            startDate: block.timestamp,\\n            lkdPrice: _price,\\n            lastCheckpoint: block.timestamp\\n        });\\n\\n        emit InvestmentEvent(\\n            _msgSender,\\n            totalInvestment,\\n            packageROI,\\n            _price,\\n            block.timestamp\\n        );\\n\\n        IERC20(LINKDAO_TOKEN_ADDRESS).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _lkdAmount\\n        );\\n    }\\n\\n    function getLkdBalance() public view returns (uint256 balance) {\\n        balance = IERC20(LINKDAO_TOKEN_ADDRESS).balanceOf(address(this));\\n    }\\n\\n    function getTotalProfit(\\n        address _investorAddress\\n    ) public view returns (uint256 totalProfit) {\\n        for (\\n            uint256 i = 0;\\n            i \\u003c investors[_investorAddress].userInvestments.length;\\n            i++\\n        ) {\\n            totalProfit = totalProfit.add(\\n                getTotalProfitForInvestment(\\n                    investors[_investorAddress].userInvestments[i]\\n                )\\n            );\\n        }\\n    }\\n\\n    function getTotalProfitForInvestment(\\n        uint256 _investmentId\\n    ) public view returns (uint256 totalProfit) {\\n        uint256 totalAmount = investments[_investmentId].totalInvestment;\\n\\n        if (totalAmount == 0) {\\n            return totalProfit;\\n        }\\n\\n        uint256 roiPercentage = investments[_investmentId].roiPercentage;\\n\\n        uint256 currentTime = block.timestamp;\\n\\n        uint256 timePeriod = currentTime -\\n            investments[_investmentId].lastCheckpoint;\\n\\n        totalProfit = totalAmount.mul(roiPercentage).mul(timePeriod).div(\\n            REWARD_PERIOD.mul(TOTAL_PERCENTAGE)\\n        );\\n\\n        if (\\n            investments[_investmentId].totalReward.add(totalProfit) \\u003e\\n            investments[_investmentId].maxReward\\n        ) {\\n            totalProfit = investments[_investmentId].maxReward.sub(\\n                investments[_investmentId].totalReward\\n            );\\n        }\\n    }\\n\\n    function getWithdrawableTotalProfit(\\n        address _investorAddress\\n    ) public view returns (uint256 totalProfit) {\\n        for (\\n            uint256 i = 0;\\n            i \\u003c investors[_investorAddress].userInvestments.length;\\n            i++\\n        ) {\\n            totalProfit = totalProfit.add(\\n                getWithdrawableTotalProfitForInvestment(\\n                    investors[_investorAddress].userInvestments[i]\\n                )\\n            );\\n        }\\n    }\\n\\n    function getWithdrawableTotalProfitForInvestment(\\n        uint256 _investmentId\\n    ) public view returns (uint256 totalProfit) {\\n        uint256 totalAmount = investments[_investmentId].totalInvestment;\\n\\n        if (totalAmount == 0) {\\n            return totalProfit;\\n        }\\n\\n        uint256 roiPercentage = investments[_investmentId].roiPercentage;\\n\\n        uint256 timePeriod = block.timestamp.sub(\\n            investments[_investmentId].lastCheckpoint\\n        );\\n\\n        totalProfit = totalAmount.mul(roiPercentage).mul(timePeriod).div(\\n            REWARD_PERIOD.mul(TOTAL_PERCENTAGE)\\n        );\\n\\n        if (\\n            investments[_investmentId].totalReward.add(totalProfit) \\u003e\\n            investments[_investmentId].maxReward\\n        ) {\\n            totalProfit = investments[_investmentId].maxReward.sub(\\n                investments[_investmentId].totalReward\\n            );\\n        }\\n    }\\n\\n    function getUserTotalInvestments(\\n        address _investor\\n    ) public view returns (uint256[4] memory totalInvestments) {\\n        totalInvestments = investors[_investor].totalInvestment;\\n    }\\n\\n    function getUserInvestmentsByPackage(\\n        address _investor,\\n        uint256 _index\\n    ) public view returns (uint256 totalInvestmentItem) {\\n        totalInvestmentItem = investors[_investor].totalInvestment[_index];\\n    }\\n\\n    function reinvestAmount(uint256 _amount) private {\\n        require(_amount \\u003e 0, \\\"Invest amount must be greater than 0\\\");\\n\\n        uint256 _price = getLinkdaoPrice();\\n\\n        uint256 _usdtAmount = _amount.mul(_price).div(100);\\n\\n        (uint256 packageROI, uint256 index) = getPackageROI(_usdtAmount);\\n\\n        if (investors[msg.sender].investor == address(0)) {\\n            investors[msg.sender].investor = msg.sender;\\n            investors[msg.sender].startDate = block.timestamp;\\n\\n            totalInvestors = totalInvestors.add(1);\\n        }\\n\\n        totalInvestment = totalInvestment.add(1);\\n        investors[msg.sender].totalInvestment[index] = investors[msg.sender]\\n            .totalInvestment[index]\\n            .add(_amount);\\n        investors[msg.sender].userInvestments.push(totalInvestment);\\n\\n        uint256 _maxReward = _amount.mul(2);\\n\\n        currentID = currentID.add(1);\\n\\n        investments[currentID] = Investment({\\n            investor: msg.sender,\\n            totalInvestment: _amount,\\n            totalReward: 0,\\n            roiPercentage: packageROI,\\n            maxReward: _maxReward,\\n            startDate: block.timestamp,\\n            lkdPrice: _price,\\n            lastCheckpoint: block.timestamp\\n        });\\n\\n        emit InvestmentEvent(\\n            msg.sender,\\n            totalInvestment,\\n            packageROI,\\n            _price,\\n            block.timestamp\\n        );\\n    }\\n\\n    function reinvestReward() external {\\n        uint256 price = ILinkdaoOracle(LINKDAO_ORACLE_ADDRESS).getPrice(0);\\n\\n        uint256 totalRewardToRelease;\\n        uint256 totalLkdToRelease;\\n        for (\\n            uint256 i = 0;\\n            i \\u003c investors[msg.sender].userInvestments.length;\\n            i++\\n        ) {\\n            uint256 _investmentId = investors[msg.sender].userInvestments[i];\\n\\n            uint256 totalRewardForInvestment = getWithdrawableTotalProfitForInvestment(\\n                    _investmentId\\n                );\\n\\n            investments[_investmentId].totalReward = investments[_investmentId]\\n                .totalReward\\n                .add(totalRewardForInvestment);\\n\\n            uint256 lkdAmount = (totalRewardForInvestment).div(price).mul(\\n                investments[_investmentId].lkdPrice\\n            );\\n\\n            totalRewardToRelease += totalRewardForInvestment;\\n            totalLkdToRelease += lkdAmount;\\n\\n            investments[_investmentId].lastCheckpoint = block.timestamp;\\n        }\\n\\n        require(\\n            totalLkdToRelease.mul(price).div(100) \\u003e= MIN_REINVEST,\\n            \\\"Cannot reinvest less than min reinvest\\\"\\n        );\\n\\n        investors[msg.sender].totalReward = investors[msg.sender]\\n            .totalReward\\n            .add(totalRewardToRelease);\\n\\n        uint256 currentBalance = getLkdBalance();\\n\\n        if (currentBalance \\u003c totalLkdToRelease) {\\n            Vault(LKD_BALANCE_WALLET).withdraw(\\n                totalLkdToRelease.sub(currentBalance)\\n            );\\n        }\\n\\n        reinvestAmount(totalLkdToRelease);\\n    }\\n\\n    function withdrawReward() external {\\n        uint256 price = ILinkdaoOracle(LINKDAO_ORACLE_ADDRESS).getPrice(0);\\n\\n        uint256 totalRewardToRelease;\\n        uint256 totalLkdToRelease;\\n        for (\\n            uint256 i = 0;\\n            i \\u003c investors[msg.sender].userInvestments.length;\\n            i++\\n        ) {\\n            uint256 _investmentId = investors[msg.sender].userInvestments[i];\\n\\n            uint256 totalRewardForInvestment = getWithdrawableTotalProfitForInvestment(\\n                    _investmentId\\n                );\\n\\n            investments[_investmentId].totalReward = investments[_investmentId]\\n                .totalReward\\n                .add(totalRewardForInvestment);\\n\\n            uint256 lkdAmount = (totalRewardForInvestment).div(price).mul(\\n                investments[_investmentId].lkdPrice\\n            );\\n\\n            totalRewardToRelease += totalRewardForInvestment;\\n            totalLkdToRelease += lkdAmount;\\n\\n            investments[_investmentId].lastCheckpoint = block.timestamp;\\n        }\\n\\n        require(\\n            totalLkdToRelease.mul(price).div(100) \\u003e= MIN_WITHDRAW,\\n            \\\"Cannot withdraw less than min withdraw\\\"\\n        );\\n\\n        investors[msg.sender].totalReward = investors[msg.sender]\\n            .totalReward\\n            .add(totalRewardToRelease);\\n\\n        totalReward = totalReward.add(totalLkdToRelease);\\n\\n        uint256 currentBalance = getLkdBalance();\\n\\n        if (currentBalance \\u003c totalLkdToRelease) {\\n            Vault(LKD_BALANCE_WALLET).withdraw(\\n                totalLkdToRelease.sub(currentBalance)\\n            );\\n        }\\n\\n        uint256 _fee = totalLkdToRelease.mul(WITHDRAW_FEE).div(\\n            TOTAL_PERCENTAGE\\n        );\\n\\n        IERC20(LINKDAO_TOKEN_ADDRESS).safeTransfer(\\n            msg.sender,\\n            totalLkdToRelease.sub(_fee)\\n        );\\n    }\\n\\n    function reinvestSingleReward(uint256 _investmentId) external {\\n        require(\\n            investments[_investmentId].investor == msg.sender,\\n            \\\"Only investor can claim the reward\\\"\\n        );\\n        uint256 price = ILinkdaoOracle(LINKDAO_ORACLE_ADDRESS).getPrice(0);\\n\\n        uint256 totalRewardToRelease = getWithdrawableTotalProfitForInvestment(\\n            _investmentId\\n        );\\n\\n        require(totalRewardToRelease \\u003e 0, \\\"No Reward to claim\\\");\\n\\n        investments[_investmentId].lastCheckpoint = block.timestamp;\\n\\n        uint256 lkdAmount = (totalRewardToRelease).div(price).mul(\\n            investments[_investmentId].lkdPrice\\n        );\\n        require(\\n            lkdAmount.mul(price).div(100) \\u003e= MIN_REINVEST,\\n            \\\"Cannot reinvest less than min reinvest\\\"\\n        );\\n\\n        investments[_investmentId].totalReward = investments[_investmentId]\\n            .totalReward\\n            .add(totalRewardToRelease);\\n\\n        investors[msg.sender].totalReward = investors[msg.sender]\\n            .totalReward\\n            .add(totalRewardToRelease);\\n\\n        uint256 currentBalance = getLkdBalance();\\n\\n        if (currentBalance \\u003c lkdAmount) {\\n            Vault(LKD_BALANCE_WALLET).withdraw(lkdAmount.sub(currentBalance));\\n        }\\n\\n        reinvestAmount(lkdAmount);\\n    }\\n\\n    function withdrawSingleReward(uint256 _investmentId) external {\\n        require(\\n            investments[_investmentId].investor == msg.sender,\\n            \\\"Only investor can claim the reward\\\"\\n        );\\n        uint256 price = ILinkdaoOracle(LINKDAO_ORACLE_ADDRESS).getPrice(0);\\n\\n        uint256 totalRewardToRelease = getWithdrawableTotalProfitForInvestment(\\n            _investmentId\\n        );\\n\\n        require(totalRewardToRelease \\u003e 0, \\\"No Reward to claim\\\");\\n\\n        investments[_investmentId].lastCheckpoint = block.timestamp;\\n\\n        uint256 lkdAmount = (totalRewardToRelease).div(price).mul(\\n            investments[_investmentId].lkdPrice\\n        );\\n\\n        require(\\n            lkdAmount.mul(price).div(100) \\u003e= MIN_WITHDRAW,\\n            \\\"Cannot withdraw less than min withdraw\\\"\\n        );\\n\\n        investments[_investmentId].totalReward = investments[_investmentId]\\n            .totalReward\\n            .add(totalRewardToRelease);\\n\\n        investors[msg.sender].totalReward = investors[msg.sender]\\n            .totalReward\\n            .add(totalRewardToRelease);\\n\\n        totalReward = totalReward.add(lkdAmount);\\n\\n        uint256 currentBalance = getLkdBalance();\\n\\n        if (currentBalance \\u003c lkdAmount) {\\n            Vault(LKD_BALANCE_WALLET).withdraw(lkdAmount.sub(currentBalance));\\n        }\\n\\n        uint256 _fee = lkdAmount.mul(WITHDRAW_FEE).div(TOTAL_PERCENTAGE);\\n\\n        IERC20(LINKDAO_TOKEN_ADDRESS).safeTransfer(\\n            msg.sender,\\n            lkdAmount.sub(_fee)\\n        );\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../IERC20.sol\\\";\\r\\nimport \\\"../draft-IERC20Permit.sol\\\";\\r\\nimport \\\"../Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance \\u003e= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function safePermit(\\r\\n        IERC20Permit token,\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal {\\r\\n        uint256 nonceBefore = token.nonces(owner);\\r\\n        token.permit(owner, spender, value, deadline, v, r, s);\\r\\n        uint256 nonceAfter = token.nonces(owner);\\r\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length \\u003e 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler\\u0027s built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c \\u003c a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b \\u003e a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n            // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b \\u003c= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b \\u003e 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b \\u003e 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\"},\"Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Ownable.sol\\\";\\nimport \\\"../SafeMath.sol\\\";\\nimport \\\"../SafeERC20.sol\\\";\\n\\ncontract Vault is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address public tokenAddress;\\n    uint256 public tokenBalance;\\n    mapping(address =\\u003e uint256) public contractWithdrawLimits;\\n    mapping(address =\\u003e uint256) public contractWithdrawnAmounts;\\n    mapping(address =\\u003e bool) public addedContracts;\\n\\n    constructor(address _tokenAddress) {\\n        tokenAddress = _tokenAddress;\\n    }\\n\\n    modifier onlyAddedContracts() {\\n        require(\\n            addedContracts[msg.sender] || msg.sender == owner(),\\n            \\\"You are not authorized to withdraw these funds\\\"\\n        );\\n        _;\\n    }\\n\\n    function setTokenAddress(address _tokenAddress) external onlyOwner {\\n        tokenAddress = _tokenAddress;\\n    }\\n\\n    function deposit(uint256 _amount) external onlyOwner {\\n        IERC20(tokenAddress).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        tokenBalance = tokenBalance.add(_amount);\\n    }\\n\\n    function withdraw(uint256 _amount) external onlyAddedContracts {\\n        require(_amount \\u003c= tokenBalance, \\\"Insufficient balance\\\");\\n        internalWithdraw(msg.sender, _amount);\\n    }\\n\\n    function setContractLimit(\\n        address _contractAddress,\\n        uint256 _withdrawLimit\\n    ) external onlyOwner {\\n        contractWithdrawLimits[_contractAddress] = _withdrawLimit;\\n    }\\n\\n    function addContract(\\n        address _contractAddress,\\n        uint256 _withdrawLimit\\n    ) external onlyOwner {\\n        contractWithdrawLimits[_contractAddress] = _withdrawLimit;\\n        addedContracts[_contractAddress] = true;\\n    }\\n\\n    function removeContract(address _contractAddress) external onlyOwner {\\n        require(addedContracts[_contractAddress], \\\"Contract address not found\\\");\\n        delete contractWithdrawLimits[_contractAddress];\\n        delete contractWithdrawnAmounts[_contractAddress];\\n        addedContracts[_contractAddress] = false;\\n    }\\n\\n    function internalWithdraw(\\n        address _contractAddress,\\n        uint256 _amount\\n    ) private {\\n        require(addedContracts[_contractAddress], \\\"Contract address not found\\\");\\n        require(\\n            contractWithdrawLimits[_contractAddress] \\u003e 0,\\n            \\\"Contract address not found\\\"\\n        );\\n        require(\\n            _amount \\u003c= contractWithdrawLimits[_contractAddress],\\n            \\\"Withdrawal amount exceeds contract balance\\\"\\n        );\\n        contractWithdrawnAmounts[_contractAddress] = contractWithdrawnAmounts[\\n            _contractAddress\\n        ].add(_amount);\\n        tokenBalance = tokenBalance.sub(_amount);\\n        IERC20(tokenAddress).safeTransfer(_contractAddress, _amount);\\n    }\\n\\n    function getWithdrawLimitRemaining(\\n        address _contractAddress\\n    ) external view returns (uint256) {\\n        return\\n            contractWithdrawLimits[_contractAddress].sub(\\n                contractWithdrawnAmounts[_contractAddress]\\n            );\\n    }\\n\\n    function getWithdrawnAmount(\\n        address _contractAddress\\n    ) external view returns (uint256) {\\n        return contractWithdrawnAmounts[_contractAddress];\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reqId\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reqId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInCents\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ILinkdaoOracle", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1d2ba0d67c5707151c8430dccea1c6e6f137c5b36721480daad6a6cd5e9f5b16"}