{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IAdmin.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IAdmin {\\n    function admin() external view returns (address);\\n\\n    function setAdmin(address _admin) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IPlpManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IPlpManager {\\n    function plp() external view returns (address);\\n\\n    function vault() external view returns (IVault);\\n\\n    function collateralToken() external view returns (address);\\n\\n    function cooldownDuration() external returns (uint256);\\n\\n    function getAumInUsdp(bool maximise) external view returns (uint256);\\n\\n    function estimatePlpOut(uint256 _amount) external view returns (uint256);\\n\\n    function estimateTokenIn(uint256 _plpAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function lastAddedAt(address _account) external returns (uint256);\\n\\n    function addLiquidity(\\n        uint256 _amount,\\n        uint256 _minUsdp,\\n        uint256 _minPlp\\n    ) external returns (uint256);\\n\\n    function addLiquidityForAccount(\\n        address _fundingAccount,\\n        address _account,\\n        uint256 _amount,\\n        uint256 _minUsdp,\\n        uint256 _minPlp\\n    ) external returns (uint256);\\n\\n    function removeLiquidity(\\n        uint256 _plpAmount,\\n        uint256 _minOut,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function removeLiquidityForAccount(\\n        address _account,\\n        uint256 _plpAmount,\\n        uint256 _minOut,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function setShortsTrackerAveragePriceWeight(\\n        uint256 _shortsTrackerAveragePriceWeight\\n    ) external;\\n\\n    function setCooldownDuration(uint256 _cooldownDuration) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IVault {\\n    function isInitialized() external view returns (bool);\\n\\n    function isLeverageEnabled() external view returns (bool);\\n\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n\\n    function router() external view returns (address);\\n\\n    function collateralToken() external view returns (address);\\n\\n    function whitelistedTokenCount() external view returns (uint256);\\n\\n    function maxLeverage() external view returns (uint256);\\n\\n    function minProfitTime() external view returns (uint256);\\n\\n    function fundingInterval() external view returns (uint256);\\n\\n    function maxGasPrice() external view returns (uint256);\\n\\n    function approvedRouters(address _account, address _router)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isLiquidator(address _account) external view returns (bool);\\n\\n    function plpManager() external view returns (address);\\n\\n    function minProfitBasisPoints(address _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function tokenBalances(address _token) external view returns (uint256);\\n\\n    function lastFundingTimes(address _token, bool _isLong)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function estimateUSDPOut(uint256 _amount) external view returns (uint256);\\n\\n    function estimateTokenIn(uint256 _usdpAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n\\n    function setPlpManager(address _manager) external;\\n\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n\\n    function setUsdpAmount(uint256 _amount) external;\\n\\n    function setMaxGlobalSize(\\n        address _token,\\n        uint256 _longAmount,\\n        uint256 _shortAmount\\n    ) external;\\n\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n\\n    function setFundingRate(\\n        uint256 _fundingInterval,\\n        uint256 _fundingRateFactor\\n    ) external;\\n\\n    function setFees(\\n        uint256 _taxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime\\n    ) external;\\n\\n    function setMaxUsdpAmounts(uint256 _maxUsdpAmounts) external;\\n\\n    function setTokenConfig(\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _minProfitBps,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n\\n    function withdrawFees(address _receiver) external returns (uint256);\\n\\n    function directPoolDeposit() external;\\n\\n    function addLiquidity() external returns (uint256);\\n\\n    function removeLiquidity(address _receiver, uint256 _usdpAmount)\\n        external\\n        returns (uint256);\\n\\n    function increasePosition(\\n        address _account,\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        bool _isLong\\n    ) external;\\n\\n    function decreasePosition(\\n        address _account,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver\\n    ) external returns (uint256);\\n\\n    function validateLiquidation(\\n        address _account,\\n        address _indexToken,\\n        bool _isLong,\\n        bool _raise\\n    ) external view returns (uint256, uint256);\\n\\n    function liquidatePosition(\\n        address _account,\\n        address _indexToken,\\n        bool _isLong,\\n        address _feeReceiver\\n    ) external;\\n\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function priceFeed() external view returns (address);\\n\\n    function fundingRateFactor() external view returns (uint256);\\n\\n    function cumulativeFundingRates(address _token, bool _isLong)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getNextFundingRate(address _token, bool _isLong)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function liquidationFeeUsd() external view returns (uint256);\\n\\n    function taxBasisPoints() external view returns (uint256);\\n\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n\\n    function marginFeeBasisPoints() external view returns (uint256);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n\\n    function whitelistedTokens(address _token) external view returns (bool);\\n\\n    function stableTokens(address _token) external view returns (bool);\\n\\n    function shortableTokens(address _token) external view returns (bool);\\n\\n    function feeReserve() external view returns (uint256);\\n\\n    function globalShortSizes(address _token) external view returns (uint256);\\n\\n    function globalLongSizes(address _token) external view returns (uint256);\\n\\n    function globalShortAveragePrices(address _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function globalLongAveragePrices(address _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function maxGlobalShortSizes(address _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function maxGlobalLongSizes(address _token) external view returns (uint256);\\n\\n    function tokenDecimals(address _token) external view returns (uint256);\\n\\n    function poolAmount() external view returns (uint256);\\n\\n    function reservedAmounts(address _token, bool _isLong)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function totalReservedAmount() external view returns (uint256);\\n\\n    function usdpAmount() external view returns (uint256);\\n\\n    function maxUsdpAmount() external view returns (uint256);\\n\\n    function getRedemptionAmount(uint256 _usdpAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getMaxPrice(address _token) external view returns (uint256);\\n\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function getDelta(\\n        address _indexToken,\\n        uint256 _size,\\n        uint256 _averagePrice,\\n        bool _isLong,\\n        uint256 _lastIncreasedTime\\n    ) external view returns (bool, uint256);\\n\\n    function getPosition(\\n        address _account,\\n        address _indexToken,\\n        bool _isLong\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/peripherals/Timelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/ITimelockTarget.sol\\\";\\nimport \\\"./interfaces/ITimelock.sol\\\";\\nimport \\\"./interfaces/IHandlerTarget.sol\\\";\\nimport \\\"../access/interfaces/IAdmin.sol\\\";\\nimport \\\"../core/interfaces/IVault.sol\\\";\\nimport \\\"../core/interfaces/IPlpManager.sol\\\";\\nimport \\\"../referrals/interfaces/IReferralStorage.sol\\\";\\nimport \\\"../tokens/interfaces/IBaseToken.sol\\\";\\nimport \\\"../tokens/interfaces/IMintable.sol\\\";\\nimport \\\"../staking/interfaces/IRewardRouter.sol\\\";\\n\\ncontract Timelock is ITimelock {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant PRICE_PRECISION = 10 ** 30;\\n    uint256 public constant MAX_BUFFER = 5 days;\\n    uint256 public constant MAX_FUNDING_RATE_FACTOR = 200; // 0.02%\\n    uint256 public constant MAX_LEVERAGE_VALIDATION = 500000; // 50x\\n\\n    uint256 public buffer;\\n    address public admin;\\n\\n    address public tokenManager;\\n    address public mintReceiver;\\n    address public plpManager;\\n    address public rewardRouter;\\n    uint256 public maxTokenSupply;\\n\\n    uint256 public override marginFeeBasisPoints;\\n    uint256 public maxMarginFeeBasisPoints;\\n    bool public shouldToggleIsLeverageEnabled;\\n\\n    mapping(bytes32 => uint256) public pendingActions;\\n\\n    mapping(address => bool) public isHandler;\\n    mapping(address => bool) public isKeeper;\\n\\n    event SignalPendingAction(bytes32 action);\\n    event SignalApprove(\\n        address token,\\n        address spender,\\n        uint256 amount,\\n        bytes32 action\\n    );\\n    event SignalWithdrawToken(\\n        address target,\\n        address token,\\n        address receiver,\\n        uint256 amount,\\n        bytes32 action\\n    );\\n    event SignalMint(\\n        address token,\\n        address receiver,\\n        uint256 amount,\\n        bytes32 action\\n    );\\n    event SignalSetGov(address target, address gov, bytes32 action);\\n    event SignalSetHandler(\\n        address target,\\n        address handler,\\n        bool isActive,\\n        bytes32 action\\n    );\\n    event SignalSetPriceFeed(address vault, address priceFeed, bytes32 action);\\n    event SignalVaultSetTokenConfig(\\n        address vault,\\n        address token,\\n        uint256 tokenDecimals,\\n        uint256 minProfitBps,\\n        bool isStable,\\n        bool isShortable\\n    );\\n    event ClearAction(bytes32 action);\\n    event SignalTransaction(\\n        address target,\\n        uint256 ethValue,\\n        string signature,\\n        bytes data\\n    );\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Timelock: forbidden\\\");\\n        _;\\n    }\\n\\n    modifier onlyHandlerAndAbove() {\\n        require(\\n            msg.sender == admin || isHandler[msg.sender],\\n            \\\"Timelock: forbidden\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyKeeperAndAbove() {\\n        require(\\n            msg.sender == admin ||\\n                isHandler[msg.sender] ||\\n                isKeeper[msg.sender],\\n            \\\"Timelock: forbidden\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyTokenManager() {\\n        require(msg.sender == tokenManager, \\\"Timelock: forbidden\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _admin,\\n        uint256 _buffer,\\n        address _tokenManager,\\n        address _mintReceiver,\\n        address _plpManager,\\n        address _rewardRouter,\\n        uint256 _maxTokenSupply,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _maxMarginFeeBasisPoints\\n    ) {\\n        require(_buffer <= MAX_BUFFER, \\\"Timelock: invalid _buffer\\\");\\n        admin = _admin;\\n        buffer = _buffer;\\n        tokenManager = _tokenManager;\\n        mintReceiver = _mintReceiver;\\n        plpManager = _plpManager;\\n        rewardRouter = _rewardRouter;\\n        maxTokenSupply = _maxTokenSupply;\\n\\n        marginFeeBasisPoints = _marginFeeBasisPoints;\\n        maxMarginFeeBasisPoints = _maxMarginFeeBasisPoints;\\n    }\\n\\n    function setAdmin(address _admin) external override onlyTokenManager {\\n        admin = _admin;\\n    }\\n\\n    function setTokenManager(address _newManager) external onlyTokenManager {\\n        require(tokenManager != _newManager, \\\"Timelock: already set\\\");\\n\\n        tokenManager = _newManager;\\n    }\\n\\n    function setExternalAdmin(\\n        address _target,\\n        address _admin\\n    ) external onlyAdmin {\\n        require(_target != address(this), \\\"Timelock: invalid _target\\\");\\n        IAdmin(_target).setAdmin(_admin);\\n    }\\n\\n    function setContractHandler(\\n        address _handler,\\n        bool _isActive\\n    ) external onlyAdmin {\\n        isHandler[_handler] = _isActive;\\n    }\\n\\n    function initPlpManager() external onlyAdmin {\\n        IPlpManager _plpManager = IPlpManager(plpManager);\\n\\n        IMintable plp = IMintable(_plpManager.plp());\\n        plp.setMinter(plpManager, true);\\n\\n        IVault vault = _plpManager.vault();\\n        vault.setPlpManager(plpManager);\\n    }\\n\\n    function initRewardRouter() external onlyAdmin {\\n        IRewardRouter _rewardRouter = IRewardRouter(rewardRouter);\\n\\n        IHandlerTarget(_rewardRouter.feePlpTracker()).setHandler(\\n            rewardRouter,\\n            true\\n        );\\n        IHandlerTarget(plpManager).setHandler(rewardRouter, true);\\n    }\\n\\n    function setKeeper(address _keeper, bool _isActive) external onlyAdmin {\\n        isKeeper[_keeper] = _isActive;\\n    }\\n\\n    function setBuffer(uint256 _buffer) external onlyAdmin {\\n        require(_buffer <= MAX_BUFFER, \\\"Timelock: invalid _buffer\\\");\\n        require(_buffer > buffer, \\\"Timelock: buffer cannot be decreased\\\");\\n        buffer = _buffer;\\n    }\\n\\n    function setMaxLeverage(\\n        address _vault,\\n        uint256 _maxLeverage\\n    ) external onlyAdmin {\\n        require(\\n            _maxLeverage > MAX_LEVERAGE_VALIDATION,\\n            \\\"Timelock: invalid _maxLeverage\\\"\\n        );\\n        IVault(_vault).setMaxLeverage(_maxLeverage);\\n    }\\n\\n    function setFundingRate(\\n        address _vault,\\n        uint256 _fundingInterval,\\n        uint256 _fundingRateFactor\\n    ) external onlyKeeperAndAbove {\\n        require(\\n            _fundingRateFactor < MAX_FUNDING_RATE_FACTOR,\\n            \\\"Timelock: invalid _fundingRateFactor\\\"\\n        );\\n        IVault(_vault).setFundingRate(_fundingInterval, _fundingRateFactor);\\n    }\\n\\n    function setShouldToggleIsLeverageEnabled(\\n        bool _shouldToggleIsLeverageEnabled\\n    ) external onlyHandlerAndAbove {\\n        shouldToggleIsLeverageEnabled = _shouldToggleIsLeverageEnabled;\\n    }\\n\\n    function setMarginFeeBasisPoints(\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _maxMarginFeeBasisPoints\\n    ) external onlyHandlerAndAbove {\\n        marginFeeBasisPoints = _marginFeeBasisPoints;\\n        maxMarginFeeBasisPoints = _maxMarginFeeBasisPoints;\\n    }\\n\\n    function setSwapFees(\\n        address _vault,\\n        uint256 _taxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints\\n    ) external onlyKeeperAndAbove {\\n        IVault vault = IVault(_vault);\\n\\n        vault.setFees(\\n            _taxBasisPoints,\\n            _mintBurnFeeBasisPoints,\\n            maxMarginFeeBasisPoints,\\n            vault.liquidationFeeUsd(),\\n            vault.minProfitTime()\\n        );\\n    }\\n\\n    // assign _marginFeeBasisPoints to this.marginFeeBasisPoints\\n    // because enableLeverage would update Vault.marginFeeBasisPoints to this.marginFeeBasisPoints\\n    // and disableLeverage would reset the Vault.marginFeeBasisPoints to this.maxMarginFeeBasisPoints\\n    function setFees(\\n        address _vault,\\n        uint256 _taxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime\\n    ) external onlyKeeperAndAbove {\\n        marginFeeBasisPoints = _marginFeeBasisPoints;\\n\\n        IVault(_vault).setFees(\\n            _taxBasisPoints,\\n            _mintBurnFeeBasisPoints,\\n            maxMarginFeeBasisPoints,\\n            _liquidationFeeUsd,\\n            _minProfitTime\\n        );\\n    }\\n\\n    function enableLeverage(\\n        address _vault\\n    ) external override onlyHandlerAndAbove {\\n        IVault vault = IVault(_vault);\\n\\n        if (shouldToggleIsLeverageEnabled) {\\n            vault.setIsLeverageEnabled(true);\\n        }\\n\\n        vault.setFees(\\n            vault.taxBasisPoints(),\\n            vault.mintBurnFeeBasisPoints(),\\n            marginFeeBasisPoints,\\n            vault.liquidationFeeUsd(),\\n            vault.minProfitTime()\\n        );\\n    }\\n\\n    function disableLeverage(\\n        address _vault\\n    ) external override onlyHandlerAndAbove {\\n        IVault vault = IVault(_vault);\\n\\n        if (shouldToggleIsLeverageEnabled) {\\n            vault.setIsLeverageEnabled(false);\\n        }\\n\\n        vault.setFees(\\n            vault.taxBasisPoints(),\\n            vault.mintBurnFeeBasisPoints(),\\n            maxMarginFeeBasisPoints, // marginFeeBasisPoints\\n            vault.liquidationFeeUsd(),\\n            vault.minProfitTime()\\n        );\\n    }\\n\\n    function setIsLeverageEnabled(\\n        address _vault,\\n        bool _isLeverageEnabled\\n    ) external override onlyHandlerAndAbove {\\n        IVault(_vault).setIsLeverageEnabled(_isLeverageEnabled);\\n    }\\n\\n    function setTokenConfig(\\n        address _vault,\\n        address _token,\\n        uint256 _minProfitBps\\n    ) external onlyKeeperAndAbove {\\n        require(_minProfitBps <= 500, \\\"Timelock: invalid _minProfitBps\\\");\\n\\n        IVault vault = IVault(_vault);\\n        require(\\n            vault.whitelistedTokens(_token),\\n            \\\"Timelock: token not yet whitelisted\\\"\\n        );\\n\\n        uint256 tokenDecimals = vault.tokenDecimals(_token);\\n        bool isStable = vault.stableTokens(_token);\\n        bool isShortable = vault.shortableTokens(_token);\\n\\n        IVault(_vault).setTokenConfig(\\n            _token,\\n            tokenDecimals,\\n            _minProfitBps,\\n            isStable,\\n            isShortable\\n        );\\n    }\\n\\n    function setMaxUsdpAmounts(\\n        address _vault,\\n        uint256 _maxUsdpAmounts\\n    ) external onlyKeeperAndAbove {\\n        IVault(_vault).setMaxUsdpAmounts(_maxUsdpAmounts);\\n    }\\n\\n    function setUsdpAmount(\\n        address _vault,\\n        uint256 _usdpAmount\\n    ) external onlyKeeperAndAbove {\\n        IVault(_vault).setUsdpAmount(_usdpAmount);\\n    }\\n\\n    function setShortsTrackerAveragePriceWeight(\\n        uint256 _shortsTrackerAveragePriceWeight\\n    ) external onlyAdmin {\\n        IPlpManager(plpManager).setShortsTrackerAveragePriceWeight(\\n            _shortsTrackerAveragePriceWeight\\n        );\\n    }\\n\\n    function setPlpCooldownDuration(\\n        uint256 _cooldownDuration\\n    ) external onlyAdmin {\\n        require(\\n            _cooldownDuration < 2 hours,\\n            \\\"Timelock: invalid _cooldownDuration\\\"\\n        );\\n        IPlpManager(plpManager).setCooldownDuration(_cooldownDuration);\\n    }\\n\\n    function setMaxGlobalSize(\\n        address _vault,\\n        address _token,\\n        uint256 _longAmount,\\n        uint256 _shortAmount\\n    ) external onlyAdmin {\\n        IVault(_vault).setMaxGlobalSize(_token, _longAmount, _shortAmount);\\n    }\\n\\n    function setTier(\\n        address _referralStorage,\\n        uint256 _tierId,\\n        uint256 _totalRebate,\\n        uint256 _discountShare\\n    ) external onlyKeeperAndAbove {\\n        IReferralStorage(_referralStorage).setTier(\\n            _tierId,\\n            _totalRebate,\\n            _discountShare\\n        );\\n    }\\n\\n    function setReferrerTier(\\n        address _referralStorage,\\n        address _referrer,\\n        uint256 _tierId\\n    ) external onlyKeeperAndAbove {\\n        IReferralStorage(_referralStorage).setReferrerTier(_referrer, _tierId);\\n    }\\n\\n    function govSetCodeOwner(\\n        address _referralStorage,\\n        bytes32 _code,\\n        address _newAccount\\n    ) external onlyKeeperAndAbove {\\n        IReferralStorage(_referralStorage).govSetCodeOwner(_code, _newAccount);\\n    }\\n\\n    function setMaxGasPrice(\\n        address _vault,\\n        uint256 _maxGasPrice\\n    ) external onlyAdmin {\\n        require(_maxGasPrice > 5000000000, \\\"Invalid _maxGasPrice\\\");\\n        IVault(_vault).setMaxGasPrice(_maxGasPrice);\\n    }\\n\\n    function withdrawFees(\\n        address _vault,\\n        address _receiver\\n    ) external onlyAdmin {\\n        IVault(_vault).withdrawFees(_receiver);\\n    }\\n\\n    function batchWithdrawFees(\\n        address _vault,\\n        address _receiver\\n    ) external onlyKeeperAndAbove returns (uint256 fee) {\\n        fee = IVault(_vault).withdrawFees(_receiver);\\n    }\\n\\n    function setLiquidator(\\n        address _vault,\\n        address _liquidator,\\n        bool _isActive\\n    ) external onlyAdmin {\\n        IVault(_vault).setLiquidator(_liquidator, _isActive);\\n    }\\n\\n    function setInPrivateTransferMode(\\n        address _token,\\n        bool _inPrivateTransferMode\\n    ) external onlyAdmin {\\n        IBaseToken(_token).setInPrivateTransferMode(_inPrivateTransferMode);\\n    }\\n\\n    function transferIn(\\n        address _sender,\\n        address _token,\\n        uint256 _amount\\n    ) external onlyAdmin {\\n        IERC20(_token).safeTransferFrom(_sender, address(this), _amount);\\n    }\\n\\n    function signalApprove(\\n        address _token,\\n        address _spender,\\n        uint256 _amount\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\\"approve\\\", _token, _spender, _amount)\\n        );\\n        _setPendingAction(action);\\n        emit SignalApprove(_token, _spender, _amount, action);\\n    }\\n\\n    function approve(\\n        address _token,\\n        address _spender,\\n        uint256 _amount\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\\"approve\\\", _token, _spender, _amount)\\n        );\\n        _validateAction(action);\\n        _clearAction(action);\\n        IERC20(_token).approve(_spender, _amount);\\n    }\\n\\n    function signalWithdrawToken(\\n        address _target,\\n        address _token,\\n        address _receiver,\\n        uint256 _amount\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\n                \\\"withdrawToken\\\",\\n                _target,\\n                _token,\\n                _receiver,\\n                _amount\\n            )\\n        );\\n        _setPendingAction(action);\\n        emit SignalWithdrawToken(_target, _token, _receiver, _amount, action);\\n    }\\n\\n    function withdrawToken(\\n        address _target,\\n        address _token,\\n        address _receiver,\\n        uint256 _amount\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\n                \\\"withdrawToken\\\",\\n                _target,\\n                _token,\\n                _receiver,\\n                _amount\\n            )\\n        );\\n        _validateAction(action);\\n        _clearAction(action);\\n        IBaseToken(_target).withdrawToken(_token, _receiver, _amount);\\n    }\\n\\n    function signalMint(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\\"mint\\\", _token, _receiver, _amount)\\n        );\\n        _setPendingAction(action);\\n        emit SignalMint(_token, _receiver, _amount, action);\\n    }\\n\\n    function processMint(\\n        address _token,\\n        address _receiver,\\n        uint256 _amount\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\\"mint\\\", _token, _receiver, _amount)\\n        );\\n        _validateAction(action);\\n        _clearAction(action);\\n\\n        _mint(_token, _receiver, _amount);\\n    }\\n\\n    function signalSetGov(\\n        address _target,\\n        address _gov\\n    ) external override onlyAdmin {\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\\"transferOwnership\\\", _target, _gov)\\n        );\\n        _setPendingAction(action);\\n        emit SignalSetGov(_target, _gov, action);\\n    }\\n\\n    function transferOwnership(\\n        address _target,\\n        address _gov\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\\"transferOwnership\\\", _target, _gov)\\n        );\\n        _validateAction(action);\\n        _clearAction(action);\\n        ITimelockTarget(_target).transferOwnership(_gov);\\n    }\\n\\n    function signalSetHandler(\\n        address _target,\\n        address _handler,\\n        bool _isActive\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\\"setHandler\\\", _target, _handler, _isActive)\\n        );\\n        _setPendingAction(action);\\n        emit SignalSetHandler(_target, _handler, _isActive, action);\\n    }\\n\\n    function setHandler(\\n        address _target,\\n        address _handler,\\n        bool _isActive\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\\"setHandler\\\", _target, _handler, _isActive)\\n        );\\n        _validateAction(action);\\n        _clearAction(action);\\n        IHandlerTarget(_target).setHandler(_handler, _isActive);\\n    }\\n\\n    function signalSetPriceFeed(\\n        address _vault,\\n        address _priceFeed\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\\"setPriceFeed\\\", _vault, _priceFeed)\\n        );\\n        _setPendingAction(action);\\n        emit SignalSetPriceFeed(_vault, _priceFeed, action);\\n    }\\n\\n    function setPriceFeed(\\n        address _vault,\\n        address _priceFeed\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\\"setPriceFeed\\\", _vault, _priceFeed)\\n        );\\n        _validateAction(action);\\n        _clearAction(action);\\n        IVault(_vault).setPriceFeed(_priceFeed);\\n    }\\n\\n    function signalVaultSetTokenConfig(\\n        address _vault,\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _minProfitBps,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\n                \\\"vaultSetTokenConfig\\\",\\n                _vault,\\n                _token,\\n                _tokenDecimals,\\n                _minProfitBps,\\n                _isStable,\\n                _isShortable\\n            )\\n        );\\n\\n        _setPendingAction(action);\\n\\n        emit SignalVaultSetTokenConfig(\\n            _vault,\\n            _token,\\n            _tokenDecimals,\\n            _minProfitBps,\\n            _isStable,\\n            _isShortable\\n        );\\n    }\\n\\n    function vaultSetTokenConfig(\\n        address _vault,\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _minProfitBps,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\n                \\\"vaultSetTokenConfig\\\",\\n                _vault,\\n                _token,\\n                _tokenDecimals,\\n                _minProfitBps,\\n                _isStable,\\n                _isShortable\\n            )\\n        );\\n\\n        _validateAction(action);\\n        _clearAction(action);\\n\\n        IVault(_vault).setTokenConfig(\\n            _token,\\n            _tokenDecimals,\\n            _minProfitBps,\\n            _isStable,\\n            _isShortable\\n        );\\n    }\\n\\n    function cancelAction(bytes32 _action) external onlyAdmin {\\n        _clearAction(_action);\\n    }\\n\\n    function _mint(address _token, address _receiver, uint256 _amount) private {\\n        IMintable mintable = IMintable(_token);\\n\\n        mintable.setMinter(address(this), true);\\n\\n        mintable.mint(_receiver, _amount);\\n        require(\\n            IERC20(_token).totalSupply() <= maxTokenSupply,\\n            \\\"Timelock: maxTokenSupply exceeded\\\"\\n        );\\n\\n        mintable.setMinter(address(this), false);\\n    }\\n\\n    function _setPendingAction(bytes32 _action) private {\\n        require(\\n            pendingActions[_action] == 0,\\n            \\\"Timelock: action already signalled\\\"\\n        );\\n        pendingActions[_action] = block.timestamp + buffer;\\n        emit SignalPendingAction(_action);\\n    }\\n\\n    function _validateAction(bytes32 _action) private view {\\n        require(pendingActions[_action] != 0, \\\"Timelock: action not signalled\\\");\\n        require(\\n            pendingActions[_action] < block.timestamp,\\n            \\\"Timelock: action time not yet passed\\\"\\n        );\\n    }\\n\\n    function _clearAction(bytes32 _action) private {\\n        require(pendingActions[_action] != 0, \\\"Timelock: invalid _action\\\");\\n        delete pendingActions[_action];\\n        emit ClearAction(_action);\\n    }\\n\\n    function signalTransaction(\\n        address target,\\n        uint256 ethValue,\\n        string memory signature,\\n        bytes memory data\\n    ) external onlyAdmin {\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\n                \\\"execTransaction\\\",\\n                target,\\n                ethValue,\\n                signature,\\n                data\\n            )\\n        );\\n\\n        _setPendingAction(action);\\n\\n        emit SignalTransaction(target, ethValue, signature, data);\\n    }\\n\\n    function executeTransaction(\\n        address target,\\n        uint256 ethValue,\\n        string memory signature,\\n        bytes memory data\\n    ) public payable onlyAdmin {\\n        bytes32 action = keccak256(\\n            abi.encodePacked(\\n                \\\"execTransaction\\\",\\n                target,\\n                ethValue,\\n                signature,\\n                data\\n            )\\n        );\\n\\n        _validateAction(action);\\n        _clearAction(action);\\n\\n        bytes memory callData;\\n\\n        if (bytes(signature).length == 0) {\\n            callData = data;\\n        } else {\\n            callData = abi.encodePacked(\\n                bytes4(keccak256(bytes(signature))),\\n                data\\n            );\\n        }\\n\\n        // Execute the call\\n        (bool success, ) = target.call{value: ethValue}(callData);\\n\\n        require(success, \\\"ExecuteTransaction failed\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/peripherals/interfaces/IHandlerTarget.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IHandlerTarget {\\n    function isHandler(address _account) external returns (bool);\\n\\n    function setHandler(address _handler, bool _isActive) external;\\n}\\n\"\r\n    },\r\n    \"contracts/peripherals/interfaces/ITimelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../../access/interfaces/IAdmin.sol\\\";\\n\\ninterface ITimelock is IAdmin {\\n    function marginFeeBasisPoints() external view returns (uint256);\\n\\n    function enableLeverage(address _vault) external;\\n\\n    function disableLeverage(address _vault) external;\\n\\n    function setIsLeverageEnabled(address _vault, bool _isLeverageEnabled)\\n        external;\\n\\n    function signalSetGov(address _target, address _gov) external;\\n}\\n\"\r\n    },\r\n    \"contracts/peripherals/interfaces/ITimelockTarget.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface ITimelockTarget {\\n    function transferOwnership(address _gov) external;\\n\\n    function withdrawToken(\\n        address _token,\\n        address _account,\\n        uint256 _amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/referrals/interfaces/IReferralStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IReferralStorage {\\n    function codeOwners(bytes32 _code) external view returns (address);\\n\\n    function traderReferralCodes(address _account)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function referrerDiscountShares(address _account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function referrerTiers(address _account) external view returns (uint256);\\n\\n    function getTraderReferralInfo(address _account)\\n        external\\n        view\\n        returns (bytes32, address);\\n\\n    function setTraderReferralCode(address _account, bytes32 _code) external;\\n\\n    function setTier(\\n        uint256 _tierId,\\n        uint256 _totalRebate,\\n        uint256 _discountShare\\n    ) external;\\n\\n    function setReferrerTier(address _referrer, uint256 _tierId) external;\\n\\n    function govSetCodeOwner(bytes32 _code, address _newAccount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/staking/interfaces/IRewardRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IRewardRouter {\\n    function feePlpTracker() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/interfaces/IBaseToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IBaseToken {\\n    function removeAdmin(address _account) external;\\n\\n    function setInPrivateTransferMode(bool _inPrivateTransferMode) external;\\n\\n    function withdrawToken(\\n        address _token,\\n        address _account,\\n        uint256 _amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/interfaces/IMintable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IMintable {\\n    function isMinter(address _account) external returns (bool);\\n\\n    function setMinter(address _minter, bool _isActive) external;\\n\\n    function mint(address _account, uint256 _amount) external;\\n\\n    function burn(address _account, uint256 _amount) external;\\n}\\n\"\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_buffer\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mintReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_plpManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marginFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMarginFeeBasisPoints\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"ClearAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"SignalApprove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"SignalMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"SignalPendingAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gov\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"SignalSetGov\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"SignalSetHandler\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"SignalSetPriceFeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"SignalTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenDecimals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minProfitBps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isStable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isShortable\",\"type\":\"bool\"}],\"name\":\"SignalVaultSetTokenConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"action\",\"type\":\"bytes32\"}],\"name\":\"SignalWithdrawToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BUFFER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FUNDING_RATE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LEVERAGE_VALIDATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"batchWithdrawFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_action\",\"type\":\"bytes32\"}],\"name\":\"cancelAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"disableLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"enableLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethValue\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralStorage\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_code\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newAccount\",\"type\":\"address\"}],\"name\":\"govSetCodeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initPlpManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initRewardRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isHandler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marginFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMarginFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingActions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plpManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"processMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buffer\",\"type\":\"uint256\"}],\"name\":\"setBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setContractHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setExternalAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_taxBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintBurnFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marginFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationFeeUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minProfitTime\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fundingInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundingRateFactor\",\"type\":\"uint256\"}],\"name\":\"setFundingRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_inPrivateTransferMode\",\"type\":\"bool\"}],\"name\":\"setInPrivateTransferMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isLeverageEnabled\",\"type\":\"bool\"}],\"name\":\"setIsLeverageEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setLiquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marginFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxMarginFeeBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setMarginFeeBasisPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxGasPrice\",\"type\":\"uint256\"}],\"name\":\"setMaxGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_longAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shortAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxGlobalSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxLeverage\",\"type\":\"uint256\"}],\"name\":\"setMaxLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxUsdpAmounts\",\"type\":\"uint256\"}],\"name\":\"setMaxUsdpAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cooldownDuration\",\"type\":\"uint256\"}],\"name\":\"setPlpCooldownDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralStorage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"}],\"name\":\"setReferrerTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shortsTrackerAveragePriceWeight\",\"type\":\"uint256\"}],\"name\":\"setShortsTrackerAveragePriceWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldToggleIsLeverageEnabled\",\"type\":\"bool\"}],\"name\":\"setShouldToggleIsLeverageEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_taxBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintBurnFeeBasisPoints\",\"type\":\"uint256\"}],\"name\":\"setSwapFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralStorage\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tierId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalRebate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_discountShare\",\"type\":\"uint256\"}],\"name\":\"setTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minProfitBps\",\"type\":\"uint256\"}],\"name\":\"setTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newManager\",\"type\":\"address\"}],\"name\":\"setTokenManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_usdpAmount\",\"type\":\"uint256\"}],\"name\":\"setUsdpAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldToggleIsLeverageEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"signalApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"signalMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"signalSetGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_handler\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"signalSetHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"signalSetPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethValue\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"signalTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minProfitBps\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isStable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isShortable\",\"type\":\"bool\"}],\"name\":\"signalVaultSetTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"signalWithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minProfitBps\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isStable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isShortable\",\"type\":\"bool\"}],\"name\":\"vaultSetTokenConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Timelock", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000a237d6b4bdf35ba51b732577260154849b4eff200000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004a145abb55fd9658227b69faf21e7d04e33dcb8f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000af5cbf0741b4c95400000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000001f4", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}