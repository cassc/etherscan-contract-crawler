{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.10;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending NATIVE that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeTransferNative(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: NATIVE_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\ninterface IwNATIVE {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface AnyswapV1ERC20 {\r\n    function mint(address to, uint256 amount) external returns (bool);\r\n    function burn(address from, uint256 amount) external returns (bool);\r\n    function setMinter(address _auth) external;\r\n    function applyMinter() external;\r\n    function revokeMinter(address _auth) external;\r\n    function changeVault(address newVault) external returns (bool);\r\n    function depositVault(uint amount, address to) external returns (uint);\r\n    function withdrawVault(address from, uint amount, address to) external returns (uint);\r\n    function underlying() external view returns (address);\r\n    function deposit(uint amount, address to) external returns (uint);\r\n    function withdraw(uint amount, address to) external returns (uint);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length > 0;\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract AnyswapV6Router {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public constant factory = address(0);\r\n    address public immutable wNATIVE;\r\n\r\n    // delay for timelock functions\r\n    uint public constant DELAY = 2 days;\r\n\r\n    constructor(address _wNATIVE, address _mpc) {\r\n        _newMPC = _mpc;\r\n        _newMPCEffectiveTime = block.timestamp;\r\n        wNATIVE = _wNATIVE;\r\n    }\r\n\r\n    receive() external payable {\r\n        assert(msg.sender == wNATIVE); // only accept Native via fallback from the wNative contract\r\n    }\r\n\r\n    address private _oldMPC;\r\n    address private _newMPC;\r\n    uint256 private _newMPCEffectiveTime;\r\n\r\n    event LogChangeMPC(address indexed oldMPC, address indexed newMPC, uint indexed effectiveTime, uint chainID);\r\n    event LogAnySwapIn(bytes32 indexed txhash, address indexed token, address indexed to, uint amount, uint fromChainID, uint toChainID);\r\n    event LogAnySwapOut(address indexed token, address indexed from, address indexed to, uint amount, uint fromChainID, uint toChainID);\r\n    event LogAnySwapOut(address indexed token, address indexed from, string to, uint amount, uint fromChainID, uint toChainID);\r\n\r\n    modifier onlyMPC() {\r\n        require(msg.sender == mpc(), \"AnyswapV6Router: FORBIDDEN\");\r\n        _;\r\n    }\r\n\r\n    function mpc() public view returns (address) {\r\n        if (block.timestamp >= _newMPCEffectiveTime) {\r\n            return _newMPC;\r\n        }\r\n        return _oldMPC;\r\n    }\r\n\r\n    function cID() public view returns (uint) {\r\n        return block.chainid;\r\n    }\r\n\r\n    function changeMPC(address newMPC) external onlyMPC returns (bool) {\r\n        require(newMPC != address(0), \"AnyswapV6Router: address(0)\");\r\n        _oldMPC = mpc();\r\n        _newMPC = newMPC;\r\n        _newMPCEffectiveTime = block.timestamp + DELAY;\r\n        emit LogChangeMPC(_oldMPC, _newMPC, _newMPCEffectiveTime, cID());\r\n        return true;\r\n    }\r\n\r\n    function changeVault(address token, address newVault) external onlyMPC returns (bool) {\r\n        return AnyswapV1ERC20(token).changeVault(newVault);\r\n    }\r\n\r\n    function setMinter(address token, address _auth) external onlyMPC {\r\n        return AnyswapV1ERC20(token).setMinter(_auth);\r\n    }\r\n\r\n    function applyMinter(address token) external onlyMPC {\r\n        return AnyswapV1ERC20(token).applyMinter();\r\n    }\r\n\r\n    function revokeMinter(address token, address _auth) external onlyMPC {\r\n        return AnyswapV1ERC20(token).revokeMinter(_auth);\r\n    }\r\n\r\n    function _anySwapOut(address from, address token, address to, uint amount, uint toChainID) internal {\r\n        AnyswapV1ERC20(token).burn(from, amount);\r\n        emit LogAnySwapOut(token, from, to, amount, cID(), toChainID);\r\n    }\r\n\r\n    // Swaps `amount` `token` from this chain to `toChainID` chain with recipient `to`\r\n    function anySwapOut(address token, address to, uint amount, uint toChainID) external {\r\n        _anySwapOut(msg.sender, token, to, amount, toChainID);\r\n    }\r\n\r\n    // Swaps `amount` `token` from this chain to `toChainID` chain with recipient `to` by minting with `underlying`\r\n    function anySwapOutUnderlying(address token, address to, uint amount, uint toChainID) external {\r\n        address _underlying = AnyswapV1ERC20(token).underlying();\r\n        require(_underlying != address(0), \"AnyswapV6Router: no underlying\");\r\n        IERC20(_underlying).safeTransferFrom(msg.sender, token, amount);\r\n        emit LogAnySwapOut(token, msg.sender, to, amount, cID(), toChainID);\r\n    }\r\n\r\n    function anySwapOutNative(address token, address to, uint toChainID) external payable {\r\n        require(wNATIVE != address(0), \"AnyswapV6Router: zero wNATIVE\");\r\n        require(AnyswapV1ERC20(token).underlying() == wNATIVE, \"AnyswapV6Router: underlying is not wNATIVE\");\r\n        IwNATIVE(wNATIVE).deposit{value: msg.value}();\r\n        assert(IwNATIVE(wNATIVE).transfer(token, msg.value));\r\n        emit LogAnySwapOut(token, msg.sender, to, msg.value, cID(), toChainID);\r\n    }\r\n\r\n    function anySwapOut(address[] calldata tokens, address[] calldata to, uint[] calldata amounts, uint[] calldata toChainIDs) external {\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            _anySwapOut(msg.sender, tokens[i], to[i], amounts[i], toChainIDs[i]);\r\n        }\r\n    }\r\n\r\n    function anySwapOut(address token, string memory to, uint amount, uint toChainID) external {\r\n        AnyswapV1ERC20(token).burn(msg.sender, amount);\r\n        emit LogAnySwapOut(token, msg.sender, to, amount, cID(), toChainID);\r\n    }\r\n\r\n    function anySwapOutUnderlying(address token, string memory to, uint amount, uint toChainID) external {\r\n        address _underlying = AnyswapV1ERC20(token).underlying();\r\n        require(_underlying != address(0), \"AnyswapV6Router: no underlying\");\r\n        IERC20(_underlying).safeTransferFrom(msg.sender, token, amount);\r\n        emit LogAnySwapOut(token, msg.sender, to, amount, cID(), toChainID);\r\n    }\r\n\r\n    function anySwapOutNative(address token, string memory to, uint toChainID) external payable {\r\n        require(wNATIVE != address(0), \"AnyswapV6Router: zero wNATIVE\");\r\n        require(AnyswapV1ERC20(token).underlying() == wNATIVE, \"AnyswapV6Router: underlying is not wNATIVE\");\r\n        IwNATIVE(wNATIVE).deposit{value: msg.value}();\r\n        assert(IwNATIVE(wNATIVE).transfer(token, msg.value));\r\n        emit LogAnySwapOut(token, msg.sender, to, msg.value, cID(), toChainID);\r\n    }\r\n\r\n    // swaps `amount` `token` in `fromChainID` to `to` on this chainID\r\n    function _anySwapIn(bytes32 txs, address token, address to, uint amount, uint fromChainID) internal {\r\n        AnyswapV1ERC20(token).mint(to, amount);\r\n        emit LogAnySwapIn(txs, token, to, amount, fromChainID, cID());\r\n    }\r\n\r\n    // swaps `amount` `token` in `fromChainID` to `to` on this chainID\r\n    // triggered by `anySwapOut`\r\n    function anySwapIn(bytes32 txs, address token, address to, uint amount, uint fromChainID) external onlyMPC {\r\n        _anySwapIn(txs, token, to, amount, fromChainID);\r\n    }\r\n\r\n    // swaps `amount` `token` in `fromChainID` to `to` on this chainID with `to` receiving `underlying`\r\n    function anySwapInUnderlying(bytes32 txs, address token, address to, uint amount, uint fromChainID) external onlyMPC {\r\n        _anySwapIn(txs, token, to, amount, fromChainID);\r\n        AnyswapV1ERC20(token).withdrawVault(to, amount, to);\r\n    }\r\n\r\n    // swaps `amount` `token` in `fromChainID` to `to` on this chainID with `to` receiving `underlying` if possible\r\n    function anySwapInAuto(bytes32 txs, address token, address to, uint amount, uint fromChainID) external onlyMPC {\r\n        _anySwapIn(txs, token, to, amount, fromChainID);\r\n        AnyswapV1ERC20 _anyToken = AnyswapV1ERC20(token);\r\n        address _underlying = _anyToken.underlying();\r\n        if (_underlying != address(0) && IERC20(_underlying).balanceOf(token) >= amount) {\r\n            if (_underlying == wNATIVE) {\r\n                _anyToken.withdrawVault(to, amount, address(this));\r\n                IwNATIVE(wNATIVE).withdraw(amount);\r\n                TransferHelper.safeTransferNative(to, amount);\r\n            } else {\r\n                _anyToken.withdrawVault(to, amount, to);\r\n            }\r\n        }\r\n    }\r\n\r\n    function depositNative(address token, address to) external payable returns (uint) {\r\n        require(wNATIVE != address(0), \"AnyswapV6Router: zero wNATIVE\");\r\n        require(AnyswapV1ERC20(token).underlying() == wNATIVE, \"AnyswapV6Router: underlying is not wNATIVE\");\r\n        IwNATIVE(wNATIVE).deposit{value: msg.value}();\r\n        assert(IwNATIVE(wNATIVE).transfer(token, msg.value));\r\n        AnyswapV1ERC20(token).depositVault(msg.value, to);\r\n        return msg.value;\r\n    }\r\n\r\n    function withdrawNative(address token, uint amount, address to) external returns (uint) {\r\n        require(wNATIVE != address(0), \"AnyswapV6Router: zero wNATIVE\");\r\n        require(AnyswapV1ERC20(token).underlying() == wNATIVE, \"AnyswapV6Router: underlying is not wNATIVE\");\r\n\r\n        uint256 old_balance = IERC20(wNATIVE).balanceOf(address(this));\r\n        AnyswapV1ERC20(token).withdrawVault(msg.sender, amount, address(this));\r\n        uint256 new_balance = IERC20(wNATIVE).balanceOf(address(this));\r\n        assert(new_balance == old_balance + amount);\r\n\r\n        IwNATIVE(wNATIVE).withdraw(amount);\r\n        TransferHelper.safeTransferNative(to, amount);\r\n        return amount;\r\n    }\r\n\r\n    // extracts mpc fee from bridge fees\r\n    function anySwapFeeTo(address token, uint amount) external onlyMPC {\r\n        address _mpc = mpc();\r\n        AnyswapV1ERC20(token).mint(_mpc, amount);\r\n        AnyswapV1ERC20(token).withdrawVault(_mpc, amount, _mpc);\r\n    }\r\n\r\n    function anySwapIn(bytes32[] calldata txs, address[] calldata tokens, address[] calldata to, uint256[] calldata amounts, uint[] calldata fromChainIDs) external onlyMPC {\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            _anySwapIn(txs[i], tokens[i], to[i], amounts[i], fromChainIDs[i]);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wNATIVE\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mpc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txhash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"LogAnySwapIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"LogAnySwapOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"LogAnySwapOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMPC\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMPC\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"effectiveTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"LogChangeMPC\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"anySwapFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"txs\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fromChainIDs\",\"type\":\"uint256[]\"}],\"name\":\"anySwapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txs\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txs\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapInAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txs\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapInUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"toChainIDs\",\"type\":\"uint256[]\"}],\"name\":\"anySwapOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapOutNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapOutNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapOutUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainID\",\"type\":\"uint256\"}],\"name\":\"anySwapOutUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"applyMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMPC\",\"type\":\"address\"}],\"name\":\"changeMPC\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"changeVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"depositNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mpc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_auth\",\"type\":\"address\"}],\"name\":\"revokeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_auth\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wNATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawNative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AnyswapV6Router", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000002f3688b4f4867cfd93cc5460339d1cb44032e853", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://03170e49815ac6dcf1a7675701425aab699d23ef902e6088f3f4f7a925baa36c"}