{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Presale.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface AggregatorV3Interface {\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function description() external view returns (string memory);\\r\\n\\r\\n    function version() external view returns (uint256);\\r\\n\\r\\n    function getRoundData(\\r\\n        uint80 _roundId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint80 roundId,\\r\\n            int256 answer,\\r\\n            uint256 startedAt,\\r\\n            uint256 updatedAt,\\r\\n            uint80 answeredInRound\\r\\n        );\\r\\n\\r\\n    function latestRoundData()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint80 roundId,\\r\\n            int256 answer,\\r\\n            uint256 startedAt,\\r\\n            uint256 updatedAt,\\r\\n            uint80 answeredInRound\\r\\n        );\\r\\n}\\r\\n\\r\\ncontract Presale {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    IERC20 public BTC20X;\\r\\n    IERC20 public USDT;\\r\\n\\r\\n    AggregatorV3Interface public priceFeedETH;\\r\\n\\r\\n    uint256 public totalBuyer;\\r\\n\\r\\n    address payable public owner;\\r\\n\\r\\n    uint256 public referrerPercentage;\\r\\n    uint256 public airDropRefPercentage;\\r\\n    uint256 public percentageDivider;\\r\\n    uint256 public tokenPerUsd;\\r\\n    uint256 public airDropAmount;\\r\\n    uint256 public minAmount;\\r\\n    uint256 public maxAmount;\\r\\n    uint256 public presaleTime;\\r\\n    uint256 public soldToken;\\r\\n    uint256 public tokenHardCap;\\r\\n    uint256 public UsdtHardCap;\\r\\n    uint256 public amountRaised;\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 claimAbleAmount;\\r\\n        address referrer;\\r\\n        uint256 referrerReward;\\r\\n        bool claimedAirdrop;\\r\\n        bool isExists;\\r\\n    }\\r\\n\\r\\n    mapping(address => UserInfo) users;\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Presale: Not an owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event BuyToken(address _user, uint256 _amount);\\r\\n\\r\\n    constructor(address BTC20X_, address USDT_, address priceFeed_) {\\r\\n        owner = payable(msg.sender);\\r\\n        BTC20X = IERC20(BTC20X_);\\r\\n        USDT = IERC20(USDT_);\\r\\n        priceFeedETH = AggregatorV3Interface(priceFeed_);\\r\\n        referrerPercentage = 10_00;\\r\\n        airDropRefPercentage = 0;\\r\\n        percentageDivider = 100_00;\\r\\n        airDropAmount = 0;\\r\\n        tokenPerUsd = 1;\\r\\n        UsdtHardCap = type(uint256).max;\\r\\n        tokenHardCap = type(uint256).max;\\r\\n        minAmount = 0;\\r\\n        maxAmount = type(uint256).max;\\r\\n        presaleTime = type(uint256).max;\\r\\n    }\\r\\n\\r\\n    function buyToken(uint256 _amount, address _referrer) public {\\r\\n        UserInfo storage user = users[msg.sender];\\r\\n        setReferrer(msg.sender, _referrer, _amount, true);\\r\\n        uint256 numberOfTokens = usdtToToken(_amount);\\r\\n\\r\\n        require(\\r\\n            numberOfTokens >= minAmount && numberOfTokens <= maxAmount,\\r\\n            \\\"Presale: Amount not correct\\\"\\r\\n        );\\r\\n        require(\\r\\n            numberOfTokens + soldToken <= tokenHardCap &&\\r\\n                _amount + amountRaised <= UsdtHardCap,\\r\\n            \\\"Exceeding HardCap\\\"\\r\\n        );\\r\\n        require(block.timestamp < presaleTime, \\\"Presale: Presale over\\\");\\r\\n        if (!user.isExists) {\\r\\n            user.isExists = true;\\r\\n            totalBuyer++;\\r\\n        }\\r\\n        USDT.transferFrom(msg.sender, address(this), _amount);\\r\\n        amountRaised += _amount;\\r\\n        user.claimAbleAmount += numberOfTokens;\\r\\n        soldToken = soldToken.add(numberOfTokens);\\r\\n        emit BuyToken(msg.sender, usdtToToken(_amount));\\r\\n    }\\r\\n\\r\\n    // to buy BTC20X during presale time\\r\\n    function buyWithETH(address _referrer) public payable {\\r\\n        UserInfo storage user = users[msg.sender];\\r\\n        setReferrer(msg.sender, _referrer, msg.value, false);\\r\\n        uint256 numberOfTokens = ethToToken(msg.value);\\r\\n\\r\\n        require(\\r\\n            numberOfTokens >= minAmount && numberOfTokens <= maxAmount,\\r\\n            \\\"Presale: Amount not correct\\\"\\r\\n        );\\r\\n        require(\\r\\n            numberOfTokens + soldToken <= tokenHardCap &&\\r\\n                ethToUsdt(msg.value) + amountRaised <= UsdtHardCap,\\r\\n            \\\"Exceeding HardCap\\\"\\r\\n        );\\r\\n        require(block.timestamp < presaleTime, \\\"Presale: Presale over\\\");\\r\\n        if (!user.isExists) {\\r\\n            user.isExists = true;\\r\\n            totalBuyer++;\\r\\n        }\\r\\n        amountRaised += ethToUsdt(msg.value);\\r\\n        user.claimAbleAmount += numberOfTokens;\\r\\n        soldToken = soldToken.add(numberOfTokens);\\r\\n        emit BuyToken(msg.sender, ethToToken(msg.value));\\r\\n    }\\r\\n\\r\\n    // to check number of BTC20X for given ETH\\r\\n    function ethToToken(uint256 _amount) public view returns (uint256) {\\r\\n        uint256 numberOfTokens = _amount\\r\\n            .mul(getLatestPriceETH())\\r\\n            .mul(tokenPerUsd)\\r\\n            .div(1e8);\\r\\n        return numberOfTokens;\\r\\n    }\\r\\n\\r\\n    // to get real time price of ETH\\r\\n    function getLatestPriceETH() public view returns (uint256) {\\r\\n        (, int256 price, , , ) = priceFeedETH.latestRoundData();\\r\\n        return uint256(price);\\r\\n    }\\r\\n\\r\\n    function ethToUsdt(uint256 _value) public view returns (uint256) {\\r\\n        uint256 numberOfUSDT = _value.mul(getLatestPriceETH()).div(1e8);\\r\\n        return numberOfUSDT;\\r\\n    }\\r\\n\\r\\n    function claim() public {\\r\\n        UserInfo storage user = users[msg.sender];\\r\\n        require(user.isExists, \\\"Didn't bought\\\");\\r\\n        require(block.timestamp >= presaleTime, \\\"Wait for the Presale endtime\\\");\\r\\n        require(\\r\\n            user.referrerReward > 0 || user.claimAbleAmount > 0,\\r\\n            \\\"Amount Already claimed\\\"\\r\\n        );\\r\\n        if (user.referrerReward > 0) {\\r\\n            BTC20X.transferFrom(owner, msg.sender, user.referrerReward);\\r\\n        }\\r\\n        if (user.claimAbleAmount > 0) {\\r\\n            BTC20X.transferFrom(owner, msg.sender, user.claimAbleAmount);\\r\\n        }\\r\\n        user.claimAbleAmount = 0;\\r\\n        user.referrerReward = 0;\\r\\n    }\\r\\n\\r\\n    function setReferrer(\\r\\n        address _user,\\r\\n        address _referrer,\\r\\n        uint256 _amount,\\r\\n        bool _val\\r\\n    ) internal {\\r\\n        UserInfo storage user = users[_user];\\r\\n        if (user.referrer == address(0)) {\\r\\n            if (\\r\\n                _referrer != _user &&\\r\\n                users[_referrer].isExists &&\\r\\n                msg.sender != users[_referrer].referrer\\r\\n            ) {\\r\\n                user.referrer = _referrer;\\r\\n            } else {\\r\\n                user.referrer = address(0);\\r\\n            }\\r\\n        }\\r\\n        if (user.referrer != address(0)) {\\r\\n            if (_val) {\\r\\n                users[user.referrer].referrerReward += usdtToToken(\\r\\n                    (_amount * referrerPercentage) / percentageDivider\\r\\n                );\\r\\n            } else {\\r\\n                users[user.referrer].referrerReward +=\\r\\n                    (ethToToken(_amount) * referrerPercentage) /\\r\\n                    percentageDivider;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function usdtToToken(uint256 _amount) public view returns (uint256) {\\r\\n        uint256 numberOfTokens = _amount.mul(tokenPerUsd).div(\\r\\n            10 ** USDT.decimals()\\r\\n        );\\r\\n        return numberOfTokens.mul(10 ** BTC20X.decimals());\\r\\n    }\\r\\n\\r\\n    function airDrop() external {\\r\\n        UserInfo storage user = users[msg.sender];\\r\\n        require(user.isExists, \\\"No Existence Found!\\\");\\r\\n        require(!user.claimedAirdrop, \\\"Already claimed\\\");\\r\\n        IERC20(BTC20X).transferFrom(owner, msg.sender, airDropAmount);\\r\\n        if (user.referrer != address(0)) {\\r\\n            IERC20(BTC20X).transferFrom(\\r\\n                owner,\\r\\n                user.referrer,\\r\\n                (airDropAmount * airDropRefPercentage) / percentageDivider\\r\\n            );\\r\\n        }\\r\\n        user.claimedAirdrop = true;\\r\\n    }\\r\\n\\r\\n    // to change Price of the BTC20X\\r\\n    function changePrice(uint256 _tokenPerUsd) external onlyOwner {\\r\\n        tokenPerUsd = _tokenPerUsd;\\r\\n    }\\r\\n\\r\\n    function changeAirDropAmount(uint256 _amount) external onlyOwner {\\r\\n        airDropAmount = _amount * (10 ** BTC20X.decimals());\\r\\n    }\\r\\n\\r\\n    function setPresaleAmount(\\r\\n        uint256 _minAmount,\\r\\n        uint256 _maxAmount\\r\\n    ) external onlyOwner {\\r\\n        minAmount = _minAmount;\\r\\n        maxAmount = _maxAmount;\\r\\n    }\\r\\n\\r\\n    function setPresaleTime(uint256 _time) external onlyOwner {\\r\\n        presaleTime = _time;\\r\\n    }\\r\\n\\r\\n    // transfer ownership\\r\\n    function changeOwner(address payable _newOwner) external onlyOwner {\\r\\n        owner = _newOwner;\\r\\n    }\\r\\n\\r\\n    // to draw funds for liquidity\\r\\n    function transferFunds(uint256 _value) external onlyOwner returns (bool) {\\r\\n        owner.transfer(_value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferUSDTFunds(\\r\\n        uint256 _value\\r\\n    ) external onlyOwner returns (bool) {\\r\\n        USDT.transfer(owner, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferStuckFunds(\\r\\n        uint256 _value\\r\\n    ) external onlyOwner returns (bool) {\\r\\n        BTC20X.transfer(owner, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function changeAddresses(\\r\\n        address _usdt,\\r\\n        address _btc20x,\\r\\n        address _aggregator\\r\\n    ) public onlyOwner {\\r\\n        USDT = IERC20(_usdt);\\r\\n        BTC20X = IERC20(_btc20x);\\r\\n        priceFeedETH = AggregatorV3Interface(_aggregator);\\r\\n    }\\r\\n\\r\\n    function totalSupply() external view returns (uint256) {\\r\\n        return BTC20X.totalSupply();\\r\\n    }\\r\\n\\r\\n    function getCurrentTime() public view returns (uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    function contractBalanceETH() external view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function getContractTokenBalance() external view returns (uint256) {\\r\\n        return BTC20X.allowance(owner, address(this));\\r\\n    }\\r\\n\\r\\n    function getUserInfo(\\r\\n        address _user\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _claimAbleAmount,\\r\\n            address _referrer,\\r\\n            uint256 _referrerReward,\\r\\n            bool _claimedAirdrop,\\r\\n            bool _isExists\\r\\n        )\\r\\n    {\\r\\n        UserInfo storage user = users[_user];\\r\\n        _claimAbleAmount = user.claimAbleAmount;\\r\\n        _referrer = user.referrer;\\r\\n        _referrerReward = user.referrerReward;\\r\\n        _claimedAirdrop = user.claimedAirdrop;\\r\\n        _isExists = user.isExists;\\r\\n    }\\r\\n\\r\\n    function setReferrerPercentage(\\r\\n        uint256 _airDropRefPercentage,\\r\\n        uint256 _referrerPercentage\\r\\n    ) public onlyOwner {\\r\\n        airDropRefPercentage = _airDropRefPercentage;\\r\\n        referrerPercentage = _referrerPercentage;\\r\\n    }\\r\\n\\r\\n    function setNewRound(\\r\\n        uint256 _tokenPerUsd,\\r\\n        uint256 _presaleTime,\\r\\n        uint256 _soldToken,\\r\\n        uint256 _tokenHardCap,\\r\\n        uint256 _UsdtHardCap,\\r\\n        uint256 _amountRaised\\r\\n    ) public onlyOwner {\\r\\n        tokenPerUsd = _tokenPerUsd;\\r\\n        presaleTime = _presaleTime;\\r\\n        soldToken = _soldToken;\\r\\n        tokenHardCap = _tokenHardCap;\\r\\n        UsdtHardCap = _UsdtHardCap;\\r\\n        amountRaised = _amountRaised;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"BTC20X_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"USDT_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeed_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BTC20X\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UsdtHardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airDropAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airDropRefPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"buyWithETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_btc20x\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"changeAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"changeAirDropAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPerUsd\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalanceETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ethToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"ethToUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimAbleAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referrerReward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_claimedAirdrop\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isExists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedETH\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrerPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPerUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_presaleTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_soldToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenHardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_UsdtHardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountRaised\",\"type\":\"uint256\"}],\"name\":\"setNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"}],\"name\":\"setPresaleAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setPresaleTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_airDropRefPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referrerPercentage\",\"type\":\"uint256\"}],\"name\":\"setReferrerPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenHardCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPerUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferStuckFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferUSDTFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"usdtToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Presale", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "0000000000000000000000008ec27b158e756aee1444c3031c1f95a3569b089a00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000c5a35fc58efdc4b88ddca51acacd2e8f593504be", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}