{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n *    SSSSSSSSSSSSSSS    SSSSSSSSSSSSSSS BBBBBBBBBBBBBBBBB   \r\n *  SS:::::::::::::::S SS:::::::::::::::SB::::::::::::::::B  \r\n * S:::::SSSSSS::::::SS:::::SSSSSS::::::SB::::::BBBBBB:::::B \r\n * S:::::S     SSSSSSSS:::::S     SSSSSSSBB:::::B     B:::::B\r\n * S:::::S            S:::::S              B::::B     B:::::B\r\n * S:::::S            S:::::S              B::::B     B:::::B\r\n *  S::::SSSS          S::::SSSS           B::::BBBBBB:::::B \r\n *   SS::::::SSSSS      SS::::::SSSSS      B:::::::::::::BB  \r\n *     SSS::::::::SS      SSS::::::::SS    B::::BBBBBB:::::B \r\n *        SSSSSS::::S        SSSSSS::::S   B::::B     B:::::B\r\n *             S:::::S            S:::::S  B::::B     B:::::B\r\n *             S:::::S            S:::::S  B::::B     B:::::B\r\n * SSSSSSS     S:::::SSSSSSSS     S:::::SBB:::::BBBBBB::::::B\r\n * S::::::SSSSSS:::::SS::::::SSSSSS:::::SB:::::::::::::::::B \r\n * S:::::::::::::::SS S:::::::::::::::SS B::::::::::::::::B  \r\n *  SSSSSSSSSSSSSSS    SSSSSSSSSSSSSSS   BBBBBBBBBBBBBBBBB\r\n *  \r\n * \r\n * https://www.ssbtoken.com/\r\n * https://t.me/SSBTokenOfficial\r\n *\r\n */\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUNIFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUNIRouter {\r\n    function factory() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n}\r\n\r\nabstract contract Auth {\r\n    address owner;\r\n    mapping (address => bool) private authorizations;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n        authorizations[_owner] = true;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender)); _;\r\n    }\r\n\r\n    modifier authorized() {\r\n        require(isAuthorized(msg.sender)); _;\r\n    }\r\n\r\n    function authorize(address adr) public onlyOwner {\r\n        authorizations[adr] = true;\r\n        emit Authorized(adr);\r\n    }\r\n\r\n    function unauthorize(address adr) public onlyOwner {\r\n        authorizations[adr] = false;\r\n        emit Unauthorized(adr);\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function isAuthorized(address adr) public view returns (bool) {\r\n        return authorizations[adr];\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        address oldOwner = owner;\r\n        owner = newOwner;\r\n        authorizations[oldOwner] = false;\r\n        authorizations[newOwner] = true;\r\n        emit Unauthorized(oldOwner);\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    event OwnershipTransferred(address oldOwner, address newOwner);\r\n    event Authorized(address adr);\r\n    event Unauthorized(address adr);\r\n}\r\n\r\ninterface IBuyFeeOracle {\r\n    function getScale(uint256 denominator) external returns (uint256 scale);\r\n}\r\n\r\ninterface IBurnLottery {\r\n    function onBurn(address from, uint256 amount) external;\r\n}\r\n\r\ninterface IAntiSnipe {\r\n    function initialize(address liquidityPair) external;\r\n    function protect(address from, address to, uint256 amount) external returns (bool shouldProtect);\r\n}\r\n\r\ncontract SSB is Auth, IBEP20 {\r\n    uint256 constant UINT_MAX = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\r\n    address constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    string constant _name = \"SatoshiStreetBets Token\";\r\n    string constant _symbol = \"SSB\";\r\n    uint8 constant _decimals = 9;\r\n    \r\n    IAntiSnipe public protection;\r\n    mapping (address => bool) protect;\r\n    bool public protectionEnabled = true;\r\n    uint256 constant protectionLength = 20;\r\n    \r\n    IBuyFeeOracle oracle;\r\n    IBurnLottery lottery;\r\n    \r\n    mapping (address => uint256) _rOwned;\r\n    mapping (address => uint256) _tOwned;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    mapping (address => bool) public _isExcludedFromFee;\r\n    mapping (address => bool) public _isExcludedFromTxLimit;\r\n\r\n    uint256 _tTotal = 1000000000000000 * (10**_decimals);\r\n    uint256 _rTotal = (UINT_MAX - (UINT_MAX % _tTotal));\r\n    uint256 _tFeeTotal;\r\n\r\n    uint256 public _reflectFee = 200;\r\n    uint256 public _taxFee = 1000;\r\n    uint256 public _feeDenominator = 10000;\r\n    uint256 _previousReflectFee = _reflectFee;\r\n    uint256 _previousTaxFee = _taxFee;\r\n    uint256 _previousDenominator = _feeDenominator;\r\n\r\n    uint256 public _buybackSplit = 600;\r\n    uint256 public _communitySplit = 300;\r\n    uint256 public _devSplit = 25;\r\n    uint256 public _marketingSplit = 75;\r\n    address payable public _communityFeeReceiver;\r\n    address payable public _devFeeReceiver;\r\n    address payable public _marketingFeeReceiver;\r\n\r\n    uint256 buybackMultiplierNumerator = 25;\r\n    uint256 buybackMultiplierDenominator = 10;\r\n    uint256 buybackMultiplierTriggeredAt;\r\n    uint256 buybackMultiplierLength = 30 minutes;\r\n    \r\n    IUNIRouter router;\r\n    address public pair;\r\n    uint256 public launchBlock;\r\n\r\n    uint256 public _maxTxAmount = _tTotal / 2000;\r\n    uint256 public swapBackAmount = _tTotal / 5000;\r\n    bool public swapBackEnabled = true;\r\n\r\n    bool swapping;\r\n    modifier swapBack {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n    \r\n    receive() external payable { }\r\n\r\n    constructor (address payable _community, address payable _dev, address payable _marketing) Auth(msg.sender) {\r\n        _communityFeeReceiver = _community;\r\n        _devFeeReceiver = _dev;\r\n        _marketingFeeReceiver = _marketing;\r\n        \r\n        _rOwned[owner] = _rTotal;\r\n\r\n        router = IUNIRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        pair = IUNIFactory(router.factory()).createPair(address(this), WBNB);\r\n\r\n        _isExcludedFromFee[owner] = true;\r\n        _isExcludedFromTxLimit[owner] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        emit Transfer(address(0), owner, _tTotal);\r\n    }\r\n\r\n    function name() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n    \r\n    function getOwner() external view override returns (address) {\r\n        return owner;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if(account == pair) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function totalFees() external view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        require(_allowances[sender][msg.sender] >= amount, \"Insufficient Allowance\");\r\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        _transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,,) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,,) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    function _reflect(uint256 rFee, uint256 tReflect) private {\r\n        _rTotal = _rTotal - rFee;\r\n        _tFeeTotal = _tFeeTotal + tReflect;\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tReflect, uint256 tTax) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tReflect, tTax, _getRate());\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tReflect, tTax);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\r\n        (uint256 tReflect, uint256 tTax) = calculateFees(tAmount);\r\n        uint256 tTransferAmount = tAmount - tReflect - tTax;\r\n        return (tTransferAmount, tReflect, tTax);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tReflect, uint256 tTax, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount * currentRate;\r\n        uint256 rFee = tReflect * currentRate;\r\n        uint256 rTax = tTax * currentRate;\r\n        uint256 rTransferAmount = rAmount - rFee - rTax;\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n    \r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (_rOwned[pair] > rSupply || _tOwned[pair] > tSupply) return (_rTotal, _tTotal);\r\n        rSupply -= _rOwned[pair];\r\n        tSupply -= _tOwned[pair];\r\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _takeTax(uint256 tTax) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rTax = tTax * currentRate;\r\n        _rOwned[address(this)] = _rOwned[address(this)] + rTax;\r\n    }\r\n\r\n    function calculateFees(uint256 _amount) private view returns (uint256 tReflect, uint256 tTax) {\r\n        tReflect = _amount * _reflectFee / _feeDenominator;\r\n        tTax = _amount * _taxFee / _feeDenominator;\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        if(_reflectFee == 0 && _taxFee == 0) return;\r\n\r\n        _previousReflectFee = _reflectFee;\r\n        _previousTaxFee = _taxFee;\r\n        _previousDenominator = _feeDenominator;\r\n\r\n        _reflectFee = 0;\r\n        _taxFee = 0;\r\n    }\r\n    \r\n    function scaleBuyFee() private {\r\n        if(_reflectFee == 0 && _taxFee == 0) return;\r\n\r\n        _previousReflectFee = _reflectFee;\r\n        _previousTaxFee = _taxFee;\r\n        _previousDenominator = _feeDenominator;\r\n        \r\n        try oracle.getScale(_feeDenominator) returns (\r\n            uint256 scale\r\n        ) {\r\n            if(scale < _feeDenominator){\r\n                _reflectFee = scale * _reflectFee;\r\n                _taxFee = scale * _taxFee;\r\n                _feeDenominator = _feeDenominator * _feeDenominator;\r\n            }\r\n        } catch {}\r\n    }\r\n    \r\n    function scaleSellFee() private {\r\n        if(_reflectFee == 0 && _taxFee == 0) return;\r\n        \r\n        _previousReflectFee = _reflectFee;\r\n        _previousTaxFee = _taxFee;\r\n        _previousDenominator = _feeDenominator;\r\n        \r\n        (uint256 _reflection, uint256 _tax, uint256 _denominator) = getSellFees();\r\n        _reflectFee = _reflection;\r\n        _taxFee = _tax;\r\n        _feeDenominator = _denominator;\r\n    }\r\n    \r\n    function getSellFees() public view returns (uint256 _reflection, uint256 _tax, uint256 _denominator) {\r\n        if(buybackMultiplierTriggeredAt + buybackMultiplierLength <= block.timestamp)\r\n            return (_reflectFee, _taxFee, _feeDenominator);\r\n            \r\n        uint256 remainingTime = buybackMultiplierTriggeredAt + buybackMultiplierLength - block.timestamp;\r\n        \r\n        uint256 reflectionIncrease = (_reflectFee * buybackMultiplierNumerator / buybackMultiplierDenominator) - _reflectFee;\r\n        _reflection = _reflectFee + (reflectionIncrease * remainingTime / buybackMultiplierLength);\r\n        \r\n        uint256 taxIncrease = (_taxFee * buybackMultiplierNumerator / buybackMultiplierDenominator) - _taxFee;\r\n        _tax = _taxFee + (taxIncrease * remainingTime / buybackMultiplierLength);\r\n        \r\n        _denominator = _feeDenominator;\r\n    }\r\n\r\n    function restoreAllFee() private {\r\n        _reflectFee = _previousReflectFee;\r\n        _taxFee = _previousTaxFee;\r\n        _feeDenominator = _previousDenominator;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(amount <= _maxTxAmount || _isExcludedFromTxLimit[from] || _isExcludedFromTxLimit[to], \"Transfer amount exceeds the maxTxAmount.\");\r\n        require(launchBlock != 0 || from == owner || to == owner, \"Token not launched\");\r\n        \r\n        if(launchBlock == 0){\r\n            require(from == owner || to == owner, \"Token not launched\");\r\n            if(to == pair){\r\n                launchBlock = block.number;\r\n            }\r\n        }\r\n\r\n        if (\r\n            balanceOf(address(this)) >= swapBackAmount &&\r\n            !swapping &&\r\n            from != pair &&\r\n            swapBackEnabled\r\n        ) {\r\n            swapBackForFee(swapBackAmount);\r\n        }\r\n\r\n        bool takeFee = !(_isExcludedFromFee[from] || _isExcludedFromFee[to]);\r\n        bool scaleBuy = address(oracle) != address(0) && from == pair;\r\n        bool scaleSell = to == pair;\r\n        \r\n        if(!takeFee){\r\n            removeAllFee();\r\n        }else if(scaleBuy){\r\n            scaleBuyFee();\r\n        }else if(scaleSell){\r\n            scaleSellFee();\r\n        }\r\n\r\n        if(from == pair){\r\n            _transferFromExcluded(from, to, amount);\r\n        }else if(to == pair){\r\n            _transferToExcluded(from, to, amount);\r\n        }else{\r\n            _transferStandard(from, to, amount);\r\n        }\r\n\r\n        if(!takeFee || scaleBuy || scaleSell) restoreAllFee();\r\n            \r\n        _onTokenTransfer(from,to,amount);\r\n    }\r\n\r\n    function swapBackForFee(uint256 tokenAmount) private swapBack {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WBNB;\r\n\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        \r\n        uint256 amount = address(this).balance - balanceBefore;\r\n        \r\n        uint256 externalFeeSplit = _communitySplit + _devSplit + _marketingSplit;\r\n        if(externalFeeSplit > 0){\r\n            uint256 amountCommunity = _communitySplit * amount / (externalFeeSplit + _buybackSplit);\r\n            if(amountCommunity > 0)\r\n                _communityFeeReceiver.call{value: amountCommunity, gas: 35000}(\"\");\r\n                \r\n            uint256 amountDev = _devSplit * amount / (externalFeeSplit + _buybackSplit);\r\n            if(amountDev > 0)\r\n                _devFeeReceiver.call{value: amountDev, gas: 35000}(\"\");\r\n                \r\n            uint256 amountMarketing = _marketingSplit * amount / (externalFeeSplit + _buybackSplit);\r\n            if(amountMarketing > 0)\r\n                _marketingFeeReceiver.call{value: amountMarketing, gas: 35000}(\"\");\r\n        }\r\n    }\r\n    \r\n    function buyback(uint256 amount, bool triggerMultiplier, uint256 amountOutMin) external authorized swapBack {\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = address(this);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n            amountOutMin,\r\n            path,\r\n            DEAD,\r\n            block.timestamp\r\n        );\r\n        \r\n        if(triggerMultiplier){\r\n            buybackMultiplierTriggeredAt = block.timestamp;\r\n            emit BuybackMultiplierTriggered(buybackMultiplierLength);\r\n        }\r\n        \r\n        emit Buyback(amount, triggerMultiplier);\r\n    }\r\n    \r\n    function clearBuybackMultiplier() external authorized {\r\n        buybackMultiplierTriggeredAt = 0;\r\n        emit BuybackMultiplierCleared();\r\n    }\r\n\r\n    function _onTokenTransfer(address sender, address recipient, uint256 amount) private {\r\n        if(recipient == DEAD && address(lottery) != address(0) && !swapping)\r\n            lottery.onBurn(sender, amount);\r\n            \r\n        if(launchBlock > 0 && protectionEnabled){\r\n            if(launchBlock + protectionLength < block.number){\r\n                protectionEnabled = false;\r\n                emit ProtectionDisabled();\r\n            }else{\r\n                try protection.protect(sender, recipient, amount) returns (bool shouldProtect) {\r\n                    if(shouldProtect){\r\n                        protect[recipient] = true;\r\n                        emit Protected(recipient, true);\r\n                    }\r\n                } catch { }\r\n            }\r\n        }\r\n        require(!protect[sender], \"Protected\");\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tReflect, uint256 tTax) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        _takeTax(tTax);\r\n        _reflect(rFee, tReflect);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tReflect, uint256 tTax) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _tOwned[recipient] = _tOwned[recipient] + tTransferAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        _takeTax(tTax);\r\n        _reflect(rFee, tReflect);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tReflect, uint256 tTax) = _getValues(tAmount);\r\n        _tOwned[sender] = _tOwned[sender] - tAmount;\r\n        _rOwned[sender] = _rOwned[sender] - rAmount;\r\n        _rOwned[recipient] = _rOwned[recipient] + rTransferAmount;\r\n        _takeTax(tTax);\r\n        _reflect(rFee, tReflect);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n    \r\n    function setFees(uint256 _toReflect, uint256 _toTax, uint256 _denominator, uint256 _buyback, uint256 _community, uint256 _dev, uint256 _marketing) external authorized {\r\n        _reflectFee = _toReflect;\r\n        _taxFee = _toTax;\r\n        _feeDenominator = _denominator;\r\n        _buybackSplit = _buyback;\r\n        _communitySplit = _community;\r\n        _devSplit = _dev;\r\n        _marketingSplit = _marketing;\r\n        require(_reflectFee + _taxFee < _feeDenominator / 4);\r\n        emit FeesUpdated(_reflectFee, _taxFee, _buybackSplit, _communitySplit, _devSplit, _marketingSplit);\r\n    }\r\n\r\n    function setBuybackMultiplierSettings(uint256 numerator, uint256 denominator, uint256 length) external authorized {\r\n        require(numerator / denominator < 3 && numerator > denominator);\r\n        buybackMultiplierNumerator = numerator;\r\n        buybackMultiplierDenominator = denominator;\r\n        buybackMultiplierLength = length;\r\n        emit BuybackMultiplierSettingsUpdated(numerator, denominator, length);\r\n    }\r\n    \r\n    function setFeeExcluded(address holder, bool state) external onlyOwner {\r\n        _isExcludedFromFee[holder] = state;\r\n        emit FeeExcludedUpdated(holder, state);\r\n    }\r\n    \r\n    function setExcludedFromTxLimit(address holder, bool state) external onlyOwner {\r\n        _isExcludedFromTxLimit[holder] = state;\r\n        emit TxLimitExcludedUpdated(holder, state);\r\n    }\r\n\r\n    function setMaxTxPercent(uint256 amount) external onlyOwner {\r\n        require(amount >= _tTotal / 2000);\r\n        _maxTxAmount = amount;\r\n        emit MaxTxUpdated(amount);\r\n    }\r\n\r\n    function setSwapBack(uint256 _amount, bool _enabled) external authorized {\r\n        swapBackAmount = _amount;\r\n        swapBackEnabled = _enabled;\r\n        emit SwapBackUpdated(_amount, _enabled);\r\n    }\r\n    \r\n    function setFeeReceivers(address payable _communityReceiver, address payable _devReceiver, address payable _marketingReceiver) external onlyOwner {\r\n        _communityFeeReceiver = _communityReceiver;\r\n        _devFeeReceiver = _devReceiver;\r\n        _marketingFeeReceiver = _marketingReceiver;\r\n        emit FeeReceiversUpdated(_communityFeeReceiver, _devFeeReceiver, _marketingFeeReceiver);\r\n    }\r\n    \r\n    function setProtection(IAntiSnipe _protection, address liquidityPair) external onlyOwner {\r\n        protection = _protection;\r\n        protection.initialize(liquidityPair);\r\n    }\r\n    \r\n    function clearProtection(address holder) external onlyOwner {\r\n        protect[holder] = false;\r\n        emit Protected(holder, false);\r\n    }\r\n    \r\n    function setLottery(IBurnLottery _lottery) external onlyOwner {\r\n        lottery = _lottery;\r\n        emit LotteryUpdated(_lottery);\r\n    }\r\n    \r\n    function setBuyFeeOracle(IBuyFeeOracle _oracle) external onlyOwner {\r\n        oracle = _oracle;\r\n        emit OracleUpdated(_oracle);\r\n    }\r\n    \r\n    event Buyback(uint256 amount, bool triggerMultiplier);\r\n    event BuybackMultiplierTriggered(uint256 length);\r\n    event BuybackMultiplierCleared();\r\n    event BuybackMultiplierSettingsUpdated(uint256 numerator, uint256 denominator, uint256 length);\r\n    \r\n    event Protected(address holder, bool state);\r\n    event ProtectionDisabled();\r\n    \r\n    event LotteryUpdated(IBurnLottery newLottery);\r\n    event OracleUpdated(IBuyFeeOracle newOracle);\r\n    \r\n    event SwapBackUpdated(uint256 amount, bool enabled);\r\n    \r\n    event FeesUpdated(uint256 _reflectFee, uint256 _taxFee, uint256 _buybackSplit, uint256 _communitySplit, uint256 _devSplit, uint256 _marketingSplit);\r\n    event FeeReceiversUpdated(address payable _communityFeeReceiver, address payable _devFeeReceiver, address payable _marketingFeeReceiver);\r\n    \r\n    event FeeExcludedUpdated(address holder, bool state);\r\n    event TxLimitExcludedUpdated(address holder, bool state);\r\n    \r\n    event MaxTxUpdated(uint256 amount);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_community\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_dev\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_marketing\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"Authorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"triggerMultiplier\",\"type\":\"bool\"}],\"name\":\"Buyback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BuybackMultiplierCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"BuybackMultiplierSettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"BuybackMultiplierTriggered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"FeeExcludedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"_communityFeeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"_devFeeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"}],\"name\":\"FeeReceiversUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reflectFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_taxFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buybackSplit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_communitySplit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_devSplit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_marketingSplit\",\"type\":\"uint256\"}],\"name\":\"FeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IBurnLottery\",\"name\":\"newLottery\",\"type\":\"address\"}],\"name\":\"LotteryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaxTxUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IBuyFeeOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"Protected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ProtectionDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapBackUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"TxLimitExcludedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buybackSplit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_communityFeeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_communitySplit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devFeeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_devSplit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromTxLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingSplit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reflectFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"triggerMultiplier\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"buyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearBuybackMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"clearProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_reflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protection\",\"outputs\":[{\"internalType\":\"contract IAntiSnipe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protectionEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBuyFeeOracle\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setBuyFeeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"setBuybackMultiplierSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setExcludedFromTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setFeeExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_communityReceiver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_devReceiver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_marketingReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toReflect\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyback\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_community\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBurnLottery\",\"name\":\"_lottery\",\"type\":\"address\"}],\"name\":\"setLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAntiSnipe\",\"name\":\"_protection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityPair\",\"type\":\"address\"}],\"name\":\"setProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBackAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SSB", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000047b2be798c23f6267d8a0002e572a25e81b04a9900000000000000000000000018c6b86a9e1234a9233bd836b88ffcc01e6d85cb000000000000000000000000a2408ef0bd37b23959098eb0114021f036cb0658", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://28a384543a170ba869c5a872b40e998f43ba4e1aba339fc399cbc95a9f2abc3d"}