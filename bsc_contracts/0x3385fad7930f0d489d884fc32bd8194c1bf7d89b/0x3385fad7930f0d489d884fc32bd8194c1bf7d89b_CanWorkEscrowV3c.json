{"SourceCode": "{\"escrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\nMIT License\\n\\nCopyright (c) 2023 CanWork\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n*/\\n\\npragma solidity 0.8.16;\\n\\n// IMPORTS\\nimport \\\"./iBEP20.sol\\\"; // BEP20 Interface\\nimport \\\"./iPancake.sol\\\"; // Pancakeswap Router Interfaces\\n\\ncontract CanWorkEscrowV3c {\\n    struct Job {\\n        uint JOBID;\\n        address client;\\n        address provider;\\n        uint amount;\\n        bytes32 jobTitle;\\n        bool released;\\n        uint8 closedStatus;\\n        uint lastTxnBlock;\\n        address assetIn;\\n    }\\n\\n    address public constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c; // Canonical WBNB address used by Pancake\\n    address public constant USDT = 0x55d398326f99059fF775485246999027B3197955; // Settlement USDT (BSC-USD) contract address\\n    address public constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // Pancake V2 ROUTER\\n    IPancakeRouter01 constant PANCAKESWAP = IPancakeRouter01(ROUTER); // Define PancakeSwap Router\\n\\n    uint public adminRevenue;\\n    uint public jobCounter;\\n    uint[] public jobList;\\n    address public owner;\\n    address public pendingNewOwner;\\n\\n    uint internal DEFAULT_FEE_PERCENT; \\n    \\n    mapping(uint =\\u003e bool) public jobExists;\\n    mapping(uint =\\u003e bool) public jobReleased;\\n    mapping(uint =\\u003e uint) public mapJobToAmount;\\n    mapping(uint =\\u003e address) public mapJobToClient;\\n    mapping(uint =\\u003e address) public mapJobToProvider;\\n    mapping(uint =\\u003e address) public mapJobToAssetIn;\\n    mapping(uint =\\u003e bytes32) public mapJobToTitle;\\n    mapping(uint =\\u003e uint8) public closedStatus; // 0 = Not Released | 1 = Completed | 2 = Cancelled | 3 = Disputed\\n    mapping(uint =\\u003e uint) public lastTxnBlock;\\n\\n    event Deposit(\\n        address indexed client,\\n        address indexed provider,\\n        uint value,\\n        uint indexed JOBID\\n    );\\n    event Release(\\n        address indexed client,\\n        address indexed provider,\\n        address recipient,\\n        uint value,\\n        uint indexed JOBID,\\n        uint8 closedStatus\\n    );\\n    event PendingOwner(address oldOwner, address newOwner);\\n    event ChangeOwner(address indexed oldOwner, address indexed newOwner);\\n    event ChangeFee(uint oldFee, uint newFee);\\n    event WithdrawRevenue(uint amount, address recipient);\\n\\n    constructor() {\\n        owner = msg.sender;\\n        DEFAULT_FEE_PERCENT = uint(10 ** 18 / 100); // 1%\\n    }\\n\\n    // Only Owner can execute\\n    modifier onlyAdmin() {\\n        require(msg.sender == owner, \\\"!Auth\\\");\\n        _;\\n    }\\n\\n    //==================================== DEPOSIT FUNCTIONS =================================//\\n\\n    // DEPOSIT BNB\\n    function depositBNB(\\n        address provider,\\n        uint JOBID,\\n        bytes32 jobTitle\\n    ) external payable {\\n        require(msg.value \\u003e 0, \\\"!Val\\\");\\n\\n        require(!jobExists[JOBID], \\\"!ID\\\"); // Common \\u0027deposit\\u0027 re-ent lock\\n        jobExists[JOBID] = true; // Common \\u0027deposit\\u0027 re-ent lock\\n\\n        mapJobToClient[JOBID] = msg.sender;\\n        mapJobToProvider[JOBID] = provider;\\n        mapJobToAssetIn[JOBID] = address(0);\\n        mapJobToTitle[JOBID] = jobTitle;\\n        lastTxnBlock[JOBID] = block.number;\\n\\n        // Call internal swap function\\n        uint _finalUSD = _pancakeSwapBNB(msg.value);\\n        require(_finalUSD \\u003e 1e18, \\\"!\\u003e1USDT\\\");\\n        mapJobToAmount[JOBID] = _finalUSD;\\n        jobList.push(JOBID);\\n        jobCounter++;\\n\\n        emit Deposit(msg.sender, provider, _finalUSD, JOBID);\\n    }\\n\\n    // DEPOSIT BEP20\\n    // Client to Deposit BEP20 asset and PancakeSwap path\\n    function depositBEP20(\\n        address asset,\\n        address provider,\\n        uint value,\\n        uint JOBID,\\n        bytes32 jobTitle,\\n        address[] calldata swapPath\\n    ) external {\\n        require(value \\u003e 0, \\\"!Val\\\");\\n\\n        require(!jobExists[JOBID], \\\"!ID\\\"); // Common \\u0027deposit\\u0027 re-ent lock\\n        jobExists[JOBID] = true; // Common \\u0027deposit\\u0027 re-ent lock\\n\\n        require(\\n            iBEP20(asset).transferFrom(msg.sender, address(this), value),\\n            \\\"!Tx\\\"\\n        );\\n        require(swapPath.length \\u003e 0, \\\"!SwapPath\\\");\\n        require(swapPath[0] == asset, \\\"!SwapPathStart\\\"); // Intended asset should be the first in the path\\n        require(swapPath[swapPath.length - 1] == USDT, \\\"!SwapPathEnd\\\"); // Mandates that the Pancake swap path outputs USDT only!\\n\\n        mapJobToClient[JOBID] = msg.sender;\\n        mapJobToProvider[JOBID] = provider;\\n        mapJobToAssetIn[JOBID] = asset;\\n        mapJobToTitle[JOBID] = jobTitle;\\n        lastTxnBlock[JOBID] = block.number;\\n\\n        uint _finalUSD;\\n        if (asset == USDT) {\\n            _finalUSD = value; // Skips the swap if BEP20 token is already === USDT\\n        } else {\\n            require(iBEP20(asset).approve(ROUTER, value), \\\"!Aprv\\\"); // Approve Pancake Router to spend the deposited token\\n            _finalUSD = _pancakeSwapTokens(value, swapPath); // Call internal swap function\\n        }\\n        require(_finalUSD \\u003e 1e18, \\\"!\\u003e1USDT\\\");\\n        mapJobToAmount[JOBID] = _finalUSD;\\n\\n        jobList.push(JOBID);\\n        jobCounter++;\\n\\n        emit Deposit(msg.sender, provider, _finalUSD, JOBID);\\n    }\\n\\n    //==================================== RELEASE FUNCTIONS =================================//\\n\\n    // RELEASE BY CLIENT\\n    // Client Releases to transfer to Provider\\n    function releaseAsClient(uint JOBID) external {\\n        require(jobExists[JOBID], \\\"!ID\\\");\\n        require(mapJobToClient[JOBID] == msg.sender, \\\"!Auth\\\");\\n\\n        require(!jobReleased[JOBID], \\\"Rel\\\"); // Common \\u0027release\\u0027 re-ent lock\\n        jobReleased[JOBID] = true; // Common \\u0027release\\u0027 re-ent lock\\n        closedStatus[JOBID] = 1;\\n        lastTxnBlock[JOBID] = block.number;\\n\\n        // Release Recipient = Provider\\n        address _recipient = mapJobToProvider[JOBID];\\n        uint _amount = mapJobToAmount[JOBID];\\n        uint _finalRelease = _release(_recipient, _amount, true);\\n        adminRevenue += (_amount - _finalRelease); // Map remaining funds as revenue\\n\\n        emit Release(\\n            msg.sender,\\n            _recipient,\\n            _recipient,\\n            _finalRelease,\\n            JOBID,\\n            1\\n        );\\n    }\\n\\n    // RELEASE BY PROVIDER\\n    // Provider Releases to transfer to Client (no fee charged)\\n    function releaseByProvider(uint JOBID) external {\\n        require(jobExists[JOBID], \\\"!ID\\\");\\n        require(mapJobToProvider[JOBID] == msg.sender, \\\"!Auth\\\");\\n\\n        require(!jobReleased[JOBID], \\\"Rel\\\"); // Common \\u0027release\\u0027 re-ent lock\\n        jobReleased[JOBID] = true; // Common \\u0027release\\u0027 re-ent lock\\n        closedStatus[JOBID] = 2;\\n        lastTxnBlock[JOBID] = block.number;\\n\\n        // Release Recipient = Client\\n        address _recipient = mapJobToClient[JOBID];\\n        uint _amount = mapJobToAmount[JOBID];\\n        uint _finalRelease = _release(_recipient, _amount, false);\\n\\n        emit Release(\\n            _recipient,\\n            msg.sender,\\n            _recipient,\\n            _finalRelease,\\n            JOBID,\\n            2\\n        );\\n    }\\n\\n    // RELEASE BY ADMIN\\n    // Admin to call function specifying *payout amount* to Client and Provider\\n    // This function can result in more than the DEFAULT_FEE_PERCENT being applied\\n    // however it is limited to ~2x the set fee amount\\n    // So if 1% would normally be charged, this function could result in a max of ~2%\\n    function releaseByAdmin(\\n        uint JOBID,\\n        uint clientSplit,\\n        uint providerSplit\\n    ) external onlyAdmin {\\n        require(jobExists[JOBID], \\\"!ID\\\");\\n        require(!jobReleased[JOBID], \\\"Rel\\\"); // Common \\u0027release\\u0027 re-ent lock\\n        jobReleased[JOBID] = true; // Common \\u0027release\\u0027 re-ent lock\\n        closedStatus[JOBID] = 3;\\n        lastTxnBlock[JOBID] = block.number;\\n\\n        uint _amount = mapJobToAmount[JOBID];\\n        uint minPayoutSplit = _amount -\\n            ((DEFAULT_FEE_PERCENT * _amount) / (10 ** 18));\\n        uint totalSplit = clientSplit + providerSplit;\\n        require((totalSplit \\u003c= _amount), \\\"TooHigh\\\");\\n        require((totalSplit \\u003e= minPayoutSplit), \\\"TooLow\\\"); // Extra fee can be charged limited to 2x\\n\\n        address _client = mapJobToClient[JOBID];\\n        address _provider = mapJobToProvider[JOBID];\\n\\n        uint _clientRelease;\\n        if (clientSplit \\u003e 0) {\\n            _clientRelease = _release(_client, clientSplit, true);\\n        }\\n        uint _provRelease;\\n        if (providerSplit \\u003e 0) {\\n            _provRelease = _release(_provider, providerSplit, true);\\n        }\\n        adminRevenue += (_amount - _clientRelease - _provRelease); // Map remaining funds as revenue\\n\\n        emit Release(_client, _provider, _client, _clientRelease, JOBID, 3);\\n        emit Release(_client, _provider, _provider, _provRelease, JOBID, 3);\\n    }\\n\\n    // Internal function to handle Release\\n    // Calculates recipient \\u0026 fee amounts and Transfers funds\\n    function _release(\\n        address _recipient,\\n        uint _amount,\\n        bool takeFee\\n    ) internal returns (uint) {\\n        uint _finalRelease;\\n        if (_amount \\u003e 0) {\\n            if (takeFee) {\\n                // _feeAmount can result in 0 if _amount is small enough to cause it to be less than ...\\n                // ... 1 wei due to rounding down. In these instances the txn will result in no fee\\n                uint _feeAmount = (DEFAULT_FEE_PERCENT * _amount) / (10 ** 18);\\n                uint _amountMinusFee = _amount - _feeAmount;\\n                // It is possible for _amount \\u003e (_feeAmount + _amountMinusFee) due ...\\n                // to wei rounding hence we update the revenue mapping outside this ...\\n                // ... function based on the (original mapped amount - _finalRelease)\\n                require(_amount \\u003e= _amountMinusFee, \\\"E3\\\");\\n                _finalRelease = _amountMinusFee;\\n            } else {\\n                _finalRelease = _amount;\\n            }\\n            require(iBEP20(USDT).transfer(_recipient, _finalRelease));\\n        }\\n        return _finalRelease;\\n    }\\n\\n    //==================================== PANCAKESWAP =================================//\\n\\n    // BEP20 liquidated to USDT via PancakeSwap function call `swapExactTokensForTokens`\\n    function _pancakeSwapTokens(\\n        uint amountIn,\\n        address[] memory path\\n    ) internal returns (uint _finalUSD) {\\n        uint amountOutMin = 1;\\n        uint deadline = block.timestamp + 900; // 15 mins\\n\\n        uint[] memory _amounts = PANCAKESWAP.swapExactTokensForTokens(\\n            amountIn,\\n            amountOutMin,\\n            path,\\n            address(this),\\n            deadline\\n        );\\n        uint x = _amounts.length - 1; //gets final position of the returned _amounts[] data\\n        _finalUSD = _amounts[x];\\n    }\\n\\n    // BNB liquidation to USDT via PancakeSwap function call `swapExactETHForTokens`\\n    function _pancakeSwapBNB(uint amountIn) internal returns (uint _finalUSD) {\\n        uint amountOutMin = 1;\\n        uint deadline = block.timestamp + 900; // 15 mins\\n        address[] memory path = new address[](2);\\n        path[0] = WBNB;\\n        path[1] = USDT;\\n\\n        uint[] memory _amount = PANCAKESWAP.swapExactETHForTokens{\\n            value: amountIn\\n        }(amountOutMin, path, address(this), deadline);\\n        _finalUSD = _amount[1];\\n    }\\n\\n    //==================================== ADMIN =================================//\\n\\n\\n    // Admin withdraws their USDT revenue balance\\n    function withdrawRevenue() external onlyAdmin {\\n        address _admin = owner; // Cache the admin address\\n        uint _adminRevenue = adminRevenue; // Cache remaining revenue balance\\n        require(_adminRevenue \\u003e 0, \\\"!Revenue\\\");\\n        adminRevenue = 0; // Reset revenue to 0 before tsf\\n        require(iBEP20(USDT).transfer(_admin, _adminRevenue)); // Tsf revenue to admin\\n        emit WithdrawRevenue(_adminRevenue, _admin); // Emit event\\n    }\\n\\n    // Admin makes a pending request to change the contract owner\\n    function requestNewOwner(address newOwner) external onlyAdmin {\\n        require(newOwner != address(0), \\\"!addr0\\\");\\n        pendingNewOwner = newOwner;\\n        emit PendingOwner(owner, newOwner);\\n    }\\n\\n    // Admin clears pending request for a new owner\\n    function cancelNewOwner() external onlyAdmin {\\n        pendingNewOwner = address(0);\\n        emit PendingOwner(owner, address(0));\\n    }\\n\\n    // Pending new owner finalizes the change-over\\n    function changeOwner() external {\\n        address _pendingNewOwner = pendingNewOwner; // Cache var locally\\n        require(_pendingNewOwner != address(0), \\\"!addr0\\\");\\n        require(_pendingNewOwner == msg.sender, \\\"!caller\\\"); // The new owner must be the function caller\\n        address _oldOwner = owner; // Cache old owner for event\\n        owner = _pendingNewOwner;\\n        pendingNewOwner = address(0);\\n        emit ChangeOwner(_oldOwner, _pendingNewOwner);\\n    }\\n\\n    // Change Default Fee\\n    function changeDefaultFee(uint newFee) external onlyAdmin {\\n        uint _oldFee = DEFAULT_FEE_PERCENT; // Cache old fee\\n        require(newFee != _oldFee, \\\"NoChange\\\");\\n        require(\\n            newFee \\u003e= uint(10 ** 16) \\u0026\\u0026 newFee \\u003c= uint(10 ** 17),\\n            \\\"!ValidFee\\\"\\n        );\\n        DEFAULT_FEE_PERCENT = newFee;\\n        emit ChangeFee(_oldFee, newFee);\\n    }\\n\\n    //==================================== UTILS =================================//\\n\\n    // Returns Job Details\\n    function getJobs(\\n        uint startId,\\n        uint endId\\n    ) external view returns (uint jobCount, Job[] memory allJobs) {\\n        require(endId \\u003e= startId, \\\"!ascID\\\");\\n        require(endId \\u003c jobCounter, \\\"!validID\\\");\\n        uint _jobCount = endId - startId + 1;\\n        Job[] memory jobArray = new Job[](_jobCount);\\n\\n        for (uint i = startId; i \\u003c endId + 1; i++) {\\n            uint _ID = jobList[i];\\n            Job memory j;\\n\\n            j.JOBID = _ID;\\n            j.amount = mapJobToAmount[_ID];\\n            j.client = mapJobToClient[_ID];\\n            j.provider = mapJobToProvider[_ID];\\n            j.assetIn = mapJobToAssetIn[_ID];\\n            j.released = jobReleased[_ID];\\n            j.jobTitle = mapJobToTitle[_ID];\\n            j.closedStatus = closedStatus[_ID];\\n            j.lastTxnBlock = lastTxnBlock[_ID];\\n            jobArray[i] = j;\\n        }\\n        jobCount = _jobCount;\\n        allJobs = jobArray;\\n    }\\n\\n    // View Default Fee\\n    function viewDefaultFee() external view returns (uint defaultFee) {\\n        defaultFee = DEFAULT_FEE_PERCENT;\\n    }\\n}\"},\"iBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\n//iBEP20 Interface\\ninterface iBEP20 {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transferFrom(address, address, uint256) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"},\"iPancake.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\n// PancekeSwap Interface\\ninterface IPancakeRouter01 {\\n    // Swaps BEP20 tokens for another BEP20 token via PancakeSwap pairs\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    // Swaps BNB for a BEP20 token via PancakeSwap pairs\\n    function swapExactETHForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n}\\n\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"ChangeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ChangeOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"JOBID\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"PendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"JOBID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"closedStatus\",\"type\":\"uint8\"}],\"name\":\"Release\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"WithdrawRevenue\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminRevenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"changeDefaultFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"closedStatus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"JOBID\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"jobTitle\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"swapPath\",\"type\":\"address[]\"}],\"name\":\"depositBEP20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"JOBID\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"jobTitle\",\"type\":\"bytes32\"}],\"name\":\"depositBNB\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endId\",\"type\":\"uint256\"}],\"name\":\"getJobs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"jobCount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"JOBID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"jobTitle\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"closedStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lastTxnBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetIn\",\"type\":\"address\"}],\"internalType\":\"struct CanWorkEscrowV3c.Job[]\",\"name\":\"allJobs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jobCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jobExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jobList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jobReleased\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastTxnBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapJobToAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapJobToAssetIn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapJobToClient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapJobToProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapJobToTitle\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingNewOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"JOBID\",\"type\":\"uint256\"}],\"name\":\"releaseAsClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"JOBID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"clientSplit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"providerSplit\",\"type\":\"uint256\"}],\"name\":\"releaseByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"JOBID\",\"type\":\"uint256\"}],\"name\":\"releaseByProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewDefaultFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"defaultFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CanWorkEscrowV3c", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://05824b012ce4c3a180ad6d0c6f2ed06d263b49c5c974d4857a7cf7b95138449e"}