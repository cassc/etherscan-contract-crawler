{"SourceCode": "pragma solidity ^0.8.0;\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\n    library SafeMath {//konwnsec//IERC20 \u63a5\u53e3\r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            if (a == 0) {\r\n                return 0; \r\n            }\r\n            uint256 c = a * b;\r\n            assert(c / a == b);\r\n            return c; \r\n        }\r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// assert(b > 0); // Solidity automatically throws when dividing by 0\r\n            uint256 c = a / b;\r\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n            return c; \r\n        }\r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            assert(b <= a);\r\n            return a - b; \r\n        }\r\n\r\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            uint256 c = a + b;\r\n            assert(c >= a);\r\n            return c; \r\n        }\r\n    }\r\n\r\n    interface Erc20Token {//konwnsec//ERC20 \u63a5\u53e3\r\n        function totalSupply() external view returns (uint256);\r\n        function balanceOf(address _who) external view returns (uint256);\r\n        function transfer(address _to, uint256 _value) external;\r\n        function allowance(address _owner, address _spender) external view returns (uint256);\r\n        function transferFrom(address _from, address _to, uint256 _value) external;\r\n        function approve(address _spender, uint256 _value) external; \r\n        function burnFrom(address _from, uint256 _value) external; \r\n            function mint(uint256 amount) external  returns (bool);\r\n\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n        \r\n\r\n    }\r\n    \r\n \r\n \r\n    \r\n\r\n    contract Base {\r\n        using SafeMath for uint;\r\n\r\n\r\n        Erc20Token constant internal _USDTIns = Erc20Token(0x55d398326f99059fF775485246999027B3197955); \r\n        Erc20Token constant internal _PICCIns = Erc20Token(0x63714C713bF14de1bF1CC9503a8b8Bae8071169A); \r\n        // Erc20Token constant internal _USDTIns = Erc20Token(0xc6Ac86DD42E9678962AC196cFe0A1a495989e5c7); \r\n        // Erc20Token constant internal _PICCIns = Erc20Token(0xfb1CF61C54F65382276B2736350C4d9D759a1385); \r\n        address  _owner;\r\n        address  _operator;\r\n\r\n        modifier onlyOwner() {\r\n            require(msg.sender == _owner, \"Permission denied\"); _;\r\n        }\r\n        modifier isZeroAddr(address addr) {\r\n            require(addr != address(0), \"Cannot be a zero address\"); _; \r\n        }\r\n\r\n        modifier only_operator() {\r\n            require(msg.sender == _operator, \"Permission denied\"); _;\r\n        }\r\n\r\n        function transferOwnership(address newOwner) public onlyOwner {\r\n            require(newOwner != address(0));\r\n            _owner = newOwner;\r\n        }\r\n\r\n        function transferOperatorship(address newOperator) public onlyOwner {\r\n            require(newOperator != address(0));\r\n            _operator = newOperator;\r\n        }\r\n\r\n        receive() external payable {}  \r\n}\r\n \r\n \r\n    using SafeMath for uint;\r\n\r\ncontract DataPlayer is Base{\r\n  \r\n \r\n    mapping(uint256 => uint256)  public PackagePrice;\r\n    address public ProjectPartyWallet = 0x4594da1f1e4D9e0935F82541C81b1613709d90C9; \r\n    address public RewardWallet = 0xB57D15263e7c139F2D50a9418123758318589847;\r\n \r\n    function setaddress(address addr,uint256 WalletType) public onlyOwner  { \r\n         if(WalletType == 1){\r\n            ProjectPartyWallet = addr;\r\n        }else if(WalletType == 2){\r\n            RewardWallet = addr;\r\n        }\r\n   \r\n    }\r\n}\r\ncontract PICCPackage is DataPlayer {\r\n    using SafeMath for uint;\r\n     constructor()\r\n     {\r\n        _owner = msg.sender; \r\n        _operator = msg.sender; \r\n    }\r\n \r\n    function BUYPackage(uint256 ID,uint256 PackageType ) public{\r\n        require(ID > 0, \"Package sell out\");  \r\n        require( PackagePrice[ID] > 0, \"Package sell out\");  \r\n        uint256 USDTBalance = 0;\r\n        if(PackageType == 0){\r\n            uint256   Price =  PackagePrice[ID].div(2);\r\n            USDTBalance =   Price;\r\n            _USDTIns.transferFrom(msg.sender, address(ProjectPartyWallet),USDTBalance);\r\n        }else if(PackageType == 1)\r\n        {\r\n             USDTBalance = PackagePrice[ID];\r\n            _USDTIns.transferFrom(msg.sender, address(ProjectPartyWallet),USDTBalance);\r\n        } \r\n    }\r\n \r\n    function setPICCPackagePrice(uint256 ID,uint256 Price) public only_operator  { \r\n        PackagePrice[ID] = Price;\r\n    }\r\n \r\n   function TransactionRequest(uint256 USDTNumber ) public    {\r\n        _USDTIns.transferFrom(msg.sender, address(RewardWallet),USDTNumber);\r\n    } \r\n \r\n   function PICCRecharge(uint256 USDTNumber ) public    {\r\n        _PICCIns.transferFrom(msg.sender, address(ProjectPartyWallet),USDTNumber);\r\n    }\r\n \r\n    function Withdrawal(uint256 USDTNumber,address PlayerAddress ) public  only_operator  {\r\n        _USDTIns.transferFrom(RewardWallet, PlayerAddress,USDTNumber);\r\n    }     \r\n      \r\n     function setSecurityPassword(uint256 ID) public    { \r\n         \r\n    }\r\n\r\n\r\n  \r\n   \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"PackageType\",\"type\":\"uint256\"}],\"name\":\"BUYPackage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTNumber\",\"type\":\"uint256\"}],\"name\":\"PICCRecharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PackagePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ProjectPartyWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTNumber\",\"type\":\"uint256\"}],\"name\":\"TransactionRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"USDTNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"PlayerAddress\",\"type\":\"address\"}],\"name\":\"Withdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Price\",\"type\":\"uint256\"}],\"name\":\"setPICCPackagePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ID\",\"type\":\"uint256\"}],\"name\":\"setSecurityPassword\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"WalletType\",\"type\":\"uint256\"}],\"name\":\"setaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"transferOperatorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PICCPackage", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c13856ceca316bab398dd69c726072e4742a103a300cced28c9f066b7b002cd3"}