{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SpaceshipStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./common/Globals.sol\\\";\\nimport \\\"./token/BEP20/IBEP20.sol\\\";\\nimport \\\"./token/ERC721/IAlienWorldsNFT.sol\\\";\\nimport \\\"./ISpaceshipStaking.sol\\\";\\n\\n/// @title SpaceshipStaking contract.\\ncontract SpaceshipStaking is ISpaceshipStaking, Ownable {\\n    using SafeMath for uint256;\\n    using SafeMath for uint64;\\n\\n    IBEP20 public TLMToken;\\n\\n    /// @dev Contain needed information that user input when join to mission.\\n    struct UserInvest {\\n        uint256 ships;\\n        uint256 BNBAmount;\\n    }\\n\\n    /// @notice Contain all missions\\n    mapping(uint256 => Mission) public missions;\\n    /// @notice Total missions count.\\n    uint256 public missionsCount = 0;\\n\\n    /// @notice Contain relation between `missionNum` and all `UserInvest` (join user info) that connect to mission\\n    mapping(uint256 => mapping(address => UserInvest)) public missionToUsersInvest;\\n\\n    /// @param _TLMToken TLM BEP20 address.\\n    constructor(address _TLMToken) {\\n        TLMToken = IBEP20(_TLMToken);\\n    }\\n\\n    /// @notice Create new mission.\\n    /// @dev See test for Mission structure example. Only for owner.\\n    /// @param _newMission New mission structure.\\n    /// @return True if creation success.\\n    function createMission(Mission memory _newMission) external override onlyOwner returns(bool) {\\n        require(_newMission.launchTime > _newMission.boardingTime, \\\"[E-38] - Boarding time less then launch time.\\\");\\n        require(_newMission.launchTime > block.timestamp, \\\"[E-39] - Launch time less current timestamp.\\\");\\n        require(_newMission.duration > 0, \\\"[E-40] - Duration can't be a zero.\\\");\\n        require(_newMission.reward > 0, \\\"[E-42] - Reward can't be a zero.\\\");\\n        require(_newMission.spaceshipCost > 0, \\\"[E-43] - Spaceship cost can't be a zero.\\\");\\n        require(_newMission.nftInfo.contractAddress != address(0), \\\"[E-44] - NFT contract can't be zero address.\\\");\\n        require(bytes(_newMission.nftInfo.tokenURI).length != 0, \\\"[E-45] - NFT token uri can't be empty.\\\");\\n\\n        _checkBoostOrder(_newMission);\\n\\n        TLMToken.transferFrom(msg.sender, address(this), _newMission.reward);\\n\\n        uint256 _missionNumber = missionsCount;\\n        missions[_missionNumber] = _newMission;\\n        missionsCount++;\\n\\n        emit MissionCreated(_missionNumber, _newMission.name);\\n\\n        return true;\\n    }\\n\\n    /// @notice Allow user join to created mission.\\n    /// @param _missionNum Existed mission number.\\n    /// @param _spaceshipCount Spaceship count that user send on mission.\\n    /// @return True if join success.\\n    function joinToMission(uint256 _missionNum, uint256 _spaceshipCount) external payable override returns(bool) {\\n        require(_spaceshipCount > 0, \\\"[E-63] - Spaceship count can't be a zero.\\\");\\n\\n        Mission memory _mission = _getMission(_missionNum);\\n        require(_mission.launchTime > block.timestamp, \\\"[E-64] - Registration closed because mission already launched.\\\");\\n        require(_mission.boardingTime < block.timestamp, \\\"[E-65] - Registration on mission still not launched.\\\");\\n\\n        uint256 _BNBAmount = msg.value;\\n        uint256 _newSpaceshipCount = _spaceshipCount;\\n\\n        UserInvest memory _oldUserInvest = missionToUsersInvest[_missionNum][msg.sender];\\n        if (_oldUserInvest.ships != 0) {\\n            // Remove old user power from mission\\n            uint256 _oldUserPower = _calculateUserPower(_mission, _oldUserInvest);\\n            _mission.missionPower = (_mission.missionPower).sub(_oldUserPower);\\n\\n            // Form new input parameters based on old userInvest\\n            _newSpaceshipCount = _newSpaceshipCount.add(_oldUserInvest.ships);\\n            _BNBAmount = _BNBAmount.add(_oldUserInvest.BNBAmount);\\n        }\\n\\n        // Add user to mission\\n        UserInvest memory _newUserInvests = UserInvest(_newSpaceshipCount, _BNBAmount);\\n        missionToUsersInvest[_missionNum][msg.sender] = _newUserInvests;\\n\\n        // Calculate new user power and add it to mission\\n        uint256 _newUserPower = _calculateUserPower(_mission, _newUserInvests);\\n        missions[_missionNum].missionPower = (_mission.missionPower).add(_newUserPower);\\n\\n        // Calculate mission price for user and transfer token to contract\\n        uint256 _TLMMissionPrice = _getJoinMissionPrice(_mission, _spaceshipCount);\\n        TLMToken.transferFrom(msg.sender, address(this), _TLMMissionPrice);\\n\\n        emit MissionJoined(_missionNum, msg.sender, _spaceshipCount);\\n\\n        return true;\\n    }\\n\\n    /// @notice See `_calculateReward()`.\\n    /// @param _missionNum Existed mission number.\\n    /// @return All info about reward for mission.\\n    function calculateReward(uint256 _missionNum) external view override returns(RewardInfo memory) {\\n        Mission memory _mission = _getMission(_missionNum);\\n        return _calculateReward(_missionNum, _mission);\\n    }\\n\\n    /// @notice Calculate reward for mission and return all tokens count that will transfer for user account\\n    /// @param _missionNum Existed mission number.\\n    /// @param _mission Mission which user join.\\n    /// @return Transferred on mission TLM and BNB tokens, reward in TLM and NFT that will be created.\\n    function _calculateReward(uint256 _missionNum, Mission memory _mission) private view returns(RewardInfo memory) {\\n        require(_mission.launchTime <= block.timestamp, \\\"[E-89] - Can't calculate reward before mission launch.\\\");\\n\\n        UserInvest memory _userInvest = missionToUsersInvest[_missionNum][msg.sender];\\n\\n        uint256 _userPower = _calculateUserPower(_mission, _userInvest);\\n        require(_userPower > 0, \\\"[E-90] - You haven't rewards for this mission.\\\");\\n\\n        uint256 _rewardTLM = (_mission.reward).mul(getDecimal()).mul(_userPower).div(_mission.missionPower)\\n            .div(getDecimal());\\n\\n        RewardInfo memory _rewardInfo = RewardInfo({\\n            investedTLM: _getJoinMissionPrice(_mission, _userInvest.ships),\\n            investedBNB: _userInvest.BNBAmount,\\n            rewardTLM: _rewardTLM,\\n            rewardNFTCount: _userInvest.ships > 5 ? 5 : _userInvest.ships\\n        });\\n\\n        return _rewardInfo;\\n    }\\n\\n    /// @notice Transfer all tokens from `_calculateReward()` to user account.\\n    /// @param _missionNum Existed mission number.\\n    /// @return True if transfer was success.\\n    function withdraw(uint256 _missionNum) external override returns(bool) {\\n        Mission memory _mission = _getMission(_missionNum);\\n        require((_mission.launchTime).add(_mission.duration) < block.timestamp, \\\"[E-140] - Can't withdraw before mission end.\\\");\\n\\n        RewardInfo memory _rewardInfo = _calculateReward(_missionNum, _mission);\\n\\n        missionToUsersInvest[_missionNum][msg.sender].ships = 0;\\n        missionToUsersInvest[_missionNum][msg.sender].BNBAmount = 0;\\n\\n        // Claim reward\\n        TLMToken.transfer(msg.sender, (_rewardInfo.investedTLM).add(_rewardInfo.rewardTLM));\\n        msg.sender.transfer(_rewardInfo.investedBNB);\\n\\n        // Mint NFT tokens\\n        IAlienWorldsNFT _NFTContract = IAlienWorldsNFT(_mission.nftInfo.contractAddress);\\n        for (uint256 i = 0; i < _rewardInfo.rewardNFTCount; i++) {\\n            _NFTContract.mint(msg.sender, _mission.nftInfo.tokenURI);\\n        }\\n\\n        emit RewardWithdrawn(_missionNum, msg.sender, _rewardInfo.investedTLM, _rewardInfo.rewardTLM, _rewardInfo.investedBNB);\\n\\n        return true;\\n    }\\n\\n    /// @notice Return mission, include require.\\n    /// @param _missionNum Existed mission number.\\n    /// @return Mission structure.\\n    function _getMission(uint256 _missionNum) private view returns(Mission memory) {\\n        require(missionsCount > _missionNum, \\\"[E-88] - Mission not exist.\\\");\\n        return missions[_missionNum];\\n    }\\n\\n    /// @notice Calculate mission price in TLM.\\n    /// @param _mission Mission structure.\\n    /// @param _spaceshipCount Count of spaceships.\\n    /// @return Price in TLM.\\n    function _getJoinMissionPrice(Mission memory _mission, uint256 _spaceshipCount) private pure returns(uint256) {\\n        return _spaceshipCount.mul(_mission.spaceshipCost);\\n    }\\n\\n    /// @notice Calculate user power ny mission and invest.\\n    /// @param _mission Mission structure.\\n    /// @param _userInvest User invested info\\n    /// @return User power for mission.\\n    function _calculateUserPower(Mission memory _mission, UserInvest memory _userInvest) private pure returns(uint256) {\\n        uint256 _boostCounter = getDecimal();\\n\\n        if (_mission.boostMultipliers.length > 0) {\\n            for (uint256 k = _mission.boostMultipliers.length - 1; k >= 0 && k < _mission.boostMultipliers.length; k--) {\\n                if (_userInvest.BNBAmount >= _mission.boostPrices[k]) {\\n                    _boostCounter = _mission.boostMultipliers[k];\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return (_userInvest.ships).mul(_boostCounter);\\n    }\\n\\n    /// @notice Check boost order on mission create\\n    /// @param _mission Mission structure.\\n    function _checkBoostOrder(Mission memory _mission) private pure {\\n        require(_mission.boostMultipliers.length == _mission.boostPrices.length, \\\"[E-194] - Boost length is not equal.\\\");\\n\\n        if (_mission.boostMultipliers.length <= 1) return;\\n\\n        for (uint256 k = 0; k < _mission.boostMultipliers.length - 1; k++) {\\n            require(_mission.boostMultipliers[k] < _mission.boostMultipliers[k + 1], \\\"[E-199] - Wrong boost counter order.\\\");\\n            require(_mission.boostPrices[k] < _mission.boostPrices[k + 1], \\\"[E-200] - Wrong boost prices order.\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/Globals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\nfunction getDecimal() pure returns (uint256) {\\n  return 10 ** 27;\\n}\\n\"\r\n    },\r\n    \"contracts/token/BEP20/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n    * @dev Returns the token name.\\n    */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/token/ERC721/IAlienWorldsNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\n\\ninterface IAlienWorldsNFT {\\n    /// @notice Mints new token for `owner` and set `tokenURI`.\\n    function mint(address owner, string memory tokenURI) external returns(uint256);\\n\\n    function setBaseURI(string memory baseURI_) external;\\n\\n    /// @notice Mints a batch of new token(s) for `recipient` and set `tokenURI`.\\n    function mintBatch(address recipient, string memory tokenURI, uint8 tokensToMint) external;\\n\\n    /// @notice set or update the batchMint limit for NFTs\\n    function setMintBatchLimit(uint8 _newMintBatchLimit) external;\\n\\n    /// @notice get current batchMint limit for NFTs\\n    function getMintBatchLimit() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/ISpaceshipStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @title SpaceshipStaking interface.\\ninterface ISpaceshipStaking {\\n    /// Emitted when new mission created with `id` and `name`.\\n    event MissionCreated(uint256 indexed id, string name);\\n\\n    /// Emitted when `player` joined to mission by `missionId`.\\n    event MissionJoined(uint256 indexed missionId, address indexed player, uint256 spaceshipCount);\\n\\n    /// Emitted when `player` withdraw reward from mission by `missionId`.\\n    event RewardWithdrawn(uint256 indexed missionId, address indexed player, uint256 investedTLM, uint256 rewardTLM, uint256 investedBNB);\\n\\n    /// @dev Contain information about ERC721 contract for each mission.\\n    struct NFTInfo {\\n        address contractAddress;\\n        string tokenURI;\\n    }\\n\\n    /// @dev Contain information about mission.\\n    struct Mission {\\n        uint64 boardingTime;\\n        uint64 launchTime;\\n        uint64 duration;\\n        uint64 missionType;\\n        uint256 reward;\\n        uint256 spaceshipCost;\\n        uint256 missionPower;\\n        string description;\\n        string name;\\n        uint256[] boostMultipliers;\\n        uint256[] boostPrices;\\n        NFTInfo nftInfo;\\n    }\\n\\n    /// @dev Contain information about user reward for mission.\\n    struct RewardInfo {\\n        uint256 investedTLM;\\n        uint256 investedBNB;\\n        uint256 rewardTLM;\\n        uint256 rewardNFTCount;\\n    }\\n\\n    /// @notice Create new mission.\\n    /// @dev See test for Mission structure example. Only for owner.\\n    /// @param _newMission New mission structure.\\n    /// @return True if creation success.\\n    function createMission(Mission memory _newMission) external returns(bool);\\n\\n    /// @notice Allow user join to created mission.\\n    /// @param _missionNum Existed mission number.\\n    /// @param _spaceshipCount Spaceship count that user send on mission.\\n    /// @return True if join success.\\n    function joinToMission(uint256 _missionNum, uint256 _spaceshipCount) external payable returns(bool);\\n\\n    /// @notice See `_calculateReward()`.\\n    /// @param _missionNum Existed mission number.\\n    /// @return All info about reward for mission.\\n    function calculateReward(uint256 _missionNum) external view returns(RewardInfo memory);\\n\\n    /// @notice Transfer all tokens from `_calculateReward()` to user account.\\n    /// @param _missionNum Existed mission number.\\n    /// @return True if transfer was success.\\n    function withdraw(uint256 _missionNum) external returns(bool);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TLMToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"MissionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"missionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spaceshipCount\",\"type\":\"uint256\"}],\"name\":\"MissionJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"missionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investedTLM\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardTLM\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investedBNB\",\"type\":\"uint256\"}],\"name\":\"RewardWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TLMToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_missionNum\",\"type\":\"uint256\"}],\"name\":\"calculateReward\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"investedTLM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investedBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTLM\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardNFTCount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISpaceshipStaking.RewardInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"boardingTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"launchTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"missionType\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spaceshipCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"missionPower\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"boostMultipliers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"boostPrices\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"internalType\":\"struct ISpaceshipStaking.NFTInfo\",\"name\":\"nftInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct ISpaceshipStaking.Mission\",\"name\":\"_newMission\",\"type\":\"tuple\"}],\"name\":\"createMission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_missionNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_spaceshipCount\",\"type\":\"uint256\"}],\"name\":\"joinToMission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"missionToUsersInvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ships\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BNBAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"missions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"boardingTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"launchTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"missionType\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spaceshipCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"missionPower\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"internalType\":\"struct ISpaceshipStaking.NFTInfo\",\"name\":\"nftInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"missionsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_missionNum\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SpaceshipStaking", "CompilerVersion": "v0.7.2+commit.51b20bc0", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000002222227e22102fe3322098e4cbfe18cfebd57c95", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}