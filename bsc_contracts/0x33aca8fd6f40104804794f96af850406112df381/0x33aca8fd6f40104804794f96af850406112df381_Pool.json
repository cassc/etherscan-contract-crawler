{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/BasicMaths.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nlibrary BasicMaths {\\n    /**\\n     * @dev Returns the abs of substraction of two unsigned integers\\n     *\\n     * _Available since v3.4._\\n     */\\n    function diff(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a >= b) {\\n            return a - b;\\n        } else {\\n            return b - a;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a - b if a > b, else return 0\\n     *\\n     * _Available since v3.4._\\n     */\\n    function sub2Zero(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return a - b;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev if isSub then Returns a - b, else return a + b\\n     *\\n     * _Available since v3.4._\\n     */\\n    function addOrSub(bool isAdd, uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (isAdd) {\\n            return a + b;\\n        } else {\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev if isSub then Returns sub2Zero(a, b), else return a + b\\n     *\\n     * _Available since v3.4._\\n     */\\n    function addOrSub2Zero(bool isAdd, uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (isAdd) {\\n            return a + b;\\n        } else {\\n            if (a > b) {\\n                return a - b;\\n            } else {\\n                return 0;\\n            }\\n        }\\n    }\\n\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        uint256 z = (x + 1 ) / 2;\\n        uint256 y = x;\\n        while(z < y){\\n            y = z;\\n            z = ( x / z + z ) / 2;\\n        }\\n        return y;\\n    }\\n\\n    function pow(uint256 x) internal pure returns (uint256) {\\n        return x * x;\\n    }\\n\\n    function diff2(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (a >= b) {\\n            return (true, a - b);\\n        } else {\\n            return (false, b - a);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/Price.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"./BasicMaths.sol\\\";\\n\\nlibrary Price {\\n  using BasicMaths for uint256;\\n  using BasicMaths for bool;\\n\\n  uint256 private constant E18 = 1e18;\\n  uint256 private constant E9 = 1e9;\\n  uint256 private constant E4 = 1e4;\\n\\n  function divE18(\\n    uint256 valueA,\\n    uint256 valueB\\n  ) internal pure returns (uint256) {\\n    return (valueA * E18) / valueB;\\n  }\\n\\n  function divE4(\\n    uint256 valueA,\\n    uint256 valueB\\n  ) internal pure returns (uint256) {\\n    return (valueA * E4) / valueB;\\n  }\\n\\n  function mulE18(\\n    uint256 valueA,\\n    uint256 valueB\\n  ) internal pure returns (uint256) {\\n    return (valueA * valueB) / E18;\\n  }\\n\\n  function mulE4(\\n    uint256 valueA,\\n    uint256 valueB\\n  ) internal pure returns (uint256) {\\n    return (valueA * valueB) / E4;\\n  }\\n\\n  function lpTokenPrice(\\n    uint256 totalSupply,\\n    uint256 liquidityPool\\n  ) internal pure returns (uint256) {\\n    if (totalSupply == 0 || liquidityPool == 0) {\\n      return E18;\\n    }\\n\\n    return (liquidityPool * (E18)) / totalSupply;\\n  }\\n\\n  function lpTokenByPoolToken(\\n    uint256 totalSupply,\\n    uint256 liquidityPool,\\n    uint256 poolToken\\n  ) internal pure returns (uint256) {\\n    if (liquidityPool != 0) {\\n      return (poolToken * totalSupply) / liquidityPool;\\n    }\\n    return poolToken;\\n  }\\n\\n  function poolTokenByLPToken(\\n    uint256 totalSupply,\\n    uint256 liquidityPool,\\n    uint256 lpToken\\n  ) internal pure returns (uint256) {\\n    return (lpToken * lpTokenPrice(totalSupply, liquidityPool)) / E18;\\n  }\\n\\n  function calFundingFee(\\n    uint256 positionAmount,\\n    uint256 rebaseSize\\n  ) internal pure returns (uint256) {\\n    return mulE18(positionAmount, rebaseSize);\\n  }\\n\\n  function convertDecimal(\\n    uint256 amount,\\n    uint8 fromDecimal,\\n    uint8 toDecimal\\n  ) internal pure returns (uint256) {\\n    if (fromDecimal == toDecimal) {\\n      return amount;\\n    } else if (fromDecimal > toDecimal) {\\n      return amount / (10 ** (fromDecimal - toDecimal));\\n    } else {\\n      return amount * 10 ** (toDecimal - fromDecimal);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Pool/interface/IPoolLiquidityHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../PoolStructs.sol\\\";\\n\\ninterface IPoolLiquidityHandler {\\n  event RequestLiquidityChange(\\n    uint256 requestId,\\n    LiquidityChangeRequest request\\n  );\\n\\n  event ClaimLiquidityChange(\\n    uint256 requestId,\\n    uint256 sendAmount,\\n    LiquidityChangeRequest request\\n  );\\n\\n  event TakeSnapshot(\\n    uint256 date,\\n    uint256 totalLPTokenSupply,\\n    uint256 poolLiquidity,\\n    uint256 totalAdd,\\n    uint256 totalRemove,\\n    uint256 liquidityFee\\n  );\\n\\n  event LiquidityChange(\\n    uint256 poolLiquidity,\\n    uint256 totalLPTokenSupply,\\n    uint256 lpTokenPrice\\n  );\\n}\\n\"\r\n    },\r\n    \"contracts/Pool/interface/IPoolPositionHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../PoolStructs.sol\\\";\\n\\ninterface IPoolPositionHandler {\\n  event OpenPosition(\\n    uint256 positionId,\\n    Position position,\\n    uint256 positionSize\\n  );\\n\\n  event AddMargin(uint256 positionId, uint256 addMargin, uint256 totalMargin);\\n\\n  event ClosePosition(PositionCloseInfo closeInfo);\\n\\n  event Exit(uint256 positionId, address executor);\\n\\n  event ExecPreBill(\\n    uint256 positionId,\\n    Position position,\\n    address executor,\\n    uint256 executorFee,\\n    uint256 positionSize\\n  );\\n\\n  event CancelPrebill(uint256 positionId);\\n}\\n\"\r\n    },\r\n    \"contracts/Pool/interface/IPoolStorageHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../PoolStructs.sol\\\";\\n\\ninterface IPoolStorageHandler {\\n  event SetPoolParams(SetPoolParamsInput params);\\n\\n  event SetLadderDeviations(SetLadderDeviationInput[] deviationInfos);\\n\\n  event SetLpDiffDeviations(SetLadderDeviationInput[] deviationInfos);\\n\\n  event SetIsValidExecutor(address addr, bool isValid);\\n\\n  event SetisValidLiquidityProvider(address addr, bool isValid);\\n\\n  event UpdatePoolLongShortAmount(uint256 longAmount, uint256 shortAmount);\\n\\n  event UpdatePoolRebaseLongShort(\\n    uint256 rebaseLong,\\n    uint256 rebaseShort,\\n    uint256 blockNumber\\n  );\\n}\\n\"\r\n    },\r\n    \"contracts/Pool/interface/IPoolTradingPairHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../PoolStructs.sol\\\";\\n\\ninterface IPoolTradingPairHandler {\\n  event CreateTradingPair(address oracleAddr, bytes32 tradingPairId);\\n\\n  event DeleteTradingPair(bytes32 tradingPairId);\\n\\n  event UpdatedTradingPair(bytes32 tradingPairId, TradingPair newTradingPair);\\n}\\n\"\r\n    },\r\n    \"contracts/Pool/library/TradingHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../library/BasicMaths.sol\\\";\\nimport \\\"../../library/Price.sol\\\";\\n\\nimport \\\"../PoolStructs.sol\\\";\\n\\nlibrary TradingHelper {\\n  using BasicMaths for uint256;\\n  uint256 private constant E18 = 1e18;\\n\\n  function calRebaseDelta(\\n    CalRebaseDeltaInput memory input\\n  ) internal view returns (uint256 rebaseLongDelta, uint256 rebaseShortDelta) {\\n    if (input.lastRebaseBlock >= block.number || input.poolLiquidity == 0) {\\n      return (rebaseLongDelta, rebaseShortDelta);\\n    }\\n\\n    uint256 adjustPosition = Price.mulE4(\\n      input.poolLiquidity,\\n      input.imbalanceThreshold\\n    );\\n\\n    uint256 nakedPosition = input.poolLongAmount.diff(input.poolShortAmount);\\n\\n    if (nakedPosition < adjustPosition) {\\n      return (rebaseLongDelta, rebaseShortDelta);\\n    }\\n\\n    uint256 rebasePosition = nakedPosition - adjustPosition;\\n    uint256 validBlockDiff = block.number - input.lastRebaseBlock;\\n    uint256 tmpRebaseDelta;\\n\\n    tmpRebaseDelta =\\n      (rebasePosition * validBlockDiff * E18) /\\n      (input.rebasecCoefficient);\\n\\n    if (input.poolLongAmount > input.poolShortAmount) {\\n      rebaseLongDelta = tmpRebaseDelta / input.poolLongAmount;\\n    } else {\\n      rebaseShortDelta = tmpRebaseDelta / input.poolShortAmount;\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Pool/Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./PoolPositionHandler.sol\\\";\\n\\ncontract Pool is PoolPositionHandler {\\n  using SafeERC20 for IERC20;\\n\\n  receive() external payable {}\\n\\n  constructor(\\n    string memory name_,\\n    string memory symbol_,\\n    address poolToken_,\\n    address cryptocurrencyToPoolTokenOracle_,\\n    bool isCryptocurrencyToPoolTokenReverted_\\n  )\\n    PoolPositionHandler(\\n      name_,\\n      symbol_,\\n      poolToken_,\\n      cryptocurrencyToPoolTokenOracle_,\\n      isCryptocurrencyToPoolTokenReverted_\\n    )\\n  {}\\n\\n  function withdraw(\\n    address tokenAddr,\\n    address to,\\n    uint256 amount\\n  ) external onlyOwner {\\n    if (tokenAddr == address(0)) {\\n      payable(to).transfer(amount);\\n    } else {\\n      if (tokenAddr == poolToken) {\\n        require(\\n          poolLiquidity <= ERC20(poolToken).balanceOf(address(this)) - amount,\\n          \\\"I-Amt\\\"\\n        );\\n      }\\n      IERC20(tokenAddr).safeTransfer(to, amount);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Pool/PoolLiquidityHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"../library/Price.sol\\\";\\nimport \\\"./interface/IPoolLiquidityHandler.sol\\\";\\nimport \\\"./PoolStorageHandler.sol\\\";\\n\\ncontract PoolLiquidityHandler is\\n  IPoolLiquidityHandler,\\n  PoolStorageHandler,\\n  ERC20\\n{\\n  using SafeERC20 for IERC20;\\n  using Counters for Counters.Counter;\\n\\n  Counters.Counter private _liquidityRequestCounter;\\n\\n  mapping(uint256 => LiquidityChangeRequest) private _liquidityChangeRequest;\\n  mapping(uint256 => DailyLiquidityRecord) private _dailyLiquidityRecord;\\n\\n  modifier onlyValidExecutor() {\\n    require(isValidExecutor(msg.sender), \\\"O-E\\\"); //Only Executor\\n    _;\\n  }\\n\\n  constructor(\\n    string memory name_,\\n    string memory symbol_,\\n    address poolToken_,\\n    address cryptocurrencyToPoolTokenOracle_,\\n    bool isCryptocurrencyToPoolTokenReverted_\\n  )\\n    ERC20(name_, symbol_)\\n    PoolStorageHandler(\\n      poolToken_,\\n      cryptocurrencyToPoolTokenOracle_,\\n      isCryptocurrencyToPoolTokenReverted_\\n    )\\n  {}\\n\\n  function editLiquidityForEmergency(\\n    uint256 amount,\\n    bool isAdd\\n  ) external onlyOwner {\\n    _rebase();\\n\\n    uint256 curTotalSupply = totalSupply();\\n    uint256 resultAmount = 0;\\n\\n    if (isAdd) {\\n      resultAmount = Price.lpTokenByPoolToken(\\n        curTotalSupply,\\n        poolLiquidity,\\n        amount\\n      );\\n      _chargePoolToken(msg.sender, amount);\\n      _mint(msg.sender, resultAmount);\\n\\n      _editPoolLiquidity(amount, 0);\\n    } else {\\n      resultAmount = (amount == curTotalSupply)\\n        ? poolLiquidity\\n        : Price.poolTokenByLPToken(curTotalSupply, poolLiquidity, amount);\\n\\n      _burn(msg.sender, amount);\\n      _sendPoolToken(msg.sender, resultAmount);\\n      _editPoolLiquidity(0, resultAmount);\\n    }\\n\\n    emit LiquidityChange(\\n      poolLiquidity,\\n      totalSupply(),\\n      Price.lpTokenPrice(totalSupply(), poolLiquidity)\\n    );\\n  }\\n\\n  function requestLiquidityChange(uint256 amount, bool isAdd) external {\\n    uint64 dueDate = uint64(block.timestamp / 1 days) + 2;\\n\\n    LiquidityChangeRequest memory request = LiquidityChangeRequest({\\n      user: msg.sender,\\n      dueDate: dueDate,\\n      isAdd: isAdd,\\n      amount: amount\\n    });\\n\\n    if (isAdd) {\\n      if (isLiquidityProviderLimited) {\\n        require(isValidLiquidityProvider(msg.sender), \\\"I-AL\\\"); // Invalid to add liquidity\\n      }\\n\\n      _chargePoolToken(msg.sender, amount);\\n\\n      _dailyLiquidityRecord[dueDate].accumAddAmount += amount;\\n    } else {\\n      _transfer(msg.sender, address(this), amount);\\n\\n      _dailyLiquidityRecord[dueDate].accumRemoveAmount += amount;\\n    }\\n\\n    _liquidityRequestCounter.increment();\\n    uint256 requestId = _liquidityRequestCounter.current();\\n    _liquidityChangeRequest[requestId] = request;\\n\\n    emit RequestLiquidityChange(requestId, request);\\n  }\\n\\n  function claimLiquidityChange(uint256 requestId) external {\\n    LiquidityChangeRequest memory request = _liquidityChangeRequest[requestId];\\n    require(request.user != address(0), \\\"I-ReqId\\\"); // Invalid RequestId\\n\\n    require(\\n      _dailyLiquidityRecord[request.dueDate].isRecorded,\\n      \\\"I-SS\\\" // No Snapshot Yet\\n    );\\n\\n    uint256 totalLPTokenSupplySnapshot = _dailyLiquidityRecord[request.dueDate]\\n      .totalLPTokenSupplySnapshot;\\n    uint256 poolLiquiditySnapshot = _dailyLiquidityRecord[request.dueDate]\\n      .poolLiquiditySnapshot;\\n\\n    uint256 sendAmount;\\n    if (request.isAdd) {\\n      sendAmount = Price.lpTokenByPoolToken(\\n        totalLPTokenSupplySnapshot,\\n        poolLiquiditySnapshot,\\n        request.amount\\n      );\\n\\n      _transfer(address(this), request.user, sendAmount);\\n    } else {\\n      uint256 feeAmount = Price.mulE4(request.amount, removeLiquidityFeeRate);\\n      sendAmount = Price.poolTokenByLPToken(\\n        totalLPTokenSupplySnapshot,\\n        poolLiquiditySnapshot,\\n        request.amount - feeAmount\\n      );\\n      _sendPoolToken(request.user, sendAmount);\\n    }\\n\\n    delete _liquidityChangeRequest[requestId];\\n    emit ClaimLiquidityChange(requestId, sendAmount, request);\\n  }\\n\\n  function takeSnapshot(\\n    uint256 dueDate,\\n    bool isHardFix,\\n    uint256 hardFixTotalLPSupply,\\n    uint256 hardFixPoolLiquidity\\n  ) external onlyValidExecutor {\\n    _rebase();\\n    // Step1: Check what totalSupply and poolLiquidity is\\n    uint256 fixedTotalLPTokenSupply;\\n    uint256 fixedPoolLiquidity;\\n    if (isHardFix) {\\n      fixedTotalLPTokenSupply = hardFixTotalLPSupply;\\n      fixedPoolLiquidity = hardFixPoolLiquidity;\\n    } else {\\n      require(!_dailyLiquidityRecord[dueDate].isRecorded, \\\" I-AT\\\"); // Alreadt Taken\\n      fixedTotalLPTokenSupply = totalSupply();\\n      fixedPoolLiquidity = poolLiquidity;\\n    }\\n\\n    // Step2: Rollback if hardFix more than once\\n    uint256 dueDateAddAmount = _dailyLiquidityRecord[dueDate].accumAddAmount;\\n    uint256 dueDateRemoveAmount = _dailyLiquidityRecord[dueDate]\\n      .accumRemoveAmount;\\n\\n    if (isHardFix && _dailyLiquidityRecord[dueDate].isRecorded) {\\n      _transfer(\\n        official,\\n        address(this),\\n        _dailyLiquidityRecord[dueDate].removeLiquidityFee\\n      );\\n\\n      _editPoolLiquidity(\\n        _dailyLiquidityRecord[dueDate].removePoolTokenAmount,\\n        dueDateAddAmount\\n      );\\n\\n      uint256 lastFinalLPRemoveAmount = dueDateRemoveAmount -\\n        _dailyLiquidityRecord[dueDate].removeLiquidityFee;\\n\\n      if (\\n        _dailyLiquidityRecord[dueDate].newLPTokenAmount >=\\n        _dailyLiquidityRecord[dueDate].removePoolTokenAmount\\n      ) {\\n        _burn(\\n          address(this),\\n          _dailyLiquidityRecord[dueDate].newLPTokenAmount -\\n            lastFinalLPRemoveAmount\\n        );\\n      } else {\\n        _mint(\\n          address(this),\\n          lastFinalLPRemoveAmount -\\n            _dailyLiquidityRecord[dueDate].newLPTokenAmount\\n        );\\n      }\\n    }\\n\\n    // Step3: Calculate and change Pool state\\n    // Step3-1: Calculate new LP-Token amount\\n    uint256 newLPTokenAmount = Price.lpTokenByPoolToken(\\n      fixedTotalLPTokenSupply,\\n      fixedPoolLiquidity,\\n      dueDateAddAmount\\n    );\\n\\n    // Step3-2: Calculate remove Pool Liquidity Fee\\n    uint256 removeLiquidityFee = Price.mulE4(\\n      dueDateRemoveAmount,\\n      removeLiquidityFeeRate\\n    );\\n\\n    uint256 finalLPRemoveAmount = dueDateRemoveAmount - removeLiquidityFee;\\n\\n    // Step3-3: Calculate actual remove Pool Liquidity\\n    uint256 removePoolTokenAmount = Price.poolTokenByLPToken(\\n      fixedTotalLPTokenSupply,\\n      fixedPoolLiquidity,\\n      finalLPRemoveAmount\\n    );\\n\\n    // Step3-4: Change Pool state\\n    _editPoolLiquidity(dueDateAddAmount, removePoolTokenAmount);\\n    if (newLPTokenAmount >= finalLPRemoveAmount) {\\n      _mint(address(this), newLPTokenAmount - finalLPRemoveAmount);\\n    } else {\\n      _burn(address(this), finalLPRemoveAmount - newLPTokenAmount);\\n    }\\n\\n    // Step4: Record latest daily liquidity record\\n    _dailyLiquidityRecord[dueDate].isRecorded = true;\\n    _dailyLiquidityRecord[dueDate]\\n      .totalLPTokenSupplySnapshot = fixedTotalLPTokenSupply;\\n    _dailyLiquidityRecord[dueDate].poolLiquiditySnapshot = fixedPoolLiquidity;\\n    _dailyLiquidityRecord[dueDate].newLPTokenAmount = newLPTokenAmount;\\n    _dailyLiquidityRecord[dueDate]\\n      .removePoolTokenAmount = removePoolTokenAmount;\\n    _dailyLiquidityRecord[dueDate].removeLiquidityFee = removeLiquidityFee;\\n\\n    // Step5: Emit events\\n    emit TakeSnapshot(\\n      dueDate,\\n      fixedTotalLPTokenSupply,\\n      fixedPoolLiquidity,\\n      dueDateAddAmount,\\n      finalLPRemoveAmount,\\n      removeLiquidityFee\\n    );\\n    emit LiquidityChange(\\n      poolLiquidity,\\n      totalSupply(),\\n      Price.lpTokenPrice(totalSupply(), poolLiquidity)\\n    );\\n  }\\n\\n  function getLiquidityChangeRequest(\\n    uint256 requestId\\n  ) external view returns (LiquidityChangeRequest memory) {\\n    return _liquidityChangeRequest[requestId];\\n  }\\n\\n  function getDailyLiquidityRecord(\\n    uint256 date\\n  ) external view returns (DailyLiquidityRecord memory) {\\n    return _dailyLiquidityRecord[date];\\n  }\\n\\n  function _sendPoolToken(address to, uint256 amount) internal {\\n    uint256 sendAmount = Price.convertDecimal(amount, 18, poolTokenDecimals);\\n\\n    IERC20(poolToken).safeTransfer(to, sendAmount);\\n  }\\n\\n  function _chargePoolToken(address from, uint256 amount) internal {\\n    address poolToken = poolToken;\\n    uint256 balanceBefore = IERC20(poolToken).balanceOf(address(this));\\n\\n    uint256 chargeAmount = Price.convertDecimal(amount, 18, poolTokenDecimals);\\n\\n    IERC20(poolToken).safeTransferFrom(from, address(this), chargeAmount);\\n\\n    require(\\n      IERC20(poolToken).balanceOf(address(this)) >=\\n        (balanceBefore + chargeAmount),\\n      \\\"F-CPT\\\" // Failed to charge PoolToken\\n    );\\n  }\\n\\n  function _mintLpByPoolToken(uint256 amount) internal {\\n    uint256 newLpTokenAmount = Price.lpTokenByPoolToken(\\n      totalSupply(),\\n      poolLiquidity,\\n      amount\\n    );\\n\\n    _mint(official, newLpTokenAmount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Pool/PoolPositionHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\nimport \\\"../library/BasicMaths.sol\\\";\\nimport \\\"./interface/IPoolPositionHandler.sol\\\";\\nimport \\\"./PoolTradingPairHandler.sol\\\";\\n\\ncontract PoolPositionHandler is IPoolPositionHandler, PoolTradingPairHandler {\\n  using BasicMaths for uint256;\\n  using BasicMaths for bool;\\n  using ECDSA for bytes32;\\n  using SafeERC20 for IERC20;\\n  using Counters for Counters.Counter;\\n\\n  Counters.Counter private _positionIdCounter;\\n\\n  mapping(uint256 => bool) private _signatures;\\n  mapping(uint256 => Position) private _positions;\\n\\n  constructor(\\n    string memory name_,\\n    string memory symbol_,\\n    address poolToken_,\\n    address cryptocurrencyToPoolTokenOracle_,\\n    bool isCryptocurrencyToPoolTokenReverted_\\n  )\\n    PoolTradingPairHandler(\\n      name_,\\n      symbol_,\\n      poolToken_,\\n      cryptocurrencyToPoolTokenOracle_,\\n      isCryptocurrencyToPoolTokenReverted_\\n    )\\n  {}\\n\\n  function openPosition(OpenPositionInput memory input) public {\\n    require(\\n      input.leverage >= minLeverage && input.leverage <= maxLeverage,\\n      \\\"I-LVR\\\" // Invalid leverage\\n    );\\n    require(input.margin >= minOpenAmount, \\\"I-MGN\\\"); // Invalid margin\\n    require(\\n      input.direction == uint8(Direction.Long) ||\\n        input.direction == uint8(Direction.Short),\\n      \\\"I-DIR\\\" // Invalid direction\\n    );\\n\\n    _requireTradingPairActive(input.tradingPairId);\\n\\n    _chargePoolToken(msg.sender, input.margin);\\n\\n    Position memory newPosition = Position({\\n      tradingPairId: input.tradingPairId,\\n      openPrice: input.preBillPrice,\\n      initMargin: input.margin,\\n      extraMargin: 0,\\n      openRebase: 0,\\n      owner: msg.sender,\\n      openBlock: 0,\\n      leverage: uint16(input.leverage),\\n      direction: uint8(input.direction)\\n    });\\n\\n    uint256 positionSize = 0;\\n\\n    // if not PreBill\\n    if (input.signature.length != 0) {\\n      require(poolLiquidity > 0, \\\"I-LQD\\\"); // No Liquidity\\n\\n      _requireValidCexPriceAndValidSignature(\\n        uint256(CexUsage.OpenPosition),\\n        input.tradingPairId,\\n        input.cexPrice,\\n        input.signTimestamp,\\n        input.signature\\n      );\\n\\n      (uint256 openPrice, uint256 openRebase) = _openPosition(\\n        input.tradingPairId,\\n        input.margin,\\n        input.cexPrice,\\n        input.leverage,\\n        input.direction\\n      );\\n\\n      newPosition.openPrice = openPrice;\\n      newPosition.openRebase = openRebase;\\n      newPosition.openBlock = uint64(block.number);\\n\\n      positionSize = getPositionSize(input.margin * input.leverage, openPrice);\\n    }\\n\\n    _positionIdCounter.increment();\\n    uint256 positionId = _positionIdCounter.current();\\n    _positions[positionId] = newPosition;\\n\\n    emit OpenPosition(positionId, newPosition, positionSize);\\n  }\\n\\n  function _openPosition(\\n    bytes32 tradingPairId,\\n    uint256 margin,\\n    uint256 cexPrice,\\n    uint256 leverage,\\n    uint256 direction\\n  ) internal returns (uint256 openPrice, uint256 openRebase) {\\n    _rebase();\\n\\n    uint256 positionAmount = margin * leverage;\\n    bool isLong = isDirectionLong(direction);\\n    {\\n      uint256 poolLongAmount = poolLongAmount;\\n      uint256 poolShortAmount = poolShortAmount;\\n\\n      if (isLong) {\\n        poolLongAmount += positionAmount;\\n      } else {\\n        poolShortAmount += positionAmount;\\n      }\\n\\n      require(\\n        poolLongAmount.diff(poolShortAmount) <=\\n          Price.mulE4(poolLiquidity, prohibitOpenDelta),\\n        \\\"I-NPOS\\\" // Invalid Nacked position\\n      );\\n\\n      uint16 lpDiffDeviation = getLpDiffDivation(\\n        isLong,\\n        poolLongAmount,\\n        poolShortAmount\\n      );\\n\\n      uint16 ladderDevition = getLadderDivation(positionAmount);\\n\\n      uint256 finalDevition = ladderDevition > lpDiffDeviation\\n        ? ladderDevition\\n        : lpDiffDeviation;\\n\\n      openPrice = isLong\\n        ? cexPrice + Price.mulE4(cexPrice, finalDevition)\\n        : cexPrice - Price.mulE4(cexPrice, finalDevition);\\n    }\\n\\n    uint256 positionSize = Price.divE18(positionAmount, openPrice);\\n\\n    TradingPair memory tradingPair = tradingPairOf(tradingPairId); // Need to be optimized\\n\\n    if (isLong) {\\n      tradingPair.totalLongSize += positionSize;\\n      _updatePoolLongAmount(positionAmount, 0);\\n      openRebase = accumulatedPoolRebaseLong;\\n    } else {\\n      tradingPair.totalShortSize += positionSize;\\n      _updatePoolShortAmount(positionAmount, 0);\\n      openRebase = accumulatedPoolRebaseShort;\\n    }\\n\\n    _updateTradingPair(tradingPairId, tradingPair);\\n  }\\n\\n  function addMargin(uint256 positionId, uint256 margin) external {\\n    Position memory position = _positions[positionId];\\n    _requirePositionOpened(position.openBlock);\\n\\n    require(msg.sender == position.owner, \\\"O-O\\\"); // Only Owner\\n    _requireTradingPairActive(position.tradingPairId);\\n    _chargePoolToken(msg.sender, margin);\\n\\n    _positions[positionId].extraMargin += margin;\\n\\n    uint256 totalMargin = position.initMargin +\\n      _positions[positionId].extraMargin;\\n    emit AddMargin(positionId, margin, totalMargin);\\n  }\\n\\n  function closePosition(ClosePositionInput memory input) external {\\n    Position memory position = _positions[input.positionId];\\n    _requirePositionOpened(position.openBlock);\\n\\n    _requireCallerIsOwnerOrValidExecutor(position.owner);\\n\\n    _requireTradingPairActive(position.tradingPairId);\\n\\n    _requireValidCexPriceAndValidSignature(\\n      uint256(CexUsage.ClosePosition),\\n      position.tradingPairId,\\n      input.cexPrice,\\n      input.signTimestamp,\\n      input.signature\\n    );\\n\\n    _rebase();\\n\\n    TradingPair memory tradingPair = tradingPairOf(position.tradingPairId);\\n\\n    bool isClosedByExecutor = msg.sender != position.owner;\\n    PositionCloseInfo memory positionCloseInfo = getPositionValue(\\n      isClosedByExecutor,\\n      input.cexPrice,\\n      position,\\n      tradingPair\\n    );\\n\\n    _updateTradingPair(position.tradingPairId, tradingPair);\\n\\n    delete _positions[input.positionId];\\n\\n    uint256 totalMargin = position.initMargin + position.extraMargin;\\n    if (positionCloseInfo.transferOut > (poolLiquidity + totalMargin)) {\\n      positionCloseInfo.transferOut = poolLiquidity + totalMargin;\\n    }\\n\\n    if (positionCloseInfo.transferOut > 0 && input.closeType != 3) {\\n      _sendPoolToken(position.owner, positionCloseInfo.transferOut);\\n    }\\n\\n    _sendPoolToken(vault, positionCloseInfo.serviceFee);\\n\\n    uint256 protocolFee = Price.mulE4(\\n      (positionCloseInfo.closeFee + positionCloseInfo.fundingFee),\\n      protocolFeeRate\\n    );\\n    _mintLpByPoolToken(protocolFee);\\n\\n    uint256 serviceAndExecutorFee = positionCloseInfo.serviceFee +\\n      positionCloseInfo.executorFee;\\n\\n    if (input.closeType == 3) {\\n      _editPoolLiquidity(\\n        totalMargin + positionCloseInfo.transferOut,\\n        serviceAndExecutorFee\\n      );\\n    } else {\\n      _editPoolLiquidity(\\n        totalMargin,\\n        positionCloseInfo.transferOut + serviceAndExecutorFee\\n      );\\n    }\\n\\n    positionCloseInfo.closeType = input.closeType;\\n    positionCloseInfo.positionId = input.positionId;\\n    positionCloseInfo.closePrice = input.cexPrice;\\n    positionCloseInfo.executor = isClosedByExecutor ? msg.sender : address(0);\\n\\n    emit ClosePosition(positionCloseInfo);\\n    emit LiquidityChange(\\n      poolLiquidity,\\n      totalSupply(),\\n      Price.lpTokenPrice(totalSupply(), poolLiquidity)\\n    );\\n  }\\n\\n  function exit(uint256 positionId) external {\\n    _rebase();\\n    Position memory position = _positions[positionId];\\n    _requirePositionOpened(position.openBlock);\\n\\n    _requireCallerIsOwnerOrValidExecutor(position.owner);\\n    _requireTradingPairNotActive(position.tradingPairId);\\n\\n    bool isClosedByExecutor = msg.sender != position.owner;\\n    uint256 executorFee;\\n    if (isClosedByExecutor) {\\n      executorFee = _chargeExecutorFee(closePositionGasUsage);\\n    }\\n\\n    uint256 positionAmount = position.initMargin * position.leverage;\\n    if (isDirectionLong(position.direction)) {\\n      _updatePoolLongAmount(0, positionAmount);\\n    } else {\\n      _updatePoolShortAmount(0, positionAmount);\\n    }\\n\\n    _sendPoolToken(\\n      position.owner,\\n      position.initMargin + position.extraMargin - executorFee\\n    );\\n\\n    delete _positions[positionId];\\n    emit Exit(positionId, msg.sender);\\n  }\\n\\n  function execPreBill(ExecPreBillInput memory input) external {\\n    Position memory position = _positions[input.positionId];\\n    _requirePositionNotOpened(position.openBlock);\\n\\n    _requireTradingPairActive(position.tradingPairId);\\n    _requireCallerIsOwnerOrValidExecutor(position.owner);\\n\\n    _requireValidCexPriceAndValidSignature(\\n      uint256(CexUsage.OpenPosition),\\n      position.tradingPairId,\\n      input.cexPrice,\\n      input.signTimestamp,\\n      input.signature\\n    );\\n\\n    uint256 executorFee;\\n    bool isClosedByExecutor = msg.sender != position.owner;\\n\\n    if (isClosedByExecutor) {\\n      executorFee = _chargeExecutorFee(execPreBillGasUsage);\\n    }\\n\\n    uint256 initMarginWithoutExecutorFee = position.initMargin - executorFee;\\n    (uint256 openPrice, uint256 openRebase) = _openPosition(\\n      position.tradingPairId,\\n      initMarginWithoutExecutorFee,\\n      input.cexPrice,\\n      position.leverage,\\n      position.direction\\n    );\\n\\n    position.openPrice = openPrice;\\n    position.openRebase = openRebase;\\n    position.openBlock = uint64(block.number);\\n    position.initMargin = initMarginWithoutExecutorFee;\\n\\n    _positions[input.positionId].openPrice = openPrice;\\n    _positions[input.positionId].openRebase = openRebase;\\n    _positions[input.positionId].openBlock = uint64(block.number);\\n    _positions[input.positionId].initMargin = initMarginWithoutExecutorFee;\\n\\n    address executor = isClosedByExecutor ? msg.sender : address(0);\\n\\n    uint256 positionSize = getPositionSize(\\n      initMarginWithoutExecutorFee * position.leverage,\\n      openPrice\\n    );\\n    emit ExecPreBill(\\n      input.positionId,\\n      position,\\n      executor,\\n      executorFee,\\n      positionSize\\n    );\\n  }\\n\\n  function cancelPreBill(uint256 positionId) public {\\n    Position memory position = _positions[positionId];\\n\\n    _requirePositionNotOpened(position.openBlock);\\n    _requireCallerIsOwnerOrValidExecutor(position.owner);\\n    _sendPoolToken(position.owner, position.initMargin);\\n\\n    delete _positions[positionId];\\n    emit CancelPrebill(positionId);\\n  }\\n\\n  function _chargeExecutorFee(uint256 baseGasUsage) internal returns (uint256) {\\n    // Step 1: Get charged gas\\n    uint256 usedGasAmount = baseGasUsage +\\n      Price.mulE4(baseGasUsage, executorFeeRate);\\n\\n    // Step 2: Gas mainCrypto/poolToken price\\n    uint256 mainCryptoPriceToPoolToken = uint256(\\n      AggregatorV2V3Interface(cryptocurrencyToPoolTokenOracle).latestAnswer()\\n    );\\n\\n    // Step 3: Calculate executor fee in gas amount and pool token\\n    uint256 finalExecutorFeeInGasAmount = usedGasAmount * tx.gasprice;\\n    uint256 finalExecutorFeeInPoolToken;\\n    if (18 >= poolTokenDecimals) {\\n      finalExecutorFeeInPoolToken = isCryptocurrencyToPoolTokenReverted\\n        ? (finalExecutorFeeInGasAmount *\\n          (10 ** cryptocurrencyToPoolTokenOracleDecimals)) /\\n          mainCryptoPriceToPoolToken\\n        : (finalExecutorFeeInGasAmount * mainCryptoPriceToPoolToken) /\\n          (10 ** cryptocurrencyToPoolTokenOracleDecimals);\\n    }\\n\\n    // Step 4: Send BNB to executor\\n    payable(msg.sender).transfer(finalExecutorFeeInGasAmount);\\n\\n    return finalExecutorFeeInPoolToken;\\n  }\\n\\n  function _requireValidCexPriceAndValidSignature(\\n    uint256 cexUsage,\\n    bytes32 tradingPairId,\\n    uint256 cexPrice,\\n    uint256 signTimestamp,\\n    bytes memory signature\\n  ) internal {\\n    require(!_signatures[signTimestamp], \\\"Used SIG\\\"); // Used SIG\\n    _signatures[signTimestamp] = true;\\n\\n    // Verify CexPrice\\n    uint256 dexPrice = uint256(\\n      AggregatorV2V3Interface(_getTradingPairOracle(tradingPairId))\\n        .latestAnswer()\\n    );\\n\\n    dexPrice = Price.convertDecimal(\\n      dexPrice,\\n      _getTradingPairOracleDecimals(tradingPairId),\\n      18\\n    );\\n\\n    uint256 priceDelta = dexPrice.diff(cexPrice);\\n\\n    require(\\n      ((priceDelta * 100) / dexPrice) < cexPriceToleranceDeviation,\\n      \\\"I-CP\\\" //Invalid CexPrice\\n    );\\n\\n    // Verify SIG\\n    uint256 blockTimestamp = block.timestamp * 1000;\\n    require(\\n      signTimestamp <= blockTimestamp &&\\n        blockTimestamp - signTimestamp <= cexPriceLatency * 1000,\\n      \\\"I-SIGTS\\\" //Invalid SIG Timestamp\\n    );\\n\\n    bytes32 hash = keccak256(\\n      abi.encodePacked(\\n        \\\"CexPrice\\\",\\n        msg.sender,\\n        cexUsage,\\n        tradingPairId,\\n        cexPrice,\\n        uint64(signTimestamp)\\n      )\\n    );\\n\\n    address signer = hash.toEthSignedMessageHash().recover(signature);\\n    require(isValidExecutor(signer), \\\"I-SIG\\\"); //Invalid SIG\\n  }\\n\\n  function _requireCallerIsOwnerOrValidExecutor(address owner) internal view {\\n    require(\\n      msg.sender == owner || isValidExecutor(msg.sender),\\n      \\\"O-O/E\\\" // Only Oner or Executor\\n    );\\n  }\\n\\n  function _requirePositionOpened(uint256 openBlock) internal pure {\\n    require(openBlock > 0, \\\"I-NOP\\\"); // Not Opened\\n  }\\n\\n  function _requirePositionNotOpened(uint256 openBlock) internal pure {\\n    require(openBlock == 0, \\\"I-OP\\\"); // Opened\\n  }\\n\\n  function isDirectionLong(uint256 direction) public pure returns (bool) {\\n    return direction == uint256(Direction.Long);\\n  }\\n\\n  function getPositionSize(\\n    uint256 positionAmount,\\n    uint256 openPrice\\n  ) public pure returns (uint256) {\\n    return Price.divE18(positionAmount, openPrice);\\n  }\\n\\n  function getPositionValue(\\n    bool isClosedByExecutor,\\n    uint256 cexPrice,\\n    Position memory position,\\n    TradingPair memory tradingPair\\n  ) public returns (PositionCloseInfo memory positionCloseInfo) {\\n    uint256 positionAmount = position.initMargin * position.leverage;\\n    uint256 positionSize = getPositionSize(positionAmount, position.openPrice);\\n\\n    positionCloseInfo.pnl = Price.mulE18(\\n      positionSize,\\n      cexPrice.diff(position.openPrice)\\n    );\\n\\n    {\\n      uint256 serviceFeeRate = ((block.number - position.openBlock) <=\\n        minHoldingBlocks)\\n        ? minHoldingBlocksFeeRate\\n        : serviceFeeRate;\\n\\n      positionCloseInfo.serviceFee = Price.mulE4(\\n        positionAmount,\\n        serviceFeeRate\\n      );\\n\\n      positionCloseInfo.closeFee = Price.mulE4(positionAmount, closeFeeRate);\\n    }\\n\\n    if (isClosedByExecutor) {\\n      positionCloseInfo.executorFee = _chargeExecutorFee(closePositionGasUsage);\\n    }\\n\\n    bool isLong = isDirectionLong(position.direction);\\n\\n    if (isLong) {\\n      positionCloseInfo.fundingFee = Price.calFundingFee(\\n        positionAmount,\\n        (accumulatedPoolRebaseLong - position.openRebase)\\n      );\\n\\n      tradingPair.totalLongSize -= positionSize;\\n      _updatePoolLongAmount(0, positionAmount);\\n    } else {\\n      positionCloseInfo.fundingFee = Price.calFundingFee(\\n        positionAmount,\\n        (accumulatedPoolRebaseShort - position.openRebase)\\n      );\\n\\n      tradingPair.totalShortSize -= positionSize;\\n      _updatePoolShortAmount(0, positionAmount);\\n    }\\n\\n    positionCloseInfo.isProfit = (cexPrice >= position.openPrice) == isLong;\\n\\n    positionCloseInfo.transferOut = positionCloseInfo\\n      .isProfit\\n      .addOrSub2Zero(\\n        position.initMargin + position.extraMargin,\\n        positionCloseInfo.pnl\\n      )\\n      .sub2Zero(positionCloseInfo.closeFee)\\n      .sub2Zero(positionCloseInfo.fundingFee)\\n      .sub2Zero(positionCloseInfo.serviceFee)\\n      .sub2Zero(positionCloseInfo.executorFee);\\n  }\\n\\n  function getLpDiffDivation(\\n    bool isLong,\\n    uint256 poolLongAmount,\\n    uint256 poolShortAmount\\n  ) public view returns (uint16 devitaion) {\\n    if (\\n      (poolLongAmount > poolShortAmount) == (isLong) ||\\n      (poolLongAmount < poolShortAmount) == (!isLong)\\n    ) {\\n      uint256 lpDiffRatio = Price.divE18(\\n        poolLongAmount.diff(poolShortAmount),\\n        poolLiquidity\\n      );\\n\\n      LadderDeviation memory deviationInfo = lpDiffDeviation(0);\\n      while (deviationInfo.next < lpDiffRatio) {\\n        deviationInfo = lpDiffDeviation(deviationInfo.next);\\n      }\\n      devitaion = deviationInfo.deviationRate;\\n    }\\n  }\\n\\n  function getLadderDivation(\\n    uint256 positionAmount\\n  ) public view returns (uint16) {\\n    LadderDeviation memory deviationInfo = ladderDeviation(0);\\n\\n    while (deviationInfo.next < positionAmount) {\\n      deviationInfo = ladderDeviation(deviationInfo.next);\\n    }\\n\\n    return deviationInfo.deviationRate;\\n  }\\n\\n  function getPosition(\\n    uint256 positionId\\n  ) external view returns (Position memory) {\\n    return _positions[positionId];\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Pool/PoolStorageHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\nimport \\\"./interface/IPoolStorageHandler.sol\\\";\\nimport \\\"./library/TradingHelper.sol\\\";\\nimport \\\"./PoolStructs.sol\\\";\\n\\ncontract PoolStorageHandler is IPoolStorageHandler, Context, Ownable {\\n  uint256 public poolLiquidity;\\n  uint256 public poolLongAmount;\\n  uint256 public poolShortAmount;\\n  uint256 public accumulatedPoolRebaseLong;\\n  uint256 public accumulatedPoolRebaseShort;\\n  uint64 public lastRebaseBlock;\\n\\n  uint240 public minOpenAmount;\\n  uint16 public executorFeeRate;\\n\\n  address public poolToken;\\n  uint8 public poolTokenDecimals;\\n  uint88 public closePositionGasUsage;\\n\\n  address public official;\\n  bool public isLiquidityProviderLimited;\\n  uint88 public execPreBillGasUsage;\\n\\n  uint16 public removeLiquidityFeeRate;\\n  uint16 public cexPriceToleranceDeviation;\\n  uint16 public prohibitOpenDelta;\\n  uint16 public protocolFeeRate;\\n  uint16 public serviceFeeRate;\\n  uint16 public closeFeeRate;\\n  uint8 public minLeverage;\\n  uint16 public maxLeverage;\\n  uint16 public imbalanceThreshold;\\n  uint32 public rebasecCoefficient;\\n  uint64 public cexPriceLatency;\\n\\n  address public cryptocurrencyToPoolTokenOracle;\\n  uint8 public cryptocurrencyToPoolTokenOracleDecimals;\\n  bool public isCryptocurrencyToPoolTokenReverted;\\n  uint16 public minHoldingBlocks;\\n  uint16 public minHoldingBlocksFeeRate;\\n\\n  address public vault;\\n\\n  mapping(uint240 => LadderDeviation) private _ladderDeviations;\\n  mapping(uint240 => LadderDeviation) private _lpDiffDeviations;\\n  mapping(address => bool) private _validExecutors;\\n  mapping(address => bool) private _validLiquidityProviders;\\n\\n  constructor(\\n    address poolToken_,\\n    address cryptocurrencyToPoolTokenOracle_,\\n    bool isCryptocurrencyToPoolTokenReverted_\\n  ) {\\n    poolToken = poolToken_;\\n    poolTokenDecimals = ERC20(poolToken_).decimals();\\n\\n    cryptocurrencyToPoolTokenOracle = cryptocurrencyToPoolTokenOracle_;\\n    cryptocurrencyToPoolTokenOracleDecimals = AggregatorV2V3Interface(\\n      cryptocurrencyToPoolTokenOracle_\\n    ).decimals();\\n    isCryptocurrencyToPoolTokenReverted = isCryptocurrencyToPoolTokenReverted_;\\n  }\\n\\n  function ladderDeviation(\\n    uint240 key\\n  ) public view returns (LadderDeviation memory) {\\n    return _ladderDeviations[key];\\n  }\\n\\n  function lpDiffDeviation(\\n    uint240 key\\n  ) public view returns (LadderDeviation memory) {\\n    return _lpDiffDeviations[key];\\n  }\\n\\n  function isValidExecutor(address addr) public view returns (bool) {\\n    return _validExecutors[addr];\\n  }\\n\\n  function isValidLiquidityProvider(address addr) public view returns (bool) {\\n    return _validLiquidityProviders[addr];\\n  }\\n\\n  function setPoolParams(SetPoolParamsInput calldata input) external onlyOwner {\\n    executorFeeRate = uint16(input.executorFeeRate);\\n    closePositionGasUsage = uint88(input.closePositionGasUsage);\\n    execPreBillGasUsage = uint88(input.execPreBillGasUsage);\\n    minOpenAmount = uint128(input.minOpenAmount);\\n    official = input.official;\\n    vault = input.vault;\\n    removeLiquidityFeeRate = uint16(input.removeLiquidityFeeRate);\\n    isLiquidityProviderLimited = input.isLiquidityProviderLimited;\\n    cexPriceToleranceDeviation = uint16(input.cexPriceToleranceDeviation);\\n    prohibitOpenDelta = uint16(input.prohibitOpenDelta);\\n    protocolFeeRate = uint16(input.protocolFeeRate);\\n    serviceFeeRate = uint16(input.serviceFeeRate);\\n    closeFeeRate = uint16(input.closeFeeRate);\\n    minLeverage = uint8(input.minLeverage);\\n    maxLeverage = uint16(input.maxLeverage);\\n    imbalanceThreshold = uint16(input.imbalanceThreshold);\\n    cexPriceLatency = uint64(input.cexPriceLatency);\\n    rebasecCoefficient = uint32(input.rebasecCoefficient);\\n    minHoldingBlocks = uint16(input.minHoldingBlocks);\\n    minHoldingBlocksFeeRate = uint16(input.minHoldingBlocksFeeRate);\\n\\n    emit SetPoolParams(input);\\n  }\\n\\n  function _rebase() internal {\\n    CalRebaseDeltaInput memory calRebaseDeltaInput = CalRebaseDeltaInput({\\n      poolLongAmount: poolLongAmount,\\n      poolShortAmount: poolShortAmount,\\n      poolLiquidity: poolLiquidity,\\n      imbalanceThreshold: imbalanceThreshold,\\n      lastRebaseBlock: lastRebaseBlock,\\n      rebasecCoefficient: rebasecCoefficient\\n    });\\n\\n    (uint256 rebaseLongDelta, uint256 rebaseShortDelta) = TradingHelper\\n      .calRebaseDelta(calRebaseDeltaInput);\\n\\n    accumulatedPoolRebaseLong = accumulatedPoolRebaseLong + rebaseLongDelta;\\n    accumulatedPoolRebaseShort = accumulatedPoolRebaseShort + rebaseShortDelta;\\n\\n    lastRebaseBlock = uint64(block.number);\\n\\n    emit UpdatePoolRebaseLongShort(\\n      accumulatedPoolRebaseLong,\\n      accumulatedPoolRebaseShort,\\n      block.number\\n    );\\n  }\\n\\n  function _editPoolLiquidity(\\n    uint256 addAmount,\\n    uint256 removeAmount\\n  ) internal {\\n    poolLiquidity = poolLiquidity + addAmount - removeAmount;\\n  }\\n\\n  function _updatePoolLongAmount(\\n    uint256 addAmount,\\n    uint256 removeAmount\\n  ) internal {\\n    poolLongAmount = poolLongAmount + addAmount - removeAmount;\\n    emit UpdatePoolLongShortAmount(poolLongAmount, poolShortAmount);\\n  }\\n\\n  function _updatePoolShortAmount(\\n    uint256 addAmount,\\n    uint256 removeAmount\\n  ) internal {\\n    poolShortAmount = poolShortAmount + addAmount - removeAmount;\\n    emit UpdatePoolLongShortAmount(poolLongAmount, poolShortAmount);\\n  }\\n\\n  function setLadderDeviations(\\n    SetLadderDeviationInput[] memory inputs\\n  ) public onlyOwner {\\n    SetLadderDeviationInput memory input;\\n\\n    for (uint256 i; i < inputs.length; ++i) {\\n      input = inputs[i];\\n      require(input.next > input.amount, \\\"I-NXT\\\"); // Invalid Next\\n\\n      LadderDeviation memory deviationInfo = LadderDeviation({\\n        deviationRate: uint16(input.deviationRate),\\n        next: uint240(input.next)\\n      });\\n\\n      _ladderDeviations[uint240(input.amount)] = deviationInfo;\\n    }\\n\\n    emit SetLadderDeviations(inputs);\\n  }\\n\\n  function setLpDiffDeviations(\\n    SetLadderDeviationInput[] memory inputs\\n  ) public onlyOwner {\\n    SetLadderDeviationInput memory input;\\n\\n    for (uint256 i; i < inputs.length; ++i) {\\n      input = inputs[i];\\n      require(input.next > input.amount, \\\"I-NXT\\\"); // Invalid Next\\n\\n      LadderDeviation memory deviationInfo = LadderDeviation({\\n        deviationRate: uint16(input.deviationRate),\\n        next: uint240(input.next)\\n      });\\n      _lpDiffDeviations[uint240(input.amount)] = deviationInfo;\\n    }\\n\\n    emit SetLpDiffDeviations(inputs);\\n  }\\n\\n  function setValidExecutors(\\n    address[] calldata addrs,\\n    bool isValid\\n  ) public onlyOwner {\\n    for (uint256 i = 0; i < addrs.length; ++i) {\\n      _validExecutors[addrs[i]] = isValid;\\n      emit SetIsValidExecutor(addrs[i], isValid);\\n    }\\n  }\\n\\n  function setValidLiquidityProvier(\\n    address addr,\\n    bool isValid\\n  ) public onlyOwner {\\n    _validLiquidityProviders[addr] = isValid;\\n    emit SetisValidLiquidityProvider(addr, isValid);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Pool/PoolStructs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nenum Direction {\\n  Long,\\n  Short\\n}\\n\\nenum CexUsage {\\n  OpenPosition,\\n  ClosePosition\\n}\\n\\nstruct LiquidityChangeRequest {\\n  address user;\\n  uint64 dueDate;\\n  bool isAdd;\\n  uint256 amount;\\n}\\n\\nstruct DailyLiquidityRecord {\\n  bool isRecorded;\\n  uint256 accumAddAmount;\\n  uint256 accumRemoveAmount;\\n  uint256 poolLiquiditySnapshot;\\n  uint256 totalLPTokenSupplySnapshot;\\n  uint256 newLPTokenAmount;\\n  uint256 removePoolTokenAmount;\\n  uint256 removeLiquidityFee;\\n}\\n\\nstruct TradingPair {\\n  address oracleAddr;\\n  uint8 oracleDecimals;\\n  uint256 totalLongSize;\\n  uint256 totalShortSize;\\n}\\n\\nstruct Strategy {\\n  uint16 strategyType;\\n  uint240 value;\\n}\\n\\nstruct Position {\\n  bytes32 tradingPairId;\\n  uint256 openPrice;\\n  uint256 initMargin;\\n  uint256 extraMargin;\\n  uint256 openRebase;\\n  address owner;\\n  uint64 openBlock;\\n  uint16 leverage;\\n  uint8 direction;\\n}\\n\\nstruct PositionCloseInfo {\\n  uint256 positionId;\\n  uint256 closePrice;\\n  address executor;\\n  bool isProfit;\\n  uint256 closeType;\\n  uint256 transferOut;\\n  uint256 closeFee;\\n  uint256 serviceFee;\\n  uint256 fundingFee;\\n  uint256 executorFee;\\n  uint256 pnl;\\n}\\n\\nstruct LadderDeviation {\\n  uint16 deviationRate;\\n  uint240 next;\\n}\\n\\n// Input Series\\nstruct OpenPositionInput {\\n  bytes32 tradingPairId;\\n  uint256 margin;\\n  uint256 preBillPrice;\\n  uint256 cexPrice;\\n  uint256 signTimestamp;\\n  uint256 leverage;\\n  uint256 direction;\\n  bytes signature;\\n}\\n\\nstruct ClosePositionInput {\\n  uint256 positionId;\\n  uint256 cexPrice;\\n  uint256 signTimestamp;\\n  bytes signature;\\n  uint256 closeType;\\n}\\n\\nstruct ExecPreBillInput {\\n  uint256 positionId;\\n  uint256 cexPrice;\\n  uint256 signTimestamp;\\n  bytes signature;\\n}\\n\\nstruct CalRebaseDeltaInput {\\n  uint256 poolLongAmount;\\n  uint256 poolShortAmount;\\n  uint256 poolLiquidity;\\n  uint256 imbalanceThreshold;\\n  uint256 lastRebaseBlock;\\n  uint256 rebasecCoefficient;\\n}\\n\\nstruct SetPoolParamsInput {\\n  uint256 executorFeeRate;\\n  uint256 closePositionGasUsage;\\n  uint256 execPreBillGasUsage;\\n  uint256 minOpenAmount;\\n  address official;\\n  uint256 removeLiquidityFeeRate;\\n  bool isLiquidityProviderLimited;\\n  uint256 cexPriceToleranceDeviation;\\n  uint256 prohibitOpenDelta;\\n  uint256 protocolFeeRate;\\n  uint256 serviceFeeRate;\\n  uint256 closeFeeRate;\\n  uint256 minLeverage;\\n  uint256 maxLeverage;\\n  uint256 imbalanceThreshold;\\n  uint256 rebasecCoefficient;\\n  uint256 cexPriceLatency;\\n  uint256 minHoldingBlocks;\\n  uint256 minHoldingBlocksFeeRate;\\n  address vault;\\n}\\n\\nstruct SetLadderDeviationInput {\\n  uint256 amount;\\n  uint256 deviationRate;\\n  uint256 next;\\n}\\n\"\r\n    },\r\n    \"contracts/Pool/PoolTradingPairHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\nimport \\\"./interface/IPoolTradingPairHandler.sol\\\";\\nimport \\\"./PoolLiquidityHandler.sol\\\";\\n\\ncontract PoolTradingPairHandler is\\n  IPoolTradingPairHandler,\\n  PoolLiquidityHandler\\n{\\n  int32 private constant STANDARD_ERC20_DECIMALS = 18;\\n\\n  mapping(bytes32 => TradingPair) private _tradingPairs;\\n\\n  constructor(\\n    string memory name_,\\n    string memory symbol_,\\n    address poolToken_,\\n    address cryptocurrencyToPoolTokenOracle_,\\n    bool isCryptocurrencyToPoolTokenReverted_\\n  )\\n    PoolLiquidityHandler(\\n      name_,\\n      symbol_,\\n      poolToken_,\\n      cryptocurrencyToPoolTokenOracle_,\\n      isCryptocurrencyToPoolTokenReverted_\\n    )\\n  {}\\n\\n  function createTradingPair(address oracleAddr) external onlyOwner {\\n    require(oracleAddr != address(0), \\\"I-ORCL\\\"); //Invalid Oracle\\n\\n    bytes32 tradingPairId = getTradingPairId(oracleAddr);\\n    _requireTradingPairNotActive(tradingPairId);\\n\\n    uint8 oracleDecimals = AggregatorV2V3Interface(oracleAddr).decimals();\\n\\n    _tradingPairs[tradingPairId].oracleAddr = oracleAddr;\\n    _tradingPairs[tradingPairId].oracleDecimals = oracleDecimals;\\n\\n    emit CreateTradingPair(oracleAddr, tradingPairId);\\n  }\\n\\n  function _updateTradingPair(\\n    bytes32 tradingPairId,\\n    TradingPair memory tradingPair\\n  ) internal {\\n    _tradingPairs[tradingPairId].totalLongSize = tradingPair.totalLongSize;\\n    _tradingPairs[tradingPairId].totalShortSize = tradingPair.totalShortSize;\\n\\n    emit UpdatedTradingPair(tradingPairId, tradingPair);\\n  }\\n\\n  function deleteTradingPair(bytes32 tradingPairId) external onlyOwner {\\n    _requireTradingPairActive(tradingPairId);\\n\\n    delete _tradingPairs[tradingPairId];\\n    emit DeleteTradingPair(tradingPairId);\\n  }\\n\\n  function getTradingPairId(address oracleAddr) public view returns (bytes32) {\\n    return keccak256(abi.encode(poolToken, oracleAddr));\\n  }\\n\\n  function _requireTradingPairNotActive(bytes32 tradingPairId) internal view {\\n    require(\\n      _tradingPairs[tradingPairId].oracleAddr == address(0),\\n      \\\"I-AP\\\" // Already Active Pair\\n    );\\n  }\\n\\n  function _requireTradingPairActive(bytes32 tradingPairId) internal view {\\n    require(\\n      _tradingPairs[tradingPairId].oracleAddr != address(0),\\n      \\\"I-IAP\\\" // Inactive Pair\\n    );\\n  }\\n\\n  function _getTradingPairOracle(\\n    bytes32 tradingPairId\\n  ) internal view returns (address) {\\n    return _tradingPairs[tradingPairId].oracleAddr;\\n  }\\n\\n  function _getTradingPairOracleDecimals(\\n    bytes32 tradingPairId\\n  ) internal view returns (uint8) {\\n    return _tradingPairs[tradingPairId].oracleDecimals;\\n  }\\n\\n  function tradingPairOf(\\n    bytes32 tradingPairId\\n  ) public view returns (TradingPair memory) {\\n    return _tradingPairs[tradingPairId];\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"poolToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cryptocurrencyToPoolTokenOracle_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCryptocurrencyToPoolTokenReverted_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addMargin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalMargin\",\"type\":\"uint256\"}],\"name\":\"AddMargin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"CancelPrebill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sendAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"dueDate\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isAdd\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct LiquidityChangeRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"ClaimLiquidityChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closePrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isProfit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"closeType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pnl\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct PositionCloseInfo\",\"name\":\"closeInfo\",\"type\":\"tuple\"}],\"name\":\"ClosePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tradingPairId\",\"type\":\"bytes32\"}],\"name\":\"CreateTradingPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tradingPairId\",\"type\":\"bytes32\"}],\"name\":\"DeleteTradingPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"tradingPairId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openRebase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"openBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"leverage\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"direction\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSize\",\"type\":\"uint256\"}],\"name\":\"ExecPreBill\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLPTokenSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenPrice\",\"type\":\"uint256\"}],\"name\":\"LiquidityChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"tradingPairId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openRebase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"openBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"leverage\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"direction\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSize\",\"type\":\"uint256\"}],\"name\":\"OpenPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"dueDate\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isAdd\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct LiquidityChangeRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"RequestLiquidityChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"SetIsValidExecutor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deviationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct SetLadderDeviationInput[]\",\"name\":\"deviationInfos\",\"type\":\"tuple[]\"}],\"name\":\"SetLadderDeviations\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deviationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct SetLadderDeviationInput[]\",\"name\":\"deviationInfos\",\"type\":\"tuple[]\"}],\"name\":\"SetLpDiffDeviations\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"executorFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closePositionGasUsage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"execPreBillGasUsage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOpenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"official\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"removeLiquidityFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLiquidityProviderLimited\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"cexPriceToleranceDeviation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prohibitOpenDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"serviceFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"imbalanceThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebasecCoefficient\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cexPriceLatency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minHoldingBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minHoldingBlocksFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct SetPoolParamsInput\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"SetPoolParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"SetisValidLiquidityProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalLPTokenSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolLiquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAdd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRemove\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"TakeSnapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"longAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shortAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatePoolLongShortAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebaseLong\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebaseShort\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"UpdatePoolRebaseLongShort\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tradingPairId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"oracleAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"oracleDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalLongSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShortSize\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct TradingPair\",\"name\":\"newTradingPair\",\"type\":\"tuple\"}],\"name\":\"UpdatedTradingPair\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accumulatedPoolRebaseLong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatedPoolRebaseShort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"}],\"name\":\"addMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"cancelPreBill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cexPriceLatency\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cexPriceToleranceDeviation\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"claimLiquidityChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeFeeRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cexPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"closeType\",\"type\":\"uint256\"}],\"internalType\":\"struct ClosePositionInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"closePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePositionGasUsage\",\"outputs\":[{\"internalType\":\"uint88\",\"name\":\"\",\"type\":\"uint88\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddr\",\"type\":\"address\"}],\"name\":\"createTradingPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptocurrencyToPoolTokenOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptocurrencyToPoolTokenOracleDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tradingPairId\",\"type\":\"bytes32\"}],\"name\":\"deleteTradingPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"editLiquidityForEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cexPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct ExecPreBillInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"execPreBill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execPreBillGasUsage\",\"outputs\":[{\"internalType\":\"uint88\",\"name\":\"\",\"type\":\"uint88\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executorFeeRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"getDailyLiquidityRecord\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isRecorded\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"accumAddAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumRemoveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolLiquiditySnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLPTokenSupplySnapshot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLPTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removePoolTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removeLiquidityFee\",\"type\":\"uint256\"}],\"internalType\":\"struct DailyLiquidityRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionAmount\",\"type\":\"uint256\"}],\"name\":\"getLadderDivation\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getLiquidityChangeRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"dueDate\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isAdd\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct LiquidityChangeRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"poolLongAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolShortAmount\",\"type\":\"uint256\"}],\"name\":\"getLpDiffDivation\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"devitaion\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"tradingPairId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openRebase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"openBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"leverage\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"direction\",\"type\":\"uint8\"}],\"internalType\":\"struct Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"}],\"name\":\"getPositionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isClosedByExecutor\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"cexPrice\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"tradingPairId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openRebase\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"openBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"leverage\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"direction\",\"type\":\"uint8\"}],\"internalType\":\"struct Position\",\"name\":\"position\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"oracleAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"oracleDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalLongSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShortSize\",\"type\":\"uint256\"}],\"internalType\":\"struct TradingPair\",\"name\":\"tradingPair\",\"type\":\"tuple\"}],\"name\":\"getPositionValue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closePrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isProfit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"closeType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pnl\",\"type\":\"uint256\"}],\"internalType\":\"struct PositionCloseInfo\",\"name\":\"positionCloseInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddr\",\"type\":\"address\"}],\"name\":\"getTradingPairId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"imbalanceThreshold\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCryptocurrencyToPoolTokenReverted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"direction\",\"type\":\"uint256\"}],\"name\":\"isDirectionLong\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidityProviderLimited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isValidExecutor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isValidLiquidityProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint240\",\"name\":\"key\",\"type\":\"uint240\"}],\"name\":\"ladderDeviation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"deviationRate\",\"type\":\"uint16\"},{\"internalType\":\"uint240\",\"name\":\"next\",\"type\":\"uint240\"}],\"internalType\":\"struct LadderDeviation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebaseBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint240\",\"name\":\"key\",\"type\":\"uint240\"}],\"name\":\"lpDiffDeviation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"deviationRate\",\"type\":\"uint16\"},{\"internalType\":\"uint240\",\"name\":\"next\",\"type\":\"uint240\"}],\"internalType\":\"struct LadderDeviation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLeverage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minHoldingBlocks\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minHoldingBlocksFeeRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLeverage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minOpenAmount\",\"outputs\":[{\"internalType\":\"uint240\",\"name\":\"\",\"type\":\"uint240\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"official\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"tradingPairId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preBillPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cexPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"direction\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct OpenPositionInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"openPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLongAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolShortAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prohibitOpenDelta\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebasecCoefficient\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLiquidityFeeRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAdd\",\"type\":\"bool\"}],\"name\":\"requestLiquidityChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceFeeRate\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deviationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"}],\"internalType\":\"struct SetLadderDeviationInput[]\",\"name\":\"inputs\",\"type\":\"tuple[]\"}],\"name\":\"setLadderDeviations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deviationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"}],\"internalType\":\"struct SetLadderDeviationInput[]\",\"name\":\"inputs\",\"type\":\"tuple[]\"}],\"name\":\"setLpDiffDeviations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"executorFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closePositionGasUsage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"execPreBillGasUsage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOpenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"official\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"removeLiquidityFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLiquidityProviderLimited\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"cexPriceToleranceDeviation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prohibitOpenDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"serviceFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"imbalanceThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebasecCoefficient\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cexPriceLatency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minHoldingBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minHoldingBlocksFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"internalType\":\"struct SetPoolParamsInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"setPoolParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"setValidExecutors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"name\":\"setValidLiquidityProvier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dueDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isHardFix\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"hardFixTotalLPSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardFixPoolLiquidity\",\"type\":\"uint256\"}],\"name\":\"takeSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tradingPairId\",\"type\":\"bytes32\"}],\"name\":\"tradingPairOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"oracleAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"oracleDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalLongSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShortSize\",\"type\":\"uint256\"}],\"internalType\":\"struct TradingPair\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Pool", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000000567f2323251f0aab15c8dfb1967e4e8a7d42aee00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014426f726120467574757265204c5020546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000442464c5000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}