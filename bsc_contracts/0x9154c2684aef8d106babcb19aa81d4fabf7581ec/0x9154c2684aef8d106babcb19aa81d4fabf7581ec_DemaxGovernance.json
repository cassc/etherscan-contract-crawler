{"SourceCode": "// Dependency file: contracts/modules/BaseToken.sol\r\n\r\n// pragma solidity >=0.5.16;\r\n\r\ncontract BaseToken {\r\n    address public baseToken;\r\n\r\n    // called after deployment\r\n    function initBaseToken(address _baseToken) internal {\r\n        require(baseToken == address(0), 'INITIALIZED');\r\n        require(_baseToken != address(0), 'ADDRESS_IS_ZERO');\r\n        baseToken = _baseToken;  // it should be dgas token address\r\n    }\r\n}\r\n// Dependency file: contracts/interfaces/IERC20.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n// Dependency file: contracts/libraries/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n// Dependency file: contracts/modules/Ownable.sol\r\n\r\n// pragma solidity >=0.5.16;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, 'Ownable: FORBIDDEN');\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), 'Ownable: INVALID_ADDRESS');\r\n        emit OwnerChanged(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n}\r\n\r\n// Dependency file: contracts/modules/DgasStaking.sol\r\n\r\n// pragma solidity >=0.5.16;\r\n\r\n// import '../libraries/TransferHelper.sol';\r\n// import '../libraries/SafeMath.sol';\r\n// import '../interfaces/IERC20.sol';\r\n// import '../interfaces/IDemaxConfig.sol';\r\n// import '../modules/BaseToken.sol';\r\n\r\n\r\ncontract DgasStaking is BaseToken {\r\n    using SafeMath for uint;\r\n\r\n    uint public lockTime;\r\n    uint public totalSupply;\r\n    uint public stakingSupply;\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => uint) public allowance;\r\n\r\n\r\n    constructor (address _baseToken) public {\r\n        initBaseToken(_baseToken);\r\n    }\r\n\r\n    function _add(address user, uint value) internal {\r\n        require(value > 0, 'ZERO');\r\n        balanceOf[user] = balanceOf[user].add(value);\r\n        stakingSupply = stakingSupply.add(value);\r\n        allowance[user] = block.number;\r\n    }\r\n\r\n    function _reduce(address user, uint value) internal {\r\n        require(balanceOf[user] >= value && value > 0, 'DgasStaking: INSUFFICIENT_BALANCE');\r\n        balanceOf[user] = balanceOf[user].sub(value);\r\n        stakingSupply = stakingSupply.sub(value);\r\n    }\r\n\r\n    function deposit(uint _amount) external returns (bool) {\r\n        TransferHelper.safeTransferFrom(baseToken, msg.sender, address(this), _amount);\r\n        _add(msg.sender, _amount);\r\n        totalSupply = IERC20(baseToken).balanceOf(address(this));\r\n        return true;\r\n    }\r\n\r\n    function withdraw(uint _amount) external returns (bool) {\r\n        require(block.number > allowance[msg.sender] + lockTime, 'DgasStaking: NOT_DUE');\r\n        TransferHelper.safeTransfer(baseToken, msg.sender, _amount);\r\n        _reduce(msg.sender, _amount);\r\n        totalSupply = IERC20(baseToken).balanceOf(address(this));\r\n        return true;\r\n    }\r\n\r\n}\r\n// Dependency file: contracts/libraries/TransferHelper.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\n// pragma solidity >=0.6.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/libraries/ConfigNames.sol\r\n\r\n// pragma solidity >=0.5.16;\r\n\r\nlibrary ConfigNames {\r\n    bytes32 public constant PRODUCE_DGAS_RATE = bytes32('PRODUCE_DGAS_RATE');\r\n    bytes32 public constant SWAP_FEE_PERCENT = bytes32('SWAP_FEE_PERCENT');\r\n    bytes32 public constant LIST_DGAS_AMOUNT = bytes32('LIST_DGAS_AMOUNT');\r\n    bytes32 public constant UNSTAKE_DURATION = bytes32('UNSTAKE_DURATION');\r\n    bytes32 public constant REMOVE_LIQUIDITY_DURATION = bytes32('REMOVE_LIQUIDITY_DURATION');\r\n    bytes32 public constant TOKEN_TO_DGAS_PAIR_MIN_PERCENT = bytes32('TOKEN_TO_DGAS_PAIR_MIN_PERCENT');\r\n    bytes32 public constant LIST_TOKEN_FAILURE_BURN_PRECENT = bytes32('LIST_TOKEN_FAILURE_BURN_PRECENT');\r\n    bytes32 public constant LIST_TOKEN_SUCCESS_BURN_PRECENT = bytes32('LIST_TOKEN_SUCCESS_BURN_PRECENT');\r\n    bytes32 public constant PROPOSAL_DGAS_AMOUNT = bytes32('PROPOSAL_DGAS_AMOUNT');\r\n    bytes32 public constant VOTE_DURATION = bytes32('VOTE_DURATION');\r\n    bytes32 public constant VOTE_REWARD_PERCENT = bytes32('VOTE_REWARD_PERCENT');\r\n    bytes32 public constant TOKEN_PENGDING_SWITCH = bytes32('TOKEN_PENGDING_SWITCH');\r\n    bytes32 public constant TOKEN_PENGDING_TIME = bytes32('TOKEN_PENGDING_TIME');\r\n    bytes32 public constant LIST_TOKEN_SWITCH = bytes32('LIST_TOKEN_SWITCH');\r\n    bytes32 public constant DEV_PRECENT = bytes32('DEV_PRECENT');\r\n}\r\n// Dependency file: contracts/interfaces/ITokenRegistry.sol\r\n\r\n// pragma solidity >=0.5.16;\r\n\r\ninterface ITokenRegistry {\r\n    function tokenStatus(address _token) external view returns(uint);\r\n    function pairStatus(address tokenA, address tokenB) external view returns (uint);\r\n    function NONE() external view returns(uint);\r\n    function REGISTERED() external view returns(uint);\r\n    function PENDING() external view returns(uint);\r\n    function OPENED() external view returns(uint);\r\n    function CLOSED() external view returns(uint);\r\n    function registryToken(address _token) external returns (bool);\r\n    function publishToken(address _token) external returns (bool);\r\n    function updateToken(address _token, uint _status) external returns (bool);\r\n    function updatePair(address tokenA, address tokenB, uint _status) external returns (bool);\r\n    function tokenCount() external view returns(uint);\r\n    function validTokens() external view returns(address[] memory);\r\n    function iterateValidTokens(uint32 _start, uint32 _end) external view returns (address[] memory);\r\n}\r\n// Dependency file: contracts/interfaces/IDgas.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IDgas {\r\n    function amountPerBlock() external view returns (uint);\r\n    function changeInterestRatePerBlock(uint value) external returns (bool);\r\n    function getProductivity(address user) external view returns (uint, uint);\r\n    function increaseProductivity(address user, uint value) external returns (bool);\r\n    function decreaseProductivity(address user, uint value) external returns (bool);\r\n    function take() external view returns (uint);\r\n    function takeWithBlock() external view returns (uint, uint);\r\n    function mint() external returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function upgradeImpl(address _newImpl) external;\r\n    function upgradeGovernance(address _newGovernor) external;\r\n}\r\n// Dependency file: contracts/interfaces/IDemaxBallot.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IDemaxBallot {\r\n    function proposer() external view returns(address);\r\n    function endBlockNumber() external view returns(uint);\r\n    function value() external view returns(uint);\r\n    function result() external view returns(bool);\r\n    function end() external returns (bool);\r\n    function total() external view returns(uint);\r\n    function weight(address user) external view returns (uint);\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IDemaxBallotFactory.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IDemaxBallotFactory {\r\n    function create(\r\n        address _proposer,\r\n        uint _value,\r\n        uint _endBlockNumber,\r\n        string calldata _subject,\r\n        string calldata _content\r\n    ) external returns (address);\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IDemaxConfig.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IDemaxConfig {\r\n    function governor() external view returns (address);\r\n    function dev() external view returns (address);\r\n    function PERCENT_DENOMINATOR() external view returns (uint);\r\n    function getConfig(bytes32 _name) external view returns (uint minValue, uint maxValue, uint maxSpan, uint value, uint enable);\r\n    function getConfigValue(bytes32 _name) external view returns (uint);\r\n    function changeConfigValue(bytes32 _name, uint _value) external returns (bool);\r\n    function checkToken(address _token) external view returns(bool);\r\n    function checkPair(address tokenA, address tokenB) external view returns (bool);\r\n    function listToken(address _token) external returns (bool);\r\n    function getDefaultListTokens() external returns (address[] memory);\r\n    function platform() external view returns  (address);\r\n    function addToken(address _token) external returns (bool);\r\n}\r\npragma solidity >=0.6.6;\r\n\r\n// import './interfaces/IDemaxConfig.sol';\r\n// import './interfaces/IDemaxBallotFactory.sol';\r\n// import './interfaces/IDemaxBallot.sol';\r\n// import './interfaces/IDgas.sol';\r\n// import './interfaces/ITokenRegistry.sol';\r\n// import './libraries/ConfigNames.sol';\r\n// import './libraries/TransferHelper.sol';\r\n// import './modules/DgasStaking.sol';\r\n// import './modules/Ownable.sol';\r\n\r\ncontract DemaxGovernance is DgasStaking, Ownable {\r\n    uint public version = 1;\r\n    address public configAddr;\r\n    address public ballotFactoryAddr;\r\n    address public rewardAddr;\r\n\r\n    uint public T_CONFIG = 1;\r\n    uint public T_LIST_TOKEN = 2;\r\n    uint public T_TOKEN = 3;\r\n    mapping(address => uint) public ballotTypes;\r\n    mapping(address => bytes32) public configBallots;\r\n    mapping(address => address) public tokenBallots;\r\n    mapping(address => uint) public rewardOf;\r\n    mapping(address => uint) public ballotOf;\r\n    mapping(address => mapping(address => uint)) public applyTokenOf;\r\n    mapping(address => mapping(address => bool)) public collectUsers;\r\n    mapping(address => address) public tokenUsers;\r\n\r\n    address[] public ballots;\r\n\r\n    event ConfigAudited(bytes32 name, address indexed ballot, uint proposal);\r\n    event ConfigBallotCreated(address indexed proposer, bytes32 name, uint value, address indexed ballotAddr, uint reward);\r\n    event TokenBallotCreated(address indexed proposer, address indexed token, uint value, address indexed ballotAddr, uint reward);\r\n    event ProposalerRewardRateUpdated(uint oldVaue, uint newValue);\r\n    event RewardTransfered(address indexed from, address indexed to, uint value);\r\n    event TokenListed(address user, address token, uint amount);\r\n    event ListTokenAudited(address user, address token, uint status, uint burn, uint reward, uint refund);\r\n    event TokenAudited(address user, address token, uint status, bool result);\r\n    event RewardCollected(address indexed user, address indexed ballot, uint value);\r\n    event RewardReceived(address indexed user, uint value);\r\n\r\n    modifier onlyRewarder() {\r\n        require(msg.sender == rewardAddr, 'DemaxGovernance: ONLY_REWARDER');\r\n        _;\r\n    }\r\n\r\n    constructor (address _dgas) DgasStaking(_dgas) public {\r\n    }\r\n\r\n    // called after deployment\r\n    function initialize(address _rewardAddr, address _configContractAddr, address _ballotFactoryAddr) external onlyOwner {\r\n        require(_rewardAddr != address(0) && _configContractAddr != address(0) && _ballotFactoryAddr != address(0), 'DemaxGovernance: INPUT_ADDRESS_IS_ZERO');\r\n\r\n        rewardAddr = _rewardAddr;\r\n        configAddr = _configContractAddr;\r\n        ballotFactoryAddr = _ballotFactoryAddr;\r\n        lockTime = getConfigValue(ConfigNames.UNSTAKE_DURATION);\r\n    }\r\n\r\n    function audit(address _ballot) external returns (bool) {\r\n        if(ballotTypes[_ballot] == T_CONFIG) {\r\n            return auditConfig(_ballot);\r\n        } else if (ballotTypes[_ballot] == T_LIST_TOKEN) {\r\n            return auditListToken(_ballot);\r\n        } else if (ballotTypes[_ballot] == T_TOKEN) {\r\n            return auditToken(_ballot);\r\n        } else {\r\n            revert('DemaxGovernance: UNKNOWN_TYPE');\r\n        }\r\n    }\r\n\r\n    function auditConfig(address _ballot) public returns (bool) {\r\n        bool result = IDemaxBallot(_ballot).end();\r\n        require(result, 'DemaxGovernance: NO_PASS');\r\n        uint value = IDemaxBallot(_ballot).value();\r\n        bytes32 name = configBallots[_ballot];\r\n        result = IDemaxConfig(configAddr).changeConfigValue(name, value);\r\n        if (name == ConfigNames.UNSTAKE_DURATION) {\r\n            lockTime = value;\r\n        } else if (name == ConfigNames.PRODUCE_DGAS_RATE) {\r\n            _changeAmountPerBlock(value);\r\n        }\r\n        emit ConfigAudited(name, _ballot, value);\r\n        return result;\r\n    }\r\n\r\n    function auditListToken(address _ballot) public returns (bool) {\r\n        bool result = IDemaxBallot(_ballot).end();\r\n        address token = tokenBallots[_ballot];\r\n        address user = tokenUsers[token];\r\n        require(ITokenRegistry(configAddr).tokenStatus(token) == ITokenRegistry(configAddr).REGISTERED(), 'DemaxGovernance: AUDITED');\r\n        uint status = result ? ITokenRegistry(configAddr).PENDING() : ITokenRegistry(configAddr).CLOSED();\r\n\t    uint amount = applyTokenOf[user][token];\r\n        (uint burnAmount, uint rewardAmount, uint refundAmount) = (0, 0, 0);\r\n        if (result) {\r\n            burnAmount = amount * getConfigValue(ConfigNames.LIST_TOKEN_SUCCESS_BURN_PRECENT) / IDemaxConfig(configAddr).PERCENT_DENOMINATOR();\r\n            rewardAmount = amount - burnAmount;\r\n            if (burnAmount > 0) {\r\n                TransferHelper.safeTransfer(baseToken, address(0), burnAmount);\r\n                totalSupply = totalSupply.sub(burnAmount);\r\n            }\r\n            if (rewardAmount > 0) {\r\n                rewardOf[rewardAddr] = rewardOf[rewardAddr].add(rewardAmount);\r\n                ballotOf[_ballot] = ballotOf[_ballot].add(rewardAmount);\r\n                _rewardTransfer(rewardAddr, _ballot, rewardAmount);\r\n            }\r\n            ITokenRegistry(configAddr).publishToken(token);\r\n        } else {\r\n            burnAmount = amount * getConfigValue(ConfigNames.LIST_TOKEN_FAILURE_BURN_PRECENT) / IDemaxConfig(configAddr).PERCENT_DENOMINATOR();\r\n            refundAmount = amount - burnAmount;\r\n            if (burnAmount > 0) TransferHelper.safeTransfer(baseToken, address(0), burnAmount);\r\n            if (refundAmount > 0) TransferHelper.safeTransfer(baseToken, user, refundAmount);\r\n            totalSupply = totalSupply.sub(amount);\r\n            ITokenRegistry(configAddr).updateToken(token, status);\r\n        }\r\n\t    emit ListTokenAudited(user, token, status, burnAmount, rewardAmount, refundAmount);\r\n        return result;\r\n    }\r\n\r\n    function auditToken(address _ballot) public returns (bool) {\r\n        bool result = IDemaxBallot(_ballot).end();\r\n        uint status = IDemaxBallot(_ballot).value();\r\n        address token = tokenBallots[_ballot];\r\n        address user = tokenUsers[token];\r\n        require(ITokenRegistry(configAddr).tokenStatus(token) != status, 'DemaxGovernance: TOKEN_STATUS_NO_CHANGE');\r\n        if (result) {\r\n            ITokenRegistry(configAddr).updateToken(token, status);\r\n        } else {\r\n            status = ITokenRegistry(configAddr).tokenStatus(token);\r\n        }\r\n\t    emit TokenAudited(user, token, status, result);\r\n        return result;\r\n    }\r\n\r\n    function getConfigValue(bytes32 _name) public view returns (uint) {\r\n        return IDemaxConfig(configAddr).getConfigValue(_name);\r\n    }\r\n\r\n    function createConfigBallot(bytes32 _name, uint _value, uint _amount, bool _wallet, string calldata _subject, string calldata _content) external returns (address) {\r\n        require(_value >= 0, 'DemaxGovernance: INVALID_PARAMTERS');\r\n        { // avoids stack too deep errors\r\n        (uint minValue, uint maxValue, uint maxSpan, uint value, uint enable) = IDemaxConfig(configAddr).getConfig(_name);\r\n        require(enable == 1, \"DemaxGovernance: CONFIG_DISABLE\");\r\n        require(_value >= minValue && _value <= maxValue, \"DemaxGovernance: OUTSIDE\");\r\n        uint span = _value >= value? (_value - value) : (value - _value);\r\n        require(maxSpan >= span, \"DemaxGovernance: OVERSTEP\");\r\n        }\r\n        require(_amount >= getConfigValue(ConfigNames.PROPOSAL_DGAS_AMOUNT), \"DemaxGovernance: NOT_ENOUGH_AMOUNT_TO_PROPOSAL\");\r\n        if(_amount > 0) {\r\n            _amount = _transferForBallot(_amount, _wallet);\r\n            rewardOf[rewardAddr] = rewardOf[rewardAddr].add(_amount);\r\n        }\r\n        uint endBlockNumber = block.number + getConfigValue(ConfigNames.VOTE_DURATION);\r\n        address ballotAddr = IDemaxBallotFactory(ballotFactoryAddr).create(msg.sender, _value, endBlockNumber, _subject, _content);\r\n        configBallots[ballotAddr] = _name;\r\n        uint reward = _createdBallot(ballotAddr, T_CONFIG);\r\n        emit ConfigBallotCreated(msg.sender, _name, _value, ballotAddr, reward);\r\n        return ballotAddr;\r\n    }\r\n\r\n    function createTokenBallot(address _token, uint _value, uint _amount, bool _wallet, string calldata _subject, string calldata _content) external returns (address) {\r\n        require(!_isDefaultToken(_token), 'DemaxGovernance: DEFAULT_LIST_TOKENS_PROPOSAL_DENY');\r\n        uint status = ITokenRegistry(configAddr).tokenStatus(_token);\r\n        require(status == ITokenRegistry(configAddr).PENDING(), 'DemaxGovernance: ONLY_ALLOW_PENDING');\r\n        require(_value == ITokenRegistry(configAddr).OPENED() || _value == ITokenRegistry(configAddr).CLOSED(), 'DemaxGovernance: INVALID_STATUS');\r\n        require(status != _value, 'DemaxGovernance: STATUS_NO_CHANGE');\r\n        require(_amount >= getConfigValue(ConfigNames.PROPOSAL_DGAS_AMOUNT), \"DemaxGovernance: NOT_ENOUGH_AMOUNT_TO_PROPOSAL\");\r\n        if(_amount > 0) {\r\n            _amount = _transferForBallot(_amount, _wallet);\r\n            rewardOf[rewardAddr] = rewardOf[rewardAddr].add(_amount);\r\n        }\r\n        address ballotAddr = _createTokenBallot(T_TOKEN, _token, _value, _subject, _content);\r\n        return ballotAddr;\r\n    }\r\n\r\n\tfunction listToken(address _token, uint _amount, bool _wallet, string calldata _subject, string calldata _content) external returns (address) {\r\n        uint status = ITokenRegistry(configAddr).tokenStatus(_token);\r\n        require(status == ITokenRegistry(configAddr).NONE() || status == ITokenRegistry(configAddr).CLOSED(), 'DemaxGovernance: LISTED');\r\n\t    require(_amount >= getConfigValue(ConfigNames.LIST_DGAS_AMOUNT), \"DemaxGovernance: NOT_ENOUGH_AMOUNT_TO_LIST\");\r\n\t    tokenUsers[_token] = msg.sender;\r\n        if(_amount > 0) {\r\n            applyTokenOf[msg.sender][_token] = _transferForBallot(_amount, _wallet);\r\n        }\r\n\t    ITokenRegistry(configAddr).registryToken(_token);\r\n        address ballotAddr = _createTokenBallot(T_LIST_TOKEN, _token, ITokenRegistry(configAddr).PENDING(), _subject, _content);\r\n\t    emit TokenListed(msg.sender, _token, _amount);\r\n        return ballotAddr;\r\n\t}\r\n\r\n    function _createTokenBallot(uint _type, address _token, uint _value, string memory _subject, string memory _content) private returns (address) {\r\n        uint endBlockNumber = block.number + getConfigValue(ConfigNames.VOTE_DURATION);\r\n        address ballotAddr = IDemaxBallotFactory(ballotFactoryAddr).create(msg.sender, _value, endBlockNumber, _subject, _content);\r\n        uint reward = _createdBallot(ballotAddr, _type);\r\n        ballotOf[ballotAddr] = reward;\r\n        tokenBallots[ballotAddr] = _token;\r\n        emit TokenBallotCreated(msg.sender, _token, _value, ballotAddr, reward);\r\n        return ballotAddr;\r\n    }\r\n\r\n    function collectReward(address _ballot) external returns (uint) {\r\n        require(block.number >= IDemaxBallot(_ballot).endBlockNumber(), \"DemaxGovernance: NOT_YET_ENDED\");\r\n        require(!collectUsers[_ballot][msg.sender], 'DemaxGovernance: REWARD_COLLECTED');\r\n        uint amount = getReward(_ballot);\r\n        _rewardTransfer(_ballot, msg.sender, amount);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);\r\n        stakingSupply = stakingSupply.add(amount);\r\n        rewardOf[msg.sender] = rewardOf[msg.sender].sub(amount);\r\n        collectUsers[_ballot][msg.sender] = true;\r\n        emit RewardCollected(msg.sender, _ballot, amount);\r\n    }\r\n\r\n    function getReward(address _ballot) public view returns (uint) {\r\n        if (block.number < IDemaxBallot(_ballot).endBlockNumber() || collectUsers[_ballot][msg.sender]) {\r\n            return 0;\r\n        }\r\n        uint amount;\r\n        uint shares = ballotOf[_ballot];\r\n        if (IDemaxBallot(_ballot).result()) {\r\n            uint extra;\r\n            uint rewardRate = getConfigValue(ConfigNames.VOTE_REWARD_PERCENT);\r\n            if ( rewardRate > 0) {\r\n               extra = shares * rewardRate / IDemaxConfig(configAddr).PERCENT_DENOMINATOR();\r\n               shares -= extra;\r\n            }\r\n            if (msg.sender == IDemaxBallot(_ballot).proposer()) {\r\n                amount = extra;\r\n            }\r\n        }\r\n\r\n        if (IDemaxBallot(_ballot).total() > 0) {\r\n            amount += shares * IDemaxBallot(_ballot).weight(msg.sender) / IDemaxBallot(_ballot).total();\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function addReward(uint _value) external onlyRewarder returns (bool) {\r\n        require(_value > 0, 'DemaxGovernance: ADD_REWARD_VALUE_IS_ZERO');\r\n        uint total = IERC20(baseToken).balanceOf(address(this));\r\n        uint diff = total.sub(totalSupply);\r\n        require(_value <= diff, 'DemaxGovernance: ADD_REWARD_EXCEED');\r\n        rewardOf[rewardAddr] = rewardOf[rewardAddr].add(_value);\r\n        totalSupply = total;\r\n        emit RewardReceived(rewardAddr, _value);\r\n    }\r\n\r\n    function _rewardTransfer(address _from, address _to, uint _value) private returns (bool) {\r\n        require(_value >= 0 && rewardOf[_from] >= _value, 'DemaxGovernance: INSUFFICIENT_BALANCE');\r\n        rewardOf[_from] = rewardOf[_from].sub(_value);\r\n        rewardOf[_to] = rewardOf[_to].add(_value);\r\n        emit RewardTransfered(_from, _to, _value);\r\n    }\r\n\r\n    function _isDefaultToken(address _token) internal returns (bool) {\r\n        address[] memory tokens = IDemaxConfig(configAddr).getDefaultListTokens();\r\n        for(uint i = 0 ; i < tokens.length; i++){\r\n            if (tokens[i] == _token) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _transferForBallot(uint _amount, bool _wallet) internal returns (uint) {\r\n        if (_wallet) {\r\n            TransferHelper.safeTransferFrom(baseToken, msg.sender, address(this), _amount);\r\n            totalSupply += _amount;\r\n        } else {\r\n            _reduce(msg.sender, _amount);\r\n        }\r\n        return _amount;\r\n    }\r\n\r\n    function _createdBallot(address _ballot, uint _type) internal returns (uint) {\r\n        uint reward = rewardOf[rewardAddr];\r\n        ballotOf[_ballot] = reward;\r\n        _rewardTransfer(rewardAddr, _ballot, reward);\r\n        ballots.push(_ballot);\r\n        ballotTypes[_ballot] = _type;\r\n        return reward;\r\n    }\r\n\r\n    function ballotCount() external view returns (uint) {\r\n        return ballots.length;\r\n    }\r\n\r\n    function _changeAmountPerBlock(uint _value) internal returns (bool) {\r\n        return IDgas(baseToken).changeInterestRatePerBlock(_value);\r\n    }\r\n\r\n    function updateDgasGovernor(address _new) external onlyOwner {\r\n        IDgas(baseToken).upgradeGovernance(_new);\r\n    }\r\n\r\n    function upgradeApproveReward() external returns (uint) {\r\n        require(rewardOf[rewardAddr] > 0, 'DemaxGovernance: UPGRADE_NO_REWARD');\r\n        require(IDemaxConfig(configAddr).governor() != address(this), 'DemaxGovernance: UPGRADE_NO_CHANGE');\r\n        TransferHelper.safeApprove(baseToken, IDemaxConfig(configAddr).governor(), rewardOf[rewardAddr]);\r\n        return rewardOf[rewardAddr]; \r\n    }\r\n\r\n    function receiveReward(address _from, uint _value) external returns (bool) {\r\n        require(_value > 0, 'DemaxGovernance: RECEIVE_REWARD_VALUE_IS_ZERO');\r\n        TransferHelper.safeTransferFrom(baseToken, _from, address(this), _value);\r\n        rewardOf[rewardAddr] += _value;\r\n        totalSupply += _value;\r\n        emit RewardReceived(_from, _value);\r\n        return true;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dgas\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ballot\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"}],\"name\":\"ConfigAudited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ballotAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"ConfigBallotCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refund\",\"type\":\"uint256\"}],\"name\":\"ListTokenAudited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVaue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ProposalerRewardRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ballot\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RewardCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RewardReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RewardTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"TokenAudited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ballotAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"TokenBallotCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenListed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"T_CONFIG\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_LIST_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"T_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"applyTokenOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ballot\",\"type\":\"address\"}],\"name\":\"audit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ballot\",\"type\":\"address\"}],\"name\":\"auditConfig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ballot\",\"type\":\"address\"}],\"name\":\"auditListToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ballot\",\"type\":\"address\"}],\"name\":\"auditToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ballotCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ballotFactoryAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ballotOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ballotTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ballots\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ballot\",\"type\":\"address\"}],\"name\":\"collectReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collectUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"configBallots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_wallet\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"createConfigBallot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_wallet\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"createTokenBallot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"getConfigValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ballot\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_configContractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ballotFactoryAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_wallet\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_subject\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_content\",\"type\":\"string\"}],\"name\":\"listToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"receiveReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBallots\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"updateDgasGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeApproveReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DemaxGovernance", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ae9269f27437f0fcbc232d39ec814844a51d6b8f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://e1489db896bf6f78a500b244eb0d5d522292325e53e126363ca420322339079b"}