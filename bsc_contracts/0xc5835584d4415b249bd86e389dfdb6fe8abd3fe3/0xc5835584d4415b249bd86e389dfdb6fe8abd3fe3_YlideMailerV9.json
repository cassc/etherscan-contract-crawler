{"SourceCode": "// Sources flattened with hardhat v2.13.0 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.8.2\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/Pausable.sol@v4.8.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.8.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.8.2\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.8.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol@v4.8.2\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.8.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.8.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.8.2\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.8.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol@v4.8.2\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol@v4.8.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.8.2\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/Math.sol@v4.8.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1);\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 denominator,\r\n        Rounding rounding\r\n    ) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10**64) {\r\n                value /= 10**64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10**32) {\r\n                value /= 10**32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10**16) {\r\n                value /= 10**16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10**8) {\r\n                value /= 10**8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10**4) {\r\n                value /= 10**4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10**2) {\r\n                value /= 10**2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10**1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.8.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/ERC721.sol@v4.8.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _ownerOf(tokenId);\r\n        require(owner != address(0), \"ERC721: invalid token ID\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        _requireMinted(tokenId);\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overridden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not token owner or approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        _requireMinted(tokenId);\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\r\n        _safeTransfer(from, to, tokenId, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\r\n     */\r\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\r\n        return _owners[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _ownerOf(tokenId) != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\r\n\r\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        unchecked {\r\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\r\n            // Given that tokens are minted one by one, it is impossible in practice that\r\n            // this ever happens. Might change if we allow batch minting.\r\n            // The ERC fails to describe this case.\r\n            _balances[to] += 1;\r\n        }\r\n\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n\r\n        _afterTokenTransfer(address(0), to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\r\n\r\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\r\n        owner = ERC721.ownerOf(tokenId);\r\n\r\n        // Clear approvals\r\n        delete _tokenApprovals[tokenId];\r\n\r\n        unchecked {\r\n            // Cannot overflow, as that would require more tokens to be burned/transferred\r\n            // out than the owner initially received through minting and transferring in.\r\n            _balances[owner] -= 1;\r\n        }\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n\r\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId, 1);\r\n\r\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n\r\n        // Clear approvals from the previous owner\r\n        delete _tokenApprovals[tokenId];\r\n\r\n        unchecked {\r\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\r\n            // `from`'s balance is the number of token held, which is at least one before the current\r\n            // transfer.\r\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\r\n            // all 2**256 token ids to be minted, which in practice is impossible.\r\n            _balances[from] -= 1;\r\n            _balances[to] += 1;\r\n        }\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n        _afterTokenTransfer(from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if the `tokenId` has not been minted yet.\r\n     */\r\n    function _requireMinted(uint256 tokenId) internal view virtual {\r\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    /// @solidity memory-safe-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\r\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\r\n     * - When `from` is zero, the tokens will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `batchSize` is non-zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 firstTokenId,\r\n        uint256 batchSize\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\r\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\r\n     * - When `from` is zero, the tokens were minted for `to`.\r\n     * - When `to` is zero, ``from``'s tokens were burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `batchSize` is non-zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 firstTokenId,\r\n        uint256 batchSize\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\r\n     *\r\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\r\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\r\n     * that `ownerOf(tokenId)` is `a`.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\r\n        _balances[account] += amount;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/cryptography/ECDSA.sol@v4.8.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV // Deprecated in v4.8\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\r\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/cryptography/EIP712.sol@v4.8.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\r\n *\r\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\r\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\r\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\r\n *\r\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\r\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\r\n * ({_hashTypedDataV4}).\r\n *\r\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\r\n * the chain id to protect against replay attacks on an eventual fork of the chain.\r\n *\r\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\r\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\r\n *\r\n * _Available since v3.4._\r\n */\r\nabstract contract EIP712 {\r\n    /* solhint-disable var-name-mixedcase */\r\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\r\n    // invalidate the cached domain separator if the chain id changes.\r\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\r\n    uint256 private immutable _CACHED_CHAIN_ID;\r\n    address private immutable _CACHED_THIS;\r\n\r\n    bytes32 private immutable _HASHED_NAME;\r\n    bytes32 private immutable _HASHED_VERSION;\r\n    bytes32 private immutable _TYPE_HASH;\r\n\r\n    /* solhint-enable var-name-mixedcase */\r\n\r\n    /**\r\n     * @dev Initializes the domain separator and parameter caches.\r\n     *\r\n     * The meaning of `name` and `version` is specified in\r\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\r\n     *\r\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\r\n     * - `version`: the current major version of the signing domain.\r\n     *\r\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\r\n     * contract upgrade].\r\n     */\r\n    constructor(string memory name, string memory version) {\r\n        bytes32 hashedName = keccak256(bytes(name));\r\n        bytes32 hashedVersion = keccak256(bytes(version));\r\n        bytes32 typeHash = keccak256(\r\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n        );\r\n        _HASHED_NAME = hashedName;\r\n        _HASHED_VERSION = hashedVersion;\r\n        _CACHED_CHAIN_ID = block.chainid;\r\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\r\n        _CACHED_THIS = address(this);\r\n        _TYPE_HASH = typeHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the domain separator for the current chain.\r\n     */\r\n    function _domainSeparatorV4() internal view returns (bytes32) {\r\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\r\n            return _CACHED_DOMAIN_SEPARATOR;\r\n        } else {\r\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\r\n        }\r\n    }\r\n\r\n    function _buildDomainSeparator(\r\n        bytes32 typeHash,\r\n        bytes32 nameHash,\r\n        bytes32 versionHash\r\n    ) private view returns (bytes32) {\r\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\r\n     * function returns the hash of the fully encoded EIP712 message for this domain.\r\n     *\r\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\r\n     *\r\n     * ```solidity\r\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\r\n     *     keccak256(\"Mail(address to,string contents)\"),\r\n     *     mailTo,\r\n     *     keccak256(bytes(mailContents))\r\n     * )));\r\n     * address signer = ECDSA.recover(digest, signature);\r\n     * ```\r\n     */\r\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\r\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/cryptography/draft-EIP712.sol@v4.8.2\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/draft-EIP712.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// EIP-712 is Final as of 2022-08-11. This file is deprecated.\r\n\r\n\r\n// File contracts/helpers/Owned.sol\r\n\r\npragma solidity 0.8.17;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n\r\n    function terminate() public onlyOwner {\r\n        selfdestruct(payable(owner));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/helpers/FiduciaryDuty.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\ncontract FiduciaryDuty is Owned {\r\n\r\n\tuint256 public contentPartFee = 0;\r\n    uint256 public recipientFee = 0;\r\n\tuint256 public broadcastFee = 0;\r\n\r\n    uint256 public broadcastFeedCreationPrice = 0;\r\n    uint256 public mailingFeedCreationPrice = 0;\r\n    // uint256 public threadCreationPrice = 0;\r\n\r\n    address payable public beneficiary;\r\n\r\n    constructor() {\r\n        beneficiary = payable(msg.sender);\r\n    }\r\n\r\n\tfunction setFees(uint256 _contentPartFee, uint256 _recipientFee, uint256 _broadcastFee) public onlyOwner {\r\n        contentPartFee = _contentPartFee;\r\n        recipientFee = _recipientFee;\r\n\t\tbroadcastFee = _broadcastFee;\r\n    }\r\n\r\n    function setPrices(uint256 _broadcastFeedCreationPrice, uint256 _mailingFeedCreationPrice) public onlyOwner {\r\n        broadcastFeedCreationPrice = _broadcastFeedCreationPrice;\r\n        mailingFeedCreationPrice = _mailingFeedCreationPrice;\r\n        // threadCreationPrice = _threadCreationPrice;\r\n    }\r\n\r\n    function setBeneficiary(address payable _beneficiary) public onlyOwner {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function payForBroadcastFeedCreation() internal virtual {\r\n        if (broadcastFeedCreationPrice > 0) {\r\n            beneficiary.transfer(broadcastFeedCreationPrice);\r\n        }\r\n    }\r\n\r\n    function payForMailingFeedCreation() internal virtual {\r\n        if (mailingFeedCreationPrice > 0) {\r\n            beneficiary.transfer(mailingFeedCreationPrice);\r\n        }\r\n    }\r\n\r\n\tfunction payOut(uint256 contentParts, uint256 recipients, uint256 broadcasts) internal virtual {\r\n\t\tuint256 totalValue = contentPartFee * contentParts + recipientFee * recipients + broadcastFee * broadcasts;\r\n\t\tif (totalValue > 0) {\r\n\t\t\tbeneficiary.transfer(totalValue);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n\r\n// File contracts/helpers/Terminatable.sol\r\n\r\npragma solidity 0.8.17;\r\n\r\ncontract Terminatable is Owned {\r\n    uint256 public terminationBlock;\r\n    uint256 public creationBlock;\r\n\r\n    constructor() {\r\n        terminationBlock = 0;\r\n        creationBlock = block.number;\r\n    }\r\n\r\n    modifier notTerminated() {\r\n        if (terminationBlock != 0 && block.number >= terminationBlock) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    // intendedly left non-blocked to allow reassignment of termination block\r\n    function gracefullyTerminateAt(uint256 blockNumber) public onlyOwner {\r\n        terminationBlock = blockNumber;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IYlideMailer.sol\r\n\r\npragma solidity ^0.8.17;\r\n\r\ninterface IYlideMailer {\r\n\tstruct SendBulkArgs {\r\n\t\tuint256 feedId;\r\n\t\tuint256 uniqueId;\r\n\t\tuint256[] recipients;\r\n\t\tbytes[] keys;\r\n\t\tbytes content;\r\n\t}\r\n\r\n\tstruct AddMailRecipientsArgs {\r\n\t\tuint256 feedId;\r\n\t\tuint256 uniqueId;\r\n\t\tuint256 firstBlockNumber;\r\n\t\tuint16 partsCount;\r\n\t\tuint16 blockCountLock;\r\n\t\tuint256[] recipients;\r\n\t\tbytes[] keys;\r\n\t}\r\n\r\n\tstruct SignatureArgs {\r\n\t\tbytes signature;\r\n\t\tuint256 nonce;\r\n\t\tuint256 deadline;\r\n\t\taddress sender;\r\n\t}\r\n\r\n\tstruct Supplement {\r\n\t\taddress contractAddress;\r\n\t\tuint8 contractType;\r\n\t}\r\n\r\n\tfunction sendBulkMail(\r\n\t\tSendBulkArgs calldata args,\r\n\t\tSignatureArgs calldata signatureArgs,\r\n\t\tSupplement calldata supplement\r\n\t) external payable returns (uint256);\r\n\r\n\tfunction addMailRecipients(\r\n\t\tAddMailRecipientsArgs calldata args,\r\n\t\tSignatureArgs calldata signatureArgs,\r\n\t\tSupplement calldata supplement\r\n\t) external payable returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IYlideTokenAttachment.sol\r\n\r\npragma solidity ^0.8.17;\r\n\r\ninterface IYlideTokenAttachment {\r\n\tfunction setYlideMailer(IYlideMailer) external;\r\n\r\n\tfunction pause() external;\r\n\r\n\tfunction unpause() external;\r\n}\r\n\r\n\r\n// File contracts/mocks/MockERC20.sol\r\n\r\npragma solidity ^0.8.17;\r\n\r\ncontract MockERC20 is ERC20 {\r\n\tconstructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {}\r\n\r\n\tfunction mint(uint256 amount) external {\r\n\t\t_mint(msg.sender, amount);\r\n\t}\r\n}\r\n\r\n\r\n// File contracts/mocks/MockERC721.sol\r\n\r\npragma solidity ^0.8.17;\r\n\r\ncontract MockERC721 is ERC721 {\r\n\tconstructor(string memory name_, string memory symbol_) ERC721(name_, symbol_) {}\r\n\r\n\tfunction mint(uint256 tokenId) external {\r\n\t\t_mint(msg.sender, tokenId);\r\n\t}\r\n}\r\n\r\n\r\n// File contracts/interfaces/ISafe.sol\r\n\r\npragma solidity ^0.8.17;\r\n\r\ninterface ISafe {\r\n\tfunction isOwner(address owner) external view returns (bool);\r\n\r\n\tfunction getOwners() external view returns (address[] memory);\r\n}\r\n\r\n\r\n// File contracts/mocks/MockSafe.sol\r\n\r\npragma solidity ^0.8.17;\r\n\r\ncontract MockSafe is ISafe {\r\n\tmapping(address => bool) public isOwner;\r\n\taddress[] internal owners;\r\n\r\n\tconstructor() {}\r\n\r\n\tfunction setOwners(address[] memory _owners, bool[] memory values) external {\r\n\t\tfor (uint256 i = 0; i < _owners.length; i++) {\r\n\t\t\tisOwner[_owners[i]] = values[i];\r\n\t\t\tif (values[i]) {\r\n\t\t\t\towners.push(_owners[i]);\r\n\t\t\t} else {\r\n\t\t\t\tfor (uint256 j = 0; j < owners.length; j++) {\r\n\t\t\t\t\tif (owners[j] == _owners[i]) {\r\n\t\t\t\t\t\towners[j] = owners[owners.length - 1];\r\n\t\t\t\t\t\towners.pop();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getOwners() external view returns (address[] memory) {\r\n\t\treturn owners;\r\n\t}\r\n}\r\n\r\n\r\n// File contracts/YlideMailerV6.sol\r\n\r\npragma solidity ^0.8.9;\r\n\r\ncontract YlideMailerV6 is Owned {\r\n\r\n    uint256 public version = 6;\r\n\r\n    uint256 constant empt0 = 0x00ff000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant empt1 = 0x00ffffffff000000ffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant empt2 = 0x00ffffffffffffff000000ffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant empt3 = 0x00ffffffffffffffffffff000000ffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant empt4 = 0x00ffffffffffffffffffffffffff000000ffffffffffffffffffffffffffffff;\r\n    uint256 constant empt5 = 0x00ffffffffffffffffffffffffffffffff000000ffffffffffffffffffffffff;\r\n    uint256 constant empt6 = 0x00ffffffffffffffffffffffffffffffffffffff000000ffffffffffffffffff;\r\n    uint256 constant empt7 = 0x00ffffffffffffffffffffffffffffffffffffffffffff000000ffffffffffff;\r\n    uint256 constant empt8 = 0x00ffffffffffffffffffffffffffffffffffffffffffffffffff000000ffffff;\r\n    uint256 constant empt9 = 0x00ffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000;\r\n\r\n    uint256 constant indx1 = 0x0100000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant indx2 = 0x0200000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant indx3 = 0x0300000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant indx4 = 0x0400000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant indx5 = 0x0500000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant indx6 = 0x0600000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant indx7 = 0x0700000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant indx8 = 0x0800000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant indx9 = 0x0900000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    uint256 public contentPartFee = 0;\r\n    uint256 public recipientFee = 0;\r\n    address payable public beneficiary;\r\n\r\n    mapping (uint256 => uint256) public recipientToPushIndex;\r\n    mapping (address => uint256) public senderToBroadcastIndex;\r\n\r\n    event MailPush(uint256 indexed recipient, address indexed sender, uint256 msgId, uint256 mailList, bytes key);\r\n    event MailContent(uint256 indexed msgId, address indexed sender, uint16 parts, uint16 partIdx, bytes content);\r\n    event MailBroadcast(address indexed sender, uint256 msgId, uint256 mailList);\r\n\r\n    constructor() {\r\n        beneficiary = payable(msg.sender);\r\n    }\r\n\r\n    function shiftLeft(uint256 a, uint256 n) public pure returns (uint256) {\r\n        return uint256(a * 2 ** n);\r\n    }\r\n    \r\n    function shiftRight(uint256 a, uint256 n) public pure returns (uint256) {\r\n        return uint256(a / 2 ** n);\r\n    }\r\n\r\n    function nextIndex(uint256 orig, uint256 val) public pure returns (uint256 result) {\r\n        val = val & 0xffffff; // 3 bytes\r\n        uint8 currIdx = uint8(shiftRight(orig, 248));\r\n        if (currIdx == 9) {\r\n            return (orig & empt0) | shiftLeft(val, 216);\r\n        } else\r\n        if (currIdx == 0) {\r\n            return (orig & empt1) | indx1 | shiftLeft(val, 192);\r\n        } else\r\n        if (currIdx == 1) {\r\n            return (orig & empt2) | indx2 | shiftLeft(val, 168);\r\n        } else\r\n        if (currIdx == 2) {\r\n            return (orig & empt3) | indx3 | shiftLeft(val, 144);\r\n        } else\r\n        if (currIdx == 3) {\r\n            return (orig & empt4) | indx4 | shiftLeft(val, 120);\r\n        } else\r\n        if (currIdx == 4) {\r\n            return (orig & empt5) | indx5 | shiftLeft(val, 96);\r\n        } else\r\n        if (currIdx == 5) {\r\n            return (orig & empt6) | indx6 | shiftLeft(val, 72);\r\n        } else\r\n        if (currIdx == 6) {\r\n            return (orig & empt7) | indx7 | shiftLeft(val, 48);\r\n        } else\r\n        if (currIdx == 7) {\r\n            return (orig & empt8) | indx8 | shiftLeft(val, 24);\r\n        } else\r\n        if (currIdx == 8) {\r\n            return (orig & empt9) | indx9 | val;\r\n        }\r\n    }\r\n\r\n    function setFees(uint128 _contentPartFee, uint128 _recipientFee) public onlyOwner {\r\n        contentPartFee = _contentPartFee;\r\n        recipientFee = _recipientFee;\r\n    }\r\n\r\n    function setBeneficiary(address payable _beneficiary) public onlyOwner {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function buildHash(uint256 senderAddress, uint32 uniqueId, uint32 time) public pure returns (uint256 _hash) {\r\n        bytes memory data = bytes.concat(bytes32(senderAddress), bytes4(uniqueId), bytes4(time));\r\n        _hash = uint256(sha256(data));\r\n    }\r\n\r\n    // Virtual function for initializing bulk message sending\r\n    function getMsgId(uint256 senderAddress, uint32 uniqueId, uint32 initTime) public pure returns (uint256 msgId) {\r\n        msgId = buildHash(senderAddress, uniqueId, initTime);\r\n    }\r\n\r\n    // Send part of the long message\r\n    function sendMultipartMailPart(uint32 uniqueId, uint32 initTime, uint16 parts, uint16 partIdx, bytes calldata content) public {\r\n        if (block.timestamp < initTime) {\r\n            revert();\r\n        }\r\n        if (block.timestamp - initTime >= 600) {\r\n            revert();\r\n        }\r\n\r\n        uint256 msgId = buildHash(uint256(uint160(msg.sender)), uniqueId, initTime);\r\n\r\n        emit MailContent(msgId, msg.sender, parts, partIdx, content);\r\n\r\n        if (contentPartFee > 0) {\r\n            beneficiary.transfer(contentPartFee);\r\n        }\r\n    }\r\n\r\n    // Add recipient keys to some message\r\n    function addRecipients(uint32 uniqueId, uint32 initTime, uint256[] calldata recipients, bytes[] calldata keys) public {\r\n        uint256 msgId = buildHash(uint256(uint160(msg.sender)), uniqueId, initTime);\r\n        for (uint i = 0; i < recipients.length; i++) {\r\n            uint256 current = recipientToPushIndex[recipients[i]];\r\n            recipientToPushIndex[recipients[i]] = nextIndex(current, block.number / 128);\r\n            emit MailPush(recipients[i], msg.sender, msgId, current, keys[i]);\r\n        }\r\n\r\n        if (recipientFee * recipients.length > 0) {\r\n            beneficiary.transfer(uint128(recipientFee * recipients.length));\r\n        }\r\n    }\r\n\r\n    function sendSmallMail(uint32 uniqueId, uint256 recipient, bytes calldata key, bytes calldata content) public {\r\n        uint256 msgId = buildHash(uint256(uint160(msg.sender)), uniqueId, uint32(block.timestamp));\r\n\r\n        emit MailContent(msgId, msg.sender, 1, 0, content);\r\n        uint256 current = recipientToPushIndex[recipient];\r\n        recipientToPushIndex[recipient] = nextIndex(current, block.number / 128);\r\n        emit MailPush(recipient, msg.sender, msgId, current, key);\r\n\r\n        if (contentPartFee + recipientFee > 0) {\r\n            beneficiary.transfer(uint128(contentPartFee + recipientFee));\r\n        }\r\n    }\r\n\r\n    function sendBulkMail(uint32 uniqueId, uint256[] calldata recipients, bytes[] calldata keys, bytes calldata content) public {\r\n        uint256 msgId = buildHash(uint256(uint160(msg.sender)), uniqueId, uint32(block.timestamp));\r\n\r\n        emit MailContent(msgId, msg.sender, 1, 0, content);\r\n\r\n        for (uint i = 0; i < recipients.length; i++) {\r\n            uint256 current = recipientToPushIndex[recipients[i]];\r\n            recipientToPushIndex[recipients[i]] = nextIndex(current, block.number / 128);\r\n            emit MailPush(recipients[i], msg.sender, msgId, current, keys[i]);\r\n        }\r\n\r\n        if (contentPartFee + recipientFee * recipients.length > 0) {\r\n            beneficiary.transfer(uint128(contentPartFee + recipientFee * recipients.length));\r\n        }\r\n    }\r\n\r\n    function broadcastMail(uint32 uniqueId, bytes calldata content) public {\r\n        uint256 msgId = buildHash(uint256(uint160(msg.sender)), uniqueId, uint32(block.timestamp));\r\n\r\n        emit MailContent(msgId, msg.sender, 1, 0, content);\r\n        uint256 current = senderToBroadcastIndex[msg.sender];\r\n        senderToBroadcastIndex[msg.sender] = nextIndex(current, block.number / 128);\r\n        emit MailBroadcast(msg.sender, msgId, current);\r\n\r\n        if (contentPartFee > 0) {\r\n            beneficiary.transfer(uint128(contentPartFee));\r\n        }\r\n    }\r\n\r\n    function broadcastMailHeader(uint32 uniqueId, uint32 initTime) public {\r\n        uint256 msgId = buildHash(uint256(uint160(msg.sender)), uniqueId, initTime);\r\n        uint256 current = senderToBroadcastIndex[msg.sender];\r\n        senderToBroadcastIndex[msg.sender] = nextIndex(current, block.number / 128);\r\n        emit MailBroadcast(msg.sender, msgId, current);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/YlideMailerV7.sol\r\n\r\n\r\npragma solidity ^0.8.9;\r\n\r\ncontract YlideMailerV7 is Owned {\r\n\r\n    uint256 public version = 7;\r\n\r\n    uint256 constant empty0 = 0x00ff000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant empty1 = 0x00ffffffff000000ffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant empty2 = 0x00ffffffffffffff000000ffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant empty3 = 0x00ffffffffffffffffffff000000ffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant empty4 = 0x00ffffffffffffffffffffffffff000000ffffffffffffffffffffffffffffff;\r\n    uint256 constant empty5 = 0x00ffffffffffffffffffffffffffffffff000000ffffffffffffffffffffffff;\r\n    uint256 constant empty6 = 0x00ffffffffffffffffffffffffffffffffffffff000000ffffffffffffffffff;\r\n    uint256 constant empty7 = 0x00ffffffffffffffffffffffffffffffffffffffffffff000000ffffffffffff;\r\n    uint256 constant empty8 = 0x00ffffffffffffffffffffffffffffffffffffffffffffffffff000000ffffff;\r\n    uint256 constant empty9 = 0x00ffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000;\r\n\r\n    uint256 constant index1 = 0x0100000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index2 = 0x0200000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index3 = 0x0300000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index4 = 0x0400000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index5 = 0x0500000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index6 = 0x0600000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index7 = 0x0700000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index8 = 0x0800000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index9 = 0x0900000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    uint256 public contentPartFee = 0;\r\n    uint256 public recipientFee = 0;\r\n    address payable public beneficiary;\r\n\r\n    mapping (uint256 => uint256) public recipientToPushIndex;\r\n    mapping (address => uint256) public senderToBroadcastIndex;\r\n\r\n    mapping (uint256 => uint256) public recipientMessagesCount;\r\n    mapping (address => uint256) public broadcastMessagesCount;\r\n\r\n    event MailPush(uint256 indexed recipient, address indexed sender, uint256 msgId, uint256 mailList, bytes key);\r\n    event MailContent(uint256 indexed msgId, address indexed sender, uint16 parts, uint16 partIdx, bytes content);\r\n    event MailBroadcast(address indexed sender, uint256 msgId, uint256 mailList);\r\n\r\n    constructor() {\r\n        beneficiary = payable(msg.sender);\r\n    }\r\n\r\n    function shiftLeft(uint256 a, uint256 n) public pure returns (uint256) {\r\n        return uint256(a * 2 ** n);\r\n    }\r\n    \r\n    function shiftRight(uint256 a, uint256 n) public pure returns (uint256) {\r\n        return uint256(a / 2 ** n);\r\n    }\r\n\r\n    function nextIndex(uint256 orig, uint256 val) public pure returns (uint256 result) {\r\n        val = val & 0xffffff; // 3 bytes\r\n        uint8 currIdx = uint8(shiftRight(orig, 248));\r\n        if (currIdx == 9) {\r\n            return (orig & empty0) | shiftLeft(val, 216);\r\n        } else\r\n        if (currIdx == 0) {\r\n            return (orig & empty1) | index1 | shiftLeft(val, 192);\r\n        } else\r\n        if (currIdx == 1) {\r\n            return (orig & empty2) | index2 | shiftLeft(val, 168);\r\n        } else\r\n        if (currIdx == 2) {\r\n            return (orig & empty3) | index3 | shiftLeft(val, 144);\r\n        } else\r\n        if (currIdx == 3) {\r\n            return (orig & empty4) | index4 | shiftLeft(val, 120);\r\n        } else\r\n        if (currIdx == 4) {\r\n            return (orig & empty5) | index5 | shiftLeft(val, 96);\r\n        } else\r\n        if (currIdx == 5) {\r\n            return (orig & empty6) | index6 | shiftLeft(val, 72);\r\n        } else\r\n        if (currIdx == 6) {\r\n            return (orig & empty7) | index7 | shiftLeft(val, 48);\r\n        } else\r\n        if (currIdx == 7) {\r\n            return (orig & empty8) | index8 | shiftLeft(val, 24);\r\n        } else\r\n        if (currIdx == 8) {\r\n            return (orig & empty9) | index9 | val;\r\n        }\r\n    }\r\n\r\n    function setFees(uint128 _contentPartFee, uint128 _recipientFee) public onlyOwner {\r\n        contentPartFee = _contentPartFee;\r\n        recipientFee = _recipientFee;\r\n    }\r\n\r\n    function setBeneficiary(address payable _beneficiary) public onlyOwner {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    function buildHash(uint256 senderAddress, uint32 uniqueId, uint32 time) public pure returns (uint256 _hash) {\r\n        bytes memory data = bytes.concat(bytes32(senderAddress), bytes4(uniqueId), bytes4(time));\r\n        _hash = uint256(sha256(data));\r\n    }\r\n\r\n    // Virtual function for initializing bulk message sending\r\n    function getMsgId(uint256 senderAddress, uint32 uniqueId, uint32 initTime) public pure returns (uint256 msgId) {\r\n        msgId = buildHash(senderAddress, uniqueId, initTime);\r\n    }\r\n\r\n    // Send part of the long message\r\n    function sendMultipartMailPart(uint32 uniqueId, uint32 initTime, uint16 parts, uint16 partIdx, bytes calldata content) public {\r\n        if (block.timestamp < initTime) {\r\n            revert();\r\n        }\r\n        if (block.timestamp - initTime >= 600) {\r\n            revert();\r\n        }\r\n\r\n        uint256 msgId = buildHash(uint256(uint160(msg.sender)), uniqueId, initTime);\r\n\r\n        emit MailContent(msgId, msg.sender, parts, partIdx, content);\r\n\r\n        if (contentPartFee > 0) {\r\n            beneficiary.transfer(contentPartFee);\r\n        }\r\n    }\r\n\r\n    // Add recipient keys to some message\r\n    function addRecipients(uint32 uniqueId, uint32 initTime, uint256[] calldata recipients, bytes[] calldata keys) public {\r\n        uint256 msgId = buildHash(uint256(uint160(msg.sender)), uniqueId, initTime);\r\n        for (uint i = 0; i < recipients.length; i++) {\r\n            uint256 current = recipientToPushIndex[recipients[i]];\r\n            recipientToPushIndex[recipients[i]] = nextIndex(current, block.number / 128);\r\n            recipientMessagesCount[recipients[i]] += 1;\r\n            emit MailPush(recipients[i], msg.sender, msgId, current, keys[i]);\r\n        }\r\n\r\n        if (recipientFee * recipients.length > 0) {\r\n            beneficiary.transfer(uint128(recipientFee * recipients.length));\r\n        }\r\n    }\r\n\r\n    function sendSmallMail(uint32 uniqueId, uint256 recipient, bytes calldata key, bytes calldata content) public {\r\n        uint256 msgId = buildHash(uint256(uint160(msg.sender)), uniqueId, uint32(block.timestamp));\r\n\r\n        emit MailContent(msgId, msg.sender, 1, 0, content);\r\n        uint256 current = recipientToPushIndex[recipient];\r\n        recipientToPushIndex[recipient] = nextIndex(current, block.number / 128);\r\n        recipientMessagesCount[recipient] += 1;\r\n        emit MailPush(recipient, msg.sender, msgId, current, key);\r\n\r\n        if (contentPartFee + recipientFee > 0) {\r\n            beneficiary.transfer(uint128(contentPartFee + recipientFee));\r\n        }\r\n    }\r\n\r\n    function sendBulkMail(uint32 uniqueId, uint256[] calldata recipients, bytes[] calldata keys, bytes calldata content) public {\r\n        uint256 msgId = buildHash(uint256(uint160(msg.sender)), uniqueId, uint32(block.timestamp));\r\n\r\n        emit MailContent(msgId, msg.sender, 1, 0, content);\r\n\r\n        for (uint i = 0; i < recipients.length; i++) {\r\n            uint256 current = recipientToPushIndex[recipients[i]];\r\n            recipientToPushIndex[recipients[i]] = nextIndex(current, block.number / 128);\r\n            recipientMessagesCount[recipients[i]] += 1;\r\n            emit MailPush(recipients[i], msg.sender, msgId, current, keys[i]);\r\n        }\r\n\r\n        if (contentPartFee + recipientFee * recipients.length > 0) {\r\n            beneficiary.transfer(uint128(contentPartFee + recipientFee * recipients.length));\r\n        }\r\n    }\r\n\r\n    function broadcastMail(uint32 uniqueId, bytes calldata content) public {\r\n        uint256 msgId = buildHash(uint256(uint160(msg.sender)), uniqueId, uint32(block.timestamp));\r\n\r\n        emit MailContent(msgId, msg.sender, 1, 0, content);\r\n        uint256 current = senderToBroadcastIndex[msg.sender];\r\n        senderToBroadcastIndex[msg.sender] = nextIndex(current, block.number / 128);\r\n        broadcastMessagesCount[msg.sender] += 1;\r\n        emit MailBroadcast(msg.sender, msgId, current);\r\n\r\n        if (contentPartFee > 0) {\r\n            beneficiary.transfer(uint128(contentPartFee));\r\n        }\r\n    }\r\n\r\n    function broadcastMailHeader(uint32 uniqueId, uint32 initTime) public {\r\n        uint256 msgId = buildHash(uint256(uint160(msg.sender)), uniqueId, initTime);\r\n        uint256 current = senderToBroadcastIndex[msg.sender];\r\n        senderToBroadcastIndex[msg.sender] = nextIndex(current, block.number / 128);\r\n        broadcastMessagesCount[msg.sender] += 1;\r\n        emit MailBroadcast(msg.sender, msgId, current);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/helpers/BlockNumberRingBufferIndex.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\ncontract BlockNumberRingBufferIndex {\r\n    \r\n\tuint256 constant empty0 = 0x00ff000000ffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant empty1 = 0x00ffffffff000000ffffffffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant empty2 = 0x00ffffffffffffff000000ffffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant empty3 = 0x00ffffffffffffffffffff000000ffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant empty4 = 0x00ffffffffffffffffffffffffff000000ffffffffffffffffffffffffffffff;\r\n    uint256 constant empty5 = 0x00ffffffffffffffffffffffffffffffff000000ffffffffffffffffffffffff;\r\n    uint256 constant empty6 = 0x00ffffffffffffffffffffffffffffffffffffff000000ffffffffffffffffff;\r\n    uint256 constant empty7 = 0x00ffffffffffffffffffffffffffffffffffffffffffff000000ffffffffffff;\r\n    uint256 constant empty8 = 0x00ffffffffffffffffffffffffffffffffffffffffffffffffff000000ffffff;\r\n    uint256 constant empty9 = 0x00ffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000;\r\n\r\n    uint256 constant indexF = 0xff00000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    uint256 constant index1 = 0x0100000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index2 = 0x0200000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index3 = 0x0300000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index4 = 0x0400000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index5 = 0x0500000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index6 = 0x0600000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index7 = 0x0700000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index8 = 0x0800000000000000000000000000000000000000000000000000000000000000;\r\n    uint256 constant index9 = 0x0900000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    uint256 constant shift024 = 0x0000000000000000000000000000000000000000000000000000000001000000;\r\n    uint256 constant shift048 = 0x0000000000000000000000000000000000000000000000000001000000000000;\r\n    uint256 constant shift072 = 0x0000000000000000000000000000000000000000000001000000000000000000;\r\n    uint256 constant shift096 = 0x0000000000000000000000000000000000000001000000000000000000000000;\r\n    uint256 constant shift120 = 0x0000000000000000000000000000000001000000000000000000000000000000;\r\n    uint256 constant shift144 = 0x0000000000000000000000000001000000000000000000000000000000000000;\r\n    uint256 constant shift168 = 0x0000000000000000000001000000000000000000000000000000000000000000;\r\n    uint256 constant shift192 = 0x0000000000000001000000000000000000000000000000000000000000000000;\r\n    uint256 constant shift216 = 0x0000000001000000000000000000000000000000000000000000000000000000;\r\n\r\n    function storeBlockNumber(uint256 indexValue, uint256 blockNumber) public pure returns (uint256) {\r\n        blockNumber = blockNumber & 0xffffff; // 3 bytes\r\n        uint256 currIdx = indexValue & indexF;\r\n        if (currIdx == 0) {\r\n            return (indexValue & empty1) | index1 | (blockNumber * shift192);\r\n        } else\r\n        if (currIdx == index1) {\r\n            return (indexValue & empty2) | index2 | (blockNumber * shift168);\r\n        } else\r\n        if (currIdx == index2) {\r\n            return (indexValue & empty3) | index3 | (blockNumber * shift144);\r\n        } else\r\n        if (currIdx == index3) {\r\n            return (indexValue & empty4) | index4 | (blockNumber * shift120);\r\n        } else\r\n        if (currIdx == index4) {\r\n            return (indexValue & empty5) | index5 | (blockNumber * shift096);\r\n        } else\r\n        if (currIdx == index5) {\r\n            return (indexValue & empty6) | index6 | (blockNumber * shift072);\r\n        } else\r\n        if (currIdx == index6) {\r\n            return (indexValue & empty7) | index7 | (blockNumber * shift048);\r\n        } else\r\n        if (currIdx == index7) {\r\n            return (indexValue & empty8) | index8 | (blockNumber * shift024);\r\n        } else\r\n        if (currIdx == index8) {\r\n            return (indexValue & empty9) | index9 | blockNumber;\r\n        } else {\r\n            return (indexValue & empty0) | (blockNumber * shift216);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/YlideMailerV8.sol\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\n\r\n\r\nstruct BroadcastFeedV8 {\r\n    address owner;\r\n    address payable beneficiary;\r\n\r\n    uint256 broadcastFee;\r\n\r\n    bool isPublic;\r\n    mapping (address => bool) writers;\r\n    uint256 messagesIndex;\r\n    uint256 messagesCount;\r\n}\r\n\r\n// struct MailingThreadV8 {\r\n//     uint256 messagesIndex;\r\n//     uint256 messageCount;\r\n\r\n//     mapping (uint256 => bool) recipientParticipationStatus;\r\n// }\r\n\r\nstruct MailingFeedV8 {\r\n    address owner;\r\n    address payable beneficiary;\r\n\r\n    uint256 recipientFee;\r\n\r\n    mapping (uint256 => uint256) recipientToMailIndex;\r\n    mapping (uint256 => uint256) recipientMessagesCount;\r\n\r\n    // mapping (uint256 => uint256) recipientToThreadJoinEventsIndex;\r\n    // mapping (uint256 => MailingThreadV8) threads;\r\n}\r\n\r\ncontract YlideMailerV8 is Owned, Terminatable, FiduciaryDuty, BlockNumberRingBufferIndex {\r\n\r\n    uint256 constant public version = 8;\r\n\r\n    mapping (uint256 => MailingFeedV8) public mailingFeeds;\r\n    mapping (uint256 => BroadcastFeedV8) public broadcastFeeds;\r\n\r\n    mapping (uint256 => uint256) public recipientToMailingFeedJoinEventsIndex;\r\n\r\n    event MailPush(\r\n        uint256 indexed recipient,\r\n        uint256 indexed feedId,\r\n        address sender,\r\n        uint256 contentId,\r\n        uint256 previousFeedEventsIndex,\r\n        bytes key\r\n    );\r\n\r\n    event ContentRecipients(\r\n        uint256 indexed contentId,\r\n        address indexed sender,\r\n        uint256[] recipients\r\n    );\r\n\r\n    event BroadcastPush(\r\n        address indexed sender,\r\n        uint256 indexed feedId,\r\n        uint256 contentId,\r\n        uint256 previousFeedEventsIndex\r\n    );\r\n    \r\n    event MessageContent(\r\n        uint256 indexed contentId,\r\n        address indexed sender,\r\n        uint16 parts,\r\n        uint16 partIdx,\r\n        bytes content\r\n    );\r\n    \r\n    event MailingFeedCreated(uint256 indexed feedId, address indexed creator);\r\n    event BroadcastFeedCreated(uint256 indexed feedId, address indexed creator);\r\n    \r\n    event MailingFeedOwnershipTransferred(uint256 indexed feedId, address newOwner);\r\n    event BroadcastFeedOwnershipTransferred(uint256 indexed feedId, address newOwner);\r\n\r\n    event MailingFeedBeneficiaryChanged(uint256 indexed feedId, address newBeneficiary);\r\n    event BroadcastFeedBeneficiaryChanged(uint256 indexed feedId, address newBeneficiary);\r\n    \r\n    event BroadcastFeedPublicityChanged(uint256 indexed feedId, bool isPublic);\r\n    event BroadcastFeedWriterChange(uint256 indexed feedId, address indexed writer, bool status);\r\n\r\n    // event ThreadCreated(uint256 indexed feedId, uint256 indexed threadId, address indexed creator);\r\n    // event ThreadJoined(uint256 indexed feedId, uint256 indexed threadId, uint256 indexed newParticipant, uint256 previousThreadJoinEventsIndex);\r\n\r\n    event MailingFeedJoined(uint256 indexed feedId, uint256 indexed newParticipant, uint256 previousFeedJoinEventsIndex);\r\n\r\n    constructor() {\r\n        mailingFeeds[0].owner = msg.sender; // regular mail\r\n        mailingFeeds[0].beneficiary = payable(msg.sender);\r\n\r\n        mailingFeeds[1].owner = msg.sender; // otc mail\r\n        mailingFeeds[1].beneficiary = payable(msg.sender);\r\n\r\n        mailingFeeds[2].owner = msg.sender; // system messages\r\n        mailingFeeds[2].beneficiary = payable(msg.sender);\r\n\r\n        mailingFeeds[3].owner = msg.sender; // system messages\r\n        mailingFeeds[3].beneficiary = payable(msg.sender);\r\n\r\n        mailingFeeds[4].owner = msg.sender; // system messages\r\n        mailingFeeds[4].beneficiary = payable(msg.sender);\r\n\r\n        mailingFeeds[5].owner = msg.sender; // system messages\r\n        mailingFeeds[5].beneficiary = payable(msg.sender);\r\n\r\n        mailingFeeds[6].owner = msg.sender; // system messages\r\n        mailingFeeds[6].beneficiary = payable(msg.sender);\r\n\r\n        mailingFeeds[7].owner = msg.sender; // system messages\r\n        mailingFeeds[7].beneficiary = payable(msg.sender);\r\n\r\n        mailingFeeds[8].owner = msg.sender; // system messages\r\n        mailingFeeds[8].beneficiary = payable(msg.sender);\r\n\r\n        mailingFeeds[9].owner = msg.sender; // system messages\r\n        mailingFeeds[9].beneficiary = payable(msg.sender);\r\n\r\n        mailingFeeds[10].owner = msg.sender; // system messages\r\n        mailingFeeds[10].beneficiary = payable(msg.sender);\r\n\r\n        broadcastFeeds[0].owner = msg.sender;\r\n        broadcastFeeds[0].beneficiary = payable(msg.sender);\r\n        broadcastFeeds[0].isPublic = false;\r\n        broadcastFeeds[0].writers[msg.sender] = true;\r\n\r\n        broadcastFeeds[1].owner = msg.sender;\r\n        broadcastFeeds[1].beneficiary = payable(msg.sender);\r\n        broadcastFeeds[1].isPublic = false;\r\n        broadcastFeeds[1].writers[msg.sender] = true;\r\n\r\n        broadcastFeeds[2].owner = msg.sender;\r\n        broadcastFeeds[2].beneficiary = payable(msg.sender);\r\n        broadcastFeeds[2].isPublic = true;\r\n    }\r\n\r\n    modifier blockLock(uint256 firstBlockNumber, uint256 blockCountLock) {\r\n        if (block.number < firstBlockNumber) {\r\n            revert('Number less than firstBlockNumber');\r\n        }\r\n        if (block.number - firstBlockNumber >= blockCountLock) {\r\n            revert('Number more than firstBlockNumber + blockCountLock');\r\n        }\r\n        _;\r\n    }\r\n\r\n    function setMailingFeedFees(uint256 feedId, uint256 _recipientFee) public {\r\n        if (msg.sender != mailingFeeds[feedId].owner) {\r\n            revert();\r\n        }\r\n        mailingFeeds[feedId].recipientFee = _recipientFee;\r\n    }\r\n\r\n    function setBroadcastFeedFees(uint256 feedId, uint256 _broadcastFee) public {\r\n        if (msg.sender != broadcastFeeds[feedId].owner) {\r\n            revert();\r\n        }\r\n        broadcastFeeds[feedId].broadcastFee = _broadcastFee;\r\n    }\r\n\r\n    function isBroadcastFeedWriter(uint256 feedId, address addr) public view returns (bool) {\r\n        return broadcastFeeds[feedId].writers[addr];\r\n    }\r\n\r\n    function getMailingFeedRecipientIndex(uint256 feedId, uint256 recipient) public view returns (uint256) {\r\n        return mailingFeeds[feedId].recipientToMailIndex[recipient];\r\n    }\r\n\r\n    function getMailingFeedRecipientMessagesCount(uint256 feedId, uint256 recipient) public view returns (uint256) {\r\n        return mailingFeeds[feedId].recipientMessagesCount[recipient];\r\n    }\r\n\r\n    function payOutMailingFeed(uint256 feedId, uint256 recipients) internal virtual {\r\n\t\tuint256 totalValue = mailingFeeds[feedId].recipientFee * recipients;\r\n\t\tif (totalValue > 0) {\r\n\t\t\tmailingFeeds[feedId].beneficiary.transfer(totalValue);\r\n\t\t}\r\n\t}\r\n\r\n    function payOutBroadcastFeed(uint256 feedId, uint256 broadcasts) internal virtual {\r\n        uint256 totalValue = broadcastFeeds[feedId].broadcastFee * broadcasts;\r\n\t\tif (totalValue > 0) {\r\n\t\t\tbroadcastFeeds[feedId].beneficiary.transfer(totalValue);\r\n\t\t}\r\n    }\r\n\r\n    receive() external payable {\r\n        // do nothing\r\n    }\r\n\r\n    function buildContentId(address senderAddress, uint256 uniqueId, uint256 firstBlockNumber, uint256 partsCount, uint256 blockCountLock) public pure returns (uint256) {\r\n        uint256 _hash = uint256(sha256(bytes.concat(bytes32(uint256(uint160(senderAddress))), bytes32(uniqueId), bytes32(firstBlockNumber))));\r\n\r\n        uint256 versionMask = (version & 0xFF) * 0x100000000000000000000000000000000000000000000000000000000000000;\r\n        uint256 blockNumberMask = (firstBlockNumber & 0xFFFFFFFF) * 0x1000000000000000000000000000000000000000000000000000000;\r\n        uint256 partsCountMask = (partsCount & 0xFFFF) * 0x100000000000000000000000000000000000000000000000000;\r\n        uint256 blockCountLockMask = (blockCountLock & 0xFFFF) * 0x10000000000000000000000000000000000000000000000;\r\n\r\n        uint256 hashMask = _hash & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n        return versionMask | blockNumberMask | partsCountMask | blockCountLockMask | hashMask;\r\n    }\r\n\r\n    /* ----------- MAIL PUSHES ----------- */\r\n    /**\r\n     * sendSmallMail - for sending tiny content to 1 recipient\r\n     * sendBulkMail - for sending tiny content to multiple recipients\r\n     * addMailRecipients - for adding recipients to any message (multipart or not)\r\n     */\r\n\r\n    function emitMailPush(uint256 feedId, uint256 rec, address sender, uint256 contentId, bytes memory key) internal {\r\n        if (mailingFeeds[feedId].owner == address(0)) {\r\n            revert(\"Feed does not exist\");\r\n        }\r\n        uint256 shrinkedBlock = block.number / 128;\r\n        if (mailingFeeds[feedId].recipientMessagesCount[rec] == 0) {\r\n            uint256 currentMailingFeedJoinEventsIndex = recipientToMailingFeedJoinEventsIndex[rec];\r\n            recipientToMailingFeedJoinEventsIndex[rec] = storeBlockNumber(currentMailingFeedJoinEventsIndex, shrinkedBlock);\r\n            emit MailingFeedJoined(feedId, rec, currentMailingFeedJoinEventsIndex);\r\n        }\r\n        // if (threadId != 0) {\r\n        //     if (mailingFeeds[feedId].threads[threadId].recipientParticipationStatus[rec] == false) {\r\n        //         mailingFeeds[feedId].threads[threadId].recipientParticipationStatus[rec] = true;\r\n        //         uint256 currentThreadJoinEventsIndex = mailingFeeds[feedId].recipientToThreadJoinEventsIndex[rec];\r\n        //         mailingFeeds[feedId].recipientToThreadJoinEventsIndex[rec] = storeBlockNumber(currentThreadJoinEventsIndex, shrinkedBlock);\r\n        //         emit ThreadJoined(feedId, threadId, rec, currentThreadJoinEventsIndex);\r\n        //     }\r\n        // }\r\n        uint256 currentFeed = mailingFeeds[feedId].recipientToMailIndex[rec];\r\n        mailingFeeds[feedId].recipientToMailIndex[rec] = storeBlockNumber(currentFeed, shrinkedBlock);\r\n        // write anything to map - 20k gas. think about it\r\n        mailingFeeds[feedId].recipientMessagesCount[rec] += 1;\r\n        // uint256 currentThread = 0;\r\n        // if (threadId != 0) {\r\n        //     currentThread = mailingFeeds[feedId].threads[threadId].messagesIndex;\r\n        //     mailingFeeds[feedId].threads[threadId].messagesIndex = storeBlockNumber(currentThread, shrinkedBlock);\r\n        // }\r\n        emit MailPush(rec, feedId, sender, contentId, currentFeed, key);\r\n    }\r\n\r\n    function sendBulkMail(uint256 feedId, uint256 uniqueId, uint256[] calldata recipients, bytes[] calldata keys, bytes calldata content) public payable notTerminated returns (uint256) {\r\n        uint256 contentId = buildContentId(msg.sender, uniqueId, block.number, 1, 0);\r\n\r\n        emit MessageContent(contentId, msg.sender, 1, 0, content);\r\n\r\n        for (uint i = 0; i < recipients.length; i++) {\r\n            emitMailPush(feedId, recipients[i], msg.sender, contentId, keys[i]);\r\n        }\r\n        emit ContentRecipients(contentId, msg.sender, recipients);\r\n\r\n        payOut(1, recipients.length, 0);\r\n        payOutMailingFeed(feedId, recipients.length);\r\n\r\n        return contentId;\r\n    }\r\n\r\n    function addMailRecipients(\r\n        uint256 feedId,\r\n        uint256 uniqueId,\r\n        uint256 firstBlockNumber,\r\n        uint16 partsCount,\r\n        uint16 blockCountLock,\r\n        uint256[] calldata recipients,\r\n        bytes[] calldata keys\r\n    ) public payable notTerminated blockLock(firstBlockNumber, blockCountLock) returns (uint256) {\r\n        uint256 contentId = buildContentId(msg.sender, uniqueId, firstBlockNumber, partsCount, blockCountLock);\r\n        for (uint i = 0; i < recipients.length; i++) {\r\n            emitMailPush(feedId, recipients[i], msg.sender, contentId, keys[i]);\r\n        }\r\n        emit ContentRecipients(contentId, msg.sender, recipients);\r\n\r\n        payOut(0, recipients.length, 0);\r\n        payOutMailingFeed(feedId, recipients.length);\r\n\r\n        return contentId;\r\n    }\r\n\r\n    /* ---------------------------------------------- */\r\n    /* ------------- MAIL BROADCASTS ---------------- */\r\n    /**\r\n     * sendBroadcast - for sending broadcast content in one transaction\r\n     * sendBroadcastHeader - for emitting broadcast header after uploading all parts of the content\r\n     */\r\n\r\n    function emitBroadcastPush(address sender, uint256 feedId, uint256 contentId) internal {\r\n        uint256 current = broadcastFeeds[feedId].messagesIndex;\r\n        broadcastFeeds[feedId].messagesIndex = storeBlockNumber(current, block.number / 128);\r\n        broadcastFeeds[feedId].messagesCount += 1;\r\n        emit BroadcastPush(sender, feedId, contentId, current);\r\n    }\r\n\r\n    function sendBroadcast(bool isPersonal, uint256 feedId, uint256 uniqueId, bytes calldata content) public payable notTerminated returns (uint256) {\r\n        if (!isPersonal && !broadcastFeeds[feedId].isPublic && broadcastFeeds[feedId].writers[msg.sender] != true) {\r\n            revert('You are not allowed to write to this feed');\r\n        }\r\n\r\n        uint256 composedFeedId = isPersonal ? uint256(sha256(abi.encodePacked(msg.sender, uint256(1), feedId))) : feedId;\r\n\r\n        uint256 contentId = buildContentId(msg.sender, uniqueId, block.number, 1, 0);\r\n\r\n        emit MessageContent(contentId, msg.sender, 1, 0, content);\r\n        emitBroadcastPush(msg.sender, composedFeedId, contentId);\r\n\r\n        payOut(1, 0, 1);\r\n        if (!isPersonal) {\r\n            payOutBroadcastFeed(feedId, 1);\r\n        }\r\n\r\n        return contentId;\r\n    }\r\n\r\n    function sendBroadcastHeader(bool isPersonal, uint256 feedId, uint256 uniqueId, uint256 firstBlockNumber, uint16 partsCount, uint16 blockCountLock) public payable notTerminated returns (uint256) {\r\n        if (!isPersonal && !broadcastFeeds[feedId].isPublic && broadcastFeeds[feedId].writers[msg.sender] != true) {\r\n            revert('You are not allowed to write to this feed');\r\n        }\r\n\r\n        uint256 composedFeedId = isPersonal ? uint256(sha256(abi.encodePacked(msg.sender, feedId))) : feedId;\r\n\r\n        uint256 contentId = buildContentId(msg.sender, uniqueId, firstBlockNumber, partsCount, blockCountLock);\r\n\r\n        emitBroadcastPush(msg.sender, composedFeedId, contentId);\r\n\r\n        payOut(0, 0, 1);\r\n        if (!isPersonal) {\r\n            payOutBroadcastFeed(feedId, 1);\r\n        }\r\n\r\n        return contentId;\r\n    }\r\n\r\n    /* ---------------------------------------------- */\r\n\r\n    // For sending content part - for broadcast or not\r\n    function sendMessageContentPart(\r\n        uint256 uniqueId,\r\n        uint256 firstBlockNumber,\r\n        uint256 blockCountLock,\r\n        uint16 parts,\r\n        uint16 partIdx,\r\n        bytes calldata content\r\n    ) public payable notTerminated blockLock(firstBlockNumber, blockCountLock) returns (uint256) {\r\n        uint256 contentId = buildContentId(msg.sender, uniqueId, firstBlockNumber, parts, blockCountLock);\r\n        emit MessageContent(contentId, msg.sender, parts, partIdx, content);\r\n\r\n        payOut(1, 0, 0);\r\n\r\n        return contentId;\r\n    }\r\n\r\n    /* ---------------------------------------------- */\r\n\r\n    // Feed management:\r\n    function createMailingFeed(uint256 uniqueId) public payable returns (uint256) {\r\n        uint256 feedId = uint256(keccak256(abi.encodePacked(msg.sender, uint256(0), uniqueId)));\r\n\r\n        if (mailingFeeds[feedId].owner != address(0)) {\r\n            revert('Feed already exists');\r\n        }\r\n        \r\n        mailingFeeds[feedId].owner = msg.sender;\r\n        mailingFeeds[feedId].beneficiary = payable(msg.sender);\r\n\r\n        payForMailingFeedCreation();\r\n\r\n        emit MailingFeedCreated(feedId, msg.sender);\r\n\r\n        return feedId;\r\n    }\r\n\r\n    function transferMailingFeedOwnership(uint256 feedId, address newOwner) public {\r\n        if (mailingFeeds[feedId].owner != msg.sender) {\r\n            revert('You are not allowed to transfer ownership of this feed');\r\n        }\r\n\r\n        mailingFeeds[feedId].owner = newOwner;\r\n        emit MailingFeedOwnershipTransferred(feedId, newOwner);\r\n    }\r\n\r\n    function setMailingFeedBeneficiary(uint256 feedId, address payable newBeneficiary) public {\r\n        if (mailingFeeds[feedId].owner != msg.sender) {\r\n            revert('You are not allowed to set beneficiary of this feed');\r\n        }\r\n\r\n        mailingFeeds[feedId].beneficiary = newBeneficiary;\r\n        emit MailingFeedBeneficiaryChanged(feedId, newBeneficiary);\r\n    }\r\n\r\n    function createBroadcastFeed(uint256 uniqueId, bool isPublic) public payable returns (uint256) {\r\n        uint256 feedId = uint256(keccak256(abi.encodePacked(msg.sender, uint256(0), uniqueId)));\r\n\r\n        if (broadcastFeeds[feedId].owner != address(0)) {\r\n            revert('Feed already exists');\r\n        }\r\n        \r\n        broadcastFeeds[feedId].owner = msg.sender;\r\n        broadcastFeeds[feedId].beneficiary = payable(msg.sender);\r\n        broadcastFeeds[feedId].isPublic = isPublic;\r\n        broadcastFeeds[feedId].writers[msg.sender] = true;\r\n        broadcastFeeds[feedId].messagesIndex = 0;\r\n        broadcastFeeds[feedId].messagesCount = 0;\r\n\r\n        payForBroadcastFeedCreation();\r\n\r\n        emit BroadcastFeedCreated(feedId, msg.sender);\r\n\r\n        return feedId;\r\n    }\r\n\r\n    function transferBroadcastFeedOwnership(uint256 feedId, address newOwner) public {\r\n        if (broadcastFeeds[feedId].owner != msg.sender) {\r\n            revert('You are not allowed to transfer ownership of this feed');\r\n        }\r\n\r\n        broadcastFeeds[feedId].owner = newOwner;\r\n        emit BroadcastFeedOwnershipTransferred(feedId, newOwner);\r\n    }\r\n\r\n    function setBroadcastFeedBeneficiary(uint256 feedId, address payable newBeneficiary) public {\r\n        if (broadcastFeeds[feedId].owner != msg.sender) {\r\n            revert('You are not allowed to set beneficiary of this feed');\r\n        }\r\n\r\n        broadcastFeeds[feedId].beneficiary = newBeneficiary;\r\n        emit BroadcastFeedBeneficiaryChanged(feedId, newBeneficiary);\r\n    }\r\n\r\n    function changeBroadcastFeedPublicity(uint256 feedId, bool isPublic) public {\r\n        if (broadcastFeeds[feedId].owner != msg.sender) {\r\n            revert('You are not allowed to change publicity of this feed');\r\n        }\r\n\r\n        broadcastFeeds[feedId].isPublic = isPublic;\r\n        emit BroadcastFeedPublicityChanged(feedId, isPublic);\r\n    }\r\n\r\n    function addBroadcastFeedWriter(uint256 feedId, address writer) public {\r\n        if (broadcastFeeds[feedId].owner != msg.sender) {\r\n            revert('You are not allowed to add writers to this feed');\r\n        }\r\n\r\n        broadcastFeeds[feedId].writers[writer] = true;\r\n        emit BroadcastFeedWriterChange(feedId, writer, true);\r\n    }\r\n\r\n    function removeBroadcastFeedWriter(uint256 feedId, address writer) public {\r\n        if (broadcastFeeds[feedId].owner != msg.sender) {\r\n            revert('You are not allowed to remove writers from this feed');\r\n        }\r\n\r\n        delete broadcastFeeds[feedId].writers[writer];\r\n        emit BroadcastFeedWriterChange(feedId, writer, false);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/helpers/Constants.sol\r\n\r\n\r\npragma solidity 0.8.17;\r\n\r\nuint8 constant CONTRACT_TYPE_NONE = 0;\r\nuint8 constant CONTRACT_TYPE_PAY = 1;\r\nuint8 constant CONTRACT_TYPE_SAFE = 2;\r\n\r\n\r\n// File contracts/YlideMailerV9.sol\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\n\r\n\r\n\r\ncontract YlideMailerV9 is\r\n\tIYlideMailer,\r\n\tOwned,\r\n\tTerminatable,\r\n\tFiduciaryDuty,\r\n\tBlockNumberRingBufferIndex,\r\n\tEIP712\r\n{\r\n\tuint256 public constant version = 9;\r\n\r\n\tmapping(uint256 => MailingFeedV9) public mailingFeeds;\r\n\tmapping(uint256 => BroadcastFeedV9) public broadcastFeeds;\r\n\r\n\tmapping(uint256 => uint256) public recipientToMailingFeedJoinEventsIndex;\r\n\r\n\tmapping(address => uint256) public nonces;\r\n\r\n\tmapping(address => bool) public isYlide;\r\n\taddress payable public extraTreasury;\r\n\r\n\tstruct BroadcastFeedV9 {\r\n\t\taddress owner;\r\n\t\taddress payable beneficiary;\r\n\t\tuint256 broadcastFee;\r\n\t\tbool isPublic;\r\n\t\tmapping(address => bool) writers;\r\n\t\tuint256 messagesIndex;\r\n\t\tuint256 messagesCount;\r\n\t}\r\n\r\n\tstruct MailingFeedV9 {\r\n\t\taddress owner;\r\n\t\taddress payable beneficiary;\r\n\t\tuint256 recipientFee;\r\n\t\tmapping(uint256 => uint256) recipientToMailIndex;\r\n\t\tmapping(uint256 => uint256) recipientMessagesCount;\r\n\t}\r\n\r\n\tevent MailPush(\r\n\t\tuint256 indexed recipient,\r\n\t\tuint256 indexed feedId,\r\n\t\taddress sender,\r\n\t\tuint256 contentId,\r\n\t\tuint256 previousFeedEventsIndex,\r\n\t\tbytes key,\r\n\t\tSupplement supplement\r\n\t);\r\n\r\n\tevent BroadcastPush(\r\n\t\taddress indexed sender,\r\n\t\tuint256 indexed feedId,\r\n\t\tuint256 contentId,\r\n\t\tuint256 extraPayment,\r\n\t\tuint256 previousFeedEventsIndex\r\n\t);\r\n\r\n\tevent MessageContent(\r\n\t\tuint256 indexed contentId,\r\n\t\taddress indexed sender,\r\n\t\tuint16 parts,\r\n\t\tuint16 partIdx,\r\n\t\tbytes content\r\n\t);\r\n\r\n\tevent MailingFeedCreated(uint256 indexed feedId, address indexed creator);\r\n\tevent BroadcastFeedCreated(uint256 indexed feedId, address indexed creator);\r\n\r\n\tevent MailingFeedOwnershipTransferred(uint256 indexed feedId, address newOwner);\r\n\tevent BroadcastFeedOwnershipTransferred(uint256 indexed feedId, address newOwner);\r\n\r\n\tevent MailingFeedBeneficiaryChanged(uint256 indexed feedId, address newBeneficiary);\r\n\tevent BroadcastFeedBeneficiaryChanged(uint256 indexed feedId, address newBeneficiary);\r\n\r\n\tevent BroadcastFeedPublicityChanged(uint256 indexed feedId, bool isPublic);\r\n\tevent BroadcastFeedWriterChange(uint256 indexed feedId, address indexed writer, bool status);\r\n\r\n\tevent MailingFeedJoined(\r\n\t\tuint256 indexed feedId,\r\n\t\tuint256 indexed newParticipant,\r\n\t\tuint256 previousFeedJoinEventsIndex\r\n\t);\r\n\r\n\terror NumberLessThanFirstBlockNumber();\r\n\terror NumberMoreThanFirstBlockNumberPlusBlockCountLock();\r\n\terror NotFeedOwner();\r\n\terror FeedExists();\r\n\terror FeedDoesNotExist();\r\n\terror InvalidSignature();\r\n\terror SignatureExpired();\r\n\terror InvalidNonce();\r\n\terror FeedAlreadyExists();\r\n\terror FeedNotAllowed();\r\n\terror IsNotYlide();\r\n\r\n\tconstructor() EIP712(\"YlideMailerV9\", \"9\") {\r\n\t\textraTreasury = payable(msg.sender);\r\n\r\n\t\tmailingFeeds[0].owner = msg.sender; // regular mail\r\n\t\tmailingFeeds[0].beneficiary = payable(msg.sender);\r\n\r\n\t\tmailingFeeds[1].owner = msg.sender; // otc mail\r\n\t\tmailingFeeds[1].beneficiary = payable(msg.sender);\r\n\r\n\t\tmailingFeeds[2].owner = msg.sender; // system messages\r\n\t\tmailingFeeds[2].beneficiary = payable(msg.sender);\r\n\r\n\t\tmailingFeeds[3].owner = msg.sender; // system messages\r\n\t\tmailingFeeds[3].beneficiary = payable(msg.sender);\r\n\r\n\t\tmailingFeeds[4].owner = msg.sender; // system messages\r\n\t\tmailingFeeds[4].beneficiary = payable(msg.sender);\r\n\r\n\t\tmailingFeeds[5].owner = msg.sender; // system messages\r\n\t\tmailingFeeds[5].beneficiary = payable(msg.sender);\r\n\r\n\t\tmailingFeeds[6].owner = msg.sender; // system messages\r\n\t\tmailingFeeds[6].beneficiary = payable(msg.sender);\r\n\r\n\t\tmailingFeeds[7].owner = msg.sender; // system messages\r\n\t\tmailingFeeds[7].beneficiary = payable(msg.sender);\r\n\r\n\t\tmailingFeeds[8].owner = msg.sender; // system messages\r\n\t\tmailingFeeds[8].beneficiary = payable(msg.sender);\r\n\r\n\t\tmailingFeeds[9].owner = msg.sender; // system messages\r\n\t\tmailingFeeds[9].beneficiary = payable(msg.sender);\r\n\r\n\t\tmailingFeeds[10].owner = msg.sender; // system messages\r\n\t\tmailingFeeds[10].beneficiary = payable(msg.sender);\r\n\r\n\t\tbroadcastFeeds[0].owner = msg.sender;\r\n\t\tbroadcastFeeds[0].beneficiary = payable(msg.sender);\r\n\t\tbroadcastFeeds[0].isPublic = false;\r\n\t\tbroadcastFeeds[0].writers[msg.sender] = true;\r\n\r\n\t\tbroadcastFeeds[1].owner = msg.sender;\r\n\t\tbroadcastFeeds[1].beneficiary = payable(msg.sender);\r\n\t\tbroadcastFeeds[1].isPublic = false;\r\n\t\tbroadcastFeeds[1].writers[msg.sender] = true;\r\n\r\n\t\tbroadcastFeeds[2].owner = msg.sender;\r\n\t\tbroadcastFeeds[2].beneficiary = payable(msg.sender);\r\n\t\tbroadcastFeeds[2].isPublic = true;\r\n\t}\r\n\r\n\tfunction validateBlockLock(uint256 firstBlockNumber, uint256 blockCountLock) internal view {\r\n\t\tif (block.number < firstBlockNumber) {\r\n\t\t\trevert NumberLessThanFirstBlockNumber();\r\n\t\t}\r\n\t\tif (block.number - firstBlockNumber >= blockCountLock) {\r\n\t\t\trevert NumberMoreThanFirstBlockNumberPlusBlockCountLock();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction validateFeedOwner(uint256 feedId) internal view {\r\n\t\tif (msg.sender != mailingFeeds[feedId].owner) {\r\n\t\t\trevert NotFeedOwner();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction validateBroadCastFeedOwner(uint256 feedId) internal view {\r\n\t\tif (msg.sender != broadcastFeeds[feedId].owner) {\r\n\t\t\trevert NotFeedOwner();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction validateAccessToBroadcastFeed(bool isPersonal, bool isGenericFeed, uint256 feedId) internal view {\r\n\t\tif (isPersonal && isGenericFeed) {\r\n\t\t\trevert FeedNotAllowed();\r\n\t\t}\r\n\t\tif (\r\n\t\t\t!isPersonal &&\r\n\t\t\t!isGenericFeed &&\r\n\t\t\t!broadcastFeeds[feedId].isPublic &&\r\n\t\t\tbroadcastFeeds[feedId].writers[msg.sender] != true\r\n\t\t) {\r\n\t\t\trevert FeedNotAllowed();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction validateIsYlide() internal view {\r\n\t\tif (!isYlide[msg.sender]) {\r\n\t\t\trevert IsNotYlide();\r\n\t\t}\r\n\t}\r\n\r\n\tfunction concatBytesList(bytes[] memory list) internal pure returns (bytes memory result) {\r\n\t\tfor (uint256 i; i < list.length; ) {\r\n\t\t\tresult = bytes.concat(result, list[i]);\r\n\t\t\tunchecked {\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setExtraTreasury(address payable newExtraTreasury) public onlyOwner {\r\n        if (newExtraTreasury != address(0)) {\r\n            extraTreasury = newExtraTreasury;\r\n        }\r\n    }\r\n\r\n\tfunction setIsYlide(\r\n\t\taddress[] calldata ylideContracts,\r\n\t\tbool[] calldata values\r\n\t) external onlyOwner {\r\n\t\tif (ylideContracts.length != values.length) {\r\n\t\t\trevert();\r\n\t\t}\r\n\t\tfor (uint256 i; i < ylideContracts.length; ) {\r\n\t\t\tisYlide[ylideContracts[i]] = values[i];\r\n\t\t\tunchecked {\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setMailingFeedFees(uint256 feedId, uint256 _recipientFee) public {\r\n\t\tvalidateFeedOwner(feedId);\r\n\t\tmailingFeeds[feedId].recipientFee = _recipientFee;\r\n\t}\r\n\r\n\tfunction setBroadcastFeedFees(uint256 feedId, uint256 _broadcastFee) public {\r\n\t\tvalidateBroadCastFeedOwner(feedId);\r\n\t\tbroadcastFeeds[feedId].broadcastFee = _broadcastFee;\r\n\t}\r\n\r\n\tfunction isBroadcastFeedWriter(uint256 feedId, address addr) public view returns (bool) {\r\n\t\treturn broadcastFeeds[feedId].writers[addr];\r\n\t}\r\n\r\n\tfunction getMailingFeedRecipientIndex(\r\n\t\tuint256 feedId,\r\n\t\tuint256 recipient\r\n\t) public view returns (uint256) {\r\n\t\treturn mailingFeeds[feedId].recipientToMailIndex[recipient];\r\n\t}\r\n\r\n\tfunction getMailingFeedRecipientMessagesCount(\r\n\t\tuint256 feedId,\r\n\t\tuint256 recipient\r\n\t) public view returns (uint256) {\r\n\t\treturn mailingFeeds[feedId].recipientMessagesCount[recipient];\r\n\t}\r\n\r\n\tfunction payOutMailingFeed(uint256 feedId, uint256 recipients) internal virtual {\r\n\t\tuint256 totalValue = mailingFeeds[feedId].recipientFee * recipients;\r\n\t\tif (totalValue > 0) {\r\n\t\t\tmailingFeeds[feedId].beneficiary.transfer(totalValue);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction payOutBroadcastFeed(uint256 feedId, uint256 broadcasts) internal virtual {\r\n\t\tuint256 totalValue = broadcastFeeds[feedId].broadcastFee * broadcasts;\r\n\t\tif (totalValue > 0) {\r\n\t\t\tbroadcastFeeds[feedId].beneficiary.transfer(totalValue);\r\n\t\t}\r\n\t}\r\n\r\n\treceive() external payable {\r\n\t\t// do nothing\r\n\t}\r\n\r\n\tfunction buildContentId(\r\n\t\taddress senderAddress,\r\n\t\tuint256 uniqueId,\r\n\t\tuint256 firstBlockNumber,\r\n\t\tuint256 partsCount,\r\n\t\tuint256 blockCountLock\r\n\t) public pure returns (uint256) {\r\n\t\tuint256 _hash = uint256(\r\n\t\t\tsha256(\r\n\t\t\t\tbytes.concat(\r\n\t\t\t\t\tbytes32(uint256(uint160(senderAddress))),\r\n\t\t\t\t\tbytes32(uniqueId),\r\n\t\t\t\t\tbytes32(firstBlockNumber)\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\tuint256 versionMask = (version & 0xFF) *\r\n\t\t\t0x100000000000000000000000000000000000000000000000000000000000000;\r\n\t\tuint256 blockNumberMask = (firstBlockNumber & 0xFFFFFFFF) *\r\n\t\t\t0x1000000000000000000000000000000000000000000000000000000;\r\n\t\tuint256 partsCountMask = (partsCount & 0xFFFF) *\r\n\t\t\t0x100000000000000000000000000000000000000000000000000;\r\n\t\tuint256 blockCountLockMask = (blockCountLock & 0xFFFF) *\r\n\t\t\t0x10000000000000000000000000000000000000000000000;\r\n\r\n\t\tuint256 hashMask = _hash & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n\t\treturn versionMask | blockNumberMask | partsCountMask | blockCountLockMask | hashMask;\r\n\t}\r\n\r\n\t/* ----------- MAIL PUSHES ----------- */\r\n\t/**\r\n\t * sendSmallMail - for sending tiny content to 1 recipient\r\n\t * sendBulkMail - for sending tiny content to multiple recipients\r\n\t * addMailRecipients - for adding recipients to any message (multipart or not)\r\n\t */\r\n\r\n\tfunction emitMailPush(\r\n\t\tuint256 feedId,\r\n\t\tuint256 rec,\r\n\t\taddress sender,\r\n\t\tuint256 contentId,\r\n\t\tbytes memory key,\r\n\t\tSupplement memory supplement\r\n\t) internal {\r\n\t\tif (mailingFeeds[feedId].owner == address(0)) {\r\n\t\t\trevert FeedDoesNotExist();\r\n\t\t}\r\n\t\tuint256 shrinkedBlock = block.number / 128;\r\n\t\tif (mailingFeeds[feedId].recipientMessagesCount[rec] == 0) {\r\n\t\t\tuint256 currentMailingFeedJoinEventsIndex = recipientToMailingFeedJoinEventsIndex[rec];\r\n\t\t\trecipientToMailingFeedJoinEventsIndex[rec] = storeBlockNumber(\r\n\t\t\t\tcurrentMailingFeedJoinEventsIndex,\r\n\t\t\t\tshrinkedBlock\r\n\t\t\t);\r\n\t\t\temit MailingFeedJoined(feedId, rec, currentMailingFeedJoinEventsIndex);\r\n\t\t}\r\n\t\tuint256 currentFeed = mailingFeeds[feedId].recipientToMailIndex[rec];\r\n\t\tmailingFeeds[feedId].recipientToMailIndex[rec] = storeBlockNumber(\r\n\t\t\tcurrentFeed,\r\n\t\t\tshrinkedBlock\r\n\t\t);\r\n\t\t// write anything to map - 20k gas. think about it\r\n\t\tmailingFeeds[feedId].recipientMessagesCount[rec] += 1;\r\n\t\temit MailPush(rec, feedId, sender, contentId, currentFeed, key, supplement);\r\n\t}\r\n\r\n\tfunction sendBulkMail(\r\n\t\tSendBulkArgs calldata args\r\n\t) external payable notTerminated returns (uint256) {\r\n\t\treturn _sendBulkMail(msg.sender, args, Supplement(address(0), CONTRACT_TYPE_NONE));\r\n\t}\r\n\r\n\tfunction sendBulkMail(\r\n\t\tSendBulkArgs calldata args,\r\n\t\tSignatureArgs calldata signatureArgs,\r\n\t\tSupplement calldata supplement\r\n\t) external payable notTerminated returns (uint256) {\r\n\t\tvalidateIsYlide();\r\n\t\tbytes32 digest = _hashTypedDataV4(\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encode(\r\n\t\t\t\t\tkeccak256(\r\n\t\t\t\t\t\t\"SendBulkMail(uint256 feedId,uint256 uniqueId,uint256 nonce,uint256 deadline,uint256[] recipients,bytes keys,bytes content,address contractAddress,uint8 contractType)\"\r\n\t\t\t\t\t),\r\n\t\t\t\t\targs.feedId,\r\n\t\t\t\t\targs.uniqueId,\r\n\t\t\t\t\tsignatureArgs.nonce,\r\n\t\t\t\t\tsignatureArgs.deadline,\r\n\t\t\t\t\tkeccak256(abi.encodePacked(args.recipients)),\r\n\t\t\t\t\tkeccak256(abi.encodePacked(concatBytesList(args.keys))),\r\n\t\t\t\t\tkeccak256(abi.encodePacked(args.content)),\r\n\t\t\t\t\tsupplement.contractAddress,\r\n\t\t\t\t\tsupplement.contractType\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n\t\taddress signer = verifySignature(digest, signatureArgs);\r\n\t\treturn _sendBulkMail(signer, args, supplement);\r\n\t}\r\n\r\n\tfunction _sendBulkMail(\r\n\t\taddress sender,\r\n\t\tSendBulkArgs calldata args,\r\n\t\tSupplement memory supplement\r\n\t) internal returns (uint256) {\r\n\t\tuint256 contentId = buildContentId(sender, args.uniqueId, block.number, 1, 0);\r\n\r\n\t\temit MessageContent(contentId, sender, 1, 0, args.content);\r\n\r\n\t\tfor (uint i = 0; i < args.recipients.length; i++) {\r\n\t\t\temitMailPush(\r\n\t\t\t\targs.feedId,\r\n\t\t\t\targs.recipients[i],\r\n\t\t\t\tsender,\r\n\t\t\t\tcontentId,\r\n\t\t\t\targs.keys[i],\r\n\t\t\t\tsupplement\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tpayOut(1, args.recipients.length, 0);\r\n\t\tpayOutMailingFeed(args.feedId, args.recipients.length);\r\n\r\n\t\treturn contentId;\r\n\t}\r\n\r\n\tfunction addMailRecipients(\r\n\t\tAddMailRecipientsArgs calldata args\r\n\t) external payable notTerminated returns (uint256) {\r\n\t\tvalidateBlockLock(args.firstBlockNumber, args.blockCountLock);\r\n\t\treturn _addMailRecipients(msg.sender, args, Supplement(address(0), CONTRACT_TYPE_NONE));\r\n\t}\r\n\r\n\tfunction addMailRecipients(\r\n\t\tAddMailRecipientsArgs calldata args,\r\n\t\tSignatureArgs calldata signatureArgs,\r\n\t\tSupplement calldata supplement\r\n\t) external payable notTerminated returns (uint256) {\r\n\t\tvalidateIsYlide();\r\n\t\tvalidateBlockLock(args.firstBlockNumber, args.blockCountLock);\r\n\t\tbytes32 digest = _hashTypedDataV4(\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encode(\r\n\t\t\t\t\tkeccak256(\r\n\t\t\t\t\t\t\"AddMailRecipients(uint256 feedId,uint256 uniqueId,uint256 firstBlockNumber,uint256 nonce,uint256 deadline,uint16 partsCount,uint16 blockCountLock,uint256[] recipients,bytes keys,address contractAddress,uint8 contractType)\"\r\n\t\t\t\t\t),\r\n\t\t\t\t\targs.feedId,\r\n\t\t\t\t\targs.uniqueId,\r\n\t\t\t\t\targs.firstBlockNumber,\r\n\t\t\t\t\tsignatureArgs.nonce,\r\n\t\t\t\t\tsignatureArgs.deadline,\r\n\t\t\t\t\targs.partsCount,\r\n\t\t\t\t\targs.blockCountLock,\r\n\t\t\t\t\tkeccak256(abi.encodePacked(args.recipients)),\r\n\t\t\t\t\tkeccak256(abi.encodePacked(concatBytesList(args.keys))),\r\n\t\t\t\t\tsupplement.contractAddress,\r\n\t\t\t\t\tsupplement.contractType\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t\t);\r\n\t\taddress signer = verifySignature(digest, signatureArgs);\r\n\t\treturn _addMailRecipients(signer, args, supplement);\r\n\t}\r\n\r\n\tfunction _addMailRecipients(\r\n\t\taddress sender,\r\n\t\tAddMailRecipientsArgs memory args,\r\n\t\tSupplement memory supplement\r\n\t) internal returns (uint256) {\r\n\t\tuint256 contentId = buildContentId(\r\n\t\t\tsender,\r\n\t\t\targs.uniqueId,\r\n\t\t\targs.firstBlockNumber,\r\n\t\t\targs.partsCount,\r\n\t\t\targs.blockCountLock\r\n\t\t);\r\n\t\tfor (uint i = 0; i < args.recipients.length; i++) {\r\n\t\t\temitMailPush(\r\n\t\t\t\targs.feedId,\r\n\t\t\t\targs.recipients[i],\r\n\t\t\t\tsender,\r\n\t\t\t\tcontentId,\r\n\t\t\t\targs.keys[i],\r\n\t\t\t\tsupplement\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tpayOut(0, args.recipients.length, 0);\r\n\t\tpayOutMailingFeed(args.feedId, args.recipients.length);\r\n\r\n\t\treturn contentId;\r\n\t}\r\n\r\n\tfunction verifySignature(\r\n\t\tbytes32 digest,\r\n\t\tSignatureArgs calldata signatureArgs\r\n\t) internal returns (address) {\r\n\t\taddress signer = ECDSA.recover(digest, signatureArgs.signature);\r\n\r\n\t\tif (signer != signatureArgs.sender) revert InvalidSignature();\r\n\t\tif (signatureArgs.nonce != nonces[signer]++) revert InvalidNonce();\r\n\t\tif (block.timestamp >= signatureArgs.deadline) revert SignatureExpired();\r\n\r\n\t\treturn signer;\r\n\t}\r\n\r\n\t/* ---------------------------------------------- */\r\n\t/* ------------- MAIL BROADCASTS ---------------- */\r\n\t/**\r\n\t * sendBroadcast - for sending broadcast content in one transaction\r\n\t * sendBroadcastHeader - for emitting broadcast header after uploading all parts of the content\r\n\t */\r\n\r\n\tfunction emitBroadcastPush(address sender, uint256 feedId, uint256 contentId, uint256 extraPayment) internal {\r\n\t\tuint256 current = broadcastFeeds[feedId].messagesIndex;\r\n\t\tbroadcastFeeds[feedId].messagesIndex = storeBlockNumber(current, block.number / 128);\r\n\t\tbroadcastFeeds[feedId].messagesCount += 1;\r\n\t\textraTreasury.transfer(extraPayment);\r\n\t\temit BroadcastPush(sender, feedId, contentId, extraPayment, current);\r\n\t}\r\n\r\n\tfunction sendBroadcast(\r\n\t\tbool isPersonal,\r\n\t\tbool isGenericFeed,\r\n\t\tuint256 extraPayment,\r\n\t\tuint256 feedId,\r\n\t\tuint256 uniqueId,\r\n\t\tbytes calldata content\r\n\t) public payable notTerminated returns (uint256) {\r\n\t\tvalidateAccessToBroadcastFeed(isPersonal, isGenericFeed, feedId);\r\n\r\n\t\tuint256 composedFeedId = isPersonal\r\n\t\t\t? uint256(sha256(abi.encodePacked(msg.sender, uint256(1), feedId)))\r\n\t\t\t: isGenericFeed\r\n\t\t\t\t? uint256(sha256(abi.encodePacked(address(0x0000000000000000000000000000000000000000), uint256(2), feedId)))\r\n\t\t\t\t: feedId;\r\n\r\n\t\tuint256 contentId = buildContentId(msg.sender, uniqueId, block.number, 1, 0);\r\n\r\n\t\temit MessageContent(contentId, msg.sender, 1, 0, content);\r\n\t\temitBroadcastPush(msg.sender, composedFeedId, contentId, extraPayment);\r\n\r\n\t\tpayOut(1, 0, 1);\r\n\t\tif (!isPersonal) {\r\n\t\t\tpayOutBroadcastFeed(feedId, 1);\r\n\t\t}\r\n\r\n\t\treturn contentId;\r\n\t}\r\n\r\n\tfunction sendBroadcastHeader(\r\n\t\tbool isPersonal,\r\n\t\tbool isGenericFeed,\r\n\t\tuint256 extraPayment,\r\n\t\tuint256 feedId,\r\n\t\tuint256 uniqueId,\r\n\t\tuint256 firstBlockNumber,\r\n\t\tuint16 partsCount,\r\n\t\tuint16 blockCountLock\r\n\t) public payable notTerminated returns (uint256) {\r\n\t\tvalidateAccessToBroadcastFeed(isPersonal, isGenericFeed, feedId);\r\n\r\n\t\tuint256 composedFeedId = isPersonal\r\n\t\t\t? uint256(sha256(abi.encodePacked(msg.sender, uint256(1), feedId)))\r\n\t\t\t: isGenericFeed\r\n\t\t\t\t? uint256(sha256(abi.encodePacked(address(0x0000000000000000000000000000000000000000), uint256(2), feedId)))\r\n\t\t\t\t: feedId;\r\n\r\n\t\tuint256 contentId = buildContentId(\r\n\t\t\tmsg.sender,\r\n\t\t\tuniqueId,\r\n\t\t\tfirstBlockNumber,\r\n\t\t\tpartsCount,\r\n\t\t\tblockCountLock\r\n\t\t);\r\n\r\n\t\temitBroadcastPush(msg.sender, composedFeedId, contentId, extraPayment);\r\n\r\n\t\tpayOut(0, 0, 1);\r\n\t\tif (!isPersonal) {\r\n\t\t\tpayOutBroadcastFeed(feedId, 1);\r\n\t\t}\r\n\r\n\t\treturn contentId;\r\n\t}\r\n\r\n\t/* ---------------------------------------------- */\r\n\r\n\t// For sending content part - for broadcast or not\r\n\tfunction sendMessageContentPart(\r\n\t\tuint256 uniqueId,\r\n\t\tuint256 firstBlockNumber,\r\n\t\tuint256 blockCountLock,\r\n\t\tuint16 parts,\r\n\t\tuint16 partIdx,\r\n\t\tbytes calldata content\r\n\t) public payable notTerminated returns (uint256) {\r\n\t\tvalidateBlockLock(firstBlockNumber, blockCountLock);\r\n\r\n\t\tuint256 contentId = buildContentId(\r\n\t\t\tmsg.sender,\r\n\t\t\tuniqueId,\r\n\t\t\tfirstBlockNumber,\r\n\t\t\tparts,\r\n\t\t\tblockCountLock\r\n\t\t);\r\n\t\temit MessageContent(contentId, msg.sender, parts, partIdx, content);\r\n\r\n\t\tpayOut(1, 0, 0);\r\n\r\n\t\treturn contentId;\r\n\t}\r\n\r\n\t/* ---------------------------------------------- */\r\n\r\n\t// Feed management:\r\n\tfunction createMailingFeed(uint256 uniqueId) public payable returns (uint256) {\r\n\t\tuint256 feedId = uint256(sha256(abi.encodePacked(msg.sender, uint256(0), uniqueId)));\r\n\r\n\t\tif (mailingFeeds[feedId].owner != address(0)) {\r\n\t\t\trevert FeedAlreadyExists();\r\n\t\t}\r\n\r\n\t\tmailingFeeds[feedId].owner = msg.sender;\r\n\t\tmailingFeeds[feedId].beneficiary = payable(msg.sender);\r\n\r\n\t\tpayForMailingFeedCreation();\r\n\r\n\t\temit MailingFeedCreated(feedId, msg.sender);\r\n\r\n\t\treturn feedId;\r\n\t}\r\n\r\n\tfunction transferMailingFeedOwnership(uint256 feedId, address newOwner) public {\r\n\t\tvalidateFeedOwner(feedId);\r\n\r\n\t\tmailingFeeds[feedId].owner = newOwner;\r\n\t\temit MailingFeedOwnershipTransferred(feedId, newOwner);\r\n\t}\r\n\r\n\tfunction setMailingFeedBeneficiary(uint256 feedId, address payable newBeneficiary) public {\r\n\t\tvalidateFeedOwner(feedId);\r\n\r\n\t\tmailingFeeds[feedId].beneficiary = newBeneficiary;\r\n\t\temit MailingFeedBeneficiaryChanged(feedId, newBeneficiary);\r\n\t}\r\n\r\n\tfunction createBroadcastFeed(uint256 uniqueId, bool isPublic) public payable returns (uint256) {\r\n\t\tuint256 feedId = uint256(keccak256(abi.encodePacked(msg.sender, uint256(0), uniqueId)));\r\n\r\n\t\tif (broadcastFeeds[feedId].owner != address(0)) {\r\n\t\t\trevert FeedExists();\r\n\t\t}\r\n\r\n\t\tbroadcastFeeds[feedId].owner = msg.sender;\r\n\t\tbroadcastFeeds[feedId].beneficiary = payable(msg.sender);\r\n\t\tbroadcastFeeds[feedId].isPublic = isPublic;\r\n\t\tbroadcastFeeds[feedId].writers[msg.sender] = true;\r\n\t\tbroadcastFeeds[feedId].messagesIndex = 0;\r\n\t\tbroadcastFeeds[feedId].messagesCount = 0;\r\n\r\n\t\tpayForBroadcastFeedCreation();\r\n\r\n\t\temit BroadcastFeedCreated(feedId, msg.sender);\r\n\r\n\t\treturn feedId;\r\n\t}\r\n\r\n\tfunction transferBroadcastFeedOwnership(uint256 feedId, address newOwner) public {\r\n\t\tvalidateBroadCastFeedOwner(feedId);\r\n\r\n\t\tbroadcastFeeds[feedId].owner = newOwner;\r\n\t\temit BroadcastFeedOwnershipTransferred(feedId, newOwner);\r\n\t}\r\n\r\n\tfunction setBroadcastFeedBeneficiary(uint256 feedId, address payable newBeneficiary) public {\r\n\t\tvalidateBroadCastFeedOwner(feedId);\r\n\r\n\t\tbroadcastFeeds[feedId].beneficiary = newBeneficiary;\r\n\t\temit BroadcastFeedBeneficiaryChanged(feedId, newBeneficiary);\r\n\t}\r\n\r\n\tfunction changeBroadcastFeedPublicity(uint256 feedId, bool isPublic) public {\r\n\t\tvalidateBroadCastFeedOwner(feedId);\r\n\r\n\t\tbroadcastFeeds[feedId].isPublic = isPublic;\r\n\t\temit BroadcastFeedPublicityChanged(feedId, isPublic);\r\n\t}\r\n\r\n\tfunction addBroadcastFeedWriter(uint256 feedId, address writer) public {\r\n\t\tvalidateBroadCastFeedOwner(feedId);\r\n\r\n\t\tbroadcastFeeds[feedId].writers[writer] = true;\r\n\t\temit BroadcastFeedWriterChange(feedId, writer, true);\r\n\t}\r\n\r\n\tfunction removeBroadcastFeedWriter(uint256 feedId, address writer) public {\r\n\t\tvalidateBroadCastFeedOwner(feedId);\r\n\r\n\t\tdelete broadcastFeeds[feedId].writers[writer];\r\n\t\temit BroadcastFeedWriterChange(feedId, writer, false);\r\n\t}\r\n}\r\n\r\n\r\n// File contracts/YlidePayV1.sol\r\n\r\npragma solidity ^0.8.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract YlidePayV1 is IYlideTokenAttachment, Owned, Pausable {\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\tstruct TransferInfo {\r\n\t\tuint256 amountOrTokenId;\r\n\t\taddress recipient;\r\n\t\taddress token;\r\n\t\tTokenType tokenType;\r\n\t}\r\n\r\n\tenum TokenType {\r\n\t\tERC20,\r\n\t\tERC721\r\n\t}\r\n\r\n\tevent TokenAttachment(\r\n\t\tuint256 indexed contentId,\r\n\t\tuint256 amountOrTokenId,\r\n\t\taddress indexed recipient,\r\n\t\taddress indexed sender,\r\n\t\taddress token,\r\n\t\tTokenType tokenType\r\n\t);\r\n\r\n\terror InvalidSender();\r\n\r\n\tuint256 public constant version = 1;\r\n\r\n\tIYlideMailer public ylideMailer;\r\n\r\n\tconstructor(IYlideMailer _ylideMailer) Owned() Pausable() {\r\n\t\tylideMailer = _ylideMailer;\r\n\t}\r\n\r\n\tfunction setYlideMailer(IYlideMailer _ylideMailer) external onlyOwner {\r\n\t\tylideMailer = _ylideMailer;\r\n\t}\r\n\r\n\tfunction _safeTransferFrom(TransferInfo calldata transferInfo, uint256 contentId) internal {\r\n\t\tif (transferInfo.tokenType == TokenType.ERC20) {\r\n\t\t\tIERC20(transferInfo.token).safeTransferFrom(\r\n\t\t\t\tmsg.sender,\r\n\t\t\t\ttransferInfo.recipient,\r\n\t\t\t\ttransferInfo.amountOrTokenId\r\n\t\t\t);\r\n\t\t} else if (transferInfo.tokenType == TokenType.ERC721) {\r\n\t\t\tIERC721(transferInfo.token).safeTransferFrom(\r\n\t\t\t\tmsg.sender,\r\n\t\t\t\ttransferInfo.recipient,\r\n\t\t\t\ttransferInfo.amountOrTokenId\r\n\t\t\t);\r\n\t\t}\r\n\t\temit TokenAttachment(\r\n\t\t\tcontentId,\r\n\t\t\ttransferInfo.amountOrTokenId,\r\n\t\t\ttransferInfo.recipient,\r\n\t\t\tmsg.sender,\r\n\t\t\ttransferInfo.token,\r\n\t\t\ttransferInfo.tokenType\r\n\t\t);\r\n\t}\r\n\r\n\tfunction _handleTokenAttachment(\r\n\t\tTransferInfo[] calldata transferInfos,\r\n\t\tuint256 contentId\r\n\t) internal {\r\n\t\tfor (uint256 i; i < transferInfos.length; ) {\r\n\t\t\tif (transferInfos[i].recipient != address(0)) {\r\n\t\t\t\t_safeTransferFrom(transferInfos[i], contentId);\r\n\t\t\t}\r\n\t\t\tunchecked {\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction sendBulkMailWithToken(\r\n\t\tIYlideMailer.SendBulkArgs calldata args,\r\n\t\tIYlideMailer.SignatureArgs memory signatureArgs,\r\n\t\tTransferInfo[] calldata transferInfos\r\n\t) external payable whenNotPaused returns (uint256) {\r\n\t\tif (signatureArgs.sender != msg.sender) revert InvalidSender();\r\n\t\tuint256 contentId = ylideMailer.sendBulkMail{value: msg.value}(\r\n\t\t\targs,\r\n\t\t\tsignatureArgs,\r\n\t\t\tIYlideMailer.Supplement(address(this), CONTRACT_TYPE_PAY)\r\n\t\t);\r\n\t\t_handleTokenAttachment(transferInfos, contentId);\r\n\t\treturn contentId;\r\n\t}\r\n\r\n\tfunction addMailRecipientsWithToken(\r\n\t\tIYlideMailer.AddMailRecipientsArgs calldata args,\r\n\t\tIYlideMailer.SignatureArgs memory signatureArgs,\r\n\t\tTransferInfo[] calldata transferInfos\r\n\t) external payable whenNotPaused returns (uint256) {\r\n\t\tif (signatureArgs.sender != msg.sender) revert InvalidSender();\r\n\t\tuint256 contentId = ylideMailer.addMailRecipients{value: msg.value}(\r\n\t\t\targs,\r\n\t\t\tsignatureArgs,\r\n\t\t\tIYlideMailer.Supplement(address(this), CONTRACT_TYPE_PAY)\r\n\t\t);\r\n\t\t_handleTokenAttachment(transferInfos, contentId);\r\n\t\treturn contentId;\r\n\t}\r\n\r\n\tfunction pause() external onlyOwner {\r\n\t\t_pause();\r\n\t}\r\n\r\n\tfunction unpause() external onlyOwner {\r\n\t\t_unpause();\r\n\t}\r\n}\r\n\r\n\r\n// File contracts/YlideRegistryV4.sol\r\n\r\npragma solidity ^0.8.9;\r\n\r\nstruct RegistryEntryV4 {\r\n   uint256 publicKey;\r\n   uint128 block;\r\n   uint64 timestamp;\r\n   uint64 keyVersion;\r\n}\r\n\r\ncontract YlideRegistryV4 is Owned {\r\n    address public bonucer;\r\n\r\n    uint256 public version = 4;\r\n\r\n    event KeyAttached(address indexed addr, uint256 publicKey, uint64 keyVersion);\r\n    \r\n    mapping(address => RegistryEntryV4) public addressToPublicKey;\r\n\r\n    YlideRegistryV4 previousContract;\r\n\r\n    uint256 public newcomerBonus = 0;\r\n    uint256 public referrerBonus = 0;\r\n\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n\r\n    constructor(address payable previousContractAddress) {\r\n        previousContract = YlideRegistryV4(previousContractAddress);\r\n        bonucer = msg.sender;\r\n    }\r\n\r\n    function getPublicKey(address addr) view public returns (RegistryEntryV4 memory entry, uint contractVersion, address contractAddress) {\r\n        contractVersion = version;\r\n        contractAddress = address(this);\r\n        entry = addressToPublicKey[addr];\r\n        if (entry.keyVersion == 0 && address(previousContract) != address(0x0)) {\r\n            return previousContract.getPublicKey(addr);\r\n        }\r\n    }\r\n\r\n    function attachPublicKey(uint256 publicKey, uint64 keyVersion) public {\r\n        require(keyVersion != 0, 'Key version must be above zero');\r\n        addressToPublicKey[msg.sender] = RegistryEntryV4(publicKey, uint128(block.number), uint64(block.timestamp), keyVersion);\r\n\r\n        emit KeyAttached(msg.sender, publicKey, keyVersion);\r\n    }\r\n\r\n    modifier onlyBonucer() {\r\n        if (msg.sender != bonucer) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function changeBonucer(address newBonucer) public onlyOwner {\r\n        if (newBonucer != address(0)) {\r\n            bonucer = newBonucer;\r\n        }\r\n    }\r\n\r\n    function setBonuses(uint256 _newcomerBonus, uint256 _referrerBonus) public onlyOwner {\r\n        newcomerBonus = _newcomerBonus;\r\n        referrerBonus = _referrerBonus;\r\n    }\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            string memory buffer = new string(10);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, 10))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    function iToHex(bytes32 buffer) public pure returns (bytes memory) {\r\n        bytes memory converted = new bytes(64);\r\n        bytes memory _base = \"0123456789abcdef\";\r\n\r\n        for (uint8 i = 0; i < 32; i++) {\r\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\r\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\r\n        }\r\n\r\n        return converted;\r\n    }\r\n\r\n    function verifyMessage(bytes32 publicKey, uint8 _v, bytes32 _r, bytes32 _s) public pure returns (address) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n64\";\r\n        bytes memory _msg = iToHex(publicKey);\r\n        bytes32 prefixedHashMessage = keccak256(abi.encodePacked(prefix, _msg));\r\n        address signer = ecrecover(prefixedHashMessage, _v, _r, _s);\r\n        return signer;\r\n    }\r\n\r\n    receive() external payable {\r\n        // do nothing\r\n    }\r\n\r\n    function attachPublicKeyByAdmin(uint8 _v, bytes32 _r, bytes32 _s, address payable addr, uint256 publicKey, uint64 keyVersion, address payable referrer, bool payBonus) external payable onlyBonucer {\r\n        require(keyVersion != 0, 'Key version must be above zero');\r\n        require(verifyMessage(bytes32(publicKey), _v, _r, _s) == addr, 'Signature does not match the user''s address');\r\n        require(referrer == address(0x0) || addressToPublicKey[referrer].keyVersion != 0, 'Referrer must be registered');\r\n        require(addr != address(0x0) && addressToPublicKey[addr].keyVersion == 0, 'Only new user key can be assigned by admin');\r\n\r\n        addressToPublicKey[addr] = RegistryEntryV4(publicKey, uint128(block.number), uint64(block.timestamp), keyVersion);\r\n\r\n        emit KeyAttached(addr, publicKey, keyVersion);\r\n\r\n        if (payBonus && newcomerBonus != 0) {\r\n            addr.transfer(newcomerBonus);\r\n        }\r\n        if (referrer != address(0x0) && referrerBonus != 0) {\r\n            referrer.transfer(referrerBonus);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/YlideRegistryV5.sol\r\n\r\npragma solidity ^0.8.9;\r\n\r\nstruct RegistryEntryV5 {\r\n   uint256 publicKey;\r\n   uint128 block;\r\n   uint64 timestamp;\r\n   uint64 keyVersion;\r\n}\r\n\r\ncontract YlideRegistryV5 is Owned {\r\n    uint256 public version = 5;\r\n\r\n    event KeyAttached(address indexed addr, uint256 publicKey, uint64 keyVersion);\r\n    \r\n    mapping(address => RegistryEntryV5) public addressToPublicKey;\r\n    mapping(address => bool) public bonucers;\r\n\r\n    YlideRegistryV5 previousContract;\r\n\r\n    uint256 public newcomerBonus = 0;\r\n    uint256 public referrerBonus = 0;\r\n\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n\r\n    constructor(address payable previousContractAddress) {\r\n        previousContract = YlideRegistryV5(previousContractAddress);\r\n        bonucers[msg.sender] = true;\r\n    }\r\n\r\n    function getPublicKey(address addr) view public returns (RegistryEntryV5 memory entry, uint contractVersion, address contractAddress) {\r\n        contractVersion = version;\r\n        contractAddress = address(this);\r\n        entry = addressToPublicKey[addr];\r\n        if (entry.keyVersion == 0 && address(previousContract) != address(0x0)) {\r\n            return previousContract.getPublicKey(addr);\r\n        }\r\n    }\r\n\r\n    function attachPublicKey(uint256 publicKey, uint64 keyVersion) public {\r\n        require(keyVersion != 0, 'Key version must be above zero');\r\n        addressToPublicKey[msg.sender] = RegistryEntryV5(publicKey, uint128(block.number), uint64(block.timestamp), keyVersion);\r\n\r\n        emit KeyAttached(msg.sender, publicKey, keyVersion);\r\n    }\r\n\r\n    modifier onlyBonucer() {\r\n        if (bonucers[msg.sender] != true) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function setBonucer(address newBonucer, bool val) public onlyOwner {\r\n        if (newBonucer != address(0)) {\r\n            bonucers[newBonucer] = val;\r\n        }\r\n    }\r\n\r\n    function setBonuses(uint256 _newcomerBonus, uint256 _referrerBonus) public onlyOwner {\r\n        newcomerBonus = _newcomerBonus;\r\n        referrerBonus = _referrerBonus;\r\n    }\r\n\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            string memory buffer = new string(10);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, 10))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    function iToHex(bytes32 buffer) public pure returns (bytes memory) {\r\n        bytes memory converted = new bytes(64);\r\n        bytes memory _base = \"0123456789abcdef\";\r\n\r\n        for (uint8 i = 0; i < 32; i++) {\r\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\r\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\r\n        }\r\n\r\n        return converted;\r\n    }\r\n\r\n    function verifyMessage(bytes32 publicKey, uint8 _v, bytes32 _r, bytes32 _s) public pure returns (address) {\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n64\";\r\n        bytes memory _msg = iToHex(publicKey);\r\n        bytes32 prefixedHashMessage = keccak256(abi.encodePacked(prefix, _msg));\r\n        address signer = ecrecover(prefixedHashMessage, _v, _r, _s);\r\n        return signer;\r\n    }\r\n\r\n    receive() external payable {\r\n        // do nothing\r\n    }\r\n\r\n    function attachPublicKeyByAdmin(uint8 _v, bytes32 _r, bytes32 _s, address payable addr, uint256 publicKey, uint64 keyVersion, address payable referrer, bool payBonus) external payable onlyBonucer {\r\n        require(keyVersion != 0, 'Key version must be above zero');\r\n        require(verifyMessage(bytes32(publicKey), _v, _r, _s) == addr, 'Signature does not match the user''s address');\r\n        require(referrer == address(0x0) || addressToPublicKey[referrer].keyVersion != 0, 'Referrer must be registered');\r\n        require(addr != address(0x0) && addressToPublicKey[addr].keyVersion == 0, 'Only new user key can be assigned by admin');\r\n\r\n        addressToPublicKey[addr] = RegistryEntryV5(publicKey, uint128(block.number), uint64(block.timestamp), keyVersion);\r\n\r\n        emit KeyAttached(addr, publicKey, keyVersion);\r\n\r\n        if (payBonus && newcomerBonus != 0) {\r\n            addr.transfer(newcomerBonus);\r\n        }\r\n        if (referrer != address(0x0) && referrerBonus != 0) {\r\n            referrer.transfer(referrerBonus);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/YlideRegistryV6.sol\r\n\r\npragma solidity ^0.8.9;\r\n\r\n\r\n\r\nstruct RegistryEntryV6 {\r\n    uint256 previousEventsIndex;\r\n    uint256 publicKey;\r\n    uint64 block;\r\n    uint64 timestamp;\r\n    uint32 keyVersion;\r\n    uint32 registrar;\r\n}\r\n\r\ncontract YlideRegistryV6 is Owned, Terminatable, BlockNumberRingBufferIndex {\r\n    uint256 public version = 6;\r\n\r\n    event KeyAttached(address indexed addr, uint256 publicKey, uint32 keyVersion, uint32 registrar, uint256 previousEventsIndex);\r\n    \r\n    mapping(address => RegistryEntryV6) public addressToPublicKey;\r\n    mapping(address => bool) public bonucers;\r\n\r\n    uint256 public newcomerBonus = 0;\r\n    uint256 public referrerBonus = 0;\r\n\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n\r\n    constructor() {\r\n        bonucers[msg.sender] = true;\r\n    }\r\n\r\n    function getPublicKey(address addr) view public returns (RegistryEntryV6 memory entry) {\r\n        entry = addressToPublicKey[addr];\r\n    }\r\n\r\n    modifier onlyBonucer() {\r\n        if (bonucers[msg.sender] != true) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function setBonucer(address newBonucer, bool val) public onlyOwner notTerminated {\r\n        if (newBonucer != address(0)) {\r\n            bonucers[newBonucer] = val;\r\n        }\r\n    }\r\n\r\n    function setBonuses(uint256 _newcomerBonus, uint256 _referrerBonus) public onlyOwner notTerminated {\r\n        newcomerBonus = _newcomerBonus;\r\n        referrerBonus = _referrerBonus;\r\n    }\r\n\r\n    function uint256ToHex(bytes32 buffer) public pure returns (bytes memory) {\r\n        bytes memory converted = new bytes(64);\r\n        bytes memory _base = \"0123456789abcdef\";\r\n\r\n        for (uint8 i = 0; i < 32; i++) {\r\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\r\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\r\n        }\r\n\r\n        return converted;\r\n    }\r\n\r\n    function uint32ToHex(bytes4 buffer) public pure returns (bytes memory) {\r\n        bytes memory converted = new bytes(8);\r\n        bytes memory _base = \"0123456789abcdef\";\r\n\r\n        for (uint8 i = 0; i < 4; i++) {\r\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\r\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\r\n        }\r\n\r\n        return converted;\r\n    }\r\n\r\n    function uint64ToHex(bytes8 buffer) public pure returns (bytes memory) {\r\n        bytes memory converted = new bytes(16);\r\n        bytes memory _base = \"0123456789abcdef\";\r\n\r\n        for (uint8 i = 0; i < 8; i++) {\r\n            converted[i * 2] = _base[uint8(buffer[i]) / _base.length];\r\n            converted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\r\n        }\r\n\r\n        return converted;\r\n    }\r\n\r\n    function verifyMessage(bytes32 publicKey, uint8 _v, bytes32 _r, bytes32 _s, uint32 registrar, uint64 timestampLock) public view returns (address) {\r\n        if (timestampLock > block.timestamp) {\r\n            revert('Timestamp lock is in future');\r\n        }\r\n        if (block.timestamp - timestampLock > 5 * 60) {\r\n            revert('Timestamp lock is too old');\r\n        }\r\n        bytes memory prefix = \"\\x19Ethereum Signed Message:\\n330\";\r\n        // (121 + 2) + (14 + 64 + 1) + (13 + 8 + 1) + (12 + 64 + 1) + (13 + 16 + 0)\r\n        bytes memory _msg = abi.encodePacked(\r\n            \"I authorize Ylide Faucet to publish my public key on my behalf to eliminate gas costs on my transaction for five minutes.\\n\\n\", \r\n            \"Public key: 0x\", uint256ToHex(publicKey), \"\\n\",\r\n            \"Registrar: 0x\", uint32ToHex(bytes4(registrar)), \"\\n\",\r\n            \"Chain ID: 0x\", uint256ToHex(bytes32(block.chainid)), \"\\n\",\r\n            \"Timestamp: 0x\", uint64ToHex(bytes8(timestampLock))\r\n        );\r\n        bytes32 prefixedHashMessage = keccak256(abi.encodePacked(prefix, _msg));\r\n        address signer = ecrecover(prefixedHashMessage, _v, _r, _s);\r\n        return signer;\r\n    }\r\n\r\n    receive() external payable {\r\n        // do nothing\r\n    }\r\n\r\n    function internalKeyAttach(address addr, uint256 publicKey, uint32 keyVersion, uint32 registrar) internal {\r\n        uint256 index = 0;\r\n        if (addressToPublicKey[addr].keyVersion != 0) {\r\n            index = storeBlockNumber(addressToPublicKey[addr].previousEventsIndex, addressToPublicKey[addr].block / 128);\r\n        }\r\n\r\n        addressToPublicKey[addr] = RegistryEntryV6(index, publicKey, uint64(block.number), uint64(block.timestamp), keyVersion, registrar);\r\n        emit KeyAttached(addr, publicKey, keyVersion, registrar, index);\r\n    }\r\n\r\n    function attachPublicKey(uint256 publicKey, uint32 keyVersion, uint32 registrar) public notTerminated {\r\n        require(keyVersion != 0, 'Key version must be above zero');\r\n\r\n        internalKeyAttach(msg.sender, publicKey, keyVersion, registrar);\r\n    }\r\n\r\n    function attachPublicKeyByAdmin(uint8 _v, bytes32 _r, bytes32 _s, address payable addr, uint256 publicKey, uint32 keyVersion, uint32 registrar, uint64 timestampLock, address payable referrer, bool payBonus) external payable onlyBonucer notTerminated {\r\n        require(keyVersion != 0, 'Key version must be above zero');\r\n        require(verifyMessage(bytes32(publicKey), _v, _r, _s, registrar, timestampLock) == addr, 'Signature does not match the user''s address');\r\n        require(referrer == address(0x0) || addressToPublicKey[referrer].keyVersion != 0, 'Referrer must be registered');\r\n        require(addr != address(0x0) && addressToPublicKey[addr].keyVersion == 0, 'Only new user key can be assigned by admin');\r\n\r\n        internalKeyAttach(addr, publicKey, keyVersion, registrar);\r\n\r\n        if (payBonus && newcomerBonus != 0) {\r\n            addr.transfer(newcomerBonus);\r\n        }\r\n        if (referrer != address(0x0) && referrerBonus != 0) {\r\n            referrer.transfer(referrerBonus);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/YlideSafe1.sol\r\n\r\npragma solidity ^0.8.17;\r\n\r\n\r\n\r\ncontract YlideSafeV1 is Owned, Pausable {\r\n\tuint256 public constant version = 1;\r\n\r\n\tIYlideMailer public ylideMailer;\r\n\r\n\tstruct SafeArgs {\r\n\t\taddress safeSender;\r\n\t\taddress[] safeRecipients;\r\n\t}\r\n\r\n\terror InvalidSender();\r\n\terror InvalidArguments();\r\n\r\n\tevent YlideMailerChanged(address indexed ylideMailer);\r\n\tevent SafeMails(\r\n\t\tuint256 indexed contentId,\r\n\t\taddress indexed safeSender,\r\n\t\taddress[] safeRecipients\r\n\t);\r\n\r\n\tconstructor(IYlideMailer _ylideMailer) Owned() Pausable() {\r\n\t\tylideMailer = _ylideMailer;\r\n\t}\r\n\r\n\tfunction setYlideMailer(IYlideMailer _ylideMailer) external onlyOwner {\r\n\t\tylideMailer = _ylideMailer;\r\n\t\temit YlideMailerChanged(address(_ylideMailer));\r\n\t}\r\n\r\n\tfunction sendBulkMail(\r\n\t\tIYlideMailer.SendBulkArgs calldata args,\r\n\t\tIYlideMailer.SignatureArgs calldata signatureArgs,\r\n\t\tSafeArgs calldata safeArgs\r\n\t) external payable whenNotPaused returns (uint256) {\r\n\t\t_validate(args.recipients, signatureArgs.sender, safeArgs);\r\n\r\n\t\tuint256 contentId = ylideMailer.sendBulkMail{value: msg.value}(\r\n\t\t\targs,\r\n\t\t\tsignatureArgs,\r\n\t\t\tIYlideMailer.Supplement(address(this), CONTRACT_TYPE_SAFE)\r\n\t\t);\r\n\r\n\t\temit SafeMails(contentId, safeArgs.safeSender, safeArgs.safeRecipients);\r\n\r\n\t\treturn contentId;\r\n\t}\r\n\r\n\tfunction addMailRecipients(\r\n\t\tIYlideMailer.AddMailRecipientsArgs calldata args,\r\n\t\tIYlideMailer.SignatureArgs calldata signatureArgs,\r\n\t\tSafeArgs calldata safeArgs\r\n\t) external payable whenNotPaused returns (uint256) {\r\n\t\t_validate(args.recipients, signatureArgs.sender, safeArgs);\r\n\r\n\t\tuint256 contentId = ylideMailer.addMailRecipients{value: msg.value}(\r\n\t\t\targs,\r\n\t\t\tsignatureArgs,\r\n\t\t\tIYlideMailer.Supplement(address(this), CONTRACT_TYPE_SAFE)\r\n\t\t);\r\n\r\n\t\temit SafeMails(contentId, safeArgs.safeSender, safeArgs.safeRecipients);\r\n\r\n\t\treturn contentId;\r\n\t}\r\n\r\n\tfunction _validate(\r\n\t\tuint256[] calldata recipients,\r\n\t\taddress sender,\r\n\t\tSafeArgs calldata safeArgs\r\n\t) internal view {\r\n\t\tif (sender != msg.sender) revert InvalidSender();\r\n\t\tif (recipients.length != safeArgs.safeRecipients.length) revert InvalidArguments();\r\n\t}\r\n\r\n\tfunction pause() external onlyOwner {\r\n\t\t_pause();\r\n\t}\r\n\r\n\tfunction unpause() external onlyOwner {\r\n\t\t_unpause();\r\n\t}\r\n}\r\n\r\n\r\n// File contracts/YlideRegistryV3.sol\r\n\r\npragma solidity ^0.8.9;\r\n\r\nstruct RegistryEntry {\r\n   uint256 publicKey;\r\n   uint128 block;\r\n   uint64 timestamp;\r\n   uint64 keyVersion;\r\n}\r\n\r\ncontract YlideRegistryV3 {\r\n\r\n    uint256 public version = 3;\r\n\r\n    event KeyAttached(address indexed addr, uint256 publicKey, uint64 keyVersion);\r\n    \r\n    mapping(address => RegistryEntry) public addressToPublicKey;\r\n\r\n    YlideRegistryV3 previousContract;\r\n\r\n    constructor(address previousContractAddress) {\r\n        previousContract = YlideRegistryV3(previousContractAddress);\r\n    }\r\n\r\n    function getPublicKey(address addr) view public returns (RegistryEntry memory entry, uint contractVersion, address contractAddress) {\r\n        contractVersion = version;\r\n        contractAddress = address(this);\r\n        entry = addressToPublicKey[addr];\r\n        if (entry.keyVersion == 0 && address(previousContract) != address(0x0)) {\r\n            return previousContract.getPublicKey(addr);\r\n        }\r\n    }\r\n\r\n    function attachPublicKey(uint256 publicKey, uint64 keyVersion) public {\r\n        addressToPublicKey[msg.sender] = RegistryEntry(publicKey, uint128(block.number), uint64(block.timestamp), keyVersion);\r\n\r\n        emit KeyAttached(msg.sender, publicKey, keyVersion);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FeedAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeedDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeedExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeedNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsNotYlide\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFeedOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NumberLessThanFirstBlockNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NumberMoreThanFirstBlockNumberPlusBlockCountLock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureExpired\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"BroadcastFeedBeneficiaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"BroadcastFeedCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"BroadcastFeedOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"name\":\"BroadcastFeedPublicityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"writer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"BroadcastFeedWriterChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extraPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousFeedEventsIndex\",\"type\":\"uint256\"}],\"name\":\"BroadcastPush\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousFeedEventsIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IYlideMailer.Supplement\",\"name\":\"supplement\",\"type\":\"tuple\"}],\"name\":\"MailPush\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"MailingFeedBeneficiaryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"MailingFeedCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newParticipant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousFeedJoinEventsIndex\",\"type\":\"uint256\"}],\"name\":\"MailingFeedJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"MailingFeedOwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"parts\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"partIdx\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"content\",\"type\":\"bytes\"}],\"name\":\"MessageContent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"writer\",\"type\":\"address\"}],\"name\":\"addBroadcastFeedWriter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"partsCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"blockCountLock\",\"type\":\"uint16\"},{\"internalType\":\"uint256[]\",\"name\":\"recipients\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"keys\",\"type\":\"bytes[]\"}],\"internalType\":\"struct IYlideMailer.AddMailRecipientsArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"addMailRecipients\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"partsCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"blockCountLock\",\"type\":\"uint16\"},{\"internalType\":\"uint256[]\",\"name\":\"recipients\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"keys\",\"type\":\"bytes[]\"}],\"internalType\":\"struct IYlideMailer.AddMailRecipientsArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"internalType\":\"struct IYlideMailer.SignatureArgs\",\"name\":\"signatureArgs\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"internalType\":\"struct IYlideMailer.Supplement\",\"name\":\"supplement\",\"type\":\"tuple\"}],\"name\":\"addMailRecipients\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"broadcastFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"broadcastFeedCreationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"broadcastFeeds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"broadcastFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"messagesIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"messagesCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockCountLock\",\"type\":\"uint256\"}],\"name\":\"buildContentId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"name\":\"changeBroadcastFeedPublicity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contentPartFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"name\":\"createBroadcastFeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"}],\"name\":\"createMailingFeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraTreasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"name\":\"getMailingFeedRecipientIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recipient\",\"type\":\"uint256\"}],\"name\":\"getMailingFeedRecipientMessagesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"gracefullyTerminateAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isBroadcastFeedWriter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isYlide\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mailingFeedCreationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mailingFeeds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"recipientFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipientFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"recipientToMailingFeedJoinEventsIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"writer\",\"type\":\"address\"}],\"name\":\"removeBroadcastFeedWriter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPersonal\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isGenericFeed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"extraPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"content\",\"type\":\"bytes\"}],\"name\":\"sendBroadcast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isPersonal\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isGenericFeed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"extraPayment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"partsCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"blockCountLock\",\"type\":\"uint16\"}],\"name\":\"sendBroadcastHeader\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"recipients\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"keys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"content\",\"type\":\"bytes\"}],\"internalType\":\"struct IYlideMailer.SendBulkArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"sendBulkMail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"recipients\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"keys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"content\",\"type\":\"bytes\"}],\"internalType\":\"struct IYlideMailer.SendBulkArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"internalType\":\"struct IYlideMailer.SignatureArgs\",\"name\":\"signatureArgs\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"internalType\":\"struct IYlideMailer.Supplement\",\"name\":\"supplement\",\"type\":\"tuple\"}],\"name\":\"sendBulkMail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uniqueId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockCountLock\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"parts\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"partIdx\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"content\",\"type\":\"bytes\"}],\"name\":\"sendMessageContentPart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"setBroadcastFeedBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_broadcastFee\",\"type\":\"uint256\"}],\"name\":\"setBroadcastFeedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newExtraTreasury\",\"type\":\"address\"}],\"name\":\"setExtraTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contentPartFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_recipientFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_broadcastFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"ylideContracts\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"values\",\"type\":\"bool[]\"}],\"name\":\"setIsYlide\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"setMailingFeedBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_recipientFee\",\"type\":\"uint256\"}],\"name\":\"setMailingFeedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_broadcastFeedCreationPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mailingFeedCreationPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"storeBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferBroadcastFeedOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feedId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferMailingFeedOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "YlideMailerV9", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://90b887f3d33b402f220b0b262bd3cc8b4306cc230732ce315556e9a59895734f"}