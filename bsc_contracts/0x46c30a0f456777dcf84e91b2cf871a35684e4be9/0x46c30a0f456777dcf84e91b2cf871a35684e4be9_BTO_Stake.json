{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom( address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"new owner is the zero address\");\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\ncontract BTO_Stake is Context, Ownable {\r\n\r\n    struct Deposit {\r\n        uint256 amount;\r\n        uint256 startTime;\r\n        uint256 rate;\r\n        uint256 endtime;\r\n        uint256 lastWithdraw;\r\n        bool completed;\r\n    }\r\n\r\n    mapping (address => Deposit[]) private _deposits;\r\n\r\n    IERC20 token = IERC20(0x0C190e6180fE24B423E4feB7B81d974E5CEeD8B3);\r\n\r\n    uint256 MIN_DEP = 10 * 10 ** 18;\r\n    uint256 MAX_DEP = 1000 * 10 ** 18;\r\n\r\n    uint256 day = 86400;\r\n\r\n    uint256 public launchTime;\r\n\r\n    bool isActive = false;\r\n\r\n    uint256[] _rates = [165, 274];\r\n\r\n    uint256[] _times = [365, 730];\r\n\r\n    constructor() {\r\n    }\r\n\r\n    function enableStaking() public onlyOwner {\r\n        isActive = true;\r\n        launchTime = block.timestamp;\r\n    }\r\n\r\n    function stake(uint256 _amount, uint256 _type) public {\r\n        require(isActive, \"Stake non ancora abilitato\");\r\n        require(_type == 0 || _type == 1, \"Stai barando!!\");\r\n        require(_amount >= MIN_DEP && _amount <= MAX_DEP, \"Importo non valido\");\r\n        require(token.balanceOf(_msgSender()) > _amount, \"Non hai token sufficienti!\");\r\n\r\n        token.transferFrom(_msgSender(), address(this), _amount);\r\n\r\n        _deposits[_msgSender()].push(Deposit(_amount, block.timestamp, _rates[_type], block.timestamp + day * _times[_type], block.timestamp, false));\r\n        \r\n    }\r\n\r\n    function retrieveRewards() public view returns(uint256) {\r\n        require(_deposits[_msgSender()].length > 0, \"Non hai ancora fatto alcun deposito!\");\r\n        uint256 reward = _calculateRewards(_msgSender());\r\n        return reward;\r\n    }\r\n\r\n    function myDeposits() public view returns (Deposit[] memory) {\r\n        return _deposits[_msgSender()];\r\n    }\r\n\r\n    function withdraw() public {\r\n        uint256 interest = 0;\r\n        uint256 btoAmount = 0;\r\n        (interest, btoAmount) = _calculateInterest(_msgSender());\r\n        require(interest > 0, \"Non puoi ancora prelevare\");\r\n        require(btoAmount + interest <= token.balanceOf(address(this)), \"Fondi Insufficienti!\");\r\n\r\n        token.transfer(_msgSender(), btoAmount + interest);\r\n    }\r\n\r\n\r\n    function _calculateInterest(address _owner) internal returns (uint256, uint256) {\r\n        uint256 rewards = 0;\r\n        uint256 timePassed = 0;\r\n        uint256 btoAmount = 0;\r\n        for(uint256 i = 0; i < _deposits[_owner].length; i++) {\r\n                if(!_deposits[_owner][i].completed){\r\n                    if(_deposits[_owner][i].endtime > block.timestamp){\r\n                         timePassed = (block.timestamp - _deposits[_owner][i].lastWithdraw) / day;\r\n                            if(timePassed > 30) {\r\n                                rewards += timePassed * ((_deposits[_owner][i].amount * _deposits[_owner][i].rate) / 1000000);\r\n                                _deposits[_owner][i].lastWithdraw = block.timestamp;\r\n                            }\r\n                    } else if(_deposits[_owner][i].endtime < block.timestamp){ \r\n                        timePassed = (_deposits[_owner][i].endtime - _deposits[_owner][i].lastWithdraw) / day;\r\n                        rewards += timePassed * ((_deposits[_owner][i].amount * _deposits[_owner][i].rate) / 1000000);\r\n                        _deposits[_owner][i].completed = true;\r\n                        btoAmount += _deposits[_owner][i].amount;\r\n                    }\r\n                }\r\n        }\r\n        return (rewards, btoAmount);\r\n    }\r\n\r\n\r\n    function _calculateRewards(address _owner) internal view returns (uint256) {\r\n        uint256 rewards = 0;\r\n        uint256 timePassed = 0;\r\n            for(uint256 i = 0; i < _deposits[_owner].length; i++) {\r\n                if(!_deposits[_owner][i].completed){\r\n                    if(_deposits[_owner][i].endtime > block.timestamp){\r\n                         timePassed = (block.timestamp - _deposits[_owner][i].lastWithdraw) / day;\r\n                        rewards += timePassed * ((_deposits[_owner][i].amount * _deposits[_owner][i].rate) / 1000000);\r\n                    } else if(_deposits[_owner][i].endtime < block.timestamp){ \r\n                        timePassed = (_deposits[_owner][i].endtime - _deposits[_owner][i].lastWithdraw) / day;\r\n                        rewards += timePassed * ((_deposits[_owner][i].amount * _deposits[_owner][i].rate) / 1000000);\r\n                    }\r\n                }\r\n                \r\n            }\r\n        return rewards;\r\n    }\r\n\r\n    \r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"enableStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"}],\"internalType\":\"struct BTO_Stake.Deposit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BTO_Stake", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://13540486e415e4cda7bd85445b9e5bc0b29bd28e15177cc9633412778fa77096"}