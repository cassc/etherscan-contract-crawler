{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/periphery/AntiSnipAttackPositionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.9;\\npragma abicoder v2;\\n\\nimport {AntiSnipAttack} from '../periphery/libraries/AntiSnipAttack.sol';\\nimport {SafeCast} from '../libraries/SafeCast.sol';\\n\\nimport './BasePositionManager.sol';\\n\\ncontract AntiSnipAttackPositionManager is BasePositionManager {\\n  using SafeCast for uint256;\\n  mapping(uint256 => AntiSnipAttack.Data) public antiSnipAttackData;\\n\\n  constructor(\\n    address _factory,\\n    address _WETH,\\n    address _descriptor\\n  ) BasePositionManager(_factory, _WETH, _descriptor) {}\\n\\n  function mint(MintParams calldata params)\\n    public\\n    payable\\n    override\\n    returns (\\n      uint256 tokenId,\\n      uint128 liquidity,\\n      uint256 amount0,\\n      uint256 amount1\\n    )\\n  {\\n    (tokenId, liquidity, amount0, amount1) = super.mint(params);\\n    antiSnipAttackData[tokenId] = AntiSnipAttack.initialize(block.timestamp.toUint32());\\n  }\\n\\n  function addLiquidity(IncreaseLiquidityParams calldata params)\\n    external\\n    payable\\n    override\\n    onlyNotExpired(params.deadline)\\n    returns (\\n      uint128 liquidity,\\n      uint256 amount0,\\n      uint256 amount1,\\n      uint256 additionalRTokenOwed\\n    )\\n  {\\n    Position storage pos = _positions[params.tokenId];\\n    PoolInfo memory poolInfo = _poolInfoById[pos.poolId];\\n    IPool pool;\\n    uint256 feeGrowthInsideLast;\\n\\n    int24[2] memory ticksPrevious;\\n    (liquidity, amount0, amount1, feeGrowthInsideLast, pool) = _addLiquidity(\\n      AddLiquidityParams({\\n        token0: poolInfo.token0,\\n        token1: poolInfo.token1,\\n        fee: poolInfo.fee,\\n        recipient: address(this),\\n        tickLower: pos.tickLower,\\n        tickUpper: pos.tickUpper,\\n        ticksPrevious: ticksPrevious,\\n        amount0Desired: params.amount0Desired,\\n        amount1Desired: params.amount1Desired,\\n        amount0Min: params.amount0Min,\\n        amount1Min: params.amount1Min\\n      })\\n    );\\n\\n    uint128 tmpLiquidity = pos.liquidity;\\n\\n    if (feeGrowthInsideLast != pos.feeGrowthInsideLast) {\\n      uint256 feeGrowthInsideDiff;\\n      unchecked {\\n        feeGrowthInsideDiff = feeGrowthInsideLast - pos.feeGrowthInsideLast;\\n      }\\n      // zero fees burnable when adding liquidity\\n      (additionalRTokenOwed, ) = AntiSnipAttack.update(\\n        antiSnipAttackData[params.tokenId],\\n        tmpLiquidity,\\n        liquidity,\\n        block.timestamp.toUint32(),\\n        true,\\n        FullMath.mulDivFloor(tmpLiquidity, feeGrowthInsideDiff, C.TWO_POW_96),\\n        IFactory(factory).vestingPeriod()\\n      );\\n      pos.rTokenOwed += additionalRTokenOwed;\\n      pos.feeGrowthInsideLast = feeGrowthInsideLast;\\n    }\\n\\n    pos.liquidity += liquidity;\\n\\n    emit AddLiquidity(params.tokenId, liquidity, amount0, amount1, additionalRTokenOwed);\\n  }\\n\\n  function removeLiquidity(RemoveLiquidityParams calldata params)\\n    external\\n    override\\n    isAuthorizedForToken(params.tokenId)\\n    onlyNotExpired(params.deadline)\\n    returns (\\n      uint256 amount0,\\n      uint256 amount1,\\n      uint256 additionalRTokenOwed\\n    )\\n  {\\n    Position storage pos = _positions[params.tokenId];\\n    uint128 tmpLiquidity = pos.liquidity;\\n    require(tmpLiquidity >= params.liquidity, 'Insufficient liquidity');\\n\\n    PoolInfo memory poolInfo = _poolInfoById[pos.poolId];\\n    IPool pool = _getPool(poolInfo.token0, poolInfo.token1, poolInfo.fee);\\n\\n    uint256 feeGrowthInsideLast;\\n    (amount0, amount1, feeGrowthInsideLast) = pool.burn(\\n      pos.tickLower,\\n      pos.tickUpper,\\n      params.liquidity\\n    );\\n    require(amount0 >= params.amount0Min && amount1 >= params.amount1Min, 'Low return amounts');\\n\\n    // call update() function regardless of fee growth difference\\n    // to calculate burnable fees\\n    uint256 feesBurnable;\\n    uint256 feeGrowthInsideDiff;\\n    unchecked {\\n      feeGrowthInsideDiff = feeGrowthInsideLast - pos.feeGrowthInsideLast;\\n    }\\n    (additionalRTokenOwed, feesBurnable) = AntiSnipAttack.update(\\n      antiSnipAttackData[params.tokenId],\\n      tmpLiquidity,\\n      params.liquidity,\\n      block.timestamp.toUint32(),\\n      false,\\n      FullMath.mulDivFloor(tmpLiquidity, feeGrowthInsideDiff, C.TWO_POW_96),\\n      IFactory(factory).vestingPeriod()\\n    );\\n    pos.rTokenOwed += additionalRTokenOwed;\\n    pos.feeGrowthInsideLast = feeGrowthInsideLast;\\n    if (feesBurnable > 0) pool.burnRTokens(feesBurnable, true);\\n\\n    pos.liquidity = tmpLiquidity - params.liquidity;\\n\\n    emit RemoveLiquidity(params.tokenId, params.liquidity, amount0, amount1, additionalRTokenOwed);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/libraries/AntiSnipAttack.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.9;\\n\\nimport {Math} from '@openzeppelin/contracts/utils/math/Math.sol';\\n\\nimport {MathConstants as C} from '../../libraries/MathConstants.sol';\\nimport {SafeCast} from '../../libraries/SafeCast.sol';\\n\\n/// @title AntiSnipAttack\\n/// @notice Contains the snipping attack mechanism implementation\\n/// to be inherited by NFT position manager\\nlibrary AntiSnipAttack {\\n  using SafeCast for uint256;\\n  using SafeCast for int256;\\n  using SafeCast for int128;\\n\\n  struct Data {\\n    // timestamp of last action performed\\n    uint32 lastActionTime;\\n    // average start time of lock schedule\\n    uint32 lockTime;\\n    // average unlock time of locked fees\\n    uint32 unlockTime;\\n    // locked rToken qty since last update\\n    uint256 feesLocked;\\n  }\\n\\n  /// @notice Initializes values for a new position\\n  /// @return data Initialized snip attack data structure\\n  function initialize(uint32 currentTime) internal pure returns (Data memory data) {\\n    data.lastActionTime = currentTime;\\n    data.lockTime = currentTime;\\n    data.unlockTime = currentTime;\\n    data.feesLocked = 0;\\n  }\\n\\n  /// @notice Credits accumulated fees to a user's existing position\\n  /// @dev The posiition should already have been initialized\\n  /// @param self The individual position to update\\n  /// @param liquidityDelta The change in pool liquidity as a result of the position update\\n  /// this value should not be zero when called\\n  /// @param isAddLiquidity true = add liquidity, false = remove liquidity\\n  /// @param feesSinceLastAction rTokens collected by position since last action performed\\n  /// in fee growth inside the tick range\\n  /// @param vestingPeriod The maximum time duration for which LP fees\\n  /// are proportionally burnt upon LP removals\\n  /// @return feesClaimable The claimable rToken amount to be sent to the user\\n  /// @return feesBurnable The rToken amount to be burnt\\n  function update(\\n    Data storage self,\\n    uint128 currentLiquidity,\\n    uint128 liquidityDelta,\\n    uint32 currentTime,\\n    bool isAddLiquidity,\\n    uint256 feesSinceLastAction,\\n    uint256 vestingPeriod\\n  ) internal returns (uint256 feesClaimable, uint256 feesBurnable) {\\n    Data memory _self = self;\\n    if (vestingPeriod == 0) {\\n      // no locked fees, return\\n      if (_self.feesLocked == 0) return (feesSinceLastAction, 0);\\n      // unlock any locked fees\\n      self.feesLocked = 0;\\n      return (_self.feesLocked + feesSinceLastAction, 0);\\n    }\\n\\n    // scoping of fee proportions to avoid stack too deep\\n    {\\n      // claimable proportion (in basis pts) of collected fees between last action and now\\n      // lockTime is used instead of lastActionTime because we prefer to use the entire\\n      // duration of the position as the measure, not just the duration after last action performed\\n      uint256 feesClaimableSinceLastActionFeeUnits = Math.min(\\n        C.FEE_UNITS,\\n        (uint256(currentTime - _self.lockTime) * C.FEE_UNITS) / vestingPeriod\\n      );\\n      // claimable proportion (in basis pts) of locked fees\\n      // lastActionTime is used instead of lockTime since the vested fees\\n      // from lockTime to lastActionTime have already been claimed\\n      uint256 feesClaimableVestedFeeUnits = _self.unlockTime <= _self.lastActionTime\\n        ? C.FEE_UNITS\\n        : Math.min(\\n          C.FEE_UNITS,\\n          (uint256(currentTime - _self.lastActionTime) * C.FEE_UNITS) /\\n            (_self.unlockTime - _self.lastActionTime)\\n        );\\n\\n      uint256 feesLockedBeforeUpdate = _self.feesLocked;\\n      (_self.feesLocked, feesClaimable) = calcFeeProportions(\\n        _self.feesLocked,\\n        feesSinceLastAction,\\n        feesClaimableVestedFeeUnits,\\n        feesClaimableSinceLastActionFeeUnits\\n      );\\n\\n      // update unlock time\\n      // the new lock fee qty contains 2 portions:\\n      // (1) new lock fee qty from last action to now\\n      // (2) remaining lock fee qty prior to last action performed\\n      // new unlock time = proportionally weighted unlock times of the 2 portions\\n      // (1)'s unlock time = currentTime + vestingPeriod\\n      // (2)'s unlock time = current unlock time\\n      // If (1) and (2) are 0, then update to block.timestamp\\n      self.unlockTime = (_self.feesLocked == 0)\\n        ? currentTime\\n        : (((_self.lockTime + vestingPeriod) *\\n          feesSinceLastAction *\\n          (C.FEE_UNITS - feesClaimableSinceLastActionFeeUnits) +\\n          _self.unlockTime *\\n          feesLockedBeforeUpdate *\\n          (C.FEE_UNITS - feesClaimableVestedFeeUnits)) / (_self.feesLocked * C.FEE_UNITS))\\n        .toUint32();\\n    }\\n\\n    uint256 updatedLiquidity = isAddLiquidity\\n      ? currentLiquidity + liquidityDelta\\n      : currentLiquidity - liquidityDelta;\\n\\n    // adding liquidity: update average start time\\n    // removing liquidity: calculate and burn portion of locked fees\\n    if (isAddLiquidity) {\\n      self.lockTime = Math\\n      .ceilDiv(\\n        Math.max(_self.lockTime, currentTime - vestingPeriod) *\\n          uint256(currentLiquidity) +\\n          uint256(uint128(liquidityDelta)) *\\n          currentTime,\\n        updatedLiquidity\\n      ).toUint32();\\n    } else if (_self.feesLocked > 0) {\\n      feesBurnable = (_self.feesLocked * liquidityDelta) / uint256(currentLiquidity);\\n      _self.feesLocked -= feesBurnable;\\n    }\\n\\n    // update other variables\\n    self.feesLocked = _self.feesLocked;\\n    self.lastActionTime = currentTime;\\n  }\\n\\n  function calcFeeProportions(\\n    uint256 currentFees,\\n    uint256 nextFees,\\n    uint256 currentClaimableFeeUnits,\\n    uint256 nextClaimableFeeUnits\\n  ) internal pure returns (uint256 feesLockedNew, uint256 feesClaimable) {\\n    uint256 totalFees = currentFees + nextFees;\\n    feesClaimable =\\n      (currentClaimableFeeUnits * currentFees + nextClaimableFeeUnits * nextFees) /\\n      C.FEE_UNITS;\\n    feesLockedNew = totalFees - feesClaimable;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n  /// @notice Cast a uint256 to uint32, revert on overflow\\n  /// @param y The uint256 to be downcasted\\n  /// @return z The downcasted integer, now type uint32\\n  function toUint32(uint256 y) internal pure returns (uint32 z) {\\n    require((z = uint32(y)) == y);\\n  }\\n\\n  /// @notice Cast a uint128 to a int128, revert on overflow\\n  /// @param y The uint256 to be casted\\n  /// @return z The casted integer, now type int256\\n  function toInt128(uint128 y) internal pure returns (int128 z) {\\n    require(y < 2**127);\\n    z = int128(y);\\n  }\\n\\n  /// @notice Cast a uint256 to a uint128, revert on overflow\\n  /// @param y the uint256 to be downcasted\\n  /// @return z The downcasted integer, now type uint128\\n  function toUint128(uint256 y) internal pure returns (uint128 z) {\\n    require((z = uint128(y)) == y);\\n  }\\n\\n  /// @notice Cast a int128 to a uint128 and reverses the sign.\\n  /// @param y The int128 to be casted\\n  /// @return z = -y, now type uint128\\n  function revToUint128(int128 y) internal pure returns (uint128 z) {\\n    unchecked {\\n      return type(uint128).max - uint128(y) + 1;\\n    }\\n  }\\n\\n  /// @notice Cast a uint256 to a uint160, revert on overflow\\n  /// @param y The uint256 to be downcasted\\n  /// @return z The downcasted integer, now type uint160\\n  function toUint160(uint256 y) internal pure returns (uint160 z) {\\n    require((z = uint160(y)) == y);\\n  }\\n\\n  /// @notice Cast a uint256 to a int256, revert on overflow\\n  /// @param y The uint256 to be casted\\n  /// @return z The casted integer, now type int256\\n  function toInt256(uint256 y) internal pure returns (int256 z) {\\n    require(y < 2**255);\\n    z = int256(y);\\n  }\\n\\n  /// @notice Cast a uint256 to a int256 and reverses the sign, revert on overflow\\n  /// @param y The uint256 to be casted\\n  /// @return z = -y, now type int256\\n  function revToInt256(uint256 y) internal pure returns (int256 z) {\\n    require(y < 2**255);\\n    z = -int256(y);\\n  }\\n\\n  /// @notice Cast a int256 to a uint256 and reverses the sign.\\n  /// @param y The int256 to be casted\\n  /// @return z = -y, now type uint256\\n  function revToUint256(int256 y) internal pure returns (uint256 z) {\\n    unchecked {\\n      return type(uint256).max - uint256(y) + 1;\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/BasePositionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.9;\\npragma abicoder v2;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\nimport {PoolAddress} from './libraries/PoolAddress.sol';\\nimport {MathConstants as C} from '../libraries/MathConstants.sol';\\nimport {FullMath} from '../libraries/FullMath.sol';\\nimport {QtyDeltaMath} from '../libraries/QtyDeltaMath.sol';\\n\\nimport {IPool} from '../interfaces/IPool.sol';\\nimport {IFactory} from '../interfaces/IFactory.sol';\\nimport {IBasePositionManager} from '../interfaces/periphery/IBasePositionManager.sol';\\nimport {INonfungibleTokenPositionDescriptor} from '../interfaces/periphery/INonfungibleTokenPositionDescriptor.sol';\\nimport {IRouterTokenHelper} from '../interfaces/periphery/IRouterTokenHelper.sol';\\n\\nimport {LiquidityHelper} from './base/LiquidityHelper.sol';\\nimport {RouterTokenHelper} from './base/RouterTokenHelper.sol';\\nimport {Multicall} from './base/Multicall.sol';\\nimport {DeadlineValidation} from './base/DeadlineValidation.sol';\\nimport {ERC721Permit} from './base/ERC721Permit.sol';\\n\\ncontract BasePositionManager is\\n  IBasePositionManager,\\n  Multicall,\\n  ERC721Permit('KyberSwap v2 NFT Positions Manager', 'KS2-NPM', '1'),\\n  LiquidityHelper\\n{\\n  address internal immutable _tokenDescriptor;\\n  uint80 public override nextPoolId = 1;\\n  uint256 public override nextTokenId = 1;\\n  // pool id => pool info\\n  mapping(uint80 => PoolInfo) internal _poolInfoById;\\n  // tokenId => position\\n  mapping(uint256 => Position) internal _positions;\\n\\n  mapping(address => bool) public override isRToken;\\n  // pool address => pool id\\n  mapping(address => uint80) public override addressToPoolId;\\n\\n  modifier isAuthorizedForToken(uint256 tokenId) {\\n    require(_isApprovedOrOwner(msg.sender, tokenId), 'Not approved');\\n    _;\\n  }\\n\\n  constructor(\\n    address _factory,\\n    address _WETH,\\n    address _descriptor\\n  ) LiquidityHelper(_factory, _WETH) {\\n    _tokenDescriptor = _descriptor;\\n  }\\n\\n  function createAndUnlockPoolIfNecessary(\\n    address token0,\\n    address token1,\\n    uint24 fee,\\n    uint160 currentSqrtP\\n  ) external payable override returns (address pool) {\\n    require(token0 < token1);\\n    pool = IFactory(factory).getPool(token0, token1, fee);\\n\\n    if (pool == address(0)) {\\n      pool = IFactory(factory).createPool(token0, token1, fee);\\n    }\\n\\n    (uint160 sqrtP, , , ) = IPool(pool).getPoolState();\\n    if (sqrtP == 0) {\\n      (uint256 qty0, uint256 qty1) = QtyDeltaMath.calcUnlockQtys(currentSqrtP);\\n      _transferTokens(token0, msg.sender, pool, qty0);\\n      _transferTokens(token1, msg.sender, pool, qty1);\\n      IPool(pool).unlockPool(currentSqrtP);\\n    }\\n  }\\n\\n  function mint(MintParams calldata params)\\n    public\\n    payable\\n    virtual\\n    override\\n    onlyNotExpired(params.deadline)\\n    returns (\\n      uint256 tokenId,\\n      uint128 liquidity,\\n      uint256 amount0,\\n      uint256 amount1\\n    )\\n  {\\n    IPool pool;\\n    uint256 feeGrowthInsideLast;\\n\\n    (liquidity, amount0, amount1, feeGrowthInsideLast, pool) = _addLiquidity(\\n      AddLiquidityParams({\\n        token0: params.token0,\\n        token1: params.token1,\\n        fee: params.fee,\\n        recipient: address(this),\\n        tickLower: params.tickLower,\\n        tickUpper: params.tickUpper,\\n        ticksPrevious: params.ticksPrevious,\\n        amount0Desired: params.amount0Desired,\\n        amount1Desired: params.amount1Desired,\\n        amount0Min: params.amount0Min,\\n        amount1Min: params.amount1Min\\n      })\\n    );\\n\\n    tokenId = nextTokenId++;\\n    _mint(params.recipient, tokenId);\\n\\n    uint80 poolId = _storePoolInfo(address(pool), params.token0, params.token1, params.fee);\\n\\n    _positions[tokenId] = Position({\\n      nonce: 0,\\n      operator: address(0),\\n      poolId: poolId,\\n      tickLower: params.tickLower,\\n      tickUpper: params.tickUpper,\\n      liquidity: liquidity,\\n      rTokenOwed: 0,\\n      feeGrowthInsideLast: feeGrowthInsideLast\\n    });\\n\\n    emit MintPosition(tokenId, poolId, liquidity, amount0, amount1);\\n  }\\n\\n  function addLiquidity(IncreaseLiquidityParams calldata params)\\n    external\\n    payable\\n    virtual\\n    override\\n    onlyNotExpired(params.deadline)\\n    returns (\\n      uint128 liquidity,\\n      uint256 amount0,\\n      uint256 amount1,\\n      uint256 additionalRTokenOwed\\n    )\\n  {\\n    Position storage pos = _positions[params.tokenId];\\n    PoolInfo memory poolInfo = _poolInfoById[pos.poolId];\\n    IPool pool;\\n    uint256 feeGrowthInsideLast;\\n\\n    int24[2] memory ticksPrevious;\\n    (liquidity, amount0, amount1, feeGrowthInsideLast, pool) = _addLiquidity(\\n      AddLiquidityParams({\\n        token0: poolInfo.token0,\\n        token1: poolInfo.token1,\\n        fee: poolInfo.fee,\\n        recipient: address(this),\\n        tickLower: pos.tickLower,\\n        tickUpper: pos.tickUpper,\\n        ticksPrevious: ticksPrevious,\\n        amount0Desired: params.amount0Desired,\\n        amount1Desired: params.amount1Desired,\\n        amount0Min: params.amount0Min,\\n        amount1Min: params.amount1Min\\n      })\\n    );\\n\\n    uint128 tmpLiquidity = pos.liquidity;\\n    uint256 tmpFeeGrowthInsideLast = pos.feeGrowthInsideLast;\\n\\n    if (feeGrowthInsideLast != tmpFeeGrowthInsideLast) {\\n      uint256 feeGrowthInsideDiff;\\n      unchecked {\\n        feeGrowthInsideDiff = feeGrowthInsideLast - tmpFeeGrowthInsideLast;\\n      }\\n      additionalRTokenOwed = FullMath.mulDivFloor(tmpLiquidity, feeGrowthInsideDiff, C.TWO_POW_96);\\n      pos.rTokenOwed += additionalRTokenOwed;\\n      pos.feeGrowthInsideLast = feeGrowthInsideLast;\\n    }\\n\\n    pos.liquidity = tmpLiquidity + liquidity;\\n\\n    emit AddLiquidity(params.tokenId, liquidity, amount0, amount1, additionalRTokenOwed);\\n  }\\n\\n  function removeLiquidity(RemoveLiquidityParams calldata params)\\n    external\\n    virtual\\n    override\\n    isAuthorizedForToken(params.tokenId)\\n    onlyNotExpired(params.deadline)\\n    returns (\\n      uint256 amount0,\\n      uint256 amount1,\\n      uint256 additionalRTokenOwed\\n    )\\n  {\\n    Position storage pos = _positions[params.tokenId];\\n    uint128 tmpLiquidity = pos.liquidity;\\n    uint256 tmpFeeGrowthInsideLast = pos.feeGrowthInsideLast;\\n    require(tmpLiquidity >= params.liquidity, 'Insufficient liquidity');\\n\\n    PoolInfo memory poolInfo = _poolInfoById[pos.poolId];\\n    IPool pool = _getPool(poolInfo.token0, poolInfo.token1, poolInfo.fee);\\n\\n    uint256 feeGrowthInsideLast;\\n    (amount0, amount1, feeGrowthInsideLast) = pool.burn(\\n      pos.tickLower,\\n      pos.tickUpper,\\n      params.liquidity\\n    );\\n    require(amount0 >= params.amount0Min && amount1 >= params.amount1Min, 'Low return amounts');\\n\\n    if (feeGrowthInsideLast != tmpFeeGrowthInsideLast) {\\n      uint256 feeGrowthInsideDiff;\\n      unchecked {\\n        feeGrowthInsideDiff = feeGrowthInsideLast - tmpFeeGrowthInsideLast;\\n      }\\n      additionalRTokenOwed = FullMath.mulDivFloor(tmpLiquidity, feeGrowthInsideDiff, C.TWO_POW_96);\\n      pos.rTokenOwed += additionalRTokenOwed;\\n      pos.feeGrowthInsideLast = feeGrowthInsideLast;\\n    }\\n\\n    pos.liquidity = tmpLiquidity - params.liquidity;\\n\\n    emit RemoveLiquidity(params.tokenId, params.liquidity, amount0, amount1, additionalRTokenOwed);\\n  }\\n\\n  function burnRTokens(BurnRTokenParams calldata params)\\n    external\\n    override\\n    isAuthorizedForToken(params.tokenId)\\n    onlyNotExpired(params.deadline)\\n    returns (\\n      uint256 rTokenQty,\\n      uint256 amount0,\\n      uint256 amount1\\n    )\\n  {\\n    Position storage pos = _positions[params.tokenId];\\n    rTokenQty = pos.rTokenOwed;\\n    require(rTokenQty > 0, 'No rToken to burn');\\n\\n    PoolInfo memory poolInfo = _poolInfoById[pos.poolId];\\n    IPool pool = _getPool(poolInfo.token0, poolInfo.token1, poolInfo.fee);\\n\\n    pos.rTokenOwed = 0;\\n    (amount0, amount1) = pool.burnRTokens(rTokenQty, false);\\n    require(amount0 >= params.amount0Min && amount1 >= params.amount1Min, 'Low return amounts');\\n  }\\n\\n  /**\\n   * @dev Burn the token by its owner\\n   * @notice All liquidity should be removed before burning\\n   */\\n  function burn(uint256 tokenId) external payable override isAuthorizedForToken(tokenId) {\\n    require(_positions[tokenId].liquidity == 0, 'Should remove liquidity first');\\n    require(_positions[tokenId].rTokenOwed == 0, 'Should burn rToken first');\\n    delete _positions[tokenId];\\n    _burn(tokenId);\\n\\n    emit BurnPosition(tokenId);\\n  }\\n\\n  function positions(uint256 tokenId)\\n    external\\n    view\\n    override\\n    returns (Position memory pos, PoolInfo memory info)\\n  {\\n    pos = _positions[tokenId];\\n    info = _poolInfoById[pos.poolId];\\n  }\\n\\n  /**\\n   * @dev Override this function to not allow transferring rTokens\\n   * @notice it also means this PositionManager can not support LP of a rToken and another token\\n   */\\n  function transferAllTokens(\\n    address token,\\n    uint256 minAmount,\\n    address recipient\\n  ) public payable override(IRouterTokenHelper, RouterTokenHelper) {\\n    require(!isRToken[token], 'Can not transfer rToken');\\n    super.transferAllTokens(token, minAmount, recipient);\\n  }\\n\\n  function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n    require(_exists(tokenId), 'Nonexistent token');\\n    return INonfungibleTokenPositionDescriptor(_tokenDescriptor).tokenURI(this, tokenId);\\n  }\\n\\n  function getApproved(uint256 tokenId) public view override returns (address) {\\n    require(_exists(tokenId), 'ERC721: approved query for nonexistent token');\\n    return _positions[tokenId].operator;\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC721Permit, IBasePositionManager)\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(ERC721Permit).interfaceId ||\\n      interfaceId == type(IBasePositionManager).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  function _storePoolInfo(\\n    address pool,\\n    address token0,\\n    address token1,\\n    uint24 fee\\n  ) internal returns (uint80 poolId) {\\n    poolId = addressToPoolId[pool];\\n    if (poolId == 0) {\\n      addressToPoolId[pool] = (poolId = nextPoolId++);\\n      _poolInfoById[poolId] = PoolInfo({token0: token0, fee: fee, token1: token1});\\n      isRToken[pool] = true;\\n    }\\n  }\\n\\n  /// @dev Overrides _approve to use the operator in the position, which is packed with the position permit nonce\\n  function _approve(address to, uint256 tokenId) internal override {\\n    _positions[tokenId].operator = to;\\n    emit Approval(ownerOf(tokenId), to, tokenId);\\n  }\\n\\n  function _getAndIncrementNonce(uint256 tokenId) internal override returns (uint256) {\\n    return uint256(_positions[tokenId].nonce++);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/MathConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\n/// @title Contains constants needed for math libraries\\nlibrary MathConstants {\\n  uint256 internal constant TWO_FEE_UNITS = 200_000;\\n  uint256 internal constant TWO_POW_96 = 2**96;\\n  uint128 internal constant MIN_LIQUIDITY = 100000;\\n  uint8 internal constant RES_96 = 96;\\n  uint24 internal constant BPS = 10000;\\n  uint24 internal constant FEE_UNITS = 100000;\\n  // it is strictly less than 5% price movement if jumping MAX_TICK_DISTANCE ticks\\n  int24 internal constant MAX_TICK_DISTANCE = 480;\\n  // max number of tick travel when inserting if data changes\\n  uint256 internal constant MAX_TICK_TRAVEL = 10;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/libraries/PoolAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.9;\\n\\n/// @title Provides a function for deriving a pool address from the factory, tokens, and swap fee\\nlibrary PoolAddress {\\n  /// @notice Deterministically computes the pool address from the given data\\n  /// @param factory the factory address\\n  /// @param token0 One of the tokens constituting the token pair, regardless of order\\n  /// @param token1 The other token constituting the token pair, regardless of order\\n  /// @param swapFee Fee to be collected upon every swap in the pool, in fee units\\n  /// @param poolInitHash The keccak256 hash of the Pool creation code\\n  /// @return pool the pool address\\n  function computeAddress(\\n    address factory,\\n    address token0,\\n    address token1,\\n    uint24 swapFee,\\n    bytes32 poolInitHash\\n  ) internal pure returns (address pool) {\\n    (token0, token1) = token0 < token1 ? (token0, token1) : (token1, token0);\\n    bytes32 hashed = keccak256(\\n      abi.encodePacked(\\n        hex'ff',\\n        factory,\\n        keccak256(abi.encode(token0, token1, swapFee)),\\n        poolInitHash\\n      )\\n    );\\n    pool = address(uint160(uint256(hashed)));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\n/// @dev Code has been modified to be compatible with sol 0.8\\nlibrary FullMath {\\n  /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n  /// @param a The multiplicand\\n  /// @param b The multiplier\\n  /// @param denominator The divisor\\n  /// @return result The 256-bit result\\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n  function mulDivFloor(\\n    uint256 a,\\n    uint256 b,\\n    uint256 denominator\\n  ) internal pure returns (uint256 result) {\\n    // 512-bit multiply [prod1 prod0] = a * b\\n    // Compute the product mod 2**256 and mod 2**256 - 1\\n    // then use the Chinese Remainder Theorem to reconstruct\\n    // the 512 bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2**256 + prod0\\n    uint256 prod0; // Least significant 256 bits of the product\\n    uint256 prod1; // Most significant 256 bits of the product\\n    assembly {\\n      let mm := mulmod(a, b, not(0))\\n      prod0 := mul(a, b)\\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    // Handle non-overflow cases, 256 by 256 division\\n    if (prod1 == 0) {\\n      require(denominator > 0, '0 denom');\\n      assembly {\\n        result := div(prod0, denominator)\\n      }\\n      return result;\\n    }\\n\\n    // Make sure the result is less than 2**256.\\n    // Also prevents denominator == 0\\n    require(denominator > prod1, 'denom <= prod1');\\n\\n    ///////////////////////////////////////////////\\n    // 512 by 256 division.\\n    ///////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0]\\n    // Compute remainder using mulmod\\n    uint256 remainder;\\n    assembly {\\n      remainder := mulmod(a, b, denominator)\\n    }\\n    // Subtract 256 bit number from 512 bit number\\n    assembly {\\n      prod1 := sub(prod1, gt(remainder, prod0))\\n      prod0 := sub(prod0, remainder)\\n    }\\n\\n    // Factor powers of two out of denominator\\n    // Compute largest power of two divisor of denominator.\\n    // Always >= 1.\\n    uint256 twos = denominator & (~denominator + 1);\\n    // Divide denominator by power of two\\n    assembly {\\n      denominator := div(denominator, twos)\\n    }\\n\\n    // Divide [prod1 prod0] by the factors of two\\n    assembly {\\n      prod0 := div(prod0, twos)\\n    }\\n    // Shift in bits from prod1 into prod0. For this we need\\n    // to flip `twos` such that it is 2**256 / twos.\\n    // If twos is zero, then it becomes one\\n    assembly {\\n      twos := add(div(sub(0, twos), twos), 1)\\n    }\\n    unchecked {\\n      prod0 |= prod1 * twos;\\n\\n      // Invert denominator mod 2**256\\n      // Now that denominator is an odd number, it has an inverse\\n      // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n      // Compute the inverse by starting with a seed that is correct\\n      // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n      uint256 inv = (3 * denominator) ^ 2;\\n\\n      // Now use Newton-Raphson iteration to improve the precision.\\n      // Thanks to Hensel's lifting lemma, this also works in modular\\n      // arithmetic, doubling the correct bits in each step.\\n      inv *= 2 - denominator * inv; // inverse mod 2**8\\n      inv *= 2 - denominator * inv; // inverse mod 2**16\\n      inv *= 2 - denominator * inv; // inverse mod 2**32\\n      inv *= 2 - denominator * inv; // inverse mod 2**64\\n      inv *= 2 - denominator * inv; // inverse mod 2**128\\n      inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n      // Because the division is now exact we can divide by multiplying\\n      // with the modular inverse of denominator. This will give us the\\n      // correct result modulo 2**256. Since the precoditions guarantee\\n      // that the outcome is less than 2**256, this is the final result.\\n      // We don't need to compute the high bits of the result and prod1\\n      // is no longer required.\\n      result = prod0 * inv;\\n    }\\n    return result;\\n  }\\n\\n  /// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n  /// @param a The multiplicand\\n  /// @param b The multiplier\\n  /// @param denominator The divisor\\n  /// @return result The 256-bit result\\n  function mulDivCeiling(\\n    uint256 a,\\n    uint256 b,\\n    uint256 denominator\\n  ) internal pure returns (uint256 result) {\\n    result = mulDivFloor(a, b, denominator);\\n    if (mulmod(a, b, denominator) > 0) {\\n      result++;\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/QtyDeltaMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {MathConstants as C} from './MathConstants.sol';\\nimport {TickMath} from './TickMath.sol';\\nimport {FullMath} from './FullMath.sol';\\nimport {SafeCast} from './SafeCast.sol';\\n\\n/// @title Contains helper functions for calculating\\n/// token0 and token1 quantites from differences in prices\\n/// or from burning reinvestment tokens\\nlibrary QtyDeltaMath {\\n  using SafeCast for uint256;\\n  using SafeCast for int128;\\n\\n  function calcUnlockQtys(uint160 initialSqrtP)\\n    internal\\n    pure\\n    returns (uint256 qty0, uint256 qty1)\\n  {\\n    qty0 = FullMath.mulDivCeiling(C.MIN_LIQUIDITY, C.TWO_POW_96, initialSqrtP);\\n    qty1 = FullMath.mulDivCeiling(C.MIN_LIQUIDITY, initialSqrtP, C.TWO_POW_96);\\n  }\\n\\n  /// @notice Gets the qty0 delta between two prices\\n  /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper),\\n  /// i.e. liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n  /// rounds up if adding liquidity, rounds down if removing liquidity\\n  /// @param lowerSqrtP The lower sqrt price.\\n  /// @param upperSqrtP The upper sqrt price. Should be >= lowerSqrtP\\n  /// @param liquidity Liquidity quantity\\n  /// @param isAddLiquidity true = add liquidity, false = remove liquidity\\n  /// @return token0 qty required for position with liquidity between the 2 sqrt prices\\n  function calcRequiredQty0(\\n    uint160 lowerSqrtP,\\n    uint160 upperSqrtP,\\n    uint128 liquidity,\\n    bool isAddLiquidity\\n  ) internal pure returns (int256) {\\n    uint256 numerator1 = uint256(liquidity) << C.RES_96;\\n    uint256 numerator2;\\n    unchecked {\\n      numerator2 = upperSqrtP - lowerSqrtP;\\n    }\\n    return\\n      isAddLiquidity\\n        ? (divCeiling(FullMath.mulDivCeiling(numerator1, numerator2, upperSqrtP), lowerSqrtP))\\n          .toInt256()\\n        : (FullMath.mulDivFloor(numerator1, numerator2, upperSqrtP) / lowerSqrtP).revToInt256();\\n  }\\n\\n  /// @notice Gets the token1 delta quantity between two prices\\n  /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\n  /// rounds up if adding liquidity, rounds down if removing liquidity\\n  /// @param lowerSqrtP The lower sqrt price.\\n  /// @param upperSqrtP The upper sqrt price. Should be >= lowerSqrtP\\n  /// @param liquidity Liquidity quantity\\n  /// @param isAddLiquidity true = add liquidity, false = remove liquidity\\n  /// @return token1 qty required for position with liquidity between the 2 sqrt prices\\n  function calcRequiredQty1(\\n    uint160 lowerSqrtP,\\n    uint160 upperSqrtP,\\n    uint128 liquidity,\\n    bool isAddLiquidity\\n  ) internal pure returns (int256) {\\n    unchecked {\\n      return\\n        isAddLiquidity\\n          ? (FullMath.mulDivCeiling(liquidity, upperSqrtP - lowerSqrtP, C.TWO_POW_96)).toInt256()\\n          : (FullMath.mulDivFloor(liquidity, upperSqrtP - lowerSqrtP, C.TWO_POW_96)).revToInt256();\\n    }\\n  }\\n\\n  /// @notice Calculates the token0 quantity proportion to be sent to the user\\n  /// for burning reinvestment tokens\\n  /// @param sqrtP Current pool sqrt price\\n  /// @param liquidity Difference in reinvestment liquidity due to reinvestment token burn\\n  /// @return token0 quantity to be sent to the user\\n  function getQty0FromBurnRTokens(uint160 sqrtP, uint256 liquidity)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return FullMath.mulDivFloor(liquidity, C.TWO_POW_96, sqrtP);\\n  }\\n\\n  /// @notice Calculates the token1 quantity proportion to be sent to the user\\n  /// for burning reinvestment tokens\\n  /// @param sqrtP Current pool sqrt price\\n  /// @param liquidity Difference in reinvestment liquidity due to reinvestment token burn\\n  /// @return token1 quantity to be sent to the user\\n  function getQty1FromBurnRTokens(uint160 sqrtP, uint256 liquidity)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return FullMath.mulDivFloor(liquidity, sqrtP, C.TWO_POW_96);\\n  }\\n\\n  /// @notice Returns ceil(x / y)\\n  /// @dev division by 0 has unspecified behavior, and must be checked externally\\n  /// @param x The dividend\\n  /// @param y The divisor\\n  /// @return z The quotient, ceil(x / y)\\n  function divCeiling(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    // return x / y + ((x % y == 0) ? 0 : 1);\\n    require(y > 0);\\n    assembly {\\n      z := add(div(x, y), gt(mod(x, y), 0))\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\nimport {IPoolActions} from './pool/IPoolActions.sol';\\nimport {IPoolEvents} from './pool/IPoolEvents.sol';\\nimport {IPoolStorage} from './pool/IPoolStorage.sol';\\n\\ninterface IPool is IPoolActions, IPoolEvents, IPoolStorage {}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\n/// @title KyberSwap v2 factory\\n/// @notice Deploys KyberSwap v2 pools and manages control over government fees\\ninterface IFactory {\\n  /// @notice Emitted when a pool is created\\n  /// @param token0 First pool token by address sort order\\n  /// @param token1 Second pool token by address sort order\\n  /// @param swapFeeUnits Fee to be collected upon every swap in the pool, in fee units\\n  /// @param tickDistance Minimum number of ticks between initialized ticks\\n  /// @param pool The address of the created pool\\n  event PoolCreated(\\n    address indexed token0,\\n    address indexed token1,\\n    uint24 indexed swapFeeUnits,\\n    int24 tickDistance,\\n    address pool\\n  );\\n\\n  /// @notice Emitted when a new fee is enabled for pool creation via the factory\\n  /// @param swapFeeUnits Fee to be collected upon every swap in the pool, in fee units\\n  /// @param tickDistance Minimum number of ticks between initialized ticks for pools created with the given fee\\n  event SwapFeeEnabled(uint24 indexed swapFeeUnits, int24 indexed tickDistance);\\n\\n  /// @notice Emitted when vesting period changes\\n  /// @param vestingPeriod The maximum time duration for which LP fees\\n  /// are proportionally burnt upon LP removals\\n  event VestingPeriodUpdated(uint32 vestingPeriod);\\n\\n  /// @notice Emitted when configMaster changes\\n  /// @param oldConfigMaster configMaster before the update\\n  /// @param newConfigMaster configMaster after the update\\n  event ConfigMasterUpdated(address oldConfigMaster, address newConfigMaster);\\n\\n  /// @notice Emitted when fee configuration changes\\n  /// @param feeTo Recipient of government fees\\n  /// @param governmentFeeUnits Fee amount, in fee units,\\n  /// to be collected out of the fee charged for a pool swap\\n  event FeeConfigurationUpdated(address feeTo, uint24 governmentFeeUnits);\\n\\n  /// @notice Emitted when whitelist feature is enabled\\n  event WhitelistEnabled();\\n\\n  /// @notice Emitted when whitelist feature is disabled\\n  event WhitelistDisabled();\\n\\n  /// @notice Returns the maximum time duration for which LP fees\\n  /// are proportionally burnt upon LP removals\\n  function vestingPeriod() external view returns (uint32);\\n\\n  /// @notice Returns the tick distance for a specified fee.\\n  /// @dev Once added, cannot be updated or removed.\\n  /// @param swapFeeUnits Swap fee, in fee units.\\n  /// @return The tick distance. Returns 0 if fee has not been added.\\n  function feeAmountTickDistance(uint24 swapFeeUnits) external view returns (int24);\\n\\n  /// @notice Returns the address which can update the fee configuration\\n  function configMaster() external view returns (address);\\n\\n  /// @notice Returns the keccak256 hash of the Pool creation code\\n  /// This is used for pre-computation of pool addresses\\n  function poolInitHash() external view returns (bytes32);\\n\\n  /// @notice Fetches the recipient of government fees\\n  /// and current government fee charged in fee units\\n  function feeConfiguration() external view returns (address _feeTo, uint24 _governmentFeeUnits);\\n\\n  /// @notice Returns the status of whitelisting feature of NFT managers\\n  /// If true, anyone can mint liquidity tokens\\n  /// Otherwise, only whitelisted NFT manager(s) are allowed to mint liquidity tokens\\n  function whitelistDisabled() external view returns (bool);\\n\\n  //// @notice Returns all whitelisted NFT managers\\n  /// If the whitelisting feature is turned on,\\n  /// only whitelisted NFT manager(s) are allowed to mint liquidity tokens\\n  function getWhitelistedNFTManagers() external view returns (address[] memory);\\n\\n  /// @notice Checks if sender is a whitelisted NFT manager\\n  /// If the whitelisting feature is turned on,\\n  /// only whitelisted NFT manager(s) are allowed to mint liquidity tokens\\n  /// @param sender address to be checked\\n  /// @return true if sender is a whistelisted NFT manager, false otherwise\\n  function isWhitelistedNFTManager(address sender) external view returns (bool);\\n\\n  /// @notice Returns the pool address for a given pair of tokens and a swap fee\\n  /// @dev Token order does not matter\\n  /// @param tokenA Contract address of either token0 or token1\\n  /// @param tokenB Contract address of the other token\\n  /// @param swapFeeUnits Fee to be collected upon every swap in the pool, in fee units\\n  /// @return pool The pool address. Returns null address if it does not exist\\n  function getPool(\\n    address tokenA,\\n    address tokenB,\\n    uint24 swapFeeUnits\\n  ) external view returns (address pool);\\n\\n  /// @notice Fetch parameters to be used for pool creation\\n  /// @dev Called by the pool constructor to fetch the parameters of the pool\\n  /// @return factory The factory address\\n  /// @return token0 First pool token by address sort order\\n  /// @return token1 Second pool token by address sort order\\n  /// @return swapFeeUnits Fee to be collected upon every swap in the pool, in fee units\\n  /// @return tickDistance Minimum number of ticks between initialized ticks\\n  function parameters()\\n    external\\n    view\\n    returns (\\n      address factory,\\n      address token0,\\n      address token1,\\n      uint24 swapFeeUnits,\\n      int24 tickDistance\\n    );\\n\\n  /// @notice Creates a pool for the given two tokens and fee\\n  /// @param tokenA One of the two tokens in the desired pool\\n  /// @param tokenB The other of the two tokens in the desired pool\\n  /// @param swapFeeUnits Desired swap fee for the pool, in fee units\\n  /// @dev Token order does not matter. tickDistance is determined from the fee.\\n  /// Call will revert under any of these conditions:\\n  ///     1) pool already exists\\n  ///     2) invalid swap fee\\n  ///     3) invalid token arguments\\n  /// @return pool The address of the newly created pool\\n  function createPool(\\n    address tokenA,\\n    address tokenB,\\n    uint24 swapFeeUnits\\n  ) external returns (address pool);\\n\\n  /// @notice Enables a fee amount with the given tickDistance\\n  /// @dev Fee amounts may never be removed once enabled\\n  /// @param swapFeeUnits The fee amount to enable, in fee units\\n  /// @param tickDistance The distance between ticks to be enforced for all pools created with the given fee amount\\n  function enableSwapFee(uint24 swapFeeUnits, int24 tickDistance) external;\\n\\n  /// @notice Updates the address which can update the fee configuration\\n  /// @dev Must be called by the current configMaster\\n  function updateConfigMaster(address) external;\\n\\n  /// @notice Updates the vesting period\\n  /// @dev Must be called by the current configMaster\\n  function updateVestingPeriod(uint32) external;\\n\\n  /// @notice Updates the address receiving government fees and fee quantity\\n  /// @dev Only configMaster is able to perform the update\\n  /// @param feeTo Address to receive government fees collected from pools\\n  /// @param governmentFeeUnits Fee amount, in fee units,\\n  /// to be collected out of the fee charged for a pool swap\\n  function updateFeeConfiguration(address feeTo, uint24 governmentFeeUnits) external;\\n\\n  /// @notice Enables the whitelisting feature\\n  /// @dev Only configMaster is able to perform the update\\n  function enableWhitelist() external;\\n\\n  /// @notice Disables the whitelisting feature\\n  /// @dev Only configMaster is able to perform the update\\n  function disableWhitelist() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/periphery/IBasePositionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\nimport {IERC721Metadata} from '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport {IRouterTokenHelper} from './IRouterTokenHelper.sol';\\nimport {IBasePositionManagerEvents} from './base_position_manager/IBasePositionManagerEvents.sol';\\nimport {IERC721Permit} from './IERC721Permit.sol';\\n\\ninterface IBasePositionManager is IRouterTokenHelper, IBasePositionManagerEvents {\\n  struct Position {\\n    // the nonce for permits\\n    uint96 nonce;\\n    // the address that is approved for spending this token\\n    address operator;\\n    // the ID of the pool with which this token is connected\\n    uint80 poolId;\\n    // the tick range of the position\\n    int24 tickLower;\\n    int24 tickUpper;\\n    // the liquidity of the position\\n    uint128 liquidity;\\n    // the current rToken that the position owed\\n    uint256 rTokenOwed;\\n    // fee growth per unit of liquidity as of the last update to liquidity\\n    uint256 feeGrowthInsideLast;\\n  }\\n\\n  struct PoolInfo {\\n    address token0;\\n    uint24 fee;\\n    address token1;\\n  }\\n\\n  /// @notice Params for the first time adding liquidity, mint new nft to sender\\n  /// @param token0 the token0 of the pool\\n  /// @param token1 the token1 of the pool\\n  ///   - must make sure that token0 < token1\\n  /// @param fee the pool's fee in bps\\n  /// @param tickLower the position's lower tick\\n  /// @param tickUpper the position's upper tick\\n  ///   - must make sure tickLower < tickUpper, and both are in tick distance\\n  /// @param ticksPrevious the nearest tick that has been initialized and lower than or equal to\\n  ///   the tickLower and tickUpper, use to help insert the tickLower and tickUpper if haven't initialized\\n  /// @param amount0Desired the desired amount for token0\\n  /// @param amount1Desired the desired amount for token1\\n  /// @param amount0Min min amount of token 0 to add\\n  /// @param amount1Min min amount of token 1 to add\\n  /// @param recipient the owner of the position\\n  /// @param deadline time that the transaction will be expired\\n  struct MintParams {\\n    address token0;\\n    address token1;\\n    uint24 fee;\\n    int24 tickLower;\\n    int24 tickUpper;\\n    int24[2] ticksPrevious;\\n    uint256 amount0Desired;\\n    uint256 amount1Desired;\\n    uint256 amount0Min;\\n    uint256 amount1Min;\\n    address recipient;\\n    uint256 deadline;\\n  }\\n\\n  /// @notice Params for adding liquidity to the existing position\\n  /// @param tokenId id of the position to increase its liquidity\\n  /// @param amount0Desired the desired amount for token0\\n  /// @param amount1Desired the desired amount for token1\\n  /// @param amount0Min min amount of token 0 to add\\n  /// @param amount1Min min amount of token 1 to add\\n  /// @param deadline time that the transaction will be expired\\n  struct IncreaseLiquidityParams {\\n    uint256 tokenId;\\n    uint256 amount0Desired;\\n    uint256 amount1Desired;\\n    uint256 amount0Min;\\n    uint256 amount1Min;\\n    uint256 deadline;\\n  }\\n\\n  /// @notice Params for remove liquidity from the existing position\\n  /// @param tokenId id of the position to remove its liquidity\\n  /// @param amount0Min min amount of token 0 to receive\\n  /// @param amount1Min min amount of token 1 to receive\\n  /// @param deadline time that the transaction will be expired\\n  struct RemoveLiquidityParams {\\n    uint256 tokenId;\\n    uint128 liquidity;\\n    uint256 amount0Min;\\n    uint256 amount1Min;\\n    uint256 deadline;\\n  }\\n\\n  /// @notice Burn the rTokens to get back token0 + token1 as fees\\n  /// @param tokenId id of the position to burn r token\\n  /// @param amount0Min min amount of token 0 to receive\\n  /// @param amount1Min min amount of token 1 to receive\\n  /// @param deadline time that the transaction will be expired\\n  struct BurnRTokenParams {\\n    uint256 tokenId;\\n    uint256 amount0Min;\\n    uint256 amount1Min;\\n    uint256 deadline;\\n  }\\n\\n  /// @notice Creates a new pool if it does not exist, then unlocks if it has not been unlocked\\n  /// @param token0 the token0 of the pool\\n  /// @param token1 the token1 of the pool\\n  /// @param fee the fee for the pool\\n  /// @param currentSqrtP the initial price of the pool\\n  /// @return pool returns the pool address\\n  function createAndUnlockPoolIfNecessary(\\n    address token0,\\n    address token1,\\n    uint24 fee,\\n    uint160 currentSqrtP\\n  ) external payable returns (address pool);\\n\\n  function mint(MintParams calldata params)\\n    external\\n    payable\\n    returns (\\n      uint256 tokenId,\\n      uint128 liquidity,\\n      uint256 amount0,\\n      uint256 amount1\\n    );\\n\\n  function addLiquidity(IncreaseLiquidityParams calldata params)\\n    external\\n    payable\\n    returns (\\n      uint128 liquidity,\\n      uint256 amount0,\\n      uint256 amount1,\\n      uint256 additionalRTokenOwed\\n    );\\n\\n  function removeLiquidity(RemoveLiquidityParams calldata params)\\n    external\\n    returns (\\n      uint256 amount0,\\n      uint256 amount1,\\n      uint256 additionalRTokenOwed\\n    );\\n\\n  function burnRTokens(BurnRTokenParams calldata params)\\n    external\\n    returns (\\n      uint256 rTokenQty,\\n      uint256 amount0,\\n      uint256 amount1\\n    );\\n\\n  /**\\n   * @dev Burn the token by its owner\\n   * @notice All liquidity should be removed before burning\\n   */\\n  function burn(uint256 tokenId) external payable;\\n\\n  function positions(uint256 tokenId)\\n    external\\n    view\\n    returns (Position memory pos, PoolInfo memory info);\\n\\n  function addressToPoolId(address pool) external view returns (uint80);\\n\\n  function isRToken(address token) external view returns (bool);\\n\\n  function nextPoolId() external view returns (uint80);\\n\\n  function nextTokenId() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/periphery/INonfungibleTokenPositionDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\nimport './IBasePositionManager.sol';\\n\\n/// @title Describes position NFT tokens via URI\\ninterface INonfungibleTokenPositionDescriptor {\\n  /// @notice Produces the URI describing a particular token ID for a position manager\\n  /// @dev Note this URI may be a data: URI with the JSON contents directly inlined\\n  /// @param positionManager The position manager for which to describe the token\\n  /// @param tokenId The ID of the token for which to produce a description, which may not be valid\\n  /// @return The URI of the ERC721-compliant metadata\\n  function tokenURI(IBasePositionManager positionManager, uint256 tokenId)\\n    external\\n    view\\n    returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/periphery/IRouterTokenHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\ninterface IRouterTokenHelper {\\n  /// @notice Unwraps the contract's WETH balance and sends it to recipient as ETH.\\n  /// @dev The minAmount parameter prevents malicious contracts from stealing WETH from users.\\n  /// @param minAmount The minimum amount of WETH to unwrap\\n  /// @param recipient The address receiving ETH\\n  function unwrapWeth(uint256 minAmount, address recipient) external payable;\\n\\n  /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n  /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n  /// that use ether for the input amount\\n  function refundEth() external payable;\\n\\n  /// @notice Transfers the full amount of a token held by this contract to recipient\\n  /// @dev The minAmount parameter prevents malicious contracts from stealing the token from users\\n  /// @param token The contract address of the token which will be transferred to `recipient`\\n  /// @param minAmount The minimum amount of token required for a transfer\\n  /// @param recipient The destination address of the token\\n  function transferAllTokens(\\n    address token,\\n    uint256 minAmount,\\n    address recipient\\n  ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/base/LiquidityHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.9;\\npragma abicoder v2;\\n\\nimport {LiquidityMath} from '../libraries/LiquidityMath.sol';\\nimport {PoolAddress} from '../libraries/PoolAddress.sol';\\nimport {TickMath} from '../../libraries/TickMath.sol';\\n\\nimport {IPool} from '../../interfaces/IPool.sol';\\nimport {IFactory} from '../../interfaces/IFactory.sol';\\nimport {IMintCallback} from '../../interfaces/callback/IMintCallback.sol';\\n\\nimport {RouterTokenHelper} from './RouterTokenHelper.sol';\\n\\nabstract contract LiquidityHelper is IMintCallback, RouterTokenHelper {\\n  constructor(address _factory, address _WETH) RouterTokenHelper(_factory, _WETH) {}\\n\\n  struct AddLiquidityParams {\\n    address token0;\\n    address token1;\\n    uint24 fee;\\n    address recipient;\\n    int24 tickLower;\\n    int24 tickUpper;\\n    int24[2] ticksPrevious;\\n    uint256 amount0Desired;\\n    uint256 amount1Desired;\\n    uint256 amount0Min;\\n    uint256 amount1Min;\\n  }\\n\\n  struct CallbackData {\\n    address token0;\\n    address token1;\\n    uint24 fee;\\n    address source;\\n  }\\n\\n  function mintCallback(\\n    uint256 deltaQty0,\\n    uint256 deltaQty1,\\n    bytes calldata data\\n  ) external override {\\n    CallbackData memory callbackData = abi.decode(data, (CallbackData));\\n    require(callbackData.token0 < callbackData.token1, 'LiquidityHelper: wrong token order');\\n    address pool = address(_getPool(callbackData.token0, callbackData.token1, callbackData.fee));\\n    require(msg.sender == pool, 'LiquidityHelper: invalid callback sender');\\n    if (deltaQty0 > 0)\\n      _transferTokens(callbackData.token0, callbackData.source, msg.sender, deltaQty0);\\n    if (deltaQty1 > 0)\\n      _transferTokens(callbackData.token1, callbackData.source, msg.sender, deltaQty1);\\n  }\\n\\n  /// @dev Add liquidity to a pool given params\\n  /// @param params add liquidity params, token0, token1 should be in the correct order\\n  /// @return liquidity amount of liquidity has been minted\\n  /// @return amount0 amount of token0 that is needed\\n  /// @return amount1 amount of token1 that is needed\\n  /// @return feeGrowthInsideLast position manager's updated feeGrowthInsideLast value\\n  /// @return pool address of the pool\\n  function _addLiquidity(AddLiquidityParams memory params)\\n    internal\\n    returns (\\n      uint128 liquidity,\\n      uint256 amount0,\\n      uint256 amount1,\\n      uint256 feeGrowthInsideLast,\\n      IPool pool\\n    )\\n  {\\n    require(params.token0 < params.token1, 'LiquidityHelper: invalid token order');\\n    pool = _getPool(params.token0, params.token1, params.fee);\\n\\n    // compute the liquidity amount\\n    {\\n      (uint160 currentSqrtP, , , ) = pool.getPoolState();\\n      uint160 lowerSqrtP = TickMath.getSqrtRatioAtTick(params.tickLower);\\n      uint160 upperSqrtP = TickMath.getSqrtRatioAtTick(params.tickUpper);\\n\\n      liquidity = LiquidityMath.getLiquidityFromQties(\\n        currentSqrtP,\\n        lowerSqrtP,\\n        upperSqrtP,\\n        params.amount0Desired,\\n        params.amount1Desired\\n      );\\n    }\\n\\n    (amount0, amount1, feeGrowthInsideLast) = pool.mint(\\n      params.recipient,\\n      params.tickLower,\\n      params.tickUpper,\\n      params.ticksPrevious,\\n      liquidity,\\n      _callbackData(params.token0, params.token1, params.fee)\\n    );\\n\\n    require(\\n      amount0 >= params.amount0Min && amount1 >= params.amount1Min,\\n      'LiquidityHelper: price slippage check'\\n    );\\n  }\\n\\n  function _callbackData(\\n    address token0,\\n    address token1,\\n    uint24 fee\\n  ) internal view returns (bytes memory) {\\n    return\\n      abi.encode(CallbackData({token0: token0, token1: token1, fee: fee, source: msg.sender}));\\n  }\\n\\n  /**\\n   * @dev Returns the pool address for the requested token pair swap fee\\n   * Because the function calculates it instead of fetching the address from the factory,\\n   * the returned pool address may not be in existence yet\\n   */\\n  function _getPool(\\n    address tokenA,\\n    address tokenB,\\n    uint24 fee\\n  ) internal view returns (IPool) {\\n    return IPool(PoolAddress.computeAddress(factory, tokenA, tokenB, fee, poolInitHash));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/base/RouterTokenHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.9;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport {TokenHelper} from '../libraries/TokenHelper.sol';\\n\\nimport {IRouterTokenHelper} from '../../interfaces/periphery/IRouterTokenHelper.sol';\\nimport {IWETH} from '../../interfaces/IWETH.sol';\\n\\nimport {ImmutablePeripheryStorage} from './ImmutablePeripheryStorage.sol';\\n\\nabstract contract RouterTokenHelper is IRouterTokenHelper, ImmutablePeripheryStorage {\\n  constructor(address _factory, address _WETH) ImmutablePeripheryStorage(_factory, _WETH) {}\\n\\n  receive() external payable {\\n    require(msg.sender == WETH, 'Not WETH');\\n  }\\n\\n  /// @dev Unwrap all ETH balance and send to the recipient\\n  function unwrapWeth(uint256 minAmount, address recipient) external payable override {\\n    uint256 balanceWETH = IWETH(WETH).balanceOf(address(this));\\n    require(balanceWETH >= minAmount, 'Insufficient WETH');\\n\\n    if (balanceWETH > 0) {\\n      IWETH(WETH).withdraw(balanceWETH);\\n      TokenHelper.transferEth(recipient, balanceWETH);\\n    }\\n  }\\n\\n  /// @dev Transfer all tokens from the contract to the recipient\\n  function transferAllTokens(\\n    address token,\\n    uint256 minAmount,\\n    address recipient\\n  ) public payable virtual override {\\n    uint256 balanceToken = IERC20(token).balanceOf(address(this));\\n    require(balanceToken >= minAmount, 'Insufficient token');\\n\\n    if (balanceToken > 0) {\\n      TokenHelper.transferToken(IERC20(token), balanceToken, address(this), recipient);\\n    }\\n  }\\n\\n  /// @dev Send all ETH balance of this contract to the sender\\n  function refundEth() external payable override {\\n    if (address(this).balance > 0) TokenHelper.transferEth(msg.sender, address(this).balance);\\n  }\\n\\n  /// @dev Transfer tokenAmount amount of token from the sender to the recipient\\n  function _transferTokens(\\n    address token,\\n    address sender,\\n    address recipient,\\n    uint256 tokenAmount\\n  ) internal {\\n    if (token == WETH && address(this).balance >= tokenAmount) {\\n      IWETH(WETH).deposit{value: tokenAmount}();\\n      IWETH(WETH).transfer(recipient, tokenAmount);\\n    } else {\\n      TokenHelper.transferToken(IERC20(token), tokenAmount, sender, recipient);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/base/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.9;\\npragma abicoder v2;\\n\\nimport {IMulticall} from '../../interfaces/periphery/IMulticall.sol';\\n\\n/// @title Multicall\\n/// @notice Enables calling multiple methods in a single call to the contract\\nabstract contract Multicall is IMulticall {\\n  /// @inheritdoc IMulticall\\n  function multicall(bytes[] calldata data)\\n    external\\n    payable\\n    override\\n    returns (bytes[] memory results)\\n  {\\n    results = new bytes[](data.length);\\n    for (uint256 i = 0; i < data.length; i++) {\\n      (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n      if (!success) {\\n        // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n        if (result.length < 68) revert();\\n        assembly {\\n          result := add(result, 0x04)\\n        }\\n        revert(abi.decode(result, (string)));\\n      }\\n      results[i] = result;\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/base/DeadlineValidation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.9;\\n\\n/// @title Validate if the transaction is still valid\\nabstract contract DeadlineValidation {\\n  modifier onlyNotExpired(uint256 deadline) {\\n    require(_blockTimestamp() <= deadline, 'Expired');\\n    _;\\n  }\\n\\n  /// @dev Override this function to test easier with block timestamp\\n  function _blockTimestamp() internal view virtual returns (uint256) {\\n    return block.timestamp;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/base/ERC721Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.9;\\n\\nimport {ERC721} from '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport {ERC721Enumerable} from '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\n\\nimport {IERC721Permit} from '../../interfaces/periphery/IERC721Permit.sol';\\n\\nimport {DeadlineValidation} from './DeadlineValidation.sol';\\n\\n/// @title Interface for verifying contract-based account signatures\\n/// @notice Interface that verifies provided signature for the data\\n/// @dev Interface defined by EIP-1271\\ninterface IERC1271 {\\n  /// @notice Returns whether the provided signature is valid for the provided data\\n  /// @dev MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n  /// MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5).\\n  /// MUST allow external calls.\\n  /// @param hash Hash of the data to be signed\\n  /// @param signature Signature byte array associated with _data\\n  /// @return magicValue The bytes4 magic value 0x1626ba7e\\n  function isValidSignature(bytes32 hash, bytes memory signature)\\n    external\\n    view\\n    returns (bytes4 magicValue);\\n}\\n\\n/// @title ERC721 with permit\\n/// @notice Nonfungible tokens that support an approve via signature, i.e. permit\\nabstract contract ERC721Permit is DeadlineValidation, ERC721Enumerable, IERC721Permit {\\n  /// @dev Value is equal to keccak256(\\\"Permit(address spender,uint256 tokenId,uint256 nonce,uint256 deadline)\\\");\\n  bytes32 public constant override PERMIT_TYPEHASH =\\n    0x49ecf333e5b8c95c40fdafc95c1ad136e8914a8fb55e9dc8bb01eaa83a2df9ad;\\n\\n  /// @dev The hash of the name used in the permit signature verification\\n  bytes32 private immutable nameHash;\\n\\n  /// @dev The hash of the version string used in the permit signature verification\\n  bytes32 private immutable versionHash;\\n\\n  /// @return The domain seperator used in encoding of permit signature\\n  bytes32 public immutable override DOMAIN_SEPARATOR;\\n\\n  /// @notice Computes the nameHash and versionHash\\n  constructor(\\n    string memory name_,\\n    string memory symbol_,\\n    string memory version_\\n  ) ERC721(name_, symbol_) {\\n    bytes32 _nameHash = keccak256(bytes(name_));\\n    bytes32 _versionHash = keccak256(bytes(version_));\\n    nameHash = _nameHash;\\n    versionHash = _versionHash;\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        // keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)')\\n        0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f,\\n        _nameHash,\\n        _versionHash,\\n        _getChainId(),\\n        address(this)\\n      )\\n    );\\n  }\\n\\n  function permit(\\n    address spender,\\n    uint256 tokenId,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external override onlyNotExpired(deadline) {\\n    bytes32 digest = keccak256(\\n      abi.encodePacked(\\n        '\\\\x19\\\\x01',\\n        DOMAIN_SEPARATOR,\\n        keccak256(\\n          abi.encode(PERMIT_TYPEHASH, spender, tokenId, _getAndIncrementNonce(tokenId), deadline)\\n        )\\n      )\\n    );\\n    address owner = ownerOf(tokenId);\\n    require(spender != owner, 'ERC721Permit: approval to current owner');\\n\\n    if (Address.isContract(owner)) {\\n      require(\\n        IERC1271(owner).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e,\\n        'Unauthorized'\\n      );\\n    } else {\\n      address recoveredAddress = ecrecover(digest, v, r, s);\\n      require(recoveredAddress != address(0), 'Invalid signature');\\n      require(recoveredAddress == owner, 'Unauthorized');\\n    }\\n\\n    _approve(spender, tokenId);\\n  }\\n\\n  /// @dev Gets the current nonce for a token ID and then increments it, returning the original value\\n  function _getAndIncrementNonce(uint256 tokenId) internal virtual returns (uint256);\\n\\n  /// @dev Gets the current chain ID\\n  /// @return chainId The current chain ID\\n  function _getChainId() internal view returns (uint256 chainId) {\\n    assembly {\\n      chainId := chainid()\\n    }\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC721Enumerable, IERC721Permit)\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(ERC721Enumerable).interfaceId ||\\n      interfaceId == type(IERC721Permit).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TickMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n  int24 internal constant MIN_TICK = -887272;\\n  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n  int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n  uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n  uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n  /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n  /// @dev Throws if |tick| > max tick\\n  /// @param tick The input tick for the above formula\\n  /// @return sqrtP A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n  /// at the given tick\\n  function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtP) {\\n    unchecked {\\n      uint256 absTick = uint256(tick < 0 ? -int256(tick) : int256(tick));\\n      require(absTick <= uint256(int256(MAX_TICK)), 'T');\\n\\n      // do bitwise comparison, if i-th bit is turned on,\\n      // multiply ratio by hardcoded values of sqrt(1.0001^-(2^i)) * 2^128\\n      // where 0 <= i <= 19\\n      uint256 ratio = (absTick & 0x1 != 0)\\n        ? 0xfffcb933bd6fad37aa2d162d1a594001\\n        : 0x100000000000000000000000000000000;\\n      if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n      if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n      if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n      if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n      if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n      if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n      if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n      if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n      if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n      if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n      if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n      if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n      if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n      if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n      if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n      if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n      if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n      if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n      if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n      // take reciprocal for positive tick values\\n      if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n      // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n      // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n      // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n      sqrtP = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n  }\\n\\n  /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n  /// @dev Throws in case sqrtP < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n  /// ever return.\\n  /// @param sqrtP The sqrt ratio for which to compute the tick as a Q64.96\\n  /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n  function getTickAtSqrtRatio(uint160 sqrtP) internal pure returns (int24 tick) {\\n    // second inequality must be < because the price can never reach the price at the max tick\\n    require(sqrtP >= MIN_SQRT_RATIO && sqrtP < MAX_SQRT_RATIO, 'R');\\n    uint256 ratio = uint256(sqrtP) << 32;\\n\\n    uint256 r = ratio;\\n    uint256 msb = 0;\\n\\n    unchecked {\\n      assembly {\\n        let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n        msb := or(msb, f)\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n        msb := or(msb, f)\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        let f := shl(5, gt(r, 0xFFFFFFFF))\\n        msb := or(msb, f)\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        let f := shl(4, gt(r, 0xFFFF))\\n        msb := or(msb, f)\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        let f := shl(3, gt(r, 0xFF))\\n        msb := or(msb, f)\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        let f := shl(2, gt(r, 0xF))\\n        msb := or(msb, f)\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        let f := shl(1, gt(r, 0x3))\\n        msb := or(msb, f)\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        let f := gt(r, 0x1)\\n        msb := or(msb, f)\\n      }\\n\\n      if (msb >= 128) r = ratio >> (msb - 127);\\n      else r = ratio << (127 - msb);\\n\\n      int256 log_2 = (int256(msb) - 128) << 64;\\n\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(63, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(62, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(61, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(60, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(59, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(58, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(57, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(56, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(55, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(54, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(53, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(52, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(51, f))\\n        r := shr(f, r)\\n      }\\n      assembly {\\n        r := shr(127, mul(r, r))\\n        let f := shr(128, r)\\n        log_2 := or(log_2, shl(50, f))\\n      }\\n\\n      int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n      int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n      int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n      tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtP ? tickHi : tickLow;\\n    }\\n  }\\n\\n  function getMaxNumberTicks(int24 _tickDistance) internal pure returns (uint24 numTicks) {\\n    return uint24(TickMath.MAX_TICK / _tickDistance) * 2;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IPoolActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\ninterface IPoolActions {\\n  /// @notice Sets the initial price for the pool and seeds reinvestment liquidity\\n  /// @dev Assumes the caller has sent the necessary token amounts\\n  /// required for initializing reinvestment liquidity prior to calling this function\\n  /// @param initialSqrtP the initial sqrt price of the pool\\n  /// @param qty0 token0 quantity sent to and locked permanently in the pool\\n  /// @param qty1 token1 quantity sent to and locked permanently in the pool\\n  function unlockPool(uint160 initialSqrtP) external returns (uint256 qty0, uint256 qty1);\\n\\n  /// @notice Adds liquidity for the specified recipient/tickLower/tickUpper position\\n  /// @dev Any token0 or token1 owed for the liquidity provision have to be paid for when\\n  /// the IMintCallback#mintCallback is called to this method's caller\\n  /// The quantity of token0/token1 to be sent depends on\\n  /// tickLower, tickUpper, the amount of liquidity, and the current price of the pool.\\n  /// Also sends reinvestment tokens (fees) to the recipient for any fees collected\\n  /// while the position is in range\\n  /// Reinvestment tokens have to be burnt via #burnRTokens in exchange for token0 and token1\\n  /// @param recipient Address for which the added liquidity is credited to\\n  /// @param tickLower Recipient position's lower tick\\n  /// @param tickUpper Recipient position's upper tick\\n  /// @param ticksPrevious The nearest tick that is initialized and <= the lower & upper ticks\\n  /// @param qty Liquidity quantity to mint\\n  /// @param data Data (if any) to be passed through to the callback\\n  /// @return qty0 token0 quantity sent to the pool in exchange for the minted liquidity\\n  /// @return qty1 token1 quantity sent to the pool in exchange for the minted liquidity\\n  /// @return feeGrowthInside position's updated feeGrowthInside value\\n  function mint(\\n    address recipient,\\n    int24 tickLower,\\n    int24 tickUpper,\\n    int24[2] calldata ticksPrevious,\\n    uint128 qty,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      uint256 qty0,\\n      uint256 qty1,\\n      uint256 feeGrowthInside\\n    );\\n\\n  /// @notice Remove liquidity from the caller\\n  /// Also sends reinvestment tokens (fees) to the caller for any fees collected\\n  /// while the position is in range\\n  /// Reinvestment tokens have to be burnt via #burnRTokens in exchange for token0 and token1\\n  /// @param tickLower Position's lower tick for which to burn liquidity\\n  /// @param tickUpper Position's upper tick for which to burn liquidity\\n  /// @param qty Liquidity quantity to burn\\n  /// @return qty0 token0 quantity sent to the caller\\n  /// @return qty1 token1 quantity sent to the caller\\n  /// @return feeGrowthInside position's updated feeGrowthInside value\\n  function burn(\\n    int24 tickLower,\\n    int24 tickUpper,\\n    uint128 qty\\n  )\\n    external\\n    returns (\\n      uint256 qty0,\\n      uint256 qty1,\\n      uint256 feeGrowthInside\\n    );\\n\\n  /// @notice Burns reinvestment tokens in exchange to receive the fees collected in token0 and token1\\n  /// @param qty Reinvestment token quantity to burn\\n  /// @param isLogicalBurn true if burning rTokens without returning any token0/token1\\n  ///         otherwise should transfer token0/token1 to sender\\n  /// @return qty0 token0 quantity sent to the caller for burnt reinvestment tokens\\n  /// @return qty1 token1 quantity sent to the caller for burnt reinvestment tokens\\n  function burnRTokens(uint256 qty, bool isLogicalBurn)\\n    external\\n    returns (uint256 qty0, uint256 qty1);\\n\\n  /// @notice Swap token0 -> token1, or vice versa\\n  /// @dev This method's caller receives a callback in the form of ISwapCallback#swapCallback\\n  /// @dev swaps will execute up to limitSqrtP or swapQty is fully used\\n  /// @param recipient The address to receive the swap output\\n  /// @param swapQty The swap quantity, which implicitly configures the swap as exact input (>0), or exact output (<0)\\n  /// @param isToken0 Whether the swapQty is specified in token0 (true) or token1 (false)\\n  /// @param limitSqrtP the limit of sqrt price after swapping\\n  /// could be MAX_SQRT_RATIO-1 when swapping 1 -> 0 and MIN_SQRT_RATIO+1 when swapping 0 -> 1 for no limit swap\\n  /// @param data Any data to be passed through to the callback\\n  /// @return qty0 Exact token0 qty sent to recipient if < 0. Minimally received quantity if > 0.\\n  /// @return qty1 Exact token1 qty sent to recipient if < 0. Minimally received quantity if > 0.\\n  function swap(\\n    address recipient,\\n    int256 swapQty,\\n    bool isToken0,\\n    uint160 limitSqrtP,\\n    bytes calldata data\\n  ) external returns (int256 qty0, int256 qty1);\\n\\n  /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n  /// @dev The caller of this method receives a callback in the form of IFlashCallback#flashCallback\\n  /// @dev Fees collected are sent to the feeTo address if it is set in Factory\\n  /// @param recipient The address which will receive the token0 and token1 quantities\\n  /// @param qty0 token0 quantity to be loaned to the recipient\\n  /// @param qty1 token1 quantity to be loaned to the recipient\\n  /// @param data Any data to be passed through to the callback\\n  function flash(\\n    address recipient,\\n    uint256 qty0,\\n    uint256 qty1,\\n    bytes calldata data\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IPoolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\ninterface IPoolEvents {\\n  /// @notice Emitted only once per pool when #initialize is first called\\n  /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n  /// @param sqrtP The initial price of the pool\\n  /// @param tick The initial tick of the pool\\n  event Initialize(uint160 sqrtP, int24 tick);\\n\\n  /// @notice Emitted when liquidity is minted for a given position\\n  /// @dev transfers reinvestment tokens for any collected fees earned by the position\\n  /// @param sender address that minted the liquidity\\n  /// @param owner address of owner of the position\\n  /// @param tickLower position's lower tick\\n  /// @param tickUpper position's upper tick\\n  /// @param qty liquidity minted to the position range\\n  /// @param qty0 token0 quantity needed to mint the liquidity\\n  /// @param qty1 token1 quantity needed to mint the liquidity\\n  event Mint(\\n    address sender,\\n    address indexed owner,\\n    int24 indexed tickLower,\\n    int24 indexed tickUpper,\\n    uint128 qty,\\n    uint256 qty0,\\n    uint256 qty1\\n  );\\n\\n  /// @notice Emitted when a position's liquidity is removed\\n  /// @dev transfers reinvestment tokens for any collected fees earned by the position\\n  /// @param owner address of owner of the position\\n  /// @param tickLower position's lower tick\\n  /// @param tickUpper position's upper tick\\n  /// @param qty liquidity removed\\n  /// @param qty0 token0 quantity withdrawn from removal of liquidity\\n  /// @param qty1 token1 quantity withdrawn from removal of liquidity\\n  event Burn(\\n    address indexed owner,\\n    int24 indexed tickLower,\\n    int24 indexed tickUpper,\\n    uint128 qty,\\n    uint256 qty0,\\n    uint256 qty1\\n  );\\n\\n  /// @notice Emitted when reinvestment tokens are burnt\\n  /// @param owner address which burnt the reinvestment tokens\\n  /// @param qty reinvestment token quantity burnt\\n  /// @param qty0 token0 quantity sent to owner for burning reinvestment tokens\\n  /// @param qty1 token1 quantity sent to owner for burning reinvestment tokens\\n  event BurnRTokens(address indexed owner, uint256 qty, uint256 qty0, uint256 qty1);\\n\\n  /// @notice Emitted for swaps by the pool between token0 and token1\\n  /// @param sender Address that initiated the swap call, and that received the callback\\n  /// @param recipient Address that received the swap output\\n  /// @param deltaQty0 Change in pool's token0 balance\\n  /// @param deltaQty1 Change in pool's token1 balance\\n  /// @param sqrtP Pool's sqrt price after the swap\\n  /// @param liquidity Pool's liquidity after the swap\\n  /// @param currentTick Log base 1.0001 of pool's price after the swap\\n  event Swap(\\n    address indexed sender,\\n    address indexed recipient,\\n    int256 deltaQty0,\\n    int256 deltaQty1,\\n    uint160 sqrtP,\\n    uint128 liquidity,\\n    int24 currentTick\\n  );\\n\\n  /// @notice Emitted by the pool for any flash loans of token0/token1\\n  /// @param sender The address that initiated the flash loan, and that received the callback\\n  /// @param recipient The address that received the flash loan quantities\\n  /// @param qty0 token0 quantity loaned to the recipient\\n  /// @param qty1 token1 quantity loaned to the recipient\\n  /// @param paid0 token0 quantity paid for the flash, which can exceed qty0 + fee\\n  /// @param paid1 token1 quantity paid for the flash, which can exceed qty0 + fee\\n  event Flash(\\n    address indexed sender,\\n    address indexed recipient,\\n    uint256 qty0,\\n    uint256 qty1,\\n    uint256 paid0,\\n    uint256 paid1\\n  );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IPoolStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport {IFactory} from '../IFactory.sol';\\n\\ninterface IPoolStorage {\\n  /// @notice The contract that deployed the pool, which must adhere to the IFactory interface\\n  /// @return The contract address\\n  function factory() external view returns (IFactory);\\n\\n  /// @notice The first of the two tokens of the pool, sorted by address\\n  /// @return The token contract address\\n  function token0() external view returns (IERC20);\\n\\n  /// @notice The second of the two tokens of the pool, sorted by address\\n  /// @return The token contract address\\n  function token1() external view returns (IERC20);\\n\\n  /// @notice The fee to be charged for a swap in basis points\\n  /// @return The swap fee in basis points\\n  function swapFeeUnits() external view returns (uint24);\\n\\n  /// @notice The pool tick distance\\n  /// @dev Ticks can only be initialized and used at multiples of this value\\n  /// It remains an int24 to avoid casting even though it is >= 1.\\n  /// e.g: a tickDistance of 5 means ticks can be initialized every 5th tick, i.e., ..., -10, -5, 0, 5, 10, ...\\n  /// @return The tick distance\\n  function tickDistance() external view returns (int24);\\n\\n  /// @notice Maximum gross liquidity that an initialized tick can have\\n  /// @dev This is to prevent overflow the pool's active base liquidity (uint128)\\n  /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n  /// @return The max amount of liquidity per tick\\n  function maxTickLiquidity() external view returns (uint128);\\n\\n  /// @notice Look up information about a specific tick in the pool\\n  /// @param tick The tick to look up\\n  /// @return liquidityGross total liquidity amount from positions that uses this tick as a lower or upper tick\\n  /// liquidityNet how much liquidity changes when the pool tick crosses above the tick\\n  /// feeGrowthOutside the fee growth on the other side of the tick relative to the current tick\\n  /// secondsPerLiquidityOutside the seconds spent on the other side of the tick relative to the current tick\\n  function ticks(int24 tick)\\n    external\\n    view\\n    returns (\\n      uint128 liquidityGross,\\n      int128 liquidityNet,\\n      uint256 feeGrowthOutside,\\n      uint128 secondsPerLiquidityOutside\\n    );\\n\\n  /// @notice Returns the previous and next initialized ticks of a specific tick\\n  /// @dev If specified tick is uninitialized, the returned values are zero.\\n  /// @param tick The tick to look up\\n  function initializedTicks(int24 tick) external view returns (int24 previous, int24 next);\\n\\n  /// @notice Returns the information about a position by the position's key\\n  /// @return liquidity the liquidity quantity of the position\\n  /// @return feeGrowthInsideLast fee growth inside the tick range as of the last mint / burn action performed\\n  function getPositions(\\n    address owner,\\n    int24 tickLower,\\n    int24 tickUpper\\n  ) external view returns (uint128 liquidity, uint256 feeGrowthInsideLast);\\n\\n  /// @notice Fetches the pool's prices, ticks and lock status\\n  /// @return sqrtP sqrt of current price: sqrt(token1/token0)\\n  /// @return currentTick pool's current tick\\n  /// @return nearestCurrentTick pool's nearest initialized tick that is <= currentTick\\n  /// @return locked true if pool is locked, false otherwise\\n  function getPoolState()\\n    external\\n    view\\n    returns (\\n      uint160 sqrtP,\\n      int24 currentTick,\\n      int24 nearestCurrentTick,\\n      bool locked\\n    );\\n\\n  /// @notice Fetches the pool's liquidity values\\n  /// @return baseL pool's base liquidity without reinvest liqudity\\n  /// @return reinvestL the liquidity is reinvested into the pool\\n  /// @return reinvestLLast last cached value of reinvestL, used for calculating reinvestment token qty\\n  function getLiquidityState()\\n    external\\n    view\\n    returns (\\n      uint128 baseL,\\n      uint128 reinvestL,\\n      uint128 reinvestLLast\\n    );\\n\\n  /// @return feeGrowthGlobal All-time fee growth per unit of liquidity of the pool\\n  function getFeeGrowthGlobal() external view returns (uint256);\\n\\n  /// @return secondsPerLiquidityGlobal All-time seconds per unit of liquidity of the pool\\n  /// @return lastUpdateTime The timestamp in which secondsPerLiquidityGlobal was last updated\\n  function getSecondsPerLiquidityData()\\n    external\\n    view\\n    returns (uint128 secondsPerLiquidityGlobal, uint32 lastUpdateTime);\\n\\n  /// @notice Calculates and returns the active time per unit of liquidity until current block.timestamp\\n  /// @param tickLower The lower tick (of a position)\\n  /// @param tickUpper The upper tick (of a position)\\n  /// @return secondsPerLiquidityInside active time (multiplied by 2^96)\\n  /// between the 2 ticks, per unit of liquidity.\\n  function getSecondsPerLiquidityInside(int24 tickLower, int24 tickUpper)\\n    external\\n    view\\n    returns (uint128 secondsPerLiquidityInside);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/periphery/base_position_manager/IBasePositionManagerEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\ninterface IBasePositionManagerEvents {\\n  /// @notice Emitted when a token is minted for a given position\\n  /// @param tokenId the newly minted tokenId\\n  /// @param poolId poolId of the token\\n  /// @param liquidity liquidity minted to the position range\\n  /// @param amount0 token0 quantity needed to mint the liquidity\\n  /// @param amount1 token1 quantity needed to mint the liquidity\\n  event MintPosition(\\n    uint256 indexed tokenId,\\n    uint80 indexed poolId,\\n    uint128 liquidity,\\n    uint256 amount0,\\n    uint256 amount1\\n  );\\n\\n  /// @notice Emitted when a token is burned\\n  /// @param tokenId id of the token\\n  event BurnPosition(uint256 indexed tokenId);\\n\\n  /// @notice Emitted when add liquidity\\n  /// @param tokenId id of the token\\n  /// @param liquidity the increase amount of liquidity\\n  /// @param amount0 token0 quantity needed to increase liquidity\\n  /// @param amount1 token1 quantity needed to increase liquidity\\n  /// @param additionalRTokenOwed additional rToken earned\\n  event AddLiquidity(\\n    uint256 indexed tokenId,\\n    uint128 liquidity,\\n    uint256 amount0,\\n    uint256 amount1,\\n    uint256 additionalRTokenOwed\\n  );\\n\\n  /// @notice Emitted when remove liquidity\\n  /// @param tokenId id of the token\\n  /// @param liquidity the decease amount of liquidity\\n  /// @param amount0 token0 quantity returned when remove liquidity\\n  /// @param amount1 token1 quantity returned when remove liquidity\\n  /// @param additionalRTokenOwed additional rToken earned\\n  event RemoveLiquidity(\\n    uint256 indexed tokenId,\\n    uint128 liquidity,\\n    uint256 amount0,\\n    uint256 amount1,\\n    uint256 additionalRTokenOwed\\n  );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/periphery/IERC721Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport {IERC721Enumerable} from '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\n\\n/// @title ERC721 with permit\\n/// @notice Extension to ERC721 that includes a permit function for signature based approvals\\ninterface IERC721Permit is IERC721, IERC721Enumerable {\\n  /// @notice The permit typehash used in the permit signature\\n  /// @return The typehash for the permit\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  /// @notice The domain separator used in the permit signature\\n  /// @return The domain seperator used in encoding of permit signature\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /// @notice Approve of a specific token ID for spending by spender via signature\\n  /// @param spender The account that is being approved\\n  /// @param tokenId The ID of the token that is being approved for spending\\n  /// @param deadline The deadline timestamp by which the call must be mined for the approve to work\\n  /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n  /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n  /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n  function permit(\\n    address spender,\\n    uint256 tokenId,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/libraries/LiquidityMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.9;\\n\\nimport {MathConstants as C} from '../../libraries/MathConstants.sol';\\nimport {FullMath} from '../../libraries/FullMath.sol';\\nimport {SafeCast} from '../../libraries/SafeCast.sol';\\n\\nlibrary LiquidityMath {\\n  using SafeCast for uint256;\\n\\n  /// @notice Gets liquidity from qty 0 and the price range\\n  /// qty0 = liquidity * (sqrt(upper) - sqrt(lower)) / (sqrt(upper) * sqrt(lower))\\n  /// => liquidity = qty0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n  /// @param lowerSqrtP A lower sqrt price\\n  /// @param upperSqrtP An upper sqrt price\\n  /// @param qty0 amount of token0\\n  /// @return liquidity amount of returned liquidity to not exceed the qty0\\n  function getLiquidityFromQty0(\\n    uint160 lowerSqrtP,\\n    uint160 upperSqrtP,\\n    uint256 qty0\\n  ) internal pure returns (uint128) {\\n    uint256 liq = FullMath.mulDivFloor(lowerSqrtP, upperSqrtP, C.TWO_POW_96);\\n    unchecked {\\n      return FullMath.mulDivFloor(liq, qty0, upperSqrtP - lowerSqrtP).toUint128();\\n    }\\n  }\\n\\n  /// @notice Gets liquidity from qty 1 and the price range\\n  /// @dev qty1 = liquidity * (sqrt(upper) - sqrt(lower))\\n  ///   thus, liquidity = qty1 / (sqrt(upper) - sqrt(lower))\\n  /// @param lowerSqrtP A lower sqrt price\\n  /// @param upperSqrtP An upper sqrt price\\n  /// @param qty1 amount of token1\\n  /// @return liquidity amount of returned liquidity to not exceed to qty1\\n  function getLiquidityFromQty1(\\n    uint160 lowerSqrtP,\\n    uint160 upperSqrtP,\\n    uint256 qty1\\n  ) internal pure returns (uint128) {\\n    unchecked {\\n      return FullMath.mulDivFloor(qty1, C.TWO_POW_96, upperSqrtP - lowerSqrtP).toUint128();\\n    }\\n  }\\n\\n  /// @notice Gets liquidity given price range and 2 qties of token0 and token1\\n  /// @param currentSqrtP current price\\n  /// @param lowerSqrtP A lower sqrt price\\n  /// @param upperSqrtP An upper sqrt price\\n  /// @param qty0 amount of token0 - at most\\n  /// @param qty1 amount of token1 - at most\\n  /// @return liquidity amount of returned liquidity to not exceed the given qties\\n  function getLiquidityFromQties(\\n    uint160 currentSqrtP,\\n    uint160 lowerSqrtP,\\n    uint160 upperSqrtP,\\n    uint256 qty0,\\n    uint256 qty1\\n  ) internal pure returns (uint128) {\\n    if (currentSqrtP <= lowerSqrtP) {\\n      return getLiquidityFromQty0(lowerSqrtP, upperSqrtP, qty0);\\n    }\\n    if (currentSqrtP >= upperSqrtP) {\\n      return getLiquidityFromQty1(lowerSqrtP, upperSqrtP, qty1);\\n    }\\n    uint128 liq0 = getLiquidityFromQty0(currentSqrtP, upperSqrtP, qty0);\\n    uint128 liq1 = getLiquidityFromQty1(lowerSqrtP, currentSqrtP, qty1);\\n    return liq0 < liq1 ? liq0 : liq1;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/callback/IMintCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.8.0;\\n\\n/// @title Callback for IPool#mint\\n/// @notice Any contract that calls IPool#mint must implement this interface\\ninterface IMintCallback {\\n  /// @notice Called to `msg.sender` after minting liquidity via IPool#mint.\\n  /// @dev This function's implementation must send pool tokens to the pool for the minted LP tokens.\\n  /// The caller of this method must be checked to be a Pool deployed by the canonical Factory.\\n  /// @param deltaQty0 The token0 quantity to be sent to the pool.\\n  /// @param deltaQty1 The token1 quantity to be sent to the pool.\\n  /// @param data Data passed through by the caller via the IPool#mint call\\n  function mintCallback(\\n    uint256 deltaQty0,\\n    uint256 deltaQty1,\\n    bytes calldata data\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/libraries/TokenHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\n/// @title Helper to transfer token or ETH\\nlibrary TokenHelper {\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev Transfer token from the sender to the receiver\\n  /// @notice If the sender is the contract address, should just call transfer token to receiver\\n  ///   otherwise, tansfer tokens from the sender to the receiver\\n  function transferToken(\\n    IERC20 token,\\n    uint256 amount,\\n    address sender,\\n    address receiver\\n  ) internal {\\n    if (sender == address(this)) {\\n      token.safeTransfer(receiver, amount);\\n    } else {\\n      token.safeTransferFrom(sender, receiver, amount);\\n    }\\n  }\\n\\n  /// @dev Transfer ETh to the receiver\\n  function transferEth(address receiver, uint256 amount) internal {\\n    if (receiver == address(this)) return;\\n    (bool success, ) = payable(receiver).call{value: amount}('');\\n    require(success, 'transfer eth failed');\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/// @title Interface for WETH\\ninterface IWETH is IERC20 {\\n  /// @notice Deposit ether to get wrapped ether\\n  function deposit() external payable;\\n\\n  /// @notice Withdraw wrapped ether to get ether\\n  function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/base/ImmutablePeripheryStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.9;\\n\\nimport {IFactory} from '../../interfaces/IFactory.sol';\\n\\n/// @title Immutable state\\n/// @notice Immutable state used by periphery contracts\\nabstract contract ImmutablePeripheryStorage {\\n  address public immutable factory;\\n  address public immutable WETH;\\n  bytes32 internal immutable poolInitHash;\\n\\n  constructor(address _factory, address _WETH) {\\n    factory = _factory;\\n    WETH = _WETH;\\n    poolInitHash = IFactory(_factory).poolInitHash();\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/periphery/IMulticall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.0;\\npragma abicoder v2;\\n\\n/// @title Multicall interface\\n/// @notice Enables calling multiple methods in a single call to the contract\\ninterface IMulticall {\\n  /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n  /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n  /// @param data The encoded function data for each of the calls to make to this contract\\n  /// @return results The results from each of the calls passed in via data\\n  function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_descriptor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"additionalRTokenOwed\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BurnPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint80\",\"name\":\"poolId\",\"type\":\"uint80\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"MintPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"additionalRTokenOwed\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IBasePositionManager.IncreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalRTokenOwed\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToPoolId\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"antiSnipAttackData\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"lastActionTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"lockTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"unlockTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"feesLocked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IBasePositionManager.BurnRTokenParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"burnRTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rTokenQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"currentSqrtP\",\"type\":\"uint160\"}],\"name\":\"createAndUnlockPoolIfNecessary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"int24[2]\",\"name\":\"ticksPrevious\",\"type\":\"int24[2]\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IBasePositionManager.MintParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deltaQty0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaQty1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mintCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPoolId\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"poolId\",\"type\":\"uint80\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"rTokenOwed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInsideLast\",\"type\":\"uint256\"}],\"internalType\":\"struct IBasePositionManager.Position\",\"name\":\"pos\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"internalType\":\"struct IBasePositionManager.PoolInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IBasePositionManager.RemoveLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalRTokenOwed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferAllTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWeth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AntiSnipAttackPositionManager", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "0000000000000000000000005f1dddbf348ac2fbe22a163e30f99f9ece3dd50a000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000008abd8c92f1901cf204590c16b5ef690a35b3741e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0x2b1c7b41f6a8f2b2bc45c3233a5d5fb3cd6dc9a8", "SwarmSource": ""}