{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IOneIndex {\r\n    function tradingFee() external view returns (uint256);\r\n\r\n    function gasRefund() external view returns (uint256);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    struct asset {\r\n        address token;\r\n        uint256 amount;\r\n        uint256 proportion;\r\n    }\r\n\r\n    function getFullIndex() external view returns (asset[] memory);\r\n}\r\n\r\ninterface IPancakeSwapRouter {\r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] memory path\r\n    ) external view returns (uint[] memory);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ncontract TradeOneIndex {\r\n    IOneIndex public oneIndex;\r\n    IPancakeSwapRouter public pancakeswapRouter;\r\n    IERC20 public usdt;\r\n\r\n    address public owner;\r\n    address public oneIndexAddress;\r\n    address public oneIndexTokenAddress =\r\n        0x84FaAbDC2b8cc4e1993b4B6A09Df8dCDB75CBCbC;\r\n\r\n    bool private isLocked = false;\r\n\r\n    uint256 constant APPROVAL_AMOUNT = 100000000 * 10 ** 18;\r\n    address constant USDT_ADDRESS = 0x55d398326f99059fF775485246999027B3197955;\r\n    address constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address constant PANCAKESWAP_ROUTER_ADDRESS =\r\n        0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    struct Position {\r\n        address owner;\r\n        uint256 amount;\r\n        bool isOpen;\r\n    }\r\n\r\n    mapping(uint256 => Position) public positions;\r\n    mapping(uint256 => uint256[]) public assetAmounts;\r\n    uint256 public nextPositionId;\r\n\r\n    event PositionOpened(\r\n        uint256 positionId,\r\n        address owner,\r\n        uint256 amount,\r\n        uint256 tradingFees\r\n    );\r\n\r\n    event PositionClosed(\r\n        uint256 positionId,\r\n        address owner,\r\n        uint256 returnAmount,\r\n        uint256 tradingFees\r\n    );\r\n\r\n    constructor(address _oneIndexAddress) {\r\n        owner = msg.sender;\r\n        oneIndex = IOneIndex(_oneIndexAddress);\r\n        oneIndexAddress = _oneIndexAddress;\r\n        usdt = IERC20(USDT_ADDRESS);\r\n        pancakeswapRouter = IPancakeSwapRouter(PANCAKESWAP_ROUTER_ADDRESS);\r\n        nextPositionId = 1;\r\n        approveAllTokens();\r\n    }\r\n\r\n    modifier _locker() {\r\n        require(isLocked == false, \"Locked\");\r\n        isLocked = true;\r\n        _;\r\n        isLocked = false;\r\n    }\r\n\r\n    modifier _onlyOwner() {\r\n        require(msg.sender == owner, \"Only Owner\");\r\n        _;\r\n    }\r\n\r\n    function setOwner(address payable _newOwner) public _onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function resetOneIndex(address _newIndexAddress) public _onlyOwner {\r\n        oneIndexAddress = _newIndexAddress;\r\n        oneIndex = IOneIndex(_newIndexAddress);\r\n    }\r\n\r\n    function resetOneIndexTokenAddress(\r\n        address _newOneIndexTokenAddress\r\n    ) public _onlyOwner {\r\n        oneIndexTokenAddress = _newOneIndexTokenAddress;\r\n    }\r\n\r\n    function approveAllTokens() public _onlyOwner {\r\n        usdt.approve(PANCAKESWAP_ROUTER_ADDRESS, APPROVAL_AMOUNT);\r\n        IOneIndex.asset[] memory indexComposition = oneIndex.getFullIndex();\r\n        for (uint256 i = 0; i < indexComposition.length; i++) {\r\n            IERC20(indexComposition[i].token).approve(\r\n                PANCAKESWAP_ROUTER_ADDRESS,\r\n                APPROVAL_AMOUNT\r\n            );\r\n        }\r\n    }\r\n\r\n    function openPosition(\r\n        uint256 _grossAmountInUSDT,\r\n        uint256[] calldata _minAmounts\r\n    ) public _locker {\r\n        //Check USDT Balance and Allowance\r\n        require(\r\n            usdt.balanceOf(msg.sender) >= _grossAmountInUSDT,\r\n            \"Insufficient Balance\"\r\n        );\r\n\r\n        require(\r\n            usdt.allowance(msg.sender, address(this)) >= _grossAmountInUSDT,\r\n            \"Insufficient Allowance\"\r\n        );\r\n\r\n        //Move USDT to Contract\r\n        usdt.transferFrom(msg.sender, address(this), _grossAmountInUSDT);\r\n\r\n        //Get list of assets that make up the index\r\n        IOneIndex.asset[] memory indexComposition = oneIndex.getFullIndex();\r\n        assetAmounts[nextPositionId] = new uint256[](indexComposition.length);\r\n\r\n        //Calculate Amounts in USDT after commissions\r\n        uint256 commission = computeCommission(_grossAmountInUSDT);\r\n        uint256 amountInUSDT = getNetAmount(_grossAmountInUSDT, commission);\r\n\r\n        //Swap USDT for assets according to index composition\r\n        for (uint256 i = 0; i < indexComposition.length; i++) {\r\n            assetAmounts[nextPositionId][i] = swapUSDTToAsset(\r\n                (amountInUSDT * (indexComposition[i].proportion / 10 ** 18)) /\r\n                    100,\r\n                indexComposition[i].token,\r\n                address(this),\r\n                _minAmounts[i]\r\n            );\r\n        }\r\n\r\n        //Register Position\r\n        positions[nextPositionId] = Position(\r\n            msg.sender,\r\n            _grossAmountInUSDT,\r\n            true\r\n        );\r\n\r\n        //Burn OneIndex Tokens\r\n        burn1IDX(commission, _minAmounts[_minAmounts.length - 1]);\r\n\r\n        //Emit Event\r\n        emit PositionOpened(\r\n            nextPositionId,\r\n            msg.sender,\r\n            _grossAmountInUSDT,\r\n            commission * 2\r\n        );\r\n\r\n        //Increase Position ID\r\n        nextPositionId++;\r\n    }\r\n\r\n    function closePosition(\r\n        uint256 positionId,\r\n        uint256[] calldata _minAmounts\r\n    ) public _locker {\r\n        require(positions[positionId].owner == msg.sender, \"Not the owner\");\r\n        require(positions[positionId].isOpen, \"Position already closed\");\r\n\r\n        uint256 totalReturnAmount = 0;\r\n        for (uint256 i = 0; i < assetAmounts[positionId].length; i++) {\r\n            IOneIndex.asset memory asset = oneIndex.getFullIndex()[i];\r\n            totalReturnAmount += swapAssetToUSDT(\r\n                assetAmounts[positionId][i],\r\n                asset.token,\r\n                msg.sender,\r\n                _minAmounts[i]\r\n            );\r\n        }\r\n\r\n        //Update Position Status\r\n        positions[positionId].isOpen = false;\r\n\r\n        //Emit Event\r\n        emit PositionClosed(positionId, msg.sender, totalReturnAmount, 0);\r\n    }\r\n\r\n    function swapUSDTToAsset(\r\n        uint256 _amountIn,\r\n        address _assetAddress,\r\n        address _beneficiary,\r\n        uint256 _minAmount\r\n    ) private returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = USDT_ADDRESS;\r\n        path[1] = _assetAddress;\r\n\r\n        uint[] memory amountsOut = pancakeswapRouter.swapExactTokensForTokens(\r\n            _amountIn,\r\n            _minAmount,\r\n            path,\r\n            _beneficiary,\r\n            block.timestamp + 600\r\n        );\r\n        return amountsOut[1];\r\n    }\r\n\r\n    function burn1IDX(\r\n        uint256 _commission,\r\n        uint256 _minIdxAmount\r\n    ) public returns (bool) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = USDT_ADDRESS;\r\n        path[1] = oneIndexTokenAddress;\r\n\r\n        pancakeswapRouter.swapExactTokensForTokens(\r\n            _commission,\r\n            _minIdxAmount,\r\n            path,\r\n            BURN_ADDRESS,\r\n            block.timestamp + 600\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function swapAssetToUSDT(\r\n        uint256 _amountIn,\r\n        address _assetAddress,\r\n        address _beneficiary,\r\n        uint256 _minAmount\r\n    ) private returns (uint256) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = _assetAddress;\r\n        path[1] = USDT_ADDRESS;\r\n\r\n        //IERC20(_assetAddress).approve(PANCAKESWAP_ROUTER_ADDRESS, amounts[0]);\r\n        uint[] memory amountsOut = pancakeswapRouter.swapExactTokensForTokens(\r\n            _amountIn,\r\n            _minAmount,\r\n            path,\r\n            _beneficiary,\r\n            block.timestamp + 600\r\n        );\r\n        return amountsOut[1];\r\n    }\r\n\r\n    function getAssetAmounts(\r\n        uint256 positionId\r\n    ) public view returns (uint256[] memory) {\r\n        return assetAmounts[positionId];\r\n    }\r\n\r\n    function getNetAmount(\r\n        uint256 _amount,\r\n        uint256 _commission\r\n    ) public view returns (uint256) {\r\n        uint256 netAmount = _amount -\r\n            (_commission * 2) -\r\n            (oneIndex.gasRefund() * 10 ** 18);\r\n        return netAmount;\r\n    }\r\n\r\n    function computeCommission(uint256 _amount) public view returns (uint256) {\r\n        uint256 netAmount = _amount - (oneIndex.gasRefund() * 10 ** 18);\r\n        uint256 commission = (netAmount * oneIndex.tradingFee()) / 1000;\r\n        return commission;\r\n    }\r\n\r\n    function computePositionMarketValue(\r\n        uint256 _id\r\n    ) public view returns (uint256) {\r\n        IOneIndex.asset[] memory indexComposition = oneIndex.getFullIndex();\r\n        uint256[] memory localAssetAmounts = getAssetAmounts(_id);\r\n\r\n        uint256 totalValue = 0;\r\n\r\n        for (uint256 i = 0; i < localAssetAmounts.length; i++) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(indexComposition[i].token); // Asset token address\r\n            path[1] = USDT_ADDRESS; // USDT token address\r\n\r\n            uint[] memory amountsOut = pancakeswapRouter.getAmountsOut(\r\n                localAssetAmounts[i],\r\n                path\r\n            );\r\n            totalValue += amountsOut[1]; // Amount in USDT\r\n        }\r\n\r\n        return totalValue;\r\n    }\r\n\r\n    function userWithdrawsUSDT(\r\n        address _beneficiary,\r\n        uint256 _fee,\r\n        uint256 _netAmount\r\n    ) public {\r\n        //Check USDT Balance and Allowance\r\n        uint256 totAmount = _fee + _netAmount;\r\n\r\n        require(\r\n            usdt.balanceOf(msg.sender) >= totAmount,\r\n            \"Insufficient Balance\"\r\n        );\r\n\r\n        require(\r\n            usdt.allowance(msg.sender, address(this)) >= totAmount,\r\n            \"Insufficient Allowance\"\r\n        );\r\n\r\n        //Store msg.sender in local variable to save gas\r\n        address spender = msg.sender;\r\n\r\n        //Transfer USDT to beneficiary\r\n        usdt.transferFrom(spender, _beneficiary, _netAmount);\r\n\r\n        //Pay commission\r\n        address feeBeneficiary = oneIndex.owner();\r\n        usdt.transferFrom(spender, feeBeneficiary, _fee);\r\n    }\r\n\r\n    function adminWithdrawsCommissions(uint256 _amount) public _onlyOwner {\r\n        require(usdt.balanceOf(address(this)) >= _amount, \"Excessive Amount\");\r\n        usdt.transfer(msg.sender, _amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oneIndexAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFees\",\"type\":\"uint256\"}],\"name\":\"PositionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradingFees\",\"type\":\"uint256\"}],\"name\":\"PositionOpened\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"adminWithdrawsCommissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assetAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minIdxAmount\",\"type\":\"uint256\"}],\"name\":\"burn1IDX\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_minAmounts\",\"type\":\"uint256[]\"}],\"name\":\"closePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"computeCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"computePositionMarketValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getAssetAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_commission\",\"type\":\"uint256\"}],\"name\":\"getNetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPositionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneIndex\",\"outputs\":[{\"internalType\":\"contract IOneIndex\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneIndexAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneIndexTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_grossAmountInUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_minAmounts\",\"type\":\"uint256[]\"}],\"name\":\"openPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newIndexAddress\",\"type\":\"address\"}],\"name\":\"resetOneIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOneIndexTokenAddress\",\"type\":\"address\"}],\"name\":\"resetOneIndexTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_netAmount\",\"type\":\"uint256\"}],\"name\":\"userWithdrawsUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TradeOneIndex", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e3c57b572b94fa3d8beb6986f427361a2addf620", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0515fa56eda4a1e6aa9afe9a810cd3ff23aa0c417e4029a9ba215a98a80ed4d3"}