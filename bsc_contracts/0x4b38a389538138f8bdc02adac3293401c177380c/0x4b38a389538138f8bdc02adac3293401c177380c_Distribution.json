{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/Distribution.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract Distribution is Ownable {\\r\\n\\r\\n    IERC20 public decaToken;\\r\\n    uint256 public constant DENOM = 100000; // For percentage precision upto 0.00x%\\r\\n    string public remarks;\\r\\n\\r\\n    // Token vesting \\r\\n    uint256[] public claimableTimestamp;\\r\\n    mapping(uint256 => uint256) public claimablePercent;\\r\\n\\r\\n    // Store the information of all users\\r\\n    mapping(address => Account) public accounts;\\r\\n\\r\\n    // For tracking\\r\\n    uint256 public totalPendingVestingToken;    // Counter to track total required tokens\\r\\n    uint256 public totalParticipants;           // Total presales participants\\r\\n\\r\\n    event Register(address[] account, uint256[] tokenAllocation);\\r\\n    event Deregister(address[] account);\\r\\n    event Claim(address user, uint256 amount);\\r\\n    event SetClaimable(uint256[] timestamp, uint256[] percent);\\r\\n\\r\\n    struct Account {\\r\\n        uint256 tokenAllocation;            // user's total token allocation \\r\\n        uint256 pendingTokenAllocation;     // user's pending token allocation\\r\\n        uint256 claimIndex;                 // user's claimed at which index. 0 means never claim\\r\\n        uint256 claimedTimestamp;           // user's last claimed timestamp. 0 means never claim\\r\\n    }\\r\\n\\r\\n\\tconstructor(address _decaToken, uint256[] memory _claimableTimestamp, uint256[] memory _claimablePercent, string memory _remarks) {\\r\\n        decaToken = IERC20(_decaToken);\\r\\n        setClaimable(_claimableTimestamp, _claimablePercent);\\r\\n        remarks = _remarks;\\r\\n\\r\\n        emit SetClaimable(_claimableTimestamp, _claimablePercent);\\r\\n    }\\r\\n\\r\\n    // Register token allocation info \\r\\n    // account : IDO address\\r\\n    // tokenAllocation : IDO contribution amount in wei \\r\\n    function register(address[] memory account, uint256[] memory tokenAllocation) external onlyOwner {\\r\\n        require(account.length > 0, \\\"Account array input is empty\\\");\\r\\n        require(tokenAllocation.length > 0, \\\"tokenAllocation array input is empty\\\");\\r\\n        require(tokenAllocation.length == account.length, \\\"tokenAllocation length does not matched with account length\\\");\\r\\n        \\r\\n        // Iterate through the inputs\\r\\n        for(uint256 index = 0; index < account.length; index++) {\\r\\n            // Save into account info\\r\\n            Account storage userAccount = accounts[account[index]];\\r\\n\\r\\n            // For tracking\\r\\n            // Only add to the var if is a new entry\\r\\n            // To update, deregister and re-register\\r\\n            if(userAccount.tokenAllocation == 0) {\\r\\n                totalParticipants++;\\r\\n\\r\\n                userAccount.tokenAllocation = tokenAllocation[index];\\r\\n                userAccount.pendingTokenAllocation = tokenAllocation[index];\\r\\n\\r\\n                // For tracking purposes\\r\\n                totalPendingVestingToken += tokenAllocation[index];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Register(account, tokenAllocation);\\r\\n    }\\r\\n\\r\\n    function deRegister(address[] memory account) external onlyOwner {\\r\\n        require(account.length > 0, \\\"Account array input is empty\\\");\\r\\n        \\r\\n        // Iterate through the inputs\\r\\n        for(uint256 index = 0; index < account.length; index++) {\\r\\n            // Save into account info\\r\\n            Account storage userAccount = accounts[account[index]];\\r\\n\\r\\n            if(userAccount.tokenAllocation > 0) {\\r\\n                totalParticipants--;\\r\\n\\r\\n                // For tracking purposes\\r\\n                totalPendingVestingToken -= userAccount.pendingTokenAllocation;\\r\\n\\r\\n                userAccount.tokenAllocation = 0;\\r\\n                userAccount.pendingTokenAllocation = 0;\\r\\n                userAccount.claimIndex = 0;\\r\\n                userAccount.claimedTimestamp = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Deregister(account);\\r\\n    }\\r\\n\\r\\n    function claim() external {\\r\\n        Account storage userAccount = accounts[_msgSender()];\\r\\n        uint256 tokenAllocation = userAccount.tokenAllocation;\\r\\n        require(tokenAllocation > 0, \\\"Nothing to claim\\\");\\r\\n\\r\\n        uint256 claimIndex = userAccount.claimIndex;\\r\\n        require(claimIndex < claimableTimestamp.length, \\\"All tokens claimed\\\");\\r\\n\\r\\n        //Calculate user vesting distribution amount\\r\\n        uint256 tokenQuantity = 0;\\r\\n        for(uint256 index = claimIndex; index < claimableTimestamp.length; index++) {\\r\\n\\r\\n            uint256 _claimTimestamp = claimableTimestamp[index];   \\r\\n            if(block.timestamp >= _claimTimestamp) {\\r\\n                claimIndex++;\\r\\n                tokenQuantity = tokenQuantity + (tokenAllocation * claimablePercent[_claimTimestamp] / DENOM);\\r\\n            } else {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(tokenQuantity > 0, \\\"Nothing to claim now, please wait for next vesting\\\");\\r\\n\\r\\n        //Validate whether contract token balance is sufficient\\r\\n        uint256 contractTokenBalance = decaToken.balanceOf(address(this));\\r\\n        require(contractTokenBalance >= tokenQuantity, \\\"Contract token quantity is not sufficient\\\");\\r\\n\\r\\n        //Update user details\\r\\n        userAccount.claimedTimestamp = block.timestamp;\\r\\n        userAccount.claimIndex = claimIndex;\\r\\n        userAccount.pendingTokenAllocation = userAccount.pendingTokenAllocation - tokenQuantity;\\r\\n\\r\\n        //For tracking\\r\\n        totalPendingVestingToken -= tokenQuantity;\\r\\n\\r\\n        //Release token\\r\\n        bool status = decaToken.transfer(_msgSender(), tokenQuantity);\\r\\n        require(status, \\\"Failed to claim\\\");\\r\\n\\r\\n        emit Claim(_msgSender(), tokenQuantity);\\r\\n    }\\r\\n\\r\\n    // Calculate claimable tokens at current timestamp\\r\\n    function getClaimableAmount(address account) external view returns(uint256) {\\r\\n        Account storage userAccount = accounts[account];\\r\\n        uint256 tokenAllocation = userAccount.tokenAllocation;\\r\\n        uint256 claimIndex = userAccount.claimIndex;\\r\\n\\r\\n        if(tokenAllocation == 0) return 0;\\r\\n        if(claimableTimestamp.length == 0) return 0;\\r\\n        if(block.timestamp < claimableTimestamp[0]) return 0;\\r\\n        if(claimIndex >= claimableTimestamp.length) return 0;\\r\\n\\r\\n        uint256 tokenQuantity = 0;\\r\\n        for(uint256 index = claimIndex; index < claimableTimestamp.length; index++){\\r\\n\\r\\n            uint256 _claimTimestamp = claimableTimestamp[index];\\r\\n            if(block.timestamp >= _claimTimestamp){\\r\\n                tokenQuantity = tokenQuantity + (tokenAllocation * claimablePercent[_claimTimestamp] / DENOM);\\r\\n            } else {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return tokenQuantity;\\r\\n    }\\r\\n\\r\\n    // Update claim percentage. Timestamp must match with _claimableTime\\r\\n    function setClaimable(uint256[] memory timestamp, uint256[] memory percent) public onlyOwner {\\r\\n        require(timestamp.length > 0, \\\"Empty timestamp input\\\");\\r\\n        require(timestamp.length == percent.length, \\\"Array size not matched\\\");\\r\\n\\r\\n        // set claim percentage\\r\\n        for(uint256 index = 0; index < timestamp.length; index++){\\r\\n            claimablePercent[timestamp[index]] = percent[index];\\r\\n        }\\r\\n\\r\\n        // set claim timestamp\\r\\n        claimableTimestamp = timestamp;\\r\\n    }\\r\\n\\r\\n    function setRemarks(string memory _remarks) external onlyOwner {\\r\\n        remarks = _remarks;\\r\\n    }\\r\\n\\r\\n    function getClaimableTimestamp() external view returns (uint256[] memory){\\r\\n        return claimableTimestamp;\\r\\n    }\\r\\n\\r\\n    function getClaimablePercent() external view returns (uint256[] memory){\\r\\n        uint256[] memory _claimablePercent = new uint256[](claimableTimestamp.length);\\r\\n\\r\\n        for(uint256 index = 0; index < claimableTimestamp.length; index++) {\\r\\n\\r\\n            uint256 _claimTimestamp = claimableTimestamp[index];   \\r\\n            _claimablePercent[index] = claimablePercent[_claimTimestamp];\\r\\n        }\\r\\n\\r\\n        return _claimablePercent;\\r\\n    }\\r\\n\\r\\n    function rescueToken(address _token, address _to, uint256 _amount) external onlyOwner {\\r\\n        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));\\r\\n        require(_contractBalance >= _amount, \\\"Insufficient tokens\\\");\\r\\n        IERC20(_token).transfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_decaToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimableTimestamp\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimablePercent\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_remarks\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"}],\"name\":\"Deregister\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenAllocation\",\"type\":\"uint256[]\"}],\"name\":\"Register\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"timestamp\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"percent\",\"type\":\"uint256[]\"}],\"name\":\"SetClaimable\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingTokenAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimablePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimableTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"}],\"name\":\"deRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decaToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimablePercent\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimableTimestamp\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAllocation\",\"type\":\"uint256[]\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remarks\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"timestamp\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percent\",\"type\":\"uint256[]\"}],\"name\":\"setClaimable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_remarks\",\"type\":\"string\"}],\"name\":\"setRemarks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPendingVestingToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Distribution", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002ba63e81cf28dc82e81a6b31516323ffed2f3a2500000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000062bd1fc00000000000000000000000000000000000000000000000000000000062e7178000000000000000000000000000000000000000000000000000000000630ff60000000000000000000000000000000000000000000000000000000000633783000000000000000000000000000000000000000000000000000000000063606180000000000000000000000000000000000000000000000000000000006387ee800000000000000000000000000000000000000000000000000000000063b0cd00000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000030d400000000000000000000000000000000000000000000000000000000000038f700000000000000000000000000000000000000000000000000000000000038f700000000000000000000000000000000000000000000000000000000000038f700000000000000000000000000000000000000000000000000000000000038f700000000000000000000000000000000000000000000000000000000000038f700000000000000000000000000000000000000000000000000000000000038f7000000000000000000000000000000000000000000000000000000000000000d5072697661746520526f756e6400000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}