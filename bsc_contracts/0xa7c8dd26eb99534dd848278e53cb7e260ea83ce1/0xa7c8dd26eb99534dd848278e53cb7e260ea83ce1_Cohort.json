{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Cohort.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IRiskPoolFactory.sol\\\";\\nimport \\\"./interfaces/ICohort.sol\\\";\\nimport \\\"./interfaces/IRiskPool.sol\\\";\\nimport \\\"./interfaces/IPremiumPoolFactory.sol\\\";\\nimport \\\"./interfaces/IPremiumPool.sol\\\";\\nimport \\\"./libraries/TransferHelper.sol\\\";\\n\\ncontract Cohort is ICohort, ReentrancyGuard {\\n    // It should be okay if Protocol is struct\\n    struct Protocol {\\n        uint256 coverDuration; // Duration of the protocol cover products\\n        address protocolAddress; // Address of that protocol\\n        string name; // protocol name\\n        string productType; // Type of product i.e. Wallet insurance, smart contract bug insurance, etc.\\n        string premiumDescription;\\n        uint16 avgLR; // LR means Loss Ratio, default 1000 = 1\\n        bool exist; // initial true\\n    }\\n\\n    address public factory;\\n    address public claimAssessor;\\n    address public premiumPool;\\n    address public owner;\\n    string public name;\\n    // uint public TVLc;\\n    // uint public combinedRisk;\\n    uint256 public duration;\\n    // uint8 public status;\\n    uint256 public cohortActiveFrom;\\n\\n    // for now we set this as constant\\n    uint256 public immutable COHORT_START_CAPITAL;\\n\\n    mapping(uint16 => Protocol) public getProtocol;\\n    uint16[] private allProtocols;\\n\\n    mapping(uint8 => address) public getRiskPool;\\n    uint8[] private allRiskPools;\\n\\n    // pool => amount => pool capital\\n    mapping(address => uint256) private poolCapital;\\n    uint256 private totalAPRofPools;\\n    uint256 private MAX_INTEGER = type(uint256).max;\\n\\n    event ProtocolCreated(address indexed _cohort, uint16 _protocolIdx);\\n    event PremiumDeposited(address indexed _cohort, uint16 _protocolIdx, uint256 _amount);\\n    event RiskPoolCreated(address indexed _cohort, address indexed _pool);\\n    event StakedInPool(address indexed _staker, address indexed pool, uint256 _amount);\\n    event LeftPool(address indexed _staker, address indexed _pool);\\n    event ClaimPaid(address indexed _claimer, uint256 _protocolIdx, uint256 _amount);\\n\\n    constructor(\\n        address _owner,\\n        string memory _name,\\n        address _claimAssessor,\\n        uint256 _cohortStartCapital\\n    ) {\\n        owner = _owner;\\n        name = _name;\\n        COHORT_START_CAPITAL = _cohortStartCapital;\\n        claimAssessor = _claimAssessor;\\n        factory = msg.sender;\\n    }\\n\\n    modifier onlyCohortOwner() {\\n        require(msg.sender == owner, \\\"UnoRe: Forbidden\\\");\\n        _;\\n    }\\n\\n    function allProtocolsLength() external view returns (uint256) {\\n        return allProtocols.length;\\n    }\\n\\n    function allRiskPoolLength() external view returns (uint256) {\\n        return allRiskPools.length;\\n    }\\n\\n    /**\\n     * @dev We separated createPremiumPool from constructor to keep light constructor\\n     */\\n    function createPremiumPool(\\n        address _factory,\\n        address _currency,\\n        uint256 _minimum\\n    ) external {\\n        require(msg.sender == factory, \\\"UnoRe: Forbidden\\\");\\n        premiumPool = IPremiumPoolFactory(_factory).newPremiumPool(_currency, _minimum);\\n    }\\n\\n    // This action can be done only by cohort owner\\n    function addProtocol(\\n        string calldata _name,\\n        address _protocolAddress,\\n        string calldata _productType,\\n        string calldata _premiumDescription,\\n        uint256 _coverDuration\\n    ) external onlyCohortOwner {\\n        uint16 lastIdx = allProtocols.length > 0 ? allProtocols[allProtocols.length - 1] + 1 : 0;\\n        allProtocols.push(lastIdx);\\n        getProtocol[lastIdx] = Protocol({\\n            coverDuration: _coverDuration,\\n            protocolAddress: _protocolAddress,\\n            name: _name,\\n            productType: _productType,\\n            premiumDescription: _premiumDescription,\\n            avgLR: 1000, //\\n            exist: true\\n        });\\n\\n        if (duration < _coverDuration) {\\n            duration = _coverDuration;\\n        }\\n        emit ProtocolCreated(address(this), lastIdx);\\n    }\\n\\n    /**\\n     * @dev create Risk pool from cohort owner\\n     */\\n    function createRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _factory,\\n        address _currency,\\n        uint256 _APR,\\n        uint256 _maxSize\\n    ) external onlyCohortOwner returns (address pool) {\\n        uint256 len = allRiskPools.length;\\n        pool = IRiskPoolFactory(_factory).newRiskPool(_name, _symbol, address(this), _currency, _APR, _maxSize);\\n\\n        uint8 lastIdx = len > 0 ? allRiskPools[len - 1] + 1 : 0;\\n        allRiskPools.push(lastIdx);\\n        getRiskPool[lastIdx] = pool;\\n        totalAPRofPools += _APR;\\n        poolCapital[pool] = MAX_INTEGER;\\n        emit RiskPoolCreated(address(this), pool);\\n    }\\n\\n    function depositPremium(uint16 _protocolIdx, uint256 _amount) external nonReentrant {\\n        require(_amount != 0, \\\"UnoRe: ZERO Value\\\");\\n        TransferHelper.safeTransferFrom(IPremiumPool(premiumPool).currency(), msg.sender, premiumPool, _amount);\\n        IPremiumPool(premiumPool).depositPremium(_protocolIdx, _amount);\\n        emit PremiumDeposited(address(this), _protocolIdx, _amount);\\n    }\\n\\n    function enterInPool(\\n        address _from,\\n        address _pool,\\n        uint256 _amount\\n    ) external nonReentrant {\\n        require(cohortActiveFrom == 0, \\\"UnoRe: Staking was Ended\\\");\\n        require(poolCapital[_pool] == MAX_INTEGER || poolCapital[_pool] != 0, \\\"UnoRe: RiskPool not exist\\\");\\n        require(_amount != 0, \\\"UnoRe: ZERO Value\\\");\\n        uint256 _poolMaxSize = IRiskPool(_pool).maxSize();\\n        uint256 _currentSupply = IERC20(_pool).totalSupply(); // It's Okay using totalSupply here, because there's no withdrawl during staking.\\n        require(_poolMaxSize >= (_amount + _currentSupply), \\\"UnoRe: RiskPool overflow\\\");\\n        address token = IRiskPool(_pool).currency();\\n        TransferHelper.safeTransferFrom(token, _from, _pool, _amount);\\n        IRiskPool(_pool).enter(_from, _amount);\\n        poolCapital[_pool] == MAX_INTEGER ? poolCapital[_pool] = _amount : poolCapital[_pool] += _amount;\\n        _startCohort();\\n\\n        emit StakedInPool(_from, _pool, _amount);\\n    }\\n\\n    /**\\n     * @dev for now we assume protocols send premium to cohort smart contract\\n     */\\n    function leaveFromPool(address _to, address _pool) external nonReentrant {\\n        require(cohortActiveFrom != 0 && block.timestamp - cohortActiveFrom > duration, \\\"UnoRe: Forbidden\\\");\\n        require(poolCapital[_pool] != 0 && poolCapital[_pool] != MAX_INTEGER, \\\"UnoRe: RiskPool not exist or empty\\\");\\n        // Withdraw remaining from pool\\n        uint256 amount = IERC20(_pool).balanceOf(_to);\\n        require(amount != 0, \\\"UnoRe: ZERO Value\\\");\\n        // get premium rewards\\n        /**\\n         * @dev It's okay using for loop here, because the max length of pools is 3 at the moment\\n         */\\n        for (uint256 ii = 0; ii < allProtocols.length; ii++) {\\n            uint16 protocolIdx = allProtocols[ii];\\n            IPremiumPool(premiumPool).setPremiumReward(protocolIdx);\\n            uint256 _pr = premiumReward(_to, _pool, protocolIdx);\\n            IPremiumPool(premiumPool).withdrawPremium(_to, protocolIdx, _pr);\\n        }\\n\\n        IRiskPool(_pool).leave(_to);\\n        emit LeftPool(_to, _pool);\\n    }\\n\\n    /**\\n     * @dev This function shows the premium reward which user can get.\\n     * It can be changed in staking and coverage duration, but should be fixed value after coverage.\\n     */\\n    function premiumReward(\\n        address _account,\\n        address _riskPool,\\n        uint16 _protocolIdx\\n    ) public view returns (uint256) {\\n        if (poolCapital[_riskPool] == 0 || poolCapital[_riskPool] == MAX_INTEGER || totalAPRofPools == 0) {\\n            return 0;\\n        }\\n        uint256 _totalPr = IPremiumPool(premiumPool).premiumRewardOf(_protocolIdx);\\n        uint256 amount = IERC20(_riskPool).balanceOf(_account);\\n        uint256 denominator = poolCapital[_riskPool] * totalAPRofPools;\\n        uint256 numerator = _totalPr * amount * IRiskPool(_riskPool).APR();\\n        return numerator / denominator;\\n    }\\n\\n    /**\\n     * @dev for now all premiums and risk pools are paid in stable coin\\n     * @dev we can trust claim request from ClaimAssesor\\n     */\\n    function requestClaim(\\n        address _from,\\n        uint16 _protocolIdx,\\n        uint256 _amount\\n    ) external override nonReentrant {\\n        require(msg.sender == claimAssessor, \\\"UnoRe: Forbidden\\\");\\n        require(_amount != 0, \\\"UnoRe: ZERO Value\\\");\\n        require(block.timestamp - cohortActiveFrom <= duration && cohortActiveFrom != 0, \\\"UnoRe: Forbidden\\\");\\n        (bool hasEnough, uint256 minPremium) = hasEnoughCapital(_protocolIdx, _amount);\\n        require(hasEnough == true, \\\"UnoRe: Capital is not enough\\\");\\n\\n        uint256 currentPremium = IPremiumPool(premiumPool).balanceOf(_protocolIdx);\\n        /** We should remain minimum amount in premium pool\\n         * Uno Res reinsurance mechanism works in the following manner.\\n         * There is a premium pool, into which all the premium collected from various protocols is held.\\n         * At the end of the policy period, the premium is distributed to the 3 risk pools in accordance with the rewards distribution formula.\\n         *\\n         * The claims payout, is first done from the premium pool,\\n         * after it's exhaustion the risk pool 1 is used then risk pool 2 and so on.\\n         *\\n         * There is a need of a minimum reserve premium to account for case scenarios\\n         * where claims are incurred and premium pool and risk pool 1 is completely exhausted.\\n         * The min premium reserve will be used to allocate rewards to all the pools (risk pool 1, risk pool 2, risk pool 3, etc.. )\\n         */\\n        if (_amount + minPremium <= currentPremium) {\\n            IPremiumPool(premiumPool).withdrawPremium(_from, _protocolIdx, _amount);\\n            emit ClaimPaid(_from, _protocolIdx, _amount);\\n            return;\\n        }\\n        if (currentPremium > minPremium) {\\n            // Tranfer from premium\\n            uint256 _paid = currentPremium - minPremium;\\n            IPremiumPool(premiumPool).withdrawPremium(_from, _protocolIdx, _paid);\\n            _amount -= _paid;\\n        }\\n        /**\\n         * @dev It's okay using for loop here, because the max length of pools is 3 at the moment\\n         */\\n        for (uint256 ii = 0; ii < allRiskPools.length; ii++) {\\n            if (_amount == 0) break;\\n            address _pool = getRiskPool[allRiskPools[ii]];\\n            address _token = IRiskPool(_pool).currency();\\n            uint256 _poolCapital = IERC20(_token).balanceOf(_pool);\\n            if (_amount <= _poolCapital) {\\n                _requestClaimToPool(_from, _amount, _pool);\\n                _amount = 0;\\n            } else {\\n                _requestClaimToPool(_from, _poolCapital, _pool);\\n                _amount -= _poolCapital;\\n            }\\n        }\\n        emit ClaimPaid(_from, _protocolIdx, _amount);\\n    }\\n\\n    function _startCohort() private {\\n        uint256 totalCapital = 0;\\n        for (uint256 ii = 0; ii < allRiskPools.length; ii++) {\\n            address pool = getRiskPool[allRiskPools[ii]];\\n            // for now we use total supply cause we deal only Stable coins\\n            totalCapital += IERC20(pool).totalSupply();\\n        }\\n        if (totalCapital >= COHORT_START_CAPITAL) {\\n            cohortActiveFrom = block.timestamp;\\n        }\\n    }\\n\\n    function hasEnoughCapital(uint16 _protocolIdx, uint256 _amount) private returns (bool hasEnough, uint256 minPremium) {\\n        uint256 totalCapital = IPremiumPool(premiumPool).balanceOf(_protocolIdx);\\n        uint256 len = allRiskPools.length;\\n        bool isLastPool = true;\\n        for (uint256 ii = 0; ii < len; ii++) {\\n            address pool = getRiskPool[allRiskPools[ii]];\\n            // for now we use total supply cause we deal only stable coins\\n            uint256 _ts = IERC20(pool).totalSupply();\\n            totalCapital += _ts;\\n            if (isLastPool && _ts != 0 && ii != len - 1) {\\n                isLastPool = false;\\n            }\\n        }\\n        minPremium = isLastPool ? 0 : IPremiumPool(premiumPool).minimumPremium();\\n        hasEnough = totalCapital >= (_amount + minPremium);\\n    }\\n\\n    /**\\n     * @dev to save gas fee, we need this function\\n     */\\n    function _requestClaimToPool(\\n        address _from,\\n        uint256 _amount,\\n        address _pool\\n    ) private {\\n        IRiskPool(_pool).requestClaim(_from, _amount);\\n    }\\n\\n    function setDuration(uint256 _duration) external onlyCohortOwner {\\n        duration = _duration;\\n    }\\n\\n    function changePoolPriority(uint8 _prio1, uint8 _prio2) external onlyCohortOwner {\\n        address _temp = getRiskPool[allRiskPools[_prio1]];\\n        getRiskPool[_prio1] = getRiskPool[allRiskPools[_prio2]];\\n        getRiskPool[_prio2] = _temp;\\n    }\\n\\n    function totalPremiumReward(address _account, address _riskPool) external view returns (uint256) {\\n        uint256 pr = 0;\\n        for (uint256 ii = 0; ii < allProtocols.length; ii++) {\\n            uint16 protocolIdx = allProtocols[ii];\\n            pr += premiumReward(_account, _riskPool, protocolIdx);\\n        }\\n        return pr;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRiskPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRiskPoolFactory {\\n    function newRiskPool(\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _cohort,\\n        address _currency,\\n        uint256 _APR,\\n        uint256 _maxSize\\n    ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICohort.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ICohort {\\n    function requestClaim(\\n        address _from,\\n        uint16 _protocolIdx,\\n        uint256 _amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRiskPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IRiskPool {\\n    function enter(address _from, uint256 _amount) external;\\n\\n    function leave(address _to) external;\\n\\n    function requestClaim(address _from, uint256 _amount) external;\\n\\n    function currency() external view returns (address);\\n\\n    function APR() external view returns (uint256);\\n\\n    function maxSize() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPremiumPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IPremiumPoolFactory {\\n    function newPremiumPool(address _currency, uint256 _minimum) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPremiumPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface IPremiumPool {\\n    function depositPremium(uint16 _protocolIdx, uint256 _amount) external;\\n\\n    function withdrawPremium(\\n        address _to,\\n        uint16 _protocolIdx,\\n        uint256 _amount\\n    ) external;\\n\\n    function transferAsset(\\n        uint16 _protocolIdx,\\n        address _to,\\n        uint256 _amount\\n    ) external;\\n\\n    function minimumPremium() external returns (uint256);\\n\\n    function balanceOf(uint16 _protocolIdx) external view returns (uint256);\\n\\n    function premiumRewardOf(uint16 _protocolIdx) external view returns (uint256);\\n\\n    function currency() external view returns (address);\\n\\n    function setPremiumReward(uint16 _protocolIdx) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.0;\\n\\n// from Uniswap TransferHelper library\\nlibrary TransferHelper {\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::safeTransfer: transfer failed\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper::transferFrom: transferFrom failed\\\");\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper::safeTransferETH: ETH transfer failed\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_claimAssessor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cohortStartCapital\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_protocolIdx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"LeftPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_cohort\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_protocolIdx\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"PremiumDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_cohort\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_protocolIdx\",\"type\":\"uint16\"}],\"name\":\"ProtocolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_cohort\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"RiskPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"StakedInPool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COHORT_START_CAPITAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_protocolAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_productType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_premiumDescription\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_coverDuration\",\"type\":\"uint256\"}],\"name\":\"addProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allProtocolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allRiskPoolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_prio1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_prio2\",\"type\":\"uint8\"}],\"name\":\"changePoolPriority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAssessor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cohortActiveFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimum\",\"type\":\"uint256\"}],\"name\":\"createPremiumPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_APR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSize\",\"type\":\"uint256\"}],\"name\":\"createRiskPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_protocolIdx\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositPremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enterInPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"getProtocol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coverDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"protocolAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"productType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"premiumDescription\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"avgLR\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"getRiskPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"leaveFromPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_riskPool\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_protocolIdx\",\"type\":\"uint16\"}],\"name\":\"premiumReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_protocolIdx\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"requestClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_riskPool\",\"type\":\"address\"}],\"name\":\"totalPremiumReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Cohort", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "000000000000000000000000d69c2ac9b708217bcdfd932e4d24e024e1ee5d8e0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000de491b262fd91992c74343c7f8ee0ff76ff1bca00000000000000000000000000000000000000000000069e10de76676d08000000000000000000000000000000000000000000000000000000000000000000008436f686f72742049000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}