{"SourceCode": "// Sources flattened with hardhat v2.6.4 https://hardhat.org\r\n\r\n// File contracts/commons/interfaces/IOSWAP_PausableFactory.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-only\r\npragma solidity =0.6.11;\r\n\r\ninterface IOSWAP_PausableFactory {\r\n    event Shutdowned();\r\n    event Restarted();\r\n    event PairShutdowned(address indexed pair);\r\n    event PairRestarted(address indexed pair);\r\n\r\n    function governance() external view returns (address);\r\n\r\n    function isLive() external returns (bool);\r\n    function setLive(bool _isLive) external;\r\n    function setLiveForPair(address pair, bool live) external;\r\n}\r\n\r\n\r\n// File contracts/restricted/interfaces/IOSWAP_RestrictedFactory.sol\r\n\r\n\r\npragma solidity =0.6.11;\r\n\r\ninterface IOSWAP_RestrictedFactory is IOSWAP_PausableFactory { \r\n\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint newPairSize, uint newSize);\r\n    event Shutdowned();\r\n    event Restarted();\r\n    event PairShutdowned(address indexed pair);\r\n    event PairRestarted(address indexed pair);\r\n    event ParamSet(bytes32 name, bytes32 value);\r\n    event ParamSet2(bytes32 name, bytes32 value1, bytes32 value2);\r\n    event OracleAdded(address indexed token0, address indexed token1, address oracle);\r\n\r\n    function whitelistFactory() external view returns (address);\r\n    function pairCreator() external returns (address);\r\n    function configStore() external returns (address);\r\n\r\n    function tradeFee() external returns (uint256);\r\n    function protocolFee() external returns (uint256);\r\n    function protocolFeeTo() external returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB, uint256 i) external returns (address pair);\r\n    function pairIdx(address pair) external returns (uint256 i);\r\n    function allPairs(uint256 i) external returns (address pair);\r\n\r\n    function restrictedLiquidityProvider() external returns (address);\r\n    function oracles(address tokenA, address tokenB) external returns (address oracle);\r\n    function isOracle(address oracle) external returns (bool);\r\n\r\n    function init(address _restrictedLiquidityProvider) external;\r\n    function getCreateAddresses() external view returns (address _governance, address _whitelistFactory, address _restrictedLiquidityProvider, address _configStore);\r\n\r\n    function pairLength(address tokenA, address tokenB) external view returns (uint256);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setOracle(address tokenA, address tokenB, address oracle) external;\r\n    function addOldOracleToNewPair(address tokenA, address tokenB, address oracle) external;\r\n\r\n    function isPair(address pair) external view returns (bool);\r\n\r\n    function setTradeFee(uint256 _tradeFee) external;\r\n    function setProtocolFee(uint256 _protocolFee) external;\r\n    function setProtocolFeeTo(address _protocolFeeTo) external;\r\n\r\n    function checkAndGetOracleSwapParams(address tokenA, address tokenB) external view returns (address oracle_, uint256 tradeFee_, uint256 protocolFee_);\r\n    function checkAndGetOracle(address tokenA, address tokenB) external view returns (address oracle);\r\n}\r\n\r\n\r\n// File contracts/gov/interfaces/IOAXDEX_Governance.sol\r\n\r\n\r\npragma solidity =0.6.11;\r\n\r\ninterface IOAXDEX_Governance {\r\n\r\n    struct NewStake {\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n    }\r\n    struct VotingConfig {\r\n        uint256 minExeDelay;\r\n        uint256 minVoteDuration;\r\n        uint256 maxVoteDuration;\r\n        uint256 minOaxTokenToCreateVote;\r\n        uint256 minQuorum;\r\n    }\r\n\r\n    event ParamSet(bytes32 indexed name, bytes32 value);\r\n    event ParamSet2(bytes32 name, bytes32 value1, bytes32 value2);\r\n    event AddVotingConfig(bytes32 name, \r\n        uint256 minExeDelay,\r\n        uint256 minVoteDuration,\r\n        uint256 maxVoteDuration,\r\n        uint256 minOaxTokenToCreateVote,\r\n        uint256 minQuorum);\r\n    event SetVotingConfig(bytes32 indexed configName, bytes32 indexed paramName, uint256 minExeDelay);\r\n\r\n    event Stake(address indexed who, uint256 value);\r\n    event Unstake(address indexed who, uint256 value);\r\n\r\n    event NewVote(address indexed vote);\r\n    event NewPoll(address indexed poll);\r\n    event Vote(address indexed account, address indexed vote, uint256 option);\r\n    event Poll(address indexed account, address indexed poll, uint256 option);\r\n    event Executed(address indexed vote);\r\n    event Veto(address indexed vote);\r\n\r\n    function votingConfigs(bytes32) external view returns (uint256 minExeDelay,\r\n        uint256 minVoteDuration,\r\n        uint256 maxVoteDuration,\r\n        uint256 minOaxTokenToCreateVote,\r\n        uint256 minQuorum);\r\n    function votingConfigProfiles(uint256) external view returns (bytes32);\r\n\r\n    function oaxToken() external view returns (address);\r\n    function freezedStake(address) external view returns (uint256 amount, uint256 timestamp);\r\n    function stakeOf(address) external view returns (uint256);\r\n    function totalStake() external view returns (uint256);\r\n\r\n    function votingRegister() external view returns (address);\r\n    function votingExecutor(uint256) external view returns (address);\r\n    function votingExecutorInv(address) external view returns (uint256);\r\n    function isVotingExecutor(address) external view returns (bool);\r\n    function admin() external view returns (address);\r\n    function minStakePeriod() external view returns (uint256);\r\n\r\n    function voteCount() external view returns (uint256);\r\n    function votingIdx(address) external view returns (uint256);\r\n    function votings(uint256) external view returns (address);\r\n\r\n\r\n\tfunction votingConfigProfilesLength() external view returns(uint256);\r\n\tfunction getVotingConfigProfiles(uint256 start, uint256 length) external view returns(bytes32[] memory profiles);\r\n    function getVotingParams(bytes32) external view returns (uint256 _minExeDelay, uint256 _minVoteDuration, uint256 _maxVoteDuration, uint256 _minOaxTokenToCreateVote, uint256 _minQuorum);\r\n\r\n    function setVotingRegister(address _votingRegister) external;\r\n    function votingExecutorLength() external view returns (uint256);\r\n    function initVotingExecutor(address[] calldata _setVotingExecutor) external;\r\n    function setVotingExecutor(address _setVotingExecutor, bool _bool) external;\r\n    function initAdmin(address _admin) external;\r\n    function setAdmin(address _admin) external;\r\n    function addVotingConfig(bytes32 name, uint256 minExeDelay, uint256 minVoteDuration, uint256 maxVoteDuration, uint256 minOaxTokenToCreateVote, uint256 minQuorum) external;\r\n    function setVotingConfig(bytes32 configName, bytes32 paramName, uint256 paramValue) external;\r\n    function setMinStakePeriod(uint _minStakePeriod) external;\r\n\r\n    function stake(uint256 value) external;\r\n    function unlockStake() external;\r\n    function unstake(uint256 value) external;\r\n    function allVotings() external view returns (address[] memory);\r\n    function getVotingCount() external view returns (uint256);\r\n    function getVotings(uint256 start, uint256 count) external view returns (address[] memory _votings);\r\n\r\n    function isVotingContract(address votingContract) external view returns (bool);\r\n\r\n    function getNewVoteId() external returns (uint256);\r\n    function newVote(address vote, bool isExecutiveVote) external;\r\n    function voted(bool poll, address account, uint256 option) external;\r\n    function executed() external;\r\n    function veto(address voting) external;\r\n    function closeVote(address vote) external;\r\n}\r\n\r\n\r\n// File contracts/commons/interfaces/IOSWAP_PausablePair.sol\r\n\r\n\r\npragma solidity =0.6.11;\r\n\r\ninterface IOSWAP_PausablePair {\r\n    function isLive() external view returns (bool);\r\n    function factory() external view returns (address);\r\n\r\n    function setLive(bool _isLive) external;\r\n}\r\n\r\n\r\n// File contracts/commons/interfaces/IOSWAP_PairBase.sol\r\n\r\n\r\npragma solidity =0.6.11;\r\n\r\ninterface IOSWAP_PairBase is IOSWAP_PausablePair {\r\n    function initialize(address toekn0, address toekn1) external;\r\n}\r\n\r\n\r\n// File contracts/oracle/interfaces/IOSWAP_OracleAdaptor2.sol\r\n\r\n\r\npragma solidity =0.6.11;\r\n\r\ninterface IOSWAP_OracleAdaptor2 {\r\n    function isSupported(address from, address to) external view returns (bool supported);\r\n    function getRatio(address from, address to, uint256 fromAmount, uint256 toAmount, address trader, bytes calldata payload) external view returns (uint256 numerator, uint256 denominator);\r\n    function getLatestPrice(address from, address to, bytes calldata payload) external view returns (uint256 price);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File contracts/libraries/Context.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/Ownable.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/commons/OSWAP_PausableFactory.sol\r\n\r\n\r\npragma solidity =0.6.11;\r\n\r\n\r\n\r\ncontract OSWAP_PausableFactory is IOSWAP_PausableFactory {\r\n\r\n    modifier onlyShutdownAdminOrVoting() {\r\n        require(IOAXDEX_Governance(governance).admin() == msg.sender ||\r\n                IOAXDEX_Governance(governance).isVotingExecutor(msg.sender), \r\n                \"Not from shutdown admin or voting\");\r\n        _; \r\n    }\r\n\r\n    address public immutable override governance;\r\n\r\n    bool public override isLive;\r\n\r\n    constructor(address _governance) public {\r\n        governance = _governance;\r\n        isLive = true;\r\n    }\r\n\r\n    function setLive(bool _isLive) external override onlyShutdownAdminOrVoting {\r\n        isLive = _isLive;\r\n        if (isLive)\r\n            emit Restarted();\r\n        else\r\n            emit Shutdowned();\r\n    }\r\n    function setLiveForPair(address pair, bool live) external override onlyShutdownAdminOrVoting {\r\n        IOSWAP_PausablePair(pair).setLive(live);\r\n        if (live)\r\n            emit PairRestarted(pair);\r\n        else\r\n            emit PairShutdowned(pair);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/restricted/OSWAP_RestrictedFactory.sol\r\n\r\n\r\npragma solidity =0.6.11;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract OSWAP_RestrictedFactory is IOSWAP_RestrictedFactory, OSWAP_PausableFactory, Ownable { \r\n\r\n    modifier onlyVoting() {\r\n        require(IOAXDEX_Governance(governance).isVotingExecutor(msg.sender), \"Not from voting\");\r\n        _; \r\n    }\r\n\r\n    uint256 constant FEE_BASE = 10 ** 5;\r\n\r\n    address public override immutable whitelistFactory;\r\n    address public override immutable pairCreator;\r\n    address public override immutable configStore;\r\n\r\n    uint256 public override tradeFee;\r\n    uint256 public override protocolFee;\r\n    address public override protocolFeeTo;\r\n\r\n    mapping(address => mapping(address => address[])) public override getPair;\r\n    mapping(address => uint256) public override pairIdx;\r\n    address[] public override allPairs;\r\n\r\n    address public override restrictedLiquidityProvider;\r\n    mapping (address => mapping (address => address)) public override oracles;\r\n    mapping (address => bool) public override isOracle;\r\n\r\n    constructor(address _governance, address _whitelistFactory, address _pairCreator, address _configStore, uint256 _tradeFee, uint256 _protocolFee, address _protocolFeeTo) OSWAP_PausableFactory(_governance) public {\r\n        whitelistFactory = _whitelistFactory;\r\n        pairCreator = _pairCreator;\r\n        configStore = _configStore;\r\n        tradeFee = _tradeFee;\r\n        protocolFee = _protocolFee;\r\n        protocolFeeTo = _protocolFeeTo;\r\n    }\r\n    // only set at deployment time\r\n    function init(address _restrictedLiquidityProvider) external override onlyOwner {\r\n        require(restrictedLiquidityProvider == address(0), \"RestrictedLiquidityProvider already set\");\r\n        restrictedLiquidityProvider = _restrictedLiquidityProvider;\r\n    }\r\n\r\n    function getCreateAddresses() external override view returns (address _governance, address _whitelistFactory, address _restrictedLiquidityProvider, address _configStore) {\r\n        return (governance, whitelistFactory, restrictedLiquidityProvider, configStore);\r\n    }\r\n\r\n    function pairLength(address tokenA, address tokenB) external override view returns (uint256) {\r\n        return getPair[tokenA][tokenB].length;\r\n    }\r\n    function allPairsLength() external override view returns (uint) {\r\n        return allPairs.length;\r\n    }\r\n\r\n    // support multiple pairs\r\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\r\n        require(tokenA != tokenB, 'IDENTICAL_ADDRESSES');\r\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'ZERO_ADDRESS');\r\n\r\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, getPair[token0][token1].length));\r\n        // bytes4(keccak256(bytes('createPair(bytes32)')));\r\n        (bool success, bytes memory data) = pairCreator.delegatecall(abi.encodeWithSelector(0xED25A5A2, salt));\r\n        require(success, \"Failed to create pair\");\r\n        (pair) = abi.decode(data, (address));\r\n        IOSWAP_PairBase(pair).initialize(token0, token1);\r\n\r\n        getPair[token0][token1].push(pair);\r\n        getPair[token1][token0].push(pair); // populate mapping in the reverse direction\r\n        pairIdx[pair] = allPairs.length;\r\n        allPairs.push(pair);\r\n        emit PairCreated(token0, token1, pair, getPair[token0][token1].length, allPairs.length);\r\n    }\r\n\r\n    // add new oracle not seen before or update an oracle for an existing pair\r\n    function setOracle(address tokenA, address tokenB, address oracle) external override {\r\n        changeOracle(tokenA, tokenB, oracle);\r\n    }\r\n    // add existing/already seen oracle to new pair with lower quorum\r\n    function addOldOracleToNewPair(address tokenA, address tokenB, address oracle) external override {\r\n        require(oracles[tokenA][tokenB] == address(0), \"oracle already set\");\r\n        require(isOracle[oracle], \"oracle not seen\");\r\n        changeOracle(tokenA, tokenB, oracle);\r\n    }\r\n    function changeOracle(address tokenA, address tokenB, address oracle) private onlyVoting {\r\n        require(tokenA < tokenB, \"Invalid address pair order\");\r\n        require(IOSWAP_OracleAdaptor2(oracle).isSupported(tokenA, tokenB), \"Pair not supported by oracle\");\r\n        oracles[tokenA][tokenB] = oracle;\r\n        oracles[tokenB][tokenA] = oracle;\r\n        isOracle[oracle] = true;\r\n        emit OracleAdded(tokenA, tokenB, oracle);\r\n    }\r\n\r\n    function isPair(address pair) external override view returns (bool) {\r\n        return allPairs.length != 0 && allPairs[pairIdx[pair]] == pair;\r\n    }\r\n\r\n    function setTradeFee(uint256 _tradeFee) external override onlyVoting {\r\n        require(_tradeFee <= FEE_BASE, \"INVALID_TRADE_FEE\");\r\n        tradeFee = _tradeFee;\r\n        emit ParamSet(\"tradeFee\", bytes32(tradeFee));\r\n    }\r\n    function setProtocolFee(uint256 _protocolFee) external override onlyVoting {\r\n        require(_protocolFee <= FEE_BASE, \"INVALID_PROTOCOL_FEE\");\r\n        protocolFee = _protocolFee;\r\n        emit ParamSet(\"protocolFee\", bytes32(protocolFee));\r\n    }\r\n    function setProtocolFeeTo(address _protocolFeeTo) external override onlyVoting {\r\n        protocolFeeTo = _protocolFeeTo;\r\n        emit ParamSet(\"protocolFeeTo\", bytes32(bytes20(protocolFeeTo)));\r\n    }\r\n\r\n    function checkAndGetOracleSwapParams(address tokenA, address tokenB) external view override returns (address oracle_, uint256 tradeFee_, uint256 protocolFee_) {\r\n        require(isLive, 'GLOBALLY PAUSED');\r\n        address oracle = checkAndGetOracle(tokenA, tokenB);\r\n        return (oracle, tradeFee, protocolFee);\r\n    }\r\n    function checkAndGetOracle(address tokenA, address tokenB) public view override returns (address oracle) {\r\n        require(tokenA < tokenB, 'Address must be sorted');\r\n        oracle = oracles[tokenA][tokenB];\r\n        require(oracle != address(0), 'No oracle found');\r\n        // FIXME:\r\n        // uint256 score = oracleScores[oracle];\r\n        // require(score >= minOracleScore, 'Oracle score too low');\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelistFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_configStore\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tradeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeTo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPairSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSize\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"PairRestarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"PairShutdowned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"ParamSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"value1\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"value2\",\"type\":\"bytes32\"}],\"name\":\"ParamSet2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Restarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Shutdowned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"addOldOracleToNewPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"checkAndGetOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"checkAndGetOracleSwapParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradeFee_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configStore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreateAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelistFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_restrictedLiquidityProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_configStore\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_restrictedLiquidityProvider\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"pairLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restrictedLiquidityProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isLive\",\"type\":\"bool\"}],\"name\":\"setLive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"live\",\"type\":\"bool\"}],\"name\":\"setLiveForPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeTo\",\"type\":\"address\"}],\"name\":\"setProtocolFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tradeFee\",\"type\":\"uint256\"}],\"name\":\"setTradeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "OSWAP_RestrictedFactory", "CompilerVersion": "v0.6.11+commit.5ef660b1", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000510a179aa399672e26e54ed8ce0e822cc9d0a98d0000000000000000000000008cb1fee69f7f8f00efd5d47067eb75c19cd400170000000000000000000000002f79289d8953ba3967a0b52460721bf41dc81911000000000000000000000000e07526f892af09acb84e9bc5f32df575750dae3b00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000002710000000000000000000000000a4686bb2ae2aa1e80321451552ad79099e9342d8", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2cddcd504d825a59606bd9e900c8d596ff29ed98d6b1e07590b6df5b13d7a578"}