{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.18;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.18;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.18;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: contracts/FundRaisingContract.sol\r\n\r\n\r\npragma solidity 0.8.18;\r\n\r\n\r\n\r\ncontract FundRaisingContract is Ownable {\r\n    enum Status {\r\n        All,\r\n        Open,\r\n        Closed,\r\n        Refunded\r\n    }\r\n\r\n    struct FundraisingCause {\r\n        uint256 causeID; // New field\r\n        address creator;\r\n        string name;\r\n        string logo;\r\n        string twitter;\r\n        string website;\r\n        string htmlDescription;\r\n        uint256 targetAmount;\r\n        uint256 currentAmount;\r\n        Status status;\r\n        address tokenAddress; // Token contract address or address(0) for ETH\r\n        uint256 createDate;\r\n    }\r\n    address public feeTokenAddress; // Token address for fees\r\n    uint256 public feeAmount; // Fee amount in tokens\r\n\r\n    FundraisingCause[] public causes;\r\n    mapping(uint256 => mapping(address => uint256)) public contributorBalances; // Contributor balances per cause\r\n    mapping(address => uint256) public totalContributorBalances; // Contributor's total balance across all causes\r\n    mapping(uint256 => address[]) public causeContributors;\r\n\r\n    uint256 public emergencyWithdrawalPenalty = 5; // Penalty percentage\r\n    uint256 public ownerFeePercentage = 1; // Owner fee percentage\r\n\r\n    event CauseCreated(uint256 causeId, address creator);\r\n    event FundsContributed(\r\n        uint256 causeId,\r\n        address contributor,\r\n        uint256 amount\r\n    );\r\n    event EmergencyWithdrawal(\r\n        uint256 causeId,\r\n        address contributor,\r\n        uint256 amount\r\n    );\r\n    event Refunded(uint256 causeId, address contributor, uint256 amount);\r\n\r\n    // Event emitted when the fee token or amount is updated\r\n    event FeeSettingsUpdated(address indexed tokenAddress, uint256 feeAmount);\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        // Initialize the fee token and amount\r\n        feeTokenAddress = address(0); // Set to address(0) for ETH, change it to your preferred default token\r\n        feeAmount = 1000; // Set your initial fee amount\r\n    }\r\n\r\n    // Function to update the fee token and amount\r\n    function updateFeeSettings(\r\n        address _tokenAddress,\r\n        uint256 _feeAmount\r\n    ) external onlyOwner {\r\n        feeTokenAddress = _tokenAddress;\r\n        feeAmount = _feeAmount;\r\n        emit FeeSettingsUpdated(_tokenAddress, _feeAmount);\r\n    }\r\n\r\n    // Function to get the fee token address\r\n    function getFeeTokenAddress() external view returns (address) {\r\n        return feeTokenAddress;\r\n    }\r\n\r\n    // Function to get the fee amount\r\n    function getFeeAmount() external view returns (uint256) {\r\n        return feeAmount;\r\n    }\r\n\r\n    function createCause(\r\n        string memory _name,\r\n        string memory _logo,\r\n        string memory _twitter,\r\n        string memory _website,\r\n        string memory _htmlDescription,\r\n        uint256 _targetAmount,\r\n        address _tokenAddress // Pass address(0) for ETH or token address\r\n    ) external {\r\n        require(_targetAmount > 0, \"Target amount must be greater than zero\");\r\n        // Transfer the fee to the owner\r\n        transferFeeToOwner();\r\n        uint256 createDate = block.timestamp; // Automatically obtain the creation timestamp\r\n        causes.push(\r\n            FundraisingCause({\r\n                causeID: causes.length, // Assigning causeID\r\n                creator: msg.sender,\r\n                name: _name,\r\n                logo: _logo,\r\n                twitter: _twitter,\r\n                website: _website,\r\n                htmlDescription: _htmlDescription,\r\n                targetAmount: _targetAmount,\r\n                currentAmount: 0,\r\n                status: Status.Open,\r\n                tokenAddress: _tokenAddress,\r\n                createDate: createDate\r\n            })\r\n        );\r\n        emit CauseCreated(causes.length - 1, msg.sender);\r\n    }\r\n\r\n    // Function to transfer fees to the owner\r\n    function transferFeeToOwner() internal {\r\n        if (feeAmount > 0) {\r\n            if (feeTokenAddress == address(0)) {\r\n                // Transfer in Ether if the fee token is ETH\r\n                require(\r\n                    msg.value == feeAmount,\r\n                    \"Send the exact Ether fee amount\"\r\n                );\r\n                payable(owner()).transfer(msg.value);\r\n            } else {\r\n                // Transfer in tokens if the fee token is ERC20\r\n                IERC20 feeToken = IERC20(feeTokenAddress);\r\n                require(\r\n                    feeToken.transferFrom(msg.sender, owner(), feeAmount),\r\n                    \"Token transfer for fee failed\"\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function modifyCause(\r\n        uint256 _causeId,\r\n        string memory _logo,\r\n        string memory _twitter,\r\n        string memory _website,\r\n        string memory _htmlDescription\r\n    ) external {\r\n        FundraisingCause storage cause = causes[_causeId];\r\n        require(\r\n            msg.sender == cause.creator,\r\n            \"Only the cause creator can modify the cause\"\r\n        );\r\n        cause.logo = _logo;\r\n        cause.twitter = _twitter;\r\n        cause.website = _website;\r\n        cause.htmlDescription = _htmlDescription;\r\n    }\r\n\r\n    // Function to get detailed information about a fundraising cause\r\n    function getFundraisingCause(\r\n        uint256 causeId\r\n    ) external view returns (FundraisingCause memory) {\r\n        require(causeId < causes.length, \"Invalid cause ID\");\r\n\r\n        FundraisingCause memory cause = causes[causeId];\r\n        return cause;\r\n    }\r\n\r\n    function contribute(uint256 _causeId, uint256 _amount) external payable {\r\n        FundraisingCause storage cause = causes[_causeId];\r\n        require(cause.status == Status.Open, \"Cause is closed or refunded\");\r\n        require(_amount > 0, \"Contribution amount must be greater than zero\");\r\n\r\n        // Check if the cause accepts ETH (address(0)) or a specific token\r\n        if (cause.tokenAddress == address(0)) {\r\n            require(msg.value == _amount, \"Send the exact Ether amount\");\r\n        } else {\r\n            IERC20 token = IERC20(cause.tokenAddress);\r\n            require(\r\n                token.transferFrom(msg.sender, address(this), _amount),\r\n                \"Token transfer failed\"\r\n            );\r\n        }\r\n\r\n        uint256 balanceBefore = contributorBalances[_causeId][msg.sender];\r\n        uint256 balanceAfter = balanceBefore + _amount;\r\n\r\n        cause.currentAmount += _amount;\r\n        contributorBalances[_causeId][msg.sender] = balanceAfter;\r\n        totalContributorBalances[msg.sender] += _amount;\r\n        // Add contributor to the causeContributors array if not already added\r\n        if (!isContributorInArray(msg.sender, causeContributors[_causeId])) {\r\n            causeContributors[_causeId].push(msg.sender);\r\n        }\r\n        emit FundsContributed(_causeId, msg.sender, _amount);\r\n    }\r\n\r\n    // Function to check if a contributor is in the array\r\n    function isContributorInArray(\r\n        address contributor,\r\n        address[] memory contributorsArray\r\n    ) internal pure returns (bool) {\r\n        for (uint256 i = 0; i < contributorsArray.length; i++) {\r\n            if (contributorsArray[i] == contributor) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Function to get all contributors for a specific cause\r\n    function getContributorsForCause(\r\n        uint256 _causeID\r\n    ) external view returns (address[] memory) {\r\n        return causeContributors[_causeID];\r\n    }\r\n\r\n    function closeCause(uint256 _causeId) external {\r\n        FundraisingCause storage cause = causes[_causeId];\r\n        require(\r\n            cause.status == Status.Open,\r\n            \"Cause is already closed or refunded\"\r\n        );\r\n        require(\r\n            msg.sender == cause.creator,\r\n            \"Only the cause creator can modify the cause\"\r\n        );\r\n        cause.status = Status.Closed;\r\n\r\n        uint256 ownerFee = (cause.currentAmount * ownerFeePercentage) / 100;\r\n\r\n        address causeCreator = cause.creator;\r\n\r\n        if (cause.tokenAddress == address(0)) {\r\n            if(ownerFee>0)\r\n            {\r\n            payable(owner()).transfer(ownerFee);\r\n            }\r\n            payable(causeCreator).transfer(cause.currentAmount - ownerFee);\r\n        } else {\r\n            IERC20 token = IERC20(cause.tokenAddress);\r\n            if(ownerFee>0)\r\n            {\r\n            require(\r\n                token.transfer(owner(), ownerFee),\r\n                \"Token transfer for owner's fee failed\"\r\n            );\r\n            }\r\n            require(\r\n                token.transfer(causeCreator, cause.currentAmount - ownerFee),\r\n                \"Token transfer to cause creator failed\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function cancelCause(uint256 _causeId) external onlyOwner {\r\n        require(_causeId < causes.length, \"Invalid cause ID\");\r\n        FundraisingCause storage cause = causes[_causeId];\r\n        cause.status = Status.Refunded;\r\n    }\r\n\r\n    function refundContributors(uint256 _causeId) external {\r\n        FundraisingCause storage cause = causes[_causeId];\r\n        require(\r\n            cause.status == Status.Open,\r\n            \"Cause must be open to refund contributors\"\r\n        );\r\n        require(\r\n            msg.sender == cause.creator,\r\n            \"Only the cause creator can modify the cause\"\r\n        );\r\n        cause.status = Status.Refunded;\r\n    }\r\n\r\n    function claimRefund(uint256 _causeId) external {\r\n        FundraisingCause storage cause = causes[_causeId];\r\n        require(\r\n            cause.status == Status.Refunded,\r\n            \"Cause is not in Refunded status\"\r\n        );\r\n        uint256 contributorBalance = contributorBalances[_causeId][msg.sender];\r\n        require(contributorBalance > 0, \"No balance to claim\");\r\n        contributorBalances[_causeId][msg.sender] = 0;\r\n        totalContributorBalances[msg.sender] -= contributorBalance;\r\n\r\n        if (cause.tokenAddress == address(0)) {\r\n            payable(msg.sender).transfer(contributorBalance);\r\n        } else {\r\n            IERC20 token = IERC20(cause.tokenAddress);\r\n            require(\r\n                token.transfer(msg.sender, contributorBalance),\r\n                \"Token transfer failed\"\r\n            );\r\n        }\r\n\r\n        emit Refunded(_causeId, msg.sender, contributorBalance);\r\n    }\r\n\r\n    function getContributorBalanceForCause(\r\n        uint256 _causeId\r\n    ) external view returns (uint256) {\r\n        return contributorBalances[_causeId][msg.sender];\r\n    }\r\n\r\n    function getTotalContributorBalance() external view returns (uint256) {\r\n        return totalContributorBalances[msg.sender];\r\n    }\r\n\r\n    function getCausesByStatus(\r\n        Status _status\r\n    ) external view returns (FundraisingCause[] memory) {\r\n        uint256 count = 0;\r\n        if (_status == Status.All) {\r\n            count = causes.length;\r\n        } else {\r\n            for (uint256 i = 0; i < causes.length; i++) {\r\n                if (causes[i].status == _status) {\r\n                    count++;\r\n                }\r\n            }\r\n        }\r\n\r\n        FundraisingCause[] memory result = new FundraisingCause[](count);\r\n        uint256 index = 0;\r\n        if (_status == Status.All) {\r\n            for (uint256 i = 0; i < causes.length; i++) {\r\n                result[index] = causes[i];\r\n                index++;\r\n            }\r\n        } else {\r\n            for (uint256 i = 0; i < causes.length; i++) {\r\n                if (causes[i].status == _status) {\r\n                    result[index] = causes[i];\r\n                    index++;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function getContributorCauses(\r\n        address _contributor\r\n    ) external view returns (FundraisingCause[] memory) {\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < causes.length; i++) {\r\n            if (contributorBalances[i][_contributor] > 0) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        FundraisingCause[] memory result = new FundraisingCause[](count);\r\n        uint256 index = 0;\r\n        for (uint256 i = 0; i < causes.length; i++) {\r\n            if (contributorBalances[i][_contributor] > 0) {\r\n                result[index] = causes[i];\r\n                index++;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function getRelatedCauses(\r\n        uint256 _causeID\r\n    ) external view returns (FundraisingCause[] memory) {\r\n        require(_causeID < causes.length, \"Invalid cause ID\");\r\n\r\n        address creator = causes[_causeID].creator;\r\n\r\n        // Count the number of causes related to the creator\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < causes.length; i++) {\r\n            if (causes[i].creator == creator) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        FundraisingCause[] memory result = new FundraisingCause[](count);\r\n        uint256 index = 0;\r\n\r\n        // Retrieve causes related to the creator\r\n        for (uint256 i = 0; i < causes.length; i++) {\r\n            if (causes[i].creator == creator) {\r\n                result[index] = causes[i];\r\n                index++;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function getContributorsAndBalancesForCause(\r\n        uint256 _causeID\r\n    ) external view returns (address[] memory, uint256[] memory) {\r\n        require(_causeID < causes.length, \"Invalid cause ID\");\r\n\r\n        // Get the contributor count for the cause\r\n        uint256 contributorCount = causeContributors[_causeID].length;\r\n\r\n        // Initialize arrays to store contributors and balances\r\n        address[] memory contributors = new address[](contributorCount);\r\n        uint256[] memory balances = new uint256[](contributorCount);\r\n\r\n        // Populate the arrays with contributors and balances\r\n        for (uint256 i = 0; i < contributorCount; i++) {\r\n            address contributor = causeContributors[_causeID][i];\r\n            uint256 contributorBalance = contributorBalances[_causeID][\r\n                contributor\r\n            ];\r\n\r\n            contributors[i] = contributor;\r\n            balances[i] = contributorBalance;\r\n        }\r\n\r\n        return (contributors, balances);\r\n    }\r\n\r\n    function setOwnerFeePercentage(uint256 _newPercentage) external onlyOwner {\r\n        require(\r\n            _newPercentage <= 5,\r\n            \"Invalid fee percentage\"\r\n        );\r\n        ownerFeePercentage = _newPercentage;\r\n    }\r\n\r\n    receive() external payable {} // Fallback function to receive Ether\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"causeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CauseCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"causeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"FeeSettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"causeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsContributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"causeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_causeId\",\"type\":\"uint256\"}],\"name\":\"cancelCause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"causeContributors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"causes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"causeID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"htmlDescription\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum FundRaisingContract.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_causeId\",\"type\":\"uint256\"}],\"name\":\"claimRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_causeId\",\"type\":\"uint256\"}],\"name\":\"closeCause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_causeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributorBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_htmlDescription\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"createCause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawalPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FundRaisingContract.Status\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"getCausesByStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"causeID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"htmlDescription\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum FundRaisingContract.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createDate\",\"type\":\"uint256\"}],\"internalType\":\"struct FundRaisingContract.FundraisingCause[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_causeId\",\"type\":\"uint256\"}],\"name\":\"getContributorBalanceForCause\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"getContributorCauses\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"causeID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"htmlDescription\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum FundRaisingContract.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createDate\",\"type\":\"uint256\"}],\"internalType\":\"struct FundRaisingContract.FundraisingCause[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_causeID\",\"type\":\"uint256\"}],\"name\":\"getContributorsAndBalancesForCause\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_causeID\",\"type\":\"uint256\"}],\"name\":\"getContributorsForCause\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"causeId\",\"type\":\"uint256\"}],\"name\":\"getFundraisingCause\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"causeID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"htmlDescription\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum FundRaisingContract.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createDate\",\"type\":\"uint256\"}],\"internalType\":\"struct FundRaisingContract.FundraisingCause\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_causeID\",\"type\":\"uint256\"}],\"name\":\"getRelatedCauses\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"causeID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"htmlDescription\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum FundRaisingContract.Status\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"createDate\",\"type\":\"uint256\"}],\"internalType\":\"struct FundRaisingContract.FundraisingCause[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalContributorBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_causeId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_htmlDescription\",\"type\":\"string\"}],\"name\":\"modifyCause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_causeId\",\"type\":\"uint256\"}],\"name\":\"refundContributors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPercentage\",\"type\":\"uint256\"}],\"name\":\"setOwnerFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalContributorBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"updateFeeSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FundRaisingContract", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f23f05ac9ebce513bd893cd1a18efff8c12a7bf26cafad4192a7e0a815717ef6"}