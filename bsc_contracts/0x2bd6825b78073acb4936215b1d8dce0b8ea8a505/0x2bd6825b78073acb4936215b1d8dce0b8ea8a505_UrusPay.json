{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.7;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IFactory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n}\r\n\r\ncontract DividendDistributor {\r\n    address public _token;\r\n    address public WBNB;\r\n    address[] public shareholders;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    IBEP20 public REWARD;\r\n    IRouter public router;\r\n\r\n    mapping(address => uint256) public shareholderIndexes;\r\n    mapping(address => uint256) public shareholderClaims;\r\n    mapping(address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalDistributed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 public dividendsPerShareAccuracyFactor = 10**36;\r\n    uint256 public minPeriod = 1 hours;\r\n    uint256 public minDistribution = 1 * (10**8);\r\n    uint256 public currentIndex;\r\n    bool initialized;\r\n    modifier initialization() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token);\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _router,\r\n        IBEP20 reward,\r\n        address token\r\n    ) {\r\n        REWARD = reward;\r\n        router = IRouter(_router);\r\n        _token = token;\r\n        WBNB = router.WETH();\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external onlyToken {\r\n        minPeriod = _minPeriod;\r\n        minDistribution = _minDistribution;\r\n    }\r\n\r\n    function setShare(address shareholder, uint256 amount) external onlyToken {\r\n        if (shares[shareholder].amount > 0) {\r\n            distributeDividend(shareholder);\r\n        }\r\n        if (amount > 0 && shares[shareholder].amount == 0) {\r\n            addShareholder(shareholder);\r\n        } else if (amount == 0 && shares[shareholder].amount > 0) {\r\n            removeShareholder(shareholder);\r\n        }\r\n        totalShares = (totalShares - shares[shareholder].amount) + amount;\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(\r\n            shares[shareholder].amount\r\n        );\r\n    }\r\n\r\n    function deposit() external payable onlyToken {\r\n        uint256 balanceBefore = REWARD.balanceOf(address(this));\r\n        address[] memory path = new address[](2);\r\n        path[0] = WBNB;\r\n        path[1] = address(REWARD);\r\n        uint256[] memory price = router.getAmountsOut(msg.value, path);\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: msg.value\r\n        }(0, path, address(this), block.timestamp);\r\n        uint256 amount = REWARD.balanceOf(address(this)) - balanceBefore;\r\n        totalDividends = totalDividends + amount;\r\n        dividendsPerShare =\r\n            dividendsPerShare +\r\n            ((dividendsPerShareAccuracyFactor * amount) / totalShares);\r\n    }\r\n\r\n    function process(uint256 gas) external onlyToken {\r\n        uint256 shareholderCount = shareholders.length;\r\n        if (shareholderCount == 0) {\r\n            return;\r\n        }\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex = 0;\r\n            }\r\n            if (shouldDistribute(shareholders[currentIndex])) {\r\n                distributeDividend(shareholders[currentIndex]);\r\n            }\r\n            gasUsed = (gasUsed + gasLeft) - gasleft();\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n\r\n    function shouldDistribute(address shareholder)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return\r\n            shareholderClaims[shareholder] + minPeriod < block.timestamp &&\r\n            getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        if (shares[shareholder].amount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if (amount > 0) {\r\n            totalDistributed = totalDistributed + amount;\r\n            REWARD.transfer(shareholder, amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised =\r\n                shares[shareholder].totalRealised +\r\n                amount;\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(\r\n                shares[shareholder].amount\r\n            );\r\n        }\r\n    }\r\n\r\n    function claimDividend(address shareholder) external onlyToken {\r\n        distributeDividend(shareholder);\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (shares[shareholder].amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(\r\n            shares[shareholder].amount\r\n        );\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if (shareholderTotalDividends <= shareholderTotalExcluded) {\r\n            return 0;\r\n        }\r\n        return shareholderTotalDividends - shareholderTotalExcluded;\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (share * dividendsPerShare) / dividendsPerShareAccuracyFactor;\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[\r\n            shareholders.length - 1\r\n        ];\r\n        shareholderIndexes[\r\n            shareholders[shareholders.length - 1]\r\n        ] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n\r\n    function setDividendTokenAddress(address newToken) external onlyToken {\r\n        REWARD = IBEP20(newToken);\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract UrusPay is Context, Ownable {\r\n    using Address for address payable;\r\n    //IMPORTS\r\n    DividendDistributor public distributor;\r\n    IBEP20 public BTC = IBEP20(0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c);\r\n    IRouter public router = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    //MAPPING\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => uint256) public _rOwned;\r\n    mapping(address => uint256) public _tOwned;\r\n    mapping(address => bool) private _isExcludedFromFee;\r\n    mapping(address => bool) private _isExcluded;\r\n    mapping(address => bool) public isDividendExempt;\r\n    mapping(address => bool) public isPair;\r\n    mapping(address => bool) public isBlacklisted;\r\n    address[] private _excluded;\r\n    address public deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n    address public marketingWallet = msg.sender;\r\n    address public rewardWallet = msg.sender;\r\n\r\n    bool public swapEnabled = true;\r\n    bool private swapping;\r\n\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    uint256 private _tTotal = 1000000000 * 10**_decimals;\r\n    uint256 private _ts = _tTotal;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 public distributorGas = 300000;\r\n    uint256 public maxBuy = _tTotal;\r\n    uint256 public maxSell = _tTotal;\r\n    string private constant _name = \"UrusPay\";\r\n    string private constant _symbol = \"URPY\";\r\n\r\n    struct Taxes {\r\n        uint256 rfi;\r\n        uint256 marketing;\r\n        uint256 Burn;\r\n        uint256 TokenRef;\r\n    }\r\n    struct TotFeesPaidStruct {\r\n        uint256 rfi;\r\n        uint256 marketing;\r\n        uint256 Burn;\r\n        uint256 TokenRef;\r\n    }\r\n    struct valuesFromGetValues {\r\n        uint256 rAmount;\r\n        uint256 rTransferAmount;\r\n        uint256 rRfi;\r\n        uint256 rBurn;\r\n        uint256 rMarketing;\r\n        uint256 rTokenRef;\r\n        uint256 tTransferAmount;\r\n        uint256 tRfi;\r\n        uint256 tBurn;\r\n        uint256 tMarketing;\r\n        uint256 tTokenRef;\r\n    }\r\n    Taxes public taxes = Taxes(0, 250, 500, 250);\r\n    Taxes public sellTaxes = Taxes(0, 250, 500, 250);\r\n    TotFeesPaidStruct public totFeesPaid;\r\n\r\n    modifier lockTheSwap() {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n\r\n    constructor() {\r\n        address _pair = IFactory(router.factory()).createPair(\r\n            address(this),\r\n            router.WETH()\r\n        );\r\n\r\n        distributor = new DividendDistributor(\r\n            address(router),\r\n            BTC,\r\n            address(this)\r\n        );\r\n\r\n        excludeFromReward(_pair);\r\n        excludeFromReward(address(0));\r\n        excludeFromReward(address(this));\r\n        _rOwned[owner()] = _rTotal;\r\n\r\n        isPair[_pair] = true;\r\n\r\n        isDividendExempt[_pair] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[marketingWallet] = true;\r\n        _isExcludedFromFee[deadWallet] = true;\r\n\r\n        emit Transfer(address(0), owner(), _tTotal);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _ts;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        if (_isExcluded[account]) {\r\n            return _tOwned[account];\r\n        } else {\r\n            return tokenFromReflection(_rOwned[account]);\r\n        }\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"BEP20: decreased allowance below zero\"\r\n        );\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferRfi)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferRfi) {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true, false);\r\n            return s.rAmount;\r\n        } else {\r\n            valuesFromGetValues memory s = _getValues(tAmount, true, false);\r\n            return s.rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount / currentRate;\r\n    }\r\n\r\n    function _reflectRfi(uint256 rRfi, uint256 tRfi) private {\r\n        _rTotal -= rRfi;\r\n        totFeesPaid.rfi += tRfi;\r\n    }\r\n\r\n    function _takeMarketing(\r\n        uint256 rMarketing,\r\n        uint256 tMarketing,\r\n        bool isSell\r\n    ) private {\r\n        address receiver = isSell ? address(this) : rewardWallet;\r\n        totFeesPaid.marketing += tMarketing;\r\n\r\n        if (_isExcluded[receiver]) {\r\n            _tOwned[receiver] += tMarketing;\r\n        }\r\n        _rOwned[receiver] += rMarketing;\r\n    }\r\n\r\n    function _takeTokenRef(\r\n        uint256 rTokenRef,\r\n        uint256 tTokenRef,\r\n        bool isSell\r\n    ) private {\r\n        address receiver = isSell ? address(this) : rewardWallet;\r\n        totFeesPaid.TokenRef += tTokenRef;\r\n\r\n        if (_isExcluded[receiver]) {\r\n            _tOwned[receiver] += tTokenRef;\r\n        }\r\n        _rOwned[receiver] += rTokenRef;\r\n    }\r\n\r\n    function _getValues(\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isSell\r\n    ) private view returns (valuesFromGetValues memory to_return) {\r\n        to_return = _getTValues(tAmount, takeFee, isSell);\r\n        (\r\n            to_return.rAmount,\r\n            to_return.rTransferAmount,\r\n            to_return.rRfi,\r\n            to_return.rMarketing\r\n        ) = _getRValues1(to_return, tAmount, takeFee, _getRate());\r\n        (to_return.rTokenRef, to_return.rBurn) = _getRValues2(\r\n            to_return,\r\n            takeFee,\r\n            _getRate()\r\n        );\r\n\r\n        return to_return;\r\n    }\r\n\r\n    function _getTValues(\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isSell\r\n    ) private view returns (valuesFromGetValues memory s) {\r\n        if (!takeFee) {\r\n            s.tTransferAmount = tAmount;\r\n            return s;\r\n        }\r\n        Taxes memory temp;\r\n        if (isSell) temp = sellTaxes;\r\n        else temp = taxes;\r\n\r\n        s.tRfi = (tAmount * temp.rfi) / 10000;\r\n        s.tMarketing = (tAmount * temp.marketing) / 10000;\r\n        s.tBurn = (tAmount * temp.Burn) / 10000;\r\n        s.tTokenRef = (tAmount * temp.TokenRef) / 10000;\r\n        s.tTransferAmount =\r\n            tAmount -\r\n            s.tRfi -\r\n            s.tMarketing -\r\n            s.tTokenRef -\r\n            s.tBurn;\r\n\r\n        return s;\r\n    }\r\n\r\n    function _getRValues1(\r\n        valuesFromGetValues memory s,\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 rAmount = tAmount * currentRate;\r\n\r\n        if (!takeFee) {\r\n            return (rAmount, rAmount, 0, 0);\r\n        }\r\n\r\n        uint256 rRfi = s.tRfi * currentRate;\r\n        uint256 rMarketing = s.tMarketing * currentRate;\r\n        uint256 rTokenRef = s.tTokenRef * currentRate;\r\n        uint256 rBurn = s.tBurn * currentRate;\r\n        uint256 rTransferAmount = rAmount -\r\n            rRfi -\r\n            rMarketing -\r\n            rTokenRef -\r\n            rBurn;\r\n\r\n        return (rAmount, rTransferAmount, rRfi, rMarketing);\r\n    }\r\n\r\n    function _getRValues2(\r\n        valuesFromGetValues memory s,\r\n        bool takeFee,\r\n        uint256 currentRate\r\n    ) private pure returns (uint256 rTokenRef, uint256 rBurn) {\r\n        if (!takeFee) {\r\n            return (0, 0);\r\n        }\r\n\r\n        rTokenRef = s.tTokenRef * currentRate;\r\n        rBurn = s.tBurn * currentRate;\r\n        return (rTokenRef, rBurn);\r\n    }\r\n\r\n    function _getRate() public view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() public view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (\r\n                _rOwned[_excluded[i]] > rSupply ||\r\n                _tOwned[_excluded[i]] > tSupply\r\n            ) return (_rTotal, _tTotal);\r\n            rSupply = rSupply - _rOwned[_excluded[i]];\r\n            tSupply = tSupply - _tOwned[_excluded[i]];\r\n        }\r\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"BEP20: transfer amount exceeds allowance\"\r\n        );\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(\r\n            amount <= balanceOf(from),\r\n            \"You are trying to transfer more than your balance\"\r\n        );\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\r\n            valuesFromGetValues memory s = _getValues(amount, false, false);\r\n            if (_isExcluded[from]) {\r\n                _tOwned[from] = _tOwned[from] - amount;\r\n            }\r\n            if (_isExcluded[to]) {\r\n                _tOwned[to] = _tOwned[to] + s.tTransferAmount;\r\n            }\r\n            _rOwned[from] = _rOwned[from] - s.rAmount;\r\n            _rOwned[to] = _rOwned[to] + s.rTransferAmount;\r\n            emit Transfer(from, to, amount);\r\n        } else {\r\n            bool takeFee = true;\r\n            bool isSell = false;\r\n            if (isPair[to]) isSell = true;\r\n            require(!isBlacklisted[from], \"You are blacklisted\");\r\n            require(!isBlacklisted[to], \"You are blacklisted\");\r\n\r\n            if (isSell) {\r\n                require(amount <= maxSell, \"Max Sell limit\");\r\n            } else {\r\n                require(amount <= maxBuy, \"Max Buy limit\");\r\n            }\r\n            valuesFromGetValues memory s = _txdata(amount, takeFee, isSell);\r\n\r\n            if (s.rRfi > 0 || s.tRfi > 0) _reflectRfi(s.rRfi, s.tRfi);\r\n            if (s.rMarketing > 0 || s.tMarketing > 0)\r\n                _takeMarketing(s.rMarketing, s.tMarketing, isSell);\r\n            if (s.rTokenRef > 0 || s.tTokenRef > 0)\r\n                _takeTokenRef(s.rTokenRef, s.tTokenRef, isSell);\r\n\r\n            Taxes memory fees = isSell ? sellTaxes : taxes;\r\n\r\n            uint256 swapAmount = (fees.marketing + fees.TokenRef) > 0\r\n                ? (amount * (fees.marketing + fees.TokenRef)) / 10000\r\n                : 0;\r\n\r\n            uint256 burnAmount = fees.Burn > 0\r\n                ? (amount * fees.Burn) / 10000\r\n                : 0;\r\n\r\n            if (swapEnabled && !isPair[from] && takeFee) {\r\n                contractSwap(amount, sellTaxes);\r\n            }\r\n\r\n            if (_isExcluded[from]) {\r\n                _tOwned[from] = _tOwned[from] - amount;\r\n            }\r\n            if (_isExcluded[to]) {\r\n                _tOwned[to] = _tOwned[to] + s.tTransferAmount;\r\n            }\r\n\r\n            _rOwned[from] = _rOwned[from] - s.rAmount;\r\n            _rOwned[to] = _rOwned[to] + s.rTransferAmount;\r\n\r\n            if (!isDividendExempt[from]) {\r\n                try distributor.setShare(from, balanceOf(from)) {} catch {}\r\n            }\r\n\r\n            if (!isDividendExempt[to]) {\r\n                try distributor.setShare(to, balanceOf(to)) {} catch {}\r\n            }\r\n            try distributor.process(distributorGas) {} catch {}\r\n            if (swapAmount > 0 && takeFee)\r\n                emit Transfer(\r\n                    from,\r\n                    isSell ? address(this) : rewardWallet,\r\n                    swapAmount\r\n                );\r\n            if (burnAmount > 0 && takeFee) {\r\n                _ts -= burnAmount;\r\n                emit Transfer(from, address(0), burnAmount);\r\n            }\r\n\r\n            emit Transfer(from, to, s.tTransferAmount);\r\n        }\r\n    }\r\n\r\n    function burn(uint256 amount) external {\r\n        require(amount > 0, \"You need to burn more than 0.\");\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        valuesFromGetValues memory s = _getValues(amount, false, false);\r\n        if (_isExcluded[account]) {\r\n            _tOwned[account] = _tOwned[account] - amount;\r\n        }\r\n        if (_isExcluded[deadWallet]) {\r\n            _tOwned[deadWallet] = _tOwned[deadWallet] + s.tTransferAmount;\r\n        }\r\n        _rOwned[account] = _rOwned[account] - s.rAmount;\r\n        _rOwned[deadWallet] = _rOwned[deadWallet] + s.rTransferAmount;\r\n    }\r\n\r\n    function _txdata(\r\n        uint256 tAmount,\r\n        bool takeFee,\r\n        bool isSell\r\n    ) private view returns (valuesFromGetValues memory s) {\r\n        valuesFromGetValues memory ss = _getValues(tAmount, takeFee, isSell);\r\n        return (ss);\r\n    }\r\n\r\n    function getamount(uint256 amount, address[] memory path)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return router.getAmountsOut(amount, path)[1];\r\n    }\r\n\r\n    function contractSwap(uint256 tAmount, Taxes memory temp)\r\n        private\r\n        lockTheSwap\r\n    {\r\n        uint256 amountToSwap = (temp.marketing + temp.TokenRef) > 0\r\n            ? (tAmount * (temp.marketing + temp.TokenRef)) / 10000\r\n            : 0;\r\n        amountToSwap = balanceOf(address(this)) >= amountToSwap\r\n            ? amountToSwap\r\n            : balanceOf(address(this));\r\n\r\n        _approve(address(this), address(router), balanceOf(address(this)));\r\n\r\n        if (amountToSwap > 0) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = router.WETH();\r\n\r\n            uint256 amountBNBMarketing = temp.marketing > 0\r\n                ? getamount((tAmount * (temp.marketing)) / 10000, path)\r\n                : 0;\r\n            uint256 amountBNBRef = temp.TokenRef > 0\r\n                ? getamount((tAmount * (temp.TokenRef)) / 10000, path)\r\n                : 0;\r\n\r\n            router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                amountToSwap,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n\r\n            if (amountBNBRef > 0) {\r\n                try distributor.deposit{value: amountBNBRef}() {} catch {}\r\n            }\r\n            bool success;\r\n            if (amountBNBMarketing > 0) {\r\n                (success, ) = payable(marketingWallet).call{\r\n                    value: address(this).balance\r\n                }(\"\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function claimDividend() external {\r\n        distributor.claimDividend(msg.sender);\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return distributor.getUnpaidEarnings(shareholder);\r\n    }\r\n\r\n    function excludeFromReward(address account) public onlyOwner {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if (_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcluded[account], \"Account is not excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function setFees(\r\n        uint256 _rfiFee,\r\n        uint256 _marketingFee,\r\n        uint256 _burnFee,\r\n        uint256 _TokenRefFee,\r\n        uint256 _sellRfiFee,\r\n        uint256 _sellMarketingFee,\r\n        uint256 _sellBurnFee,\r\n        uint256 _sellTokenRefFee\r\n    ) external onlyOwner {\r\n        require(\r\n            (_rfiFee + _marketingFee + _burnFee + _TokenRefFee) <= 3000,\r\n            \"owner can't change fee more than 30%\"\r\n        );\r\n        require(\r\n            (_sellRfiFee +\r\n                _sellMarketingFee +\r\n                _sellBurnFee +\r\n                _sellTokenRefFee) <= 3000,\r\n            \"owner can't change fee more than 30%\"\r\n        );\r\n        taxes = Taxes(_rfiFee, _marketingFee, _burnFee, _TokenRefFee);\r\n        sellTaxes = Taxes(\r\n            _sellRfiFee,\r\n            _sellMarketingFee,\r\n            _sellBurnFee,\r\n            _sellTokenRefFee\r\n        );\r\n    }\r\n\r\n    function setMaxBuyAmount(uint256 amount) public onlyOwner {\r\n        maxBuy = amount;\r\n    }\r\n\r\n    function setMaxSellAmount(uint256 amount) public onlyOwner {\r\n        maxSell = amount;\r\n    }\r\n\r\n    function excludeFromFee(address account, bool io) public onlyOwner {\r\n        _isExcludedFromFee[account] = io;\r\n    }\r\n\r\n    function setInBlacklist(address account, bool io) public onlyOwner {\r\n        isBlacklisted[account] = io;\r\n    }\r\n\r\n    function setPair(address pairAdress, bool io) public onlyOwner {\r\n        isPair[pairAdress] = io;\r\n    }\r\n\r\n    function updateMarketingWallet(address newWallet) external onlyOwner {\r\n        require(newWallet != address(0), \"Fee Address cannot be zero address\");\r\n        marketingWallet = newWallet;\r\n    }\r\n\r\n    function updateRewardWallet(address newWallet) external onlyOwner {\r\n        require(newWallet != address(0), \"Fee Address cannot be zero address\");\r\n        rewardWallet = newWallet;\r\n    }\r\n\r\n    function updateSwapEnabled(bool _enabled) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n    }\r\n\r\n    function rescueBNB(uint256 weiAmount) external onlyOwner {\r\n        require(address(this).balance >= weiAmount, \"insufficient BNB balance\");\r\n        bool success;\r\n        (success, ) = payable(msg.sender).call{value: weiAmount}(\"\");\r\n    }\r\n\r\n    function rescueAnyBEP20Tokens(\r\n        address _tokenAddr,\r\n        address _to,\r\n        uint256 _amount\r\n    ) public onlyOwner {\r\n        IBEP20(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n\r\n    function setDividendExempt(address account, bool b) public onlyOwner {\r\n        isDividendExempt[account] = b;\r\n    }\r\n\r\n    function setDistributionCriteria(\r\n        uint256 _minPeriod,\r\n        uint256 _minDistribution\r\n    ) external onlyOwner {\r\n        distributor.setDistributionCriteria(_minPeriod, _minDistribution);\r\n    }\r\n\r\n    function setDistributorSettings(uint256 gas) external onlyOwner {\r\n        require(gas < 3000000);\r\n        distributorGas = gas;\r\n    }\r\n\r\n    function setDividendToken(address _newContract) external onlyOwner {\r\n        require(_newContract != address(0));\r\n        distributor.setDividendTokenAddress(_newContract);\r\n    }\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event FeesChanged();\r\n    event UpdatedRouter(address oldRouter, address newRouter);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"UpdatedRouter\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BTC\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getCurrentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_rOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_tOwned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract DividendDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"io\",\"type\":\"bool\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getUnpaidEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferRfi\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueAnyBEP20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TokenRef\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"setDistributorSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"b\",\"type\":\"bool\"}],\"name\":\"setDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"setDividendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rfiFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TokenRefFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellRfiFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellBurnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellTokenRefFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"io\",\"type\":\"bool\"}],\"name\":\"setInBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxSellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAdress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"io\",\"type\":\"bool\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TokenRef\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totFeesPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rfi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TokenRef\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"updateRewardWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UrusPay", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7b5fac1d22c0d17d6271010b45a19145a668137c488631b505eaae10116155a6"}