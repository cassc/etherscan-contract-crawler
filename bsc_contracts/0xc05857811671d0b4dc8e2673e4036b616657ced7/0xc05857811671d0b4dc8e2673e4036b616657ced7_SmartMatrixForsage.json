{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\ncontract SmartMatrixForsageBasic {\r\n    address public contractOwner;\r\n\r\n    struct User {\r\n        uint256 id;\r\n        address referrer;\r\n        uint256 partnersCount;\r\n        mapping(uint8 => bool) activeX3Levels;\r\n        mapping(uint8 => bool) activeX6Levels;\r\n        mapping(uint8 => X3) x3Matrix;\r\n        mapping(uint8 => X6) x6Matrix;\r\n    }\r\n\r\n    struct X3 {\r\n        address currentReferrer;\r\n        address[] referrals;\r\n        bool blocked;\r\n        uint256 reinvestCount;\r\n    }\r\n\r\n    struct X6 {\r\n        address currentReferrer;\r\n        address[] firstLevelReferrals;\r\n        address[] secondLevelReferrals;\r\n        bool blocked;\r\n        uint256 reinvestCount;\r\n        address closedPart;\r\n    }\r\n\r\n    uint8 public LAST_LEVEL;\r\n\r\n    mapping(address => User) public users;\r\n    mapping(uint256 => address) public idToAddress;\r\n    mapping(uint256 => address) public userIds;\r\n    mapping(address => uint256) public balances;\r\n\r\n    uint256 public lastUserId;\r\n    address public id1;\r\n\r\n    mapping(uint8 => uint256) public levelPrice;\r\n\r\n    IERC20 public depositToken;\r\n\r\n    uint256 public BASIC_PRICE;\r\n\r\n    event Registration(\r\n        address indexed user,\r\n        address indexed referrer,\r\n        uint256 indexed userId,\r\n        uint256 referrerId\r\n    );\r\n    event Reinvest(\r\n        address indexed user,\r\n        address indexed currentReferrer,\r\n        address indexed caller,\r\n        uint8 matrix,\r\n        uint8 level\r\n    );\r\n    event Upgrade(\r\n        address indexed user,\r\n        address indexed referrer,\r\n        uint8 matrix,\r\n        uint8 level\r\n    );\r\n    event NewUserPlace(\r\n        address indexed user,\r\n        address indexed referrer,\r\n        uint8 matrix,\r\n        uint8 level,\r\n        uint8 place\r\n    );\r\n    event MissedEthReceive(\r\n        address indexed receiver,\r\n        address indexed from,\r\n        uint8 matrix,\r\n        uint8 level\r\n    );\r\n    event SentExtraEthDividends(\r\n        address indexed from,\r\n        address indexed receiver,\r\n        uint8 matrix,\r\n        uint8 level\r\n    );\r\n}\r\n\r\ncontract SmartMatrixForsage is SmartMatrixForsageBasic {\r\n    using SafeERC20 for IERC20;\r\n\r\n    modifier onlyContractOwner() {\r\n        require(msg.sender == contractOwner, \"onlyOwner\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _owner, IERC20 _depositTokenAddress) public {\r\n        contractOwner = _owner;\r\n\r\n        BASIC_PRICE = 25e17;\r\n        LAST_LEVEL = 8;\r\n\r\n        levelPrice[1] = BASIC_PRICE;\r\n        levelPrice[2] = 5e18;\r\n        levelPrice[3] = 10e18;\r\n        levelPrice[4] = 20e18;\r\n        levelPrice[5] = 40e18;\r\n        levelPrice[6] = 80e18;\r\n        levelPrice[7] = 160e18;\r\n        levelPrice[8] = 320e18;\r\n\r\n        id1 = _owner;\r\n\r\n        User memory user = User({\r\n            id: 1,\r\n            referrer: address(0),\r\n            partnersCount: uint256(0)\r\n        });\r\n\r\n        users[_owner] = user;\r\n        idToAddress[1] = _owner;\r\n\r\n        for (uint8 i = 1; i <= LAST_LEVEL; i++) {\r\n            users[_owner].activeX3Levels[i] = true;\r\n            users[_owner].activeX6Levels[i] = true;\r\n        }\r\n\r\n        userIds[1] = _owner;\r\n        lastUserId = 2;\r\n\r\n        depositToken = _depositTokenAddress;\r\n    }\r\n\r\n    fallback() external {\r\n        if (msg.data.length == 0) {\r\n            return registration(msg.sender, id1);\r\n        }\r\n\r\n        registration(msg.sender, bytesToAddress(msg.data));\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function registrationExt(address referrerAddress) external payable {\r\n        require(msg.value == 1e15, \"invalid bnb amount\");\r\n        registration(msg.sender, referrerAddress);\r\n    }\r\n\r\n    function registrationFor(address userAddress, address referrerAddress)\r\n        external\r\n        payable\r\n    {\r\n        require(msg.value == 1e15, \"invalid bnb amount\");\r\n        registration(userAddress, referrerAddress);\r\n    }\r\n\r\n    function buyNewLevel(uint8 matrix, uint8 level) external {\r\n        depositToken.safeTransferFrom(msg.sender, contractOwner, 1e18);\r\n        _buyNewLevel(msg.sender, matrix, level);\r\n    }\r\n\r\n    function buyNewLevelFor(\r\n        address userAddress,\r\n        uint8 matrix,\r\n        uint8 level\r\n    ) external {\r\n        depositToken.safeTransferFrom(msg.sender, contractOwner, 1e18);\r\n        _buyNewLevel(userAddress, matrix, level);\r\n    }\r\n\r\n    function _buyNewLevel(\r\n        address _userAddress,\r\n        uint8 matrix,\r\n        uint8 level\r\n    ) internal {\r\n        require(\r\n            isUserExists(_userAddress),\r\n            \"user is not exists. Register first.\"\r\n        );\r\n        require(matrix == 1 || matrix == 2, \"invalid matrix\");\r\n\r\n        depositToken.safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            levelPrice[level]\r\n        );\r\n        require(level > 1 && level <= LAST_LEVEL, \"invalid level\");\r\n\r\n        if (matrix == 1) {\r\n            require(\r\n                users[_userAddress].activeX3Levels[level - 1],\r\n                \"buy previous level first\"\r\n            );\r\n            require(\r\n                !users[_userAddress].activeX3Levels[level],\r\n                \"level already activated\"\r\n            );\r\n\r\n            if (users[_userAddress].x3Matrix[level - 1].blocked) {\r\n                users[_userAddress].x3Matrix[level - 1].blocked = false;\r\n            }\r\n\r\n            address freeX3Referrer = findFreeX3Referrer(_userAddress, level);\r\n            users[_userAddress]\r\n                .x3Matrix[level]\r\n                .currentReferrer = freeX3Referrer;\r\n            users[_userAddress].activeX3Levels[level] = true;\r\n            updateX3Referrer(_userAddress, freeX3Referrer, level);\r\n\r\n            emit Upgrade(_userAddress, freeX3Referrer, 1, level);\r\n        } else {\r\n            require(\r\n                users[_userAddress].activeX6Levels[level - 1],\r\n                \"buy previous level first\"\r\n            );\r\n            require(\r\n                !users[_userAddress].activeX6Levels[level],\r\n                \"level already activated\"\r\n            );\r\n\r\n            if (users[_userAddress].x6Matrix[level - 1].blocked) {\r\n                users[_userAddress].x6Matrix[level - 1].blocked = false;\r\n            }\r\n\r\n            address freeX6Referrer = findFreeX6Referrer(_userAddress, level);\r\n\r\n            users[_userAddress].activeX6Levels[level] = true;\r\n            updateX6Referrer(_userAddress, freeX6Referrer, level);\r\n\r\n            emit Upgrade(_userAddress, freeX6Referrer, 2, level);\r\n        }\r\n    }\r\n\r\n    function registration(address userAddress, address referrerAddress)\r\n        private\r\n    {\r\n        depositToken.safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            BASIC_PRICE * 2\r\n        );\r\n\r\n        require(!isUserExists(userAddress), \"user exists\");\r\n        require(isUserExists(referrerAddress), \"referrer not exists\");\r\n\r\n        uint32 size;\r\n        assembly {\r\n            size := extcodesize(userAddress)\r\n        }\r\n\r\n        User memory user = User({\r\n            id: lastUserId,\r\n            referrer: referrerAddress,\r\n            partnersCount: 0\r\n        });\r\n\r\n        users[userAddress] = user;\r\n        idToAddress[lastUserId] = userAddress;\r\n\r\n        users[userAddress].referrer = referrerAddress;\r\n\r\n        users[userAddress].activeX3Levels[1] = true;\r\n        users[userAddress].activeX6Levels[1] = true;\r\n\r\n        userIds[lastUserId] = userAddress;\r\n        lastUserId++;\r\n\r\n        users[referrerAddress].partnersCount++;\r\n\r\n        address freeX3Referrer = findFreeX3Referrer(userAddress, 1);\r\n        users[userAddress].x3Matrix[1].currentReferrer = freeX3Referrer;\r\n        updateX3Referrer(userAddress, freeX3Referrer, 1);\r\n\r\n        updateX6Referrer(userAddress, findFreeX6Referrer(userAddress, 1), 1);\r\n\r\n        emit Registration(\r\n            userAddress,\r\n            referrerAddress,\r\n            users[userAddress].id,\r\n            users[referrerAddress].id\r\n        );\r\n    }\r\n\r\n    function updateX3Referrer(\r\n        address userAddress,\r\n        address referrerAddress,\r\n        uint8 level\r\n    ) private {\r\n        users[referrerAddress].x3Matrix[level].referrals.push(userAddress);\r\n\r\n        if (users[referrerAddress].x3Matrix[level].referrals.length < 3) {\r\n            emit NewUserPlace(\r\n                userAddress,\r\n                referrerAddress,\r\n                1,\r\n                level,\r\n                uint8(users[referrerAddress].x3Matrix[level].referrals.length)\r\n            );\r\n            return sendETHDividends(referrerAddress, userAddress, 1, level);\r\n        }\r\n\r\n        emit NewUserPlace(userAddress, referrerAddress, 1, level, 3);\r\n        //close matrix\r\n        users[referrerAddress].x3Matrix[level].referrals = new address[](0);\r\n        if (\r\n            !users[referrerAddress].activeX3Levels[level + 1] &&\r\n            level != LAST_LEVEL\r\n        ) {\r\n            users[referrerAddress].x3Matrix[level].blocked = true;\r\n        }\r\n\r\n        if (referrerAddress != id1) {\r\n            address freeReferrerAddress = findFreeX3Referrer(\r\n                referrerAddress,\r\n                level\r\n            );\r\n            if (\r\n                users[referrerAddress].x3Matrix[level].currentReferrer !=\r\n                freeReferrerAddress\r\n            ) {\r\n                users[referrerAddress]\r\n                    .x3Matrix[level]\r\n                    .currentReferrer = freeReferrerAddress;\r\n            }\r\n\r\n            users[referrerAddress].x3Matrix[level].reinvestCount++;\r\n            emit Reinvest(\r\n                referrerAddress,\r\n                freeReferrerAddress,\r\n                userAddress,\r\n                1,\r\n                level\r\n            );\r\n            updateX3Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            sendETHDividends(id1, userAddress, 1, level);\r\n            users[id1].x3Matrix[level].reinvestCount++;\r\n            emit Reinvest(id1, address(0), userAddress, 1, level);\r\n        }\r\n    }\r\n\r\n    function updateX6Referrer(\r\n        address userAddress,\r\n        address referrerAddress,\r\n        uint8 level\r\n    ) private {\r\n        require(\r\n            users[referrerAddress].activeX6Levels[level],\r\n            \"500. Referrer level is inactive\"\r\n        );\r\n\r\n        if (\r\n            users[referrerAddress].x6Matrix[level].firstLevelReferrals.length <\r\n            2\r\n        ) {\r\n            users[referrerAddress].x6Matrix[level].firstLevelReferrals.push(\r\n                userAddress\r\n            );\r\n            emit NewUserPlace(\r\n                userAddress,\r\n                referrerAddress,\r\n                2,\r\n                level,\r\n                uint8(\r\n                    users[referrerAddress]\r\n                        .x6Matrix[level]\r\n                        .firstLevelReferrals\r\n                        .length\r\n                )\r\n            );\r\n            users[userAddress]\r\n                .x6Matrix[level]\r\n                .currentReferrer = referrerAddress;\r\n\r\n            if (referrerAddress == id1) {\r\n                return sendETHDividends(referrerAddress, userAddress, 2, level);\r\n            }\r\n\r\n            address ref = users[referrerAddress]\r\n                .x6Matrix[level]\r\n                .currentReferrer;\r\n            users[ref].x6Matrix[level].secondLevelReferrals.push(userAddress);\r\n\r\n            uint256 len = users[ref].x6Matrix[level].firstLevelReferrals.length;\r\n\r\n            if (\r\n                (len == 2) &&\r\n                (users[ref].x6Matrix[level].firstLevelReferrals[0] ==\r\n                    referrerAddress) &&\r\n                (users[ref].x6Matrix[level].firstLevelReferrals[1] ==\r\n                    referrerAddress)\r\n            ) {\r\n                if (\r\n                    users[referrerAddress]\r\n                        .x6Matrix[level]\r\n                        .firstLevelReferrals\r\n                        .length == 1\r\n                ) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            } else if (\r\n                (len == 1 || len == 2) &&\r\n                users[ref].x6Matrix[level].firstLevelReferrals[0] ==\r\n                referrerAddress\r\n            ) {\r\n                if (\r\n                    users[referrerAddress]\r\n                        .x6Matrix[level]\r\n                        .firstLevelReferrals\r\n                        .length == 1\r\n                ) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 3);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 4);\r\n                }\r\n            } else if (\r\n                len == 2 &&\r\n                users[ref].x6Matrix[level].firstLevelReferrals[1] ==\r\n                referrerAddress\r\n            ) {\r\n                if (\r\n                    users[referrerAddress]\r\n                        .x6Matrix[level]\r\n                        .firstLevelReferrals\r\n                        .length == 1\r\n                ) {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 5);\r\n                } else {\r\n                    emit NewUserPlace(userAddress, ref, 2, level, 6);\r\n                }\r\n            }\r\n\r\n            return updateX6ReferrerSecondLevel(userAddress, ref, level);\r\n        }\r\n\r\n        users[referrerAddress].x6Matrix[level].secondLevelReferrals.push(\r\n            userAddress\r\n        );\r\n\r\n        if (users[referrerAddress].x6Matrix[level].closedPart != address(0)) {\r\n            if (\r\n                (users[referrerAddress].x6Matrix[level].firstLevelReferrals[\r\n                    0\r\n                ] ==\r\n                    users[referrerAddress].x6Matrix[level].firstLevelReferrals[\r\n                        1\r\n                    ]) &&\r\n                (users[referrerAddress].x6Matrix[level].firstLevelReferrals[\r\n                    0\r\n                ] == users[referrerAddress].x6Matrix[level].closedPart)\r\n            ) {\r\n                updateX6(userAddress, referrerAddress, level, true);\r\n                return\r\n                    updateX6ReferrerSecondLevel(\r\n                        userAddress,\r\n                        referrerAddress,\r\n                        level\r\n                    );\r\n            } else if (\r\n                users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] ==\r\n                users[referrerAddress].x6Matrix[level].closedPart\r\n            ) {\r\n                updateX6(userAddress, referrerAddress, level, true);\r\n                return\r\n                    updateX6ReferrerSecondLevel(\r\n                        userAddress,\r\n                        referrerAddress,\r\n                        level\r\n                    );\r\n            } else {\r\n                updateX6(userAddress, referrerAddress, level, false);\r\n                return\r\n                    updateX6ReferrerSecondLevel(\r\n                        userAddress,\r\n                        referrerAddress,\r\n                        level\r\n                    );\r\n            }\r\n        }\r\n\r\n        if (\r\n            users[referrerAddress].x6Matrix[level].firstLevelReferrals[1] ==\r\n            userAddress\r\n        ) {\r\n            updateX6(userAddress, referrerAddress, level, false);\r\n            return\r\n                updateX6ReferrerSecondLevel(\r\n                    userAddress,\r\n                    referrerAddress,\r\n                    level\r\n                );\r\n        } else if (\r\n            users[referrerAddress].x6Matrix[level].firstLevelReferrals[0] ==\r\n            userAddress\r\n        ) {\r\n            updateX6(userAddress, referrerAddress, level, true);\r\n            return\r\n                updateX6ReferrerSecondLevel(\r\n                    userAddress,\r\n                    referrerAddress,\r\n                    level\r\n                );\r\n        }\r\n\r\n        if (\r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]]\r\n                .x6Matrix[level]\r\n                .firstLevelReferrals\r\n                .length <=\r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]]\r\n                .x6Matrix[level]\r\n                .firstLevelReferrals\r\n                .length\r\n        ) {\r\n            updateX6(userAddress, referrerAddress, level, false);\r\n        } else {\r\n            updateX6(userAddress, referrerAddress, level, true);\r\n        }\r\n\r\n        updateX6ReferrerSecondLevel(userAddress, referrerAddress, level);\r\n    }\r\n\r\n    function updateX6(\r\n        address userAddress,\r\n        address referrerAddress,\r\n        uint8 level,\r\n        bool x2\r\n    ) private {\r\n        if (!x2) {\r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[0]]\r\n                .x6Matrix[level]\r\n                .firstLevelReferrals\r\n                .push(userAddress);\r\n            emit NewUserPlace(\r\n                userAddress,\r\n                users[referrerAddress].x6Matrix[level].firstLevelReferrals[0],\r\n                2,\r\n                level,\r\n                uint8(\r\n                    users[\r\n                        users[referrerAddress]\r\n                            .x6Matrix[level]\r\n                            .firstLevelReferrals[0]\r\n                    ].x6Matrix[level].firstLevelReferrals.length\r\n                )\r\n            );\r\n            emit NewUserPlace(\r\n                userAddress,\r\n                referrerAddress,\r\n                2,\r\n                level,\r\n                2 +\r\n                    uint8(\r\n                        users[\r\n                            users[referrerAddress]\r\n                                .x6Matrix[level]\r\n                                .firstLevelReferrals[0]\r\n                        ].x6Matrix[level].firstLevelReferrals.length\r\n                    )\r\n            );\r\n            users[userAddress].x6Matrix[level].currentReferrer = users[\r\n                referrerAddress\r\n            ].x6Matrix[level].firstLevelReferrals[0];\r\n        } else {\r\n            users[users[referrerAddress].x6Matrix[level].firstLevelReferrals[1]]\r\n                .x6Matrix[level]\r\n                .firstLevelReferrals\r\n                .push(userAddress);\r\n            emit NewUserPlace(\r\n                userAddress,\r\n                users[referrerAddress].x6Matrix[level].firstLevelReferrals[1],\r\n                2,\r\n                level,\r\n                uint8(\r\n                    users[\r\n                        users[referrerAddress]\r\n                            .x6Matrix[level]\r\n                            .firstLevelReferrals[1]\r\n                    ].x6Matrix[level].firstLevelReferrals.length\r\n                )\r\n            );\r\n            emit NewUserPlace(\r\n                userAddress,\r\n                referrerAddress,\r\n                2,\r\n                level,\r\n                4 +\r\n                    uint8(\r\n                        users[\r\n                            users[referrerAddress]\r\n                                .x6Matrix[level]\r\n                                .firstLevelReferrals[1]\r\n                        ].x6Matrix[level].firstLevelReferrals.length\r\n                    )\r\n            );\r\n            users[userAddress].x6Matrix[level].currentReferrer = users[\r\n                referrerAddress\r\n            ].x6Matrix[level].firstLevelReferrals[1];\r\n        }\r\n    }\r\n\r\n    function updateX6ReferrerSecondLevel(\r\n        address userAddress,\r\n        address referrerAddress,\r\n        uint8 level\r\n    ) private {\r\n        if (\r\n            users[referrerAddress].x6Matrix[level].secondLevelReferrals.length <\r\n            4\r\n        ) {\r\n            return sendETHDividends(referrerAddress, userAddress, 2, level);\r\n        }\r\n\r\n        address[] memory x6 = users[\r\n            users[referrerAddress].x6Matrix[level].currentReferrer\r\n        ].x6Matrix[level].firstLevelReferrals;\r\n\r\n        if (x6.length == 2) {\r\n            if (x6[0] == referrerAddress || x6[1] == referrerAddress) {\r\n                users[users[referrerAddress].x6Matrix[level].currentReferrer]\r\n                    .x6Matrix[level]\r\n                    .closedPart = referrerAddress;\r\n            } else if (x6.length == 1) {\r\n                if (x6[0] == referrerAddress) {\r\n                    users[\r\n                        users[referrerAddress].x6Matrix[level].currentReferrer\r\n                    ].x6Matrix[level].closedPart = referrerAddress;\r\n                }\r\n            }\r\n        }\r\n\r\n        users[referrerAddress]\r\n            .x6Matrix[level]\r\n            .firstLevelReferrals = new address[](0);\r\n        users[referrerAddress]\r\n            .x6Matrix[level]\r\n            .secondLevelReferrals = new address[](0);\r\n        users[referrerAddress].x6Matrix[level].closedPart = address(0);\r\n\r\n        if (\r\n            !users[referrerAddress].activeX6Levels[level + 1] &&\r\n            level != LAST_LEVEL\r\n        ) {\r\n            users[referrerAddress].x6Matrix[level].blocked = true;\r\n        }\r\n\r\n        users[referrerAddress].x6Matrix[level].reinvestCount++;\r\n\r\n        if (referrerAddress != id1) {\r\n            address freeReferrerAddress = findFreeX6Referrer(\r\n                referrerAddress,\r\n                level\r\n            );\r\n\r\n            emit Reinvest(\r\n                referrerAddress,\r\n                freeReferrerAddress,\r\n                userAddress,\r\n                2,\r\n                level\r\n            );\r\n            updateX6Referrer(referrerAddress, freeReferrerAddress, level);\r\n        } else {\r\n            emit Reinvest(id1, address(0), userAddress, 2, level);\r\n            sendETHDividends(id1, userAddress, 2, level);\r\n        }\r\n    }\r\n\r\n    function findFreeX3Referrer(address userAddress, uint8 level)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeX3Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n\r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n\r\n    function findFreeX6Referrer(address userAddress, uint8 level)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        while (true) {\r\n            if (users[users[userAddress].referrer].activeX6Levels[level]) {\r\n                return users[userAddress].referrer;\r\n            }\r\n\r\n            userAddress = users[userAddress].referrer;\r\n        }\r\n    }\r\n\r\n    function usersActiveX3Levels(address userAddress, uint8 level)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return users[userAddress].activeX3Levels[level];\r\n    }\r\n\r\n    function usersActiveX6Levels(address userAddress, uint8 level)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return users[userAddress].activeX6Levels[level];\r\n    }\r\n\r\n    function usersX3Matrix(address userAddress, uint8 level)\r\n        public\r\n        view\r\n        returns (\r\n            address,\r\n            address[] memory,\r\n            bool\r\n        )\r\n    {\r\n        return (\r\n            users[userAddress].x3Matrix[level].currentReferrer,\r\n            users[userAddress].x3Matrix[level].referrals,\r\n            users[userAddress].x3Matrix[level].blocked\r\n        );\r\n    }\r\n\r\n    function usersX6Matrix(address userAddress, uint8 level)\r\n        public\r\n        view\r\n        returns (\r\n            address,\r\n            address[] memory,\r\n            address[] memory,\r\n            bool,\r\n            address\r\n        )\r\n    {\r\n        return (\r\n            users[userAddress].x6Matrix[level].currentReferrer,\r\n            users[userAddress].x6Matrix[level].firstLevelReferrals,\r\n            users[userAddress].x6Matrix[level].secondLevelReferrals,\r\n            users[userAddress].x6Matrix[level].blocked,\r\n            users[userAddress].x6Matrix[level].closedPart\r\n        );\r\n    }\r\n\r\n    function isUserExists(address user) public view returns (bool) {\r\n        return (users[user].id != 0);\r\n    }\r\n\r\n    function findEthReceiver(\r\n        address userAddress,\r\n        address _from,\r\n        uint8 matrix,\r\n        uint8 level\r\n    ) private returns (address, bool) {\r\n        address receiver = userAddress;\r\n        bool isExtraDividends;\r\n        if (matrix == 1) {\r\n            while (true) {\r\n                if (users[receiver].x3Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 1, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].x3Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        } else {\r\n            while (true) {\r\n                if (users[receiver].x6Matrix[level].blocked) {\r\n                    emit MissedEthReceive(receiver, _from, 2, level);\r\n                    isExtraDividends = true;\r\n                    receiver = users[receiver].x6Matrix[level].currentReferrer;\r\n                } else {\r\n                    return (receiver, isExtraDividends);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function sendETHDividends(\r\n        address userAddress,\r\n        address _from,\r\n        uint8 matrix,\r\n        uint8 level\r\n    ) private {\r\n        (address receiver, bool isExtraDividends) = findEthReceiver(\r\n            userAddress,\r\n            _from,\r\n            matrix,\r\n            level\r\n        );\r\n\r\n        depositToken.safeTransfer(receiver, levelPrice[level]);\r\n\r\n        if (isExtraDividends) {\r\n            emit SentExtraEthDividends(_from, receiver, matrix, level);\r\n        }\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys)\r\n        private\r\n        pure\r\n        returns (address addr)\r\n    {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n\r\n    function withdrawLostTokens(address tokenAddress) public onlyContractOwner {\r\n        require(\r\n            tokenAddress != address(depositToken),\r\n            \"cannot withdraw deposit token\"\r\n        );\r\n        {\r\n            IERC20(tokenAddress).transfer(\r\n                contractOwner,\r\n                IERC20(tokenAddress).balanceOf(address(this))\r\n            );\r\n        }\r\n    }\r\n\r\n    function withdrawFee() public onlyContractOwner {\r\n        payable(contractOwner).transfer(address(this).balance);\r\n    }\r\n\r\n    function transferOwnerShip(address _owner) public onlyContractOwner {\r\n        contractOwner = _owner;\r\n    }\r\n\r\n    function changeDepositToken(address _depTkn) public onlyContractOwner {\r\n        depositToken = IERC20(_depTkn);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_depositTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"MissedEthReceive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"place\",\"type\":\"uint8\"}],\"name\":\"NewUserPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerId\",\"type\":\"uint256\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentReferrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"SentExtraEthDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BASIC_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LAST_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyNewLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"matrix\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"buyNewLevelFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depTkn\",\"type\":\"address\"}],\"name\":\"changeDepositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeX3Referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"findFreeX6Referrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isUserExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUserId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"levelPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationExt\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrerAddress\",\"type\":\"address\"}],\"name\":\"registrationFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnerShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userIds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"partnersCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveX3Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersActiveX6Levels\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersX3Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"level\",\"type\":\"uint8\"}],\"name\":\"usersX6Matrix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawLostTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SmartMatrixForsage", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000abbb7efe4737b558b6818d77a9888b3a3deff9ff00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://65d2ed17030488d37a3c6b016a9a9819db1a11357b0dfa8db05b6c1adc16428d"}