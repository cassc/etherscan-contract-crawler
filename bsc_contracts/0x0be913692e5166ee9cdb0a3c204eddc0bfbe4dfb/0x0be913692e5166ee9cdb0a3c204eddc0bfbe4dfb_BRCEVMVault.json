{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BRCEVMVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ERC20 {\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\\ninterface WETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n}\\n\\ncontract BRCEVMVault {\\n    address public admin;\\n\\n    address public wethAddress;\\n    mapping(address => bool) public whitelistToken;\\n    mapping(bytes32 => bool) public usedTxids;\\n\\n    // Deposit token\\n    event Deposit(\\n        address indexed from,\\n        address indexed to,\\n        address indexed tokenAddress,\\n        uint256 amount\\n    );\\n\\n    // Withdraw token\\n    event Withdraw(\\n        address indexed to,\\n        address indexed tokenAddress,\\n        uint256 amount,\\n        bytes32 txid\\n    );\\n\\n    // Withdraw token\\n    event AdminChanged(address indexed admin, address indexed newAdmin);\\n\\n    constructor(address _wethAddress) {\\n        admin = msg.sender;\\n        wethAddress = _wethAddress;\\n        whitelistToken[_wethAddress] = true;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Only admin can call this function\\\");\\n        _;\\n    }\\n\\n    receive() external payable {}\\n\\n    function changeAdmin(address newAdmin) public onlyAdmin {\\n        require(newAdmin != address(0), \\\"Invalid address\\\");\\n        emit AdminChanged(admin, newAdmin);\\n        admin = newAdmin;\\n    }\\n\\n    function setWETHAddress(address _wethAddress) public onlyAdmin {\\n        wethAddress = _wethAddress;\\n        whitelistToken[_wethAddress] = true;\\n    }\\n\\n    function setWhitelistToken(\\n        address[] memory tokenAddresses\\n    ) public onlyAdmin {\\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\\n            whitelistToken[tokenAddresses[i]] = true;\\n        }\\n    }\\n\\n    function removeWhitelistToken(\\n        address[] memory tokenAddresses\\n    ) public onlyAdmin {\\n        for (uint256 i = 0; i < tokenAddresses.length; i++) {\\n            whitelistToken[tokenAddresses[i]] = false;\\n        }\\n    }\\n\\n    function deposit(\\n        address tokenAddress,\\n        address to,\\n        uint256 amount\\n    ) public payable {\\n        if (tokenAddress == address(0)) {\\n            WETH weth = WETH(wethAddress);\\n            weth.deposit{value: msg.value}();\\n\\n            emit Deposit(msg.sender, to, wethAddress, msg.value);\\n        } else {\\n            require(\\n                whitelistToken[tokenAddress],\\n                \\\"Token address is not whitelisted\\\"\\n            );\\n\\n            ERC20 token = ERC20(tokenAddress);\\n            require(\\n                token.transferFrom(msg.sender, address(this), amount),\\n                \\\"Token transfer failed\\\"\\n            );\\n\\n            emit Deposit(msg.sender, to, tokenAddress, amount);\\n        }\\n    }\\n\\n    function withdraw(\\n        address tokenAddress,\\n        address to,\\n        uint256 amount,\\n        bytes32 txid\\n    ) public onlyAdmin {\\n        require(\\n            whitelistToken[tokenAddress],\\n            \\\"Token address is not whitelisted\\\"\\n        );\\n\\n        require(!usedTxids[txid], \\\"Txid used\\\");\\n\\n        if (wethAddress == tokenAddress) {\\n            WETH weth = WETH(tokenAddress);\\n            weth.withdraw(amount);\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"Token transfer failed\\\");\\n        } else {\\n            ERC20 token = ERC20(tokenAddress);\\n            require(token.transfer(to, amount), \\\"Token transfer failed\\\");\\n        }\\n\\n        usedTxids[txid] = true;\\n\\n        emit Withdraw(to, tokenAddress, amount, txid);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txid\",\"type\":\"bytes32\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"removeWhitelistToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"}],\"name\":\"setWETHAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"setWhitelistToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedTxids\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"txid\",\"type\":\"bytes32\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BRCEVMVault", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}