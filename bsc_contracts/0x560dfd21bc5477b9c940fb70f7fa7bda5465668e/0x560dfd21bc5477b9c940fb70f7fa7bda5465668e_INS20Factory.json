{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/INS20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IINS20Factory.sol\\\";\\n\\ncontract INS20 {\\n    string public name;\\n    string public symbol;\\n    uint8 public immutable decimals;\\n    address public immutable factory;\\n    uint256  public totalSupply;\\n    mapping (address => uint256) public balanceOf;\\n    mapping (address => mapping(address => uint256)) public allowance;\\n    mapping (address => uint256) public nonces;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    constructor() {\\n        (name, symbol, decimals) = IINS20Factory(msg.sender).parameters();\\n\\n        factory = msg.sender;\\n\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), keccak256(bytes('1')), chainId, address(this)));\\n    }\\n\\n    function mint(address to, uint256 amount) external {\\n        require(msg.sender == factory, \\\"UNAUTHORIZED\\\");\\n        _mint(to, amount);\\n    }\\n\\n    function burn(uint256 amount) external {\\n        require(msg.sender == factory, \\\"UNAUTHORIZED\\\");\\n        _burn(msg.sender, amount);\\n    }\\n\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) external returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender];\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, 'TXN_EXPIRED');\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    '\\\\x19\\\\x01',\\n                    DOMAIN_SEPARATOR,\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n                )\\n            );\\n            address recoveredAddress = ecrecover(digest, v, r, s);\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, 'INVALID_SIGNATURE');\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _mint(address to, uint256 amount) internal {\\n        totalSupply += amount;\\n\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal {\\n        balanceOf[from] -= amount;\\n\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/INS20Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./INS20.sol\\\";\\n\\ncontract INS20Factory  {\\n\\n    bytes32 private constant DOMAIN_NAME = keccak256(\\\"InsLink\\\");\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    bytes32 public constant MINT_TYPEHASH = keccak256(abi.encodePacked(\\\"Mint(address token,address to,uint256 amount,string txid)\\\"));\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    struct Parameters {\\n        string name;\\n        string symbol;\\n        uint8 decimals;\\n    }\\n\\n    bool private entered;\\n    Parameters public parameters;\\n    address public owner;\\n    uint256 public fee;\\n    address[] public signers;\\n    mapping (address => bool) public authorized;\\n    mapping (address => uint256) public indexes;\\n    mapping (bytes32 => bool) public used;\\n\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    event FeeChanged(uint256 indexed oldFee, uint256 indexed newFee);\\n\\n    event INS20Created(address indexed sender, address indexed ins20);\\n\\n    event Minted(address indexed token, address indexed to, uint256 indexed amount, string txid);\\n\\n    event Burned(address indexed token, address indexed from, uint256 indexed amount, uint256 fee, string receiver);\\n\\n    event SignerAdded(address indexed sender, address indexed account);\\n\\n    event SignerRemoved(address indexed sender, address indexed account);\\n\\n    modifier nonReentrant() {\\n        require(!entered, \\\"REENTRANT\\\");\\n        entered = true;\\n        _;\\n        entered = false;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n        _;\\n    }\\n\\n    constructor(address[] memory _signers) {\\n        for (uint256 i = 0; i < _signers.length; i++) {\\n            address _addr = _signers[i];\\n            signers.push(_addr);\\n            authorized[_addr] = true;\\n            indexes[_addr] = i;\\n        }\\n\\n        owner = msg.sender;\\n        emit OwnerChanged(address(0), msg.sender);\\n\\n        fee = 0.01 ether;\\n\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, DOMAIN_NAME, keccak256(bytes('1')), chainId, address(this)));\\n    }\\n\\n    function createINS20(string memory name, string memory symbol, uint8 decimals) external onlyOwner returns (address ins20) {\\n        parameters = Parameters({name: name, symbol: symbol, decimals: decimals});\\n        ins20 = address(new INS20{salt: keccak256(abi.encode(name, symbol, decimals))}());\\n        delete parameters;\\n        emit INS20Created(msg.sender, ins20);\\n    }\\n\\n    function mint(address token, address to, uint256 amount, string memory txid, uint8[] memory v, bytes32[] memory r, bytes32[] memory s) external nonReentrant {\\n        require(v.length == signers.length && r.length == signers.length && s.length == signers.length, \\\"INCORRECT_LENGTH\\\");\\n\\n        bytes32 digest = buildMintSeparator(token, to, amount, txid);\\n\\n        require(!used[digest], \\\"SIGNATURE_REUSED\\\");\\n        used[digest] = true;\\n\\n        address[] memory signatures = new address[](v.length);\\n        for (uint256 i = 0; i < v.length; i++) {\\n            address signer = ecrecover(digest, v[i], r[i], s[i]);\\n            require(authorized[signer], \\\"SIGNER_NOT_AUTHORIZED\\\");\\n            for (uint256 j = 0; j < i; j++) {\\n                require(signatures[j] != signer, \\\"DUPLICATED_SIGNER\\\");\\n            }\\n            signatures[i] = signer;\\n        }\\n\\n        INS20(token).mint(to, amount);\\n\\n        emit Minted(token, to, amount, txid);\\n    }\\n\\n    function burn(address token, uint256 amount, string memory receiver) external payable nonReentrant {\\n        require(msg.value >= fee, \\\"NOT_ENOUGH_FEE\\\");\\n\\n        INS20(token).transferFrom(msg.sender, address(this), amount);\\n        INS20(token).burn(amount);\\n\\n        emit Burned(token, msg.sender, amount, fee, receiver);\\n    }\\n\\n    function withdraw(address to) external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        payable(to).transfer(balance);\\n    }\\n\\n    function setOwner(address _owner) external onlyOwner {\\n        emit OwnerChanged(owner, _owner);\\n        owner = _owner;\\n    }\\n\\n    function setFee(uint256 _fee) external onlyOwner {\\n        emit FeeChanged(fee, _fee);\\n        fee = _fee;\\n    }\\n\\n    function addSigner(address account) external onlyOwner {\\n        require(!authorized[account], \\\"ALREADY_EXISTS\\\");\\n\\n        indexes[account] = signers.length;\\n        authorized[account] = true;\\n        signers.push(account);\\n\\n        emit SignerAdded(msg.sender, account);\\n    }\\n\\n    function removeSigner(address account) external onlyOwner {\\n        require(authorized[account], \\\"INVALID_SIGNER\\\");\\n        require(indexes[account] < signers.length, \\\"OUT_OF_RANGE\\\");\\n\\n        uint256 index = indexes[account];\\n        uint256 lastIndex = signers.length - 1;\\n\\n        if (index != lastIndex) {\\n            address lastAddr = signers[lastIndex];\\n            signers[index] = lastAddr;\\n            indexes[lastAddr] = index;\\n        }\\n\\n        delete authorized[account];\\n        delete indexes[account];\\n        signers.pop();\\n\\n        emit SignerRemoved(msg.sender, account);\\n    }\\n\\n    function buildMintSeparator(address token, address to, uint256 amount, string memory txid) view public returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\n            '\\\\x19\\\\x01',\\n            DOMAIN_SEPARATOR,\\n            keccak256(abi.encode(MINT_TYPEHASH, token, to, amount, keccak256(bytes(txid))))\\n        ));\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/IINS20Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\ninterface IINS20Factory {\\n    function parameters() external view returns (string memory name, string memory symbol, uint8 decimals);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": false\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ins20\",\"type\":\"address\"}],\"name\":\"INS20Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SignerRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"}],\"name\":\"buildMintSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"createINS20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ins20\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"indexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"txid\",\"type\":\"string\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parameters\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"used\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "INS20Factory", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000086d5ab6cbfb6a773526a650230006c309cfc1702000000000000000000000000997df9d57c000b5144c847be93a89506740d670b", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}