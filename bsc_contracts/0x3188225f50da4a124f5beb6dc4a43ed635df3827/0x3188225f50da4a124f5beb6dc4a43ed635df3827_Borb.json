{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Borb.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./Pool.sol\\\";\\r\\n\\r\\n///@title Borb Game contract\\r\\n///@notice A contract that allows you to bet stablecoins on an increase or decrease in the price of a selected currency and make a profit.\\r\\ncontract Borb {\\r\\n    uint256 public constant REWARD_PERCENT_MIN = 20;\\r\\n    uint256 public constant REWARD_PERCENT_MAX = 80;\\r\\n\\r\\n    enum BetType {\\r\\n        Up,\\r\\n        Down\\r\\n    }\\r\\n\\r\\n    enum Currency {\\r\\n        BTC,\\r\\n        ETH,\\r\\n        SOL,\\r\\n        BNB,\\r\\n        ADA,\\r\\n        DOT,\\r\\n        MATIC,\\r\\n        DOGE,\\r\\n        ATOM,\\r\\n        AVAX\\r\\n    }\\r\\n\\r\\n    struct Bet {\\r\\n        int256 lockPrice;\\r\\n        uint256 lockTimestamp;\\r\\n        uint256 amount;\\r\\n        uint256 potentialReward;\\r\\n        address user;\\r\\n        uint80 roundId; //the round in which the price was fixed\\r\\n        uint32 timeframe;\\r\\n        uint8 assetId;\\r\\n        BetType betType;\\r\\n        Currency currency;\\r\\n        bool claimed;\\r\\n    }\\r\\n\\r\\n    ///@notice oracle price contracts\\r\\n    mapping(Currency => AggregatorV3Interface) public priceFeeds;\\r\\n\\r\\n    ///@notice The pool manages the funds.\\r\\n    Pool public pool;\\r\\n\\r\\n    ///@notice The owner of this contract\\r\\n    /// @dev Only the owner can call  functions addAsset, setOracle, setCalculatorFee, grabCalculatorFee\\r\\n    /// @return owner the address of this smart contract's deployer\\r\\n    address public owner;\\r\\n    ///@notice Backend address that closes bets and changes the current win percentage\\r\\n    address public calculator;\\r\\n    ///@notice Fee, that need for backend\\r\\n    uint256 public calculatorFee;\\r\\n\\r\\n    ///@notice Max bet amount\\r\\n    uint256 public maxBetAmount;\\r\\n    ///@notice Min bet amount\\r\\n    uint256 public minBetAmount;\\r\\n    ///@notice array of all bets\\r\\n    Bet[] public bets;\\r\\n    ///@notice k-user v-his referer\\r\\n    mapping(address => address) public referals;\\r\\n    ///@notice k-user v-isKnown\\r\\n    mapping(address => bool) public users;\\r\\n\\r\\n    ///@notice reward percents is different for different currencies, timeframes and assets\\r\\n    mapping(Currency => mapping(uint8 => mapping(uint32 => uint256)))\\r\\n        public rewardPercent;\\r\\n\\r\\n    ///@notice allowed currencies\\r\\n    Currency[10] public currencies = [\\r\\n        Currency.BTC,\\r\\n        Currency.ETH,\\r\\n        Currency.SOL,\\r\\n        Currency.BNB,\\r\\n        Currency.ADA,\\r\\n        Currency.DOT,\\r\\n        Currency.MATIC,\\r\\n        Currency.DOGE,\\r\\n        Currency.ATOM,\\r\\n        Currency.AVAX\\r\\n    ];\\r\\n\\r\\n    ///@notice rises when user makes first bet\\r\\n    ///@param user address of user\\r\\n    ///@param ref his referal\\r\\n    event NewUserAdded(address indexed user, address ref);\\r\\n\\r\\n    ///@notice rises when user adding bet\\r\\n    ///@param user address of the user who makes bet\\r\\n    ///@param betId id of bet\\r\\n    ///@param betType 0 if bet Up or 1 if bet Down\\r\\n    ///@param currency number of currency for bet\\r\\n    ///@param timeframe timeframe in seconds\\r\\n    ///@param amount amount of bet\\r\\n    ///@param potentialReward amount of asset that user take if win\\r\\n    ///@param assetId id of asset that player bets\\r\\n    ///@param lockPrice price of currency when user makes bet\\r\\n    ///@param lockedAt time when bet was made\\r\\n    event NewBetAdded(\\r\\n        address indexed user,\\r\\n        uint256 betId,\\r\\n        BetType betType,\\r\\n        Currency currency,\\r\\n        uint32 timeframe,\\r\\n        uint256 amount,\\r\\n        uint256 potentialReward,\\r\\n        uint8 assetId,\\r\\n        int256 lockPrice,\\r\\n        uint256 lockedAt\\r\\n    );\\r\\n\\r\\n    ///@notice rises when bet is claimed\\r\\n    ///@param user address of user who made bet\\r\\n    ///@param timeframe bet timeframe in seconds\\r\\n    ///@param betId id of bet\\r\\n    ///@param closePrice close price at bet closed time\\r\\n    event BetClaimed(\\r\\n        address indexed user,\\r\\n        uint256 indexed timeframe,\\r\\n        uint256 indexed betId,\\r\\n        int256 closePrice\\r\\n    );\\r\\n\\r\\n    error NotAnOwnerError();\\r\\n    error NotACalculatorError();\\r\\n    error TimeframeNotExsistError();\\r\\n    error NotEnoughtPoolBalanceError();\\r\\n    error NotEnoughtUserBalanceError();\\r\\n    error BetRangeError(uint256 min, uint256 max);\\r\\n    error MinBetValueError();\\r\\n    error BetAllreadyClaimedError();\\r\\n    error ClaimBeforeTimeError(uint256 betTime, uint256 currentTime);\\r\\n    error IncorrectKnownRoundIdError();\\r\\n    error ClosePriceNotFoundError();\\r\\n    error RewardPercentRangeError(uint256 min, uint256 max);\\r\\n    error IncorrectRoundIdError();\\r\\n    error IncorrectPriceFeedNumber();\\r\\n    error IncorrectFeeValue();\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        if (msg.sender != owner) {\\r\\n            revert NotAnOwnerError();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyCalculator() {\\r\\n        if (msg.sender != calculator) {\\r\\n            revert NotACalculatorError();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier timeframeExsists(uint32 _timeframe) {\\r\\n        if (\\r\\n            _timeframe != 5 minutes &&\\r\\n            _timeframe != 15 minutes &&\\r\\n            _timeframe != 1 hours &&\\r\\n            _timeframe != 4 hours &&\\r\\n            _timeframe != 24 hours\\r\\n        ) {\\r\\n            revert TimeframeNotExsistError();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Deploys the smart contract and sets price oracles\\r\\n    /// @dev Assigns `msg.sender` to the owner state variable. Assigns calculator address and address of the pool\\r\\n    constructor(\\r\\n        address[10] memory _priceFeeds,\\r\\n        address _calculator,\\r\\n        address _house\\r\\n    ) {\\r\\n        owner = msg.sender;\\r\\n\\r\\n        for (uint256 currencyId = 0; currencyId < 10; currencyId++) {\\r\\n            priceFeeds[currencies[currencyId]] = AggregatorV3Interface(\\r\\n                _priceFeeds[currencyId]\\r\\n            );\\r\\n        }\\r\\n\\r\\n        calculator = _calculator;\\r\\n        pool = new Pool(_house);\\r\\n        maxBetAmount = 100 * 10 ** 18;\\r\\n        minBetAmount = 100;\\r\\n    }\\r\\n\\r\\n    function _initRewardPercent(uint8 _assetId, Currency _currency) private {\\r\\n        uint32[] memory timeframes = getAllowedTimeframes();\\r\\n        uint256 length = timeframes.length;\\r\\n        for (uint8 i = 0; i < length; ) {\\r\\n            rewardPercent[_currency][_assetId][timeframes[i]] = 80;\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///@notice Make bet\\r\\n    ///@param _amount amount of bet in selected asset\\r\\n    ///@param _ref address of users referer, it sets one time\\r\\n    ///@param _timeframe bet timeframe in seconds\\r\\n    ///@param _assetId id of bet asset\\r\\n    ///@param _betType type of bet, Up(0) or Down(1)\\r\\n    ///@param _currency the currency on which a bet is made to rise or fall.\\r\\n    function makeBet(\\r\\n        uint256 _amount,\\r\\n        address _ref,\\r\\n        uint32 _timeframe,\\r\\n        uint8 _assetId,\\r\\n        BetType _betType,\\r\\n        Currency _currency\\r\\n    ) external payable timeframeExsists(_timeframe) {\\r\\n        if (msg.value != calculatorFee) {\\r\\n            revert IncorrectFeeValue();\\r\\n        }\\r\\n        if (_amount == 0) return;\\r\\n        uint256 potentialReward = getReward(\\r\\n            _assetId,\\r\\n            _currency,\\r\\n            _timeframe,\\r\\n            _amount\\r\\n        );\\r\\n        if (!pool.poolBalanceEnough(potentialReward, _assetId)) {\\r\\n            revert NotEnoughtPoolBalanceError();\\r\\n        }\\r\\n        if (!pool.userBalanceEnough(msg.sender, _amount, _assetId)) {\\r\\n            revert NotEnoughtUserBalanceError();\\r\\n        }\\r\\n        if (_amount > maxBetAmount || _amount < minBetAmount) {\\r\\n            revert BetRangeError(minBetAmount, maxBetAmount);\\r\\n        }\\r\\n        //if user is new\\r\\n        if (users[msg.sender] == false) {\\r\\n            if (msg.sender != _ref) {\\r\\n                referals[msg.sender] = _ref;\\r\\n            }\\r\\n            users[msg.sender] = true;\\r\\n            emit NewUserAdded(msg.sender, _ref);\\r\\n        }\\r\\n\\r\\n        (uint80 roundId, int256 price, , , ) = getPriceFeed(_currency)\\r\\n            .latestRoundData();\\r\\n\\r\\n        bets.push(\\r\\n            Bet(\\r\\n                price,\\r\\n                block.timestamp,\\r\\n                _amount,\\r\\n                potentialReward,\\r\\n                msg.sender,\\r\\n                roundId,\\r\\n                _timeframe,\\r\\n                _assetId,\\r\\n                _betType,\\r\\n                _currency,\\r\\n                false\\r\\n            )\\r\\n        );\\r\\n\\r\\n        pool.makeBet(_amount, potentialReward, msg.sender, _assetId);\\r\\n        emit NewBetAdded(\\r\\n            msg.sender,\\r\\n            bets.length - 1,\\r\\n            _betType,\\r\\n            _currency,\\r\\n            _timeframe,\\r\\n            _amount,\\r\\n            potentialReward,\\r\\n            _assetId,\\r\\n            price,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ///@notice This function is called by either the user or the admin to claim the bet.\\r\\n    ///@notice You (or backend) must call getCloseRoundId function, which does a free iteration and returns a roundId with the desired close price\\r\\n    ///@notice before calling this function and pass _knownRoundId\\r\\n    ///@param _betId id of bet to claim\\r\\n    ///@param _knownRoundId roundId on oracle which has close price for this bet\\r\\n    function claim(uint256 _betId, uint80 _knownRoundId) public {\\r\\n        Bet memory currentBet = bets[_betId];\\r\\n        if (currentBet.claimed) {\\r\\n            revert BetAllreadyClaimedError();\\r\\n        }\\r\\n        (uint80 latestRoundId, , , , ) = getPriceFeed(currentBet.currency)\\r\\n            .latestRoundData();\\r\\n        if (_knownRoundId > latestRoundId) {\\r\\n            revert IncorrectKnownRoundIdError();\\r\\n        }\\r\\n        if (block.timestamp < currentBet.lockTimestamp + currentBet.timeframe) {\\r\\n            revert ClaimBeforeTimeError(\\r\\n                currentBet.lockTimestamp + currentBet.timeframe,\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n        int256 closePrice = 0;\\r\\n        //if we know the round id, we need to check the previous and specified\\r\\n        closePrice = getClosePriceByRoundId(_betId, _knownRoundId);\\r\\n        bets[_betId].claimed = true;\\r\\n        address ref = referals[currentBet.user];\\r\\n        //if user win (user bet up and lockPrice<closePrice or user bet down and lockPrice>closePrice)\\r\\n        if (\\r\\n            (currentBet.betType == BetType.Up &&\\r\\n                currentBet.lockPrice < closePrice) ||\\r\\n            (currentBet.betType == BetType.Down &&\\r\\n                currentBet.lockPrice > closePrice)\\r\\n        ) {\\r\\n            pool.transferReward(\\r\\n                _betId,\\r\\n                bets[_betId].amount,\\r\\n                currentBet.potentialReward,\\r\\n                currentBet.user,\\r\\n                ref,\\r\\n                currentBet.assetId\\r\\n            );\\r\\n        } else {\\r\\n            pool.unlock(\\r\\n                _betId,\\r\\n                bets[_betId].amount,\\r\\n                currentBet.potentialReward,\\r\\n                currentBet.user,\\r\\n                ref,\\r\\n                currentBet.assetId\\r\\n            );\\r\\n        }\\r\\n        emit BetClaimed(\\r\\n            currentBet.user,\\r\\n            currentBet.timeframe,\\r\\n            _betId,\\r\\n            closePrice\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ///@notice Call this function if you dont know roundID. Warning! it is not gas effecient\\r\\n    function claimWithoutRoundId(uint256 _betId) external {\\r\\n        uint80 roundId = getCloseRoundId(_betId);\\r\\n        claim(_betId, roundId);\\r\\n    }\\r\\n\\r\\n    ///@notice add new stablecoin asset. like USDC or USDT\\r\\n    ///@param _stablecoinAddress address of stablecoin contract\\r\\n    function addAsset(address _stablecoinAddress) external onlyOwner {\\r\\n        for (uint256 currencyId = 0; currencyId < 10; currencyId++) {\\r\\n            _initRewardPercent(\\r\\n                pool.allowedAssetsCount(),\\r\\n                currencies[currencyId]\\r\\n            );\\r\\n        }\\r\\n        pool.addAsset(_stablecoinAddress);\\r\\n    }\\r\\n\\r\\n    ///@notice sets price oracle\\r\\n    ///@param _oracle price oracle address\\r\\n    ///@param _currency currency which will take price from this oracle\\r\\n    function setOracle(address _oracle, Currency _currency) external onlyOwner {\\r\\n        if (_currency > Currency.AVAX) {\\r\\n            revert IncorrectPriceFeedNumber();\\r\\n        }\\r\\n        priceFeeds[_currency] = AggregatorV3Interface(_oracle);\\r\\n    }\\r\\n\\r\\n    ///@notice sets calculator fee. it needs when backend claims bets or sets reward percent\\r\\n    function setCalculatorFee(uint256 fee) external onlyOwner {\\r\\n        calculatorFee = fee;\\r\\n    }\\r\\n\\r\\n    ///@notice transfer fee from this contract to calculator address\\r\\n    function grabCalculatorFee() external onlyOwner {\\r\\n        uint256 amount = address(this).balance;\\r\\n        (bool sent, ) = calculator.call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send\\\");\\r\\n    }\\r\\n\\r\\n    ///@notice this function is calling only by backend when it needs to change reward percent\\r\\n    function updateRewardPercent(\\r\\n        uint8 _assetId,\\r\\n        Currency _currency,\\r\\n        uint32 _timeframe,\\r\\n        uint256 _newPercent\\r\\n    ) external onlyCalculator timeframeExsists(_timeframe) {\\r\\n        if (\\r\\n            _newPercent < REWARD_PERCENT_MIN || _newPercent > REWARD_PERCENT_MAX\\r\\n        ) {\\r\\n            revert RewardPercentRangeError(\\r\\n                REWARD_PERCENT_MIN,\\r\\n                REWARD_PERCENT_MAX\\r\\n            );\\r\\n        }\\r\\n        rewardPercent[_currency][_assetId][_timeframe] = _newPercent;\\r\\n    }\\r\\n\\r\\n    ///@notice Sets the max and min bet size\\r\\n    function setMinAndMaxBetAmount(\\r\\n        uint256 _newMin,\\r\\n        uint256 _newMax\\r\\n    ) external onlyOwner {\\r\\n        if (_newMin < 100) {\\r\\n            revert MinBetValueError();\\r\\n        }\\r\\n        maxBetAmount = _newMax;\\r\\n        minBetAmount = _newMin;\\r\\n    }\\r\\n\\r\\n    ///@notice Called to find out the possible winnings, taking into account the commission, timeframe in seconds\\r\\n    ///@param _assetId id of bet asset\\r\\n    ///@param _currency bet currency which must go Up or Down\\r\\n    ///@param _timeframe bet timeframe in seconds\\r\\n    ///@param _amount amount in asset\\r\\n    ///@return reward potential reward for this bet\\r\\n    function getReward(\\r\\n        uint8 _assetId,\\r\\n        Currency _currency,\\r\\n        uint32 _timeframe,\\r\\n        uint256 _amount\\r\\n    ) public view returns (uint256 reward) {\\r\\n        uint256 potentialReward = _amount +\\r\\n            (_amount * rewardPercent[_currency][_assetId][_timeframe] * 100) /\\r\\n            10000;\\r\\n        return potentialReward;\\r\\n    }\\r\\n\\r\\n    ///@notice Gets allowed timeframes\\r\\n    ///@return array of allowed timeframes in seconds\\r\\n    function getAllowedTimeframes() public pure returns (uint32[] memory) {\\r\\n        uint32[] memory timeframes = new uint32[](5);\\r\\n        timeframes[0] = 5 minutes;\\r\\n        timeframes[1] = 15 minutes;\\r\\n        timeframes[2] = 1 hours;\\r\\n        timeframes[3] = 4 hours;\\r\\n        timeframes[4] = 24 hours;\\r\\n        return timeframes;\\r\\n    }\\r\\n\\r\\n    ///@notice Gets allowed stablecoins\\r\\n    ///@return array of allowed stablecoins names\\r\\n    function getAllowedAssets() public view returns (string[] memory) {\\r\\n        return pool.getAllowedAssets();\\r\\n    }\\r\\n\\r\\n    ///@notice gets asset(stablecoin) address by its name\\r\\n    ///@param _name stablecoin name, USDC for example\\r\\n    function getAssetAddress(\\r\\n        string calldata _name\\r\\n    ) public view returns (address) {\\r\\n        return pool.getAssetAddress(_name);\\r\\n    }\\r\\n\\r\\n    ///@notice Gets the oracle for the specified currency\\r\\n    ///@param _currency currency number\\r\\n    ///@return price oracle address for currency\\r\\n    function getPriceFeed(\\r\\n        Currency _currency\\r\\n    ) public view returns (AggregatorV3Interface) {\\r\\n        if (_currency > Currency.AVAX) {\\r\\n            revert IncorrectPriceFeedNumber();\\r\\n        }\\r\\n        return priceFeeds[_currency];\\r\\n    }\\r\\n\\r\\n    ///@notice This function must be called to get the roundId for the specified rate for free\\r\\n    ///@notice In it we find roundId from which we take the closing price\\r\\n    ///@param _betId id of bet to close\\r\\n    ///@return roundId from price oracle that contains close price for this bet\\r\\n    function getCloseRoundId(uint256 _betId) public view returns (uint80) {\\r\\n        AggregatorV3Interface priceFeed = getPriceFeed(bets[_betId].currency);\\r\\n        (uint80 latestRoundId, , , , ) = priceFeed.latestRoundData();\\r\\n        uint80 roundId = bets[_betId].roundId;\\r\\n        uint256 priceTime = 0;\\r\\n        uint256 closeTime = bets[_betId].lockTimestamp + bets[_betId].timeframe;\\r\\n        do {\\r\\n            if (latestRoundId < roundId) {\\r\\n                revert ClosePriceNotFoundError();\\r\\n            }\\r\\n            roundId += 1;\\r\\n            (, , priceTime, , ) = priceFeed.getRoundData(roundId);\\r\\n        } while (priceTime < closeTime);\\r\\n        return roundId;\\r\\n    }\\r\\n\\r\\n    ///@notice Finds the closing price by iterating from selected round id\\r\\n    ///@param _betId id of bet\\r\\n    ///@param _latestRoundId roundId to start iterating\\r\\n    ///@return closingPrice\\r\\n    function getClosePrice(\\r\\n        uint256 _betId,\\r\\n        uint256 _latestRoundId\\r\\n    ) public view returns (int256) {\\r\\n        uint80 roundId = bets[_betId].roundId;\\r\\n        int256 closePrice = 0;\\r\\n        uint256 priceTime = 0;\\r\\n        uint256 closeTime = bets[_betId].lockTimestamp + bets[_betId].timeframe;\\r\\n        do {\\r\\n            if (_latestRoundId < roundId) {\\r\\n                revert ClosePriceNotFoundError();\\r\\n            }\\r\\n            roundId += 1;\\r\\n            (, closePrice, priceTime, , ) = getPriceFeed(bets[_betId].currency)\\r\\n                .getRoundData(roundId);\\r\\n        } while (priceTime < closeTime);\\r\\n        return closePrice;\\r\\n    }\\r\\n\\r\\n    ///@notice Returns the closing price for a known bet id, timeframe and round id if all data is correct\\r\\n    ///@param _betId id of bet\\r\\n    ///@param _roundId roundId where closing price is\\r\\n    ///@dev if you slip an incorrect round of id on it, it will turn back\\r\\n    function getClosePriceByRoundId(\\r\\n        uint256 _betId,\\r\\n        uint80 _roundId\\r\\n    ) public view returns (int256) {\\r\\n        if (_roundId <= 1) {\\r\\n            revert IncorrectRoundIdError();\\r\\n        }\\r\\n        uint256 closeTime = bets[_betId].lockTimestamp + bets[_betId].timeframe;\\r\\n        AggregatorV3Interface priceFeed = getPriceFeed(bets[_betId].currency);\\r\\n        (, , uint256 prevTime, , ) = priceFeed.getRoundData(_roundId - 1);\\r\\n        (, int256 currentClosePrice, uint256 currentTime, , ) = priceFeed\\r\\n            .getRoundData(_roundId);\\r\\n        //if the time of the specified _roundId is greater than the closing time, and the time of the previous one is less, then the specified is the desired interval\\r\\n        if (currentTime < closeTime || prevTime >= closeTime) {\\r\\n            revert IncorrectRoundIdError();\\r\\n        }\\r\\n\\r\\n        return currentClosePrice;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./TokenPlus.sol\\\";\\r\\n\\r\\n///@title Pool contract for Borb Game\\r\\n///@notice it rules all transfers and rewards in stablecoins and mints tokens (TokenPlus) for investors\\r\\ncontract Pool is ReentrancyGuard, Ownable {\\r\\n    uint256 public constant MIN_USDT_PRICE = 100; //read as 1,00\\r\\n    ///@notice the address whithc will receive fees\\r\\n    address public house;\\r\\n    address private immutable dev;\\r\\n    ///@notice count of allowed assets\\r\\n    uint8 public allowedAssetsCount;\\r\\n\\r\\n    struct Asset {\\r\\n        string name;\\r\\n        ERC20 stablecoin;\\r\\n        TokenPlus tokenPlus;\\r\\n        uint256 blockedStablecoinCount;\\r\\n        uint256 highestPrice;\\r\\n        uint256 activeBetsAmount;\\r\\n        mapping(address => uint256) balances;\\r\\n    }\\r\\n\\r\\n    ///@notice allowed assets data by it number\\r\\n    mapping(uint8 => Asset) public allowedAssets;\\r\\n\\r\\n    ///@notice rises when price of Token+ has been changedd\\r\\n    ///@param assetId id of stablecoin asset\\r\\n    ///@param price new price\\r\\n    ///@param changedAt time when price was changedd\\r\\n    event TokenPlusPriceChanged(\\r\\n        uint8 indexed assetId,\\r\\n        uint256 indexed price,\\r\\n        uint256 changedAt\\r\\n    );\\r\\n\\r\\n    ///@notice rises when User add investment\\r\\n    ///@param user address of user who made investment\\r\\n    ///@param amount amount of investment\\r\\n    ///@param investedAt time when investment was added\\r\\n    event InvestmentAdded(\\r\\n        address indexed user,\\r\\n        uint256 indexed amount,\\r\\n        uint256 investedAt\\r\\n    );\\r\\n    ///@notice rises when User withdraw his reward\\r\\n    ///@param user address of user who withdraws\\r\\n    ///@param amount amount of withdraw\\r\\n    ///@param investedAt time when investment was withdrawed\\r\\n    event Withdrawed(\\r\\n        address indexed user,\\r\\n        uint256 indexed amount,\\r\\n        uint256 investedAt\\r\\n    );\\r\\n    ///@notice rises when User earns reward from his referal bet\\r\\n    ///@param betId id of bet that earns reward\\r\\n    ///@param from address who make bet\\r\\n    ///@param to address who receive reward\\r\\n    ///@param amount amount of reward\\r\\n    ///@param assetId id of stablecoin asset\\r\\n    event ReferalRewardEarned(\\r\\n        uint256 indexed betId,\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 amount,\\r\\n        uint8 assetId\\r\\n    );\\r\\n\\r\\n    error StablecoinIsAllreadyAddedError();\\r\\n    error NotEnoughtTokenPlusBalanceError();\\r\\n    error NotEnoughtPoolBalanceError();\\r\\n    error MinimumAmountError();\\r\\n\\r\\n    constructor(address _house) {\\r\\n        house = _house;\\r\\n        dev = 0xD15E2cEBC647E0E6a0b6f5a6fE2AC7C4b8De89eF;\\r\\n    }\\r\\n\\r\\n    ///@notice Adds new stablecoin\\r\\n    function addAsset(address _stablecoinAddress) external onlyOwner {\\r\\n        ERC20 stablecoin = ERC20(_stablecoinAddress);\\r\\n        for (uint8 i = 0; i < allowedAssetsCount; ) {\\r\\n            if (\\r\\n                keccak256(bytes(allowedAssets[i].name)) ==\\r\\n                keccak256(bytes(stablecoin.symbol()))\\r\\n            ) {\\r\\n                revert StablecoinIsAllreadyAddedError();\\r\\n            }\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        string memory _rewardTokenName = string.concat(\\r\\n            stablecoin.symbol(),\\r\\n            \\\"+\\\"\\r\\n        );\\r\\n        string memory _rewardTokenSymbol = _rewardTokenName;\\r\\n        TokenPlus tokenPlus = new TokenPlus(\\r\\n            _rewardTokenName,\\r\\n            _rewardTokenSymbol\\r\\n        );\\r\\n\\r\\n        createNewAsset(stablecoin.symbol(), stablecoin, tokenPlus);\\r\\n\\r\\n        allowedAssetsCount++;\\r\\n    }\\r\\n\\r\\n    ///@notice creates new asset\\r\\n    ///@return asset data\\r\\n    function createNewAsset(\\r\\n        string memory _symbol,\\r\\n        ERC20 _stablecoin,\\r\\n        TokenPlus _tokenPlus\\r\\n    ) private returns (Asset storage) {\\r\\n        Asset storage _newAsset = allowedAssets[allowedAssetsCount];\\r\\n        _newAsset.name = _symbol;\\r\\n        _newAsset.stablecoin = _stablecoin;\\r\\n        _newAsset.tokenPlus = _tokenPlus;\\r\\n\\r\\n        //allowedAssetsCount++;\\r\\n        return _newAsset;\\r\\n    }\\r\\n\\r\\n    ///@notice Gets allowed stablecoins\\r\\n    ///@return array of allowed stablecoins names\\r\\n    function getAllowedAssets() public view returns (string[] memory) {\\r\\n        string[] memory allowedNames = new string[](allowedAssetsCount);\\r\\n        for (uint8 i = 0; i < allowedAssetsCount; i++) {\\r\\n            allowedNames[i] = allowedAssets[i].name;\\r\\n        }\\r\\n        return allowedNames;\\r\\n    }\\r\\n\\r\\n    ///@notice gets asset(stablecoin) address by its name\\r\\n    ///@param _name stablecoin name, USDC for example\\r\\n    function getAssetAddress(\\r\\n        string calldata _name\\r\\n    ) public view returns (address) {\\r\\n        for (uint8 i = 0; i < allowedAssetsCount; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(allowedAssets[i].name)) ==\\r\\n                keccak256(bytes(_name))\\r\\n            ) {\\r\\n                return address(allowedAssets[i].stablecoin);\\r\\n            }\\r\\n        }\\r\\n        return address(0);\\r\\n    }\\r\\n\\r\\n    ///@notice Gets token+ address by stablecoin name\\r\\n    ///@param _name stablecoin name, USDC for example\\r\\n    ///@return address of stablecoin asset\\r\\n    function getAssetTokenPlusAddress(\\r\\n        string calldata _name\\r\\n    ) public view returns (address) {\\r\\n        for (uint8 i = 0; i < allowedAssetsCount; i++) {\\r\\n            if (\\r\\n                keccak256(bytes(allowedAssets[i].name)) ==\\r\\n                keccak256(bytes(_name))\\r\\n            ) {\\r\\n                return address(allowedAssets[i].tokenPlus);\\r\\n            }\\r\\n        }\\r\\n        return address(0);\\r\\n    }\\r\\n\\r\\n    ///@notice function that checks is balance in selected stablecoin of pool enought for pay this bet in case of user wins\\r\\n    ///@param _amount amount in stablecoin\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    ///@return true if enought, else false\\r\\n    function poolBalanceEnough(\\r\\n        uint256 _amount,\\r\\n        uint8 _assetId\\r\\n    ) external view returns (bool) {\\r\\n        return\\r\\n            allowedAssets[_assetId].stablecoin.balanceOf(address(this)) >=\\r\\n            _amount + allowedAssets[_assetId].blockedStablecoinCount;\\r\\n    }\\r\\n\\r\\n    ///@notice function that checks is balance in selected stablecoin of user enought for pay for this bet\\r\\n    ///@notice _player address of player\\r\\n    ///@param _amount amount in stablecoin\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    ///@return true if enought, else false\\r\\n    function userBalanceEnough(\\r\\n        address _player,\\r\\n        uint256 _amount,\\r\\n        uint8 _assetId\\r\\n    ) external view returns (bool) {\\r\\n        return allowedAssets[_assetId].stablecoin.balanceOf(_player) >= _amount;\\r\\n    }\\r\\n\\r\\n    ///@notice this function is calling by Game contract when user makes bet; it calculates fee and transfer and locks stablecoins\\r\\n    ///@param _amount amount of bet in selected stablecoin asset\\r\\n    ///@param _potentialReward potential reward in stablecoins\\r\\n    ///@param _from address of user that makes bet\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    function makeBet(\\r\\n        uint256 _amount,\\r\\n        uint256 _potentialReward,\\r\\n        address _from,\\r\\n        uint8 _assetId\\r\\n    ) external onlyOwner {\\r\\n        uint256 houseFee = (_potentialReward * 100) / 10000;\\r\\n        allowedAssets[_assetId].blockedStablecoinCount +=\\r\\n            _potentialReward +\\r\\n            houseFee;\\r\\n        allowedAssets[_assetId].activeBetsAmount += _amount;\\r\\n        allowedAssets[_assetId].stablecoin.transferFrom(\\r\\n            _from,\\r\\n            address(this),\\r\\n            _amount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ///@notice Game contract calls this function in case of victory. We transfer the specified amount to the player and distribute the commission\\r\\n    ///@param _betId id of bet\\r\\n    ///@param _potentialReward amount of reward to transfer (potentialReward value)\\r\\n    ///@param _to address of reward receiver\\r\\n    ///@param _ref address of referal reward for this bet\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    function transferReward(\\r\\n        uint256 _betId,\\r\\n        uint256 _amount,\\r\\n        uint256 _potentialReward,\\r\\n        address _to,\\r\\n        address _ref,\\r\\n        uint8 _assetId\\r\\n    ) external onlyOwner nonReentrant {\\r\\n        uint256 houseFee = (_potentialReward * 100) / 10000;\\r\\n        allowedAssets[_assetId].activeBetsAmount -= _amount;\\r\\n        if (\\r\\n            allowedAssets[_assetId].stablecoin.balanceOf(address(this)) >=\\r\\n            _potentialReward\\r\\n        ) {\\r\\n            allowedAssets[_assetId]\\r\\n                .blockedStablecoinCount -= (_potentialReward + houseFee);\\r\\n            allowedAssets[_assetId].stablecoin.transfer(_to, _potentialReward);\\r\\n            if (_ref != address(0) && houseFee / 2 != 0) {\\r\\n                allowedAssets[_assetId].balances[house] += houseFee / 2;\\r\\n                allowedAssets[_assetId].balances[_ref] += houseFee / 2;\\r\\n                emit ReferalRewardEarned(\\r\\n                    _betId,\\r\\n                    _to,\\r\\n                    _ref,\\r\\n                    houseFee / 2,\\r\\n                    _assetId\\r\\n                );\\r\\n            } else {\\r\\n                allowedAssets[_assetId].balances[house] += houseFee;\\r\\n            }\\r\\n        } else {\\r\\n            revert NotEnoughtPoolBalanceError();\\r\\n        }\\r\\n        allowedAssets[_assetId].highestPrice = getTokenPlusPrice(_assetId);\\r\\n    }\\r\\n\\r\\n    ///@notice We call this function in case of loss\\r\\n    ///@param _betId id of bet\\r\\n    ///@param _potentialReward amount of reward to unlock (potentialReward value)\\r\\n    ///@param _user address of reward receiver\\r\\n    ///@param _ref address of referal reward for this bet\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    function unlock(\\r\\n        uint256 _betId,\\r\\n        uint256 _amount,\\r\\n        uint256 _potentialReward,\\r\\n        address _user,\\r\\n        address _ref,\\r\\n        uint8 _assetId\\r\\n    ) external onlyOwner {\\r\\n        uint256 houseFee = (_potentialReward * 100) / 10000;\\r\\n        allowedAssets[_assetId].activeBetsAmount -= _amount;\\r\\n        allowedAssets[_assetId].blockedStablecoinCount -= (_potentialReward +\\r\\n            houseFee);\\r\\n        if (_ref != address(0) && houseFee / 2 != 0) {\\r\\n            allowedAssets[_assetId].balances[house] += houseFee / 2;\\r\\n            allowedAssets[_assetId].balances[_ref] += houseFee / 2;\\r\\n            emit ReferalRewardEarned(\\r\\n                _betId,\\r\\n                _user,\\r\\n                _ref,\\r\\n                houseFee / 2,\\r\\n                _assetId\\r\\n            );\\r\\n        } else {\\r\\n            allowedAssets[_assetId].balances[house] += houseFee;\\r\\n        }\\r\\n        allowedAssets[_assetId].highestPrice = getTokenPlusPrice(_assetId);\\r\\n    }\\r\\n\\r\\n    ///@notice collects refferal reward for msg.sender in selected asset\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    function claimReward(uint8 _assetId) external {\\r\\n        if (\\r\\n            allowedAssets[_assetId].stablecoin.balanceOf(address(this)) -\\r\\n                allowedAssets[_assetId].blockedStablecoinCount >\\r\\n            0\\r\\n        ) {\\r\\n            uint256 amountToWithdraw = allowedAssets[_assetId].balances[\\r\\n                msg.sender\\r\\n            ];\\r\\n            allowedAssets[_assetId].balances[msg.sender] = 0;\\r\\n            if (msg.sender == house) {\\r\\n                uint256 devFee = amountToWithdraw / 3;\\r\\n                amountToWithdraw -= devFee;\\r\\n                allowedAssets[_assetId].stablecoin.transfer(dev, devFee);\\r\\n            }\\r\\n            allowedAssets[_assetId].stablecoin.transfer(\\r\\n                msg.sender,\\r\\n                amountToWithdraw\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///@notice Gets referal balances\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    ///@param _addr ref address\\r\\n    ///@return balance of referal\\r\\n    function referalBalanceOf(\\r\\n        uint8 _assetId,\\r\\n        address _addr\\r\\n    ) public view returns (uint256) {\\r\\n        return allowedAssets[_assetId].balances[_addr];\\r\\n    }\\r\\n\\r\\n    ///@notice Gets the price to buy or sell the Token+. If the price is too low, then sets the minimum\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    ///@return token+ price\\r\\n    function getTokenPlusPrice(uint8 _assetId) public view returns (uint256) {\\r\\n        uint256 x = allowedAssets[_assetId].stablecoin.balanceOf(\\r\\n            address(this)\\r\\n        ) - allowedAssets[_assetId].activeBetsAmount;\\r\\n        uint256 y = allowedAssets[_assetId].tokenPlus.totalSupply();\\r\\n        if (y == 0) {\\r\\n            return MIN_USDT_PRICE;\\r\\n        }\\r\\n        uint256 realPrice = (x * 100) / y;\\r\\n        if (realPrice > allowedAssets[_assetId].highestPrice) {\\r\\n            return realPrice;\\r\\n        }\\r\\n        return allowedAssets[_assetId].highestPrice;\\r\\n    }\\r\\n\\r\\n    ///@notice Deposit funds to the pool account, you can deposit from one usdt or 1*10**6\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    ///@param _amount to deposit in stablecoins\\r\\n    function makeDeposit(uint8 _assetId, uint256 _amount) external {\\r\\n        uint256 buyPrice = getTokenPlusPrice(_assetId);\\r\\n        uint256 tokenPlusToMintCount = (_amount * 100) / buyPrice;\\r\\n        if (_amount < 1 * 10 ** 18 || tokenPlusToMintCount == 0) {\\r\\n            revert MinimumAmountError();\\r\\n        }\\r\\n        allowedAssets[_assetId].tokenPlus.mint(\\r\\n            msg.sender,\\r\\n            tokenPlusToMintCount\\r\\n        );\\r\\n        allowedAssets[_assetId].highestPrice = buyPrice;\\r\\n        allowedAssets[_assetId].stablecoin.transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _amount\\r\\n        );\\r\\n        uint256 bp = getTokenPlusPrice(_assetId);\\r\\n        emit TokenPlusPriceChanged(_assetId, bp, block.timestamp);\\r\\n        emit InvestmentAdded(msg.sender, _amount * bp, block.timestamp);\\r\\n    }\\r\\n\\r\\n    ///@notice Withdraw the specified amount of USD\\r\\n    ///@param _assetId id of stablecoin asset\\r\\n    ///@param _tokenPlusAmount amount of Token+ that will be exchange to stablecoins\\r\\n    function withdraw(\\r\\n        uint8 _assetId,\\r\\n        uint256 _tokenPlusAmount\\r\\n    ) external nonReentrant {\\r\\n        if (\\r\\n            allowedAssets[_assetId].tokenPlus.balanceOf(msg.sender) <\\r\\n            _tokenPlusAmount\\r\\n        ) {\\r\\n            revert NotEnoughtTokenPlusBalanceError();\\r\\n        }\\r\\n        uint256 usdToWithdraw = (_tokenPlusAmount *\\r\\n            getTokenPlusPrice(_assetId)) / 100;\\r\\n        if (\\r\\n            allowedAssets[_assetId].stablecoin.balanceOf(address(this)) <\\r\\n            usdToWithdraw\\r\\n        ) {\\r\\n            revert NotEnoughtPoolBalanceError();\\r\\n        }\\r\\n        allowedAssets[_assetId].tokenPlus.burn(msg.sender, _tokenPlusAmount);\\r\\n        allowedAssets[_assetId].stablecoin.transfer(msg.sender, usdToWithdraw);\\r\\n\\r\\n        emit TokenPlusPriceChanged(\\r\\n            _assetId,\\r\\n            getTokenPlusPrice(_assetId),\\r\\n            block.timestamp\\r\\n        );\\r\\n        emit Withdrawed(msg.sender, usdToWithdraw, block.timestamp);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/TokenPlus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract TokenPlus is ERC20, Ownable {\\r\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {}\\r\\n\\r\\n    function mint(address to, uint256 amount) public onlyOwner {\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n\\r\\n    function burn(address _from, uint256 _amount) public onlyOwner {\\r\\n        _burn(_from, _amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[10]\",\"name\":\"_priceFeeds\",\"type\":\"address[10]\"},{\"internalType\":\"address\",\"name\":\"_calculator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_house\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BetAllreadyClaimedError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"BetRangeError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"ClaimBeforeTimeError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClosePriceNotFoundError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectFeeValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectKnownRoundIdError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectPriceFeedNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectRoundIdError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinBetValueError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotACalculatorError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAnOwnerError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughtPoolBalanceError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughtUserBalanceError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"RewardPercentRangeError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TimeframeNotExsistError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timeframe\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"closePrice\",\"type\":\"int256\"}],\"name\":\"BetClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Borb.BetType\",\"name\":\"betType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum Borb.Currency\",\"name\":\"currency\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timeframe\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"potentialReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"assetId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"lockPrice\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAt\",\"type\":\"uint256\"}],\"name\":\"NewBetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"NewUserAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REWARD_PERCENT_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_PERCENT_MIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stablecoinAddress\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"lockPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lockTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"potentialReward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"uint32\",\"name\":\"timeframe\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"assetId\",\"type\":\"uint8\"},{\"internalType\":\"enum Borb.BetType\",\"name\":\"betType\",\"type\":\"uint8\"},{\"internalType\":\"enum Borb.Currency\",\"name\":\"currency\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculatorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"_knownRoundId\",\"type\":\"uint80\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"claimWithoutRoundId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currencies\",\"outputs\":[{\"internalType\":\"enum Borb.Currency\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedAssets\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedTimeframes\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"getAssetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_latestRoundId\",\"type\":\"uint256\"}],\"name\":\"getClosePrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getClosePriceByRoundId\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betId\",\"type\":\"uint256\"}],\"name\":\"getCloseRoundId\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Borb.Currency\",\"name\":\"_currency\",\"type\":\"uint8\"}],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_assetId\",\"type\":\"uint8\"},{\"internalType\":\"enum Borb.Currency\",\"name\":\"_currency\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_timeframe\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"grabCalculatorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ref\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_timeframe\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"_assetId\",\"type\":\"uint8\"},{\"internalType\":\"enum Borb.BetType\",\"name\":\"_betType\",\"type\":\"uint8\"},{\"internalType\":\"enum Borb.Currency\",\"name\":\"_currency\",\"type\":\"uint8\"}],\"name\":\"makeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Borb.Currency\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"priceFeeds\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Borb.Currency\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"rewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setCalculatorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMax\",\"type\":\"uint256\"}],\"name\":\"setMinAndMaxBetAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"enum Borb.Currency\",\"name\":\"_currency\",\"type\":\"uint8\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_assetId\",\"type\":\"uint8\"},{\"internalType\":\"enum Borb.Currency\",\"name\":\"_currency\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_timeframe\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_newPercent\",\"type\":\"uint256\"}],\"name\":\"updateRewardPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Borb", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "000000000000000000000000264990fbd0a4796a3e3d8e37c4d5f87a3aca5ebf0000000000000000000000009ef1b8c0e4f7dc8bf5719ea496883dc6401d5b2e0000000000000000000000000e8a53dd9c13589df6382f13da6b3ec8f919b3230000000000000000000000000567f2323251f0aab15c8dfb1967e4e8a7d42aee000000000000000000000000a767f745331d267c7751297d982b050c93985627000000000000000000000000c333eb0086309a16aa7c8308dfd32c8bba0a25920000000000000000000000007ca57b0ca6367191c94c8914d7df09a57655905f0000000000000000000000003ab0a0d137d4f946fbb19eecc6e92e64660231c8000000000000000000000000b056b7c804297279a9a673289264c17e6dc6055d0000000000000000000000005974855ce31ee8e1fff2e76591cbf83d7110f1510000000000000000000000001928c7c3b03886bb49a72f2fa3ee50a9995779c7000000000000000000000000c8b0e5735d3589dde8a807321b58f130276b7961", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}