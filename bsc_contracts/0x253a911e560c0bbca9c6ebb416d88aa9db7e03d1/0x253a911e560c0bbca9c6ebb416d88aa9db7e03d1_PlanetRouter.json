{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/RouterUpdateForThena.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at BscScan.com on 2022-12-15\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n\\nlibrary Address {\\n   \\n    function isContract(address account) internal view returns (bool) {\\n        return account.code.length > 0;\\n    }\\n\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector,spender,newAllowance));\\n    }\\n}\\n\\ninterface IPlanetFactory {\\n    \\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n}\\n\\ninterface IPlanetPair {\\n    function balanceOf(address owner) external view returns (uint);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function approve(address spender, uint value) external returns (bool);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n  \\n}\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\\ninterface IWBNB {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\\ninterface IStableSwap {\\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy, address receiver) external returns(uint256 stablesReceived);\\n    function get_coins(uint256 coin_index) external view returns (address coin_address);\\n\\n}\\n\\ninterface ISolidlyRouter{\\n    struct Routes {\\n        address from;\\n        address to;\\n        bool stable;\\n    }\\n}\\n\\ninterface ISolidlyRouter2 is ISolidlyRouter{\\n    function swapExactTokensForTokens(\\n        uint amountIn, \\n        uint amountOutMin, \\n        Routes[] calldata routes, \\n        address to, \\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function getAmountsOut(\\n        uint amountIn, \\n        Routes[] memory routes\\n    ) external view returns (uint[] memory amounts);\\n}\\n\\ncontract PlanetRouter is ISolidlyRouter{\\n\\n    address public immutable factory;\\n    address public immutable WBNB;\\n    uint public swapFeeFactor = 9990;\\n    uint public constant swapFeeFactorMin = 9900;\\n    address public admin;\\n    address[] public bnbToGammaPath;\\n\\n    modifier ensure(uint deadline) {\\n        require(deadline >= block.timestamp, 'PlanetRouter: EXPIRED');\\n        _;\\n    }\\n\\n    constructor(address _factory, address _WBNB) {\\n        factory = _factory;\\n        WBNB = _WBNB;\\n        admin = msg.sender;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == WBNB); // only accept ETH via fallback from the WETH contract\\n    }\\n\\n    // **** ADD LIQUIDITY ****\\n    function _addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin\\n    ) internal virtual returns (uint amountA, uint amountB) {\\n        // create the pair if it doesn't exist yet\\n        if (IPlanetFactory(factory).getPair(tokenA, tokenB) == address(0)) {\\n            IPlanetFactory(factory).createPair(tokenA, tokenB);\\n        }\\n        (uint reserveA, uint reserveB) = getReserves(tokenA, tokenB);\\n        if (reserveA == 0 && reserveB == 0) {\\n            (amountA, amountB) = (amountADesired, amountBDesired);\\n        } else {\\n            uint amountBOptimal = quote(amountADesired, reserveA, reserveB);\\n            if (amountBOptimal <= amountBDesired) {\\n                require(amountBOptimal >= amountBMin, 'PlanetRouter: INSUFFICIENT_B_AMOUNT');\\n                (amountA, amountB) = (amountADesired, amountBOptimal);\\n            } else {\\n                uint amountAOptimal = quote(amountBDesired, reserveB, reserveA);\\n                assert(amountAOptimal <= amountADesired);\\n                require(amountAOptimal >= amountAMin, 'PlanetRouter: INSUFFICIENT_A_AMOUNT');\\n                (amountA, amountB) = (amountAOptimal, amountBDesired);\\n            }\\n        }\\n    }\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external virtual ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\\n        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);\\n        address pair = pairFor(tokenA, tokenB);\\n        TransferHelper.safeTransferFrom(IERC20(tokenA), msg.sender, pair, amountA);\\n        TransferHelper.safeTransferFrom(IERC20(tokenB), msg.sender, pair, amountB);\\n        liquidity = IPlanetPair(pair).mint(to);\\n    }\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external virtual payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\\n        (amountToken, amountETH) = _addLiquidity(\\n            token,\\n            WBNB,\\n            amountTokenDesired,\\n            msg.value,\\n            amountTokenMin,\\n            amountETHMin\\n        );\\n        address pair = pairFor(token, WBNB);\\n        TransferHelper.safeTransferFrom(IERC20(token), msg.sender, pair, amountToken);\\n        IWBNB(WBNB).deposit{value: amountETH}();\\n        assert(IWBNB(WBNB).transfer(pair, amountETH));\\n        liquidity = IPlanetPair(pair).mint(to);\\n        // refund dust eth, if any\\n        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\\n    }\\n\\n    // **** REMOVE LIQUIDITY ****\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) public virtual ensure(deadline) returns (uint amountA, uint amountB) {\\n        address pair = pairFor(tokenA, tokenB);\\n        require(IPlanetPair(pair).transferFrom(msg.sender, pair, liquidity), \\\"transferFrom failed\\\"); // send liquidity to pair\\n        (uint amount0, uint amount1) = IPlanetPair(pair).burn(to);\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\\n        require(amountA >= amountAMin, 'PlanetRouter: INSUFFICIENT_A_AMOUNT');\\n        require(amountB >= amountBMin, 'PlanetRouter: INSUFFICIENT_B_AMOUNT');\\n    }\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) public virtual ensure(deadline) returns (uint amountToken, uint amountETH) {\\n        (amountToken, amountETH) = removeLiquidity(\\n            token,\\n            WBNB,\\n            liquidity,\\n            amountTokenMin,\\n            amountETHMin,\\n            address(this),\\n            deadline\\n        );\\n        TransferHelper.safeTransfer(IERC20(token), to, amountToken);\\n        IWBNB(WBNB).withdraw(amountETH);\\n        TransferHelper.safeTransferETH(to, amountETH);\\n    }\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external virtual returns (uint amountA, uint amountB) {\\n        address pair = pairFor(tokenA, tokenB);\\n        uint value = approveMax ? type(uint256).max : liquidity;\\n        IPlanetPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n        (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);\\n    }\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external virtual returns (uint amountToken, uint amountETH) {\\n        address pair = pairFor(token, WBNB);\\n        uint value = approveMax ? type(uint256).max : liquidity;\\n        IPlanetPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n        (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);\\n    }\\n\\n    // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) public virtual ensure(deadline) returns (uint amountETH) {\\n        (, amountETH) = removeLiquidity(\\n            token,\\n            WBNB,\\n            liquidity,\\n            amountTokenMin,\\n            amountETHMin,\\n            address(this),\\n            deadline\\n        );\\n        TransferHelper.safeTransfer(IERC20(token), to, IERC20(token).balanceOf(address(this)));\\n        IWBNB(WBNB).withdraw(amountETH);\\n        TransferHelper.safeTransferETH(to, amountETH);\\n    }\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external virtual returns (uint amountETH) {\\n        address pair = pairFor(token, WBNB);\\n        uint value = approveMax ? type(uint256).max : liquidity;\\n        IPlanetPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\\n        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\\n            token, liquidity, amountTokenMin, amountETHMin, to, deadline\\n        );\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {\\n        for (uint i = 0; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0,) = sortTokens(input, output);\\n            uint amountOut = amounts[i + 1];\\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\\n            address to = i < path.length - 2 ? pairFor(output, path[i + 2]) : _to;\\n            IPlanetPair(pairFor(input, output)).swap(\\n                amount0Out, amount1Out, to, new bytes(0)\\n            );\\n        }\\n    }\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external virtual ensure(deadline) returns (uint[] memory amounts) {\\n        amounts = getAmountsOut(amountIn, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'PlanetRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\n        TransferHelper.safeTransferFrom(\\n            IERC20(path[0]), msg.sender, pairFor(path[0], path[1]), amounts[0]\\n        );\\n        _swap(amounts, path, to);\\n    }\\n\\n    function swapExactTokensForTokensThenStableSwap(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path, \\n        uint[] calldata stableSwapPoolData,\\n        address stableSwapPool,\\n        address to,\\n        uint deadline\\n    ) external virtual ensure(deadline) returns (uint256 stablesReceived) {\\n        uint[] memory amounts = getAmountsOut(amountIn, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'PlanetRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\n        uint beforeSwapBalance = IPlanetPair(path[path.length - 1]).balanceOf(address(this));\\n\\n        TransferHelper.safeTransferFrom(\\n            IERC20(path[0]), msg.sender, pairFor(path[0], path[1]), amounts[0]\\n        );\\n        \\n        uint lastIndex = path.length - 1;\\n\\n        _swap(amounts, path, address(this)); \\n\\n        uint tokensReceived = IPlanetPair(path[lastIndex]).balanceOf(address(this)) - beforeSwapBalance;\\n\\n        _approveTokenIfNeeded(path[lastIndex], stableSwapPool);\\n        stablesReceived = IStableSwap(stableSwapPool).exchange(stableSwapPoolData[0], stableSwapPoolData[1], tokensReceived, stableSwapPoolData[2], to);\\n\\n    }\\n\\n    function stableSwapExactTokensThenSwapTokensForTokens(\\n        uint amountIn,\\n        uint[] calldata stableSwapPoolData,\\n        address stableSwapPool,\\n        address[] calldata path, \\n        uint amountOutMin,\\n        address to,\\n        uint deadline\\n    ) external virtual ensure(deadline) returns (uint[] memory amounts) {\\n\\n        _approveTokenIfNeeded(IStableSwap(stableSwapPool).get_coins(stableSwapPoolData[0]), stableSwapPool);\\n        uint256 stablesReceived = IStableSwap(stableSwapPool).exchange(stableSwapPoolData[0], stableSwapPoolData[1], amountIn, stableSwapPoolData[2], address(this));\\n\\n        amounts = getAmountsOut(stablesReceived, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'PlanetRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\n\\n        TransferHelper.safeTransferFrom(\\n            IERC20(path[0]), msg.sender, pairFor(path[0], path[1]), amounts[0]\\n        );\\n        \\n        _swap(amounts, path, to);\\n    }\\n\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external virtual ensure(deadline) returns (uint[] memory amounts) {\\n        amounts = getAmountsIn(amountOut, path);\\n        require(amounts[0] <= amountInMax, 'PlanetRouter: EXCESSIVE_INPUT_AMOUNT');\\n        TransferHelper.safeTransferFrom(\\n            IERC20(path[0]), msg.sender, pairFor(path[0], path[1]), amounts[0]\\n        );\\n        _swap(amounts, path, to);\\n    }\\n \\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        virtual\\n        payable\\n        ensure(deadline)\\n        returns (uint[] memory amounts)\\n    {\\n        require(path[0] == WBNB, 'PlanetRouter: INVALID_PATH');\\n        amounts = getAmountsOut(msg.value, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'PlanetRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\n        IWBNB(WBNB).deposit{value: amounts[0]}();\\n        assert(IWBNB(WBNB).transfer(pairFor(path[0], path[1]), amounts[0]));\\n        _swap(amounts, path, to);\\n    }\\n\\n    function swapExactETHForTokensThenStableSwap(uint amountOutMin, address[] calldata path,  uint[] calldata stableSwapPoolData,\\n        address stableSwapPool, address to, uint deadline)\\n        external\\n        virtual\\n        payable\\n        ensure(deadline)\\n        returns (uint256 stableReceived)\\n    {\\n        require(path[0] == WBNB, 'PlanetRouter: INVALID_PATH');\\n        uint[] memory amounts = getAmountsOut(msg.value, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'PlanetRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\n        IWBNB(WBNB).deposit{value: amounts[0]}();\\n        assert(IWBNB(WBNB).transfer(pairFor(path[0], path[1]), amounts[0]));\\n        \\n        uint lastIndex = path.length - 1;\\n        uint beforeSwapBalance = IPlanetPair(path[lastIndex]).balanceOf(address(this));\\n        _swap(amounts, path, address(this));\\n\\n        uint tokensReceived = IPlanetPair(path[lastIndex]).balanceOf(address(this)) - beforeSwapBalance;\\n\\n        _approveTokenIfNeeded(path[lastIndex], stableSwapPool);\\n        stableReceived = IStableSwap(stableSwapPool).exchange(stableSwapPoolData[0], stableSwapPoolData[1], tokensReceived, stableSwapPoolData[2], to);\\n    }\\n\\n    function stableSwapExactTokensThenSwapTokensForETH(\\n        uint amountIn,\\n        uint[] calldata stableSwapPoolData,\\n        address stableSwapPool,\\n        address[] calldata path, \\n        uint amountOutMin,\\n        address to,\\n        uint deadline)\\n        external virtual ensure(deadline) returns (uint256 stablesReceived)\\n    {\\n        _approveTokenIfNeeded(IStableSwap(stableSwapPool).get_coins(stableSwapPoolData[0]), stableSwapPool);\\n        stablesReceived = IStableSwap(stableSwapPool).exchange(stableSwapPoolData[0], stableSwapPoolData[1], amountIn, stableSwapPoolData[2], address(this));\\n\\n        uint[] memory amounts = getAmountsOut(stablesReceived, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'PlanetRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\n\\n        TransferHelper.safeTransferFrom(\\n            IERC20(path[0]), msg.sender, pairFor(path[0], path[1]), amounts[0]\\n        );\\n        \\n        // _swap(amounts, path, to);\\n\\n        _swap(amounts, path, address(this));\\n        IWBNB(WBNB).withdraw(amounts[amounts.length - 1]);\\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\n\\n    }\\n\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        virtual\\n        ensure(deadline)\\n        returns (uint[] memory amounts)\\n    {\\n        require(path[path.length - 1] == WBNB, 'PlanetRouter: INVALID_PATH');\\n        amounts = getAmountsIn(amountOut, path);\\n        require(amounts[0] <= amountInMax, 'PlanetRouter: EXCESSIVE_INPUT_AMOUNT');\\n        TransferHelper.safeTransferFrom(\\n            IERC20(path[0]), msg.sender, pairFor(path[0], path[1]), amounts[0]\\n        );\\n        _swap(amounts, path, address(this));\\n        IWBNB(WBNB).withdraw(amounts[amounts.length - 1]);\\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\n    }\\n    \\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        virtual\\n        ensure(deadline)\\n        returns (uint[] memory amounts)\\n    {\\n        require(path[path.length - 1] == WBNB, 'PlanetRouter: INVALID_PATH');\\n        amounts = getAmountsOut(amountIn, path);\\n        require(amounts[amounts.length - 1] >= amountOutMin, 'PlanetRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\n        TransferHelper.safeTransferFrom(\\n            IERC20(path[0]), msg.sender, pairFor(path[0], path[1]), amounts[0]\\n        );\\n        _swap(amounts, path, address(this));\\n        IWBNB(WBNB).withdraw(amounts[amounts.length - 1]);\\n        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\n    }\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        virtual\\n        payable\\n        ensure(deadline)\\n        returns (uint[] memory amounts)\\n    {\\n        require(path[0] == WBNB, 'PlanetRouter: INVALID_PATH');\\n        amounts = getAmountsIn(amountOut, path);\\n        require(amounts[0] <= msg.value, 'PlanetRouter: EXCESSIVE_INPUT_AMOUNT');\\n        IWBNB(WBNB).deposit{value: amounts[0]}();\\n        assert(IWBNB(WBNB).transfer(pairFor(path[0], path[1]), amounts[0]));\\n        _swap(amounts, path, to);\\n        // refund dust eth, if any\\n        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\\n    }\\n\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {\\n        for (uint i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0,) = sortTokens(input, output);\\n            IPlanetPair pair = IPlanetPair(pairFor(input, output));\\n            uint amountInput;\\n            uint amountOutput;\\n            { // scope to avoid stack too deep errors\\n            (uint reserve0, uint reserve1,) = pair.getReserves();\\n            (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n            amountInput = IERC20(input).balanceOf(address(pair)) - reserveInput;\\n            amountOutput = getAmountOut(amountInput, reserveInput, reserveOutput);\\n            }\\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\\n            address to = i < path.length - 2 ? pairFor(output, path[i + 2]) : _to;\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external virtual ensure(deadline) {\\n        TransferHelper.safeTransferFrom(\\n            IERC20(path[0]), msg.sender, pairFor(path[0], path[1]), amountIn\\n        );\\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(path, to);\\n        require(\\n            IERC20(path[path.length - 1]).balanceOf(to) - balanceBefore >= amountOutMin,\\n            'PlanetRouter: INSUFFICIENT_OUTPUT_AMOUNT'\\n        );\\n    }\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        virtual\\n        payable\\n        ensure(deadline)\\n    {\\n        require(path[0] == WBNB, 'PlanetRouter: INVALID_PATH');\\n        uint amountIn = msg.value;\\n        IWBNB(WBNB).deposit{value: amountIn}();\\n        assert(IWBNB(WBNB).transfer(pairFor(path[0], path[1]), amountIn));\\n        uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\n        _swapSupportingFeeOnTransferTokens(path, to);\\n        require(\\n            IERC20(path[path.length - 1]).balanceOf(to) - balanceBefore >= amountOutMin,\\n            'PlanetRouter: INSUFFICIENT_OUTPUT_AMOUNT'\\n        );\\n    }\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        virtual\\n        ensure(deadline)\\n    {\\n        require(path[path.length - 1] == WBNB, 'PlanetRouter: INVALID_PATH');\\n        TransferHelper.safeTransferFrom(\\n            IERC20(path[0]), msg.sender, pairFor(path[0], path[1]), amountIn\\n        );\\n        _swapSupportingFeeOnTransferTokens(path, address(this));\\n        uint amountOut = IERC20(WBNB).balanceOf(address(this));\\n        require(amountOut >= amountOutMin, 'PlanetRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\n        IWBNB(WBNB).withdraw(amountOut);\\n        TransferHelper.safeTransferETH(to, amountOut);\\n    }\\n\\n     // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'PlanetLibrary: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'PlanetLibrary: ZERO_ADDRESS');\\n    }\\n\\n    function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\\n        pair = IPlanetFactory(factory).getPair(tokenA, tokenB);\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(address tokenA, address tokenB) public view returns (uint reserveA, uint reserveB) {\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (uint reserve0, uint reserve1,) = IPlanetPair(pairFor(tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(uint amountA, uint reserveA, uint reserveB) public pure returns (uint amountB) {\\n        require(amountA > 0, 'PlanetLibrary: INSUFFICIENT_AMOUNT');\\n        require(reserveA > 0 && reserveB > 0, 'PlanetLibrary: INSUFFICIENT_LIQUIDITY');\\n        amountB = (amountA * reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal view returns (uint amountOut) {\\n        require(amountIn > 0, 'PlanetLibrary: INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'PlanetLibrary: INSUFFICIENT_LIQUIDITY');\\n        uint amountInWithFee = amountIn*swapFeeFactor;\\n        uint numerator = amountInWithFee*reserveOut;\\n        uint denominator = (reserveIn*10000) + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal view returns (uint amountIn) {\\n        require(amountOut > 0, 'PlanetLibrary: INSUFFICIENT_OUTPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'PlanetLibrary: INSUFFICIENT_LIQUIDITY');\\n        uint numerator = reserveIn*amountOut*10000;\\n        uint denominator = (reserveOut - amountOut)*swapFeeFactor;\\n        amountIn = (numerator / denominator) + 1;\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(uint amountIn, address[] memory path) public view returns (uint[] memory amounts) {\\n        require(path.length >= 2, 'PlanetLibrary: INVALID_PATH');\\n        amounts = new uint[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint i = 0; i < path.length - 1; i++) {\\n            (uint reserveIn, uint reserveOut) = getReserves(path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn( uint amountOut, address[] memory path) public view returns (uint[] memory amounts) {\\n        require(path.length >= 2, 'PlanetLibrary: INVALID_PATH');\\n        amounts = new uint[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint i = path.length - 1; i > 0; i--) {\\n            (uint reserveIn, uint reserveOut) = getReserves(path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n \\n    function _approveTokenIfNeeded(address token, address stablePoolAddress) private {\\n        if (IERC20(token).allowance(address(this), stablePoolAddress) == 0) {\\n            IERC20(token).approve(stablePoolAddress, type(uint256).max);\\n        }\\n    }\\n    \\n    function updateSwapFeeFactor(uint _swapFeeFactor) external {\\n        require(msg.sender == admin, \\\"only owner\\\");\\n        require(swapFeeFactorMin <= _swapFeeFactor);\\n        swapFeeFactor = _swapFeeFactor;\\n    }\\n\\n    function changeAdmin(address _newAdmin) external {\\n        require(msg.sender == admin, \\\"only owner\\\");\\n        require(_newAdmin != address(0), \\\"can't be 0 address\\\");\\n        admin = _newAdmin;\\n    }\\n\\n    function changeBnbToGammaPath(address[] memory _bnbToGammaPath) external {\\n        require(msg.sender == admin, \\\"only owner\\\");\\n        bnbToGammaPath = _bnbToGammaPath;\\n    }\\n    \\n\\n    function swapSolidlyToGamma(\\n        uint amountIn,\\n        uint amountOutMin,\\n        Routes[] calldata route,\\n        address to,\\n        uint deadline,\\n        address solidlyRouterAddress\\n    ) external virtual ensure(deadline) returns (uint[] memory amounts){\\n\\taddress fromToken = route[0].from;        \\n        TransferHelper.safeTransferFrom(\\n            IERC20(fromToken), msg.sender, address(this), amountIn\\n        );\\n        uint len = route.length-1;\\n        amounts = ISolidlyRouter2(solidlyRouterAddress).getAmountsOut(amountIn, route);\\n\\n\\n\\tTransferHelper.safeIncreaseAllowance(\\n\\t    IERC20(fromToken),\\n            solidlyRouterAddress,\\n            amountIn\\n        );\\n\\n        uint balBefore = IERC20(route[len].to).balanceOf(address(this));\\n        ISolidlyRouter2(solidlyRouterAddress).swapExactTokensForTokens(amountIn, amounts[amounts.length-1], route, address(this), block.timestamp + 300);\\n        \\n        uint balAfter =  IERC20(route[len].to).balanceOf(address(this)) - balBefore;\\n        address[] memory path = bnbToGammaPath;\\n        amounts = getAmountsOut(balAfter, path);\\n\\n        require(amounts[amounts.length-1] >= amountOutMin, 'PlanetRouter: INSUFFICIENT_OUTPUT_AMOUNT');\\n\\n        TransferHelper.safeTransferFrom(\\n            IERC20(path[0]), address(this), pairFor(path[0], path[1]), amounts[0]\\n        );\\n\\n        _swap(amounts, path, to);\\n    }\\n\\n    function getAmountsOutSolidlyToGamma(uint _amountIn, Routes[] memory _route, address _solidlyRouterAddress) public view returns (uint[] memory amounts){\\n        \\n        amounts =  ISolidlyRouter2(_solidlyRouterAddress).getAmountsOut(_amountIn, _route);\\n        \\n        _amountIn = amounts[amounts.length - 1];\\n        amounts = getAmountsOut(_amountIn, bnbToGammaPath);\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 350\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WBNB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bnbToGammaPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bnbToGammaPath\",\"type\":\"address[]\"}],\"name\":\"changeBnbToGammaPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct ISolidlyRouter.Routes[]\",\"name\":\"_route\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_solidlyRouterAddress\",\"type\":\"address\"}],\"name\":\"getAmountsOutSolidlyToGamma\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETHSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidityWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"stableSwapPoolData\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"stableSwapPool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"stableSwapExactTokensThenSwapTokensForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stablesReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"stableSwapPoolData\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"stableSwapPool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"stableSwapExactTokensThenSwapTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stableSwapPoolData\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"stableSwapPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokensThenStableSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stableReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETHSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stableSwapPoolData\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"stableSwapPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokensThenStableSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stablesReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeeFactorMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"internalType\":\"struct ISolidlyRouter.Routes[]\",\"name\":\"route\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"solidlyRouterAddress\",\"type\":\"address\"}],\"name\":\"swapSolidlyToGamma\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapFeeFactor\",\"type\":\"uint256\"}],\"name\":\"updateSwapFeeFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PlanetRouter", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "350", "ConstructorArguments": "000000000000000000000000a053582601214feb3778031a002135cbbb7dba18000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}