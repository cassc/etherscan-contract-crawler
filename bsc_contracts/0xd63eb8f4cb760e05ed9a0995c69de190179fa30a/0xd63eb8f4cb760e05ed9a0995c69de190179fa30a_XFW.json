{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.6;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n    external\r\n    returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor ()  {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n    external\r\n    view\r\n    returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n    external\r\n    view\r\n    returns (\r\n        uint112 reserve0,\r\n        uint112 reserve1,\r\n        uint32 blockTimestampLast\r\n    );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n    external\r\n    returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    returns (\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    payable\r\n    returns (\r\n        uint256 amountToken,\r\n        uint256 amountETH,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n    external\r\n    view\r\n    returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface Operate{\r\n    function getProhibit(address ) external view returns (bool);\r\n    function getOpen(address ) external view returns (bool);\r\n    function getOpeningSwap() external view returns (uint256);\r\n    function getSwapLimit()  external view returns (uint256);\r\n    function getSwapLimitNum()  external view returns (uint256);\r\n    function getSwapBackflow(uint256 ) external view returns (uint256);\r\n    function operateAddress() external view returns (address);\r\n    function getTransferFee(uint256 ) external view returns (uint256);\r\n    function getSwapBurn(uint256 ) external view returns (uint256);\r\n    function getSwapLpDividend(uint256 ,bool) external view returns (uint256);\r\n    function getAddLpTimeLimit() external view returns (uint256);\r\n    function getAddLpTimeLimitBurn(uint256,bool) external view returns (uint256);\r\n    function getLpIncomeTime() external view returns (uint256);\r\n    function getAddBackflow(uint256 ,bool) external view returns (uint256);\r\n}\r\n\r\ncontract XFW is IERC20,Ownable {\r\n    using SafeMath for uint256;\r\n    Operate public _operate;\r\n    mapping(address => uint256) private _tOwned;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    string private _name = \"XFW\";\r\n    string private _symbol = \"XFW\";\r\n    uint8 private _decimals = 18;\r\n    uint256 private _tTotal = 2666 * 10 ** 18;\r\n    uint256 private _destroy=0;\r\n    address currency=0x55d398326f99059fF775485246999027B3197955;\r\n    \r\n    uint256 private constant MAX = ~uint256(0);\r\n    IUniswapV2Router02 private _uniswapV2Router;\r\n    IUniswapV2Pair private _uniswapV2Pair;\r\n    address private token0;    \r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n\r\n    constructor(address _operateAddress,address[] memory addrs,uint256[] memory nums) {\r\n        _operate=Operate(_operateAddress);\r\n        uint256 allNum=_tTotal;\r\n        emit Transfer(address(0), msg.sender, allNum);\r\n\r\n        for(uint256 i=0;i<addrs.length;i++){\r\n            _tOwned[addrs[i]] = nums[i];\r\n            allNum-=nums[i];\r\n            emit Transfer(msg.sender, addrs[i], nums[i]);\r\n        }\r\n        _tOwned[msg.sender] = allNum;\r\n\r\n        _uniswapV2Router = IUniswapV2Router02(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n        _allowances[address(this)][address(_uniswapV2Router)] = MAX;\r\n        IERC20(currency).approve(msg.sender, uint256(~uint256(0)));\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n        .createPair(address(this), currency);\r\n\r\n        _uniswapV2Pair=IUniswapV2Pair(uniswapV2Pair);\r\n        token0=_uniswapV2Pair.token0();\r\n        require(token0 == currency, \"err noces\");\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint256) {\r\n        return _decimals;\r\n    }\r\n\r\n    function destroy() public view returns (uint256) {\r\n        return _destroy;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function surplusBurn() public view  returns (uint256) {\r\n        return 2466*10**18-_destroy;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    \r\n    function _burnLimit(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _tOwned[account] = _tOwned[account].sub(amount);\r\n        _burn(account,amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        _destroy=_destroy.add(amount);\r\n        _tOwned[address(0)] = _tOwned[address(0)].add(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function burn(uint256 amount) public virtual {\r\n        _burnLimit(msg.sender, amount);\r\n    }\r\n\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 currentAllowance = allowance(account, msg.sender);\r\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\r\n    unchecked {\r\n        _approve(account, msg.sender, currentAllowance.sub(amount));\r\n    }\r\n        _burnLimit(account, amount);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n    public\r\n    override\r\n    returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n    public\r\n    view\r\n    override\r\n    returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n    public\r\n    override\r\n    returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            msg.sender,\r\n            _allowances[sender][msg.sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    public\r\n    virtual\r\n    returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            _allowances[msg.sender][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_tOwned[from] >= amount, \"ERC20: Insufficient balance\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(_operate.getProhibit(from)==false, \"Blacklist address\");\r\n        if (_operate.getOpen(from)==true || _operate.getOpen(to)==true || from==address(this)){\r\n            _tOwned[from] = _tOwned[from].sub(amount);\r\n            _tOwned[to] = _tOwned[to].add(amount);\r\n            emit Transfer(from, to, amount);\r\n            if (from!=address(this)){\r\n                processLp(100000);\r\n            }\r\n            if(to==uniswapV2Pair && _isAddLiquidity() && from!=address(this)){\r\n                addHolder(from);\r\n            }\r\n            return;\r\n        }\r\n        _tOwned[from] = _tOwned[from].sub(amount);\r\n        \r\n        if (to == uniswapV2Pair || from == uniswapV2Pair) {\r\n            uint256 swapBackflow=_operate.getSwapBackflow(amount);\r\n            uint256 swapBurnAmount=_operate.getSwapBurn(amount);\r\n            uint256 swapLpAmount;\r\n\r\n            if (from==uniswapV2Pair){\r\n                if(_isRemoveLiquidity()){\r\n                    if (holderIndexTime[to]+_operate.getAddLpTimeLimit()>block.timestamp){\r\n                        swapBurnAmount=_operate.getAddLpTimeLimitBurn(amount,true);\r\n                        swapBackflow=_operate.getAddBackflow(amount,true);\r\n                    }else{\r\n                        swapBurnAmount=_operate.getAddLpTimeLimitBurn(amount,false);\r\n                        swapBackflow=_operate.getAddBackflow(amount,false);\r\n                    }\r\n                }else{\r\n                    swapLpAmount=_operate.getSwapLpDividend(amount,true);\r\n                }\r\n            }\r\n            if (to==uniswapV2Pair){\r\n                if(_isAddLiquidity()){\r\n                    addHolder(from);\r\n                    _tOwned[to] = _tOwned[to].add(amount);\r\n                    emit Transfer(from, to, amount);\r\n                    return;\r\n                }else{\r\n                    swapLpAmount=_operate.getSwapLpDividend(amount,false);\r\n                    if (swapLpAmount>0){\r\n                        _tOwned[address(this)] = _tOwned[address(this)].add(swapLpAmount);\r\n                        amount=amount.sub(swapLpAmount);\r\n                        emit Transfer(from, address(this), swapLpAmount);\r\n                    }\r\n                    swapLpAmount=0;\r\n                    swapTokenForFundMarketing();\r\n                    processLp(500000);\r\n                }\r\n            }\r\n            require(_operate.getOpeningSwap() <= block.timestamp, \"Transaction not opened\");\r\n            if (_operate.getOpeningSwap()+_operate.getSwapLimit()>block.timestamp){\r\n                if (from==uniswapV2Pair){\r\n                    require(amount.add(balanceOf(to)) <= _operate.getSwapLimitNum(), \"Purchase restriction\");\r\n                }\r\n            }\r\n            if (swapLpAmount>0){\r\n                _tOwned[address(this)] = _tOwned[address(this)].add(swapLpAmount);\r\n                amount=amount.sub(swapLpAmount);\r\n                emit Transfer(from, address(this), swapLpAmount);\r\n            }\r\n            \r\n            if (swapBackflow>0){\r\n                _tOwned[address(this)] = _tOwned[address(this)].add(swapBackflow);\r\n                _marketingNum+=swapBackflow;\r\n                amount=amount.sub(swapBackflow);\r\n                emit Transfer(from, address(this), swapBackflow);\r\n            }\r\n            \r\n            \r\n            if(surplusBurn()<swapBurnAmount){\r\n                swapBurnAmount=surplusBurn();\r\n            }\r\n            if (swapBurnAmount>0){\r\n                _burn(from,swapBurnAmount);\r\n                amount=amount.sub(swapBurnAmount);\r\n            }\r\n            \r\n            _tOwned[to] = _tOwned[to].add(amount);\r\n            emit Transfer(from, to, amount);\r\n        }else {\r\n            uint256 transferFeeNum=_operate.getTransferFee(amount);\r\n            if(surplusBurn()<transferFeeNum){\r\n                transferFeeNum=surplusBurn();\r\n            }\r\n            if (transferFeeNum>0){\r\n                _burn(from,transferFeeNum);\r\n            \r\n                amount=amount.sub(transferFeeNum);\r\n            }\r\n            _tOwned[to] = _tOwned[to].add(amount);\r\n            emit Transfer(from, to, amount);\r\n            processLp(100000);\r\n        }\r\n    }\r\n\r\n    uint256 public lastLpIncomeTime;\r\n    uint256 public lastLpIncomeIndex;\r\n\r\n    function _isAddLiquidity() internal view returns (bool isAdd){\r\n        (uint r0,uint256 r1,) = _uniswapV2Pair.getReserves();\r\n        address tokenOther = currency;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(uniswapV2Pair);\r\n        isAdd = bal > r;\r\n    }\r\n\r\n\r\n    function _isRemoveLiquidity() internal view returns (bool isRemove){\r\n        (uint r0,uint256 r1,) = _uniswapV2Pair.getReserves();\r\n\r\n        address tokenOther = currency;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(uniswapV2Pair));\r\n        isRemove = r >= bal;\r\n    }\r\n\r\n    address[] public holders;\r\n    mapping(address => uint256) holderIndex;\r\n    mapping(address => uint256) holderIndexTime;\r\n    function addHolder(address adr) private  {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(adr)\r\n        }\r\n        if (size > 0) {\r\n            return;\r\n        }\r\n        if (0 == holderIndex[adr]) {\r\n            if (0 == holders.length || holders[0] != adr) {\r\n                holderIndex[adr] = holders.length;\r\n                holderIndexTime[adr]=block.timestamp;\r\n                holders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    bool private inSwap;\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    event Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 value,\r\n        string error\r\n    );\r\n    event Success_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 value\r\n    );\r\n\r\n    function swapTokenForFund(uint256 tokenAmount)\r\n        private\r\n        lockTheSwap\r\n    {\r\n        address[] memory path = new address[](2);\r\n        path[0]=address(this);\r\n        path[1]=currency;\r\n        try \r\n            _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0,\r\n                path,\r\n                address(_operate),\r\n                block.timestamp+30\r\n            )\r\n        {\r\n            emit Success_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                tokenAmount\r\n            );\r\n        }\r\n        catch{\r\n            emit Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                \"Unknow error occurred!\"\r\n            );\r\n        }\r\n    } \r\n\r\n    function swapTokenForFundMarketing()\r\n        private\r\n        lockTheSwap\r\n    {\r\n        if (_marketingNum==0){\r\n            return;\r\n        }\r\n        uint256 tokenAmount=_marketingNum;\r\n        address[] memory path = new address[](2);\r\n        path[0]=address(this);\r\n        path[1]=currency;\r\n        try \r\n            _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0,\r\n                path,\r\n                _operate.operateAddress(),\r\n                block.timestamp+30\r\n            )\r\n        {\r\n            emit Success_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                tokenAmount\r\n            );\r\n            _marketingNum=0;\r\n        }\r\n        catch{\r\n            emit Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                \"Unknow error occurred!\"\r\n            );\r\n        }\r\n    }\r\n\r\n    uint256 public _marketingNum;\r\n    uint256 public _lastLpIncomeUsdt;\r\n\r\n    function processLp(uint256 gas) private {\r\n        if(lastLpIncomeTime==0){\r\n            lastLpIncomeTime=block.timestamp;\r\n            return ;\r\n        }\r\n        if(lastLpIncomeTime+_operate.getLpIncomeTime()>block.timestamp && lastLpIncomeIndex==0){\r\n            return ;\r\n        }\r\n        \r\n        uint256 contractTokenBalance = _tOwned[address(this)];\r\n        contractTokenBalance-=_marketingNum;\r\n        if ( !inSwap && contractTokenBalance>0 && lastLpIncomeIndex==0){\r\n            swapTokenForFund(contractTokenBalance);\r\n            lastLpIncomeTime=block.timestamp;\r\n        }\r\n\r\n        IERC20 lp = IERC20(uniswapV2Pair);\r\n        uint lpTokenTotal=lp.totalSupply();\r\n        if (lpTokenTotal==0){\r\n            return;\r\n        }\r\n\r\n        IERC20 usdt = IERC20(currency);\r\n\r\n        uint256 balance;\r\n        address shareHolder;\r\n        uint256 tokenBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = holders.length;\r\n        \r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        balance = usdt.balanceOf(address(_operate));\r\n        if (balance>0){\r\n            usdt.transferFrom(\r\n                address(_operate),\r\n                address(this),\r\n                balance\r\n            );\r\n        }\r\n        \r\n        balance = usdt.balanceOf(address(this));\r\n        if (balance==0){\r\n            return;\r\n        }\r\n        if (_lastLpIncomeUsdt==0){\r\n            _lastLpIncomeUsdt=balance;\r\n        }\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            shareHolder = holders[lastLpIncomeIndex];\r\n            tokenBalance = lp.balanceOf(shareHolder);\r\n            if (tokenBalance > 0 && !_operate.getProhibit(shareHolder)) {\r\n                amount = (_lastLpIncomeUsdt * tokenBalance) / lpTokenTotal;\r\n                if (amount > 0 && usdt.balanceOf(address(this)) > amount) {\r\n                    usdt.transfer(shareHolder, amount);\r\n                }\r\n            }\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            lastLpIncomeIndex++;\r\n            iterations++;\r\n            if (lastLpIncomeIndex >= shareholderCount) {\r\n                lastLpIncomeIndex = 0;\r\n                _lastLpIncomeUsdt=0;\r\n                iterations=shareholderCount;\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operateAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nums\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"Failed_swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Success_swapExactTokensForTokensSupportingFeeOnTransferTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_lastLpIncomeUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_operate\",\"outputs\":[{\"internalType\":\"contract Operate\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLpIncomeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastLpIncomeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"surplusBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "XFW", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e2341bb22516ff7d95396075c1d2435d5b97cec30000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000114000000000000000000000000000000000000000000000000000000000000000860000000000000000000000002cfaedbc2994476156b9c7f2ae76e745627386db000000000000000000000000aa72f1ff96779093e0d8713cec72efd5ccbaaa0e0000000000000000000000003ae2ae11bb0de930909dec2fb4c56a00f2716726000000000000000000000000e35a0ed1e144972a9cc9bd4c8d8c96df3cb121340000000000000000000000009f45f23ba2b848f61569de28209a94ab546896af00000000000000000000000006a194c7446a6a22dee54c4e36a9291b26a674a20000000000000000000000008cb3a8ccbbb413d2a09d174ab6f7924ea79681570000000000000000000000005a310cbcd340f5443916212296b2e8d85dbf019900000000000000000000000028c128d519d77ae158fcbe267853138cbcf2f4ec0000000000000000000000006a255a95a26f04c4d63d57b5b415d398d4687bb6000000000000000000000000eac4c5cca7cea19b7795396cf232140a47eef6b90000000000000000000000005a4b2f6b1ed5d2cec81c6e6352c07714b0588b1d000000000000000000000000928defdfdbc3fc0bd32d7c5f069900e694fbf55d000000000000000000000000a1f27abbeea49d18bb654b09a34143ebbfa344780000000000000000000000003897ea2317f6868deff5cc72170939bfab4f815b000000000000000000000000843d1af12a06d1281075858974cb4e025f84377e000000000000000000000000afdcbbf1b181ce60992a013dd381013c21bfb7ff00000000000000000000000018aa826fe5549cb9aa2623c096bdbf97ffe5e51f0000000000000000000000002013fe77b3273031b4efb184dbb5da0e04d043eb000000000000000000000000c996fdbafbaba255de49526cecbbf5316545279f0000000000000000000000000519a33e67dfd33dc8ca6ea054ab8ea00350e9b0000000000000000000000000c12c1766330e57dba42a877c8400fc1b388ebece00000000000000000000000037303dd5de26211456e0147fc5ef5b2074a912f400000000000000000000000067f41d198e421553ed25879dd03cdbdc493aaaf7000000000000000000000000a5841d5d17b81b0ded471e759ae93f800001732500000000000000000000000093ff6f1213cc8aacb218e45c24c91eadd07620cc00000000000000000000000090b08ba8bc8c698695c14cb2008cef11328b9e58000000000000000000000000284aa4816e1c374397a167d71cd369ca34484c6b000000000000000000000000f41475004f30a846fb8ceddaefc036a9d0d22cfe000000000000000000000000948a1820644b6a8126f5c8669431cd3c88ff961a000000000000000000000000880fba670194b98f17632e81528c521da59d8e85000000000000000000000000a6794a9103f661e5a88eef1a52043ef91d42ddd3000000000000000000000000b72b0fdc1aa5e72daf079aa5edea25a78a1169710000000000000000000000002fb323082e12e34e9561369317989fb7ccee4368000000000000000000000000f1cd11c7e99ebc537415fe0da5418567e2dd1c4a000000000000000000000000e57bfaf1fd18220307f27fd0399b3f683dd24e0d000000000000000000000000950b47471dfeb231d49c4cace334732e709007bf000000000000000000000000cf84c3364a4321e6e9f63987c40822ccc9fee5db000000000000000000000000d8fa8090e2f2b4b4fdddb5c51006d55c138cc1510000000000000000000000007c50af083e336d535331d8f15331848821cc39ac0000000000000000000000008426c869ddb497086d320f1272cfea7032c568600000000000000000000000005d7c343da73ec47a962e43ad0d201ee916284a8b000000000000000000000000284493c17a21e7b3bcbc71d51014cd40d7bc99200000000000000000000000002fb0972422aeefebdf388fbcafcc4ae78214ff9d00000000000000000000000049a3e76440e036132bf46c9bf6d73ac090ed26fe00000000000000000000000057895e8fd573cb4047efbcb1268c10e1d7345a2a000000000000000000000000d2b67b274fc8ca8ff2c41e39a13e20cae15b6f6f00000000000000000000000042a974600faf34ab0200fd0b32edfb995028c713000000000000000000000000a4ddeee78015893bfd6e0cfb04d2b27ea5b354e1000000000000000000000000b31d6eeb7d49da89b415e2dd810f244dd60fe5a0000000000000000000000000b8129181733aa3a1394dd173f98a0a432ff9a858000000000000000000000000d85eba3eb9e3b75e64973d5083dc73cc7222a4f60000000000000000000000004c9b1fbb4546406afee96133541debd6c298eb89000000000000000000000000a3a3add7f8860e7d6811f5f74e3970bb7a6b9e77000000000000000000000000919b03f0bdf3dce70e311267f8a7f95f8e4aed84000000000000000000000000640e3fb0d04319cf8784574eb96c67bdc0e130ad000000000000000000000000310ef4d101f98ce6570b8878b9a2e77b928b7bbf00000000000000000000000014d3b642f869922fb14e9c09acc613711add38cc00000000000000000000000001a6a9b0210e508159051b255aff1ba4429c706b0000000000000000000000009e4aa705c5cabd621d4fc664ebdc3a2a8c69316600000000000000000000000066b26a87546ca1aaf88f10f390e9eb6906e6e6e900000000000000000000000017cccebf5219155250a2c54fb16fd1182cb7af3a000000000000000000000000f6566001002b2296b2639dec3f8dc77fda43624e000000000000000000000000aa0851a42beb7c96fe87be5f94e8a43d5b908b0b000000000000000000000000aaa6f6eeba04cebe584778f5c36511ea3862032c0000000000000000000000001d0a0d6cd30ccbbcf523cbfa16b52677be03052200000000000000000000000031ce72eb16884f2258e9167d7a426bcc6bca517c000000000000000000000000e53d69c191b73d4551b98cf6804c40fd4c4d74cc000000000000000000000000d928c43d31087ecdff799d438ca914eb01a447d50000000000000000000000007adaa9ca787f2b5d5eff31d60ecb8253294faa4300000000000000000000000006db1a9a43d17c252339c296437b009ef84d9ae4000000000000000000000000b418076c56cdab97fc4c5560451164c782c3de1c0000000000000000000000003fcc23c4360a443b721c0d8897b44cbc2afe8cb60000000000000000000000002753bf2ad6f79fdd64aeb3d15c6aa3b35fae49520000000000000000000000000a83041eff34dc4633278e04d4b86ce866788fa6000000000000000000000000ce8776eb89cb2e4192967a2f27c93a9e6050daf000000000000000000000000011bb8f29f8846aca69866320f9c220b115d0043f00000000000000000000000097a600db86669f64c764be505dc7ad13a003fd32000000000000000000000000b1947c5da94be75ac7329e38003aa1221708f6dd000000000000000000000000502e781bb373f0a1165e69d4d6ca71f303716d5c000000000000000000000000e642e0fa325aca34eb5bdcf50fb7562dee800793000000000000000000000000c2235b2fefd4320706990fe16e26c753d12f9e51000000000000000000000000e755fc5797d2245583fdef233ecf68906cf27dd0000000000000000000000000ebc5153a2ba428e3f83e2af23f84aca224d4656a0000000000000000000000002c2aca47523b034ea523786cb0b089cb7b439b1f0000000000000000000000004fc936aca8407ff0ffe55e1be78ada0094ee94700000000000000000000000001cec0b7bf5e8134934e84f60725eb414e8764c1e0000000000000000000000000db77ec2185a282e2f59b517acfabc37530bb3aa00000000000000000000000095328a9b10adf4f7d21393a767771bc59f152ac50000000000000000000000009cc0740f6f5fd3ade569d968b096bdb61a10f0960000000000000000000000008e8f191103ca4d36860dfbc18271965fb28888880000000000000000000000007bbde6aa9f9dd5b366b44ff5328fb8c368d4bd1f0000000000000000000000005b80c9b0403a55d796436c1a4adbfd84c9520df600000000000000000000000076f1d238a47f9af186714f2da38a2460fafde4cd000000000000000000000000410bb4f08e622a08479edb9cede69227dab17b26000000000000000000000000e279ecdb4a49392893f3ce601338f093e38888880000000000000000000000003e73673c9228c51f45d2ab5d9133984b17e2db3a000000000000000000000000628871a2ba5c04597b07658efe3ed2b56cb8581e000000000000000000000000dded46fb7dfb59b017df5e5ae7688d73c80dcbdf000000000000000000000000e63fb45a3558fbcac5149445e2ab8f9227f8a7a80000000000000000000000001b1b6e1e7c77daef8a4db7781dd539fe328350e30000000000000000000000005240de280f0cc49cd5c7b0ea0759a51bd4cb3cfa000000000000000000000000560eede6c16819f176e750437a6ff33749357dda000000000000000000000000977dd4ce331bd9a54255463cd571048a178a0427000000000000000000000000d9fc675c67c23d83445dc4d7ebe0e6d1d8b1903300000000000000000000000070aa212611f5eae53b1859b0695dd18c4aa74521000000000000000000000000d4568a5a44b91343cf0500a345f5a84fee9f3243000000000000000000000000661de6a102f92aaf2b99ff234bdc4d6cd063f475000000000000000000000000e42dc4817157abaf8203640b1a18b532e6fc5b050000000000000000000000000229e6867dd0a2fa72092a53adad404c8cd46045000000000000000000000000d1ea259ac9305cb4e80c0c3bed183b1c0064006300000000000000000000000086d84057bf9c22524cce10ab09402ade0d31f6eb000000000000000000000000697606a41eb59f3950013a15d26558f1afff70cc000000000000000000000000f2a34609e219d3b5bf6d1b0c8734aab541f6c3ad000000000000000000000000d4a6d9189935473525cdd81f95e21442d9cf355e000000000000000000000000a277afa48a60f917909f489fc2caf1a3faf60450000000000000000000000000829d0803d37862e93477f700805f1e203a8cfe2300000000000000000000000005ea436719c1a3f594c98c5232541cbbb91629f400000000000000000000000008e45fe05abb1f1825ef27ee0a7f9c532e245e0b0000000000000000000000000870e7e57ba6b715a69ae18c2108bd6768ae8d3c000000000000000000000000ef4a0de6f0c7f6b50e6d72c2255be92984b05c150000000000000000000000001cdecbae3cc56e239b2672a0eb83e8a2ad593a52000000000000000000000000832c087b31ab2eb95840d4ed3f4d5915e08b9063000000000000000000000000ddf39a9eb91ef66b9334e0a77c1f6ee3a9301c98000000000000000000000000363a315e043d9d0c03f0de9aa9bfee739f1887bb000000000000000000000000c47021533747b395d1edc814eb6a0a6d3520d88c000000000000000000000000606a3b9eb6cfb57ef8c7481282c066739b868c76000000000000000000000000cdd3af3752ca2d59efaa419ba13708fcb639b36c0000000000000000000000009ddcc72b804867a559fd0a440c87ff354f5c8acb000000000000000000000000786d6968e70d6613a52b33209e78ba257bcca5890000000000000000000000002936bf9f40f80ffafc18d607c1ce0702fc3f1481000000000000000000000000abd73b5d1dd49912a885a98a205963a3a3b0440d000000000000000000000000eb82da196598eb2f05a4dca57a14717c5a5a04290000000000000000000000003abadbb28048d86c1eefb719d65fc8a9695347e7000000000000000000000000000000000000000000000000000000000000008600000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000006f05b59d3b20000", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4a541cc7fd5b11160f859ee5b77cc5119f281abf22b0aa21228fe4633330e78e"}