{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LaserEyes.sol\": {\r\n      \"content\": \"/** \\r\\n---------------------OFFICIAL---------------------\\r\\n--------------------LASER EYES--------------------\\r\\nMMMMMMMMMMMMMMMMmdyyso++++++ooyyhmMMMMMMMMMMMMMMMM\\r\\nMMMMMMMMMMMMmyo+//////////////////+oymMMMMMMMMMMMM\\r\\nMMMMMMMMMmy+//////////////////////////+ydMMMMMMMMM\\r\\nMMMMMMMdo////////////////////////////////+hMMMMMMM\\r\\nMMMMMmo///////o+///////////////////o///////+dMMMMM\\r\\nMMMMy+////////hh+////////////////+hd/////////yMMMM\\r\\nMMNo//////////hNmo//////////////omNd//////////oNMM\\r\\nMMo///////////hNNNhhhhhhhhhhhhhhNNNd///////////oNM\\r\\nMs////////////hNNNNNNNNNNNNNNNNNNNNd////////////sM\\r\\nm/////////////hNNNNNNNNNNNNNNNNNNNNd/////////////d\\r\\ns/////////////hNNNNmmmmNNNNmmmmNNNNd/////////////s\\r\\no/////////////hNNNmh+:sdmmds//ymNNNd//////////////\\r\\n//////////////hNNNNmdmmmmNmmmdmmNNNd//////////////\\r\\no/////////////hNNNN--/osyyso/-.mNNNd/////////////+\\r\\ns/////////////hNNNNo          :NNNNd/////////////o\\r\\nm+////////////hNNNNd          yNNNNd/////////////d\\r\\nMs///////////+dNNNNN+        :NNNNNd+///////////sM\\r\\nMNo//////+oydNNNNNNNNms////odNNNNNNNNdyo+//////oNM\\r\\nMMNssyhdmNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNmdhyssNMM\\r\\nMMMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMMM\\r\\nMMMMMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMMMMM\\r\\nMMMMMMMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMMMMMM\\r\\nMMMMMMMMMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMMMMMMMMM\\r\\nMMMMMMMMMMMMMNNNNNNNNNNNNNNNNNNNNNNNNMMMMMMMMMMMMM\\r\\nMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNNNMMMMMMMMMMMMMMMMM\\r\\n**/\\r\\n\\r\\n// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\n\\r\\ninterface IBEP20 {\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function allowance(address _owner, address spender) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n        ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n\\r\\nabstract contract Context {\\r\\n    \\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender());\\r\\n    }\\r\\n\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() external virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) external virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Role for internet link moderations  \\r\\n * Laser Eyes Project\\r\\n */\\r\\nabstract contract ModeratorRole is Context {\\r\\n    address private _moderator;\\r\\n\\r\\n    event ModeratorRoleTransferred(address indexed previousModerator, address indexed newModerator);\\r\\n\\r\\n    constructor() {\\r\\n        _setModerator(_msgSender());\\r\\n    }\\r\\n\\r\\n    function moderator() public view virtual returns (address) {\\r\\n        return _moderator;\\r\\n    }\\r\\n\\r\\n    modifier onlyModerator() {\\r\\n        require(moderator() == _msgSender(), \\\"Moderator: caller is not the moderator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceModerator() external virtual onlyModerator {\\r\\n        _setModerator(address(0));\\r\\n    }\\r\\n\\r\\n    function transferModerator(address newModerator) public virtual onlyModerator {\\r\\n        require(newModerator != address(0), \\\"Moderator: new Moderator is the zero address\\\");\\r\\n        _setModerator(newModerator);\\r\\n    }\\r\\n\\r\\n    function _setModerator(address newModerator) private {\\r\\n        address oldModerator = _moderator;\\r\\n        _moderator = newModerator;\\r\\n        emit ModeratorRoleTransferred(oldModerator, newModerator);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev\\r\\n * Control Proved Links for Laser Eyes Project\\r\\n*/  \\r\\nabstract contract TrustLink is ModeratorRole {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // store proved Laser Eyes Links and projects\\r\\n    mapping(bytes32 => uint8) private _link2status;\\r\\n\\r\\n    uint256 public linkCounter = 0; \\r\\n\\r\\n    uint8 constant private MIN_LINK_LENGTH = 2;\\r\\n    uint8 constant private MAX_LINK_LENGTH = 169;\\r\\n\\r\\n    // store official Laser Eyes Links\\r\\n    string public telegram;\\r\\n    string public website;\\r\\n    string public twitter;\\r\\n    string public medium;\\r\\n    string public reddit;\\r\\n\\r\\n    modifier approveLink(string memory _someLink) {\\r\\n        // validate length input link\\r\\n        require(bytes(_someLink).length > MIN_LINK_LENGTH, \\\"Link length is less than 2 characters\\\");\\r\\n        require(bytes(_someLink).length < MAX_LINK_LENGTH, \\\"Link length is more than 169 characters\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function updateTelegram(string memory newLink) external onlyModerator approveLink(newLink) returns(bool){\\r\\n        telegram = newLink;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function updateWebsite(string memory newLink) external onlyModerator approveLink(newLink) returns(bool){\\r\\n        website = newLink;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function updateTwitter(string memory newLink) external onlyModerator approveLink(newLink) returns(bool){\\r\\n        twitter = newLink;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function updateMedium(string memory newLink) external onlyModerator approveLink(newLink) returns(bool){\\r\\n        medium = newLink;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function updateReddit(string memory newLink) external onlyModerator approveLink(newLink) returns(bool){\\r\\n        reddit = newLink;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function addTokenLink(string memory newLink, uint8 newStatus) external onlyModerator approveLink(newLink) returns(uint){\\r\\n        require(newStatus > 0, \\\"Status must be greater than 0\\\");\\r\\n        uint _newLinkCounter = _updateTokenLink(newLink, newStatus);\\r\\n        return _newLinkCounter;\\r\\n    }\\r\\n\\r\\n    function deleteTokenLink(string memory someLink) external onlyModerator approveLink(someLink) returns(uint) {\\r\\n        bytes32 hashLink = keccak256(bytes(someLink));\\r\\n        uint8 oldStatus = _link2status[hashLink];\\r\\n        require(oldStatus != 0, \\\"Old Status Equal To Zero - Address not exists\\\");\\r\\n\\r\\n        uint _newLinkCounter = _updateTokenLink(someLink, 0);\\r\\n\\r\\n        return _newLinkCounter;\\r\\n    }\\r\\n\\r\\n    function updateTokenLink(string memory someLink, uint8 newStatus) external onlyModerator approveLink(someLink) returns(uint){\\r\\n        require(newStatus > 0, \\\"Status must be greater than 0\\\");\\r\\n        uint _newLinkCounter = _updateTokenLink(someLink, newStatus);\\r\\n\\r\\n        return _newLinkCounter;\\r\\n    }  \\r\\n\\r\\n    function _updateTokenLink(string memory someLink, \\r\\n                                        uint8 newStatus) \\r\\n                                    private approveLink(someLink) returns(uint){\\r\\n        \\r\\n        bytes32 hashLink = keccak256(bytes(someLink));\\r\\n        uint8 oldStatus = _link2status[hashLink];\\r\\n        require(oldStatus != newStatus, \\\"Old Status Equal to New Status\\\");\\r\\n\\r\\n        if (oldStatus == 0){\\r\\n            // add link\\r\\n            _link2status[hashLink] = newStatus;\\r\\n            linkCounter = linkCounter.add(1);\\r\\n            } else if ( (oldStatus > 0) && (newStatus > 0) ){\\r\\n            // update link\\r\\n            _link2status[hashLink] = newStatus;\\r\\n            } else if ( (oldStatus > 0) && (newStatus == 0) ){\\r\\n            // delete link\\r\\n            delete _link2status[hashLink];\\r\\n            linkCounter = linkCounter.sub(1);    \\r\\n        }\\r\\n  \\r\\n        return linkCounter;\\r\\n    }     \\r\\n\\r\\n    function getTokenLinkStatus(string memory someLink) external view approveLink(someLink) returns(uint8){\\r\\n        bytes32 hashLink = keccak256(bytes(someLink));\\r\\n        uint8 oldStatus = _link2status[hashLink];\\r\\n\\r\\n        return oldStatus;\\r\\n    }  \\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Main Implementation Laser Eyes Token\\r\\n * Official token of the Laser Eyes project - a service to find profitable tokens\\r\\n *  \\r\\n */ \\r\\ncontract LaserEyes is Context, IBEP20, Ownable, TrustLink {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address => uint256) private _balances;\\r\\n\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n    uint8 constant private DECIMALS = 8;\\r\\n    string constant private SYMBOL = \\\"LSR\\\";\\r\\n    string constant private NAME = \\\"LaserEyes\\\";\\r\\n    uint256 private oneMonth;\\r\\n\\r\\n    address public laserEyesAddress;\\r\\n\\r\\n    constructor(address _laserEyesAddress,\\r\\n                  string memory _telegram, \\r\\n                  string memory _website, \\r\\n                  string memory _twitter, \\r\\n                  string memory _medium,\\r\\n                  string memory _reddit) {\\r\\n\\r\\n        require(_laserEyesAddress != address(0), \\\"LaserEyes Mint to Zero Address\\\");\\r\\n\\r\\n        telegram = _telegram;\\r\\n        website = _website;\\r\\n        twitter = _twitter;\\r\\n        medium = _medium;\\r\\n        reddit = _reddit;\\r\\n\\r\\n        laserEyesAddress =_laserEyesAddress;\\r\\n        _totalSupply = 400_000_000 * 10**8;\\r\\n\\r\\n        _balances[msg.sender] = _totalSupply;\\r\\n\\r\\n        uint256 halfYear = 15_778_458;\\r\\n        oneMonth = block.timestamp.add(halfYear);\\r\\n\\r\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\r\\n\\r\\n        transferModerator(_laserEyesAddress);\\r\\n\\r\\n    }\\r\\n\\r\\n    function getOwner() external override view returns (address) {\\r\\n        return owner();\\r\\n    }\\r\\n\\r\\n    function getModerator() external view returns (address) {\\r\\n        return moderator();\\r\\n    }\\r\\n\\r\\n    function decimals() external override pure returns (uint8) {\\r\\n        return DECIMALS;\\r\\n    }\\r\\n\\r\\n    function symbol() external override pure returns (string memory) {\\r\\n        return SYMBOL;\\r\\n    }\\r\\n\\r\\n    function name() external override pure returns (string memory) {\\r\\n        return NAME;\\r\\n    }\\r\\n\\r\\n    function totalSupply() external override view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) external override view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        mint();\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address currentOwner, address spender) external override view returns (uint256) {\\r\\n        return _allowances[currentOwner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"BEP20: transfer amount exceeds allowance\\\"));\\r\\n        mint();\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"BEP20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function mint() public returns (bool) {\\r\\n        \\r\\n        uint256 MonthlyMint = 2_500_000 * (10**8);\\r\\n        \\r\\n        if(block.timestamp >= oneMonth){\\r\\n            _mint(laserEyesAddress, MonthlyMint );\\r\\n            oneMonth = oneMonth.add(2_629_743);\\r\\n            return true;\\r\\n        } else { \\r\\n            return false; \\r\\n        }\\r\\n    }\\r\\n\\r\\n    function burn(address account, uint256 amount) external onlyOwner returns (bool) {\\r\\n        _burn(account , amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function updateLaserEyesAddress(address newLaserEyesAddress) external onlyOwner returns(bool){\\r\\n        require(newLaserEyesAddress != address(0), \\\"LaserEyes Mint to Zero Address\\\");\\r\\n\\r\\n        laserEyesAddress = newLaserEyesAddress;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n        require(sender != address(0), \\\"BEP20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"BEP20: transfer to the zero address\\\");\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"BEP20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"BEP20: mint to the zero address\\\");\\r\\n        uint256 MaxSupply = 1_000_000_000 * 10**8;\\r\\n        if(_totalSupply < MaxSupply){\\r\\n            _totalSupply = _totalSupply.add(amount);\\r\\n            _balances[account] = _balances[account].add(amount);\\r\\n        }\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"BEP20: burn from the zero address\\\");\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"BEP20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _approve(address currentOwner, address spender, uint256 amount) internal {\\r\\n        require(currentOwner != address(0), \\\"BEP20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"BEP20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[currentOwner][spender] = amount;\\r\\n        emit Approval(currentOwner, spender, amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_laserEyesAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_telegram\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_website\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_twitter\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_medium\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_reddit\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousModerator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newModerator\",\"type\":\"address\"}],\"name\":\"ModeratorRoleTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newLink\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"addTokenLink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"someLink\",\"type\":\"string\"}],\"name\":\"deleteTokenLink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getModerator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"someLink\",\"type\":\"string\"}],\"name\":\"getTokenLinkStatus\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"laserEyesAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"medium\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moderator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reddit\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"telegram\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newModerator\",\"type\":\"address\"}],\"name\":\"transferModerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"twitter\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLaserEyesAddress\",\"type\":\"address\"}],\"name\":\"updateLaserEyesAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newLink\",\"type\":\"string\"}],\"name\":\"updateMedium\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newLink\",\"type\":\"string\"}],\"name\":\"updateReddit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newLink\",\"type\":\"string\"}],\"name\":\"updateTelegram\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"someLink\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"newStatus\",\"type\":\"uint8\"}],\"name\":\"updateTokenLink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newLink\",\"type\":\"string\"}],\"name\":\"updateTwitter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newLink\",\"type\":\"string\"}],\"name\":\"updateWebsite\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"website\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LaserEyes", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000003910da4b85d80a88140fa6c984d8e776f43edf4c00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000001b68747470733a2f2f742e6d652f6c6173657265796573746f6b656e0000000000000000000000000000000000000000000000000000000000000000000000001b68747470733a2f2f6c6173657265796573746f6b656e2e636f6d2f0000000000000000000000000000000000000000000000000000000000000000000000002268747470733a2f2f747769747465722e636f6d2f6c6173657265796573746f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001d68747470733a2f2f6c61736572657965732e6d656469756d2e636f6d2f000000000000000000000000000000000000000000000000000000000000000000002668747470733a2f2f7265646469742e636f6d2f757365722f4c6173657265796573746f6b656e0000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}