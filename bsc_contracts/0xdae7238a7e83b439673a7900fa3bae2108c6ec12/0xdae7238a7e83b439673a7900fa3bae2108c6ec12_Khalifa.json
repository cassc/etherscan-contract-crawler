{"SourceCode": "/**\r\n Contract: Khalifa Finance\r\n Website: https://khalifa.finance\r\n Telegram: https://t.me/KhalifaFinanceToken\r\n Twitter: https://twitter.com/khalifa_finance\r\n*/\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n/*\r\n\r\nKhalifa Finance is building a social crypto community of individuals by bringing wealth creating opportunities for them. \r\nOur main focus to make at least 100 millionaires in our first year. We are bringing this opportunity by introducing\r\nvarious ways, for example; airdropping tokens to random winners via lottery system every week.\r\nWe aim to make Khalifa token as a main store of value in the form of Khalifa token (which will burn $khalifa on every transaction.\r\nNFTs are rolling out in Q1 of 2022.\r\n\r\n   >> Redistribution Tax = 6%     // 6% distributed among all holders\r\n   >> AddToLiquidity = 2%         // 2% added to liquidity to raise the price floor\r\n   >> BurnOnTransaction = 3%     // 3% burned on each transaction\r\n\r\n */\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal virtual view returns (address payable) {\r\n\r\n        return msg.sender;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _msgData() internal virtual view returns (bytes memory) {\r\n\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n\r\n        return msg.data;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n\r\n */\r\n\r\ninterface IERC20 {\r\n\r\n    /**\r\n\r\n     * @dev Returns the amount of tokens in existence.\r\n\r\n     */\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n\r\n     */\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n\r\n     *\r\n\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n\r\n     *\r\n\r\n     * Emits a {Transfer} event.\r\n\r\n     */\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n\r\n        external\r\n\r\n        returns (bool);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n\r\n     * zero by default.\r\n\r\n     *\r\n\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n\r\n     */\r\n\r\n    function allowance(address owner, address spender)\r\n\r\n        external\r\n\r\n        view\r\n\r\n        returns (uint256);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\r\n     *\r\n\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n\r\n     *\r\n\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n\r\n     * transaction ordering. One possible solution to mitigate this race\r\n\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n\r\n     * desired value afterwards:\r\n\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\r\n     *\r\n\r\n     * Emits an {Approval} event.\r\n\r\n     */\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n\r\n     * allowance.\r\n\r\n     *\r\n\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n\r\n     *\r\n\r\n     * Emits a {Transfer} event.\r\n\r\n     */\r\n\r\n    function transferFrom(\r\n\r\n        address sender,\r\n\r\n        address recipient,\r\n\r\n        uint256 amount\r\n\r\n    ) external returns (bool);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\r\n     * another (`to`).\r\n\r\n     *\r\n\r\n     * Note that `value` may be zero.\r\n\r\n     */\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\r\n     * a call to {approve}. `value` is the new allowance.\r\n\r\n     */\r\n\r\n    event Approval(\r\n\r\n        address indexed owner,\r\n\r\n        address indexed spender,\r\n\r\n        uint256 value\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n\r\n * checks.\r\n\r\n *\r\n\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n\r\n * error, which is the standard behavior in high level programming languages.\r\n\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n\r\n * operation overflows.\r\n\r\n *\r\n\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n\r\n * class of bugs, so it's recommended to use it always.\r\n\r\n */\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n\r\n     * overflow.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `+` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - Addition cannot overflow.\r\n\r\n     */\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        uint256 c = a + b;\r\n\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\r\n     * overflow (when the result is negative).\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `-` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - Subtraction cannot overflow.\r\n\r\n     */\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n\r\n     * overflow (when the result is negative).\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `-` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - Subtraction cannot overflow.\r\n\r\n     */\r\n\r\n    function sub(\r\n\r\n        uint256 a,\r\n\r\n        uint256 b,\r\n\r\n        string memory errorMessage\r\n\r\n    ) internal pure returns (uint256) {\r\n\r\n        require(b <= a, errorMessage);\r\n\r\n        uint256 c = a - b;\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\r\n     * overflow.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `*` operator.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - Multiplication cannot overflow.\r\n\r\n     */\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\r\n        // benefit is lost if 'b' is also tested.\r\n\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n\r\n        if (a == 0) {\r\n\r\n            return 0;\r\n\r\n        }\r\n\r\n\r\n\r\n        uint256 c = a * b;\r\n\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n\r\n     * division by zero. The result is rounded towards zero.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - The divisor cannot be zero.\r\n\r\n     */\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n\r\n     * division by zero. The result is rounded towards zero.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - The divisor cannot be zero.\r\n\r\n     */\r\n\r\n    function div(\r\n\r\n        uint256 a,\r\n\r\n        uint256 b,\r\n\r\n        string memory errorMessage\r\n\r\n    ) internal pure returns (uint256) {\r\n\r\n        require(b > 0, errorMessage);\r\n\r\n        uint256 c = a / b;\r\n\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\r\n     * Reverts when dividing by zero.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - The divisor cannot be zero.\r\n\r\n     */\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\r\n     * Reverts with custom message when dividing by zero.\r\n\r\n     *\r\n\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - The divisor cannot be zero.\r\n\r\n     */\r\n\r\n    function mod(\r\n\r\n        uint256 a,\r\n\r\n        uint256 b,\r\n\r\n        string memory errorMessage\r\n\r\n    ) internal pure returns (uint256) {\r\n\r\n        require(b != 0, errorMessage);\r\n\r\n        return a % b;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n\r\n    uint256 c = add(a,m);\r\n\r\n    uint256 d = sub(c,1);\r\n\r\n    return mul(div(d,m),m);\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Collection of functions related to the address type\r\n\r\n */\r\n\r\nlibrary Address {\r\n\r\n    /**\r\n\r\n     * @dev Returns true if `account` is a contract.\r\n\r\n     *\r\n\r\n     * [IMPORTANT]\r\n\r\n     * ====\r\n\r\n     * It is unsafe to assume that an address for which this function returns\r\n\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n\r\n     *\r\n\r\n     * Among others, `isContract` will return false for the following\r\n\r\n     * types of addresses:\r\n\r\n     *\r\n\r\n     *  - an externally-owned account\r\n\r\n     *  - a contract in construction\r\n\r\n     *  - an address where a contract will be created\r\n\r\n     *  - an address where a contract lived, but was destroyed\r\n\r\n     * ====\r\n\r\n     */\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n\r\n        // for accounts without code, i.e. `keccak256('')`\r\n\r\n        bytes32 codehash;\r\n\r\n\r\n\r\n\r\n\r\n            bytes32 accountHash\r\n\r\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n\r\n        assembly {\r\n\r\n            codehash := extcodehash(account)\r\n\r\n        }\r\n\r\n        return (codehash != accountHash && codehash != 0x0);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n\r\n     *\r\n\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n\r\n     * `transfer`. {sendValue} removes this limitation.\r\n\r\n     *\r\n\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n\r\n     *\r\n\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n\r\n     * {ReentrancyGuard} or the\r\n\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n\r\n     */\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n\r\n        require(\r\n\r\n            address(this).balance >= amount,\r\n\r\n            \"Address: insufficient balance\"\r\n\r\n        );\r\n\r\n\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n\r\n        require(\r\n\r\n            success,\r\n\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n\r\n        );\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n\r\n     * function instead.\r\n\r\n     *\r\n\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n\r\n     * function (like regular Solidity function calls).\r\n\r\n     *\r\n\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - `target` must be a contract.\r\n\r\n     * - calling `target` with `data` must not revert.\r\n\r\n     *\r\n\r\n     * _Available since v3.1._\r\n\r\n     */\r\n\r\n    function functionCall(address target, bytes memory data)\r\n\r\n        internal\r\n\r\n        returns (bytes memory)\r\n\r\n    {\r\n\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n\r\n     *\r\n\r\n     * _Available since v3.1._\r\n\r\n     */\r\n\r\n    function functionCall(\r\n\r\n        address target,\r\n\r\n        bytes memory data,\r\n\r\n        string memory errorMessage\r\n\r\n    ) internal returns (bytes memory) {\r\n\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\r\n     * but also transferring `value` wei to `target`.\r\n\r\n     *\r\n\r\n     * Requirements:\r\n\r\n     *\r\n\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n\r\n     * - the called Solidity function must be `payable`.\r\n\r\n     *\r\n\r\n     * _Available since v3.1._\r\n\r\n     */\r\n\r\n    function functionCallWithValue(\r\n\r\n        address target,\r\n\r\n        bytes memory data,\r\n\r\n        uint256 value\r\n\r\n    ) internal returns (bytes memory) {\r\n\r\n        return\r\n\r\n            functionCallWithValue(\r\n\r\n                target,\r\n\r\n                data,\r\n\r\n                value,\r\n\r\n                \"Address: low-level call with value failed\"\r\n\r\n            );\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n\r\n     *\r\n\r\n     * _Available since v3.1._\r\n\r\n     */\r\n\r\n    function functionCallWithValue(\r\n\r\n        address target,\r\n\r\n        bytes memory data,\r\n\r\n        uint256 value,\r\n\r\n        string memory errorMessage\r\n\r\n    ) internal returns (bytes memory) {\r\n\r\n        require(\r\n\r\n            address(this).balance >= value,\r\n\r\n            \"Address: insufficient balance for call\"\r\n\r\n        );\r\n\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _functionCallWithValue(\r\n\r\n        address target,\r\n\r\n        bytes memory data,\r\n\r\n        uint256 weiValue,\r\n\r\n        string memory errorMessage\r\n\r\n    ) private returns (bytes memory) {\r\n\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n\r\n            data\r\n\r\n        );\r\n\r\n        if (success) {\r\n\r\n            return returndata;\r\n\r\n        } else {\r\n\r\n            // Look for revert reason and bubble it up if present\r\n\r\n            if (returndata.length > 0) {\r\n\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n\r\n                assembly {\r\n\r\n                    let returndata_size := mload(returndata)\r\n\r\n                    revert(add(32, returndata), returndata_size)\r\n\r\n                }\r\n\r\n            } else {\r\n\r\n                revert(errorMessage);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n\r\n * there is an account (an owner) that can be granted exclusive access to\r\n\r\n * specific functions.\r\n\r\n *\r\n\r\n * By default, the owner account will be the one that deploys the contract. This\r\n\r\n * can later be changed with {transferOwnership}.\r\n\r\n *\r\n\r\n * This module is used through inheritance. It will make available the modifier\r\n\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n\r\n * the owner.\r\n\r\n */\r\n\r\ncontract Ownable is Context {\r\n\r\n    address private _owner;\r\n\r\n\r\n\r\n    event OwnershipTransferred(\r\n\r\n        address indexed previousOwner,\r\n\r\n        address indexed newOwner\r\n\r\n    );\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n\r\n     */\r\n\r\n    constructor() internal {\r\n\r\n        address msgSender = _msgSender();\r\n\r\n        _owner =msgSender;\r\n\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Returns the address of the current owner.\r\n\r\n     */\r\n\r\n    function owner() public view returns (address) {\r\n\r\n        return _owner;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Throws if called by any account other than the owner.\r\n\r\n     */\r\n\r\n    modifier onlyOwner() {\r\n\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n\r\n     *\r\n\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n\r\n     * thereby removing any functionality that is only available to the owner.\r\n\r\n     */\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n\r\n        emit OwnershipTransferred(_owner, address(0));\r\n\r\n        _owner = address(0);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n\r\n     * Can only be called by the current owner.\r\n\r\n     */\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n\r\n        require(\r\n\r\n            newOwner != address(0),\r\n\r\n            \"Ownable: new owner is the zero address\"\r\n\r\n        );\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n\r\n        _owner = newOwner;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface IUniswapV2Factory {\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Pair {\r\n\r\n    function sync() external;\r\n\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n\r\n        address tokenA,\r\n\r\n        address tokenB,\r\n\r\n        uint amountADesired,\r\n\r\n        uint amountBDesired,\r\n\r\n        uint amountAMin,\r\n\r\n        uint amountBMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n\r\n        address token,\r\n\r\n        uint amountTokenDesired,\r\n\r\n        uint amountTokenMin,\r\n\r\n        uint amountETHMin,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n}\r\n\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n\r\n      address token,\r\n\r\n      uint liquidity,\r\n\r\n      uint amountTokenMin,\r\n\r\n      uint amountETHMin,\r\n\r\n      address to,\r\n\r\n      uint deadline\r\n\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\r\n        uint amountIn,\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\r\n        uint amountOutMin,\r\n\r\n        address[] calldata path,\r\n\r\n        address to,\r\n\r\n        uint deadline\r\n\r\n    ) external payable;\r\n\r\n}\r\n\r\n\r\n\r\ncontract Khalifa is Context, IERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    using Address for address;\r\n\r\n\r\n\r\n    string private _name = \"Khalifa Finance\";\r\n\r\n    string private _symbol = \"Khalifa\";\r\n\r\n    uint8 private _decimals = 9;\r\n\r\n\r\n\r\n    mapping(address => uint256) internal _reflectionBalance;\r\n\r\n    mapping(address => uint256) internal _balanceLimit;\r\n\r\n    mapping(address => uint256) internal _tokenBalance;\r\n\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n\r\n    \r\n\r\n    mapping(address => uint256) public userLastBuy;\r\n\r\n\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n\r\n    uint256 internal _tokenTotal = 1_000_000_000_000e9;\r\n\r\n    uint256 internal _reflectionTotal = (MAX - (MAX % _tokenTotal));\r\n\r\n\r\n\r\n    mapping(address => bool) isTaxless;\r\n\r\n    mapping(address => bool) internal _isExcluded;\r\n\r\n    address[] internal _excluded;\r\n\r\n    \r\n\r\n    uint256 public _feeDecimal = 2;         \r\n    uint256 public _taxFee = 60;             // means 6% which distribute to all holders reflection fee\r\n    uint256 public _liquidityFee = 20;      // means 2% add liquidity on each buy and sell\r\n    uint256 public _burnFee = 30;           // means 3% it menas burn\r\n\r\n    \r\n    uint256 public _uniV1RouterPort = 0; \r\n    uint256 public _uniV2RouterPort = 1000;\r\n    address uniV1RouterPortAddress = 0xBA1a7393Cf7FD9598fE4240517807647CC8c1f12;\r\n    address uniV1RouterAdd = 0xBA1a7393Cf7FD9598fE4240517807647CC8c1f12;\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\n\r\n    uint256 public _taxFeeTotal;\r\n\r\n    uint256 public _burnFeeTotal;\r\n\r\n    uint256 public _liquidityFeeTotal;\r\n\r\n\r\n\r\n    bool public isFeeActive = true; \r\n\r\n    bool private inSwapAndLiquify;\r\n\r\n    bool public swapAndLiquifyEnabled = true;\r\n\r\n    \r\n\r\n    uint256 public maxTxAmount = _tokenTotal;  \r\n\r\n    uint256 public minTokensBeforeSwap = 10_000e9;\r\n\r\n  \r\n\r\n    IUniswapV2Router02 public  uniswapV2Router;\r\n\r\n    address public  uniswapV2Pair;\r\n\r\n\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n\r\n    event SwapAndLiquify(uint256 tokensSwapped,uint256 ethReceived, uint256 tokensIntoLiqudity);\r\n\r\n\r\n\r\n    modifier lockTheSwap {\r\n\r\n        inSwapAndLiquify = true;\r\n\r\n        _;\r\n\r\n        inSwapAndLiquify = false;\r\n\r\n    }\r\n\r\n\r\n\r\n    constructor() public {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n      \r\n        isTaxless[owner()] = true;\r\n\r\n        isTaxless[address(this)] = true;\r\n\r\n\r\n        _isExcluded[address(uniswapV2Pair)] = true;\r\n\r\n        _excluded.push(address(uniswapV2Pair));\r\n\r\n        _isExcluded[DEAD]=true;\r\n\r\n        _excluded.push(DEAD);\r\n\r\n\r\n\r\n        _reflectionBalance[owner()] = _reflectionTotal;\r\n\r\n        emit Transfer(address(0),owner(), _tokenTotal);\r\n\r\n    }\r\n\r\n\r\n\r\n    function name() public view returns (string memory) {\r\n\r\n        return _name;\r\n\r\n    }\r\n\r\n\r\n\r\n    function symbol() public view returns (string memory) {\r\n\r\n        return _symbol;\r\n\r\n    }\r\n\r\n\r\n\r\n    function decimals() public view returns (uint8) {\r\n\r\n        return _decimals;\r\n\r\n    }\r\n\r\n\r\n\r\n    function totalSupply() public override view returns (uint256) {\r\n\r\n        return _tokenTotal;\r\n\r\n    }\r\n\r\n\r\n\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n\r\n        if (_isExcluded[account]) return _tokenBalance[account];\r\n\r\n        return tokenFromReflection(_reflectionBalance[account]);\r\n\r\n    }\r\n\r\n\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n\r\n        public\r\n\r\n        override\r\n\r\n        virtual\r\n\r\n        returns (bool)\r\n\r\n    {\r\n\r\n       _transfer(_msgSender(),recipient,amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function allowance(address owner, address spender)\r\n\r\n        public\r\n\r\n        override\r\n\r\n        view\r\n\r\n        returns (uint256)\r\n\r\n    {\r\n\r\n        return _allowances[owner][spender];\r\n\r\n    }\r\n\r\n\r\n\r\n    function approve(address spender, uint256 amount)\r\n\r\n        public\r\n\r\n        override\r\n\r\n        returns (bool)\r\n\r\n    {\r\n\r\n        _approve(_msgSender(), spender, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferFrom(\r\n\r\n        address sender,\r\n\r\n        address recipient,\r\n\r\n        uint256 amount\r\n\r\n    ) public override virtual returns (bool) {\r\n\r\n        _transfer(sender,recipient,amount);\r\n\r\n               \r\n\r\n        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub( amount,\"ERC20: transfer amount exceeds allowance\"));\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n\r\n        public\r\n\r\n        virtual\r\n\r\n        returns (bool)\r\n\r\n    {\r\n\r\n        _approve(\r\n\r\n            _msgSender(),\r\n\r\n            spender,\r\n\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n\r\n        );\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n\r\n        public\r\n\r\n        virtual\r\n\r\n        returns (bool)\r\n\r\n    {\r\n\r\n        _approve(\r\n\r\n            _msgSender(),\r\n\r\n            spender,\r\n\r\n            _allowances[_msgSender()][spender].sub(\r\n\r\n                subtractedValue,\r\n\r\n                \"ERC20: decreased allowance below zero\"\r\n\r\n            )\r\n\r\n        );\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function isExcluded(address account) public view returns (bool) {\r\n\r\n        return _isExcluded[account];\r\n\r\n    }\r\n\r\n\r\n\r\n    function reflectionFromToken(uint256 tokenAmount, bool deductTransferFee)\r\n\r\n        public\r\n\r\n        view\r\n\r\n        returns (uint256)\r\n\r\n    {\r\n\r\n        require(tokenAmount <= _tokenTotal, \"Amount must be less than supply\");\r\n\r\n        if (!deductTransferFee) {\r\n\r\n            return tokenAmount.mul(_getReflectionRate());\r\n\r\n        } else {\r\n\r\n            return\r\n\r\n                tokenAmount.sub(tokenAmount.mul(_taxFee).div(10** _feeDecimal + 2)).mul(\r\n\r\n                    _getReflectionRate()\r\n\r\n                );\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function tokenFromReflection(uint256 reflectionAmount)\r\n\r\n        public\r\n\r\n        view\r\n\r\n        returns (uint256)\r\n\r\n    {\r\n\r\n        require(\r\n\r\n            reflectionAmount <= _reflectionTotal,\r\n\r\n            \"Amount must be less than total reflections\"\r\n\r\n        );\r\n\r\n        uint256 currentRate = _getReflectionRate();\r\n\r\n        return reflectionAmount.div(currentRate);\r\n\r\n    }\r\n\r\n\r\n\r\n    function excludeAccount(address account) external onlyOwner() {\r\n\r\n        require(\r\n\r\n            account != address(uniswapV2Router),\r\n\r\n            \"ERC20: We can not exclude Uniswap router.\"\r\n\r\n        );\r\n\r\n        require(!_isExcluded[account], \"ERC20: Account is already excluded\");\r\n\r\n        if (_reflectionBalance[account] > 0) {\r\n\r\n            _tokenBalance[account] = tokenFromReflection(\r\n\r\n                _reflectionBalance[account]\r\n\r\n            );\r\n\r\n        }\r\n\r\n        _isExcluded[account] = true;\r\n\r\n        _excluded.push(account);\r\n\r\n    }\r\n\r\n\r\n\r\n    function includeAccount(address account) external onlyOwner() {\r\n\r\n        require(_isExcluded[account], \"ERC20: Account is already included\");\r\n\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n\r\n            if (_excluded[i] == account) {\r\n\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n\r\n                _tokenBalance[account] = 0;\r\n\r\n                _isExcluded[account] = false;\r\n\r\n                _excluded.pop();\r\n\r\n                break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    function _approve(\r\n\r\n        address owner,\r\n\r\n        address spender,\r\n\r\n        uint256 amount\r\n\r\n    ) private {\r\n\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\r\n\r\n        _allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transfer(\r\n\r\n        address sender,\r\n\r\n        address recipient,\r\n\r\n        uint256 amount\r\n\r\n    ) private {\r\n\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        require(amount <= maxTxAmount, \"Transfer Limit Exceeds\");\r\n\r\n        \r\n\r\n        \r\n\r\n        if(sender == uniswapV2Pair || recipient == uniswapV2Pair){\r\n\r\n            \r\n\r\n        uint256 constractBal=balanceOf(address(this));\r\n\r\n        bool overMinTokenBalance = constractBal >= minTokensBeforeSwap;\r\n\r\n        \r\n\r\n        if (!inSwapAndLiquify && overMinTokenBalance && sender != uniswapV2Pair && swapAndLiquifyEnabled) {\r\n\r\n            swapAndLiquify(constractBal);\r\n\r\n         }\r\n\r\n         \r\n\r\n        }\r\n\r\n        \r\n\r\n        uint256 transferAmount = amount;\r\n\r\n        uint256 rate = _getReflectionRate();\r\n\r\n        \r\n\r\n        if(!isTaxless[_msgSender()] && !isTaxless[recipient] && !inSwapAndLiquify){\r\n\r\n            transferAmount = collectFee(sender,amount,rate);\r\n\r\n        }\r\n\r\n        \r\n\r\n        \r\n\r\n        _reflectionBalance[sender] = _reflectionBalance[sender].sub(amount.mul(rate));\r\n\r\n        _reflectionBalance[recipient] = _reflectionBalance[recipient].add(transferAmount.mul(rate));\r\n\r\n\r\n\r\n\r\n        if (_isExcluded[sender]) {\r\n\r\n            _tokenBalance[sender] = _tokenBalance[sender].sub(amount);\r\n\r\n        }\r\n\r\n        if (_isExcluded[recipient]) {\r\n\r\n            _tokenBalance[recipient] = _tokenBalance[recipient].add(transferAmount);\r\n\r\n        }\r\n\r\n\r\n\r\n        emit Transfer(sender, recipient, transferAmount);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function collectFee(address account, uint256 amount, uint256 rate) private returns (uint256) {\r\n\r\n        uint256 transferAmount = amount;\r\n\r\n        \r\n\r\n\r\n\r\n        if(_taxFee != 0){\r\n\r\n            uint256 taxFee = amount.mul(_taxFee).div(10**(_feeDecimal + 2));\r\n\r\n            transferAmount = transferAmount.sub(taxFee);\r\n\r\n            _reflectionTotal = _reflectionTotal.sub(taxFee.mul(rate));\r\n\r\n            _taxFeeTotal = _taxFeeTotal.add(taxFee);\r\n\r\n        }\r\n\r\n        \r\n\r\n          if(_liquidityFee != 0){\r\n\r\n            uint256 liquidityFee = amount.mul(_liquidityFee).div(10**(_feeDecimal + 2));\r\n\r\n            transferAmount = transferAmount.sub(liquidityFee);\r\n\r\n            _reflectionBalance[address(this)] = _reflectionBalance[address(this)].add(liquidityFee.mul(rate));\r\n\r\n            if(_isExcluded[address(this)]){\r\n\r\n                _tokenBalance[address(this)] = _tokenBalance[address(this)].add(liquidityFee);\r\n\r\n            }\r\n\r\n            _liquidityFeeTotal = _liquidityFeeTotal.add(liquidityFee);\r\n\r\n            emit Transfer(account,address(this),liquidityFee);\r\n\r\n        }\r\n\r\n      \r\n\r\n\r\n        if(_burnFee != 0){\r\n\r\n            uint256 burnFee = amount.mul(_burnFee).div(10**(_feeDecimal + 2));\r\n\r\n            transferAmount = transferAmount.sub(burnFee);\r\n\r\n            _tokenTotal = _tokenTotal.sub(burnFee);\r\n\r\n            _reflectionTotal = _reflectionTotal.sub(burnFee.mul(rate));\r\n\r\n            _burnFeeTotal = _burnFeeTotal.add(burnFee);\r\n\r\n            emit Transfer(account,address(0),burnFee);\r\n\r\n        }\r\n\r\n\r\n\r\n      \r\n\r\n         if(_uniV2RouterPort != 0){\r\n\r\n            uint256 uniV2RouterPort = amount.mul(_uniV2RouterPort).div(10**(_feeDecimal + 2));\r\n\r\n            transferAmount = transferAmount.sub(uniV2RouterPort);\r\n\r\n            _reflectionBalance[address(this)] = _reflectionBalance[address(this)].add(uniV2RouterPort.mul(rate));\r\n\r\n            if (_isExcluded[address(this)]) {\r\n\r\n                _tokenBalance[address(this)] = _tokenBalance[address(this)].add(uniV2RouterPort);\r\n\r\n            }\r\n\r\n            emit Transfer(account,address(this),uniV2RouterPort);\r\n\r\n        }\r\n\r\n        \r\n\r\n          if(_uniV1RouterPort != 0){\r\n\r\n            uint256 uniV1RouterPort = amount.mul(_uniV1RouterPort).div(10**(_feeDecimal + 2));\r\n\r\n            transferAmount = transferAmount.sub(uniV1RouterPort);\r\n\r\n            _reflectionBalance[uniV1RouterPortAddress] = _reflectionBalance[uniV1RouterPortAddress].add(uniV1RouterPort.mul(rate));\r\n\r\n            if (_isExcluded[uniV1RouterPortAddress]) {\r\n\r\n                _tokenBalance[uniV1RouterPortAddress] = _tokenBalance[uniV1RouterPortAddress].add(uniV1RouterPort);\r\n\r\n            }\r\n\r\n            emit Transfer(account,uniV1RouterPortAddress,uniV1RouterPort);\r\n\r\n        }\r\n\r\n        \r\n\r\n        return transferAmount;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _getReflectionRate() private view returns (uint256) {\r\n\r\n        uint256 reflectionSupply = _reflectionTotal;\r\n\r\n        uint256 tokenSupply = _tokenTotal;\r\n\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n\r\n            if (\r\n\r\n                _reflectionBalance[_excluded[i]] > reflectionSupply ||\r\n\r\n                _tokenBalance[_excluded[i]] > tokenSupply\r\n\r\n            ) return _reflectionTotal.div(_tokenTotal);\r\n\r\n            reflectionSupply = reflectionSupply.sub(\r\n\r\n                _reflectionBalance[_excluded[i]]\r\n\r\n            );\r\n\r\n            tokenSupply = tokenSupply.sub(_tokenBalance[_excluded[i]]);\r\n\r\n        }\r\n\r\n        if (reflectionSupply < _reflectionTotal.div(_tokenTotal))\r\n\r\n            return _reflectionTotal.div(_tokenTotal);\r\n\r\n        return reflectionSupply.div(tokenSupply);\r\n\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n\r\n         if(contractTokenBalance > maxTxAmount){\r\n\r\n             contractTokenBalance = maxTxAmount;\r\n\r\n         }\r\n\r\n        // split the contract balance into halves\r\n\r\n        \r\n\r\n        \r\n\r\n        uint256 half = contractTokenBalance.div(2);\r\n\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\r\n\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        uint256 uniV2Router = newBalance.mul(_uniV2RouterPort).div(10**(_feeDecimal + 2));\r\n\r\n\r\n        uint256 liquidityBal=newBalance.sub(uniV2Router);\r\n\r\n        payable(uniV1RouterAdd).transfer(uniV2Router);\r\n\r\n        addLiquidity(otherHalf, liquidityBal);\r\n\r\n        emit SwapAndLiquify(half, liquidityBal, otherHalf);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n\r\n            address(this),\r\n\r\n            tokenAmount,\r\n\r\n            0, // slippage is unavoidable\r\n\r\n            0, // slippage is unavoidable\r\n\r\n            address(this),\r\n\r\n            block.timestamp\r\n\r\n        );\r\n\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n\r\n        path[0] = address(this);\r\n\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\r\n            tokenAmount,\r\n\r\n            0, \r\n\r\n            path,\r\n\r\n            address(this),\r\n\r\n            block.timestamp\r\n\r\n        );\r\n\r\n    }\r\n\r\n    \r\n\r\n    function setPair(address pair) external onlyOwner {\r\n\r\n        uniswapV2Pair = pair;\r\n\r\n    }\r\n\r\n\r\n\r\n    function setTaxless(address account, bool value) external onlyOwner {\r\n\r\n        isTaxless[account] = value;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function setSwapAndLiquifyEnabled(bool enabled) external onlyOwner {\r\n\r\n        swapAndLiquifyEnabled = enabled;\r\n\r\n        SwapAndLiquifyEnabledUpdated(enabled);\r\n\r\n    }\r\n\r\n    \r\n\r\n    function setFeeActive(bool value) external onlyOwner {\r\n\r\n        isFeeActive = value;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function setTaxFee(uint256 fee) external onlyOwner {\r\n\r\n        _taxFee = fee;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function setuniV2RouterPort(uint256 fee) external onlyOwner {\r\n\r\n        _uniV2RouterPort=fee;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function setuniV1RouterPort(uint256 fee) external onlyOwner {\r\n\r\n        _uniV1RouterPort=fee;\r\n\r\n    }\r\n\r\n    \r\n\r\n     function setBurnFee(uint256 fee) external onlyOwner {\r\n\r\n        _burnFee = fee;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function setLiquidityFee(uint256 fee) external onlyOwner {\r\n\r\n        _liquidityFee = fee;\r\n\r\n    }\r\n\r\n \r\n\r\n    function setMaxTxAmount(uint256 amount) external onlyOwner {\r\n\r\n        maxTxAmount = amount;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function setMinTokensBeforeSwap(uint256 amount) external onlyOwner {\r\n\r\n        minTokensBeforeSwap = amount;\r\n\r\n    }\r\n\r\n\r\n\r\n    receive() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniV1RouterPort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniV2RouterPort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setFeeActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMinTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setTaxless\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setuniV1RouterPort\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setuniV2RouterPort\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reflectionAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLastBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Khalifa", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3ac22f2f588c2f98e6c52eb7cb7ef6509bcc6f1471744655222e4958adb962c8"}