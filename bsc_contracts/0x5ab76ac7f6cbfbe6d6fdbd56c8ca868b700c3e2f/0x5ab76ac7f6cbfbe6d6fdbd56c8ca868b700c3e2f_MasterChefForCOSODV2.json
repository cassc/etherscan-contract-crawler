{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary EnumerableSet {\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastValue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastValue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastValue] = valueIndex;\r\n                // Replace lastValue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    unchecked {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n    unchecked {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n\r\n    //     function transfer(address recipient, uint256 amount) external returns (bool);\r\n    // function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n}\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success,) = recipient.call{value : amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value : value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(data, 'e0');\r\n        if (returndata.length > 0) {\r\n            require(abi.decode(returndata, (bool)), 'e1');\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface Token is IERC20 {\r\n    function mint(address _to, uint256 _amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function MinerList(address _address) external returns (bool);\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface pair {\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ninterface IERC721Enumerable {\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    function mintForMiner(address _to, uint256 _tokenId) external returns (bool, uint256);\r\n\r\n    function allPriceList(uint256 _tokenId) external view returns (uint256);\r\n\r\n    function canMintList(uint256 _tokenId) external view returns (bool);\r\n\r\n    function tokenIdPersistList(uint256 _tokenID) external view returns (bool);\r\n\r\n    function MinerList(address _address) external view returns (bool);\r\n}\r\n\r\ninterface swapRouter {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n}\r\n\r\ninterface MasterChefForErc20 {\r\n    function depositByProxy(address _user, uint256 _pid, uint256 _depositAmount) external;\r\n}\r\n\r\ncontract MasterChefForCOSODV2 is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeBEP20 for IERC20;\r\n    PoolConfigItem public PoolConfig;\r\n    swapItem public swapConfig;\r\n\r\n    struct swapItem {\r\n        swapRouter routerAddress;\r\n        IERC20 usdtToken;\r\n        IERC20 pairAddress;\r\n        address[] swapErc20Path;\r\n        MasterChefForErc20 farmAddress;\r\n    }\r\n\r\n    struct PoolConfigItem {\r\n        boolConfigItem boolConfig;\r\n        uint256ConfigItem uint256Config;\r\n        uint256 minRewardNum;\r\n        uint256 minRewardNumForBurnId;\r\n    }\r\n\r\n    struct boolConfigItem {\r\n        bool useMintMode;\r\n        bool poolStatus;\r\n        bool limitWithdrawTime;\r\n        bool limitGetRewardTime;\r\n    }\r\n\r\n    struct uint256ConfigItem {\r\n        uint256 cakePerBlock;\r\n        uint256 BONUS_MULTIPLIER;\r\n        uint256 daoNftTokenStakingLength;\r\n        uint256 cosoNftTokenStakingLength;\r\n        uint256 startBlock;\r\n        uint256 bonusEndBlock;\r\n        uint256 lastRewardBlock;\r\n        uint256 stakingNumForPool;\r\n        uint256 accCakePerShare;\r\n        uint256 refererrate;\r\n        uint256 claimMinLength;\r\n    }\r\n\r\n    address public devaddr;\r\n    Token public cake;\r\n    IERC721Enumerable public daoNftToken;\r\n    IERC721Enumerable public cosoNftToken;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    EnumerableSet.UintSet private ValidatorList;\r\n    EnumerableSet.UintSet private burnIdList;\r\n    EnumerableSet.AddressSet private stakingAddress;\r\n    mapping(address => bool) private hasBurlPool;\r\n    mapping(uint256 => address) public burnToPoolAddressList;\r\n    mapping(uint256 => daoNftTokenItem) private daoNftTokenInfoList;\r\n    mapping(address => uint256) public staking_time;\r\n    mapping(address => uint256) public unlock_time;\r\n    mapping(address => uint256) public claim_time;\r\n    mapping(address => uint256) public pending_list;\r\n    mapping(address => uint256) public allrewardList;\r\n    mapping(address => EnumerableSet.UintSet) private userStakingTokenForPoolIdListSet;\r\n    mapping(uint256 => address) public stakingNftOlderOwnerList;\r\n    mapping(address => UserInfo) public userInfo;\r\n    mapping(address => uint256) public daoRewardNumList;\r\n    mapping(uint256 => EnumerableSet.UintSet) private daoNftToknVoteIdList;\r\n\r\n    struct UserInfo {\r\n        bool hasBeenDaoList;\r\n        bool hasBurlPool;\r\n        uint256 myDaoNftTokenId;\r\n        uint256 votedDaoNftTokenId;\r\n        uint256 amount;\r\n        uint256 rewardDebt;\r\n    }\r\n\r\n    struct daoNftTokenItem {\r\n        uint256 _tokenId;\r\n        uint256 _stakingTime;\r\n        uint256 _unlockTime;\r\n        address _owner;\r\n        bool _staked;\r\n        uint256 _burnId;\r\n    }\r\n\r\n    struct daoNftToknVoteIdItem {\r\n        uint256 daoNftTokenId;\r\n        //uint256[] VoteIdList;\r\n        uint256 num;\r\n        daoNftTokenItem daoNftTokenItem;\r\n    }\r\n\r\n    event safeCakeTransferEvent(address _to, uint256 _amount, uint256 cakeBalance);\r\n\r\n    constructor () {\r\n        devaddr = msg.sender;\r\n        PoolConfig.boolConfig = boolConfigItem(true, true, true, true);\r\n        PoolConfig.uint256Config = uint256ConfigItem(0.1 * 10 ** 18, 1, 3600 * 24 * 365, 3600 * 24 * 365, block.timestamp, block.timestamp.add(3600 * 24 * 365), block.timestamp, 0, 0, 20, 0);\r\n    }\r\n\r\n    function setSwapConfig(swapRouter _routerAddress, IERC20 _usdtToken, IERC20 _pairAddress, address[] calldata _swapErc20Path, MasterChefForErc20 _farmAddress) external onlyOwner {\r\n        swapConfig = swapItem(_routerAddress, _usdtToken, _pairAddress, _swapErc20Path, _farmAddress);\r\n    }\r\n\r\n    function setPool(uint256 _startBlock, uint256 _bonusEndBlock, bool _poolStatus) external onlyOwner {\r\n        PoolConfig.uint256Config.startBlock = _startBlock;\r\n        PoolConfig.uint256Config.bonusEndBlock = _bonusEndBlock;\r\n        PoolConfig.boolConfig.poolStatus = _poolStatus;\r\n    }\r\n\r\n    function setGetReward(bool _limitGetRewardTime, uint256 _claimMinLength, uint256 _minRewardNum, uint256 _minRewardNumForBurnId) external onlyOwner {\r\n        PoolConfig.boolConfig.limitGetRewardTime = _limitGetRewardTime;\r\n        PoolConfig.uint256Config.claimMinLength = _claimMinLength;\r\n        PoolConfig.minRewardNum = _minRewardNum;\r\n        PoolConfig.minRewardNumForBurnId = _minRewardNumForBurnId;\r\n    }\r\n\r\n    function setCakePerBlockAndCake(Token _cake, uint256 _cakePerBlock, bool _useMintMode) external onlyOwner {\r\n        PoolConfig.boolConfig.useMintMode = _useMintMode;\r\n        if (_useMintMode) {\r\n            require(_cake.MinerList(address(this)), \"e001\");\r\n        }\r\n        updatePool();\r\n        cake = _cake;\r\n        PoolConfig.uint256Config.cakePerBlock = _cakePerBlock;\r\n    }\r\n\r\n    function setNftToken(IERC721Enumerable _daoNftToken, IERC721Enumerable _cosoNftToken) external onlyOwner {\r\n        daoNftToken = _daoNftToken;\r\n        cosoNftToken = _cosoNftToken;\r\n    }\r\n\r\n    function setStakingLength(uint256 _daoNftTokenStakingLength_days, uint256 _cosoNftTokenStakingLength_days) external onlyOwner {\r\n        PoolConfig.uint256Config.daoNftTokenStakingLength = _daoNftTokenStakingLength_days * 3600 * 24;\r\n        PoolConfig.uint256Config.cosoNftTokenStakingLength = _cosoNftTokenStakingLength_days * 3600 * 24;\r\n    }\r\n\r\n    function addValidators(uint256[] memory _daoNftTokenIDList) external onlyOwner {\r\n        for (uint256 i = 0; i < _daoNftTokenIDList.length; i++) {\r\n            uint256 _daoNftTokenID = _daoNftTokenIDList[i];\r\n            require(!ValidatorList.contains(_daoNftTokenID), \"e001\");\r\n            ValidatorList.add(_daoNftTokenID);\r\n            daoNftTokenInfoList[_daoNftTokenID]._tokenId = _daoNftTokenID;\r\n        }\r\n    }\r\n\r\n    function activeValidator(uint256 _daoNftTokenID) external {\r\n        if (userInfo[msg.sender].myDaoNftTokenId == 0) {\r\n            userInfo[msg.sender].myDaoNftTokenId = _daoNftTokenID;\r\n        } else {\r\n            require(userInfo[msg.sender].myDaoNftTokenId == _daoNftTokenID, \"e001\");\r\n        }\r\n        require(ValidatorList.contains(_daoNftTokenID), \"e002\");\r\n        require(!userInfo[msg.sender].hasBeenDaoList, \"e003\");\r\n        daoNftToken.transferFrom(msg.sender, address(this), _daoNftTokenID);\r\n        userInfo[msg.sender].hasBeenDaoList = true;\r\n        daoNftTokenInfoList[_daoNftTokenID]._owner = msg.sender;\r\n        daoNftTokenInfoList[_daoNftTokenID]._staked = true;\r\n        daoNftTokenInfoList[_daoNftTokenID]._stakingTime = block.timestamp;\r\n    }\r\n\r\n    function withdrawDaoNftToken() external {\r\n        uint256 _daoNftTokenID = userInfo[msg.sender].myDaoNftTokenId;\r\n        require(_daoNftTokenID > 0, \"e001\");\r\n        require(daoNftTokenInfoList[_daoNftTokenID]._owner == msg.sender, \"e002\");\r\n        require(block.timestamp >= daoNftTokenInfoList[_daoNftTokenID]._stakingTime.add(PoolConfig.uint256Config.daoNftTokenStakingLength), \"e003\");\r\n        daoNftToken.transferFrom(address(this), msg.sender, _daoNftTokenID);\r\n        daoNftTokenInfoList[_daoNftTokenID]._staked = false;\r\n        daoNftTokenInfoList[_daoNftTokenID]._stakingTime = 0;\r\n        userInfo[msg.sender].hasBeenDaoList = false;\r\n    }\r\n\r\n    function burnToPool(uint256 _burnId) external {\r\n        require(userInfo[msg.sender].myDaoNftTokenId == 0, \"e001\");\r\n        require(!userInfo[msg.sender].hasBeenDaoList, \"e001\");\r\n        require(!userInfo[msg.sender].hasBurlPool, \"e002\");\r\n        cosoNftToken.transferFrom(msg.sender, address(1), _burnId);\r\n        hasBurlPool[msg.sender] = true;\r\n        burnToPoolAddressList[_burnId] = msg.sender;\r\n        burnIdList.add(_burnId);\r\n    }\r\n\r\n    function activeBurnValidator(uint256 _burnId, uint256 _daoNftTokenID) external onlyOwner {\r\n        require(!ValidatorList.contains(_daoNftTokenID), \"e001\");\r\n        daoNftToken.transferFrom(msg.sender, address(this), _daoNftTokenID);\r\n        ValidatorList.add(_daoNftTokenID);\r\n        address toAddDaoAddress = burnToPoolAddressList[_burnId];\r\n        require(!userInfo[toAddDaoAddress].hasBeenDaoList, \"e001\");\r\n        daoNftTokenInfoList[_daoNftTokenID]._tokenId = _daoNftTokenID;\r\n        userInfo[toAddDaoAddress].hasBeenDaoList = true;\r\n        userInfo[toAddDaoAddress].myDaoNftTokenId = _daoNftTokenID;\r\n        daoNftTokenInfoList[_daoNftTokenID]._owner = toAddDaoAddress;\r\n        daoNftTokenInfoList[_daoNftTokenID]._staked = true;\r\n        daoNftTokenInfoList[_daoNftTokenID]._stakingTime = block.timestamp;\r\n        daoNftTokenInfoList[_daoNftTokenID]._burnId = _burnId;\r\n    }\r\n\r\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\r\n        if (!PoolConfig.boolConfig.poolStatus || block.timestamp < PoolConfig.uint256Config.startBlock || _from >= PoolConfig.uint256Config.bonusEndBlock) {\r\n            return 0;\r\n        }\r\n        if (_to <= PoolConfig.uint256Config.bonusEndBlock) {\r\n            return _to - _from;\r\n        } else {\r\n            return PoolConfig.uint256Config.bonusEndBlock - _from;\r\n        }\r\n    }\r\n\r\n    function updatePool() public {\r\n        if (block.timestamp <= PoolConfig.uint256Config.lastRewardBlock) {\r\n            return;\r\n        }\r\n        uint256 lpSupply = PoolConfig.uint256Config.stakingNumForPool;\r\n        if (lpSupply == 0) {\r\n            PoolConfig.uint256Config.lastRewardBlock = block.timestamp;\r\n            return;\r\n        }\r\n        uint256 multiplier = getMultiplier(PoolConfig.uint256Config.lastRewardBlock, block.timestamp);\r\n        uint256 cakeReward = multiplier.mul(PoolConfig.uint256Config.cakePerBlock);\r\n        if (PoolConfig.boolConfig.useMintMode && cake.MinerList(address(this))) {\r\n            cake.mint(address(this), cakeReward);\r\n        }\r\n        PoolConfig.uint256Config.accCakePerShare = PoolConfig.uint256Config.accCakePerShare.add(cakeReward.mul(1e12).div(lpSupply));\r\n        PoolConfig.uint256Config.lastRewardBlock = block.timestamp;\r\n    }\r\n\r\n    function pendingCake(address _user) public view returns (uint256) {\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 lpSupply = PoolConfig.uint256Config.stakingNumForPool;\r\n        uint256 accCakePerShare2 = PoolConfig.uint256Config.accCakePerShare;\r\n        if (block.timestamp > PoolConfig.uint256Config.lastRewardBlock && lpSupply != 0) {\r\n            uint256 multiplier = getMultiplier(PoolConfig.uint256Config.lastRewardBlock, block.timestamp);\r\n            uint256 cakeReward = multiplier.mul(PoolConfig.uint256Config.cakePerBlock);\r\n            accCakePerShare2 = accCakePerShare2.add(cakeReward.mul(1e12).div(lpSupply));\r\n        }\r\n        return user.amount.mul(accCakePerShare2).div(1e12).sub(user.rewardDebt);\r\n    }\r\n\r\n    function deposit(uint256 _daoNftTokenID, uint256[] memory _tokenIdList) external nonReentrant {\r\n        address _user = msg.sender;\r\n        UserInfo storage user = userInfo[_user];\r\n        if (user.votedDaoNftTokenId == 0) {\r\n            userInfo[_user].votedDaoNftTokenId = _daoNftTokenID;\r\n        } else {\r\n            require(user.votedDaoNftTokenId == _daoNftTokenID, \"e001\");\r\n        }\r\n        require(_tokenIdList.length > 0, \"e002\");\r\n        require(PoolConfig.boolConfig.poolStatus, \"e003\");\r\n        require(daoNftTokenInfoList[_daoNftTokenID]._staked, \"e004\");\r\n        updatePool();\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(PoolConfig.uint256Config.accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n            if (pending > 0) {\r\n                pending_list[_user] = pending_list[_user].add(pending);\r\n            }\r\n        }\r\n        if (_tokenIdList.length > 0) {\r\n            for (uint256 i = 0; i < _tokenIdList.length; i++) {\r\n                uint256 _tokenId = _tokenIdList[i];\r\n                cosoNftToken.transferFrom(_user, address(this), _tokenId);\r\n                userStakingTokenForPoolIdListSet[_user].add(_tokenId);\r\n                stakingNftOlderOwnerList[_tokenId] = msg.sender;\r\n                daoNftToknVoteIdList[_daoNftTokenID].add(_tokenId);\r\n            }\r\n            uint256 addAmount = _tokenIdList.length;\r\n            PoolConfig.uint256Config.stakingNumForPool = PoolConfig.uint256Config.stakingNumForPool.add(addAmount);\r\n            uint256 oldStaking = user.amount;\r\n            uint256 newStaking = user.amount.add(addAmount);\r\n            user.amount = user.amount.add(addAmount);\r\n            uint256 oldUnlockTime;\r\n            uint256 newUnlockTime;\r\n            if (unlock_time[_user] == 0) {\r\n                oldUnlockTime = block.timestamp.add(PoolConfig.uint256Config.cosoNftTokenStakingLength);\r\n            } else {\r\n                oldUnlockTime = unlock_time[msg.sender];\r\n            }\r\n            if (oldUnlockTime >= block.timestamp) {\r\n                newUnlockTime = oldStaking.mul(oldUnlockTime.sub(block.timestamp)).add(addAmount.mul(PoolConfig.uint256Config.cosoNftTokenStakingLength)).div(newStaking);\r\n            } else {\r\n                newUnlockTime = addAmount.mul(PoolConfig.uint256Config.cosoNftTokenStakingLength).div(newStaking);\r\n            }\r\n            unlock_time[_user] = block.timestamp.add(newUnlockTime);\r\n            staking_time[_user] = block.timestamp;\r\n        }\r\n        user.rewardDebt = user.amount.mul(PoolConfig.uint256Config.accCakePerShare).div(1e12);\r\n        if (!stakingAddress.contains(_user)) {\r\n            stakingAddress.add(_user);\r\n        }\r\n        if (claim_time[_user] == 0) {\r\n            claim_time[_user] = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function withdraw(uint256[] memory _tokenIdList) external {\r\n        address _user = msg.sender;\r\n        updatePool();\r\n        if (PoolConfig.boolConfig.limitWithdrawTime) {\r\n            require(block.timestamp > unlock_time[msg.sender], \"e001\");\r\n        }\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 _daoNftTokenID = user.votedDaoNftTokenId;\r\n        uint256 pending = user.amount.mul(PoolConfig.uint256Config.accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n        if (pending > 0) {\r\n            pending_list[_user] = pending_list[_user].add(pending);\r\n        }\r\n        for (uint256 i = 0; i < _tokenIdList.length; i++) {\r\n            uint256 _tokenId = _tokenIdList[i];\r\n            if (userStakingTokenForPoolIdListSet[_user].contains(_tokenId)) {\r\n                cosoNftToken.transferFrom(address(this), _user, _tokenId);\r\n                user.amount = user.amount.sub(1);\r\n                PoolConfig.uint256Config.stakingNumForPool = PoolConfig.uint256Config.stakingNumForPool.sub(1);\r\n                userStakingTokenForPoolIdListSet[_user].remove(_tokenId);\r\n                stakingNftOlderOwnerList[_tokenId] = address(0);\r\n                daoNftToknVoteIdList[_daoNftTokenID].remove(_tokenId);\r\n            }\r\n        }\r\n        user.rewardDebt = user.amount.mul(PoolConfig.uint256Config.accCakePerShare).div(1e12);\r\n        if (userStakingTokenForPoolIdListSet[_user].length() == 0) {\r\n            stakingAddress.remove(msg.sender);\r\n            userInfo[_user].votedDaoNftTokenId = 0;\r\n        }\r\n    }\r\n\r\n    function withdrawAll() external {\r\n        if (PoolConfig.boolConfig.limitWithdrawTime) {\r\n            require(block.timestamp > unlock_time[msg.sender], \"e001\");\r\n        }\r\n        updatePool();\r\n        address _user = msg.sender;\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 _daoNftTokenID = user.votedDaoNftTokenId;\r\n        uint256 pending = user.amount.mul(PoolConfig.uint256Config.accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n        if (pending > 0) {\r\n            pending_list[_user] = pending_list[_user].add(pending);\r\n        }\r\n        uint256[] memory userCosoList = userStakingTokenForPoolIdListSet[_user].values();\r\n        for (uint i = 0; i < userCosoList.length; i++) {\r\n            cosoNftToken.transferFrom(address(this), _user, userCosoList[i]);\r\n            user.amount = user.amount.sub(1);\r\n            PoolConfig.uint256Config.stakingNumForPool = PoolConfig.uint256Config.stakingNumForPool.sub(1);\r\n            userStakingTokenForPoolIdListSet[_user].remove(userCosoList[i]);\r\n            daoNftToknVoteIdList[_daoNftTokenID].remove(userCosoList[i]);\r\n            stakingNftOlderOwnerList[userCosoList[i]] = address(0);\r\n        }\r\n        user.rewardDebt = user.amount.mul(PoolConfig.uint256Config.accCakePerShare).div(1e12);\r\n        stakingAddress.remove(msg.sender);\r\n        userInfo[_user].votedDaoNftTokenId = 0;\r\n    }\r\n\r\n    function _getReward(address _user, uint256 _farm_pid) private {\r\n        if (PoolConfig.boolConfig.limitGetRewardTime) {\r\n            require(block.timestamp >= claim_time[_user].add(PoolConfig.uint256Config.claimMinLength), \"e001\");\r\n        }\r\n        updatePool();\r\n        claim_time[_user] = block.timestamp;\r\n        UserInfo storage user = userInfo[_user];\r\n        uint256 _daoNftTokenID = user.votedDaoNftTokenId;\r\n        if (user.amount > 0) {\r\n            uint256 pending = user.amount.mul(PoolConfig.uint256Config.accCakePerShare).div(1e12).sub(user.rewardDebt);\r\n            if (pending > 0) {\r\n                pending_list[_user] = pending_list[_user].add(pending);\r\n            }\r\n        }\r\n        user.rewardDebt = user.amount.mul(PoolConfig.uint256Config.accCakePerShare).div(1e12);\r\n        if (pending_list[_user] > 0) {\r\n            uint256 allAmount = pending_list[_user];\r\n            swapAndDepositFarm(_user, _daoNftTokenID, allAmount, _farm_pid);\r\n            pending_list[_user] = 0;\r\n        }\r\n    }\r\n\r\n    function swapAndDepositFarm(address _user, uint256 _daoNftTokenID, uint256 _allAmount, uint256 _farm_pid) internal {\r\n        uint256 rewardAmount = _allAmount.mul(PoolConfig.uint256Config.refererrate).div(100);\r\n        uint256 userAmount = _allAmount.sub(rewardAmount);\r\n        allrewardList[_user] = allrewardList[_user].add(userAmount);\r\n        uint256 halfAmount = _allAmount.mul(50).div(100);\r\n        (uint256[] memory amounts) = swapConfig.routerAddress.swapExactTokensForTokens(halfAmount, 0, swapConfig.swapErc20Path, address(this), block.timestamp);\r\n        (,,uint256 lpAmount) = swapConfig.routerAddress.addLiquidity(address(swapConfig.usdtToken), address(cake), amounts[1], halfAmount, 0, 0, address(this), block.timestamp);\r\n        address _owner = daoNftTokenInfoList[_daoNftTokenID]._owner;\r\n        bool _staked = daoNftTokenInfoList[_daoNftTokenID]._staked;\r\n        uint256 rewardLpAmount = lpAmount.mul(PoolConfig.uint256Config.refererrate).div(100);\r\n        uint256 userLpAmount = lpAmount.sub(rewardLpAmount);\r\n        swapConfig.farmAddress.depositByProxy(_user, _farm_pid, userLpAmount);\r\n        if (_staked && ((daoNftToknVoteIdList[_daoNftTokenID].length() >= PoolConfig.minRewardNum && daoNftTokenInfoList[_daoNftTokenID]._burnId == 0) || (daoNftToknVoteIdList[_daoNftTokenID].length() >= PoolConfig.minRewardNumForBurnId && daoNftTokenInfoList[_daoNftTokenID]._burnId > 0))) {\r\n            swapConfig.farmAddress.depositByProxy(_owner, _farm_pid, rewardLpAmount);\r\n            daoRewardNumList[_owner] = daoRewardNumList[_owner].add(rewardAmount);\r\n        } else {\r\n            swapConfig.pairAddress.safeTransfer(address(1), rewardLpAmount);\r\n        }\r\n    }\r\n\r\n    function setApprovedForSwapAndFarm(uint256 _amount) external onlyOwner {\r\n        require(address(cake) != address(0));\r\n        require(address(swapConfig.routerAddress) != address(0));\r\n        require(address(swapConfig.usdtToken) != address(0));\r\n        require(address(swapConfig.pairAddress) != address(0));\r\n        require(address(swapConfig.farmAddress) != address(0));\r\n        cake.approve(address(swapConfig.routerAddress), _amount);\r\n        swapConfig.usdtToken.approve(address(swapConfig.routerAddress), _amount);\r\n        swapConfig.pairAddress.approve(address(swapConfig.farmAddress), _amount);\r\n    }\r\n\r\n    function getReward(uint256 _farm_pid) external {\r\n        _getReward(msg.sender, _farm_pid);\r\n    }\r\n\r\n    function safeCakeTransfer(address _to, uint256 _amount) internal {\r\n        uint256 cakeBalance = cake.balanceOf(address(this));\r\n        if (_amount > cakeBalance) {\r\n            cake.transfer(_to, cakeBalance);\r\n        } else {\r\n            cake.transfer(_to, _amount);\r\n        }\r\n        emit safeCakeTransferEvent(_to, _amount, cakeBalance);\r\n    }\r\n\r\n    function setdev(address _devaddr) external onlyOwner {\r\n        devaddr = _devaddr;\r\n    }\r\n\r\n    function getStakingAddressItem(uint256 _index) public view returns (address) {\r\n        return stakingAddress.at(_index);\r\n    }\r\n\r\n    function getStakingAddressList(uint256[] memory _indexList) public view returns (address[] memory AddressList) {\r\n        AddressList = new address[](_indexList.length);\r\n        for (uint256 i = 0; i < _indexList.length; i++) {\r\n            AddressList[i] = stakingAddress.at(_indexList[i]);\r\n        }\r\n    }\r\n\r\n   function userStakingTokenIdList(address _user, uint256 _index) external view returns (uint256) {\r\n        return userStakingTokenForPoolIdListSet[_user].values()[_index];\r\n    }\r\n\r\n    function userStakingNumList(address _user) public view returns (uint256) {\r\n        return userStakingTokenForPoolIdListSet[_user].length();\r\n    }\r\n    \r\n    function getStakingAddressNum() public view returns (uint256) {\r\n        return stakingAddress.length();\r\n    }\r\n\r\n    function getBurnIdList() external view returns (uint256[] memory) {\r\n        return burnIdList.values();\r\n    }\r\n\r\n    function getBurnId(uint256 _index) external view returns (uint256 _tokenId, address _burnAddress) {\r\n        _tokenId = burnIdList.at(_index);\r\n        _burnAddress = burnToPoolAddressList[_tokenId];\r\n    }\r\n\r\n    function getBurnIdNum() external view returns (uint256) {\r\n        return burnIdList.length();\r\n    }\r\n\r\n    function getValidatorLists() external view returns (uint256[] memory, uint256) {\r\n        return (ValidatorList.values(), ValidatorList.length());\r\n    }\r\n\r\n    function getDaoNftToknVoteIdList(uint256 _daoNftTokenID) public view returns (daoNftToknVoteIdItem memory _daoNftToknVoteIds) {\r\n        _daoNftToknVoteIds.daoNftTokenId = _daoNftTokenID;\r\n        _daoNftToknVoteIds.daoNftTokenItem = daoNftTokenInfoList[_daoNftTokenID];\r\n        _daoNftToknVoteIds.num = daoNftToknVoteIdList[_daoNftTokenID].length();\r\n    }\r\n\r\n    function getAllDaoNftToknVoteIdList() public view returns (daoNftToknVoteIdItem[] memory _daoNftToknVoteIdsList) {\r\n        uint256[] memory ValidatorLists = ValidatorList.values();\r\n        _daoNftToknVoteIdsList = new daoNftToknVoteIdItem[](ValidatorLists.length);\r\n        for (uint256 i = 0; i < ValidatorLists.length; i++) {\r\n            _daoNftToknVoteIdsList[i] = getDaoNftToknVoteIdList(ValidatorLists[i]);\r\n        }\r\n    }\r\n\r\n    function getUserStakingTokenForPoolIdListSet(address _user) external view returns (uint256[] memory, uint256) {\r\n        return (userStakingTokenForPoolIdListSet[_user].values(), userStakingTokenForPoolIdListSet[_user].length());\r\n    }\r\n\r\n    struct userPoolInfoItem {\r\n        PoolConfigItem _PoolConfig;\r\n        UserInfo _UserInfo;\r\n        Token _cake;\r\n        IERC721Enumerable _daoNftToken;\r\n        IERC721Enumerable _cosoNftToken;\r\n        uint256 staking_time;\r\n        uint256 unlock_time;\r\n        uint256 claim_time;\r\n        uint256 pending_list;\r\n        uint256 allrewardList;\r\n        uint256 daoRewardNumList;\r\n        uint256[] userStakingIdList;\r\n        uint256 userStakingNum;\r\n    }\r\n    \r\n    function getPoolInfo(address _user) external view returns (userPoolInfoItem memory userPoolInfo) {\r\n        userPoolInfo._PoolConfig = PoolConfig;\r\n        userPoolInfo._UserInfo = userInfo[_user];\r\n        userPoolInfo._daoNftToken = daoNftToken;\r\n        userPoolInfo._cosoNftToken = cosoNftToken;\r\n        userPoolInfo.staking_time = staking_time[_user];\r\n        userPoolInfo.unlock_time = unlock_time[_user];\r\n        userPoolInfo.claim_time = claim_time[_user];\r\n        userPoolInfo.pending_list = pending_list[_user];\r\n        userPoolInfo.allrewardList = allrewardList[_user];\r\n        userPoolInfo.daoRewardNumList = daoRewardNumList[_user];\r\n        userPoolInfo.userStakingIdList = userStakingTokenForPoolIdListSet[_user].values();\r\n        userPoolInfo.userStakingNum = userStakingTokenForPoolIdListSet[_user].length();\r\n    }\r\n\r\n    function takeErc20Token(IERC20 _token) external onlyOwner {\r\n        _token.safeTransfer(msg.sender, _token.balanceOf(address(this)));\r\n    }\r\n\r\n    function takeErc721Token(IERC721Enumerable _token, uint256[] memory _tokenIdList) external onlyOwner {\r\n        for (uint256 i = 0; i < _tokenIdList.length; i++) {\r\n            uint256 _tokenId = _tokenIdList[i];\r\n            _token.transferFrom(address(this), msg.sender, _tokenId);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cakeBalance\",\"type\":\"uint256\"}],\"name\":\"safeCakeTransferEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PoolConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"useMintMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"poolStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limitWithdrawTime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limitGetRewardTime\",\"type\":\"bool\"}],\"internalType\":\"struct MasterChefForCOSODV2.boolConfigItem\",\"name\":\"boolConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"cakePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BONUS_MULTIPLIER\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoNftTokenStakingLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cosoNftTokenStakingLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingNumForPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accCakePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refererrate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimMinLength\",\"type\":\"uint256\"}],\"internalType\":\"struct MasterChefForCOSODV2.uint256ConfigItem\",\"name\":\"uint256Config\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"minRewardNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRewardNumForBurnId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daoNftTokenID\",\"type\":\"uint256\"}],\"name\":\"activeBurnValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daoNftTokenID\",\"type\":\"uint256\"}],\"name\":\"activeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_daoNftTokenIDList\",\"type\":\"uint256[]\"}],\"name\":\"addValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allrewardList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnId\",\"type\":\"uint256\"}],\"name\":\"burnToPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnToPoolAddressList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cake\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claim_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cosoNftToken\",\"outputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoNftToken\",\"outputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"daoRewardNumList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daoNftTokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIdList\",\"type\":\"uint256[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDaoNftToknVoteIdList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"daoNftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_staked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_burnId\",\"type\":\"uint256\"}],\"internalType\":\"struct MasterChefForCOSODV2.daoNftTokenItem\",\"name\":\"daoNftTokenItem\",\"type\":\"tuple\"}],\"internalType\":\"struct MasterChefForCOSODV2.daoNftToknVoteIdItem[]\",\"name\":\"_daoNftToknVoteIdsList\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBurnId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnIdList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnIdNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daoNftTokenID\",\"type\":\"uint256\"}],\"name\":\"getDaoNftToknVoteIdList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"daoNftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_staked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_burnId\",\"type\":\"uint256\"}],\"internalType\":\"struct MasterChefForCOSODV2.daoNftTokenItem\",\"name\":\"daoNftTokenItem\",\"type\":\"tuple\"}],\"internalType\":\"struct MasterChefForCOSODV2.daoNftToknVoteIdItem\",\"name\":\"_daoNftToknVoteIds\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"useMintMode\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"poolStatus\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limitWithdrawTime\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limitGetRewardTime\",\"type\":\"bool\"}],\"internalType\":\"struct MasterChefForCOSODV2.boolConfigItem\",\"name\":\"boolConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"cakePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BONUS_MULTIPLIER\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoNftTokenStakingLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cosoNftTokenStakingLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingNumForPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accCakePerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refererrate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimMinLength\",\"type\":\"uint256\"}],\"internalType\":\"struct MasterChefForCOSODV2.uint256ConfigItem\",\"name\":\"uint256Config\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"minRewardNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRewardNumForBurnId\",\"type\":\"uint256\"}],\"internalType\":\"struct MasterChefForCOSODV2.PoolConfigItem\",\"name\":\"_PoolConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasBeenDaoList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasBurlPool\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"myDaoNftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votedDaoNftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct MasterChefForCOSODV2.UserInfo\",\"name\":\"_UserInfo\",\"type\":\"tuple\"},{\"internalType\":\"contract Token\",\"name\":\"_cake\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"_daoNftToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"_cosoNftToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"staking_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlock_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claim_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending_list\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allrewardList\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoRewardNumList\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"userStakingIdList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"userStakingNum\",\"type\":\"uint256\"}],\"internalType\":\"struct MasterChefForCOSODV2.userPoolInfoItem\",\"name\":\"userPoolInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_farm_pid\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getStakingAddressItem\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_indexList\",\"type\":\"uint256[]\"}],\"name\":\"getStakingAddressList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"AddressList\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingAddressNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStakingTokenForPoolIdListSet\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorLists\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingCake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pending_list\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setApprovedForSwapAndFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"_cake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cakePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useMintMode\",\"type\":\"bool\"}],\"name\":\"setCakePerBlockAndCake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_limitGetRewardTime\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_claimMinLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minRewardNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minRewardNumForBurnId\",\"type\":\"uint256\"}],\"name\":\"setGetReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"_daoNftToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"_cosoNftToken\",\"type\":\"address\"}],\"name\":\"setNftToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_poolStatus\",\"type\":\"bool\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daoNftTokenStakingLength_days\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cosoNftTokenStakingLength_days\",\"type\":\"uint256\"}],\"name\":\"setStakingLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract swapRouter\",\"name\":\"_routerAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdtToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_pairAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_swapErc20Path\",\"type\":\"address[]\"},{\"internalType\":\"contract MasterChefForErc20\",\"name\":\"_farmAddress\",\"type\":\"address\"}],\"name\":\"setSwapConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"setdev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingNftOlderOwnerList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staking_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapConfig\",\"outputs\":[{\"internalType\":\"contract swapRouter\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"usdtToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"contract MasterChefForErc20\",\"name\":\"farmAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"takeErc20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Enumerable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIdList\",\"type\":\"uint256[]\"}],\"name\":\"takeErc721Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlock_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasBeenDaoList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasBurlPool\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"myDaoNftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votedDaoNftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userStakingNumList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"userStakingTokenIdList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIdList\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDaoNftToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MasterChefForCOSODV2", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6fa513a78820a0bc2d8af5668a8789a782c57a27bac2a0d1b73ec4eab75d3c54"}