{"SourceCode": "// SPDX-License-Identifier: MIT\r\n    pragma solidity ^0.8.0;\r\n\r\n\r\n    interface IERC20 {\r\n        /**\r\n        * @dev Returns the amount of tokens in existence.\r\n        */\r\n        function totalSupply() external view returns (uint256);\r\n        /**\r\n        * @dev Returns the amount of tokens owned by `account`.\r\n        */\r\n        function balanceOf(address account) external view returns (uint256);\r\n        /**\r\n        * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n        *\r\n        * Returns a boolean value indicating whether the operation succeeded.\r\n        *\r\n        * Emits a {Transfer} event.\r\n        */\r\n        function transfer(address recipient, uint256 amount) external returns (bool);\r\n        /**\r\n        * @dev Returns the remaining number of tokens that `spender` will be\r\n        * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n        * zero by default.\r\n        *\r\n        * This value changes when {approve} or {transferFrom} are called.\r\n        */\r\n        function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n        /**\r\n        * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n        *\r\n        * Returns a boolean value indicating whether the operation succeeded.\r\n        *\r\n        * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n        * that someone may use both the old and the new allowance by unfortunate\r\n        * transaction ordering. One possible solution to mitigate this race\r\n        * condition is to first reduce the spender's allowance to 0 and set the\r\n        * desired value afterwards:\r\n        * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        *\r\n        * Emits an {Approval} event.\r\n        */\r\n        function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n        /**\r\n        * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n        * allowance mechanism. `amount` is then deducted from the caller's\r\n        * allowance.\r\n        *\r\n        * Returns a boolean value indicating whether the operation succeeded.\r\n        *\r\n        * Emits a {Transfer} event.\r\n        */\r\n        function transferFrom(\r\n            address sender,\r\n            address recipient,\r\n            uint256 amount\r\n        ) external returns (bool);\r\n\r\n        /**\r\n        * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n        * another (`to`).\r\n        *\r\n        * Note that `value` may be zero.\r\n        */\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n        /**\r\n        * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n        * a call to {approve}. `value` is the new allowance.\r\n        */\r\n        event Approval(\r\n            address indexed owner,\r\n            address indexed spender,\r\n            uint256 value\r\n        );\r\n    }\r\n\r\n    contract Ownable {\r\n        address internal _owner;\r\n\r\n        event OwnershipTransferred(\r\n            address indexed previousOwner,\r\n            address indexed newOwner\r\n        );\r\n\r\n        /**\r\n        * @dev Initializes the contract setting the deployer as the initial owner.\r\n        */\r\n        constructor() {\r\n            address msgSender = _msgSender();\r\n            _owner = msgSender;\r\n            emit OwnershipTransferred(address(0), msgSender);\r\n        }\r\n\r\n        function _msgSender() internal view returns(address) {\r\n            return msg.sender;\r\n        }\r\n        /**\r\n        * @dev Returns the address of the current owner.\r\n        */\r\n        function owner() public view returns (address) {\r\n            return _owner;\r\n        }\r\n\r\n        /**\r\n        * @dev Throws if called by any account other than the owner.\r\n        */\r\n        modifier onlyOwner() {\r\n            require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n            _;\r\n        }\r\n\r\n        /**\r\n        * @dev Leaves the contract without owner. It will not be possible to call\r\n        * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n        *\r\n        * NOTE: Renouncing ownership will leave the contract without an owner,\r\n        * thereby removing any functionality that is only available to the owner.\r\n        */\r\n        function renounceOwnership() public virtual onlyOwner {\r\n            emit OwnershipTransferred(_owner, address(0));\r\n            _owner = address(0);\r\n        }\r\n\r\n        /**\r\n        * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n        * Can only be called by the current owner.\r\n        */\r\n        function transferOwnership(address newOwner) public virtual onlyOwner {\r\n            require(\r\n                newOwner != address(0),\r\n                \"Ownable: new owner is the zero address\"\r\n            );\r\n            emit OwnershipTransferred(_owner, newOwner);\r\n            _owner = newOwner;\r\n        }\r\n    }\r\n\r\n\r\n    library SafeMath {\r\n        /**\r\n        * @dev Returns the subtraction of two unsigned integers, reverting on\r\n        * overflow (when the result is negative).\r\n        *\r\n        * Counterpart to Solidity's `-` operator.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - Subtraction cannot overflow.\r\n        */\r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return sub(a, b, \"SafeMath: subtraction overflow\");\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n        * overflow (when the result is negative).\r\n        *\r\n        * Counterpart to Solidity's `-` operator.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - Subtraction cannot overflow.\r\n        */\r\n        function sub(\r\n            uint256 a,\r\n            uint256 b,\r\n            string memory errorMessage\r\n        ) internal pure returns (uint256) {\r\n            require(b <= a, errorMessage);\r\n            uint256 c = a - b;\r\n\r\n            return c;\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the multiplication of two unsigned integers, reverting on\r\n        * overflow.\r\n        *\r\n        * Counterpart to Solidity's `*` operator.\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - Multiplication cannot overflow.\r\n        */\r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) {\r\n                return 0;\r\n            }\r\n\r\n            uint256 c = a * b;\r\n            require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n            return c;\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the integer division of two unsigned integers. Reverts on\r\n        * division by zero. The result is rounded towards zero.\r\n        *\r\n        * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n        * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n        * uses an invalid opcode to revert (consuming all remaining gas).\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - The divisor cannot be zero.\r\n        */\r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return div(a, b, \"SafeMath: division by zero\");\r\n        }\r\n\r\n        /**\r\n        * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n        * division by zero. The result is rounded towards zero.\r\n        *\r\n        * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n        * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n        * uses an invalid opcode to revert (consuming all remaining gas).\r\n        *\r\n        * Requirements:\r\n        *\r\n        * - The divisor cannot be zero.\r\n        */\r\n        function div(\r\n            uint256 a,\r\n            uint256 b,\r\n            string memory errorMessage\r\n        ) internal pure returns (uint256) {\r\n            require(b > 0, errorMessage);\r\n            uint256 c = a / b;\r\n            // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n            return c;\r\n        }\r\n    }\r\n    interface IUniswapV2Pair {\r\n        function balanceOf(address owner) external view returns (uint256);\r\n        function totalSupply() external view returns (uint);\r\n        function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n        function token0() external view returns (address);\r\n        function token1() external view returns (address);\r\n    }\r\n\r\n    interface IUniswapV2Router01 {\r\n        function swapExactTokensForTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint[] memory amounts);\r\n\r\n        function addLiquidity(\r\n            address tokenA,\r\n            address tokenB,\r\n            uint256 amountADesired,\r\n            uint256 amountBDesired,\r\n            uint256 amountAMin,\r\n            uint256 amountBMin,\r\n            address to,\r\n            uint256 deadline\r\n        )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n        function removeLiquidity(\r\n            address tokenA,\r\n            address tokenB,\r\n            uint liquidity,\r\n            uint amountAMin,\r\n            uint amountBMin,\r\n            address to,\r\n            uint deadline\r\n        ) external returns (uint amountA, uint amountB);\r\n       \r\n        function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n    }\r\n\r\n    interface IUniswapV2Router02 is IUniswapV2Router01 {\r\n        \r\n        function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            uint256 amountIn,\r\n            uint256 amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint256 deadline\r\n        ) external;\r\n    }\r\n\r\n    interface Desir is IERC20 {\r\n        function bindInvite(address account) external view returns(address);\r\n        function isBind(address _account) external view returns(bool);\r\n        function batchExcludeFromFees(address[] calldata _accounts, bool _select) external ;\r\n    }\r\n\r\n    contract TokenDistributor {\r\n        address public _owner;\r\n        address public _admin;\r\n        constructor (address token,address admin) {\r\n            _owner = msg.sender;\r\n            _admin = admin;\r\n            IERC20(token).approve(msg.sender, ~uint256(0));\r\n        }\r\n        \r\n        function claimToken(address token, uint256 amount, address to) external  {\r\n            require(msg.sender == _admin);\r\n            IERC20(token).transfer(to, amount);\r\n        }\r\n    }\r\n\r\n\r\n    contract LPInvest is Ownable {\r\n        using SafeMath for uint256;\r\n        address public immutable usdtAddress;\r\n        Desir public desirContract;\r\n        IUniswapV2Router02 public immutable uniswapV2Router;\r\n        TokenDistributor public immutable tokenDistributor;\r\n        address public token0;\r\n        address public token1;\r\n        address public immutable pair;\r\n        bool inSwapAndLiquify;\r\n        uint256 public lpMiningReward = 3;\r\n        uint256 public lpMiningUsdt = 100 * 10 ** 18;\r\n        uint256 public lpShareUsdt = 200 * 10 ** 18;\r\n\r\n        struct PledgeInfo{\r\n            uint256 lpType; \r\n            uint256 usdtAmount; \r\n            uint256 lpAmount; \r\n            uint256 depositTime; \r\n            bool enable;\r\n        }\r\n\r\n        uint256 private pledgeId;\r\n        mapping(uint256 => PledgeInfo) public pledgeInfos;\r\n        mapping(address => uint256[]) private userPledgeIdArrays;\r\n        \r\n        struct UserPledgeSum {\r\n            uint256 usdtSum; \r\n            uint256 lpSum; \r\n        }\r\n        mapping(address => UserPledgeSum) public userPledgeSums;  \r\n\r\n        struct WholePledgeSum {\r\n            uint256 usdtWholeSum;\r\n            uint256 lpWholeSum;\r\n        }\r\n\r\n        WholePledgeSum public wholePledgeSum;\r\n\r\n        struct TakeLpRule {\r\n            uint256 dayFee;\r\n            uint256 cycle;\r\n            uint256 takeFee;\r\n        }\r\n\r\n        mapping(uint256 => TakeLpRule) public takeLpRules; \r\n\r\n        event PartakeAdd(address indexed account,uint256 usdtValue,uint256 obtainLp,uint256 lpDays,uint time);\r\n        event PartakeRemove(address indexed account,uint time);\r\n\r\n        modifier lockTheSwap {\r\n            inSwapAndLiquify = true;\r\n            _;\r\n            inSwapAndLiquify = false;\r\n        }\r\n\r\n        constructor(address[] memory _wallets) {\r\n            IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_wallets[0]);\r\n            usdtAddress = _wallets[1];\r\n            desirContract = Desir(_wallets[2]);\r\n            pair = _wallets[3];\r\n            token0 = address(desirContract);\r\n            token1 = usdtAddress;\r\n            uniswapV2Router = _uniswapV2Router;\r\n            tokenDistributor = new TokenDistributor(_wallets[2],_msgSender());\r\n            desirContract.approve(_wallets[0],~uint256(0));\r\n            IERC20(usdtAddress).approve(_wallets[0],~uint256(0));\r\n            IERC20(pair).approve(address(uniswapV2Router),~uint256(0));\r\n            initTakeLpRules();\r\n        }\r\n        \r\n        function initTakeLpRules() private {\r\n            takeLpRules[1] = TakeLpRule({dayFee:4,cycle:0,takeFee:0});\r\n            takeLpRules[2] = TakeLpRule({dayFee:6,cycle:30,takeFee:50});\r\n            takeLpRules[3] = TakeLpRule({dayFee:7,cycle:60,takeFee:50});\r\n            takeLpRules[4] = TakeLpRule({dayFee:8,cycle:90,takeFee:50});\r\n            takeLpRules[5] = TakeLpRule({dayFee:9,cycle:180,takeFee:50});\r\n            takeLpRules[6] = TakeLpRule({dayFee:10,cycle:360,takeFee:50});\r\n        }\r\n\r\n        function setTakeLpRule(uint256 _ruleId,TakeLpRule memory _rule) public  onlyOwner {\r\n            takeLpRules[_ruleId] = _rule;\r\n        }\r\n        \r\n        receive() external payable {\r\n        }\r\n        \r\n        function partakeAddLp(uint256 _lpType, uint256 _usdtAmount) public {\r\n            require(_lpType > 0,\"lpType is 0\");\r\n            require(_usdtAmount >= lpMiningUsdt,\"Not meeting the minimum participation threshold\");\r\n            require(desirContract.isBind(_msgSender()),\"Please bind the inviter\");\r\n            IERC20 _usdtContract = IERC20(usdtAddress);\r\n            _usdtContract.transferFrom(_msgSender(),address(this),_usdtAmount);\r\n            uint256 _liquidity = swapAndLiquify(_usdtAmount);\r\n            addLog(_lpType,_usdtAmount, _liquidity);\r\n        }\r\n\r\n        function partakeAddDesirAndUsdt(uint256 _lpType,uint256 _desirAmount) public {\r\n            require(_lpType > 0,\"lpType is 0\");\r\n            require(desirContract.allowance(_msgSender(),address(this)) >= _desirAmount,\"desir approve insufficient\");\r\n            IERC20 _usdtContract = IERC20(usdtAddress);\r\n            uint256 _usdtOut = getAddLpNeedUsdt(_desirAmount);\r\n            require(_usdtContract.allowance(_msgSender(),address(this)) >= _usdtOut,\"usdt approve insufficient\");  \r\n            uint256 _usdtAmount = _usdtOut * 2;\r\n            require(_usdtAmount >= lpMiningUsdt,\"Not meeting the minimum participation threshold\");\r\n            require(desirContract.isBind(_msgSender()),\"Please bind the inviter\"); \r\n            desirContract.transferFrom(_msgSender(),address(this),_desirAmount);\r\n            _usdtContract.transferFrom(_msgSender(),address(this),_usdtOut);\r\n            address[] memory _path = getPath(address(usdtAddress),address(desirContract));\r\n            uint256 _liquidity = addLiquidityUseUsdt(_path,_usdtOut,_desirAmount);\r\n            addLog(_lpType,_usdtAmount, _liquidity);\r\n            \r\n        }  \r\n\r\n        function addLog(uint256 _lpType, uint256 _usdtAmount,uint256 _liquidity) private {\r\n            PledgeInfo memory _pledgeInfo = PledgeInfo({lpType: _lpType,\r\n                                                        usdtAmount:_usdtAmount,\r\n                                                        lpAmount: _liquidity,\r\n                                                        depositTime:block.timestamp,\r\n                                                        enable: true});\r\n            pledgeInfos[pledgeId] = _pledgeInfo;\r\n            uint256[] storage _pledgeIds = userPledgeIdArrays[_msgSender()];\r\n            _pledgeIds.push(pledgeId++);\r\n            UserPledgeSum storage _pledgeSum = userPledgeSums[_msgSender()];\r\n            _pledgeSum.usdtSum += _usdtAmount;\r\n            _pledgeSum.lpSum += _liquidity;\r\n            wholePledgeSum.usdtWholeSum += _usdtAmount;\r\n            wholePledgeSum.lpWholeSum += _liquidity;\r\n            emit PartakeAdd(_msgSender(), _usdtAmount, _liquidity,_lpType,block.timestamp);\r\n        } \r\n\r\n        function getAddLpNeedUsdt(uint256 _desirAmount) public view returns(uint256) {\r\n            (,uint256 _usdtOut) = getAmountOut(address(desirContract),usdtAddress,_desirAmount);\r\n            return _usdtOut;\r\n        }\r\n\r\n        function takeLp() public {\r\n            UserPledgeSum storage _pledgeSum = userPledgeSums[_msgSender()];\r\n            uint256 _lpSum = _pledgeSum.lpSum;\r\n            require(_lpSum > 0,\"no lp\");\r\n            (uint256 _usdtTake,uint256 _desirTake) = getTakeIncome(_msgSender());\r\n            (uint256 _amountA, uint256 _amountB) =  removeLiquidity(_lpSum, address(this));\r\n            if(_amountA < _usdtTake) _usdtTake = _amountA;\r\n            if(_amountB < _desirTake) _desirTake = _amountB;\r\n            IERC20(token0).transfer(_msgSender(),_usdtTake);\r\n            IERC20(token1).transfer(_msgSender(),_desirTake);\r\n            if (wholePledgeSum.usdtWholeSum <= _pledgeSum.usdtSum){\r\n                delete wholePledgeSum.usdtWholeSum;\r\n            }else {\r\n                wholePledgeSum.usdtWholeSum -= _pledgeSum.usdtSum;\r\n            }\r\n\r\n            if (wholePledgeSum.lpWholeSum <= _pledgeSum.lpSum){\r\n                delete wholePledgeSum.lpWholeSum;\r\n            }else {\r\n                wholePledgeSum.lpWholeSum -= _pledgeSum.lpSum;\r\n            }\r\n\r\n            delete _pledgeSum.lpSum;\r\n            delete _pledgeSum.usdtSum;\r\n            endPledge();\r\n            emit PartakeRemove(_msgSender(), block.timestamp);\r\n        }\r\n\r\n        function getTakeIncome(address _wallet) public view returns(uint256 _usdtTake,uint256 _desirTake) {\r\n            uint _liquidity = userPledgeSums[_wallet].lpSum;\r\n            (uint256 _removeUsdt,uint256 _removeDesir) = getRemoveTokens(_liquidity);\r\n            (uint256 _penaltyUsdt,uint256 _penaltyDesir) = getPenaltyFee(_wallet); \r\n            _usdtTake = _removeUsdt - _penaltyUsdt;\r\n            _desirTake = _removeDesir - _penaltyDesir;\r\n        }\r\n\r\n        function getRemoveTokens(uint256 _liquidity) private view returns(uint256 _removeUsdt,uint256 _removeDesir){\r\n            uint _usdtAmount = IERC20(usdtAddress).balanceOf(pair);\r\n            uint _desirAmount = desirContract.balanceOf(pair);\r\n            uint _totalSupply = IUniswapV2Pair(pair).totalSupply();\r\n            _removeUsdt = _liquidity.mul(_usdtAmount) / _totalSupply; \r\n            _removeDesir = _liquidity.mul(_desirAmount) / _totalSupply;\r\n        }\r\n\r\n        function getPenaltyFee(address _wallet) public view returns(uint256 _penaltyUsdt,uint256 _penaltyDesir){\r\n            uint256[] storage _pledgeIds = userPledgeIdArrays[_wallet];\r\n            for(uint i = 0;i < _pledgeIds.length;i++){\r\n                PledgeInfo storage _pledge = pledgeInfos[_pledgeIds[i]];\r\n                (uint256 _usdtFee,uint256 _desirFee) = getCalculatePenalty(_pledge);\r\n                _penaltyUsdt += _usdtFee;\r\n                _penaltyDesir += _desirFee;\r\n            }\r\n        }\r\n        \r\n        function getCalculatePenalty(PledgeInfo memory _pledge) private view returns(uint256,uint256){\r\n            if(!_pledge.enable || _pledge.lpType == 1) return(0,0);\r\n            uint256 _rewardDay = (block.timestamp - _pledge.depositTime) / 86400; \r\n            if(_rewardDay >= takeLpRules[_pledge.lpType].cycle) return(0,0);\r\n            if(_rewardDay == 0) _rewardDay = 1;\r\n            (uint256 _removeUsdt,uint256 _removeDesir) = getRemoveTokens(_pledge.lpAmount);\r\n            TakeLpRule memory _takeLpRule = takeLpRules[_pledge.lpType];\r\n            uint256 _rewardScale = _takeLpRule.dayFee * _rewardDay;\r\n            uint256 _desirFee;\r\n            uint256 _usdtFee;\r\n            if(_rewardScale >= 1 * 10 ** lpMiningReward) {\r\n                (_desirFee,_usdtFee) = (_removeDesir,_removeUsdt);\r\n            } else {\r\n                (_desirFee,_usdtFee) = (calculateFee(_removeDesir, _rewardScale),calculateFee(_removeUsdt, _rewardScale)); \r\n            }\r\n            if(_desirFee != _removeDesir) {\r\n                _desirFee += calculateFee(_removeDesir - _desirFee, _takeLpRule.takeFee);\r\n                _usdtFee += calculateFee(_removeUsdt - _usdtFee, _takeLpRule.takeFee);\r\n            }\r\n            return (_usdtFee,_desirFee);\r\n        }\r\n\r\n        function endPledge() private {\r\n            uint256[] storage _pledgeIds = userPledgeIdArrays[_msgSender()];\r\n            for(uint i = 0;i < _pledgeIds.length;i++){\r\n                PledgeInfo storage _pledge = pledgeInfos[_pledgeIds[i]];\r\n                if(!_pledge.enable) continue;\r\n                _pledge.enable = false;\r\n            }\r\n        }\r\n\r\n        function getCanClaimed(address _wallet,uint256 _liquidity,uint256 _fee) public view returns(uint256) {\r\n            uint256 _canClaim;\r\n            if(userPledgeSums[_wallet].lpSum == 0 || userPledgeSums[_wallet].lpSum < _liquidity) return _canClaim;\r\n            uint _totalSupply = IUniswapV2Pair(pair).totalSupply();\r\n            uint _pairDesirBalance = desirContract.balanceOf(pair);\r\n            uint256 _amount0 = _liquidity.mul(_pairDesirBalance) / _totalSupply;\r\n            if(_amount0 <= 0) return _canClaim;\r\n            return calculateFee(_amount0 * 2, _fee);\r\n        }\r\n\r\n        function getAmountOut(address _token0,address _token1,uint256 _amountIn) internal view returns(address[] memory,uint256) {\r\n            address[] memory _path = new address[](2);\r\n            _path[0] = _token0;\r\n            _path[1] = _token1;\r\n            uint256[] memory _amountOut = uniswapV2Router.getAmountsOut(_amountIn,_path);\r\n            uint256 _out = _amountOut[1];\r\n            return(_path,_out);\r\n        }  \r\n\r\n        function swapAndLiquify(uint256 _amount) private lockTheSwap returns(uint256) {\r\n            uint256 _swapToDesirAmount = _amount.div(2);\r\n            uint256 _otherUsdtAmount = _amount.sub(_swapToDesirAmount);\r\n            address[] memory _path = getPath(address(usdtAddress),address(desirContract));\r\n            uint256 _desirAmount = swapTokensForUSDT(_path,_swapToDesirAmount);\r\n            desirContract.transferFrom(address(tokenDistributor),address(this),_desirAmount);\r\n            return addLiquidityUseUsdt(_path,_otherUsdtAmount,_desirAmount);\r\n        }\r\n        \r\n\r\n        function getPath(address _token0,address _token1) private pure returns(address[] memory){\r\n            address[] memory _path = new address[](2);\r\n            _path[0] = _token0;\r\n            _path[1] = _token1;\r\n            return _path;\r\n        }\r\n\r\n        function swapTokensForUSDT(address[] memory _path,uint256 _tokenAmount) private returns(uint){ \r\n           uint[] memory amounts = uniswapV2Router.swapExactTokensForTokens(\r\n                _tokenAmount,\r\n                0,\r\n                _path,\r\n                address(tokenDistributor),\r\n                block.timestamp + 10\r\n            );\r\n            return amounts[1];\r\n        }\r\n\r\n        function addLiquidityUseUsdt(address[] memory _path,uint256 _usdtAmount,uint256 _tokenAmount) private returns(uint256) {\r\n            (,,uint256 liquidity) = uniswapV2Router.addLiquidity(\r\n                _path[0],\r\n                _path[1],\r\n                _usdtAmount,\r\n                _tokenAmount,\r\n                0,\r\n                0,\r\n                address(this),\r\n                block.timestamp + 10\r\n            );\r\n            return liquidity;\r\n        }\r\n\r\n        function removeLiquidity(uint _liquidity,address _to) private lockTheSwap returns (uint amountA,uint amountB){\r\n            return uniswapV2Router.removeLiquidity(usdtAddress, address(desirContract), _liquidity, 0, 0, _to, block.timestamp + 10);\r\n        }\r\n\r\n        function calculateFee(uint256 _amount,uint256 _fee) internal view returns(uint256){\r\n            return _amount.mul(_fee).div(10 ** lpMiningReward);\r\n        }\r\n\r\n        function claimToken(address token, uint256 amount, address to) external onlyOwner {\r\n            IERC20(token).transfer(to, amount);\r\n        }\r\n        \r\n        function setLpMiningReward(uint256 _value) public onlyOwner {\r\n            lpMiningReward = _value;\r\n        }\r\n        function setLpMiningUsdt(uint256 _value) public onlyOwner {\r\n            lpMiningUsdt = _value;\r\n        }\r\n        function setLpShareUsdt(uint256 _value) public onlyOwner {\r\n            lpShareUsdt = _value;\r\n        }\r\n        function getUserPledgeIdArrays(address _wallet) public view returns(uint256[] memory){\r\n            return userPledgeIdArrays[_wallet];\r\n        }  \r\n        function setTokenExchange() public onlyOwner {\r\n            address _temp = token0;\r\n            token0 = token1;\r\n            token1 = _temp;\r\n        }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"obtainLp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpDays\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"PartakeAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"PartakeRemove\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"desirContract\",\"outputs\":[{\"internalType\":\"contract Desir\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_desirAmount\",\"type\":\"uint256\"}],\"name\":\"getAddLpNeedUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"getCanClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getPenaltyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_penaltyUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penaltyDesir\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getTakeIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtTake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_desirTake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getUserPledgeIdArrays\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpMiningReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpMiningUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpShareUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_desirAmount\",\"type\":\"uint256\"}],\"name\":\"partakeAddDesirAndUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"}],\"name\":\"partakeAddLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pledgeInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setLpMiningReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setLpMiningUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setLpShareUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ruleId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dayFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takeFee\",\"type\":\"uint256\"}],\"internalType\":\"struct LPInvest.TakeLpRule\",\"name\":\"_rule\",\"type\":\"tuple\"}],\"name\":\"setTakeLpRule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTokenExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"takeLpRules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dayFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takeFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userPledgeSums\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtSum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpSum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wholePledgeSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtWholeSum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpWholeSum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LPInvest", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000400000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000005672a03f595d5fbc7defc50889ef83a784a7d04300000000000000000000000030b0a17416ea1946920e520f453c2f4dcfbf99fb", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f79ca936b202ec40225e4e60097ac58fad30a0b24f5f7d9242d23e5dc83a3f5f"}