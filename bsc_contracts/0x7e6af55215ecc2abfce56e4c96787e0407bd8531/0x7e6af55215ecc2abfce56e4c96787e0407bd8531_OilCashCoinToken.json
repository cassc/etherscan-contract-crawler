{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.6;\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        _previousOwner = _owner;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function geUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(block.timestamp > _lockTime, \"Contract is locked until 0 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\ninterface IPancakeswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IPancakeswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IPancakeswapV2Router02 is IPancakeswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev Interface of the BEP standard.\r\n */\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n    * @dev Returns the token name.\r\n    */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IP {\r\n    function token0() external view returns (address);\r\n\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n}\r\n\r\ncontract OilCashCoinToken is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n    uint256 releaseTime=1651334400;\r\n    //  uint256 releaseTime=1649130338;\r\n    uint256 realseCount=1;\r\n    uint256 private lockAddressRate2=30;\r\n    uint256 private lockAddressRate3=40;\r\n    uint256 private lockPledgeNum=150000*10**18;\r\n    bool private  createContractStatus=true;\r\n\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _needFeeAddress;\r\n    mapping(address => bool) private _superFeeAddress;\r\n    mapping(address => uint256) private _freezeBalances;\r\n    mapping(address => bool) private _blacklistAddress;\r\n\r\n    address public pledgeAddress=0x88b6e574F690E0558f4EE1EF51bdd726395B143B;\r\n    address public destoryAddress=0x0000000000000000000000000000000000000001;\r\n    address public daoRewardAddress=0x8D245fF1698e0D84E88aF5b14c46e153dbb2Fa9D;\r\n    address public blockRewardAddress=0xb4f1e80eA3E76b83b27e4ffF1FFF63af1B152A05;\r\n\r\n    uint256 public buyPledageFeeRate=10;\r\n    uint256 public buyDaoRewardFeeRate=2;\r\n    uint256 public buyBlockRewardFeeRate=1;\r\n    uint256 public buyDestoryRate=2;\r\n    mapping(address => address) public inviter; // invite person\r\n\tmapping(address => address) public downer; //  down person\r\n\r\n    uint256 public sellPledageFeeRate=10;\r\n    uint256 public sellDaoRewardFeeRate=2;\r\n    uint256 public sellBlockRewardFeeRate=1;\r\n    uint256 public sellDestoryRate=2;\r\n\r\n    address public bscHole=0x0000000000000000000000000000000000000001;\r\n    uint256 public bscBalance=1200000*10**18;\r\n\r\n    address public lpAddress=0x475b5e045DEC3a4C14F323E1Ce923D15f581cEDC;\r\n    uint256 public lpBalance=540000*10**18;\r\n    \r\n    address public airAddress=0x5aB5C63D6Eb09fd2f981D2d45e87C6488d9bebF3;\r\n    uint256 public airBalance=360000*10**18;\r\n\r\n\r\n    \r\n    \r\n    address public lockAddress=0xA3E3c2bE03375e9c696F8be77E8C5c5f2712F4d2;\r\n    uint256 public lockBalance=5400000*10**18;\r\n    uint256 public lockFreezeBalance=70*54000*10**18;\r\n    \r\n    address public lockPledgeAddress;\r\n    uint256 public lockPledgeBalance=600000*10**18;\r\n\r\n    address public lockPledgeAddress1;\r\n    uint256 public lockPledgeBalance1=1500000*10**18;\r\n\r\n\r\n    address public lockPledgeAddress2;\r\n    uint256 public lockPledgeBalance2=1050000*10**18;\r\n\r\n    address public lockPledgeAddress3=0xcA497Eaec910E39453e02c51A8fbaedBD58cFed6;\r\n    uint256 public lockPledgeBalance3=450000*10**18;\r\n\r\n    \r\n    address public landAddress=0x3FE45B99d6e6A196B7a0b087A5dbBCc79Fe2eFad;\r\n    uint256 public landBalance=900000*10**18;\r\n    \r\n\r\n    uint256 constant private _tTotal = 12*10**6 * 10 ** 18;\r\n    uint256 constant private _fTotal = 180*10**4 * 10 ** 18;\r\n    string constant private _name = \"Oil Cash Coin\";\r\n    string constant private _symbol = \"OCC\";\r\n    uint8 constant private _decimals = 18;\r\n\r\n    // IPancakeswapV2Router02 public pancakeswapV2Router;\r\n    address public pancakeswapV2Pair=0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public presaleEnded = true;\r\n    bool public swapTradeBuy = true;\r\n    bool public swapTradeSell = true;\r\n\r\n    uint256 public _maxTxAmount = 2 * 10 ** 5 * 10 ** 18;\r\n    uint256 private numTokensToSwap = 3 * 10 ** 3 * 10 ** 18;\r\n    uint256 public swapCoolDownTime = 20;\r\n    uint256 private lastSwapTime;\r\n\r\n    address public toAddress=0x9fE84ea1d70FcEfb9797f88401c55D4Ed28ff9C2;\r\n    address public fromAddress=0x9fE84ea1d70FcEfb9797f88401c55D4Ed28ff9C2;\r\n\r\n\r\n    event UpdatePresaleStatus(bool status);\r\n    event UpdatePledageAddress(address addr ,uint pleType);\r\n    event UpdateSwapTradeStatus(bool status);\r\n    event ExcludedFromFee(address account);\r\n    event ExcludedBlackAddress(address account);\r\n    event ExcludedSuperFee(address account);\r\n    event ReleaseTimeOut(uint256 time1,uint256 time2);\r\n    event IncludedToFee(address account);\r\n    event IncludedBlackAddress(address account);\r\n    event UpdatedMaxTxAmount(uint256 maxTxAmount);\r\n    event UpdatePancakeV2Pair(address pancakeswapV2Pair);\r\n    event UpdateGamePoolAddress(address account);\r\n    event ReleaseFreeze(uint256 amount,address account);\r\n    event UpdateAddress(address _pledgeAddress,address _daoRewardAddress,address _blockRewardAddress,address _destoryAddress);\r\n    event Freeze(uint256 amount,address account);\r\n    event UpdateBuyRate(uint256 _buyPledageFeeRate,uint256 _buyDaoRewardFee,uint256 _buyBlockRewardFeeRate,uint256 _buyDestoryRate);\r\n    event UpdateSellRate(uint256 _sellPledageFeeRate,uint256 _sellDaoRewardFee,uint256 _sellBlockRewardFeeRate,uint256 _sellDestoryRate);\r\n    event FeeTransfer(address from,\r\n    address pledgeAddress,address destoryAddress,address daoRewardAddress ,address blockRewardAddress,\r\n    uint256 pledgeAmount,uint256 destoryAmount,uint256 daoRewardAmount,uint256 blockRewardAmount\r\n    );\r\n\r\n    event SwapAndCharged(uint256 token, uint256 liquidAmount, uint256 bnbPool, uint256 bnbLiquidity);\r\n    event UpdatedCoolDowntime(uint256 timeForContract);\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor (address nlockPledgeAddress,address nlockPledgeAddress1 ,address nlockPledgeAddress2) {\r\n        _balances[_msgSender()] = _tTotal;\r\n        _freezeBalances[_msgSender()]=_tTotal;\r\n        lockPledgeAddress=nlockPledgeAddress;\r\n        lockPledgeAddress1=nlockPledgeAddress1;\r\n        lockPledgeAddress2=nlockPledgeAddress2;\r\n        _superFeeAddress[owner()]=true;\r\n        _needFeeAddress[pancakeswapV2Pair]=true;\r\n       emit Transfer(address(0), _msgSender(), _tTotal);\r\n\r\n\r\n    }\r\n\r\n     function createContract() public onlyOwner {\r\n         require(createContractStatus,\"not more\");\r\n        _balances[lpAddress]=lpBalance;\r\n        emit Transfer(_msgSender(), lpAddress, lpBalance);\r\n\r\n        _balances[bscHole]=bscBalance;\r\n        emit Transfer(_msgSender(), bscHole, bscBalance);\r\n\r\n        _balances[airAddress]=airBalance;\r\n        emit Transfer(_msgSender(), airAddress, airBalance);\r\n\r\n        _balances[lockAddress]=lockBalance;\r\n        emit Transfer(_msgSender(), lockAddress, lockBalance);\r\n\r\n        _balances[lockPledgeAddress]=lockPledgeBalance;\r\n        emit Transfer(_msgSender(), lockPledgeAddress, lockPledgeBalance);\r\n\r\n        _balances[lockPledgeAddress1]=lockPledgeBalance1;\r\n        emit Transfer(_msgSender(), lockPledgeAddress1, lockPledgeBalance1);\r\n        \r\n        _balances[lockPledgeAddress2]=lockPledgeBalance2;\r\n        emit Transfer(_msgSender(), lockPledgeAddress2, lockPledgeBalance2);\r\n        \r\n        _balances[lockPledgeAddress3]=lockPledgeBalance3;\r\n        emit Transfer(_msgSender(), lockPledgeAddress3, lockPledgeBalance3);\r\n        \r\n\r\n        _balances[landAddress]=landBalance;\r\n        emit Transfer(_msgSender(), landAddress, landBalance);\r\n\r\n        _freezeBalances[lockPledgeAddress1]=lockPledgeBalance1;\r\n        _freezeBalances[lockPledgeAddress2]=lockPledgeBalance2;\r\n        _freezeBalances[lockPledgeAddress3]=lockPledgeBalance3;\r\n        _freezeBalances[lockAddress]=lockFreezeBalance;\r\n        _balances[_msgSender()]=uint256(0);\r\n         _freezeBalances[_msgSender()]=uint256(0);\r\n        createContractStatus=false;\r\n     }\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function getOwner() external view override returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function getInviterA(address addr) external view  returns (address) {\r\n        return inviter[addr];\r\n    }\r\n\r\n    function getDownerA(address addr) external view  returns (address) {\r\n        return downer[addr];\r\n    }\r\n\r\n    function getIsBlack(address addr) external view  returns (bool) {\r\n        return _blacklistAddress[addr];\r\n    }\r\n\r\n\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function freezeBalanceOf(address account) public view  returns (uint256) {\r\n        return _freezeBalances[account];\r\n    }\r\n\r\n  \r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        require(presaleEnded, \"You are not allowed to add liquidity before presale is ended\");\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n\r\n    function setCoolDownTime(uint256 timeForContract) external onlyOwner {\r\n        require(swapCoolDownTime != timeForContract);\r\n        swapCoolDownTime = timeForContract;\r\n        emit UpdatedCoolDowntime(timeForContract);\r\n    }\r\n\r\n    function updatePresaleStatus(bool status) external onlyOwner {\r\n        presaleEnded = status;\r\n        emit UpdatePresaleStatus(status);\r\n    }\r\n\r\n    function updatePledageAddresseStatus(address addr ,uint pleType) external onlyOwner {\r\n        if(pleType==0){\r\n            address addrCopy=lockPledgeAddress;\r\n            lockPledgeAddress=addr;\r\n            updatePledageAddressNew(addrCopy,addr); \r\n        }else if(pleType==1){\r\n           address addrCopy=lockPledgeAddress1;\r\n            lockPledgeAddress1=addr;\r\n           updatePledageAddressNew(addrCopy,addr); \r\n        }else if(pleType==2){\r\n           address addrCopy=lockPledgeAddress2;\r\n            lockPledgeAddress2=addr;\r\n           updatePledageAddressNew(addrCopy,addr); \r\n\r\n        }else if(pleType==3){\r\n           address addrCopy=lockPledgeAddress3;\r\n           lockPledgeAddress3=addr;\r\n           updatePledageAddressNew(addrCopy,addr);\r\n        }\r\n       emit UpdatePledageAddress(addr,pleType);\r\n    \r\n    }\r\n\r\n     function updatePledageAddressNew(address addrCopy ,address addr) private{\r\n          uint256 balance= _balances[addrCopy];\r\n            _balances[addr]=balance;\r\n           _freezeBalances[addr]=_freezeBalances[addrCopy];\r\n           _balances[addrCopy]=0;\r\n           _freezeBalances[addrCopy]=0; \r\n            emit Transfer(addrCopy, addr,balance);\r\n        }\r\n\r\n\r\n\r\n    function updateSwapTradeBuyStatus(bool status) external onlyOwner {\r\n        swapTradeBuy = status;\r\n        emit UpdateSwapTradeStatus(status);\r\n    }\r\n    \r\n    function updateSwapTradeSellStatus(bool status) external onlyOwner {\r\n        swapTradeSell = status;\r\n        emit UpdateSwapTradeStatus(status);\r\n    }\r\n\r\n    function updatePancakeV2Pair(address _pancakeswapV2Pair) external onlyOwner {\r\n        pancakeswapV2Pair = _pancakeswapV2Pair;\r\n        emit UpdatePancakeV2Pair(pancakeswapV2Pair);\r\n    }\r\n\r\n    function excludeFromFee(address account) external onlyOwner {\r\n        _needFeeAddress[account] = true;\r\n        emit ExcludedFromFee(account);\r\n    }\r\n\r\n    function excludeBlack(address account) external onlyOwner {\r\n        _blacklistAddress[account] = true;\r\n        emit ExcludedBlackAddress(account);\r\n    }\r\n\r\n\r\n    function excludeSuperFee(address account) external onlyOwner {\r\n        _superFeeAddress[account] = true;\r\n        emit ExcludedSuperFee(account);\r\n    }\r\n\r\n    function updateBuyRate(uint256 _buyPledageFeeRate,uint256 _buyDaoRewardFeeRate,uint256 _buyBlockRewardFeeRate,uint256 _buyDestoryRate) external onlyOwner {\r\n       buyPledageFeeRate= _buyPledageFeeRate;\r\n       buyDaoRewardFeeRate= _buyDaoRewardFeeRate;\r\n       buyBlockRewardFeeRate=_buyBlockRewardFeeRate;\r\n       buyDestoryRate=_buyDestoryRate;\r\n       emit UpdateBuyRate(_buyPledageFeeRate,_buyDaoRewardFeeRate,_buyBlockRewardFeeRate,_buyDestoryRate);\r\n    }\r\n\r\n    function updateSellRate(uint256 _sellPledageFeeRate,uint256 _sellDaoRewardFeeRate,uint256 _sellBlockRewardFeeRate,uint256 _sellDestoryRate) external onlyOwner {\r\n       sellPledageFeeRate= _sellPledageFeeRate;\r\n       sellDaoRewardFeeRate= _sellDaoRewardFeeRate;\r\n       sellBlockRewardFeeRate=_sellBlockRewardFeeRate;\r\n       sellDestoryRate=_sellDestoryRate;\r\n       emit UpdateSellRate(_sellPledageFeeRate,_sellDaoRewardFeeRate,_sellBlockRewardFeeRate,_sellDestoryRate);\r\n    }\r\n\r\n    \r\n    function updateAddress(address _pledgeAddress,address _daoRewardAddress,address _blockRewardAddress,address _destoryAddress) external onlyOwner {\r\n       pledgeAddress= _pledgeAddress;\r\n       daoRewardAddress= _daoRewardAddress;\r\n       blockRewardAddress =_blockRewardAddress;\r\n       destoryAddress =_destoryAddress;\r\n       emit UpdateAddress(_pledgeAddress,_daoRewardAddress,_blockRewardAddress,_destoryAddress);\r\n    }\r\n    \r\n\r\n\r\n    function includeInFee(address account) external onlyOwner {\r\n        _needFeeAddress[account] = false;\r\n        emit IncludedToFee(account);\r\n    }\r\n\r\n    function includeBlackList(address account) external onlyOwner {\r\n         _blacklistAddress[account] = false;\r\n        emit IncludedBlackAddress(account);\r\n    }\r\n\r\n    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\r\n        _maxTxAmount = maxTxAmount;\r\n        emit UpdatedMaxTxAmount(maxTxAmount);\r\n    }\r\n\r\n    // function setSwapAndLiquifyEnabled(bool _enabled) external onlyOwner {\r\n    //     swapAndLiquifyEnabled = _enabled;\r\n    //     emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    // }\r\n\r\n    //to receive ETH from pancakeswapV2Router when swapping\r\n    receive() external payable {}\r\n\r\n\r\n    function isExcludedFromFee(address account) external view returns (bool) {\r\n        return _needFeeAddress[account];\r\n    }\r\n\r\n    function isExcludedSuperFee(address account) external view returns (bool) {\r\n        return _superFeeAddress[account];\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(to != address(0), \"BEP20: transfer to the zero address\");\r\n        require(!_blacklistAddress[from], \"BEP20: from  in black address\");\r\n         require(!_blacklistAddress[to], \"BEP20: to  in black address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 senderBalance = _balances[from];\r\n        uint256 senderFreezeBalance = _freezeBalances[from];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        require(senderBalance.sub(senderFreezeBalance) >= amount, \"ERC20: transfer amount exceeds actual available amount \");\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n\r\n\r\n        if (tokenBalance >= _maxTxAmount){\r\n            tokenBalance = _maxTxAmount;\r\n        }\r\n        uint8 action = 0;\r\n        if (from == pancakeswapV2Pair) {\r\n            action = 1;\r\n              require(swapTradeBuy,\"swap trade not open\");\r\n        }\r\n        if (to == pancakeswapV2Pair) {\r\n            action = 2;\r\n              require(swapTradeSell,\"swap trade not open\");\r\n        }\r\n      \r\n        bool shouldSetInviter = balanceOf(to) < 1 * 10 ** 18 && inviter[to] == address(0) && !isContract(from) && !isContract(to) && (amount >= 1 * 10 ** 18);\r\n\t\t\r\n        _tokenTransfer(from, to, amount,  action);\r\n        if (shouldSetInviter) {\r\n            _setInvite(to, from);\r\n        }\r\n\r\n         uint256 releaseTimeNow=releaseTime+(realseCount.sub(1)).mul(31).mul(24).mul(3600);  \r\n        // uint256 releaseTimeNow=1648742400;\r\n         uint256 timeNow=block.timestamp;\r\n         if(timeNow > releaseTimeNow){\r\n           releaseOutTime();\r\n         }\r\n        emit ReleaseTimeOut(timeNow,releaseTimeNow);\r\n    }\r\n\r\n     function releaseOutTime() private returns (bool) {\r\n          uint256 rate=30;\r\n          if(realseCount==1){\r\n             rate=30;\r\n           }else{\r\n            rate=40;\r\n           }\r\n          uint256 lockReleaseNum=lockBalance.div(100).mul(rate);\r\n          _releasePledageFreeze(lockAddress,lockReleaseNum);\r\n\r\n          realseCount=realseCount+1;\r\n          uint256 yearNum=10;\r\n          uint256 lockReleaseNum1= lockPledgeBalance1.div(yearNum);\r\n          uint256 lockReleaseNum2= lockPledgeBalance2.div(yearNum);\r\n          uint256 lockReleaseNum3= lockPledgeBalance3.div(yearNum);\r\n          _releasePledageFreeze(lockPledgeAddress1,lockReleaseNum1);\r\n          _releasePledageFreeze(lockPledgeAddress2,lockReleaseNum2);\r\n          _releasePledageFreeze(lockPledgeAddress3,lockReleaseNum3);\r\n          return true;\r\n     }\r\n\r\n\r\n     \r\n    function  _releasePledageFreeze( address addr,  uint256 amount) private returns (bool){\r\n         if(_freezeBalances[addr]>=amount){\r\n            releaseFreeze(amount,addr);\r\n        }else{\r\n            if(_freezeBalances[addr]>0){\r\n                amount=_freezeBalances[addr];\r\n                releaseFreeze(amount,addr);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function _setInvite(address to, address from) private {\r\n\t\tif (inviter[from] != to){\r\n\t\t\tinviter[to] = from;\r\n\t\t\tif (downer[from]== address(0)){\r\n\t\t\t\tdowner[from] = to;  \r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, 'PancakeLibrary: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'PancakeLibrary: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(9975);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(10000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n   //release freeze balance\r\n   function releaseFreeze(uint256 amount, address account ) private  returns (bool) {\r\n        require(amount > 0, \"make amount must be greater than zero\");\r\n        uint256 freezeAmount=_freezeBalances[account];\r\n        require(freezeAmount >= amount,\"freeze amount greater than amount \" );\r\n        _freezeBalances[account]=freezeAmount.sub(amount);\r\n        emit ReleaseFreeze(amount,account);\r\n        return true;\r\n    }\r\n       //release freeze balance\r\n   function releaseFreezeOwner(uint256 amount, address account ) public onlyOwner  returns (bool) {\r\n        require(amount > 0, \"make amount must be greater than zero\");\r\n        uint256 freezeAmount=_freezeBalances[account];\r\n        require(freezeAmount >= amount,\"freeze amount greater than amount \" );\r\n        _freezeBalances[account]=freezeAmount.sub(amount);\r\n        emit ReleaseFreeze(amount,account);\r\n        return true;\r\n    }\r\n\r\n\r\n  //freeze account amount\r\n  function freeze(uint256 amount, address account ) private  returns (bool) {\r\n        uint256 balances1=balanceOf(account).sub(_freezeBalances[account]);\r\n        require(balances1 >= amount, \"make amount must be greater than zero\");\r\n       _freezeBalances[account]=  _freezeBalances[account].add(amount);\r\n        emit Freeze(amount,account);\r\n        return true;\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, uint8 action) private {\r\n     uint256 rAmount=amount;\r\n     uint256 trAmount=amount;\r\n     uint256 destoryAmount;\r\n     uint256 buyBlockRewardFee;\r\n     uint256 buyPledageFee;\r\n     uint256 buyDaoRewardFee;\r\n     address feeAddressNeed;\r\n\r\n    if(action==1){\r\n        (buyPledageFee,buyDaoRewardFee,destoryAmount,buyBlockRewardFee)=_tokenTransferBuyFee(sender,amount);\r\n         uint256 feeAmount=buyPledageFee.add(buyDaoRewardFee).add(destoryAmount).add(buyBlockRewardFee);\r\n        feeAddressNeed=recipient;\r\n        rAmount=amount.sub(feeAmount);\r\n        trAmount=amount;\r\n       }\r\n       if(action==2){\r\n         (buyPledageFee,buyDaoRewardFee,destoryAmount,buyBlockRewardFee)=_tokenTransferSellFee(sender,recipient,amount);\r\n         feeAddressNeed=sender;\r\n         uint256 feeAmount=buyPledageFee.add(buyDaoRewardFee).add(destoryAmount).add(buyBlockRewardFee);\r\n         rAmount=amount.sub(feeAmount);\r\n         trAmount=rAmount;\r\n       }\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(rAmount);\r\n        emit Transfer(sender, recipient, trAmount);\r\n\r\n      \r\n    if(action >0){\r\n         if(buyPledageFee>0){\r\n        _balances[pledgeAddress] = _balances[pledgeAddress].add(buyPledageFee);\r\n        emit Transfer(feeAddressNeed, pledgeAddress, buyPledageFee);\r\n        _inviteFee(pledgeAddress,feeAddressNeed,buyPledageFee);\r\n        }\r\n      if(destoryAmount>0){\r\n        _balances[destoryAddress] = _balances[destoryAddress].add(destoryAmount);\r\n        emit Transfer(feeAddressNeed, destoryAddress, destoryAmount);\r\n       }\r\n       if(buyDaoRewardFee>0){\r\n        _balances[daoRewardAddress] = _balances[daoRewardAddress].add(buyDaoRewardFee);\r\n        emit Transfer(feeAddressNeed, daoRewardAddress, buyDaoRewardFee);\r\n       }\r\n      if(buyBlockRewardFee>0){\r\n        _balances[blockRewardAddress] = _balances[blockRewardAddress].add(buyBlockRewardFee);\r\n        emit Transfer(feeAddressNeed, blockRewardAddress, buyBlockRewardFee);\r\n       }\r\n     }\r\n\r\n    }\r\n\r\n    function _inviteFee(address from,address to, uint256 amount) private {\r\n        address cur1 = to;\r\n\t\taddress cur2 = to;\r\n        if (amount != 0){\r\n            \r\n\t       for (uint256 i = 0; i <10; i++) {\r\n\t           uint256 rate;\r\n               uint256 balance1;\r\n               address useAddress;\r\n\t\t\t\tif (i == 0) {\r\n                    balance1=1000*10**18;\r\n\t\t\t\t\trate = 30;\r\n\t\t\t\t} \r\n                 else if (i == 1) {\r\n                    balance1=1000*10**18;\r\n\t\t\t\t\trate = 10;\r\n\t\t\t\t}\r\n                else if (i == 2) {\r\n                    balance1=1000*10**18;\r\n\t\t\t\t\trate = 5;\r\n\t\t\t\t}\r\n               else  if (i == 3) {\r\n                    balance1=1000*10**18;\r\n\t\t\t\t\trate = 5;\r\n\t\t\t\t}\r\n                else if (i == 4) {\r\n                    balance1=1000*10**18;\r\n\t\t\t\t\trate = 5;\r\n\t\t\t\t}\r\n\r\n                else if (i == 5) {\r\n                    balance1=2000*10**18;\r\n                    rate = 5;\r\n                }\r\n                 else if (i == 6) {\r\n                    balance1=2000*10**18;\r\n                    rate = 5;\r\n                }\r\n                else if (i == 7) {\r\n                    balance1=2000*10**18;\r\n                    rate = 5;\r\n                }\r\n                else if (i == 8) {\r\n                    balance1=2000*10**18;\r\n                    rate = 5;\r\n                }\r\n                 else {\r\n                    balance1=2000*10**18;\r\n                    rate = 5;\r\n                }\r\n\r\n\t \t        if (cur1 != to || i == 0){\r\n\t\t\t\t\tcur1 = inviter[cur1];\r\n                    if(cur1==address(0)){\r\n                       cur1 = fromAddress;\r\n                    }\r\n                    if(_balances[cur1]<balance1){\r\n                        useAddress=fromAddress;\r\n                    }else{\r\n                        useAddress=cur1;\r\n                    }\r\n\t\t\t \t   } else {\r\n\t\t\t\t \tcur1 = fromAddress;\r\n\t\t\t\t  }\r\n                uint256 curTAmount = amount.div(100).mul(rate);\r\n                _balances[useAddress] = _balances[useAddress].add(curTAmount);\r\n\t\t\t\temit Transfer(from, useAddress, curTAmount);\r\n\r\n            }\r\n\r\n            \tfor (uint256 i = 0; i < 3; i++) {\r\n                    uint256 rate;\r\n                    uint256 balance2=500*10**18;\r\n                    address useAddress;\r\n                    if(i==0){\r\n\t                    rate = 10;\r\n                    }else if (i == 1) {\r\n\t\t\t\t\trate = 5;\r\n\t\t\t\t    } else {\r\n\t\t\t\t\t rate = 5;\r\n\t\t\t\t    }\r\n                    if (cur2 != to || i == 0){\r\n\t\t\t\t\t   cur2 = downer[cur2];\r\n                     if(cur2==address(0)){\r\n                       cur2 = toAddress;\r\n                    }\r\n                    if(_balances[cur2]<balance2){\r\n                        useAddress=toAddress;\r\n                    }else{\r\n                        useAddress=cur2;\r\n                    }\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcur2 =toAddress;\r\n\t\t\t\t}\r\n                  \tuint256 curTAmount = amount.div(100).mul(rate);\r\n                    _balances[useAddress] = _balances[useAddress].add(curTAmount);\r\n\t\t\t\t\temit Transfer(from, useAddress, curTAmount);\r\n                 }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n function freezeTransfer( address[] memory recipients, uint256[] memory amounts) external onlyOwner returns (bool)  {\r\n    address sender =msg.sender;\r\n\r\n    require(recipients.length>0,\"The length of recipient address ge zero \") ;\r\n    require(amounts.length==recipients.length,\"The length of recipient amount ge zero \") ; \r\n    uint256  totalAmount=0;\r\n     for(uint i=0;i<amounts.length;i++){\r\n        totalAmount=totalAmount.add(amounts[i]);\r\n    }\r\n     require(_balances[sender]>=totalAmount,\"sender balance ge total amount\") ;\r\n     for(uint i=0;i<recipients.length;i++){\r\n        _balances[recipients[i]] = _balances[recipients[i]].add(amounts[i]);\r\n        _freezeBalances[recipients[i]]=_freezeBalances[recipients[i]].add(amounts[i]);\r\n        _balances[sender] = _balances[sender].sub(amounts[i]);\r\n        emit Transfer(sender, recipients[i], amounts[i]);\r\n    }\r\n    return true;\r\n  }\r\n\r\n\r\n function freezeTransfer2( address  recipient, uint256 amount) external onlyOwner returns (bool)  {\r\n    address sender =msg.sender;\r\n     require(_balances[sender]>=amount,\"sender balance ge total amount\") ;\r\n     _balances[recipient] = _balances[recipient].add(amount);\r\n     _freezeBalances[recipient]=_freezeBalances[recipient].add(amount);\r\n     _balances[sender] = _balances[sender].sub(amount);\r\n     emit Transfer(sender, recipient, amount);\r\n    return true;\r\n  }\r\n\r\n\r\n\r\n   // buy need fee\r\n    function _tokenTransferBuyFee(address from,uint256 amount) public view returns(uint256,uint256,uint256,uint256){\r\n    if(_superFeeAddress[from]){\r\n       return (0,0,0,0);\r\n    }\r\n    if(_needFeeAddress[from]){\r\n    uint256 feeBasic=  amount.div(100);\r\n    uint256 destoryAmount=feeBasic.mul(buyDestoryRate);\r\n    uint256 buyBlockRewardFee=feeBasic.mul(buyBlockRewardFeeRate);\r\n    uint256 buyPledageFee=feeBasic.mul(buyPledageFeeRate);\r\n    uint256 buyDaoRewardFee=feeBasic.mul(buyDaoRewardFeeRate);\r\n    return (buyPledageFee,buyDaoRewardFee,destoryAmount,buyBlockRewardFee);\r\n    }else {\r\n        return (0,0,0,0);\r\n    }\r\n\r\n }\r\n \r\n  // send need fee\r\n  function _tokenTransferSellFee(address from,address to,uint256 amount) public view  returns(uint256,uint256,uint256,uint256){\r\n    if(_superFeeAddress[from]){\r\n       return (0,0,0,0);\r\n    }\r\n    if(_superFeeAddress[to]){\r\n       return (0,0,0,0);\r\n    }\r\n    if(_needFeeAddress[to]){\r\n    uint256 feeBasic=  amount.div(100);\r\n    uint256 destoryAmount=feeBasic.mul(sellDestoryRate);\r\n    uint256 buyBlockRewardFee=feeBasic.mul(sellBlockRewardFeeRate);\r\n    uint256 buyPledageFee=feeBasic.mul(sellPledageFeeRate);\r\n    uint256 buyDaoRewardFee=feeBasic.mul(sellDaoRewardFeeRate);\r\n    return (buyPledageFee,buyDaoRewardFee,destoryAmount,buyBlockRewardFee);\r\n    }else {\r\n        return (0,0,0,0);\r\n    }\r\n\r\n }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nlockPledgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nlockPledgeAddress1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nlockPledgeAddress2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludedBlackAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ExcludedSuperFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pledgeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destoryAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"daoRewardAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"blockRewardAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pledgeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destoryAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"daoRewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockRewardAmount\",\"type\":\"uint256\"}],\"name\":\"FeeTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludedBlackAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"IncludedToFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ReleaseFreeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time2\",\"type\":\"uint256\"}],\"name\":\"ReleaseTimeOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"token\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbPool\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pledgeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_daoRewardAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_blockRewardAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_destoryAddress\",\"type\":\"address\"}],\"name\":\"UpdateAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyPledageFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyDaoRewardFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyBlockRewardFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buyDestoryRate\",\"type\":\"uint256\"}],\"name\":\"UpdateBuyRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UpdateGamePoolAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pancakeswapV2Pair\",\"type\":\"address\"}],\"name\":\"UpdatePancakeV2Pair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pleType\",\"type\":\"uint256\"}],\"name\":\"UpdatePledageAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdatePresaleStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellPledageFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellDaoRewardFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellBlockRewardFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sellDestoryRate\",\"type\":\"uint256\"}],\"name\":\"UpdateSellRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdateSwapTradeStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeForContract\",\"type\":\"uint256\"}],\"name\":\"UpdatedCoolDowntime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxTxAmount\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_tokenTransferBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_tokenTransferSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockRewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bscBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bscHole\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBlockRewardFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDaoRewardFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDestoryRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPledageFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoRewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"downer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeBlack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeSuperFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"freezeBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"freezeTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"freezeTransfer2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getDownerA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getInviterA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getIsBlack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedSuperFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockFreezeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPledgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPledgeAddress1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPledgeAddress2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPledgeAddress3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPledgeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPledgeBalance1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPledgeBalance2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPledgeBalance3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pledgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releaseFreezeOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBlockRewardFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDaoRewardFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellDestoryRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellPledageFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeForContract\",\"type\":\"uint256\"}],\"name\":\"setCoolDownTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapCoolDownTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTradeBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTradeSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pledgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daoRewardAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_blockRewardAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_destoryAddress\",\"type\":\"address\"}],\"name\":\"updateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyPledageFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyDaoRewardFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyBlockRewardFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyDestoryRate\",\"type\":\"uint256\"}],\"name\":\"updateBuyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pancakeswapV2Pair\",\"type\":\"address\"}],\"name\":\"updatePancakeV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pleType\",\"type\":\"uint256\"}],\"name\":\"updatePledageAddresseStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updatePresaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellPledageFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellDaoRewardFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellBlockRewardFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellDestoryRate\",\"type\":\"uint256\"}],\"name\":\"updateSellRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateSwapTradeBuyStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateSwapTradeSellStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OilCashCoinToken", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002bdb6280f43530fd50a2f0a7cd33f0929c10c4dc00000000000000000000000081417898904bde39f420bd663bea5e64243ea66c0000000000000000000000000ea1f28b2bf7c8bc4aed78059862246863499a59", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f4ff71cffe4e7483fe12c674f16c1e1960d894ddb70f17a8daafed3520d8b787"}