{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SignedMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard signed math utilities missing in the Solidity language.\r\n */\r\nlibrary SignedMath {\r\n    /**\r\n     * @dev Returns the largest of two signed numbers.\r\n     */\r\n    function max(int256 a, int256 b) internal pure returns (int256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two signed numbers.\r\n     */\r\n    function min(int256 a, int256 b) internal pure returns (int256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two signed numbers without overflow.\r\n     * The result is rounded towards zero.\r\n     */\r\n    function average(int256 a, int256 b) internal pure returns (int256) {\r\n        // Formula from the book \"Hacker's Delight\"\r\n        int256 x = (a & b) + ((a ^ b) >> 1);\r\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the absolute unsigned value of a signed value.\r\n     */\r\n    function abs(int256 n) internal pure returns (uint256) {\r\n        unchecked {\r\n            // must be unchecked in order to support `n = type(int256).min`\r\n            return uint256(n >= 0 ? n : -n);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/Math.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\r\n                // The surrounding unchecked block does not change this fact.\r\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1, \"Math: mulDiv overflow\");\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10 ** 64) {\r\n                value /= 10 ** 64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10 ** 32) {\r\n                value /= 10 ** 32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10 ** 16) {\r\n                value /= 10 ** 16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10 ** 8) {\r\n                value /= 10 ** 8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10 ** 4) {\r\n                value /= 10 ** 4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10 ** 2) {\r\n                value /= 10 ** 2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10 ** 1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(int256 value) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the two strings are equal.\r\n     */\r\n    function equal(string memory a, string memory b) internal pure returns (bool) {\r\n        return keccak256(bytes(a)) == keccak256(bytes(b));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/IAccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev External interface of AccessControl declared to support ERC165 detection.\r\n */\r\ninterface IAccessControl {\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {AccessControl-_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/AccessControl.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\r\n * members except through off-chain means by accessing the contract event logs. Some\r\n * applications may benefit from on-chain enumerability, for those cases see\r\n * {AccessControlEnumerable}.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```solidity\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```solidity\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\r\n * to enforce additional security measures for this role.\r\n */\r\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\r\n    struct RoleData {\r\n        mapping(address => bool) members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping(bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Modifier that checks that an account has a specific role. Reverts\r\n     * with a standardized message including the required role.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     *\r\n     * _Available since v4.1._\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\r\n        return _roles[role].members[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\r\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\r\n     *\r\n     * Format of the revert message is described in {_checkRole}.\r\n     *\r\n     * _Available since v4.6._\r\n     */\r\n    function _checkRole(bytes32 role) internal view virtual {\r\n        _checkRole(role, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Revert with a standard message if `account` is missing `role`.\r\n     *\r\n     * The format of the revert reason is given by the following regular expression:\r\n     *\r\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\r\n     */\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert(\r\n                string(\r\n                    abi.encodePacked(\r\n                        \"AccessControl: account \",\r\n                        Strings.toHexString(account),\r\n                        \" is missing role \",\r\n                        Strings.toHexString(uint256(role), 32)\r\n                    )\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual override {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     *\r\n     * NOTE: This function is deprecated in favor of {_grantRole}.\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        _roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleGranted} event.\r\n     */\r\n    function _grantRole(bytes32 role, address account) internal virtual {\r\n        if (!hasRole(role, account)) {\r\n            _roles[role].members[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * Internal function without access restriction.\r\n     *\r\n     * May emit a {RoleRevoked} event.\r\n     */\r\n    function _revokeRole(bytes32 role, address account) internal virtual {\r\n        if (hasRole(role, account)) {\r\n            _roles[role].members[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: contracts/MinpitKyushuB3.sol\r\n\r\n\r\npragma solidity ^0.8.19;\r\n\r\n\r\n\r\n\r\n//\u5408\u7ea6\u91c7\u7528\u4e07\u5206\u4f4d\u8ba1\u7b97\r\n\r\ncontract MinpitKyushuB3 is Ownable,AccessControl{\r\n\r\n    IUniswapV2Router02 uniswap;\r\n\r\n    Allot[] public _allots;\r\n\r\n    Plan[] public _plans;\r\n\r\n    Config public _config;\r\n\r\n    Bis public _bis;\r\n\r\n    // BSC-MainNet\r\n    address private constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n    //\u672a\u5b8c\u6210\u8ba2\u5355\r\n    mapping(address => PurchaseHistory[]) public _purchaseHistorys;\r\n\r\n    //\u7528\u6237\uff1a\u5730\u5740 => [\u4e0a\u7ea7\u5730\u5740]\r\n    mapping(address => address) public _info;\r\n\r\n    //\u7528\u6237\uff1a\u5730\u5740 => \u53ef\u9886\u53d6\u989d\u5ea6(USDT)\uff0c\u603b\u989d\u5ea6\r\n    mapping(address => uint256[2]) public _canQuota;\r\n\r\n    //\u7528\u6237\uff1a\u5730\u5740 => \u76f4\u63a8\u4e1a\u7ee9\uff0c2\u30014\u30016\u30018\u300110\u4ee3\u4e1a\u7ee9\r\n    mapping(address => uint256[2]) public _performance;\r\n\r\n    //\u7528\u6237\uff1a\u5730\u5740 => \u5956\u52b1\u989d\u5ea6(USDT)\u3002\u65e5\u5408\u8ba1\uff0c\u65e5\u5de5\u8d44\uff0c\u65e5\u5956\u91d1\uff0c\u65e5\u8865\u8d34\uff0cKPI\r\n    mapping(address => uint256[5]) public _check;\r\n\r\n    //\u7528\u6237\uff1a\u5730\u5740 => \u8d2d\u4e70\u5355\u6570\uff0c2\u30014\u30016\u30018\u300110\u5355\u6570\r\n    mapping(address => uint256[2]) public _userDirect;\r\n\r\n    address _main = 0x4d85B80c9E556529153a1b1B1Ce0F16853222E52;\r\n\r\n    struct Allot{\r\n        //\u5206\u914d\u5730\u5740\r\n        address addr;\r\n\r\n        //\u5206\u914d\u5730\u5740\u6bd4\u7387(\u4e07\u5206\u4f4d)\r\n        uint256 re;\r\n    }\r\n\r\n    struct Bis{\r\n        //usdt\r\n        address usdt;\r\n\r\n        //token\r\n        address token;\r\n\r\n        //token\u53d1\u653e\u6bd4\u7387\r\n        uint256 token_re;\r\n\r\n        //\u9ed8\u8ba4\u9080\u8bf7\u7801\r\n        address initial;\r\n\r\n        //\u5151\u6362\u6bd4\u7387\uff0c\u5343\u5206\u4f4d\r\n        uint256 exchange_rate;\r\n\r\n        //\u6536\u6b3e\u5730\u5740\r\n        address collect;\r\n\r\n        //\u662f\u5426\u5f00\u542fswap\r\n        bool isSwap;\r\n\r\n        //token\u4ef7\u683c\r\n        uint256 tokenPrice;\r\n    }\r\n\r\n\r\n\r\n\r\n    struct Config{\r\n\r\n        //\u9080\u8bf7\u5956\u52b1\u673a\u5236(\u4e07\u5206\u4f4d)\r\n        uint256 invite;\r\n\r\n        //\u5355\u6570\u9650\u5236\r\n        uint256 number;\r\n\r\n        //KPI\u5355\u6570\u9650\u5236\r\n        uint256 kpiLimit;\r\n\r\n        //\u76f4\u63a8\u5956\u52b1\u673a\u52361\r\n        Mechanism directPush1;\r\n\r\n        //\u76f4\u63a8\u5956\u52b1\u673a\u52362\r\n        Mechanism directPush2;\r\n\r\n        //\u76f4\u63a8\u5956\u52b1\u673a\u52363\r\n        Mechanism directPush3;\r\n\r\n        //KPI\u8003\u68381\r\n        Mechanism kpi1;\r\n\r\n        //KPI\u8003\u68382\r\n        Mechanism kpi2;\r\n\r\n        //KPI\u8003\u68383\r\n        Mechanism kpi3;\r\n\r\n        //KPI\u8003\u68384\r\n        Mechanism kpi4;\r\n    }\r\n\r\n    struct Mechanism{\r\n        //\u6761\u4ef6\r\n        uint256 condition;\r\n\r\n        //\u5956\u52b1\r\n        uint256 award;\r\n    }\r\n\r\n\r\n    struct Plan{\r\n        //usdt \u4ef7\u683c\r\n        uint256 usdtPrice;\r\n\r\n        //token \u4ef7\u683c\r\n        uint256 tokenPrice;\r\n\r\n        //\u989d\u5ea6\u500d\u6570\r\n        uint256 quotaMultiple;\r\n\r\n        //\u65e5\u6536\u76ca\u7387\r\n        uint256 dailyRate;\r\n    }\r\n\r\n    struct PurchaseHistory{\r\n        //usdt \u4ef7\u683c\r\n        uint256 usdtPrice;\r\n\r\n        //token \u4ef7\u683c\r\n        uint256 tokenPrice;\r\n\r\n        //\u989d\u5ea6\u500d\u6570\r\n        uint256 quotaMultiple;\r\n\r\n        //\u65e5\u6536\u76ca\u7387\r\n        uint256 dailyRate;\r\n\r\n        //\u603b\u989d\u5ea6\r\n        uint256 totalAmount;\r\n\r\n        //\u5269\u4f59\u989d\u5ea6\r\n        uint256 remainAmount;\r\n\r\n        //\u8d2d\u4e70\u65f6\u95f4\r\n        uint256 purchaseTime;\r\n    }\r\n\r\n    struct UserInfo{\r\n        address parentAddr;\r\n        uint256 totalAmount;\r\n        uint256 canQuota;\r\n        uint256 checkTotal;\r\n        uint256 checkSalary;\r\n        uint256 checkAward;\r\n        uint256 checkSubsidy;\r\n        uint256 checkKpi;\r\n        uint256 userDirect;\r\n        uint256 number;\r\n    }\r\n\r\n    constructor() Ownable(){\r\n        _bis = Bis(\r\n            0x55d398326f99059fF775485246999027B3197955,\r\n            0x43f5b64b3D1a9275b460480430A027424aa17F8C,\r\n            7500,\r\n            0x143Ba3484FE85A75F3Bca65871d7B717ac9d44bb,\r\n            3000,\r\n            0x6cB2454a8Caa19674Ee696cb67214C24dF6CC892,\r\n            true,\r\n            1000000000000000000\r\n        );\r\n        _config = Config(\r\n            50,\r\n            2,\r\n            10,\r\n            Mechanism(10000000000000000000000,10000000000000000000),\r\n            Mechanism(30000000000000000000000,30000000000000000000),\r\n            Mechanism(50000000000000000000000,600000000000000000000),\r\n            Mechanism(10000000000000000000000,10000000000000000000),\r\n            Mechanism(500000000000000000000000,3),\r\n            Mechanism(1000000000000000000000000,4),\r\n            Mechanism(2000000000000000000000000,5)\r\n        );\r\n        uniswap = IUniswapV2Router02(ROUTER);\r\n        _grantRole(DEFAULT_ADMIN_ROLE, _main);\r\n        initPlan();\r\n        initAllot();\r\n        _transferOwnership(_main);\r\n    }\r\n\r\n    /**\r\n    * type_ 1\uff1aBlind\uff0c2\uff1aMinerals\uff0c3\uff1aReceiveBenefits\uff0c4\uff1aOrderFulfil\r\n    **/\r\n\r\n    //\u63a8\u8350\u5173\u7cfb\u7ed1\u5b9a\r\n    event Blind(uint256 type_,address userAddr,address parentAddr,uint256 time);\r\n\r\n    //\u8d2d\u4e70\u77ff\u4ea7\u3002userAddr\uff1a\u7528\u6237\u5730\u5740\uff1bcanQuota\uff1a\u6fc0\u6d3b\u989d\u5ea6(USDT)\uff1btime\uff1a\u65f6\u95f4\u6233\r\n    event Minerals(uint256 type_,address userAddr,uint256 canQuota,uint256 usdtPrice,uint256 tokenPrice,uint256 time);\r\n\r\n    //\u53d1\u653e\u6536\u76ca\u3002userAddr\uff1a\u7528\u6237\u5730\u5740\uff1breceivequota\uff1a\u9886\u53d6\u6570\u91cf(TOKEN)\uff1breceivequota_usdt\uff1a\u9886\u53d6\u4ef7\u503c(USDT)\uff0ctime\uff1a\u65f6\u95f4\u6233\r\n    event ReceiveBenefits(uint256 type_,address userAddr,uint256 receivequota,uint256 receivequota_usdt,uint256 time);\r\n\r\n    //\u8ba2\u5355\u5b8c\u6210\u3002userAddr\uff1a\u7528\u6237\u5730\u5740\uff0ctime\uff1a\u65f6\u95f4\u6233\r\n    event OrderFulfil(uint256 type_,address userAddr,uint256 usdtPrice,uint256 tokenPrice,uint256 time);\r\n\r\n    event Order(uint256 indexed orderId, uint256 timestamp, uint256 amount);\r\n\r\n    function getTokenPrice() public view returns (uint256 tokenPrice){\r\n        if(_bis.isSwap){\r\n            address[] memory path = new address[](2);\r\n            path[0] = _bis.token;\r\n            path[1] = _bis.usdt;\r\n            tokenPrice = uniswap.getAmountsOut(1000000000000000000,path)[1];\r\n        }else {\r\n            tokenPrice = _bis.tokenPrice;\r\n        }\r\n        \r\n        return tokenPrice;\r\n    }\r\n\r\n    function swapExactTokensForTokens(uint amountIn) public {\r\n        address[] memory path = new address[](2);\r\n        path[0] = _bis.usdt;\r\n        path[1] = _bis.token;\r\n        IERC20(_bis.usdt).approve(ROUTER, amountIn);\r\n        uint deadline = block.timestamp + 300;\r\n        uniswap.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amountIn, \r\n            0, \r\n            path, \r\n            address(this), \r\n            deadline\r\n        );\r\n    }\r\n\r\n    function distributionToken(address userAddr,uint256 tokenPrice) internal{\r\n        uint256 tokenAmount = tokenPrice * (10 ** 18) / getTokenPrice();\r\n        tokenAmount = tokenAmount * _bis.token_re / 10000;\r\n        for(uint i = 0;i < _allots.length;i++){\r\n            Allot memory allot = _allots[i];\r\n            if(allot.re > 0){\r\n                IERC20(_bis.token).transferFrom(userAddr,allot.addr,tokenAmount * allot.re / 10000);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setUserInfo(address prAddr,Plan memory plan,address user) internal returns (uint256){\r\n        //\u4e0a\u7ea7\u76f4\u63a8\u4e1a\u7ee9\u589e\u52a0\r\n        _performance[prAddr][0] += plan.usdtPrice;\r\n        uint256 checkAward = plan.usdtPrice * _config.invite / 10000;\r\n        _check[prAddr][2] += checkAward;\r\n        _check[prAddr][0] += checkAward;\r\n        uint256 checkSubsidy;\r\n        if(_performance[prAddr][0] >= _config.directPush3.condition){\r\n            checkSubsidy = _config.directPush3.award;\r\n        }else if(_performance[prAddr][0] >= _config.directPush2.condition){\r\n            checkSubsidy = _config.directPush2.award;\r\n        }else if(_performance[prAddr][0] >= _config.directPush1.condition){\r\n            checkSubsidy = _config.directPush1.award;\r\n        }\r\n        if(checkSubsidy > _check[prAddr][3]){\r\n            checkSubsidy = checkSubsidy - _check[prAddr][3];\r\n            _check[prAddr][0] += checkSubsidy;\r\n            _check[prAddr][3] += checkSubsidy;\r\n        }\r\n        //2 4 6 8 10\u4ee3\u4e1a\u7ee9\u589e\u52a0\r\n        address daiPrAddr = prAddr;\r\n        for(uint i = 1;i<=10;i++){\r\n            if(i % 2 == 0){\r\n                _performance[daiPrAddr][1] += plan.usdtPrice;\r\n                uint256 checkKpiAward;\r\n                if(_performance[daiPrAddr][1] >= _config.kpi4.condition){\r\n                    checkKpiAward = _config.kpi4.award;\r\n                }else if(_performance[daiPrAddr][1] >= _config.kpi3.condition){\r\n                    checkKpiAward = _config.kpi3.award;\r\n                }else if(_performance[daiPrAddr][1] >= _config.kpi2.condition){\r\n                    checkKpiAward = _config.kpi2.award;\r\n                }else if(_performance[daiPrAddr][1] >= _config.kpi1.condition){\r\n                    checkKpiAward = _config.kpi1.award;\r\n                }\r\n                _userDirect[daiPrAddr][1]++;\r\n                if(_userDirect[daiPrAddr][1] >= _config.kpiLimit){\r\n                    uint256 checkKpi = _performance[daiPrAddr][1] * checkKpiAward / 10000;\r\n                    if(_performance[daiPrAddr][1] < _config.kpi2.condition){\r\n                        if(_check[daiPrAddr][4] == 0){\r\n                            checkKpi = _config.kpi1.award;\r\n                            _check[daiPrAddr][0] += checkKpi;\r\n                            _check[daiPrAddr][4] += checkKpi;\r\n                        }\r\n                    }else {\r\n                        checkKpi = checkKpi - _check[daiPrAddr][4];\r\n                        _check[daiPrAddr][0] += checkKpi;\r\n                        _check[daiPrAddr][4] += checkKpi;\r\n                    }\r\n                    \r\n                }\r\n                \r\n            }\r\n            daiPrAddr = _info[daiPrAddr];\r\n            if(daiPrAddr == address(0)){\r\n                break;\r\n            }\r\n        }\r\n        uint256 quota = plan.usdtPrice * plan.quotaMultiple / 10000;\r\n        _canQuota[user][0] += (quota);\r\n        _canQuota[user][1] += (quota);\r\n        _check[user][1] += (quota * plan.dailyRate / 10000);\r\n        _check[user][0] += (quota * plan.dailyRate / 10000);\r\n        _userDirect[user][0]++;\r\n        PurchaseHistory memory val = PurchaseHistory(plan.usdtPrice,plan.tokenPrice,plan.quotaMultiple,plan.dailyRate,quota,quota,block.timestamp);\r\n        _purchaseHistorys[user].push(val);\r\n        return quota;\r\n    }\r\n\r\n    //\u8d2d\u4e70\uff08\u5ba2\u6237\u7aef\uff09\r\n    function purchaseMinerals(\r\n        uint256 order_nu,\r\n        address prAddr,\r\n        uint256 planId,\r\n        uint256 expired_time\r\n    ) public {\r\n        require(prAddr != address(0),\"1\");\r\n        require(planId < _plans.length,\"2\");\r\n        require(block.timestamp <= expired_time + 60 * 5,\"3\");\r\n        address user = msg.sender;\r\n        require(_userDirect[user][0] <= _config.number,\"4\");\r\n        if(_info[user] == address(0)){\r\n            blind(user,prAddr);\r\n        }\r\n        prAddr = _info[user];\r\n        Plan memory plan = _plans[planId];\r\n        distributionToken(user,plan.tokenPrice);\r\n        IERC20(_bis.usdt).transferFrom(user,address(this),plan.usdtPrice);\r\n        if(_bis.exchange_rate > 0){\r\n            uint256 usdtAmount = plan.usdtPrice * _bis.exchange_rate / 10000;\r\n            swapExactTokensForTokens(usdtAmount);\r\n            IERC20(_bis.usdt).transfer(_bis.collect,plan.usdtPrice - usdtAmount);\r\n        }else {\r\n            IERC20(_bis.usdt).transfer(_bis.collect,plan.usdtPrice);\r\n        }\r\n        uint256 quota = setUserInfo(prAddr,plan,user);\r\n        emit Minerals(2,user,quota,plan.usdtPrice,plan.tokenPrice,block.timestamp);\r\n        emit Order(order_nu, block.timestamp, plan.usdtPrice);\r\n\r\n    }\r\n\r\n    //\u6253\u5361\r\n    function checkinV2(\r\n        address userAddr,\r\n        uint256 tokenPrice\r\n    ) internal {\r\n        require(_canQuota[userAddr][0] > 0,\"Insufficient quota\");\r\n        uint256 checkTotal = _check[userAddr][0];\r\n        if(_canQuota[userAddr][0] <= checkTotal){\r\n            checkTotal = _canQuota[userAddr][0];\r\n        }\r\n        uint256 checkTotalTest = checkTotal;\r\n        PurchaseHistory[] memory userPurs = getAllPurchaseHistory(userAddr);\r\n        for(uint i = 0;i<userPurs.length;i++){\r\n            PurchaseHistory memory pur = userPurs[i];\r\n            if(pur.remainAmount > checkTotal){\r\n                pur.remainAmount -= checkTotalTest;\r\n                _purchaseHistorys[userAddr][i] = pur;\r\n                checkTotalTest = 0;\r\n            }else {\r\n                checkTotalTest -= pur.remainAmount;\r\n                pur.remainAmount = 0;\r\n                _purchaseHistorys[userAddr][i] = pur;\r\n                uint256 checkSalary = pur.totalAmount * pur.dailyRate / 10000;\r\n                _check[userAddr][1] -= checkSalary;\r\n                _check[userAddr][0] -= checkSalary;\r\n                _userDirect[userAddr][0]--;\r\n                //\u4e0a\u7ea7\u76f4\u63a8\u51cf\u5c11\r\n                address prAddr = _info[userAddr];\r\n                _performance[prAddr][0] -= pur.usdtPrice;\r\n                uint256 checkAward = pur.usdtPrice * _config.invite / 10000;\r\n                _check[prAddr][2] -= checkAward;\r\n                _check[prAddr][0] -= checkAward;\r\n                uint256 checkSubsidy;\r\n                if(_performance[prAddr][0] >= _config.directPush3.condition){\r\n                    checkSubsidy = _config.directPush3.award;\r\n                }else if(_performance[prAddr][0] >= _config.directPush2.condition){\r\n                    checkSubsidy = _config.directPush2.award;\r\n                }else if(_performance[prAddr][0] >= _config.directPush1.condition){\r\n                    checkSubsidy = _config.directPush1.award;\r\n                }\r\n                if(_check[prAddr][3] > checkSubsidy){\r\n                    checkSubsidy = _check[prAddr][3] - checkSubsidy;\r\n                    _check[prAddr][0] -= checkSubsidy;\r\n                    _check[prAddr][3] -= checkSubsidy;\r\n                }\r\n\r\n                //2 4 6 8 10\u4ee3\u4e1a\u7ee9\u589e\u52a0\r\n                address daiPrAddr = prAddr;\r\n                for(uint j = 1;j<=10;j++){\r\n                    if(j % 2 == 0){\r\n                        _performance[daiPrAddr][1] -= pur.usdtPrice;\r\n                        uint256 checkKpiAward;\r\n                        if(_performance[daiPrAddr][1] >= _config.kpi4.condition){\r\n                            checkKpiAward = _config.kpi4.award;\r\n                        }else if(_performance[daiPrAddr][1] >= _config.kpi3.condition){\r\n                            checkKpiAward = _config.kpi3.award;\r\n                        }else if(_performance[daiPrAddr][1] >= _config.kpi2.condition){\r\n                            checkKpiAward = _config.kpi2.award;\r\n                        }else if(_performance[daiPrAddr][1] >= _config.kpi1.condition){\r\n                            checkKpiAward = _config.kpi1.award;\r\n                        }\r\n                        _userDirect[daiPrAddr][1]--;\r\n                        if(_userDirect[daiPrAddr][1] >= _config.kpiLimit){\r\n                            uint256 checkKpi = _performance[daiPrAddr][1] * checkKpiAward / 10000;\r\n                            if(_performance[daiPrAddr][1] < _config.kpi1.condition){\r\n                                if(_check[daiPrAddr][4] > 0){\r\n                                    _check[daiPrAddr][0] -= _check[daiPrAddr][4];\r\n                                    _check[daiPrAddr][4] = 0;\r\n                                }\r\n                                \r\n                            }else {\r\n                                checkKpi = _check[daiPrAddr][4] - checkKpi;\r\n                                _check[daiPrAddr][0] -= checkKpi;\r\n                                _check[daiPrAddr][4] -= checkKpi;\r\n                            }\r\n                        }else {\r\n                            _check[daiPrAddr][0] -= _check[daiPrAddr][4];\r\n                            _check[daiPrAddr][4] = 0;\r\n                        }\r\n                        \r\n                    }\r\n                    daiPrAddr = _info[daiPrAddr];\r\n                    if(daiPrAddr == address(0)){\r\n                        break;\r\n                    }\r\n                }\r\n                _canQuota[userAddr][1] = trySub(_canQuota[userAddr][1],pur.totalAmount);\r\n                emit OrderFulfil(4,userAddr,pur.usdtPrice,pur.tokenPrice,block.timestamp);\r\n            }\r\n            if(checkTotalTest == 0){\r\n                break;\r\n            }\r\n        }\r\n        userPurs = getAllPurchaseHistory(userAddr);\r\n        for(uint i = 0;i<userPurs.length;i++){\r\n            PurchaseHistory memory pur = userPurs[i];\r\n            if(pur.remainAmount == 0){\r\n                removePurchaseHistorysV2(userAddr,i);\r\n                break;\r\n            }\r\n        }\r\n\r\n        uint256 tokenAmount = tryDiv(checkTotal * 10**18,tokenPrice);\r\n        _canQuota[userAddr][0] = trySub(_canQuota[userAddr][0],checkTotal);\r\n\r\n        receiveBenefits(userAddr,tokenAmount,checkTotal);\r\n        \r\n    }\r\n\r\n    //\u6279\u91cf\u53d1\u5956\uff08\u670d\u52a1\u7aef\uff09\r\n    function batchCheckin(\r\n        address[] memory userAddrs\r\n    ) public onlyRole(DEFAULT_ADMIN_ROLE){\r\n        //\u83b7\u53d6token\u4ef7\u683c\r\n        uint256 tokenPrice = getTokenPrice();\r\n        for(uint256 i = 0;i < userAddrs.length;i++){\r\n            checkinV2(userAddrs[i],tokenPrice);\r\n        }\r\n    }\r\n\r\n    //\u9886\u53d6\u6536\u76ca\r\n    function receiveBenefits(address userAddr,uint256 receivequota,uint256 receivequota_usdt) internal {\r\n        IERC20(_bis.token).transfer(userAddr,receivequota);\r\n        emit ReceiveBenefits(3,userAddr,receivequota,receivequota_usdt,block.timestamp);\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        unchecked {\r\n            if (b > a) return 0;\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        unchecked {\r\n            if (b == 0 || b > a) return 0;\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    //\u7ed1\u5b9a\u9080\u8bf7\r\n    function blind(address userAddr,address parentAddr) internal {\r\n        require(parentAddr != address(0), \"1\"); // \u4e0d\u5141\u8bb8\u4e0a\u7ea7\u5730\u5740\u4e3a0\u5730\u5740\r\n        require(parentAddr != userAddr, \"2\");// \u4e0d\u5141\u8bb8\u81ea\u5df1\u7684\u4e0a\u7ea7\u662f\u81ea\u5df1\r\n        // \u9a8c\u8bc1\u8981\u7ed1\u5b9a\u7684\u4e0a\u7ea7\u662f\u5426\u6709\u4e0a\u7ea7\uff0c\u53ea\u6709\u6709\u4e0a\u7ea7\u7684\u7528\u6237\uff0c\u624d\u80fd\u88ab\u7ed1\u5b9a\u4e3a\u4e0a\u7ea7\uff08firstAddress\u9664\u5916\uff09\u3002\u5982\u679c\u6ca1\u6709\u6b64\u9a8c\u8bc1\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u968f\u610f\u62ff\u4e00\u4e2a\u5730\u5740\u7ed1\u5b9a\u6210\u4e0a\u7ea7\u4e86\r\n        require(_info[parentAddr] != address(0) || parentAddr == _bis.initial, \"3\");\r\n        require(_info[userAddr] == address(0), \"4\");\r\n        _info[userAddr] = parentAddr;\r\n        emit Blind(1,userAddr,parentAddr,block.timestamp);\r\n    }\r\n\r\n    function getUserInfo(address userAddr) public view returns (UserInfo memory userInfo){\r\n        return UserInfo(_info[userAddr],_canQuota[userAddr][1],_canQuota[userAddr][0],_check[userAddr][0],_check[userAddr][1],_check[userAddr][2],_check[userAddr][3],_check[userAddr][4],_userDirect[userAddr][0],_config.number);\r\n    }\r\n\r\n    function extractToken(uint256 tokenAmount) public onlyOwner{\r\n        IERC20(_bis.token).transfer(_bis.collect,tokenAmount);\r\n    }\r\n\r\n    function extractUsdt(uint256 usdtAmount) public onlyOwner{\r\n        IERC20(_bis.usdt).transfer(_bis.collect,usdtAmount);\r\n    }\r\n\r\n    function setInfo(address userAddr,address parentAddr) public onlyRole(DEFAULT_ADMIN_ROLE){\r\n        _info[userAddr] = parentAddr;\r\n    }\r\n    \r\n\r\n    function setCanQuota(address userAddr,uint256 canQuota,uint256 totalQuota) public onlyRole(DEFAULT_ADMIN_ROLE){\r\n        _canQuota[userAddr][0] = canQuota;\r\n        _canQuota[userAddr][1] = totalQuota;\r\n    }\r\n\r\n    function setPerformance(address userAddr,uint256 performance,uint256 totalPerformance) public onlyRole(DEFAULT_ADMIN_ROLE){\r\n        _performance[userAddr][0] = performance;\r\n        _performance[userAddr][1] = totalPerformance;\r\n    }\r\n\r\n    function setCheck(\r\n        address userAddr,\r\n        uint256 checkTotal,\r\n        uint256 checkSalary,\r\n        uint256 checkAward,\r\n        uint256 checkSubsidy,\r\n        uint256 checkKpi) public onlyRole(DEFAULT_ADMIN_ROLE){\r\n        _check[userAddr][0] = checkTotal;\r\n        _check[userAddr][1] = checkSalary;\r\n        _check[userAddr][2] = checkAward;\r\n        _check[userAddr][3] = checkSubsidy;\r\n        _check[userAddr][4] = checkKpi;\r\n    }\r\n\r\n    function setUserDirect(address userAddr,uint256[2] memory userDirect) public onlyRole(DEFAULT_ADMIN_ROLE){\r\n        _userDirect[userAddr] = userDirect;\r\n    }\r\n\r\n    function getDirectPush() public view returns (Mechanism[3] memory){\r\n        Mechanism[3] memory directPush;\r\n        directPush[0] = _config.directPush1;\r\n        directPush[1] = _config.directPush2;\r\n        directPush[2] = _config.directPush3;\r\n        return directPush;\r\n    }\r\n\r\n    function setDirectPush(Mechanism memory directPush,uint256 val) public onlyOwner{\r\n        if(val == 0){\r\n            _config.directPush1 = directPush;\r\n        }else if(val == 1){\r\n            _config.directPush2 = directPush;\r\n        }else if(val == 2){\r\n            _config.directPush3 = directPush;\r\n        }\r\n    }\r\n\r\n    function getKpi() public view returns (Mechanism[4] memory){\r\n        Mechanism[4] memory kpi;\r\n        kpi[0] = _config.kpi1;\r\n        kpi[1] = _config.kpi2;\r\n        kpi[2] = _config.kpi3;\r\n        kpi[3] = _config.kpi4;\r\n        return kpi;\r\n    }\r\n\r\n    function setKpi(Mechanism memory kpi,uint256 val) public onlyOwner{\r\n        if(val == 0){\r\n            _config.kpi1 = kpi;\r\n        }else if(val == 1){\r\n            _config.kpi2 = kpi;\r\n        }else if(val == 2){\r\n            _config.kpi3 = kpi;\r\n        }else if(val == 3){\r\n            _config.kpi4 = kpi;\r\n        }\r\n    }\r\n\r\n\r\n    function getAllPlan() public view returns (Plan[] memory){\r\n        return _plans;\r\n    }\r\n\r\n    function addPlan(Plan memory plan) public onlyOwner{\r\n        _plans.push(plan);\r\n    }\r\n\r\n    function removePlan(uint256 val) public onlyOwner{\r\n        bool flang = false;\r\n        for(uint256 i = 0;i<_plans.length;i++){\r\n            if(i == val){\r\n                flang = true;\r\n            }\r\n            if(flang && i < _plans.length - 1){\r\n                _plans[i] = _plans[i + 1];\r\n            }\r\n        }\r\n        if(flang){\r\n            _plans.pop();\r\n        }\r\n    }\r\n\r\n    function initPlan() public onlyOwner{\r\n        Plan memory plan1 = Plan(1000000000000000000000,100000000000000000000,20000,100);\r\n        _plans.push(plan1);\r\n    }\r\n\r\n    function setInitial(address initial) public onlyOwner{\r\n        _bis.initial = initial;\r\n    }\r\n\r\n    function setBis(Bis memory bis) public onlyOwner{\r\n        _bis = bis;\r\n    }\r\n\r\n    function setConfig(Config memory config) public onlyOwner{\r\n        _config = config;\r\n    }\r\n\r\n    function setPlan(Plan memory plan,uint256 val) public onlyOwner{\r\n        _plans[val] = plan;\r\n    }\r\n\r\n    function getAllPurchaseHistory(address userAddr) public view returns (PurchaseHistory[] memory){\r\n        return _purchaseHistorys[userAddr];\r\n    }\r\n    \r\n    function addPurchaseHistorys(PurchaseHistory memory val,address userAddr) public onlyOwner{\r\n        _purchaseHistorys[userAddr].push(val);\r\n    }\r\n\r\n    function setPurchaseHistorys(PurchaseHistory memory val,address userAddr,uint256 sub) public onlyOwner{\r\n        _purchaseHistorys[userAddr][sub] = val;\r\n    }\r\n\r\n    function removePurchaseHistorysV2(address userAddr,uint256 sub) internal{\r\n        bool flang = false;\r\n        for(uint256 i = 0;i<_purchaseHistorys[userAddr].length;i++){\r\n            if(i == sub){\r\n                flang = true;\r\n            }\r\n            if(flang && i < _purchaseHistorys[userAddr].length - 1){\r\n                _purchaseHistorys[userAddr][i] = _purchaseHistorys[userAddr][i + 1];\r\n            }\r\n        }\r\n        if(flang){\r\n            _purchaseHistorys[userAddr].pop();\r\n        }\r\n    }\r\n\r\n    function removePurchaseHistorys(address userAddr,uint256 sub) public onlyOwner{\r\n        removePurchaseHistorysV2(userAddr,sub);\r\n    }\r\n\r\n    function getAllAllot() public view returns (Allot[] memory){\r\n        return _allots;\r\n    }\r\n\r\n    function addAllot(Allot memory val) public onlyOwner{\r\n        _allots.push(val);\r\n    }\r\n\r\n\r\n    function setAllot(Allot memory allot,uint256 val) public onlyOwner{\r\n        _allots[val] = allot;\r\n    }\r\n\r\n    function removeAllot(uint256 sub) public onlyOwner{\r\n        bool flang = false;\r\n        for(uint256 i = 0;i<_allots.length;i++){\r\n            if(i == sub){\r\n                flang = true;\r\n            }\r\n            if(flang && i < _allots.length - 1){\r\n                _allots[i] = _allots[i + 1];\r\n            }\r\n        }\r\n        if(flang){\r\n            _allots.pop();\r\n        }\r\n    }\r\n\r\n    function initAllot() public onlyOwner{\r\n        Allot memory allot1 = Allot(0xa507EDaD7db6Dca8E9E5d2dA9C0637AA07556666,4000);\r\n        Allot memory allot2 = Allot(0x9eBa136e999DCCDeaac450b822c1E3c7cAd8521c,1500);\r\n        Allot memory allot3 = Allot(0xd32D6388357c3051511fA22022B6FB3852792bc0,1500);\r\n        Allot memory allot4 = Allot(0xdE5E2E13A0eE6db4Cc59923932fB21bf0DC274B7,3000);\r\n        _allots.push(allot1);\r\n        _allots.push(allot2);\r\n        _allots.push(allot3);\r\n        _allots.push(allot4);\r\n    }\r\n\r\n    \r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"type_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"parentAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Blind\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"type_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"canQuota\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Minerals\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Order\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"type_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OrderFulfil\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"type_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivequota\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivequota_usdt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ReceiveBenefits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_allots\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"re\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_bis\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token_re\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initial\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exchange_rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collect\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSwap\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_canQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_check\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"invite\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kpiLimit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"condition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"award\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Mechanism\",\"name\":\"directPush1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"condition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"award\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Mechanism\",\"name\":\"directPush2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"condition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"award\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Mechanism\",\"name\":\"directPush3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"condition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"award\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Mechanism\",\"name\":\"kpi1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"condition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"award\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Mechanism\",\"name\":\"kpi2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"condition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"award\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Mechanism\",\"name\":\"kpi3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"condition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"award\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Mechanism\",\"name\":\"kpi4\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_performance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_plans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quotaMultiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_purchaseHistorys\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quotaMultiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_userDirect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"re\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Allot\",\"name\":\"val\",\"type\":\"tuple\"}],\"name\":\"addAllot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"usdtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quotaMultiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyRate\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Plan\",\"name\":\"plan\",\"type\":\"tuple\"}],\"name\":\"addPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"usdtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quotaMultiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTime\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.PurchaseHistory\",\"name\":\"val\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"addPurchaseHistorys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddrs\",\"type\":\"address[]\"}],\"name\":\"batchCheckin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"extractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"extractUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAllot\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"re\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Allot[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPlan\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"usdtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quotaMultiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyRate\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Plan[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getAllPurchaseHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"usdtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quotaMultiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTime\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.PurchaseHistory[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDirectPush\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"condition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"award\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Mechanism[3]\",\"name\":\"\",\"type\":\"tuple[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKpi\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"condition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"award\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Mechanism[4]\",\"name\":\"\",\"type\":\"tuple[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"parentAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canQuota\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkSalary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkAward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkSubsidy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkKpi\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDirect\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.UserInfo\",\"name\":\"userInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initAllot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"order_nu\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"prAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"planId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expired_time\",\"type\":\"uint256\"}],\"name\":\"purchaseMinerals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"name\":\"removeAllot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"removePlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"name\":\"removePurchaseHistorys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"re\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Allot\",\"name\":\"allot\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setAllot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token_re\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initial\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exchange_rate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collect\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSwap\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Bis\",\"name\":\"bis\",\"type\":\"tuple\"}],\"name\":\"setBis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"canQuota\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalQuota\",\"type\":\"uint256\"}],\"name\":\"setCanQuota\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"checkTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkSalary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkAward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkSubsidy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkKpi\",\"type\":\"uint256\"}],\"name\":\"setCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"invite\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kpiLimit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"condition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"award\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Mechanism\",\"name\":\"directPush1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"condition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"award\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Mechanism\",\"name\":\"directPush2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"condition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"award\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Mechanism\",\"name\":\"directPush3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"condition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"award\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Mechanism\",\"name\":\"kpi1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"condition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"award\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Mechanism\",\"name\":\"kpi2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"condition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"award\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Mechanism\",\"name\":\"kpi3\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"condition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"award\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Mechanism\",\"name\":\"kpi4\",\"type\":\"tuple\"}],\"internalType\":\"struct MinpitKyushuB3.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"condition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"award\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Mechanism\",\"name\":\"directPush\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setDirectPush\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"parentAddr\",\"type\":\"address\"}],\"name\":\"setInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initial\",\"type\":\"address\"}],\"name\":\"setInitial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"condition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"award\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Mechanism\",\"name\":\"kpi\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setKpi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"performance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPerformance\",\"type\":\"uint256\"}],\"name\":\"setPerformance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"usdtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quotaMultiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyRate\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.Plan\",\"name\":\"plan\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"usdtPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quotaMultiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dailyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseTime\",\"type\":\"uint256\"}],\"internalType\":\"struct MinpitKyushuB3.PurchaseHistory\",\"name\":\"val\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"name\":\"setPurchaseHistorys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256[2]\",\"name\":\"userDirect\",\"type\":\"uint256[2]\"}],\"name\":\"setUserDirect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MinpitKyushuB3", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0ddc8cdc0deca387f339f93e96a8b183a7c9538d6cc8c3566b676d7b7e1e36ab"}