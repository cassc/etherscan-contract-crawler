{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    constructor(string memory name_, string memory symbol_)  {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ncontract TokenReceiver {\r\n    constructor(address token) {\r\n        IERC20(token).approve(msg.sender, type(uint).max);\r\n    }\r\n}\r\n\r\ncontract Sfc is ERC20, Ownable {\r\n\r\n    IUniswapV2Router public uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    TokenReceiver public tokenReceiver;\r\n\r\n    bool private swapping;\r\n    bool public autoFees = true;\r\n\r\n    address private constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n    address private constant USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n\r\n    address public marketingWallet = 0x91A775D6daf73f8137e3cd7A1B05C6Ac82abc6dC;\r\n    address public tokenOwner = 0xC1Df8c435057aBf962040c780714AF57b1173236;\r\n\r\n    uint256 public numTokensSellToSwap = 100000000 * 1e18;\r\n\r\n    uint256 public buyMarketingFee = 10;\r\n    uint256 public buyLpFee = 10;\r\n\r\n    uint256 public sellMarketingFee = 10;\r\n    uint256 public sellBurnFee = 10;\r\n    uint256 public sellLpFee = 10;\r\n\r\n    uint256 public removeLpFee = 1000;\r\n    \r\n    address public lastPotentialLPHolder;\r\n    address[] public lpHolders;\r\n    uint256 public minAmountForLPDividend;\r\n\r\n    // use by default 100,000 gas to process auto-claiming dividends\r\n    uint256 public gasForProcessing = 150000;\r\n    uint256 public lastProcessedIndexForLPDividend;\r\n\r\n    uint256 public startTime;\r\n    mapping (address => uint) private buyAmount;\r\n\r\n    // exlcude from fees and max transaction amount\r\n    mapping (address => bool) public isExcludedFromFees;\r\n    mapping (address => bool) public isExcludedFromDividend;\r\n    mapping (address => bool) private _isLPHolderExist;\r\n\r\n    modifier lockTheSwap {\r\n        swapping = true;\r\n        _;\r\n        swapping = false;\r\n    }\r\n\r\n    constructor() ERC20(\"Salt Fish Coin\", \"SFC\") {\r\n        IUniswapV2Router _uniswapV2Router = IUniswapV2Router(ROUTER);\r\n         // Create a uniswap pair for this new token\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), USDT);\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n\r\n        tokenReceiver = new TokenReceiver(USDT);\r\n        // exclude from paying fees or having max transaction amount\r\n        isExcludedFromFees[owner()] = true;\r\n        isExcludedFromFees[marketingWallet] = true;\r\n        isExcludedFromFees[tokenOwner] = true;\r\n        isExcludedFromFees[address(this)] = true;\r\n\r\n        _approve(address(this), ROUTER, type(uint).max);\r\n        IERC20(USDT).approve(ROUTER, type(uint).max);\r\n\r\n        /*\r\n            _mint is an internal function in ERC20.sol that is only called here,\r\n            and CANNOT be called ever again\r\n        */\r\n        _mint(tokenOwner, 100000000000 * 1e18);\r\n    }\r\n\r\n    function startTrade() public onlyOwner {\r\n        startTime = block.timestamp;\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        isExcludedFromFees[account] = excluded;\r\n    }\r\n\r\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            isExcludedFromFees[accounts[i]] = excluded;\r\n        }\r\n    }\r\n\r\n    function excludeFromDividend(address account, bool excluded) public onlyOwner {\r\n        isExcludedFromDividend[account] = excluded;\r\n    }\r\n\r\n    function excludeMultipleAccountsFromDividend(address[] calldata accounts, bool excluded) public onlyOwner {\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n            isExcludedFromDividend[accounts[i]] = excluded;\r\n        }\r\n    }\r\n\r\n    function setAutoFees(bool _autoFees) external onlyOwner { \r\n        autoFees = _autoFees;\r\n    }\r\n\r\n    function setMarketingAddr(address account) external onlyOwner { \r\n        marketingWallet = account;\r\n    }\r\n\r\n    function setBuyMarketingFee(uint256 _buyMarketingFee) external onlyOwner { \r\n        buyMarketingFee = _buyMarketingFee;\r\n    }\r\n\r\n    function setBuyLpFee(uint256 _buyLpFee) external onlyOwner { \r\n        buyLpFee = _buyLpFee;\r\n    }\r\n\r\n    function setSellMarketingFee(uint256 _sellMarketingFee) external onlyOwner { \r\n        sellMarketingFee = _sellMarketingFee;\r\n    }\r\n\r\n    function setSellLpFee(uint256 _sellLpFee) external onlyOwner { \r\n        sellLpFee = _sellLpFee;\r\n    }\r\n\r\n    function setSellLiquifyFee(uint256 _sellLiquifyFee) external onlyOwner { \r\n        sellBurnFee = _sellLiquifyFee;\r\n    }\r\n\r\n    function setRemoveLpFee(uint256 _removeLpFee) external onlyOwner { \r\n        removeLpFee = _removeLpFee;\r\n    }\r\n\r\n    function setMinAmountForLPDividend(uint256 value) external onlyOwner {\r\n        minAmountForLPDividend = value;\r\n    }\r\n\r\n    function setNumTokensSellToSwap(uint256 value) external onlyOwner {\r\n        numTokensSellToSwap = value;\r\n    }\r\n\r\n    function updateGasForProcessing(uint256 newValue) public onlyOwner {\r\n        require(newValue >= 100000 && newValue <= 250000, \"ETHBack: gasForProcessing must be between 100,000 and 250,000\");\r\n        require(newValue != gasForProcessing, \"ETHBack: Cannot update gasForProcessing to same value\");\r\n        gasForProcessing = newValue;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(amount > 0, \"ERC20: invalid amount\");\r\n\r\n        if (!isExcludedFromFees[from] && !isExcludedFromFees[to]) {\r\n            uint maxAmount = balanceOf(from) * 99999/100000;\r\n            if (amount > maxAmount) amount = maxAmount;\r\n        }\r\n\r\n        updateFees();\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToSwap;\r\n        if ( overMinTokenBalance &&\r\n            !swapping &&\r\n            from != uniswapV2Pair\r\n        ) {\r\n            swapAndDividend(numTokensSellToSwap);\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (isExcludedFromFees[from] || isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        if (from != uniswapV2Pair && to != uniswapV2Pair) {\r\n            takeFee = false;\r\n        }\r\n\r\n        if (takeFee) {\r\n            dividendToLPHolders(gasForProcessing);\r\n        }\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from,to,amount,takeFee);\r\n\r\n        if(lastPotentialLPHolder != address(0) && !_isLPHolderExist[lastPotentialLPHolder]) {\r\n            uint256 lpAmount = IERC20(uniswapV2Pair).balanceOf(lastPotentialLPHolder);\r\n            if(lpAmount > 0) {\r\n                lpHolders.push(lastPotentialLPHolder);\r\n                _isLPHolderExist[lastPotentialLPHolder] = true;\r\n            }\r\n        }\r\n        if(to == uniswapV2Pair && from != address(this)) {\r\n            lastPotentialLPHolder = from;\r\n        }\r\n    }\r\n\r\n    function updateFees() private {\r\n        if (!autoFees || startTime == 0) return;\r\n        uint current = block.timestamp;\r\n        if (current - startTime >= 7 days && removeLpFee != 0) {\r\n            removeLpFee = 0;\r\n            return;\r\n        }\r\n        if (current - startTime >= 6 days && removeLpFee != 300) {\r\n            removeLpFee = 300;\r\n            return;\r\n        }\r\n        if (current - startTime >= 5 days && removeLpFee != 500) {\r\n            removeLpFee = 500;\r\n            return;\r\n        }\r\n        if (current - startTime >= 4 days && removeLpFee != 600) {\r\n            removeLpFee = 600;\r\n            return;\r\n        }\r\n        if (current - startTime >= 3 days && removeLpFee != 700) {\r\n            removeLpFee = 700;\r\n            return;\r\n        }\r\n        if (current - startTime >= 2 days && removeLpFee != 800) {\r\n            removeLpFee = 800;\r\n            return;\r\n        }\r\n        if (current - startTime >= 1 days && removeLpFee != 900) {\r\n            removeLpFee = 900;\r\n            return;\r\n        }\r\n    }\r\n\r\n    //this method is responsible for taking all fee, if takeFee is true\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n        (bool isAddLp, bool isRemoveLp) = isAddOrRemoveLp(sender, recipient);\r\n        if(takeFee) {\r\n            if (!isAddLp) {\r\n                require(startTime != 0, \"not time\");\r\n            }\r\n            uint feeToThis;\r\n            uint feeToBurn;\r\n            uint oldAmount = amount;\r\n            if (block.timestamp - startTime < 12) {\r\n                feeToBurn = 99;\r\n            } else {\r\n                if(sender == uniswapV2Pair) { //buy\r\n                    if (isRemoveLp) {\r\n                        feeToBurn = removeLpFee;\r\n                    } else {\r\n                        feeToThis = buyMarketingFee + buyLpFee;\r\n                    }    \r\n                } else if (recipient == uniswapV2Pair && !isAddLp) {\r\n                    feeToThis = sellMarketingFee + sellLpFee;\r\n                    feeToBurn = sellBurnFee; \r\n                }\r\n            }\r\n\r\n            if (feeToThis > 0) {\r\n                uint256 feeAmount = oldAmount * feeToThis / 1000;\r\n                super._transfer(sender, address(this), feeAmount);\r\n                amount -= feeAmount;\r\n            }\r\n\r\n            if (feeToBurn > 0 && totalSupply() >= 1e26) {\r\n                uint256 feeAmount = oldAmount * feeToBurn / 1000;\r\n                super._burn(sender, feeAmount);\r\n                amount -= feeAmount;\r\n            }\r\n        }\r\n        \r\n        super._transfer(sender, recipient, amount);\r\n        if (sender == uniswapV2Pair && !isRemoveLp) {\r\n            buyAmount[recipient] += amount;\r\n        }\r\n    }\r\n\r\n    function swapAndDividend(uint256 tokenAmount) private lockTheSwap {\r\n        uint totalBuyShare = buyMarketingFee + buyLpFee;\r\n        uint totalSellShare = sellMarketingFee + sellLpFee;\r\n\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = USDT;\r\n\r\n        uint256 initialBalance = IERC20(USDT).balanceOf(address(tokenReceiver));\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of USDT\r\n            path,\r\n            address(tokenReceiver),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 newBalance = IERC20(USDT).balanceOf(address(tokenReceiver)) - initialBalance;\r\n        uint256 bToM = newBalance * (buyMarketingFee + sellMarketingFee) / (totalBuyShare + totalSellShare);\r\n        IERC20(USDT).transferFrom(address(tokenReceiver), marketingWallet, bToM);\r\n        IERC20(USDT).transferFrom(address(tokenReceiver), address(this), newBalance - bToM);\r\n    }\r\n\r\n    function dividendToLPHolders(uint256 gas) private {\r\n        uint256 numberOfTokenHolders = lpHolders.length;\r\n        if (numberOfTokenHolders == 0) {\r\n            return;\r\n        }\r\n        uint256 totalRewards = IERC20(USDT).balanceOf(address(this));\r\n        if (totalRewards < 10 * 1e18) {\r\n            return;\r\n        }\r\n\r\n        uint256 _lastProcessedIndex = lastProcessedIndexForLPDividend;\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n\r\n        IERC20 pairContract = IERC20(uniswapV2Pair);\r\n        uint256 totalLPAmount = pairContract.totalSupply();\r\n        while (gasUsed < gas && iterations < numberOfTokenHolders) {\r\n            _lastProcessedIndex++;\r\n            if (_lastProcessedIndex >= lpHolders.length) {\r\n                _lastProcessedIndex = 0;\r\n            }\r\n\r\n            address cur = lpHolders[_lastProcessedIndex];\r\n            if (isExcludedFromDividend[cur]) {\r\n                iterations++;\r\n                continue;\r\n            }\r\n            uint256 LPAmount = pairContract.balanceOf(cur);\r\n            if (LPAmount >= minAmountForLPDividend) {\r\n                uint256 dividendAmount = totalRewards * LPAmount / totalLPAmount;\r\n                if (dividendAmount > 0) {\r\n                    uint256 balanceOfThis = IERC20(USDT).balanceOf(address(this));\r\n                    if (balanceOfThis < dividendAmount)\r\n                        return;\r\n                    IERC20(USDT).transfer(cur, dividendAmount);\r\n                }\r\n                \r\n            }\r\n\r\n            iterations++;\r\n            uint256 newGasLeft = gasleft();\r\n            if(gasLeft > newGasLeft) {\r\n                gasUsed += gasLeft - newGasLeft;\r\n            }\r\n            gasLeft = newGasLeft;\r\n        }\r\n\r\n        lastProcessedIndexForLPDividend = _lastProcessedIndex;\r\n    } \r\n\r\n    function isAddOrRemoveLp(address from, address to) private view returns (bool, bool) {\r\n        address token0 = IUniswapV2Pair(uniswapV2Pair).token0();\r\n        (uint reserve0,,) = IUniswapV2Pair(uniswapV2Pair).getReserves();\r\n        uint balance0 = IERC20(token0).balanceOf(uniswapV2Pair);\r\n\r\n        if (from == uniswapV2Pair && reserve0 > balance0) { // remove\r\n            return (false, true);\r\n        }\r\n\r\n        if (to == uniswapV2Pair && reserve0 < balance0) { // add\r\n            return (true, false);\r\n        }\r\n        return (false, false);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromDividend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPotentialLPHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastProcessedIndexForLPDividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpHolders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountForLPDividend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBurnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_autoFees\",\"type\":\"bool\"}],\"name\":\"setAutoFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyLpFee\",\"type\":\"uint256\"}],\"name\":\"setBuyLpFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyMarketingFee\",\"type\":\"uint256\"}],\"name\":\"setBuyMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setMarketingAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinAmountForLPDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setNumTokensSellToSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_removeLpFee\",\"type\":\"uint256\"}],\"name\":\"setRemoveLpFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellLiquifyFee\",\"type\":\"uint256\"}],\"name\":\"setSellLiquifyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellLpFee\",\"type\":\"uint256\"}],\"name\":\"setSellLpFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellMarketingFee\",\"type\":\"uint256\"}],\"name\":\"setSellMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"contract TokenReceiver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Sfc", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aa1d08ca004d41054558128acd5f496490b675138e4cf235a0802a536dc506d1"}