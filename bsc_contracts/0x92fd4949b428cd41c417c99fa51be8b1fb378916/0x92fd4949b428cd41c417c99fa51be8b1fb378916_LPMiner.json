{"SourceCode": "pragma solidity ^0.8.6;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned accountF\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal view returns (bytes memory) {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(\r\n                oldAllowance >= value,\r\n                \"SafeERC20: decreased allowance below zero\"\r\n            );\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(\r\n                token,\r\n                abi.encodeWithSelector(\r\n                    token.approve.selector,\r\n                    spender,\r\n                    newAllowance\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(\r\n        address to\r\n    ) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(\r\n        uint256 amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint256 amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant NOT_ENTERED = 1;\r\n    uint256 private constant ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    /**\r\n     * @dev Unauthorized reentrant call.\r\n     */\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    constructor() {\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\r\n        if (_status == ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == ENTERED;\r\n    }\r\n}\r\n\r\nabstract contract AbsMiner is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct Member {\r\n        address account;\r\n        address sponsor;\r\n        address[] referrals;\r\n        address[] children;\r\n        uint256 totalSwapAndAddLiquidityAmount;\r\n        uint256 pendingRewards;\r\n        uint256 totalRewards;\r\n        uint256 claimRewards;\r\n        uint joinTimestamp;\r\n    }\r\n    mapping(address => Member) public members;\r\n    mapping(address => uint256) public peerIndex;\r\n    mapping(address => address) public inviter;\r\n    mapping(address => uint256) public dayBuyAmountMap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 public lastBonusTimestamp;\r\n    uint256 public withdrawFee = 300;\r\n    uint256 public maxLimits = 5000e18;\r\n    uint public dividendAmount;\r\n\r\n    IERC20 public immutable lp =\r\n        IERC20(0x4bf25B791f825E37f89D76A78523c5d66d8Bc7ED);\r\n    IERC20 public immutable usdt =\r\n        IERC20(0x55d398326f99059fF775485246999027B3197955);\r\n    IERC20 public immutable mainPair =\r\n        IERC20(0xe74E5729329350dF58a3cE7e7997b1728d8FC0b1);\r\n    IUniswapV2Router02 public immutable uniswapV2Router =\r\n        IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n    address[] private peers;\r\n    address[] private dayBuyAddressList;\r\n\r\n    event Join(address indexed user, address indexed sponsor);\r\n    event Deposit(address indexed user, uint256 uAmount);\r\n    event Withdraw(address indexed user, uint256 lpAmount);\r\n    event Claim(address indexed user, uint256 amount);\r\n\r\n    constructor() {\r\n        lp.safeApprove(address(uniswapV2Router), MAX);\r\n        usdt.safeApprove(address(uniswapV2Router), MAX);\r\n        mainPair.safeApprove(address(uniswapV2Router), MAX);\r\n\r\n        lastBonusTimestamp = _bonusTimestamp();\r\n    }\r\n\r\n    function join(address sponsor) external nonReentrant returns (bool) {\r\n        require(sponsor != msg.sender, \"Cannot bind oneself\");\r\n        require(members[sponsor].sponsor != address(0), \"Cannot bind oneself\");\r\n        require(members[msg.sender].sponsor == address(0), \"Already a member\");\r\n\r\n        inviter[msg.sender] = sponsor;\r\n        members[sponsor].children.push(msg.sender);\r\n        if (members[sponsor].referrals.length < 2) {\r\n            members[sponsor].referrals.push(msg.sender);\r\n        } else {\r\n            address newSponsor = _findNextAvailableSponsor(sponsor);\r\n            members[newSponsor].referrals.push(msg.sender);\r\n            sponsor = newSponsor;\r\n        }\r\n        members[msg.sender].account = msg.sender;\r\n        members[msg.sender].sponsor = sponsor;\r\n        members[msg.sender].joinTimestamp = block.timestamp;\r\n        emit Join(msg.sender, sponsor);\r\n        return true;\r\n    }\r\n\r\n    function _getNonChild(address parent) internal view returns (address) {\r\n        for (uint i = 0; i < members[parent].referrals.length; i++) {\r\n            address referral = members[parent].referrals[i];\r\n            if (members[referral].referrals.length < 2) {\r\n                return referral;\r\n            }\r\n        }\r\n        return address(0);\r\n    }\r\n\r\n    function _findNextAvailableSponsor(\r\n        address sponsor\r\n    ) internal returns (address) {\r\n        address target;\r\n        target = _getNonChild(sponsor);\r\n        if (target != address(0)) {\r\n            return target;\r\n        }\r\n        for (uint i = 0; i < members[sponsor].referrals.length; i++) {\r\n            target = _getNonChild(members[sponsor].referrals[i]);\r\n            if (target != address(0)) {\r\n                return target;\r\n            }\r\n        }\r\n        return _findNextAvailableSponsor(members[sponsor].referrals[0]);\r\n    }\r\n\r\n    function getSponsorSize(address sponsor) public view returns (uint256) {\r\n        uint256 size = members[sponsor].referrals.length;\r\n        for (uint256 i = 0; i < members[sponsor].referrals.length; i++) {\r\n            size += getSponsorSize(members[sponsor].referrals[i]);\r\n        }\r\n        return size;\r\n    }\r\n\r\n    function getReferrals(\r\n        address sponsor\r\n    ) external view returns (Member[] memory) {\r\n        uint count = members[sponsor].referrals.length;\r\n        Member[] memory res = new Member[](count);\r\n        for (uint i = 0; i < count; i++) {\r\n            address referral = members[sponsor].referrals[i];\r\n            res[i] = members[referral];\r\n        }\r\n        return res;\r\n    }\r\n\r\n    function getChildrens(\r\n        address sponsor\r\n    ) external view returns (Member[] memory) {\r\n        uint count = members[sponsor].children.length;\r\n        Member[] memory res = new Member[](count);\r\n        for (uint i = 0; i < count; i++) {\r\n            address child = members[sponsor].children[i];\r\n            res[i] = members[child];\r\n        }\r\n        return res;\r\n    }\r\n\r\n    function getPeers() external view returns (address[] memory) {\r\n        return peers;\r\n    }\r\n\r\n    function addPeers(\r\n        address[] memory accounts\r\n    ) external onlyOwner returns (bool) {\r\n        uint256 len = accounts.length;\r\n        for (uint256 i; i < len; ) {\r\n            _addPeer(accounts[i]);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _addPeer(address adr) internal {\r\n        if (0 == peerIndex[adr]) {\r\n            if (0 == peers.length || peers[0] != adr) {\r\n                uint256 size;\r\n                assembly {\r\n                    size := extcodesize(adr)\r\n                }\r\n                if (size > 0) {\r\n                    return;\r\n                }\r\n                peerIndex[adr] = peers.length;\r\n                peers.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    function removePeer(address adr) external onlyOwner returns (bool) {\r\n        peers[peerIndex[adr]] = peers[peers.length - 1];\r\n        peerIndex[peers[peers.length - 1]] = peerIndex[adr];\r\n        peers.pop();\r\n        return true;\r\n    }\r\n\r\n    function claimPendingRewards() external nonReentrant returns (bool) {\r\n        Member storage member = members[msg.sender];\r\n        uint256 reward = member.pendingRewards;\r\n        require(reward > 0, \"No pending rewards\");\r\n        member.pendingRewards = 0;\r\n        member.claimRewards += reward;\r\n        mainPair.safeTransfer(msg.sender, reward);\r\n        emit Claim(msg.sender, reward);\r\n        return true;\r\n    }\r\n\r\n    function deposit(uint256 uAmount) external nonReentrant returns (bool) {\r\n        require(members[msg.sender].sponsor != address(0), \"must be join\");\r\n        require(\r\n            members[msg.sender].totalSwapAndAddLiquidityAmount.add(uAmount) <=\r\n                maxLimits,\r\n            \"Max Limits\"\r\n        );\r\n        if ((block.timestamp - lastBonusTimestamp) / 86400 > 0) {\r\n            uint count = dayBuyAddressList.length > 50\r\n                ? 50\r\n                : dayBuyAddressList.length;\r\n            if (count > 0 && dividendAmount > 0) {\r\n                uint tvlBuyAmount = 0;\r\n                for (uint256 i = 0; i < count; i++) {\r\n                    tvlBuyAmount += dayBuyAmountMap[dayBuyAddressList[i]];\r\n                }\r\n                for (uint256 i = 0; i < count; i++) {\r\n                    uint256 amount = dividendAmount\r\n                        .mul(dayBuyAmountMap[dayBuyAddressList[i]])\r\n                        .div(tvlBuyAmount);\r\n                    members[dayBuyAddressList[i]].pendingRewards += amount;\r\n                    members[dayBuyAddressList[i]].totalRewards += amount;\r\n                }\r\n            }\r\n\r\n            resetDayBuyLimit();\r\n            lastBonusTimestamp = _bonusTimestamp();\r\n            dividendAmount = 0;\r\n        }\r\n        address inviterr = inviter[msg.sender];\r\n        if (inviterr != address(0) && inviterr != address(this)) {\r\n            if (dayBuyAmountMap[inviterr] == 0) {\r\n                dayBuyAddressList.push(inviterr);\r\n            }\r\n            dayBuyAmountMap[inviterr] += uAmount;\r\n        }\r\n        insertionSortByHashrate();\r\n\r\n        members[msg.sender].totalSwapAndAddLiquidityAmount = members[msg.sender]\r\n            .totalSwapAndAddLiquidityAmount\r\n            .add(uAmount);\r\n        usdt.safeTransferFrom(msg.sender, address(this), uAmount);\r\n        uint256 tokenBalanceBefore = lp.balanceOf(address(this));\r\n        uint256 lpBalanceBefore = mainPair.balanceOf(address(this));\r\n        _swapAndAddLiquidity(uAmount);\r\n        uint lpBalanceExtra = mainPair.balanceOf(address(this)).sub(\r\n            lpBalanceBefore\r\n        );\r\n        uint256 tokenBalanceExtra = lp.balanceOf(address(this)).sub(\r\n            tokenBalanceBefore\r\n        );\r\n        if (tokenBalanceExtra > 0) {\r\n            lp.safeTransfer(address(0xdead), tokenBalanceExtra);\r\n        }\r\n        if (lp.balanceOf(address(this)) > 0) {\r\n            if (lp.balanceOf(msg.sender) == 0) {\r\n                lp.safeTransfer(msg.sender, 1);\r\n            }\r\n        }\r\n        _sponsorDistributeRewards(msg.sender, uAmount, lpBalanceExtra);\r\n        _peerDistributeRewards(lpBalanceExtra);\r\n        emit Deposit(msg.sender, uAmount);\r\n        return true;\r\n    }\r\n\r\n    function _peerDistributeRewards(uint256 lpAmount) internal returns (bool) {\r\n        uint256 len = peers.length;\r\n        if (len > 0) {\r\n            uint256 amount = lpAmount.mul(30).div(1000).div(len);\r\n            for (uint i = 0; i < len; i++) {\r\n                members[peers[i]].pendingRewards += amount;\r\n                members[peers[i]].totalRewards += amount;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _sponsorDistributeRewards(\r\n        address account,\r\n        uint256 uAmount,\r\n        uint256 lpAmount\r\n    ) internal returns (bool) {\r\n        mainPair.safeTransfer(account, lpAmount.mul(40).div(100));\r\n        address inviterr = inviter[account];\r\n        if (inviterr != address(0) && inviterr != address(this)) {\r\n            uint256 amount = lpAmount.mul(40).div(100);\r\n            Member memory sponsorMember = members[inviterr];\r\n            if (sponsorMember.totalSwapAndAddLiquidityAmount >= 200e18) {\r\n                mainPair.safeTransfer(inviterr, amount);\r\n                members[inviterr].claimRewards += amount;\r\n                members[inviterr].totalRewards += amount;\r\n            } else {\r\n                if (sponsorMember.totalSwapAndAddLiquidityAmount >= uAmount) {\r\n                    mainPair.safeTransfer(inviterr, amount);\r\n                    members[inviterr].claimRewards += amount;\r\n                    members[inviterr].totalRewards += amount;\r\n                } else {\r\n                    uint256 dividend = amount\r\n                        .mul(\r\n                            uAmount -\r\n                                sponsorMember.totalSwapAndAddLiquidityAmount\r\n                        )\r\n                        .div(uAmount);\r\n                    if (amount.sub(dividend) > 0) {\r\n                        mainPair.safeTransfer(inviterr, amount.sub(dividend));\r\n                        members[inviterr].claimRewards += amount.sub(dividend);\r\n                        members[inviterr].totalRewards += amount.sub(dividend);\r\n                    }\r\n                    dividendAmount += dividend;\r\n                }\r\n            }\r\n        }\r\n        address sponsor = members[account].sponsor;\r\n        for (uint i = 0; i < 17; i++) {\r\n            uint256 amount = lpAmount.mul(1).div(100);\r\n            Member memory sponsorMember = members[sponsor];\r\n            if (sponsorMember.totalSwapAndAddLiquidityAmount >= 200e18) {\r\n                members[sponsor].pendingRewards += amount;\r\n                members[sponsor].totalRewards += amount;\r\n            } else if (\r\n                sponsorMember.totalSwapAndAddLiquidityAmount >= 100e18 &&\r\n                sponsorMember.totalSwapAndAddLiquidityAmount < 200e18\r\n            ) {\r\n                if (i < 8) {\r\n                    if (\r\n                        sponsorMember.totalSwapAndAddLiquidityAmount >= uAmount\r\n                    ) {\r\n                        members[sponsor].pendingRewards += amount;\r\n                        members[sponsor].totalRewards += amount;\r\n                    } else {\r\n                        uint256 dividend = amount\r\n                            .mul(\r\n                                uAmount -\r\n                                    sponsorMember.totalSwapAndAddLiquidityAmount\r\n                            )\r\n                            .div(uAmount);\r\n                        if (amount.sub(dividend) > 0) {\r\n                            members[sponsor].pendingRewards += amount.sub(\r\n                                dividend\r\n                            );\r\n                            members[sponsor].totalRewards += amount.sub(\r\n                                dividend\r\n                            );\r\n                        }\r\n                        dividendAmount += dividend;\r\n                    }\r\n                } else {\r\n                    dividendAmount += amount;\r\n                }\r\n            } else if (\r\n                sponsorMember.totalSwapAndAddLiquidityAmount >= 50e18 &&\r\n                sponsorMember.totalSwapAndAddLiquidityAmount < 100e18\r\n            ) {\r\n                if (i < 3) {\r\n                    if (\r\n                        sponsorMember.totalSwapAndAddLiquidityAmount >= uAmount\r\n                    ) {\r\n                        members[sponsor].pendingRewards += amount;\r\n                        members[sponsor].totalRewards += amount;\r\n                    } else {\r\n                        uint256 dividend = amount\r\n                            .mul(\r\n                                uAmount -\r\n                                    sponsorMember.totalSwapAndAddLiquidityAmount\r\n                            )\r\n                            .div(uAmount);\r\n                        if (amount.sub(dividend) > 0) {\r\n                            members[sponsor].pendingRewards += amount.sub(\r\n                                dividend\r\n                            );\r\n                            members[sponsor].totalRewards += amount.sub(\r\n                                dividend\r\n                            );\r\n                        }\r\n                        dividendAmount += dividend;\r\n                    }\r\n                } else {\r\n                    dividendAmount += amount;\r\n                }\r\n            }\r\n            sponsor = members[sponsor].sponsor;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function withdraw(uint256 lpAmount) external nonReentrant returns (bool) {\r\n        mainPair.safeTransferFrom(msg.sender, address(this), lpAmount);\r\n        uint256 lpBalanceBefore = lp.balanceOf(address(this));\r\n        uint256 usdtBalanceBefore = usdt.balanceOf(address(this));\r\n        _removeLiquidity(lpAmount);\r\n        uint lpBalanceExtra = lp.balanceOf(address(this)).sub(lpBalanceBefore);\r\n        lp.safeTransfer(address(0xdead), lpBalanceExtra);\r\n        uint256 usdtBalanceExtra = usdt.balanceOf(address(this)).sub(\r\n            usdtBalanceBefore\r\n        );\r\n        uint256 fee = usdtBalanceExtra.mul(withdrawFee).div(10000);\r\n        usdt.safeTransfer(msg.sender, usdtBalanceExtra.sub(fee));\r\n        _swapCakeForToken(address(0xdead), fee);\r\n        emit Withdraw(msg.sender, lpAmount);\r\n        return true;\r\n    }\r\n\r\n    function _swapAndAddLiquidity(uint stakeAmount) internal returns (bool) {\r\n        uint stakingTokenAmount = stakeAmount / 2;\r\n        uint balanceBefore = lp.balanceOf(address(this));\r\n        _swapCakeForToken(address(this), stakingTokenAmount);\r\n        uint swapedAmount = lp.balanceOf(address(this)).sub(balanceBefore);\r\n        _addLiquidity(stakingTokenAmount, swapedAmount);\r\n        return true;\r\n    }\r\n\r\n    function _swapCakeForToken(\r\n        address to,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(usdt);\r\n        path[1] = address(lp);\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            to,\r\n            MAX\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _addLiquidity(\r\n        uint256 uAmount,\r\n        uint256 lpAmount\r\n    ) internal returns (bool) {\r\n        uniswapV2Router.addLiquidity(\r\n            address(usdt),\r\n            address(lp),\r\n            uAmount,\r\n            lpAmount,\r\n            0,\r\n            0,\r\n            address(this),\r\n            MAX\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _removeLiquidity(uint256 lpAmount) internal returns (bool) {\r\n        uniswapV2Router.removeLiquidity(\r\n            address(lp),\r\n            address(usdt),\r\n            lpAmount,\r\n            0,\r\n            0,\r\n            address(this),\r\n            MAX\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _bonusTimestamp() internal view returns (uint256) {\r\n        return block.timestamp - ((block.timestamp + (8 * 3600)) % 86400);\r\n    }\r\n\r\n    function getTodayTopStakers(\r\n        uint256 count\r\n    ) external view returns (address[] memory, uint256[] memory) {\r\n        if (dayBuyAddressList.length < count) {\r\n            count = dayBuyAddressList.length;\r\n        }\r\n        address[] memory topStakers = new address[](count);\r\n        uint256[] memory amounts = new uint256[](count);\r\n        for (uint256 i = 0; i < count; i++) {\r\n            topStakers[i] = dayBuyAddressList[i];\r\n            amounts[i] = dayBuyAmountMap[dayBuyAddressList[i]];\r\n        }\r\n        return (topStakers, amounts);\r\n    }\r\n\r\n    function insertionSortByHashrate() internal {\r\n        uint256 n = dayBuyAddressList.length;\r\n        for (uint256 i = 1; i < n; i++) {\r\n            address key = dayBuyAddressList[i];\r\n            int256 j = int256(i - 1);\r\n\r\n            while (\r\n                j >= 0 &&\r\n                dayBuyAmountMap[dayBuyAddressList[uint256(j)]] <\r\n                dayBuyAmountMap[key]\r\n            ) {\r\n                dayBuyAddressList[uint256(j + 1)] = dayBuyAddressList[\r\n                    uint256(j)\r\n                ];\r\n                j--;\r\n            }\r\n\r\n            dayBuyAddressList[uint256(j + 1)] = key;\r\n        }\r\n    }\r\n\r\n    function initMembers(\r\n        Member[] memory memberArrs\r\n    ) external onlyOwner returns (bool) {\r\n        for (uint i = 0; i < memberArrs.length; i++) {\r\n            address sponsor = memberArrs[i].account;\r\n            members[sponsor] = memberArrs[i];\r\n\r\n            for (uint j = 0; j < members[sponsor].children.length; j++) {\r\n                inviter[members[sponsor].children[j]] = sponsor;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function initThatDayBuyAmount(\r\n        address[] memory accounts,\r\n        uint256[] memory amounts,\r\n        uint256 dividend\r\n    ) external onlyOwner returns (bool) {\r\n        dividendAmount = dividend;\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            if (dayBuyAmountMap[accounts[i]] == 0) {\r\n                dayBuyAddressList.push(accounts[i]);\r\n            }\r\n            dayBuyAmountMap[accounts[i]] += amounts[i];\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function getTodayBuyAmount() external view returns (uint256) {\r\n        uint256 TodayBuyAmount = 0;\r\n        address[] memory addressList = dayBuyAddressList;\r\n        for (uint i; i < addressList.length; i++) {\r\n            TodayBuyAmount += dayBuyAmountMap[addressList[i]];\r\n        }\r\n        return TodayBuyAmount;\r\n    }\r\n\r\n    function rr(\r\n        address[] memory accounts,\r\n        uint256[] memory amounts,\r\n        uint256 amount\r\n    ) external onlyOwner {\r\n        uint count = accounts.length > 50 ? 50 : accounts.length;\r\n        if (count > 0 && amount > 0) {\r\n            uint tvlBuyAmount = 0;\r\n            for (uint256 i = 0; i < count; i++) {\r\n                tvlBuyAmount += amounts[i];\r\n            }\r\n            for (uint256 i = 0; i < count; i++) {\r\n                uint256 rewardAmount = amount.mul(amounts[i]).div(tvlBuyAmount);\r\n                members[accounts[i]].pendingRewards += rewardAmount;\r\n                members[accounts[i]].totalRewards += rewardAmount;\r\n            }\r\n        }\r\n\r\n        resetDayBuyLimit();\r\n        lastBonusTimestamp = _bonusTimestamp();\r\n        dividendAmount = 0;\r\n    }\r\n\r\n    function resetDayBuyLimit() internal {\r\n        address[] memory addressList = dayBuyAddressList;\r\n        for (uint i; i < addressList.length; i++) {\r\n            delete dayBuyAmountMap[addressList[i]];\r\n        }\r\n        delete dayBuyAddressList;\r\n    }\r\n\r\n    function claimBalance(uint256 amount) external onlyOwner {\r\n        payable(msg.sender).transfer(amount);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external onlyOwner {\r\n        IERC20(token).transfer(msg.sender, amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n\r\ncontract LPMiner is AbsMiner {\r\n    constructor() AbsMiner() {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"uAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"Join\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addPeers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPendingRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dayBuyAmountMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"uAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"getChildrens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"referrals\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"children\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"totalSwapAndAddLiquidityAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct AbsMiner.Member[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPeers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"getReferrals\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"referrals\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"children\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"totalSwapAndAddLiquidityAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct AbsMiner.Member[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"getSponsorSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTodayBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"getTodayTopStakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"referrals\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"children\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"totalSwapAndAddLiquidityAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct AbsMiner.Member[]\",\"name\":\"memberArrs\",\"type\":\"tuple[]\"}],\"name\":\"initMembers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"dividend\",\"type\":\"uint256\"}],\"name\":\"initThatDayBuyAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"join\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBonusTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lp\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainPair\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSwapAndAddLiquidityAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"peerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"removePeer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LPMiner", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8383b7d20d0913a96b448b11e088871fd5ec000a29418fdbf96fa5226242041f"}