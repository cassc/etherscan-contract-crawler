{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.15;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring \"a\" not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ncontract DigitalattoMigration{\r\n    using SafeMath for uint256;\r\n\r\n    struct UserInfo {\r\n        bool isWL;\r\n        uint256 amount;\r\n    }\r\n    \r\n    IBEP20 public OLDTOKEN = IBEP20(0xEc328682a5192c6b8DeC40D13eDDc582DAd128D0);\r\n    IBEP20 public NEWTOKEN = IBEP20(0x0a96EE8b3D59AeA26b4cC31342747e176e711FDd);\r\n    address public constant BURN_ADDRESS = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address public marketingWallet = 0x749de1c387ce72d213BbB357D4E36CaC8b37e51A;\r\n    address public owner;\r\n    uint256 public swapFee = 0.005 ether; // BNB\r\n\r\n    bool public swapEnabled;\r\n    uint256 public totalMigrationed;\r\n    mapping (address => UserInfo) public userinfo;\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor ()  {\t\r\n        owner = msg.sender;\t\r\n    }\r\n\r\n    function migrate(uint256 _amount) external payable {\r\n        UserInfo storage user = userinfo[msg.sender];\r\n        require(swapEnabled, \"paused\");\r\n        require(user.isWL, \"not whitelisted\");\r\n        require(user.amount >= _amount, \"insufficient allowed amount\");\r\n        if(swapFee > 0) {\r\n            require(msg.value >= swapFee  , \"not enough swapFee\");\r\n        }\r\n\r\n        user.amount -= _amount;\r\n        if(user.amount == 0) {\r\n            user.isWL = false;\r\n        }\r\n        payable(marketingWallet).transfer(address(this).balance);\r\n        uint256 newtokenAmount = _amount.mul(10 ** NEWTOKEN.decimals()).div(10 ** OLDTOKEN.decimals());\r\n        require(NEWTOKEN.balanceOf(address(this)) >= newtokenAmount, \"insufficient contract balance\");\r\n        OLDTOKEN.transferFrom(msg.sender, BURN_ADDRESS, _amount);\r\n        NEWTOKEN.transfer(msg.sender, newtokenAmount);\r\n        totalMigrationed += _amount;\r\n    }\r\n\r\n    function setWhiteList(address[] memory _accounts, uint256[] memory _amounts, bool _value) public onlyOwner {\r\n      for(uint256 i = 0; i < _accounts.length; i++) {\r\n            UserInfo storage user = userinfo[_accounts[i]];\r\n            user.amount = _amounts[i];\r\n            user.isWL = _value;\r\n        }\r\n    }\r\n\r\n    function setSwapFee(uint256 _swapFee) external onlyOwner{\r\n        swapFee = _swapFee;\r\n    }\r\n\r\n    function toggleSwap() external onlyOwner{\r\n        swapEnabled = !swapEnabled;\r\n    }\r\n\r\n    function setMarketingWallet(address _account) external onlyOwner{\r\n        require(_account != address(0), \"wrong\");\r\n        marketingWallet = _account;\r\n    }\r\n    \r\n    function setTokens(address _oldtoken, address _newtoken) external onlyOwner{\r\n        require(_oldtoken != address(0), \"wrong\");\r\n        require(_newtoken != address(0), \"wrong\");\r\n        OLDTOKEN = IBEP20(_oldtoken);\r\n        NEWTOKEN = IBEP20(_newtoken);\r\n    }\r\n\r\n    function transferOwnerShip(address _owner) external onlyOwner{\r\n        owner = _owner;\r\n    }\r\n\r\n    function getTokensBack(address _token, address payable _to) external onlyOwner {\r\n        if(_token == address(0)){\r\n            _to.transfer(address(this).balance);\r\n        } else {\r\n            IBEP20(_token).transfer(_to, IBEP20(_token).balanceOf(address(this)));\r\n        }        \r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NEWTOKEN\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OLDTOKEN\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"getTokensBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapFee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldtoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newtoken\",\"type\":\"address\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMigrationed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnerShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userinfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isWL\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DigitalattoMigration", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dc3341edad8be3ab3f8aea3618cc979303be32363c5e8a05f1db542809b16a30"}