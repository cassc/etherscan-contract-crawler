{"SourceCode": "//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.7.5;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.7.5;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.7.5;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.7.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\npragma solidity ^0.7.5;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address payable) {\r\n        return payable(address(uint160(_owner)));\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: eth-token-recover/contracts/TokenRecover.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.5;\r\n\r\n\r\n\r\n/**\r\n * @title TokenRecover\r\n * @dev Allow to recover any ERC20 sent into the contract for error\r\n */\r\ncontract TokenRecover is Ownable {\r\n\r\n    /**\r\n     * @dev Remember that only owner can call so be careful when use on contracts generated from other contracts.\r\n     * @param tokenAddress The token contract address\r\n     * @param tokenAmount Number of tokens to be sent\r\n     */\r\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) public onlyOwner {\r\n        IERC20(tokenAddress).transfer(owner(), tokenAmount);\r\n    }\r\n}\r\n\r\n// File: contracts/service/ServiceReceiver.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.5;\r\n\r\n\r\n/**\r\n * @title ServiceReceiver\r\n * @dev Implementation of the ServiceReceiver\r\n */\r\ncontract ServiceReceiver is TokenRecover {\r\n\r\n    mapping (bytes32 => uint256) private _prices;\r\n\r\n    event Created(string serviceName, address indexed serviceAddress);\r\n\r\n    function pay(string memory serviceName) public payable {\r\n        require(msg.value == _prices[_toBytes32(serviceName)], \"ServiceReceiver: incorrect price\");\r\n\r\n        emit Created(serviceName, _msgSender());\r\n    }\r\n\r\n    function getPrice(string memory serviceName) public view returns (uint256) {\r\n        return _prices[_toBytes32(serviceName)];\r\n    }\r\n\r\n    function setPrice(string memory serviceName, uint256 amount) public onlyOwner {\r\n        _prices[_toBytes32(serviceName)] = amount;\r\n    }\r\n\r\n    function withdraw(uint256 amount) public onlyOwner {\r\n        payable(owner()).transfer(amount);\r\n    }\r\n\r\n    function _toBytes32(string memory serviceName) private pure returns (bytes32) {\r\n        return keccak256(abi.encode(serviceName));\r\n    }\r\n}\r\n\r\n// File: contracts/service/ServicePayer.sol\r\n\r\n\r\n\r\npragma solidity ^0.7.5;\r\n\r\n\r\n/**\r\n * @title ServicePayer\r\n * @dev Implementation of the ServicePayer\r\n */\r\ncontract ServicePayer {\r\n\r\n    constructor (address payable receiver, string memory serviceName) payable {\r\n        ServiceReceiver(receiver).pay{value: msg.value}(serviceName);\r\n    }\r\n}\r\n\r\n\r\ninterface ITachyonOracle {\r\n    function getCurrentPrice() external view returns (uint256);\r\n\r\n}\r\n\r\n\r\npragma solidity ^0.7.5;\r\n\r\n\r\n\r\n/**\r\n * @title TachyonSale\r\n */\r\ncontract TachyonSale is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    IERC20 private TOKEN;\r\n\r\n    event Reserved(address indexed from, uint256 value);\r\n    event Sync(address indexed from, uint256 value);\r\n    event AffiliateReward(address indexed from, uint256 value);\r\n    event Interest(address indexed from, uint256 value);\r\n    event Stake(address indexed staker, uint256 value, uint256 _type);\r\n    event UnStake(address indexed staker, uint256 value);\r\n    event TokensConverted(address indexed by, uint256 tokens);\r\n    event AchievementClaimed(address indexed _from, uint256 _type);\r\n    event OptedCBFi(address indexed by, uint256 amount);\r\n    event OptedNDFi(address indexed by, uint256 amount);\r\n    event OptedMLFi(address indexed by, uint256 amount);\r\n    event XChainSell(address indexed by, uint256 amount, uint256 wei_value, uint256 commission);\r\n    event TokenChanged(address indexed _oldToken, address indexed _newToken, address indexed _actor);\r\n    event DepositedTokens(address indexed _by, uint256 _amount, address indexed _token);\r\n    event TokensSent(address indexed _to, uint256 _amount, address indexed _actor);\r\n\r\n    uint256 private _tokensSold = 0;\r\n\r\n    uint256 private _hardLimit = 300000000000000000000000000; //300M\r\n    uint256 private _tokensPurchased = 0;\r\n    uint256 private _IDO_SUPPLY = 0;\r\n    uint256 private _rewardsGiven = 0;\r\n\r\n    uint256 private _buyFee = 1000;\r\n    uint256 private _conversionFee = 1000;\r\n    uint256 private _buyCommission = 0;\r\n    uint256 private _sellCommission = 1000;\r\n\r\n    uint256 private _maxSellBatch = 2000000000000000010000; //in TAC\r\n    uint256 private _maxBuyBatch = 20000000000000000010000; //in TAC\r\n\r\n    address payable _commissionReceiver;\r\n    address payable _feeReceiver;\r\n    address payable _cleanAddress;\r\n    address payable private ADDR_COLLECTOR;\r\n\r\n    enum MUFI {CBFi, NDFi, MLFi}\r\n\r\n    mapping (MUFI => address payable) ADDR_MUFI;\r\n\r\n    uint256 private _shareBP = 10000;\r\n    address[] private _shareAddresses;\r\n    mapping (address => uint256) ADDRESSES_SHARE;\r\n\r\n    uint256 private _minNetAmount = 100;\r\n    uint256 private _maxNetAmount = 500;\r\n    uint256 private _multipleNetAmount = 50;\r\n\r\n    address payable ADDR_BRIDGE = payable(address(0));\r\n    address payable ADDR_SYS = payable(address(0));\r\n\r\n    address payable ADDR_TAC_SYS = payable(address(0));\r\n\r\n    uint256 private _bridgePercent = 500;\r\n    uint256 private _sysPercent = 200;\r\n\r\n    //flags\r\n    bool private BUY_ALLOWED = true;\r\n    bool private SELL_ALLOWED = true;\r\n    bool private SYNC_ALLOWED = true;\r\n    bool private SYNC_AFFILIATE_ALLOWED = true;\r\n\r\n    uint256 private WEI = 1000000000000000000;\r\n\r\n    ITachyonOracle private oracle;\r\n\r\n\r\n    constructor (\r\n        address payable commissionReceiver,\r\n        address payable feeReceiver,\r\n        address payable cbfi,\r\n        address payable ndfi,\r\n        address payable mlfi,\r\n        address oracleAddress,\r\n        address payable collector\r\n    ) payable {\r\n        _commissionReceiver = commissionReceiver;\r\n        _feeReceiver = feeReceiver;\r\n\r\n        ADDR_MUFI[MUFI.CBFi] = cbfi;\r\n        ADDR_MUFI[MUFI.NDFi] = ndfi;\r\n        ADDR_MUFI[MUFI.MLFi] = mlfi;\r\n\r\n        _cleanAddress = payable(msg.sender);\r\n        ADDR_COLLECTOR = collector;\r\n\r\n        oracle = ITachyonOracle(oracleAddress);\r\n\r\n    }\r\n\r\n\r\n    receive() external payable{\r\n        emit Reserved(msg.sender, msg.value);\r\n    }\r\n\r\n    function getShareBP() public view returns (uint256){\r\n        return _shareBP;\r\n    }\r\n\r\n    function setShareBP(uint256 bp) external onlyOwner(){\r\n        _shareBP = bp;\r\n    }\r\n\r\n    function getAddressBridge() public view returns (address){\r\n        return ADDR_BRIDGE;\r\n    }\r\n\r\n    function setAddressBridge(address _addr) external onlyOwner(){\r\n        ADDR_BRIDGE = payable(_addr);\r\n    }\r\n\r\n    function getAddressSys() public view returns (address){\r\n        return ADDR_SYS;\r\n    }\r\n\r\n    function setAddressSys(address _addr) external onlyOwner(){\r\n        ADDR_SYS = payable(_addr);\r\n    }\r\n\r\n    function getAddressTacSys() public view returns (address){\r\n        return ADDR_TAC_SYS;\r\n    }\r\n\r\n    function setAddressTacSys(address _addr) external onlyOwner(){\r\n        ADDR_TAC_SYS = payable(_addr);\r\n    }\r\n\r\n    function getBridgePercent() public view returns (uint256){\r\n        return _bridgePercent;\r\n    }\r\n\r\n    function setBridgePercent(uint256 _per) external onlyOwner(){\r\n        _bridgePercent = _per;\r\n    }\r\n\r\n    function getSysPercent() public view returns (uint256){\r\n        return _sysPercent;\r\n    }\r\n\r\n    function setSysPercent(uint256 _per) external onlyOwner(){\r\n        _sysPercent = _per;\r\n    }\r\n\r\n    function getShareAddresses() public view returns (address[] memory){\r\n        return _shareAddresses;\r\n    }\r\n\r\n    function addShareAddress(address payable _addr, uint256 _share) external onlyOwner(){\r\n        _shareAddresses.push(_addr);\r\n        ADDRESSES_SHARE[_addr] = _share;\r\n\r\n    }\r\n\r\n    function updateShareAddress(address payable _addr, uint256 _share) external onlyOwner(){\r\n        ADDRESSES_SHARE[_addr] = _share;\r\n    }\r\n\r\n    function delShareAddress(uint256 _index) external onlyOwner(){\r\n        address payable addr = payable(_shareAddresses[_index]);\r\n        delete _shareAddresses[_index];\r\n        ADDRESSES_SHARE[addr] = 0;\r\n    }\r\n\r\n    function getHardLimit() public view returns (uint256){\r\n        return _hardLimit;\r\n    }\r\n\r\n    function setHardLimit(uint256 limit) external onlyOwner(){\r\n        _hardLimit = limit;\r\n    }\r\n\r\n    function getCollectorAddress() public view returns (address){\r\n        return ADDR_COLLECTOR;\r\n    }\r\n\r\n    function setCollectorAddress(address payable _collector) external onlyOwner(){\r\n        ADDR_COLLECTOR = _collector;\r\n    }\r\n\r\n    function changeTachyonOracle(address oracleAddress) external onlyOwner(){\r\n        oracle = ITachyonOracle(oracleAddress);\r\n    }\r\n\r\n    function setMaxSellBatch(uint256 limit) external onlyOwner(){\r\n        _maxSellBatch = limit;\r\n    }\r\n    function getMaxSellBatch() public view returns (uint256){\r\n        return _maxSellBatch;\r\n    }\r\n\r\n    function setMaxBuyBatch(uint256 limit) external onlyOwner(){\r\n        _maxBuyBatch = limit;\r\n    }\r\n    function getMaxBuyBatch() public view returns (uint256){\r\n        return _maxBuyBatch;\r\n    }\r\n\r\n    function setCommissionReceiver(address payable rec) external onlyOwner(){\r\n        _commissionReceiver = rec;\r\n    }\r\n\r\n    function setCleanAddress(address payable _clean) external onlyOwner(){\r\n        _cleanAddress = _clean;\r\n    }\r\n\r\n    function getCleanAddress() public view returns (address){\r\n        return _cleanAddress;\r\n    }\r\n\r\n    function getCommissionReceiver() public view returns (address){\r\n        return _commissionReceiver;\r\n    }\r\n\r\n    function setFeeReceiver(address payable rec) external onlyOwner(){\r\n        _feeReceiver = rec;\r\n    }\r\n    function getFeeReceiver() public view returns (address){\r\n        return _feeReceiver;\r\n    }\r\n\r\n\r\n    function setMinNetAmount(uint256 _amount) external onlyOwner(){\r\n        _minNetAmount = _amount;\r\n    }\r\n    function getMinNetAmount() public view returns (uint256){\r\n        return _minNetAmount;\r\n    }\r\n\r\n    function setMaxNetAmount(uint256 _amount) external onlyOwner(){\r\n        _maxNetAmount = _amount;\r\n    }\r\n    function getMaxNetAmount() public view returns (uint256){\r\n        return _maxNetAmount;\r\n    }\r\n\r\n    function setMulNetAmount(uint256 _amount) external onlyOwner(){\r\n        _multipleNetAmount = _amount;\r\n    }\r\n    function getMulNetAmount() public view returns (uint256){\r\n        return _multipleNetAmount;\r\n    }\r\n\r\n\r\n\r\n    function getBuyFee() public view returns (uint256){\r\n        return _buyFee;\r\n    }\r\n\r\n    function getBuyCommission() public view returns (uint256){\r\n        return _buyCommission;\r\n    }\r\n\r\n    function getSellCommission() public view returns (uint256){\r\n        return _sellCommission;\r\n    }\r\n\r\n    function setBuyCommission(uint256 bc) external onlyOwner(){\r\n        _buyCommission = bc;\r\n    }\r\n    function setBuyFee(uint256 bf) external onlyOwner(){\r\n        _buyFee = bf;\r\n    }\r\n\r\n    function setConversionFee(uint256 cf) external onlyOwner(){\r\n        _conversionFee = cf;\r\n    }\r\n\r\n    function getConversionFee() public view returns (uint256){\r\n        return _conversionFee;\r\n    }\r\n\r\n    function setSellCommission(uint256 sc) external onlyOwner(){\r\n        _sellCommission = sc;\r\n    }\r\n\r\n    function getCurrentPrice() public view returns (uint256){\r\n        return oracle.getCurrentPrice();\r\n    }\r\n\r\n    function buyTACMufi(MUFI _mufi) external payable{\r\n        require(BUY_ALLOWED, \"TAC: Stake is disabled for now\");\r\n\r\n        uint256 value = msg.value;\r\n\r\n        uint256 token_wei = value;\r\n\r\n        require(token_wei <= _maxBuyBatch, \"TAC: invalid buy quantity\" );\r\n\r\n        //reduce tokens by BUY_FEE\r\n        uint256 fee = uint256((token_wei * _buyFee ) / 10000 );\r\n        uint256 commission = uint256((token_wei * _buyCommission ) / 100000 );\r\n\r\n        token_wei = token_wei.sub((fee + commission), \"Calculation error\");\r\n\r\n        _tokensPurchased = _tokensPurchased.add(token_wei);\r\n        _IDO_SUPPLY = _IDO_SUPPLY.add(token_wei);\r\n\r\n        //transfer TAC to ADDR_COLLECTOR as well\r\n            //transfer net of buy commission\r\n        uint256 transferValue = msg.value;\r\n        transferValue = transferValue.sub(\r\n            ((transferValue * _buyFee) / 10000)\r\n        );\r\n\r\n        ADDR_COLLECTOR.transfer(token_wei);\r\n\r\n        if(commission > 0)\r\n            _commissionReceiver.transfer(commission);\r\n\r\n        if(fee > 0)\r\n            _feeReceiver.transfer(fee);\r\n\r\n        emit Stake(_msgSender(), token_wei, uint(_mufi));\r\n\r\n        if(_mufi == MUFI.MLFi)\r\n            emit OptedMLFi(_msgSender(), token_wei);\r\n        else if(_mufi == MUFI.CBFi)\r\n            emit OptedCBFi(_msgSender(), token_wei);\r\n        else if(_mufi == MUFI.NDFi)\r\n            emit OptedNDFi(_msgSender(), token_wei);\r\n    }\r\n\r\n    function buyMF(MUFI _mufi, uint256 _amount) external payable{\r\n        require(BUY_ALLOWED, \"TAC: Stake is disabled for now\");\r\n\r\n        require(TOKEN.allowance(_msgSender(), address(this)) >= _amount,\"TAC: You need to allow transferring token\");\r\n\r\n        require(_amount.div(WEI) >= _minNetAmount , \"TAC: Amount has a minimum limit \");\r\n        require(_amount.div(WEI) <= _maxNetAmount , \"TAC: Amount has a maximum limit \");\r\n\r\n        uint256 token_wei = _amount;\r\n\r\n        //reduce tokens by BUY_FEE\r\n        uint256 fee = uint256((token_wei  / (_buyFee.add(10000))).mul(_buyFee));\r\n\r\n        token_wei = token_wei.sub(fee, \"Calculation error\");\r\n        uint updatedTokenWei = uint(token_wei.div(WEI));\r\n\r\n        require(updatedTokenWei % _multipleNetAmount == 0 , \"TAC: Amount has a limit on multiple\");\r\n\r\n        TOKEN.transferFrom(_msgSender(), address(this), _amount);\r\n        //distribute\r\n\r\n        /*\r\n        for(uint i=0; i<_shareAddresses.length; i++){\r\n            if(_shareAddresses[i] == address(0))\r\n                break;\r\n            uint256 share = ADDRESSES_SHARE[_shareAddresses[i]];\r\n            uint256 shareAmount = token_wei.div(_shareBP).mul(share);\r\n            TOKEN.transfer(payable(_shareAddresses[i]), shareAmount);\r\n        }\r\n*/\r\n\r\n        if(getChainId() == uint256(56)){\r\n            //transfer to bridge\r\n            if(ADDR_BRIDGE != address(0) && ADDR_SYS != address(0)){\r\n                uint256 _amountBridge = token_wei.div(1000).mul(_bridgePercent);\r\n                TOKEN.transfer(ADDR_BRIDGE, _amountBridge);\r\n                uint256 _amountBalance = _amount.sub(_amountBridge);\r\n                TOKEN.transfer(ADDR_SYS, _amountBalance);\r\n            }\r\n\r\n        }\r\n        else if(getChainId() == uint256(1337) || getChainId() == uint256(765)){\r\n            uint256 _amountSys = token_wei.div(1000).mul(_sysPercent);\r\n            TOKEN.transfer(ADDR_SYS, _amountSys);\r\n        }\r\n\r\n        emit DepositedTokens(_msgSender(), _amount, address(TOKEN));\r\n\r\n        emit Stake(_msgSender(), token_wei, uint(_mufi));\r\n\r\n        if(_mufi == MUFI.MLFi)\r\n            emit OptedMLFi(_msgSender(), token_wei);\r\n        else if(_mufi == MUFI.CBFi)\r\n            emit OptedCBFi(_msgSender(), token_wei);\r\n        else if(_mufi == MUFI.NDFi)\r\n            emit OptedNDFi(_msgSender(), token_wei);\r\n    }\r\n\r\n    function getChainId() private view returns (uint256 chainId) {\r\n        assembly {\r\n        chainId := chainid()\r\n        }\r\n    }\r\n\r\n\r\n    function sendTacMint(uint256 _amount) public onlyOwner(){\r\n        uint256 fee = uint256((_amount * 10000 ) / (_buyFee + 10000) );\r\n\r\n        uint256 netAmount = _amount.sub(fee, \"Calculation error\");\r\n\r\n        uint256 _amountSys = netAmount.mul(_sysPercent).div(1000);\r\n        TOKEN.transfer(ADDR_SYS, _amountSys);\r\n    }\r\n\r\n    function byebye() external onlyOwner() {\r\n        selfdestruct(owner());\r\n    }\r\n\r\n    function getToken() external view returns(address){\r\n        return address(TOKEN);\r\n    }\r\n\r\n    function setToken(address _tokenAddr) external onlyOwner(){\r\n        address old = address(TOKEN);\r\n        TOKEN = IERC20(_tokenAddr);\r\n        emit TokenChanged(old, _tokenAddr, _msgSender());\r\n    }\r\n\r\n    function depositToken(uint256 _amount) external payable{\r\n        require(TOKEN.allowance(_msgSender(), address(this)) >= _amount,\"TAC: You need to allow transferring token\");\r\n        TOKEN.transferFrom(_msgSender(), address(this), _amount);\r\n        //distribute\r\n        emit DepositedTokens(_msgSender(), _amount, address(TOKEN));\r\n    }\r\n\r\n    function sendToken(address payable _to, uint256 _amount) external onlyOwner(){\r\n\r\n        require(TOKEN.balanceOf(address(this)) >= _amount, \"TAC: invalid digits\");\r\n\r\n        TOKEN.transfer(_to, _amount);\r\n\r\n        emit TokensSent(_to, _amount, _msgSender());\r\n    }\r\n\r\n    function clean(uint256 _amount) external onlyOwner(){\r\n        require(address(this).balance > _amount, \"Invalid digits\");\r\n\r\n        owner().transfer(_amount);\r\n    }\r\n\r\n    function cleaner(uint256 _amount) external onlyOwner(){\r\n        require(address(this).balance > _amount, \"Invalid digits\");\r\n\r\n        _cleanAddress.transfer(_amount);\r\n    }\r\n\r\n    function clean2(uint256 _amount, address _address) external onlyOwner(){\r\n        IERC20 tokenContract = IERC20(_address);\r\n        tokenContract.transfer(owner(), _amount);\r\n    }\r\n\r\n    function syncMufiRewards(uint256 _tokens) external payable{\r\n        require(SYNC_ALLOWED, \"TAC: Sync is disabled for now\");\r\n\r\n        emit Interest(_msgSender(), _tokens);\r\n    }\r\n\r\n    function syncTacs(uint256 _tokens) external payable{\r\n        require(SYNC_ALLOWED, \"TAC: Sync is disabled for now\");\r\n\r\n        emit Sync(_msgSender(), _tokens);\r\n    }\r\n\r\n    function syncAffiliateTacs(uint256 _tokens) external payable{\r\n        require(SYNC_AFFILIATE_ALLOWED, \"TAC: Sync is disabled for now\");\r\n\r\n        emit Sync(_msgSender(), _tokens);\r\n    }\r\n\r\n    function syncAffiliateRewards(uint256 _tokens) external payable{\r\n        require(SYNC_AFFILIATE_ALLOWED, \"TAC: Sync is disabled for now\");\r\n\r\n        emit AffiliateReward(_msgSender(), _tokens);\r\n    }\r\n\r\n    function unsyncMFRewards(uint256 amount) external {\r\n        amount = amount * 1 ether;\r\n\r\n        emit UnStake(_msgSender(), amount);\r\n    }\r\n\r\n    function unsyncMFRewardsWei(uint256 amount) external {\r\n\r\n        emit UnStake(_msgSender(), amount);\r\n    }\r\n\r\n    function sellTacs() external payable{\r\n        uint256 amount = msg.value;\r\n\r\n        require(SELL_ALLOWED, \"TAC: Sell is disabled for now\");\r\n\r\n        require(amount <= _maxSellBatch, \"TAC: invalid sell quantity\" );\r\n\r\n        uint256 currentPrice = getCurrentPrice();\r\n\r\n        //reduce tokens by SELL_COMMISSION\r\n\r\n        uint256 commission = uint256((amount * _sellCommission ) / 100000 );\r\n        amount = amount.sub( commission, \"Calculation error\");\r\n        uint256 wei_value = ((currentPrice * amount) / 1 ether);\r\n\r\n        _tokensSold = _tokensSold.add(amount);\r\n\r\n        emit XChainSell(_msgSender(), amount, wei_value, commission);\r\n\r\n    }\r\n\r\n    function SwapTacsToBnb(uint256 value) external {\r\n        require(SELL_ALLOWED, \"TAC: Sell is disabled for now\");\r\n\r\n        emit TokensConverted(_msgSender(), value);\r\n    }\r\n\r\n    function sendTacs(address payable _to, uint256 _amount) external onlyOwner(){\r\n        require(SELL_ALLOWED, \"TAC: Sell is disabled for now\");\r\n\r\n        require(address(this).balance >= _amount, \"TAC: invalid digits\");\r\n\r\n        _to.transfer(_amount);\r\n    }\r\n\r\n    function claimAchievement(address _from, uint256 _type) external {\r\n        emit AchievementClaimed(_from, _type);\r\n    }\r\n\r\n    function disableBuy() external onlyOwner{\r\n        BUY_ALLOWED = false;\r\n    }\r\n\r\n    function disableSell() external onlyOwner{\r\n        SELL_ALLOWED = false;\r\n    }\r\n\r\n    function disableSync() external onlyOwner{\r\n        SYNC_ALLOWED = false;\r\n    }\r\n\r\n    function enableSync() external onlyOwner{\r\n        SYNC_ALLOWED = true;\r\n    }\r\n\r\n    function disableAffiliateSync() external onlyOwner{\r\n        SYNC_AFFILIATE_ALLOWED = false;\r\n    }\r\n\r\n    function enableAffiliateSync() external onlyOwner{\r\n        SYNC_AFFILIATE_ALLOWED = true;\r\n    }\r\n\r\n    function enableBuy() external onlyOwner{\r\n        BUY_ALLOWED = true;\r\n    }\r\n\r\n    function enableSell() external onlyOwner{\r\n        SELL_ALLOWED = true;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"commissionReceiver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"cbfi\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"ndfi\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"mlfi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"collector\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"AchievementClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AffiliateReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"DepositedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Interest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OptedCBFi\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OptedMLFi\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OptedNDFi\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Reserved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_actor\",\"type\":\"address\"}],\"name\":\"TokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokensConverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_actor\",\"type\":\"address\"}],\"name\":\"TokensSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wei_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"}],\"name\":\"XChainSell\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SwapTacsToBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"addShareAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TachyonSale.MUFI\",\"name\":\"_mufi\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyMF\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TachyonSale.MUFI\",\"name\":\"_mufi\",\"type\":\"uint8\"}],\"name\":\"buyTACMufi\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"byebye\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"changeTachyonOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"}],\"name\":\"claimAchievement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"clean\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"clean2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"cleaner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"delShareAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableAffiliateSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAffiliateSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressBridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressSys\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressTacSys\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBridgePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCleanAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollectorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCommissionReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConversionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHardLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxBuyBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxNetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxSellBatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinNetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMulNetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShareAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShareBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSysPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTacs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendTacMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendTacs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAddressBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAddressSys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAddressTacSys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_per\",\"type\":\"uint256\"}],\"name\":\"setBridgePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bc\",\"type\":\"uint256\"}],\"name\":\"setBuyCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bf\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_clean\",\"type\":\"address\"}],\"name\":\"setCleanAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_collector\",\"type\":\"address\"}],\"name\":\"setCollectorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"rec\",\"type\":\"address\"}],\"name\":\"setCommissionReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cf\",\"type\":\"uint256\"}],\"name\":\"setConversionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"rec\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setHardLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMaxNetAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setMaxSellBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinNetAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMulNetAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sc\",\"type\":\"uint256\"}],\"name\":\"setSellCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bp\",\"type\":\"uint256\"}],\"name\":\"setShareBP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_per\",\"type\":\"uint256\"}],\"name\":\"setSysPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"syncAffiliateRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"syncAffiliateTacs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"syncMufiRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"syncTacs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unsyncMFRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unsyncMFRewardsWei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_share\",\"type\":\"uint256\"}],\"name\":\"updateShareAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TachyonSale", "CompilerVersion": "v0.7.5+commit.eb77ed08", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000026fc452e51808e93d8eb87afe2cd94e31326dac800000000000000000000000026fc452e51808e93d8eb87afe2cd94e31326dac800000000000000000000000026fc452e51808e93d8eb87afe2cd94e31326dac800000000000000000000000026fc452e51808e93d8eb87afe2cd94e31326dac800000000000000000000000026fc452e51808e93d8eb87afe2cd94e31326dac800000000000000000000000011a5cdbc321d919ef089c9145b16d45525bb725800000000000000000000000026fc452e51808e93d8eb87afe2cd94e31326dac8", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1bfd310c8bdecece2bb8e01083bbc8f9cff9da398d89ed2d1446ee46acb936cc"}