{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            \r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address public cdeadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, cdeadAddress);\r\n        _owner = cdeadAddress;\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract myIDNO is Context, IERC20, Ownable {\r\n    \r\n\tusing SafeMath for uint256;\r\n\tusing Address for address;\r\n\r\n\tstring private _name = \"IDNO\";\r\n\tstring private _symbol = \"IDNO\";\r\n\tuint8 private _decimals = 18;\r\n\taddress public deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\taddress public _LPAddress;\r\n\taddress public Firstadd;\r\n\t\r\n\tIERC20 public _LP;  //default\r\n\r\n\tmapping (address => uint256) _balances;\r\n\tmapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n\tuint256 private _totalSupply = 333333333 * 10**_decimals;\r\n\tuint256 private _fee = 100;\r\n\r\n \tmapping (address => uint256) public _swapPair;\r\n\r\n \tmapping (address => address) public _linker;\r\n\tmapping (address => uint256) public _wflist;\r\n\tmapping (address => uint256) public _lpday;\r\n\tmapping (address => uint256) public _lpwin;\r\n\tmapping (address => uint256) public _lpwithdrow;\r\n\tmapping (address => uint256) public _lplist;\r\n\tmapping (address => uint256) public _lpaddid;\r\n\tmapping (uint256 => address) public _lpidadd;\r\n\tuint256 public _lpid = 0;\r\n\tuint256 public _lpupip = 1;\r\n\tmapping (address => uint256) public _bagday;\r\n\tmapping (address => uint256) public _bagwin;\r\n\tmapping (address => uint256) public _wdday;\r\n\tmapping (address => uint256) public _addlevel;\r\n\tmapping (address => mapping (uint256 => uint256)) public _addlevelc;\r\n\r\n\tconstructor (address _firstadd) {\r\n\t\t_balances[address(this)] = _totalSupply;\r\n\t\temit Transfer(address(0), address(this), _totalSupply);\r\n\t\tuint256 _firstvalue = 33333333 * 10**_decimals;\r\n\t\t_basicTransfer(address(this), _firstadd, _firstvalue);\r\n\t\t_wflist[_firstadd] = 1;\r\n\t\t_wflist[address(this)] = 1;\r\n\t}\r\n\r\n\tfunction setPair(address _Addr, uint256 _v) public onlyOwner {\r\n\t\t_swapPair[_Addr] = _v;\r\n\t}\r\n\tfunction setLP(address _LpAdd) public onlyOwner {\r\n\t\t_LPAddress = _LpAdd;\r\n\t\t_LP = IERC20(_LpAdd); \r\n\t}\r\n\r\n\r\n\tfunction name() public view returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public view returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public view returns (uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n\r\n\tfunction totalSupply() public view override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _approve(address owner, address spender, uint256 amount) private {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction getCirculatingSupply() public view returns (uint256) {\r\n\t\treturn _totalSupply.sub(balanceOf(deadAddress));\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _transfer(address sender, address recipient, uint256 amount) private returns (bool) {\r\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\t\tif (sender==address(this)){ \r\n\t\t\treturn _basicTransfer(sender, recipient, amount); \r\n\t\t}else{\r\n\t\t\taddress _feeadd = recipient;\r\n\t\t\tuint256 istrade = 0;\r\n\t\t\tuint256 finalAmount = amount;\r\n\t\t\tif (_linker[recipient] == address(0) && amount>0 && _swapPair[sender]==0 && _swapPair[recipient]==0){\r\n\t\t\t\t_linker[recipient] = sender;\r\n\t\t\t\t_bagday[recipient] = block.timestamp;\r\n\t\t\t\t_levelup(recipient);\r\n\t\t\t}\r\n\t\t\tif (_swapPair[sender]>0){\r\n\t\t\t\t_lplist[recipient] = 0;\r\n\t\t\t\tistrade = 1;\r\n\t\t\t}\r\n\t\t\tif (_swapPair[recipient]>0){\r\n\t\t\t\t_lplist[sender] = 0;\r\n\t\t\t\t_feeadd = sender;\r\n\t\t\t\tistrade = 1;\r\n\t\t\t}\r\n\t\t\tif (amount>0){\r\n\t\t\t\tif (istrade>0){\r\n\t\t\t\t\t_bagupWin(_feeadd);\r\n\t\t\t\t}else{\r\n\t\t\t\t\t_bagupWin(sender);\r\n\t\t\t\t\t_bagupWin(recipient);\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t\tif (_wflist[sender]==0 && _wflist[recipient]==0){\r\n\t\t\t\t\tuint256 _feeamount = amount.mul(_fee).div(1000);\t\t\t\t\r\n\t\t\t\t\t_transferFee(sender, _feeamount);\r\n\t\t\t\t\tfinalAmount = amount.sub(_feeamount);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_balances[recipient] = _balances[recipient].add(finalAmount);\r\n\t\t\t\t_balances[sender] = _balances[sender].sub(finalAmount, \"Insufficient Balance\");\r\n\t\t\t\temit Transfer(sender, recipient, finalAmount);\r\n\r\n\t\t\t\tif (_swapPair[sender]==0){\r\n\t\t\t\t\t_lpupdate(sender);\t\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\t_lpupdate(sender);\r\n\t\t\t\t_lpupdateLevel();\r\n\t\t\t\t_WinWithdrow(sender);\r\n\t\t\t\temit Transfer(sender, recipient, amount);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _WinWithdrow(address sender) internal returns (bool) {\r\n\t\tuint256 _nday = ((block.timestamp).sub(_wdday[sender])).div(86400);\r\n\t\tif (_nday>=7){\r\n\t\t\t_bagupWin(sender);\r\n\t\t\t_lpupWin(sender);\r\n\r\n\t\t\tuint256 _nwin = _lpwin[sender];\r\n\t\t\tuint256 _nwinall = _lpwin[sender].add(_bagwin[sender]);\r\n\t\t\tif (_nwin>0){\r\n\t\t\t\t_balances[address(this)] = _balances[address(this)].sub(_nwin, \"Insufficient Balance\");\r\n\t\t\t\t_balances[sender] = _balances[sender].add(_nwin);\r\n\t\t\t\temit Transfer(address(this), sender, _nwin);\r\n\t\t\t\t_lpwin[sender] = 0;\r\n\t\t\t}\r\n\t\t\t_nwin = _bagwin[sender];\r\n\t\t\tif (_nwin>0){\r\n\t\t\t\t_balances[address(this)] = _balances[address(this)].sub(_nwin, \"Insufficient Balance\");\r\n\t\t\t\t_balances[sender] = _balances[sender].add(_nwin);\r\n\t\t\t\temit Transfer(address(this), sender, _nwin);\r\n\t\t\t\t_bagwin[sender] = 0;\r\n\t\t\t}\r\n\t\t\t_wdday[sender] = block.timestamp;\r\n\t\t\tif (_nwinall>0){\r\n\t\t\t\t_WinWithdrowFee(sender, _nwinall);\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t\treturn true;\r\n\t}\r\n\tfunction _lpupWin(address sender) internal returns (bool) {\r\n\t\tuint256 _nday = ((block.timestamp).sub(_lpday[sender]));\r\n\t\tif (_nday>0 && _lplist[sender]>0){\r\n\t\t\tuint256 _nwin = _lplist[sender].mul(_nday).mul(15).div(1000).div(86400);\r\n\t\t\t_lpwin[sender] = _lpwin[sender].add(_nwin);\r\n\t\t}\r\n\t\t_lpday[sender] = block.timestamp;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _bagupWin(address _addr) internal returns (bool) {\r\n\t\tuint256 _nwin = balanceOf(_addr);\r\n\t\tuint256 _nday = (block.timestamp).sub(_bagday[_addr]);\r\n\t\tif (_nday>0 && _nwin>0 && _addr!= deadAddress){\r\n\t\t\t_nwin = _nwin.mul(_nday).mul(10).div(1000).div(86400);\r\n\t\t\t_bagwin[_addr] = _bagwin[_addr].add(_nwin);\r\n\t\t}\r\n\t\t_bagday[_addr] = block.timestamp;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _lpupdate(address sender) internal returns (bool) {\r\n\t\tif (_LPAddress!=address(0)){\r\n\t\t\tuint256 _oldlp = _lplist[sender];\r\n\t\t\tuint256 _newlp = _LP.balanceOf(sender);\r\n\t\t\tif (_oldlp!=_newlp){\r\n\t\t\t\t_lpupWin(sender);\r\n\t\t\t\t_lplist[sender] = _newlp;\r\n\t\t\t\tif (_lpaddid[sender]==0){\r\n\t\t\t\t\t_lpid = _lpid+1;\r\n\t\t\t\t\t_lpaddid[sender] = _lpid;\r\n\t\t\t\t\t_lpidadd[_lpid] = sender;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _lpupdateLevel() internal returns (bool) {\r\n\t\tif (_lpid>0 && _LPAddress!=address(0)){\r\n\t\t\tuint256 _oldlp = 0;\r\n\t\t\tuint256 _newlp = 0;\r\n\t\t\taddress _addr;\r\n\t\t\tuint256 _upidmin = 1;\r\n\t\t\tuint256 _upidmax = _lpupip + 100;\r\n\t\t\tif (_upidmax>_lpid){\r\n\t\t\t\t_upidmax = _lpid;\r\n\t\t\t}\r\n\t\t\tif (_upidmax>100){\r\n\t\t\t\t_upidmin = _upidmax - 100;\r\n\t\t\t}\r\n\t\t\twhile (_upidmin<=_upidmax){\r\n\t\t\t\t_addr = _lpidadd[_upidmin];\r\n\t\t\t\tif (_addr != address(0)){\r\n\t\t\t\t\t_oldlp = _lplist[_addr];\r\n\t\t\t\t\t_newlp = _LP.balanceOf(_addr);\t\r\n\t\t\t\t\tif (_oldlp!=_newlp){\r\n\t\t\t\t\t\t_lpupWin(_addr);\r\n\t\t\t\t\t\t_lplist[_addr] = _newlp;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t_upidmin = _upidmin+1;\r\n\t\t\t}\r\n\t\t\t_lpupip = _upidmax;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n\t\t_bagupWin(recipient);\r\n\t\t_balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\t\t_balances[recipient] = _balances[recipient].add(amount);\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\r\n\tfunction _levelup(address _addr) internal returns (bool) { \r\n\t\taddress _linkadd = _linker[_addr];\r\n\t\tfor (uint256 i=1;i<=5;i++){\r\n\t\t\tif (_linkadd != address(0)){\r\n\t\t\t\t_addlevelc[_linkadd][i] = _addlevelc[_linkadd][i] + 1;\r\n\t\t\t\tif (_addlevelc[_linkadd][i]>=5 && _addlevel[_linkadd]<i){\r\n\t\t\t\t\t_addlevel[_linkadd] = i;\r\n\t\t\t\t\t_linkadd = _linker[_linkadd];\r\n\t\t\t\t}else{\r\n\t\t\t\t\ti = 6;\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\ti = 6;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _WinWithdrowFee(address sender, uint256 afee) internal returns (bool) {   \r\n\t\tuint256 _linkfee = 0; \r\n\t\taddress _linkadd = _linker[sender];\r\n\t\tfor (uint256 i=1;i<=5;i++){\r\n\t\t\tif (_linkadd != address(0) && _addlevel[_linkadd]>=i){\r\n\t\t\t\t_linkfee = afee.mul(30).div(1000);\r\n\t\t\t\tif (i==1){\r\n\t\t\t\t\t_linkfee = afee.mul(300).div(1000);\r\n\t\t\t\t}else if (i==2){\r\n\t\t\t\t\t_linkfee = afee.mul(200).div(1000);\r\n\t\t\t\t}else if (i==3){\r\n\t\t\t\t\t_linkfee = afee.mul(100).div(1000);\r\n\t\t\t\t}else if (i==4){\r\n\t\t\t\t\t_linkfee = afee.mul(50).div(1000);\r\n\t\t\t\t}\r\n\t\t\t\t_basicTransfer(address(this), _linkadd, _linkfee);\r\n\t\t\t}\r\n\t\t\t_linkadd = _linker[_linkadd];\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _transferFee(address sender, uint256 afee) internal returns (bool) {   \r\n\t\tuint256 _linkfee = 0; \r\n\t\taddress _linkadd = _linker[sender];\r\n\t\tuint256 _burnfee = 0;\r\n\t\tfor (uint256 i=1;i<=5;i++){\r\n\t\t\tif (_linkadd != address(0) && _addlevel[_linkadd]>=i){\r\n\t\t\t\t_linkfee = afee.mul(50).div(1000);\r\n\t\t\t\tif (i==1){\r\n\t\t\t\t\t_linkfee = afee.mul(200).div(1000);\r\n\t\t\t\t}else if (i==2){\r\n\t\t\t\t\t_linkfee = afee.mul(150).div(1000);\r\n\t\t\t\t}else if (i==3){\r\n\t\t\t\t\t_linkfee = afee.mul(120).div(1000);\r\n\t\t\t\t}else if (i==4){\r\n\t\t\t\t\t_linkfee = afee.mul(80).div(1000);\r\n\t\t\t\t}\r\n\t\t\t\t_burnfee = _burnfee.add(_linkfee);\r\n\t\t\t\t_basicTransfer(sender, _linkadd, _linkfee);\r\n\t\t\t}\r\n\t\t\t_linkadd = _linker[_linkadd];\t\r\n\t\t}\r\n\t\t_basicTransfer(sender, deadAddress, afee.sub(_burnfee));\r\n\t\treturn true;\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_firstadd\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Firstadd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_LP\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_LPAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_addlevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_addlevelc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_bagday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_bagwin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_linker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lpaddid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lpday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_lpidadd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lplist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpupip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lpwin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lpwithdrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_wdday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_wflist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cdeadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LpAdd\",\"type\":\"address\"}],\"name\":\"setLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_v\",\"type\":\"uint256\"}],\"name\":\"setPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "myIDNO", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006806308694f268108bcef331457e5644bc7de721", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1a8c392848e826064cdb2023292870340def9ff40cc5e8090ef2a564c09a262c"}