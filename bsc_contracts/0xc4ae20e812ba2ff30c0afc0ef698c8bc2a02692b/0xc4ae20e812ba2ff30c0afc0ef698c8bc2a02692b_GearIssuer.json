{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return recover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return recover(hash, r, vs);\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (282): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"/src/contracts/GearIssuer.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nlibrary Math {\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\ninterface IBEP20 { \\n\\tfunction totalSupply() external view returns (uint256);\\n\\tfunction balanceOf(address account) external view returns (uint256);\\n\\tfunction transfer(address recipient, uint256 amount) external returns (bool);\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\tfunction transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);\\n\\tfunction mint(address account, uint256 amount) external returns (bool);\\n\\tfunction burn(address account, uint256 amount) external returns (bool);\\n\\tfunction addOperator(address minter) external returns (bool);\\n\\tfunction removeOperator(address minter) external returns (bool);\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\tevent Approval( address indexed owner, address indexed spender, uint256 value );\\n}\\nlibrary SafeBEP20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    function safeTransfer(IBEP20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n    function safeTransferFrom(IBEP20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n    function safeApprove(IBEP20 token, address spender, uint256 value) internal {\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n    function safeIncreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n    function safeDecreaseAllowance(IBEP20 token, address spender, uint256 value) internal {\\n        // uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeBEP20: decreased allowance below zero\\\");\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n    function callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        require(address(token).isContract(), \\\"SafeBEP20: call to non-contract\\\");\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeBEP20: low-level call failed\\\");\\n        if (returndata.length > 0) { \\n            require(abi.decode(returndata, (bool)), \\\"SafeBEP20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n        return c;\\n    }\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        return c;\\n    }\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n}\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n} \\ninterface IERC165 {\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\ninterface IERC721 is IERC165 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n    function safeTransferFrom( address from, address to, uint256 tokenId) external;\\n    function transferFrom( address from,address to,uint256 tokenId) external;\\n    function approve(address to, uint256 tokenId) external;\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n    function setApprovalForAll(address operator, bool _approved) external;\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n    function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external;\\n\\n    struct GearInfo {string gearName; string gearType; string gearClass; string gearTier;}\\n    function getGear(uint256 _tokenId) external view returns (GearInfo memory);\\n    function safeMint(address _to, uint256 _tokenId) external;\\n    function burn(address _from, uint256 _tokenId) external;\\n    function addGear(uint256 tokenId, string memory gearName, string memory gearType, string memory gearClass, string memory gearTier) external;\\n    function editTier(uint256 tokenId, string memory _tier) external;\\n    function deleteGear(uint256 tokenId) external;\\n}\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) { return msg.sender;}\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this;\\n        return msg.data;\\n    }\\n}\\nabstract contract ERC165 is IERC165 {\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) { return interfaceId == type(IERC165).interfaceId; }\\n}\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n    mapping(bytes32 => RoleData) private _roles;\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool){\\n        return\\n            interfaceId == type(IAccessControl).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n    function hasRole(bytes32 role, address account) public view override returns (bool) { return _roles[role].members[account]; }\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) { return _roles[role].adminRole; }\\n    function grantRole(bytes32 role, address account) public virtual override { \\n        require( hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n        _grantRole(role, account);\\n    }\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        require( hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n        _revokeRole(role, account);\\n    }\\n    function renounceRole(bytes32 role, address account) public virtual override\\n    {\\n        require( account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\" );\\n        _revokeRole(role, account);\\n    }\\n    function _setupRole(bytes32 role, address account) internal virtual { _grantRole(role, account); }\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\ncontract GearIssuer is AccessControl {\\n    using SafeMath for uint; \\n    using SafeBEP20 for IBEP20;\\n    IERC721 public gearNFT;\\n    bytes32 public constant CREATOR_ADMIN_SERVER = keccak256(\\\"CREATOR_ADMIN_SERVER\\\");\\n    string stringNull = \\\"\\\";\\n    constructor( address minter, address _gearNFT) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n        _setupRole(CREATOR_ADMIN_SERVER, minter);\\n\\t\\tgearNFT = IERC721(_gearNFT); // Gear Assets\\n\\t}\\n    event mintgear(\\n        address Owner,\\n        uint256 tokenId,\\n        string gearName,\\n        string gearType,\\n        string gearClass,\\n        string gearTier\\n    );\\n    string[] public gearTier; // tier information\\n    string[] public gearType; // type information\\n    function addGearTier(string[] memory _gearTier) public {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, address(msg.sender)), \\\"Caller is not a owner\\\");\\n        for(uint256 i =0; i < _gearTier.length ; i++) {\\n            gearTier.push(_gearTier[i]);\\n        }\\n    }\\n    function editGearTier(uint256 _id, string memory _gearTier) public {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, address(msg.sender)), \\\"Caller is not a owner\\\");\\n        gearTier[_id] = _gearTier;\\n    }\\n    function addGearType(string[] memory _gearType) public {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, address(msg.sender)), \\\"Caller is not a owner\\\");\\n        for(uint256 i =0; i < _gearType.length ; i++) {\\n            gearType.push(_gearType[i]);\\n        }\\n    }\\n    function editGearType(uint256 _id, string memory _gearType) public {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, address(msg.sender)), \\\"Caller is not a owner\\\");\\n        gearType[_id] = _gearType;\\n    }\\n    function queryNumberTier(string memory _tier) public view returns(uint256) {\\n        uint256 result = 100;\\n        for(uint256 i = 0 ; i < gearTier.length ; i ++) {\\n            if( keccak256(bytes(gearTier[i])) == keccak256(bytes(_tier)) ) {\\n                result = i;\\n            }\\n        }\\n        return result;\\n    }\\n    mapping(uint256 => bool) public idContract;\\n    mapping(bytes => bool) public usedSignatures;\\n    mapping(address => bool) public admin;\\n    function addAdmin(address[] memory _admin) public {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, address(msg.sender)), \\\"Caller is not a owner\\\");\\n        // admin[address(_admin)] = true;\\n        for(uint256 i = 0; i < _admin.length; i++){\\n            admin[address(_admin[i])] = true;\\n        }\\n    }\\n    function cancelSignature(bytes[] calldata signature, uint256 _idContract) public {\\n        require(hasRole(CREATOR_ADMIN_SERVER, address(msg.sender)), \\\"Caller is not a admin\\\");\\n        require(!idContract[_idContract], \\\"ID used\\\");\\n        for(uint256 i =0; i < signature.length; i++){\\n            usedSignatures[signature[i]] = true;\\n        }\\n        idContract[_idContract] = true;\\n    }\\n    function mintGear(\\n        uint256 _gearId,\\n        string memory _gearName,\\n        uint256 _gearType,\\n        string memory _gearClass,\\n        uint256 _gearTier,\\n        bytes calldata signature\\n    ) external {\\n        require(\\n            !usedSignatures[signature],\\n            \\\"Mint: signature used.\\\"\\n        );\\n        bytes32 criteriaMessageHash = getMessageHash(\\n            msg.sender,\\n            _gearId,\\n            _gearName,\\n            _gearType,\\n            _gearClass,\\n            _gearTier\\n        );\\n        bytes32 ethSignedMessageHash = ECDSA.toEthSignedMessageHash(\\n            criteriaMessageHash\\n        );\\n        require(\\n            admin[ECDSA.recover(ethSignedMessageHash, signature)],\\n            \\\"Mint: invalid seller signature\\\"\\n        );\\n\\n        require(_gearType >= 0 && _gearType <  gearType.length, \\\"Gear Type not found\\\");\\n        require(_gearTier >= 0 && _gearTier <  gearTier.length, \\\"Gear Tier not found\\\");\\n        gearNFT.safeMint(address(msg.sender), _gearId);\\n        gearNFT.addGear(_gearId, _gearName, gearType[_gearType], _gearClass, gearTier[_gearTier]);\\n        emit mintgear(\\n            msg.sender,\\n            _gearId,\\n            _gearName,\\n            gearType[_gearType],\\n            _gearClass,\\n            gearTier[_gearTier]\\n        );\\n        usedSignatures[signature] = true;\\n    }\\n    \\n    function toEthSignedMessageHash(bytes32 _messageHash)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    _messageHash\\n                )\\n            );\\n    }\\n    function getMessageHash(\\n        address _owner,\\n        uint256 _gearId,\\n        string memory _gearName,\\n        uint256 _gearType,\\n        string memory _gearClass,\\n        uint256 _gearTier\\n    ) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    _owner,\\n                    _gearId,\\n                    _gearName,\\n                    _gearType,\\n                    _gearClass,\\n                    _gearTier\\n                )\\n            );\\n    }\\n    \\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gearNFT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gearName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gearType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gearClass\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gearTier\",\"type\":\"string\"}],\"name\":\"mintgear\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CREATOR_ADMIN_SERVER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_admin\",\"type\":\"address[]\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_gearTier\",\"type\":\"string[]\"}],\"name\":\"addGearTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_gearType\",\"type\":\"string[]\"}],\"name\":\"addGearType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"signature\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"_idContract\",\"type\":\"uint256\"}],\"name\":\"cancelSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_gearTier\",\"type\":\"string\"}],\"name\":\"editGearTier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_gearType\",\"type\":\"string\"}],\"name\":\"editGearType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gearNFT\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gearTier\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gearType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gearId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_gearName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_gearType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_gearClass\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_gearTier\",\"type\":\"uint256\"}],\"name\":\"getMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gearId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_gearName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_gearType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_gearClass\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_gearTier\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mintGear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tier\",\"type\":\"string\"}],\"name\":\"queryNumberTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_messageHash\",\"type\":\"bytes32\"}],\"name\":\"toEthSignedMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"usedSignatures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GearIssuer", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000d998ea274c1edcce9ee97182a112735441f21dbe00000000000000000000000008473a63b0f0cbabbdd3c846806531ec2c3c7371", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}