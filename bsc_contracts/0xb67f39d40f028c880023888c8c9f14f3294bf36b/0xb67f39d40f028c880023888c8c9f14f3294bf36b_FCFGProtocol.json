{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"FCFGProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./Math.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\nimport \\\"./IReferral.sol\\\";\\r\\n\\r\\ncontract Wrap {\\r\\n    IERC20 public wzdao;\\r\\n    IERC20 public usdt;\\r\\n\\r\\n    constructor(IERC20 wzdao_, IERC20 usdt_) {\\r\\n        wzdao = wzdao_;\\r\\n        usdt = usdt_;\\r\\n    }\\r\\n\\r\\n    function withdraw() external {\\r\\n        uint256 usdtBalance = usdt.balanceOf(address(this));\\r\\n        if (usdtBalance \\u003e 0) {\\r\\n            usdt.transfer(address(wzdao), usdtBalance);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract ERC20Detailed is IERC20 {\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals = 18;\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract FCFGProtocol is ERC20Detailed, Ownable {\\r\\n\\r\\n    using Math for uint256;\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    IReferral public immutable referral;\\r\\n    Wrap public immutable wrap;\\r\\n\\r\\n    address public constant DEAD = 0x000000000000000000000000000000000000dEaD;\\r\\n    address public constant ZERO = 0x0000000000000000000000000000000000000000;\\r\\n\\r\\n    uint256 private immutable TOTAL_GONS;\\r\\n    uint256 public immutable MAX_SUPPLY;\\r\\n    uint256 private constant MAX_UINT256 = type(uint256).max;\\r\\n\\r\\n    uint256 private immutable _lpFeeRate = 1;\\r\\n    uint256 public immutable marketingFeeRate1 = 2;\\r\\n    uint256 public immutable marketingFeeRate2 = 0;\\r\\n    uint256 public immutable burnFeeRate = 1;\\r\\n    //uint256[3] public referralFeeRates = [2];\\r\\n    uint256[2] public referralFeeRates = [1,2];\\r\\n\\r\\n    address public lpWallet;\\r\\n    address public marketingWallet1;\\r\\n    address public marketingWallet2;\\r\\n    uint256 public gonsLPFee;\\r\\n\\r\\n    IUniswapV2Router02 public immutable pancakeSwapRouter;\\r\\n    IERC20 public immutable usdt;\\r\\n    address public immutable pair;\\r\\n\\r\\n    uint256 public startTradingTime;\\r\\n    uint256 public swapInterval = 5 minutes;\\r\\n    uint256 private _lastSwapTime;\\r\\n    bool private _swapping = false;\\r\\n    uint256 public immutable rebaseInterval = 15 minutes;\\r\\n    uint256 public immutable rebaseRate = 51954907016092;\\r\\n    uint256 private _lastRebasedTime;\\r\\n    uint256 private _totalSupply;\\r\\n    uint256 private _gonsPerFragment;\\r\\n    uint256 public holdCount;\\r\\n    uint256 public noTakeFeeHoldCondition = 100000;\\r\\n    uint256 public maxBurn = 300000 * 10 ** decimals();\\r\\n\\r\\n    uint256 private _pairBalance;\\r\\n    mapping(address =\\u003e uint256) private _gonsBalances;\\r\\n    mapping(address =\\u003e bool) private _isExcludedFromFees;\\r\\n    // mapping(address =\\u003e bool) private _isBlackLists;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowedFragments;\\r\\n    mapping(uint256 =\\u003e uint256) private _todayBasePrices;\\r\\n    mapping(address =\\u003e bool) private _isHolds;\\r\\n    mapping(address=\\u003eaddress) private _wReferrals;\\r\\n\\r\\n    bool public batchKillBlockEnabled = false;\\r\\n\\r\\n    modifier validRecipient(address to) {\\r\\n        require(to != address(0x0));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        IUniswapV2Router02 pancakeSwapRouter_,\\r\\n        IERC20 usdt_,\\r\\n        IReferral referral_,\\r\\n        uint256 initSupply_,\\r\\n        uint256 maxSupply_,\\r\\n        uint256 startTradingTime_,\\r\\n        address lpWallet_,\\r\\n        address makretingWallet1_,\\r\\n        address makretingWallet2_\\r\\n    ) ERC20Detailed(name_, symbol_) {\\r\\n        pancakeSwapRouter = pancakeSwapRouter_;\\r\\n        usdt = usdt_;\\r\\n        referral = referral_;\\r\\n        lpWallet = lpWallet_;\\r\\n        marketingWallet1 = makretingWallet1_;\\r\\n        marketingWallet2 = makretingWallet2_;\\r\\n        setStartTradingTime(startTradingTime_);\\r\\n        wrap = new Wrap(IERC20(address(this)), usdt);\\r\\n        pair = IUniswapV2Factory(pancakeSwapRouter.factory()).createPair(\\r\\n            address(usdt),\\r\\n            address(this)\\r\\n        );\\r\\n        _totalSupply = initSupply_ * 10**decimals();\\r\\n        MAX_SUPPLY = maxSupply_ * 10**decimals();\\r\\n        TOTAL_GONS = MAX_UINT256/1e10 - (MAX_UINT256/1e10 % _totalSupply);\\r\\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\r\\n        _gonsBalances[msg.sender] = TOTAL_GONS;\\r\\n        emit Transfer(address(0x0), msg.sender, _totalSupply);\\r\\n        setHold(msg.sender);\\r\\n        _isExcludedFromFees[msg.sender] = true;\\r\\n        _isExcludedFromFees[address(this)] = true;\\r\\n        _isExcludedFromFees[DEAD] = true;\\r\\n        _allowedFragments[address(this)][\\r\\n            address(pancakeSwapRouter)\\r\\n        ] = MAX_UINT256;\\r\\n    }\\r\\n\\r\\n    function getTodayBasePrice(uint256 _k) external view returns (uint256) {\\r\\n        return _todayBasePrices[_k];\\r\\n    }\\r\\n\\r\\n    function isExcludedFromFee(address _address) external view returns (bool) {\\r\\n        return _isExcludedFromFees[_address];\\r\\n    }\\r\\n\\r\\n    // function isBlackList(address _address) external view returns (bool) {\\r\\n    //     return _isBlackLists[_address];\\r\\n    // }\\r\\n\\r\\n    function isHold(address _address) public view returns (bool) {\\r\\n        return _isHolds[_address];\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 value)\\r\\n        external\\r\\n        override\\r\\n        validRecipient(to)\\r\\n        returns (bool)\\r\\n    {\\r\\n        _transferFrom(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) external override validRecipient(to) returns (bool) {\\r\\n        if (_allowedFragments[from][msg.sender] != MAX_UINT256) {\\r\\n            _allowedFragments[from][msg.sender] = _allowedFragments[from][\\r\\n                msg.sender\\r\\n            ].sub(value, \\\"Insufficient Allowance\\\");\\r\\n        }\\r\\n        _transferFrom(from, to, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner_, address spender)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _allowedFragments[owner_][spender];\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\r\\n        external\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\\r\\n        if (subtractedValue \\u003e= oldValue) {\\r\\n            _allowedFragments[msg.sender][spender] = 0;\\r\\n        } else {\\r\\n            _allowedFragments[msg.sender][spender] = oldValue.sub(\\r\\n                subtractedValue\\r\\n            );\\r\\n        }\\r\\n        emit Approval(\\r\\n            msg.sender,\\r\\n            spender,\\r\\n            _allowedFragments[msg.sender][spender]\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue)\\r\\n        external\\r\\n        returns (bool)\\r\\n    {\\r\\n        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][\\r\\n            spender\\r\\n        ].add(addedValue);\\r\\n        emit Approval(\\r\\n            msg.sender,\\r\\n            spender,\\r\\n            _allowedFragments[msg.sender][spender]\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 value)\\r\\n        external\\r\\n        override\\r\\n        returns (bool)\\r\\n    {\\r\\n        return _approve(msg.sender, spender, value);\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address sender,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) private returns (bool) {\\r\\n        _allowedFragments[sender][spender] = value;\\r\\n        emit Approval(sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address who) public view override returns (uint256) {\\r\\n        return\\r\\n            who == pair\\r\\n                ? _pairBalance\\r\\n                : _gonsBalances[who].div(_gonsPerFragment);\\r\\n    }\\r\\n\\r\\n    function _basicTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 gonAmount\\r\\n    ) internal returns (bool) {\\r\\n        uint256 amount = gonAmount.div(_gonsPerFragment);\\r\\n        if (from == pair) {\\r\\n            _pairBalance = _pairBalance.sub(amount);\\r\\n        } else {\\r\\n            _gonsBalances[from] = _gonsBalances[from].sub(gonAmount);\\r\\n        }\\r\\n        if (to == pair) {\\r\\n            _pairBalance = _pairBalance.add(amount);\\r\\n        } else {\\r\\n            _gonsBalances[to] = _gonsBalances[to].add(gonAmount);\\r\\n        }\\r\\n        emit Transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _batchKillBlock(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        uint256 batchKillBlockRateReal;\\r\\n        uint256 batchKillBlockAmount;\\r\\n        batchKillBlockRateReal = _batchKillBlockRateReal();\\r\\n        batchKillBlockAmount = amount.mul(batchKillBlockRateReal).div(10000);\\r\\n        if (batchKillBlockAmount \\u003e 0) {\\r\\n            _basicTransfer(from, address(this), batchKillBlockAmount.mul(_gonsPerFragment));\\r\\n        }\\r\\n        _basicTransfer(from, to, amount.sub(batchKillBlockAmount).mul(_gonsPerFragment));\\r\\n    }\\r\\n\\r\\n    function _batchKillBlockRateReal() view private returns (uint256) {\\r\\n        require(block.timestamp \\u003e= startTradingTime, \\\"CDBLMProtocol: trade not started\\\");\\r\\n        require(startTradingTime + 3 minutes \\u003e block.timestamp, \\\"CDBLMProtocol: The batchKillBlockRateReal is not in the recent time range\\\");\\r\\n\\r\\n        uint256 batchKillBlockRateReal;\\r\\n        if(\\r\\n            block.timestamp \\u003e= startTradingTime \\u0026\\u0026\\r\\n            startTradingTime + 1 minutes \\u003e block.timestamp\\r\\n        ) {\\r\\n            batchKillBlockRateReal = 2000;\\r\\n        } else if(\\r\\n            block.timestamp \\u003e= startTradingTime + 1 minutes \\u0026\\u0026\\r\\n            startTradingTime + 3 minutes \\u003e block.timestamp\\r\\n        ) {\\r\\n            batchKillBlockRateReal = 1000;\\r\\n        }\\r\\n\\r\\n        return batchKillBlockRateReal;\\r\\n    }\\r\\n\\r\\n    function _transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal returns (bool result) {\\r\\n        if (_swapping) {\\r\\n            return\\r\\n                _basicTransfer(sender, recipient, amount.mul(_gonsPerFragment));\\r\\n        }\\r\\n        require(_isStartTrade(sender, recipient), \\\"Trade not start\\\");\\r\\n\\r\\n        // require(\\r\\n        //     !_isBlackLists[sender] \\u0026\\u0026 !_isBlackLists[recipient],\\r\\n        //     \\\"Is black list\\\"\\r\\n        // );\\r\\n\\r\\n        _deliveryCurrentProce();\\r\\n\\r\\n        if(!_isSwap(sender,recipient) \\u0026\\u0026 !recipient.isContract()){\\r\\n            _ref(sender,recipient);\\r\\n            _acceptRef(sender,recipient);\\r\\n        }\\r\\n\\r\\n        if (!_isExcludedFromFees[sender] \\u0026\\u0026 !_isExcludedFromFees[recipient]) {\\r\\n            if(\\r\\n                startTradingTime + 3 minutes \\u003e block.timestamp \\u0026\\u0026\\r\\n                startTradingTime \\u003c= block.timestamp \\u0026\\u0026\\r\\n                batchKillBlockEnabled\\r\\n            ) {\\r\\n                _batchKillBlock(sender, recipient, amount);\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (_shouldRebase()) {\\r\\n            _rebase();\\r\\n        }\\r\\n\\r\\n        if (_shouldSwap(sender, recipient)) {\\r\\n            _swap();\\r\\n        }\\r\\n\\r\\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\\r\\n        if (_shouldTakeFee(sender, recipient)) {\\r\\n            if (sender != pair) {\\r\\n                uint256 minHolderAmount = _gonsBalanceOf(sender).div(100).mul(\\r\\n                    99\\r\\n                );\\r\\n                if (gonAmount \\u003e minHolderAmount) {\\r\\n                    gonAmount = minHolderAmount;\\r\\n                }\\r\\n            }\\r\\n            gonAmount = _takeFee(sender, recipient, gonAmount);\\r\\n        }\\r\\n        result = _basicTransfer(sender, recipient, gonAmount);\\r\\n        setHold(sender);\\r\\n        setHold(recipient);\\r\\n    }\\r\\n\\r\\n    function _isStartTrade(address sender, address recipient)\\r\\n        private\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            !_isSwap(sender, recipient) ||\\r\\n            _isExcludedFromFees[sender] ||\\r\\n            _isExcludedFromFees[recipient] ||\\r\\n            block.timestamp \\u003e= startTradingTime;\\r\\n    }\\r\\n\\r\\n    function _shouldTakeFee(address from, address to)\\r\\n        private\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        if (\\r\\n            _isExcludedFromFees[from] ||\\r\\n            _isExcludedFromFees[to] ||\\r\\n            _swapping ||\\r\\n            holdCount \\u003e= noTakeFeeHoldCondition\\r\\n        ) {\\r\\n            return false;\\r\\n        } else {\\r\\n            return true;\\r\\n            // return (from == pair || to == pair);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _isSwap(address _from,address _to)private view returns(bool){\\r\\n        return pair == _from || pair == _to;\\r\\n    }\\r\\n\\r\\n    function _ref(address _parent,address _user) private  {\\r\\n        if(referral.isBindReferral(_user) || !referral.isBindReferral(_parent)){\\r\\n            return;\\r\\n        }\\r\\n        _wReferrals[_user] = _parent;\\r\\n    }\\r\\n\\r\\n    function _acceptRef(address _user,address _parent)  private {\\r\\n        if(referral.isBindReferral(_user)){\\r\\n            return;\\r\\n        }\\r\\n        address parent = _wReferrals[_user];\\r\\n        if(parent != _parent){\\r\\n            return;\\r\\n        }\\r\\n        _wReferrals[_user] = address(0);\\r\\n        referral.bindReferral(parent,_user);\\r\\n    }\\r\\n\\r\\n    function _shouldRebase() private view returns (bool) {\\r\\n        return\\r\\n            (_totalSupply \\u003c MAX_SUPPLY) \\u0026\\u0026\\r\\n            msg.sender != pair \\u0026\\u0026\\r\\n            !_swapping \\u0026\\u0026\\r\\n            block.timestamp \\u003e= (_lastRebasedTime + rebaseInterval) \\u0026\\u0026\\r\\n            block.timestamp \\u003c (startTradingTime + 90 days);\\r\\n    }\\r\\n\\r\\n    function _shouldSwap(address _from, address _to)\\r\\n        private\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return\\r\\n            !_swapping \\u0026\\u0026\\r\\n            _from != pair \\u0026\\u0026\\r\\n            _from != owner() \\u0026\\u0026\\r\\n            _to != owner() \\u0026\\u0026\\r\\n            block.timestamp \\u003e= (_lastSwapTime + swapInterval);\\r\\n    }\\r\\n\\r\\n    function _takeFee(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 gonAmount\\r\\n    ) private returns (uint256 result) {\\r\\n        result = gonAmount;\\r\\n        //LP\\r\\n        uint256 lpFee = gonAmount.div(100).mul(recipient==pair?lpFeeRate():_lpFeeRate);\\r\\n        gonsLPFee = gonsLPFee.add(lpFee);\\r\\n        lpFee \\u003e 0 \\u0026\\u0026 _basicTransfer(sender, address(this), lpFee);\\r\\n        result = result.sub(lpFee);\\r\\n\\r\\n        //\u9500\u6bc1\\r\\n        uint256 gonCirculation = totalSupply().sub(balanceOf(DEAD)).mul(\\r\\n            _gonsPerFragment\\r\\n        );\\r\\n        uint256 minCirculationRate = MAX_SUPPLY.sub(maxBurn).mul(1e18).div(MAX_SUPPLY);\\r\\n        uint256 gonMinCirculation = totalSupply().mul(minCirculationRate).div(1e18).mul(_gonsPerFragment);\\r\\n        \\r\\n        if (gonCirculation \\u003e gonMinCirculation) {\\r\\n            uint256 burnFee = gonAmount.div(100).mul(burnFeeRate).min(\\r\\n                gonCirculation.sub(gonMinCirculation)\\r\\n            );\\r\\n            burnFee \\u003e 0 \\u0026\\u0026 _basicTransfer(sender, DEAD, burnFee);\\r\\n            result = result.sub(burnFee);\\r\\n        }\\r\\n\\r\\n        //\u5206\u4eab\u5956\u52b1\\r\\n        address[] memory referrals = referral.getReferrals(\\r\\n            sender == pair ? recipient : sender,\\r\\n            referralFeeRates.length\\r\\n        );\\r\\n        for (uint256 i = 0; i \\u003c referrals.length; i++) {\\r\\n            address parent = referrals[i];\\r\\n            uint256 reward = gonAmount.div(100).mul(referralFeeRates[i]);\\r\\n            reward \\u003e 0 \\u0026\\u0026\\r\\n                _basicTransfer(\\r\\n                    sender,\\r\\n                    parent == address(0) ? referral.getRootAddress() : parent,\\r\\n                    reward\\r\\n                );\\r\\n            result = result.sub(reward);\\r\\n        }\\r\\n\\r\\n        //\u8425\u9500\u94b1\u53051\\r\\n        uint256 marketingFee1 = gonAmount.div(100).mul(marketingFeeRate1);\\r\\n        marketingFee1 \\u003e 0 \\u0026\\u0026\\r\\n            _basicTransfer(sender, marketingWallet1, marketingFee1);\\r\\n        result = result.sub(marketingFee1);\\r\\n\\r\\n        //\u8425\u9500\u94b1\u53052\\r\\n        uint256 marketingFee2 = gonAmount.div(100).mul(marketingFeeRate2);\\r\\n        marketingFee2 \\u003e 0 \\u0026\\u0026\\r\\n            _basicTransfer(sender, marketingWallet2, marketingFee2);\\r\\n        result = result.sub(marketingFee2);\\r\\n    }\\r\\n\\r\\n    function _deliveryCurrentProce() private {\\r\\n        uint256 price = _getCurrentPrice();\\r\\n        uint256 zero = (block.timestamp / 1 days) * 1 days;\\r\\n        _todayBasePrices[zero] = price;\\r\\n        if (_todayBasePrices[zero - 1 days] == 0) {\\r\\n            _todayBasePrices[zero - 1 days] = price;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getCurrentPrice() private view returns (uint256) {\\r\\n        (uint256 r0, uint256 r1, ) = IUniswapV2Pair(pair).getReserves();\\r\\n        if (r0 \\u003e 0 \\u0026\\u0026 r1 \\u003e 0) {\\r\\n            if (address(this) == IUniswapV2Pair(pair).token0()) {\\r\\n                return (r1 * 10**18) / r0;\\r\\n            } else {\\r\\n                return (r0 * 10**18) / r1;\\r\\n            }\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function lpFeeRate() public view returns (uint256) {\\r\\n        uint256 price = _getCurrentPrice();\\r\\n        uint256 base = _todayBasePrices[\\r\\n            ((block.timestamp / 1 days) * 1 days) - 1 days\\r\\n        ];\\r\\n        if (price \\u003e= base) return _lpFeeRate;\\r\\n        uint256 rate = ((base - price) * 100) / base;\\r\\n        if (rate \\u003e= 10) {\\r\\n            return 21;\\r\\n        }\\r\\n        return _lpFeeRate;\\r\\n    }\\r\\n\\r\\n    function _gonsBalanceOf(address _address) private view returns (uint256) {\\r\\n        return _gonsBalances[_address];\\r\\n    }\\r\\n\\r\\n    function _rebase() private {\\r\\n        uint256 deltaTime = block.timestamp - _lastRebasedTime;\\r\\n        uint256 times = deltaTime.div(rebaseInterval);\\r\\n        uint256 epoch = times.mul(15);\\r\\n        for (uint256 i = 0; i \\u003c times; i++) {\\r\\n            _totalSupply = _totalSupply\\r\\n                .mul((10**decimals()).add(rebaseRate))\\r\\n                .div(10**decimals());\\r\\n            if (_totalSupply \\u003e MAX_SUPPLY) {\\r\\n                _totalSupply = MAX_SUPPLY;\\r\\n            }\\r\\n        }\\r\\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\r\\n        _lastRebasedTime = _lastRebasedTime.add(times.mul(rebaseInterval));\\r\\n        emit LogRebase(epoch, _totalSupply);\\r\\n    }\\r\\n\\r\\n    function setHold(address _address) public {\\r\\n        uint256 balance = balanceOf(_address);\\r\\n        bool isHol = isHold(_address);\\r\\n        \\r\\n        if (isHol \\u0026\\u0026 balance \\u003c= 0) {\\r\\n            _isHolds[_address] = false;\\r\\n            holdCount -= 1;\\r\\n        }\\r\\n        if (!isHol \\u0026\\u0026 balance \\u003e 0) {\\r\\n            _isHolds[_address] = true;\\r\\n            holdCount += 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _swap() private {\\r\\n        _swapping = true;\\r\\n        if (gonsLPFee \\u003e 0) {\\r\\n            _swapAndLiquidity(gonsLPFee.div(_gonsPerFragment));\\r\\n            gonsLPFee = 0;\\r\\n        }\\r\\n        _lastSwapTime = block.timestamp;\\r\\n        _swapping = false;\\r\\n    }\\r\\n\\r\\n    function _swapAndLiquidity(uint256 tokenAmount) private {\\r\\n        uint256 half = tokenAmount.div(2);\\r\\n        uint256 otherHalf = tokenAmount.sub(half);\\r\\n        uint256 usdtAmount = _swapTokensForUsdt(half);\\r\\n        _addLiquidityUsdt(otherHalf, usdtAmount);\\r\\n        emit SwapAndLiquify(half, usdtAmount, otherHalf);\\r\\n    }\\r\\n\\r\\n    function _swapTokensForUsdt(uint256 tokenAmount)\\r\\n        private\\r\\n        returns (uint256 swapUsdtAmount)\\r\\n    {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = address(usdt);\\r\\n        uint256 beforeUsdtAmount = usdt.balanceOf(address(wrap));\\r\\n        pancakeSwapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n                tokenAmount,\\r\\n                0,\\r\\n                path,\\r\\n                address(wrap),\\r\\n                block.timestamp\\r\\n            );\\r\\n        uint256 afterUsdtAmount = usdt.balanceOf(address(wrap));\\r\\n        wrap.withdraw();\\r\\n        swapUsdtAmount = afterUsdtAmount.sub(beforeUsdtAmount);\\r\\n    }\\r\\n\\r\\n    function _addLiquidityUsdt(uint256 tokenAmount, uint256 usdtAmount)\\r\\n        private\\r\\n    {\\r\\n        usdt.approve(address(pancakeSwapRouter), usdtAmount);\\r\\n        pancakeSwapRouter.addLiquidity(\\r\\n            address(this),\\r\\n            address(usdt),\\r\\n            tokenAmount,\\r\\n            usdtAmount,\\r\\n            0,\\r\\n            0,\\r\\n            lpWallet,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function manualSync() external {\\r\\n        IUniswapV2Pair(pair).sync();\\r\\n    }\\r\\n\\r\\n    function manualRebase() external {\\r\\n        if (_shouldRebase()) {\\r\\n            _rebase();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setExcludedFromFee(address _address, bool _v) external onlyOwner {\\r\\n        if (_isExcludedFromFees[_address] != _v) {\\r\\n            _isExcludedFromFees[_address] = _v;\\r\\n            emit SetExcludeFromFee(_address, _v);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function batchSetExcludedFromFee(address[] calldata _addresses, bool _v)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        for (uint256 i = 0; i \\u003c _addresses.length; i++) {\\r\\n            _isExcludedFromFees[_addresses[i]] = _v;\\r\\n        }\\r\\n        emit BatchSetExcludedFromFee(_addresses, _v);\\r\\n    }\\r\\n\\r\\n    // function setBlackList(address _address, bool _v) external onlyOwner {\\r\\n    //     if (_isBlackLists[_address] != _v) {\\r\\n    //         _isBlackLists[_address] = _v;\\r\\n    //         emit SetBlackList(_address, _v);\\r\\n    //     }\\r\\n    // }\\r\\n\\r\\n    // function batchSetBlackList(address[] calldata accounts, bool _v)\\r\\n    //     external\\r\\n    //     onlyOwner\\r\\n    // {\\r\\n    //     for (uint256 i = 0; i \\u003c accounts.length; i++) {\\r\\n    //         _isBlackLists[accounts[i]] = _v;\\r\\n    //     }\\r\\n    //     emit BatchSetBlackList(accounts, _v);\\r\\n    // }\\r\\n\\r\\n    function setSwapInterval(uint256 _swapInterval) external onlyOwner {\\r\\n        swapInterval = _swapInterval;\\r\\n    }\\r\\n\\r\\n    function setLpWallet(address _lpWallet) external onlyOwner {\\r\\n        lpWallet = _lpWallet;\\r\\n    }\\r\\n\\r\\n    function setMarketingWallet1(address _marketingWallet) external onlyOwner {\\r\\n        marketingWallet1 = _marketingWallet;\\r\\n    }\\r\\n\\r\\n    function setMarketingWallet2(address _marketingWallet) external onlyOwner {\\r\\n        marketingWallet2 = _marketingWallet;\\r\\n    }\\r\\n\\r\\n    function setStartTradingTime(uint256 _startTime) public onlyOwner {\\r\\n        _lastRebasedTime = _lastSwapTime = startTradingTime = _startTime;\\r\\n    }\\r\\n\\r\\n    function setMaxBurn(uint256 _maxBurn) external onlyOwner{\\r\\n        maxBurn = _maxBurn;\\r\\n    }\\r\\n\\r\\n    function setNoTakeFeeHoldCondition(uint256 _noTakeFeeHoldCondition) external onlyOwner{\\r\\n        noTakeFeeHoldCondition = _noTakeFeeHoldCondition;\\r\\n    }\\r\\n\\r\\n    function setBatchKillBlockEnabled(bool _enabled) public onlyOwner {\\r\\n        batchKillBlockEnabled = _enabled;\\r\\n    }\\r\\n\\r\\n    function withdraw(address _token, address payable _to) external onlyOwner {\\r\\n        if (_token == address(0x0)) {\\r\\n            payable(_to).transfer(address(this).balance);\\r\\n        }\\r\\n        else {\\r\\n            IERC20(_token).transfer(_to, IERC20(_token).balanceOf(address(this)));\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\\r\\n    event SwapAndLiquify(\\r\\n        uint256 tokensSwapped,\\r\\n        uint256 usdtReceived,\\r\\n        uint256 tokensIntoLiqudity\\r\\n    );\\r\\n\\r\\n    event Swap(uint256 swapTokenAmount, uint256 receiveUsdtAmount);\\r\\n    event SetExcludeFromFee(address indexed account, bool v);\\r\\n    event BatchSetExcludedFromFee(address[] accounts, bool v);\\r\\n    // event SetBlackList(address indexed account, bool v);\\r\\n    // event BatchSetBlackList(address[] accounts, bool v);\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n}\"},\"IReferral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.13;\\r\\n\\r\\ninterface IReferral{\\r\\n    \\r\\n    event BindReferral(address indexed referral,address indexed user);\\r\\n    \\r\\n    function getReferral(address _address)external view returns(address);\\r\\n\\r\\n    function isBindReferral(address _address) external view returns(bool);\\r\\n\\r\\n    function getReferralCount(address _address) external view returns(uint256);\\r\\n\\r\\n    function bindReferral(address _referral,address _user) external;\\r\\n\\r\\n    function getReferrals(address _address,uint256 _num) external view returns(address[] memory);\\r\\n\\r\\n    function getRootAddress()external view returns(address);\\r\\n}\"},\"IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\"},\"IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.5.0;\\r\\n\\r\\ninterface IUniswapV2Pair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\"},\"IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.2;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\"},\"IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity \\u003e=0.6.2;\\r\\n\\r\\nimport \\u0027./IUniswapV2Router01.sol\\u0027;\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\"},\"Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a \\u003e= b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a \\u003c b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow.\\r\\n        return (a \\u0026 b) + (a ^ b) / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ceiling of the division of two numbers.\\r\\n     *\\r\\n     * This differs from standard division with `/` in that it rounds up instead\\r\\n     * of rounding down.\\r\\n     */\\r\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n        return a / b + (a % b == 0 ? 0 : 1);\\r\\n    }\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler\\u0027s built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c \\u003c a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b \\u003e a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n            // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b \\u003c= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b \\u003e 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b \\u003e 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"pancakeSwapRouter_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"usdt_\",\"type\":\"address\"},{\"internalType\":\"contract IReferral\",\"name\":\"referral_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTradingTime_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpWallet_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"makretingWallet1_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"makretingWallet2_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"v\",\"type\":\"bool\"}],\"name\":\"BatchSetExcludedFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"v\",\"type\":\"bool\"}],\"name\":\"SetExcludeFromFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiveUsdtAmount\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchKillBlockEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_v\",\"type\":\"bool\"}],\"name\":\"batchSetExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_k\",\"type\":\"uint256\"}],\"name\":\"getTodayBasePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gonsLPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isHold\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeRate1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeRate2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noTakeFeeHoldCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeSwapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referral\",\"outputs\":[{\"internalType\":\"contract IReferral\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralFeeRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setBatchKillBlockEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_v\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setHold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpWallet\",\"type\":\"address\"}],\"name\":\"setLpWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBurn\",\"type\":\"uint256\"}],\"name\":\"setMaxBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_noTakeFeeHoldCondition\",\"type\":\"uint256\"}],\"name\":\"setNoTakeFeeHoldCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTradingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapInterval\",\"type\":\"uint256\"}],\"name\":\"setSwapInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"contract Wrap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FCFGProtocol", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000a37fc32f4ad7d4cb640f0cad914ea3b6925b18a700000000000000000000000000000000000000000000000000000000001e848000000000000000000000000000000000000000000000000000000000002fe9a000000000000000000000000000000000000000000000000000000000642eb440000000000000000000000000000000000000000000000000000000000000dead0000000000000000000000006d772b364ee517b97e0faf0ccfd188b7da86af31000000000000000000000000000000000000000000000000000000000000dead0000000000000000000000000000000000000000000000000000000000000004464346470000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044643464700000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d5c598efbaa5f361792800ea6d6b645c21be21ef948efe4ce9dd855a747fe5e9"}