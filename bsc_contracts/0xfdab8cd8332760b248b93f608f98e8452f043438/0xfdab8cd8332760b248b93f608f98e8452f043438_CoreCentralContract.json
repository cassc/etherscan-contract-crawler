{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/CoreCentralContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ninterface IBEP20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n        \\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n    address private _previousOwner;\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0));\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _previousOwner = _owner ;\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n\\r\\n    function previousOwner() public view returns (address) {\\r\\n        return _previousOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract CoreCentralContract is Context,Ownable{\\r\\n   \\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address public targetToken; \\r\\n    address public treasury = 0xd3163724D1AB51468c1917CCf8B66E6C4d3c580A;\\r\\n    \\r\\n\\r\\n    mapping (address => bool) public Tokens;\\r\\n    mapping (address => uint256) public UserTokens;\\r\\n\\r\\n    mapping(address => bool) private _isBlacklisted;\\r\\n\\r\\n    bool public _withdrawFlag =true;\\r\\n    bool public _depositFlag = true;\\r\\n    bool public _bagToWalletFlag =true;\\r\\n\\r\\n\\r\\n    // transaction details \\r\\n    struct OrderDetails { \\r\\n            address to_address;\\r\\n            uint amount;\\r\\n            uint plantform_fee;\\r\\n    }\\r\\n\\r\\n    \\r\\n    event OrderDetailsEvent(address indexed token,address indexed from,address indexed to,string order_id,uint256 actual_value,uint256 platformfee,uint256 platformfee_value,uint256 value_after_platformfee);\\r\\n\\r\\n    event TransferAllTokenToTreasuryEvent(address indexed token,address indexed treasury, uint256 value,uint256 timestamp);\\r\\n\\r\\n    event UserTokenBalanceUpdateEvent(address indexed user,uint256 value,uint256 timestamp);\\r\\n\\r\\n    event DepositTokenEvent(address indexed token,address indexed from, address indexed to, uint256 value);\\r\\n    event WithdrawTokenEvent(address indexed token,address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event FailedWithdrawTokenEvent(address indexed token,address indexed from, address indexed to, uint256 value,uint256 contractTokenBalance);\\r\\n\\r\\n    \\r\\n    constructor(address token){\\r\\n        targetToken = token;\\r\\n        Tokens[targetToken] = true;\\r\\n    }\\r\\n\\r\\n    function setTargetAddress(address target_adr) external onlyOwner {\\r\\n        targetToken = target_adr;\\r\\n        Tokens[targetToken] = true;\\r\\n\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n    modifier AllowedTokenCheck(IBEP20 _token){\\r\\n        require(Tokens[address(_token)],'This Token is not allowed to deposit and withdraw.');\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setWithdrawalFlag(bool _bool) external onlyOwner {\\r\\n        _withdrawFlag = _bool;\\r\\n    }\\r\\n\\r\\n\\r\\n    function setDepositFlag(bool _bool) external onlyOwner {\\r\\n        _depositFlag = _bool;\\r\\n    }\\r\\n\\r\\n  \\r\\n\\r\\n\\r\\n    function setAddressIsBlackListed(address _address, bool _bool) external onlyOwner {\\r\\n        _isBlacklisted[_address] = _bool;\\r\\n    }\\r\\n\\r\\n    function viewIsBlackListed(address _address) public view returns(bool) {\\r\\n        return _isBlacklisted[_address];\\r\\n    }\\r\\n\\r\\n    function allowedTokens(address _token,bool _flag) public onlyOwner{\\r\\n        Tokens[_token] = _flag;\\r\\n    }\\r\\n\\r\\n  \\r\\n       \\r\\n    function depositToken(IBEP20 _token,uint _amount) public AllowedTokenCheck(_token){\\r\\n        require(_amount > 0, \\\"You need to deposit at least some tokens\\\");\\r\\n        require(_depositFlag,\\\"Deposit is not allowed\\\");\\r\\n        require(!_isBlacklisted[msg.sender],\\\"Your Address is blacklisted\\\");\\r\\n\\r\\n\\r\\n        uint _before_token_balance = _token.balanceOf(address(this));\\r\\n\\r\\n        _token.transferFrom(msg.sender,address(this), _amount);\\r\\n        uint _after_token_balance = _token.balanceOf(address(this));\\r\\n        uint _new_amount = _after_token_balance.sub(_before_token_balance);\\r\\n\\r\\n\\r\\n        emit DepositTokenEvent(address(_token),msg.sender,address(this), _new_amount);\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function withdrawToken(IBEP20 _token,uint _amount) public AllowedTokenCheck(_token) {\\r\\n        require(_amount > 0, \\\"You need to withdraw at least some tokens\\\");\\r\\n        require(!_isBlacklisted[msg.sender],\\\"Your Address is blacklisted\\\");\\r\\n        require(owner() != _msgSender(), \\\"Only the owner can't call this function.\\\");\\r\\n        require(_withdrawFlag,\\\"Withdraw is not allowed\\\");\\r\\n        if (UserTokens[msg.sender] >= _amount){\\r\\n        _token.transfer(msg.sender, _amount);\\r\\n        emit WithdrawTokenEvent(address(_token),msg.sender,address(this), _amount);\\r\\n        UserTokens[msg.sender] = 0;\\r\\n\\r\\n        }\\r\\n        else{\\r\\n            emit FailedWithdrawTokenEvent(address(_token),msg.sender,address(this), _amount,_token.balanceOf(address(this)));\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function updateUserTokenBalnce(address _address,uint _amount) public onlyOwner{\\r\\n        require(_amount > 0, \\\"You need to amount at least some tokens\\\");\\r\\n        UserTokens[_address] = _amount;\\r\\n\\r\\n        emit UserTokenBalanceUpdateEvent(_address, _amount,block.timestamp);\\r\\n\\r\\n    }\\r\\n\\r\\n    function TransferAllTokenToTreasury(IBEP20 _token) public onlyOwner AllowedTokenCheck(_token){\\r\\n\\r\\n        uint _contract_balance = _token.balanceOf(address(this));\\r\\n        require(_contract_balance > 0, \\\"Contract not have any token balance to transfer.\\\");\\r\\n        \\r\\n        _token.transfer(treasury, _contract_balance);\\r\\n        emit TransferAllTokenToTreasuryEvent(address(_token),treasury, _contract_balance,block.timestamp);\\r\\n    \\r\\n    }\\r\\n\\r\\n\\r\\nfunction transferBnbFundsToTreasury() external onlyOwner {\\r\\n        uint256 contractBalance = address(this).balance;\\r\\n        require(contractBalance > 0, \\\"No funds available in the contract\\\");\\r\\n        payable(treasury).transfer(contractBalance);\\r\\n}\\r\\n\\r\\n\\r\\nfunction OrderPayment(string memory order_id,address from ,OrderDetails[] memory orders) public payable onlyOwner AllowedTokenCheck(IBEP20(targetToken)){\\r\\n        require(!_isBlacklisted[msg.sender],\\\"Your Address is blacklisted\\\");\\r\\n        \\r\\n        IBEP20 _target_token = IBEP20(targetToken);\\r\\n\\r\\n        uint256  _new_amount;\\r\\n        uint256 _platformfee_value;\\r\\n        uint256 _transfer_value;\\r\\n\\r\\n        for (uint i=0; i<orders.length; i++) {\\r\\n        \\r\\n        _new_amount = orders[i].amount;\\r\\n        \\r\\n        _platformfee_value = _new_amount.mul(orders[i].plantform_fee).div(1000);\\r\\n\\r\\n        _transfer_value = _new_amount.sub(_platformfee_value); \\r\\n        \\r\\n        _target_token.transfer(orders[i].to_address, _transfer_value);\\r\\n\\r\\n        emit OrderDetailsEvent(targetToken,from,orders[i].to_address,order_id,orders[i].amount,orders[i].plantform_fee,_platformfee_value,_transfer_value);\\r\\n        \\r\\n        }\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DepositTokenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractTokenBalance\",\"type\":\"uint256\"}],\"name\":\"FailedWithdrawTokenEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actual_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformfee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformfee_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value_after_platformfee\",\"type\":\"uint256\"}],\"name\":\"OrderDetailsEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TransferAllTokenToTreasuryEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UserTokenBalanceUpdateEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"WithdrawTokenEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"order_id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"plantform_fee\",\"type\":\"uint256\"}],\"internalType\":\"struct CoreCentralContract.OrderDetails[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"name\":\"OrderPayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"TransferAllTokenToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_bagToWalletFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_depositFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_withdrawFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"allowedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setAddressIsBlackListed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setDepositFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target_adr\",\"type\":\"address\"}],\"name\":\"setTargetAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setWithdrawalFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferBnbFundsToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateUserTokenBalnce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"viewIsBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CoreCentralContract", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004f4543fa5f7fe28a7758ef43fea71d11fccdad5c", "EVMVersion": "byzantium", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}