{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.6.12;\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.4.2\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v3.4.2\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v3.4.2\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/Pausable.sol@v3.4.2\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/utils/ReentrancyGuard.sol@v3.4.2\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol@v3.4.2\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC721/ERC721Holder.sol@v3.4.2\r\n\r\n  /**\r\n   * @dev Implementation of the {IERC721Receiver} interface.\r\n   *\r\n   * Accepts all token transfers. \r\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\r\n   */\r\ncontract ERC721Holder is IERC721Receiver {\r\n\r\n    /**\r\n     * @dev See {IERC721Receiver-onERC721Received}.\r\n     *\r\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\n// File @openzeppelin/contracts/introspection/IERC165.sol@v3.4.2\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v3.4.2\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.4.2\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File @openzeppelin/contracts/token/ERC20/SafeERC20.sol@v3.4.2\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File contracts/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File contracts/FeeManager.sol\r\n\r\ncontract FeeManager is Ownable {\r\n\r\n    event ChangedFeePerMillion(uint256 cutPerMillion);\r\n\r\n    // Market fee on sales\r\n    uint256 public cutPerMillion;\r\n    uint256 public constant maxCutPerMillion = 100000; // 10% cut\r\n\r\n    /**\r\n     * @dev Sets the share cut for the owner of the contract that's\r\n     *  charged to the seller on a successful sale\r\n     * @param _cutPerMillion - Share amount, from 0 to 99,999\r\n     */\r\n    function setOwnerCutPerMillion(uint256 _cutPerMillion) external onlyOwner {\r\n        require(\r\n            _cutPerMillion < maxCutPerMillion,\r\n            \"The owner cut should be between 0 and maxCutPerMillion\"\r\n        );\r\n\r\n        cutPerMillion = _cutPerMillion;\r\n        emit ChangedFeePerMillion(cutPerMillion);\r\n    }\r\n}\r\n\r\ninterface IMarketplace {\r\n\r\n    struct Order {\r\n        // Order ID\r\n        bytes32 id;\r\n        // Owner of the NFT\r\n        address payable seller;\r\n        // NFT registry address\r\n        address nftAddress;\r\n        // Price (in wei) for the published item\r\n        uint256 price;\r\n        // Time when this sale ends\r\n        uint256 expiresAt;\r\n        // ERC20 currency address\r\n        address currency;\r\n        // Coleector address\r\n        address collectorAddress;\r\n        // Collector Fee\r\n        uint256 collectorFee;\r\n    }\r\n\r\n    struct Bid {\r\n        // Bid Id\r\n        bytes32 id;\r\n        // Bidder address\r\n        address payable bidder;\r\n        // Price for the bid in wei\r\n        uint256 price;\r\n        // Time when this bid ends\r\n        uint256 expiresAt;\r\n    }\r\n\r\n    // ORDER EVENTS\r\n    event OrderCreated(\r\n        bytes32 id,\r\n        address indexed seller,\r\n        address indexed nftAddress,\r\n        uint256 indexed assetId,\r\n        uint256 priceInWei,\r\n        uint256 expiresAt,\r\n        address currency\r\n    );\r\n\r\n    event OrderUpdated(\r\n        bytes32 id,\r\n        uint256 priceInWei,\r\n        uint256 expiresAt\r\n    );\r\n\r\n    event OrderSuccessful(\r\n        bytes32 id,\r\n        address indexed buyer,\r\n        uint256 priceInWei\r\n    );\r\n\r\n    event OrderCancelled(bytes32 id);\r\n\r\n    // BID EVENTS\r\n    event BidCreated(\r\n      bytes32 id,\r\n      address indexed nftAddress,\r\n      uint256 indexed assetId,\r\n      address indexed bidder,\r\n      uint256 priceInWei,\r\n      uint256 expiresAt\r\n    );\r\n    event BidAccepted(bytes32 id);\r\n    event BidCancelled(bytes32 id);\r\n    event CollectorAdded(bytes32 id, address collector);\r\n}\r\n\r\ncontract OpenMarketplace is Pausable, FeeManager, IMarketplace, ERC721Holder, ReentrancyGuard {\r\n\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public adminTreasuryWallet;\r\n    address public nativeCurrency;\r\n\r\n    uint256 public minTokensRequired;\r\n\r\n    // From ERC721 registry assetId to Order (to avoid asset collision)\r\n    mapping(address => mapping(uint256 => Order)) public orderByAssetId;\r\n\r\n    // From ERC721 registry assetId to Bid (to avoid asset collision)\r\n    mapping(address => mapping(uint256 => Bid)) public bidByOrderId;\r\n\r\n    // 721 Interfaces\r\n    bytes4 public constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    // Mocking a constant for ether as currency\r\n    address public constant MARKETPLACE_ETHER = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    /**\r\n     * @dev Initialize this contract. Acts as a constructor\r\n     */\r\n    constructor(address _nativeCurrency, address _adminTreasuryWallet, uint256 _minTokensRequired) public {\r\n        // acceptedCurrencies[MARKETPLACE_ETHER] = true;\r\n\r\n        nativeCurrency = _nativeCurrency;\r\n        minTokensRequired = _minTokensRequired;\r\n        adminTreasuryWallet = _adminTreasuryWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the paused failsafe. Can only be called by owner\r\n     * @param _setPaused - paused state\r\n     */\r\n    function setPaused(bool _setPaused) external onlyOwner {\r\n        return (_setPaused) ? _pause() : _unpause();\r\n    }\r\n\r\n    function updateNativeCurrency(address _nativeCurrency) external onlyOwner {\r\n        nativeCurrency = _nativeCurrency;\r\n    }\r\n\r\n    function updateAdminTreasury(address _adminTreasuryWallet) external onlyOwner {\r\n        adminTreasuryWallet = _adminTreasuryWallet;\r\n    }\r\n\r\n    function updateMinTokensRequired(uint256 _minTokensRequired) external onlyOwner {\r\n        minTokensRequired = _minTokensRequired;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a new order\r\n     * @param _nftAddress - Non fungible registry address\r\n     * @param _assetId - ID of the published NFT\r\n     * @param _priceInWei - Price in Wei for the supported coin\r\n     * @param _expiresAt - Duration of the order (in hours)\r\n     */\r\n    function createOrder(address _nftAddress, uint256 _assetId, uint256 _priceInWei, uint256 _expiresAt, address _currency) external whenNotPaused {\r\n        _createOrder(_nftAddress, _assetId, _priceInWei, _expiresAt, _currency);\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel an already published order\r\n     *  can only be cancelled by seller or the contract owner\r\n     * @param _nftAddress - Address of the NFT registry\r\n     * @param _assetId - ID of the published NFT\r\n     */\r\n    function cancelOrder(address _nftAddress, uint256 _assetId) external     whenNotPaused {\r\n        Order memory order = orderByAssetId[_nftAddress][_assetId];\r\n\r\n        require(order.seller == msg.sender || msg.sender == owner(), \"Marketplace: unauthorized sender\");\r\n\r\n        // Remove pending bid if any\r\n        Bid memory bid = bidByOrderId[_nftAddress][_assetId];\r\n\r\n        if (bid.id != 0) {\r\n            _cancelBid(bid.id, _nftAddress, _assetId, bid.bidder, bid.price);\r\n        }\r\n\r\n        // Cancel order.\r\n        _cancelOrder(order.id, _nftAddress, _assetId, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Update an already published order\r\n     *  can only be updated by seller\r\n     * @param _nftAddress - Address of the NFT registry\r\n     * @param _assetId - ID of the published NFT\r\n     */\r\n    function updateOrder(address _nftAddress, uint256 _assetId, uint256 _priceInWei, uint256 _expiresAt)\r\n        external whenNotPaused {\r\n        Order storage order = orderByAssetId[_nftAddress][_assetId];\r\n\r\n        // Check valid order to update\r\n        require(order.id != 0, \"Marketplace: asset not published\");\r\n        require(order.seller == msg.sender, \"Marketplace: sender not allowed\");\r\n        require(order.expiresAt >= block.timestamp, \"Marketplace: order expired\");\r\n\r\n        // check order updated params\r\n        require(_priceInWei > 0, \"Marketplace: Price should be bigger than 0\");\r\n        require(_expiresAt > block.timestamp.add(1 minutes), \"Marketplace: Expire time should be more than 1 minute in the future\");\r\n\r\n        order.price = _priceInWei;\r\n        order.expiresAt = _expiresAt;\r\n\r\n        emit OrderUpdated(order.id, _priceInWei, _expiresAt);\r\n    }\r\n\r\n    function approveCollector(address _nftAddress, uint256 _assetId, address _collectorAddress, uint256 _collectorFee) external {\r\n        Order storage order = orderByAssetId[_nftAddress][_assetId];\r\n\r\n        order.collectorAddress = _collectorAddress;\r\n        order.collectorFee = _collectorFee;\r\n\r\n        emit CollectorAdded(order.id, _collectorAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Executes the sale for a published NFT\r\n     * @param _nftAddress - Address of the NFT registry\r\n     * @param _assetId - ID of the published NFT\r\n     * @param _priceInWei - Order price\r\n     */\r\n    function safeExecuteOrder(address _nftAddress, uint256 _assetId, uint256 _priceInWei) external payable whenNotPaused {\r\n        // Get the current valid order for the asset or fail\r\n        Order memory order = _getValidOrder(_nftAddress, _assetId);\r\n\r\n        uint256 fee = order.price.mul(order.collectorFee).div(1e3);\r\n\r\n        /// Check the execution price matches the order price\r\n        // require(order.price.add(fee) == _priceInWei, \"Marketplace: invalid price\");\r\n        require(order.seller != msg.sender, \"Marketplace: unauthorized sender\");\r\n\r\n        order.currency == MARKETPLACE_ETHER ? \r\n            require(order.price.add(fee) == msg.value, \"Marketplace: invalid price\")\r\n            :\r\n            require(order.price.add(fee) == _priceInWei, \"Marketplace: invalid price\");\r\n\r\n        // market fee to cut\r\n        uint256 saleShareAmount = 0;\r\n\r\n        // Send market fees to owner\r\n        if (FeeManager.cutPerMillion > 0) {\r\n            // Calculate sale share\r\n            saleShareAmount = order.price.mul(FeeManager.cutPerMillion).div(1e6);\r\n            // Transfer share amount for marketplace Owner\r\n            order.currency == MARKETPLACE_ETHER ? \r\n                payable(adminTreasuryWallet).transfer(saleShareAmount)\r\n                :\r\n                IERC20(order.currency).safeTransferFrom(msg.sender, adminTreasuryWallet, saleShareAmount);\r\n        }\r\n\r\n        // Transfer token amount minus market fee to seller\r\n        order.currency == MARKETPLACE_ETHER ? \r\n            order.seller.transfer(order.price.sub(saleShareAmount))\r\n            :\r\n            IERC20(order.currency).safeTransferFrom(msg.sender, order.seller, order.price.sub(saleShareAmount));\r\n        \r\n        // collector fee to cut\r\n        uint256 collectorFeeAmount = 0;\r\n        address receiverAddress;\r\n\r\n        // Send collector fees to collector\r\n        if (order.collectorFee > 0 && order.collectorAddress != address(0)) {\r\n            // Calculate sale share\r\n            collectorFeeAmount = order.price.mul(order.collectorFee).div(1e3);\r\n\r\n            receiverAddress = IERC20(nativeCurrency).balanceOf(order.collectorAddress) >= minTokensRequired ?\r\n                order.collectorAddress\r\n                :\r\n                adminTreasuryWallet;\r\n\r\n            // Transfer share amount for marketplace Owner\r\n            order.currency == MARKETPLACE_ETHER ? \r\n                payable(receiverAddress).transfer(collectorFeeAmount)\r\n                :\r\n                IERC20(order.currency).safeTransferFrom(msg.sender, receiverAddress, collectorFeeAmount);\r\n        }\r\n\r\n\r\n        // Remove pending bid if any\r\n        Bid memory bid = bidByOrderId[_nftAddress][_assetId];\r\n\r\n        if (bid.id != 0) {\r\n            _cancelBid(bid.id, _nftAddress, _assetId, bid.bidder, bid.price);\r\n        }\r\n\r\n        _executeOrder(order.id, msg.sender, _nftAddress, _assetId, order.price);\r\n    }\r\n\r\n    /**\r\n     * @dev Places a bid for a published NFT\r\n     * @param _nftAddress - Address of the NFT registry\r\n     * @param _assetId - ID of the published NFT\r\n     * @param _priceInWei - Bid price in acceptedToken currency\r\n     * @param _expiresAt - Bid expiration time\r\n     */\r\n    function safePlaceBid(address _nftAddress, uint256 _assetId, uint256 _priceInWei, uint256 _expiresAt)\r\n        external payable whenNotPaused nonReentrant {\r\n        Order memory order = _getValidOrder(_nftAddress, _assetId);\r\n        order.currency == MARKETPLACE_ETHER ? \r\n            _createBid(_nftAddress, _assetId, msg.value, _expiresAt)\r\n            :\r\n            _createBid(_nftAddress, _assetId, _priceInWei, _expiresAt);\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel an already published bid\r\n     *  can only be canceled by seller or the contract owner\r\n     * @param _nftAddress - Address of the NFT registry\r\n     * @param _assetId - ID of the published NFT\r\n     */\r\n    function cancelBid(address _nftAddress, uint256 _assetId) external whenNotPaused {\r\n        Bid memory bid = bidByOrderId[_nftAddress][_assetId];\r\n\r\n        require(bid.bidder == msg.sender || msg.sender == owner(),\"Marketplace: Unauthorized sender\");\r\n\r\n        _cancelBid(bid.id, _nftAddress, _assetId, bid.bidder, bid.price);\r\n    }\r\n\r\n    /**\r\n     * @dev Executes the sale for a published NFT by accepting a current bid\r\n     * @param _nftAddress - Address of the NFT registry\r\n     * @param _assetId - ID of the published NFT\r\n     * @param _priceInWei - Bid price in wei in acceptedTokens currency\r\n     */\r\n    function acceptBid(address _nftAddress, uint256 _assetId, uint256 _priceInWei) external whenNotPaused {\r\n        // check order validity\r\n        Order memory order = _getValidOrder(_nftAddress, _assetId);\r\n\r\n        // item seller is the only allowed to accept a bid\r\n        require(order.seller == msg.sender, \"Marketplace: unauthorized sender\");\r\n\r\n        Bid memory bid = bidByOrderId[_nftAddress][_assetId];\r\n\r\n        require(bid.price == _priceInWei, \"Marketplace: invalid bid price\");\r\n        require(bid.expiresAt >= block.timestamp, \"Marketplace: the bid expired\");\r\n\r\n        // remove bid\r\n        delete bidByOrderId[_nftAddress][_assetId];\r\n\r\n        emit BidAccepted(bid.id);\r\n\r\n        // market fee to cut\r\n        uint256 saleShareAmount = 0;\r\n\r\n        // Send market fees to owner\r\n        \r\n        if (FeeManager.cutPerMillion > 0) {\r\n            // Calculate sale share\r\n            saleShareAmount = bid.price.mul(FeeManager.cutPerMillion).div(1e6);\r\n\r\n            // Transfer share amount for marketplace Owner\r\n             order.currency == MARKETPLACE_ETHER ? \r\n                payable(adminTreasuryWallet).transfer(saleShareAmount)\r\n                :\r\n                IERC20(order.currency).safeTransfer(adminTreasuryWallet, saleShareAmount);\r\n        }\r\n\r\n        // transfer escrowed bid amount minus market fee to seller\r\n        order.currency == MARKETPLACE_ETHER ? \r\n            order.seller.transfer(bid.price.sub(saleShareAmount))\r\n            :\r\n            IERC20(order.currency).safeTransfer(order.seller, bid.price.sub(saleShareAmount));\r\n\r\n        _executeOrder(order.id, bid.bidder, _nftAddress, _assetId, _priceInWei);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function gets Order by nftRegistry and assetId. Checks for the order validity\r\n     * @param _nftAddress - Address of the NFT registry\r\n     * @param _assetId - ID of the published NFT\r\n     */\r\n    function _getValidOrder(address _nftAddress, uint256 _assetId) internal view returns (Order memory order) {\r\n        order = orderByAssetId[_nftAddress][_assetId];\r\n\r\n        require(order.id != 0, \"Marketplace: asset not published\");\r\n        require(order.expiresAt >= block.timestamp, \"Marketplace: order expired\");\r\n    }\r\n\r\n    /**\r\n     * @dev Executes the sale for a published NFT\r\n     * @param _orderId - Order Id to execute\r\n     * @param _buyer - address\r\n     * @param _nftAddress - Address of the NFT registry\r\n     * @param _assetId - NFT id\r\n     * @param _priceInWei - Order price\r\n     */\r\n    function _executeOrder(bytes32 _orderId, address _buyer, address _nftAddress, uint256 _assetId, uint256 _priceInWei) internal {\r\n        // remove order\r\n        delete orderByAssetId[_nftAddress][_assetId];\r\n\r\n        // Transfer NFT asset\r\n        IERC721(_nftAddress).safeTransferFrom(address(this), _buyer, _assetId);\r\n\r\n        // Notify ..\r\n        emit OrderSuccessful(_orderId, _buyer, _priceInWei);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a new order\r\n     * @param _nftAddress - Non fungible registry address\r\n     * @param _assetId - ID of the published NFT\r\n     * @param _priceInWei - Price in Wei for the supported coin\r\n     * @param _expiresAt - Expiration time for the order\r\n     */\r\n    function _createOrder(address _nftAddress, uint256 _assetId, uint256 _priceInWei, uint256 _expiresAt,  address _currency) internal {\r\n        // Check nft registry\r\n        IERC721 nftRegistry = _requireERC721(_nftAddress);\r\n\r\n        // Check order creator is the asset owner\r\n        address assetOwner = nftRegistry.ownerOf(_assetId);\r\n\r\n        require(\r\n            _currency == nativeCurrency || _currency == MARKETPLACE_ETHER,\r\n            \"Marketplace: Unacceptable marketplace currency\"\r\n        );\r\n\r\n        require(\r\n            assetOwner == msg.sender,\r\n            \"Marketplace: Only the asset owner can create orders\"\r\n        );\r\n\r\n        require(_priceInWei > 0, \"Marketplace: Price should be bigger than 0\");\r\n\r\n        require(\r\n            _expiresAt > block.timestamp.add(1 minutes),\r\n            \"Marketplace: Publication should be more than 1 minute in the future\"\r\n        );\r\n\r\n        // get NFT asset from seller\r\n        nftRegistry.safeTransferFrom(assetOwner, address(this), _assetId);\r\n\r\n        // create the orderId\r\n        bytes32 orderId = keccak256(abi.encodePacked(block.timestamp, assetOwner, _nftAddress, _assetId, _priceInWei));\r\n\r\n        // save order\r\n        orderByAssetId[_nftAddress][_assetId] = Order({\r\n            id: orderId,\r\n            seller: payable(assetOwner),\r\n            nftAddress: _nftAddress,\r\n            price: _priceInWei,\r\n            expiresAt: _expiresAt,\r\n            currency: _currency,\r\n            collectorAddress: address(0x0),\r\n            collectorFee: 0\r\n        });\r\n\r\n        emit OrderCreated(orderId, assetOwner, _nftAddress, _assetId, _priceInWei, _expiresAt, _currency);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates a new bid on a existing order\r\n     * @param _nftAddress - Non fungible registry address\r\n     * @param _assetId - ID of the published NFT\r\n     * @param _priceInWei - Price in Wei for the supported coin\r\n     * @param _expiresAt - expires time\r\n     */\r\n    function _createBid(address _nftAddress, uint256 _assetId, uint256 _priceInWei, uint256 _expiresAt) internal {\r\n        // Checks order validity\r\n        Order memory order = _getValidOrder(_nftAddress, _assetId);\r\n\r\n        // check on expire time\r\n        if (_expiresAt > order.expiresAt) {\r\n            _expiresAt = order.expiresAt;\r\n        }\r\n\r\n        // Check price if theres previous a bid\r\n        Bid memory bid = bidByOrderId[_nftAddress][_assetId];\r\n\r\n        // if theres no previous bid, just check price > 0\r\n        if (bid.id != 0) {\r\n            if (bid.expiresAt >= block.timestamp) {\r\n                require(\r\n                    _priceInWei > bid.price,\r\n                    \"Marketplace: bid price should be higher than last bid\"\r\n                );\r\n\r\n            } else {\r\n                require(_priceInWei > 0, \"Marketplace: bid should be > 0\");\r\n            }\r\n\r\n            _cancelBid(bid.id, _nftAddress, _assetId, bid.bidder, bid.price);\r\n\r\n        } else {\r\n            require(_priceInWei > 0, \"Marketplace: bid should be > 0\");\r\n        }\r\n\r\n        // Transfer sale amount from bidder to escrow\r\n        // acceptedToken.safeTransferFrom(msg.sender, address(this), _priceInWei);\r\n        if(order.currency != 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE){\r\n            IERC20(address(order.currency)).transferFrom(msg.sender, address(this), _priceInWei);\r\n        }\r\n\r\n        // Create bid\r\n        bytes32 bidId = keccak256(abi.encodePacked(block.timestamp, msg.sender, order.id, _priceInWei, _expiresAt));\r\n\r\n        // Save Bid for this order\r\n        bidByOrderId[_nftAddress][_assetId] = Bid({\r\n            id: bidId,\r\n            bidder: msg.sender,\r\n            price: _priceInWei,\r\n            expiresAt: _expiresAt\r\n        });\r\n\r\n        emit BidCreated(bidId, _nftAddress, _assetId, msg.sender, _priceInWei, _expiresAt);\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel an already published order\r\n     *  can only be canceled by seller or the contract owner\r\n     * @param _orderId - Bid identifier\r\n     * @param _nftAddress - Address of the NFT registry\r\n     * @param _assetId - ID of the published NFT\r\n     * @param _seller - Address\r\n     */\r\n    function _cancelOrder(bytes32 _orderId, address _nftAddress, uint256 _assetId, address _seller) internal {\r\n        delete orderByAssetId[_nftAddress][_assetId];\r\n\r\n        /// send asset back to seller\r\n        IERC721(_nftAddress).safeTransferFrom(address(this), _seller, _assetId);\r\n\r\n        emit OrderCancelled(_orderId);\r\n    }\r\n\r\n    /**\r\n     * @dev Cancel bid from an already published order\r\n     *  can only be canceled by seller or the contract owner\r\n     * @param _bidId - Bid identifier\r\n     * @param _nftAddress - registry address\r\n     * @param _assetId - ID of the published NFT\r\n     * @param _bidder - Address\r\n     * @param _escrowAmount - in acceptenToken currency\r\n     */\r\n    function _cancelBid(bytes32 _bidId, address _nftAddress, uint256 _assetId, address payable _bidder, uint256 _escrowAmount) internal {\r\n        delete bidByOrderId[_nftAddress][_assetId];\r\n\r\n        Order memory order = _getValidOrder(_nftAddress, _assetId);\r\n\r\n        // return escrow to canceled bidder\r\n        // acceptedToken.safeTransfer(_bidder, _escrowAmount);\r\n        order.currency == MARKETPLACE_ETHER ? \r\n            _bidder.transfer(_escrowAmount)\r\n            :\r\n            IERC20(order.currency).safeTransfer(_bidder, _escrowAmount);\r\n\r\n\r\n        emit BidCancelled(_bidId);\r\n    }\r\n\r\n    function _requireERC721(address _nftAddress) internal view returns (IERC721) {\r\n        require(\r\n            _nftAddress.isContract(),\r\n            \"The NFT Address should be a contract\"\r\n        );\r\n        require(\r\n            IERC721(_nftAddress).supportsInterface(_INTERFACE_ID_ERC721),\r\n            \"The NFT contract has an invalid ERC721 implementation\"\r\n        );\r\n        return IERC721(_nftAddress);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nativeCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_adminTreasuryWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTokensRequired\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"BidAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"BidCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"BidCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cutPerMillion\",\"type\":\"uint256\"}],\"name\":\"ChangedFeePerMillion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"}],\"name\":\"CollectorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"OrderCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"}],\"name\":\"OrderSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceInWei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"OrderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MARKETPLACE_ETHER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_INTERFACE_ID_ERC721\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceInWei\",\"type\":\"uint256\"}],\"name\":\"acceptBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminTreasuryWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collectorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collectorFee\",\"type\":\"uint256\"}],\"name\":\"approveCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bidByOrderId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetId\",\"type\":\"uint256\"}],\"name\":\"cancelBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_currency\",\"type\":\"address\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cutPerMillion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCutPerMillion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokensRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderByAssetId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collectorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collectorFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceInWei\",\"type\":\"uint256\"}],\"name\":\"safeExecuteOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiresAt\",\"type\":\"uint256\"}],\"name\":\"safePlaceBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cutPerMillion\",\"type\":\"uint256\"}],\"name\":\"setOwnerCutPerMillion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_setPaused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adminTreasuryWallet\",\"type\":\"address\"}],\"name\":\"updateAdminTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTokensRequired\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nativeCurrency\",\"type\":\"address\"}],\"name\":\"updateNativeCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceInWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiresAt\",\"type\":\"uint256\"}],\"name\":\"updateOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OpenMarketplace", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000026653554daa840239f0ac12a3a73d43f91180e550000000000000000000000007369d1a5fbdc1bf5169ab2921097e4dbdffbc89b00000000000000000000000000000000000000000000021e19e0c9bab2400000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8de726ee4b1247e75a38ab6f35291b1ba2bd82c990b1ea767711ffd37b687220"}