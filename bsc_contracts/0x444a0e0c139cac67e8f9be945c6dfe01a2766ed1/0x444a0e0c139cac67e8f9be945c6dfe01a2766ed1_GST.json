{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-02-21\r\n*/\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface IBEP20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n  \r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  \r\n  event AddedWhiteList(address _user);\r\n  event RemovedWhiteList(address _user);\r\n  \r\n  event Pause();\r\n  event Unpause();\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\ncontract BEP20Detailed is IBEP20 {\r\n\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  function name() public view returns(string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns(string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n}\r\n\r\ncontract GST is BEP20Detailed {\r\n\r\n  using SafeMath for uint256;\r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n  mapping (address => bool) public isWhiteListed;\r\n  \r\n  string constant tokenName \t  = \"Gemstone Token\";\r\n  string constant tokenSymbol \t  = \"GST\";\r\n  uint8  constant tokenDecimals   = 18;\r\n  uint256 _totalSupply \t\t\t  = 15000000*10**18;\r\n  uint256 _exchangeSupply \t      = 5000000*10**18;\r\n  uint256 _burnSupply \t          = 2500000*10**18;\r\n  uint256 _burnPerMonth \t      = 150000*10**18;\r\n  uint256 _marketingSupply \t      = 2250000*10**18;\r\n  uint256 _airdropSupply \t      = 1500000*10**18;\r\n  uint256 _teamSupply \t          = 3750000*10**18;\r\n  uint256 _releasePerMonth \t      = 1250000*10**18;\r\n  \r\n  uint256 public basePercent \t  = 5;\r\n  uint256 public totalBurn \t      = 0;\r\n  uint256 public totalRelease \t  = 0;\r\n  uint256 public toBurn \t      = 1000000*10**18;\r\n  uint256 public transferLimit \t  = 150000*10**18;\r\n  uint256 public maxBurnLimit \t  = 1500000*10**18;\r\n  uint256 public monthlyBurn      = 0;\r\n  uint256 public contractTime \t  = block.timestamp;\r\n  uint256 public releaseStartTime = block.timestamp+90 days;\r\n  uint256 public nextBurnTime \t  = block.timestamp+30 days;\r\n  bool public limitPaused      \t  = false;\r\n  \r\n  address payable public exchangeAddress     = 0x6A8b40A92BEa9ab666e02DDf7a81a6AF7369CC74;\r\n  address payable public burnAddress  \t\t = 0x3757486FE86Dd8D21f5aCAcA4e864c69b5F2aca8;\r\n  address payable public marketingAddress    = 0x14401Ea8aCc28da8b7BcCdeBBa4f1A5ee8aF0328;\r\n  address payable public airdropAddress      = 0xb32Ba22e21bE47a3558Aa836415D9A9E6F2C75D6;\r\n  address payable public teamAddress         = 0xFdc60D1652BfA0333977740E1697A57a04Af1E6F;\r\n  \r\n  constructor() public payable BEP20Detailed(tokenName, tokenSymbol, tokenDecimals) {\r\n      _mint(exchangeAddress, _exchangeSupply);\r\n\t  _mint(burnAddress, _burnSupply);\r\n\t  _mint(marketingAddress, _marketingSupply);\r\n\t  _mint(airdropAddress, _airdropSupply);\r\n\t  _mint(teamAddress, _teamSupply);\r\n  }\r\n  \r\n  function totalSupply() public view returns (uint256) {\r\n     return _totalSupply;\r\n  }\r\n  \r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n  \r\n  function getLiquidityStatus(address _maker) public view returns (bool) {\r\n      return isWhiteListed[_maker];\r\n  }\r\n  \r\n  function addLiquidityAddress(address _liquidityUser) public {\r\n      require(msg.sender == exchangeAddress, \"exchange address not found\");\r\n      isWhiteListed[_liquidityUser] = true;\r\n      emit AddedWhiteList(_liquidityUser);\r\n  }\r\n  \r\n  function removeLiquidityAddress (address _liquidityUser) public {\r\n     require(msg.sender == exchangeAddress, \"exchange address not found\");\r\n     isWhiteListed[_liquidityUser] = false;\r\n     emit RemovedWhiteList(_liquidityUser);\r\n  }\r\n  \r\n  modifier whenNotPaused() {\r\n    require(!limitPaused);\r\n    _;\r\n  }\r\n  \r\n  modifier whenPaused() {\r\n    require(limitPaused);\r\n    _;\r\n  }\r\n  \r\n  function limitoff() whenNotPaused public {\r\n     require(msg.sender == exchangeAddress, \"exchange address not found\");\r\n     limitPaused = true;\r\n     emit Pause();\r\n  }\r\n  \r\n  function limiton() whenPaused public {\r\n     require(msg.sender == exchangeAddress, \"exchange address not found\");\r\n     limitPaused = false;\r\n     emit Unpause();\r\n  }\r\n  \r\n  function findFivePercent(uint256 value) public view returns (uint256){\r\n      uint256 roundValue = value.ceil(basePercent);\r\n      uint256 fivePercent = roundValue.mul(basePercent).div(100);\r\n      return fivePercent;\r\n  }\r\n  \r\n  function allowance(address owner, address spender) public view returns (uint256){\r\n    return _allowed[owner][spender];\r\n  }\r\n  \r\n  function transfer(address to, uint256 value) public returns (bool) \r\n  {\r\n\t  require(value <= _balances[msg.sender], \"transfer amount exceeds balance\");\r\n\t  require(to != address(0), \"can't transfer to the zero address\");\r\n\t  require(to != burnAddress, \"can't transfer to the burn address\");\r\n\t  require(msg.sender != burnAddress, \"can't transfer from the burn address\");\r\n\t  require(to != teamAddress, \"can't transfer to the team address\");\r\n\t  if(!limitPaused)\r\n\t  {\r\n\t      if(!isWhiteListed[msg.sender])\r\n\t\t  {\r\n\t\t      require(value <= transferLimit, \"transaction limit exceeded\");\r\n\t\t  }\r\n\t  }\r\n\t  uint256 tokensToBurn = findFivePercent(value);\r\n\t  uint256 checkToBurn  = totalBurn.add(tokensToBurn);\r\n\t  if(toBurn < checkToBurn)\r\n\t  {\r\n\t\t  tokensToBurn = toBurn.sub(totalBurn);\r\n\t  }\r\n\t  \r\n\t  if(msg.sender==teamAddress)\r\n\t  {\r\n\t      uint256 currenttime = block.timestamp;\r\n\t      uint months = uint(((currenttime - releaseStartTime) / 60 / 60 / 24)).div(30); \r\n\t\t  uint256 releaseLimit = _releasePerMonth.mul(months);\r\n\t\t  uint256 maxRelease = totalRelease.add(value);\r\n\t\t  require(releaseLimit >= maxRelease, \"insufficient release balance\");\r\n\t\t  if(tokensToBurn > 0)\r\n\t\t  {\r\n\t\t      require(tokensToBurn <= _balances[burnAddress], \"burn amount exceeds balance\");\r\n\t\t\t  _balances[burnAddress] = _balances[burnAddress].sub(tokensToBurn);\r\n\t\t\t  _totalSupply = _totalSupply.sub(tokensToBurn);\r\n\t\t\t  totalBurn = totalBurn.add(tokensToBurn);\r\n\t\t\t  emit Transfer(burnAddress, address(0), tokensToBurn);\r\n\t\t  }\r\n\t\t  totalRelease=totalRelease.add(value);\r\n\t\t  _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n\t      _balances[to] = _balances[to].add(value);\r\n\t\t  emit Transfer(msg.sender, to, value);\r\n\t  }\r\n\t  else\r\n\t  {\r\n\t\t  if(tokensToBurn > 0)\r\n\t\t  {\r\n\t\t     require(tokensToBurn <= _balances[burnAddress], \"burn amount exceeds balance\");\r\n\t\t\t _balances[burnAddress] = _balances[burnAddress].sub(tokensToBurn);\r\n\t\t\t _totalSupply = _totalSupply.sub(tokensToBurn);\r\n\t\t\t totalBurn = totalBurn.add(tokensToBurn);\r\n\t\t\t emit Transfer(burnAddress, address(0), tokensToBurn);\r\n\t\t  }\r\n\t\t  _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n\t\t  _balances[to] = _balances[to].add(value);\r\n\t\t  emit Transfer(msg.sender, to, value);\r\n\t  }\r\n\t  return true;\r\n  }\r\n  \r\n  function airdrop(address[] memory receivers, uint256 amount) public {\r\n    require(msg.sender == airdropAddress, \"airdrop address not found\");\r\n    for (uint256 i = 0; i < receivers.length; i++) {\r\n       transfer(receivers[i], amount);\r\n    }\r\n  }\r\n  \r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n     require(spender != address(0));\r\n     _allowed[msg.sender][spender] = value;\r\n     emit Approval(msg.sender, spender, value);\r\n     return true;\r\n  }\r\n  \r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n\t  require(value <= _balances[from], \"transfer amount exceeds balance\");\r\n\t  require(to != address(0), \"can't transfer to the zero address\");\r\n\t  require(to != burnAddress, \"can't transfer to the burn address\");\r\n\t  require(from != burnAddress, \"can't transfer from the burn address\");\r\n\t  require(to != teamAddress, \"can't transfer to the team address\");\r\n\t  require(value <= _allowed[from][msg.sender], \"allowed limit exceed\");\r\n\t  \r\n\t  if(!limitPaused)\r\n\t  {\r\n\t      if(!isWhiteListed[from])\r\n\t\t  {\r\n\t\t      require(value <= transferLimit, \"transaction limit exceeded\");\r\n\t\t  }\r\n\t  }\r\n\t  \r\n\t  uint256 tokensToBurn = findFivePercent(value);\r\n\t  uint256 checkToBurn  = totalBurn.add(tokensToBurn);\r\n\t  if(toBurn < checkToBurn)\r\n\t  {\r\n\t\t  tokensToBurn = toBurn.sub(totalBurn);\r\n\t  }\r\n\t  \r\n\t  if(from==teamAddress)\r\n\t  {\r\n\t      uint256 currenttime = block.timestamp;\r\n\t      uint months = uint(((currenttime - releaseStartTime) / 60 / 60 / 24)).div(30); \r\n\t\t  uint256 releaseLimit = _releasePerMonth.mul(months);\r\n\t\t  uint256 maxRelease = totalRelease.add(value);\r\n\t\t  require(releaseLimit >= maxRelease, \"insufficient release balance\");\r\n\t\t  if(tokensToBurn > 0)\r\n\t\t  {\r\n\t\t      require(tokensToBurn <= _balances[burnAddress], \"burn amount exceeds balance\");\r\n\t\t\t  _balances[burnAddress] = _balances[burnAddress].sub(tokensToBurn);\r\n\t\t\t  _totalSupply = _totalSupply.sub(tokensToBurn);\r\n\t\t\t  totalBurn = totalBurn.add(tokensToBurn);\r\n\t\t\t  emit Transfer(burnAddress, address(0), tokensToBurn);\r\n\t\t  }\r\n\t\t  totalRelease=totalRelease.add(value);\r\n\t\t  _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\t\t  _balances[from] = _balances[from].sub(value);\r\n\t      _balances[to] = _balances[to].add(value);\r\n\t\t  emit Transfer(from, to, value);\r\n\t  }\r\n\t  else\r\n\t  {\r\n\t\t  if(tokensToBurn > 0)\r\n\t\t  {\r\n\t\t     require(tokensToBurn <= _balances[burnAddress], \"burn amount exceeds balance\");\r\n\t\t\t _balances[burnAddress] = _balances[burnAddress].sub(tokensToBurn);\r\n\t\t\t _totalSupply = _totalSupply.sub(tokensToBurn);\r\n\t\t\t totalBurn = totalBurn.add(tokensToBurn);\r\n\t\t\t emit Transfer(burnAddress, address(0), tokensToBurn);\r\n\t\t  }\r\n\t\t  _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\t\t  _balances[from] = _balances[from].sub(value);\r\n\t\t  _balances[to] = _balances[to].add(value);\r\n\t\t  emit Transfer(from, to, value);\r\n\t  }\r\n\t  return true;\r\n\t  \r\n  }\r\n  \r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n     require(spender != address(0));\r\n     _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n     emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n     return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n  \r\n  function _mint(address account, uint256 amount) internal {\r\n     require(amount != 0);\r\n     _balances[account] = _balances[account].add(amount);\r\n     emit Transfer(address(0), account, amount);\r\n  }\r\n  \r\n  function monthlyTokenBurn() public returns (bool) {\r\n      require(msg.sender == burnAddress, \"burn address not found\");\r\n\t  uint256 currenttime = block.timestamp;\r\n\t  uint months = uint(((currenttime - contractTime) / 60 / 60 / 24)).div(30); \r\n\t  uint256 burnLimit   = _burnPerMonth.mul(months);\r\n\t  if(burnLimit > maxBurnLimit)\r\n\t  {\r\n\t     burnLimit = maxBurnLimit;\r\n\t  }\r\n\t  uint256 toNextBurn  = burnLimit.sub(monthlyBurn);\r\n      require(toNextBurn != 0, \"burn limit 0\");\r\n\t  require(_balances[burnAddress] != 0, \"address balance 0\");\r\n\t  monthlyBurn = burnLimit;\r\n\t  nextBurnTime = contractTime+((months+1)*30 days);\r\n\t  _balances[burnAddress] = _balances[burnAddress].sub(toNextBurn);\r\n\t  _totalSupply = _totalSupply.sub(toNextBurn);\r\n\t  emit Transfer(burnAddress, address(0), toNextBurn);\r\n\t  return true;\r\n  }\r\n  \r\n}", "ABI": "[{\"inputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedWhiteList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityUser\",\"type\":\"address\"}],\"name\":\"addLiquidityAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"airdropAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"findFivePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getLiquidityStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limitPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"limitoff\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"limiton\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxBurnLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"monthlyBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"monthlyTokenBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nextBurnTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityUser\",\"type\":\"address\"}],\"name\":\"removeLiquidityAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"toBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GST", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://4b20da02ee2d294c44783dc7aa2063b5297c6682bc75b155eba8856a9b69bcfa"}