{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: dependencies/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n// File: dependencies/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n// File: IERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function limitSupply() external view returns (uint256);\r\n\r\n    function availableSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n// File: BUSDBANK.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract BUSDBANK {\r\n    \r\n    struct User {\r\n        uint256 stakedAmount;\r\n        uint256 lastUpdateTime;\r\n        uint256 rewards;\r\n        uint256 referralRewards;\r\n        uint256 weeklyDeposit;\r\n        uint256 weeklyReferrals;\r\n        bool partialWithdrawn;\r\n    }\r\n    \r\n    IERC20 private busdToken;\r\n    IERC721 private bankKeyNFT;\r\n    address private devPoolAddress;\r\n\r\n    uint256 private constant MIN_INVEST = 10; // min 10 BUSD\r\n    uint256 private constant DAILY_RETURN = 30; // 3% daily return\r\n    uint256 private constant NFT_BOOST = 10; // +1% on daily return\r\n    uint256 private constant STAKE_FEE = 100; // 10%\r\n    uint256 private constant REFERRAL_FEE = 400; // 40% of 10%\r\n    uint256 private constant WEEKLY_WINNER = 10; // 1% \r\n    uint256 private constant PRECISION = 1000; // Precision for percentage calculations\r\n    uint256 private constant TIME_STEP = 1 days; // time step for daily apr\r\n\r\n    \r\n    mapping(address => User) private users;\r\n    address[] private userAddresses;\r\n\r\n    // winner pick time\r\n    uint256 private winnerTime;\r\n\r\n    // launch\r\n    uint256 private launched;\r\n\r\n    \r\n    event Staked(address indexed user, uint256 amount);\r\n    event PartialWithdrawn(address indexed user, uint256 amount);\r\n    event ReferralReward(address indexed referrer, uint256 amount);\r\n    \r\n    constructor(address busdTokenAddress, address _devPoolAddress, address bankKeyNFTAddress) {\r\n        busdToken = IERC20(busdTokenAddress);\r\n        bankKeyNFT = IERC721(bankKeyNFTAddress);\r\n        devPoolAddress = _devPoolAddress;\r\n    }\r\n\r\n    function launch() external {\r\n        require(msg.sender == devPoolAddress, \"Only the admin can launch contract\");\r\n        require(launched == 0, \"contract has already been launched\");\r\n        launched = 1;\r\n        winnerTime = block.timestamp;\r\n    }\r\n\r\n    function ownsNFT(address user) public view returns(bool) {\r\n        uint256 balance = bankKeyNFT.balanceOf(user);\r\n\r\n        if (balance > 0){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function stake(uint256 amount, address referrer) external {\r\n        require(launched > 0, \"Contract has not launched yet\");\r\n        require(amount >= MIN_INVEST, \"Amount must be greater than or equal to 10\");\r\n        require(busdToken.balanceOf(msg.sender) >= amount, \"Insufficient BUSD balance\");\r\n        require(busdToken.allowance(msg.sender, address(this)) >= amount, \"Insufficient allowance\");\r\n        \r\n        busdToken.transferFrom(msg.sender, address(this), amount); // Transfer the staked BUSD to the contract\r\n\r\n        uint256 fee = (amount * STAKE_FEE) / PRECISION; // Calculate the 10% fee\r\n        uint256 stakedAmount = amount - fee; // Subtract the fee from the staked amount\r\n\r\n        // Check if the user has been referred by someone\r\n        if (referrer != address(0) && referrer != msg.sender) {\r\n            uint256 referralFee = (fee * REFERRAL_FEE) / PRECISION; // Calculate the 4% referral fee\r\n            \r\n            // Transfer the referral fee to the referrer\r\n            busdToken.transfer(referrer, referralFee);\r\n            \r\n            emit ReferralReward(referrer, referralFee);\r\n            \r\n            fee -= referralFee; // Deduct the referral fee from the total fee\r\n            \r\n            // Update the referral rewards for the referrer\r\n            users[referrer].referralRewards += referralFee;\r\n            users[referrer].weeklyReferrals += referralFee;\r\n        }\r\n        \r\n        // Transfer the remaining fee to the devPoolAddress\r\n        busdToken.transfer(devPoolAddress, fee);\r\n        \r\n        updateReward(msg.sender); // Update the rewards before changing the staked amount\r\n        \r\n        \r\n        users[msg.sender].stakedAmount += stakedAmount;\r\n        users[msg.sender].lastUpdateTime = block.timestamp;\r\n        users[msg.sender].weeklyDeposit += stakedAmount;\r\n\r\n        \r\n        addUser(msg.sender); // add the user\r\n        \r\n        updateReward(msg.sender); // Update\r\n        emit Staked(msg.sender, stakedAmount);\r\n    }\r\n\r\n    function compound() external {\r\n        require(users[msg.sender].stakedAmount > 0, \"No staked amount to compound\");\r\n\r\n        updateReward(msg.sender);\r\n\r\n        uint256 reward = users[msg.sender].rewards;\r\n\r\n        require(reward > 0, \"No rewards to compound\");\r\n\r\n        uint256 compoundAmount = reward;\r\n\r\n        users[msg.sender].rewards -= compoundAmount;\r\n        users[msg.sender].stakedAmount += compoundAmount;\r\n        users[msg.sender].weeklyDeposit += compoundAmount;\r\n\r\n        emit Staked(msg.sender, compoundAmount);\r\n    }\r\n\r\n\r\n    function partialWithdraw() external {\r\n        require(users[msg.sender].stakedAmount > 0, \"No staked amount to withdraw\");\r\n        require(!users[msg.sender].partialWithdrawn, \"Partial withdrawal already done\");\r\n        \r\n        uint256 amountToWithdraw = users[msg.sender].stakedAmount / 2; // 50%\r\n        \r\n        updateReward(msg.sender);\r\n        \r\n        users[msg.sender].stakedAmount -= amountToWithdraw;\r\n\r\n        if (amountToWithdraw >= users[msg.sender].weeklyDeposit){\r\n            users[msg.sender].weeklyDeposit = 0; // avoid negative case\r\n        }\r\n        else{\r\n            users[msg.sender].weeklyDeposit -= amountToWithdraw;\r\n        }\r\n\r\n        users[msg.sender].partialWithdrawn = true;\r\n        \r\n        busdToken.transfer(msg.sender, amountToWithdraw);\r\n        \r\n        emit PartialWithdrawn(msg.sender, amountToWithdraw);\r\n    }\r\n\r\n    function withdrawRewards() external {\r\n        require(users[msg.sender].stakedAmount > 0, \"No staked amount to withdraw rewards\");\r\n        \r\n        uint256 reward = calculateReward(msg.sender);\r\n        require(reward > 0, \"No rewards to withdraw\");\r\n        require(reward < busdToken.balanceOf(address(this)));\r\n        \r\n        updateReward(msg.sender);\r\n        \r\n        users[msg.sender].rewards = 0;\r\n        \r\n        busdToken.transfer(msg.sender, reward);\r\n    }\r\n\r\n    function calculateReward(address user) public view returns (uint256) {\r\n        uint256 stakedAmount = users[user].stakedAmount;\r\n        uint256 lastUpdateTime = users[user].lastUpdateTime;\r\n        uint256 rewards = users[user].rewards;\r\n        \r\n        uint256 reward = rewards;\r\n        \r\n        if (stakedAmount > 0) {\r\n            uint256 timeDifference = block.timestamp - lastUpdateTime;\r\n            \r\n            if (ownsNFT(user)) {\r\n                reward = rewards + ((stakedAmount * (DAILY_RETURN + NFT_BOOST) * timeDifference) / TIME_STEP / PRECISION);\r\n            }\r\n            else {\r\n                reward = rewards + ((stakedAmount * DAILY_RETURN * timeDifference) / TIME_STEP / PRECISION);\r\n            }\r\n            \r\n        }\r\n        \r\n        return reward;\r\n    }\r\n\r\n    function updateReward(address user) internal {\r\n        uint256 reward = calculateReward(user);\r\n        users[user].rewards = reward;\r\n        users[user].lastUpdateTime = block.timestamp;\r\n    }\r\n\r\n    \r\n\r\n    function addUser(address user) internal {\r\n        for (uint256 i = 0; i < userAddresses.length; i++) {\r\n            if (userAddresses[i] == user) {\r\n                return; // do not re-add user\r\n            }\r\n        }\r\n        \r\n        userAddresses.push(user);\r\n    }\r\n\r\n    function getTop3Depositors() public view returns (address[3] memory) {\r\n        address[3] memory topDepositorsAddresses;\r\n        uint256[3] memory topDepositorsAmounts;\r\n\r\n        for (uint256 i = 0; i < userAddresses.length; i++) {\r\n            uint256 depositAmount = users[userAddresses[i]].weeklyDeposit;\r\n\r\n            for (uint256 j = 0; j < 3; j++) {\r\n                if (depositAmount > topDepositorsAmounts[j]) {\r\n                    // Shift the other top depositors down\r\n                    for (uint256 k = 2; k > j; k--) {\r\n                        topDepositorsAmounts[k] = topDepositorsAmounts[k - 1];\r\n                        topDepositorsAddresses[k] = topDepositorsAddresses[k - 1];\r\n                    }\r\n\r\n                    // Update the new top depositor\r\n                    topDepositorsAmounts[j] = depositAmount;\r\n                    topDepositorsAddresses[j] = userAddresses[i];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return topDepositorsAddresses;\r\n    }\r\n\r\n    function getTop3Referrers() public view returns (address[3] memory) {\r\n        address[3] memory topReferrersAddresses;\r\n        uint256[3] memory topReferrersAmounts;\r\n\r\n        for (uint256 i = 0; i < userAddresses.length; i++) {\r\n            uint256 referralAmount = users[userAddresses[i]].weeklyReferrals;\r\n\r\n            for (uint256 j = 0; j < 3; j++) {\r\n                if (referralAmount > topReferrersAmounts[j]) {\r\n                    // Shift the other top referrers down\r\n                    for (uint256 k = 2; k > j; k--) {\r\n                        topReferrersAmounts[k] = topReferrersAmounts[k - 1];\r\n                        topReferrersAddresses[k] = topReferrersAddresses[k - 1];\r\n                    }\r\n\r\n                    // Update the new top referrer\r\n                    topReferrersAmounts[j] = referralAmount;\r\n                    topReferrersAddresses[j] = userAddresses[i];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return topReferrersAddresses;\r\n    }\r\n\r\n    function pickWeeklyWinners() external {\r\n        require(msg.sender == devPoolAddress, \"Only the admin can pick a winner\");\r\n        require(block.timestamp - winnerTime >= 7 days, \"At least 7 days must have passed before picking new winners\");\r\n\r\n        winnerTime = block.timestamp;\r\n\r\n        uint256 reward = (busdToken.balanceOf(address(this)) * WEEKLY_WINNER) / PRECISION;\r\n        \r\n        // get top depositor/referrer\r\n        address topDepositorsAddress = getTop3Depositors()[0];\r\n        address topReferrerAddress = getTop3Referrers()[0];\r\n\r\n        // top depositor\r\n        busdToken.transfer(topDepositorsAddress, reward);\r\n\r\n        // top referrer\r\n        busdToken.transfer(topReferrerAddress, reward);\r\n\r\n        // reset every user's weekly deposits/referrals to 0\r\n        for (uint256 i = 0; i < userAddresses.length; i++) {\r\n            users[userAddresses[i]].weeklyDeposit = 0;\r\n            users[userAddresses[i]].weeklyReferrals = 0;\r\n        }\r\n\r\n    }\r\n\r\n    function viewUserInfo(address user) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool){\r\n        return (users[user].stakedAmount, users[user].lastUpdateTime, users[user].rewards, users[user].referralRewards, users[user].weeklyDeposit,users[user].weeklyReferrals, users[user].partialWithdrawn);\r\n    }\r\n\r\n    function viewUserEstYield(address user) external view returns (uint256) {\r\n        uint256 estYield;\r\n\r\n        if (ownsNFT(user)) {\r\n            estYield = (users[user].stakedAmount * (DAILY_RETURN + NFT_BOOST)) / PRECISION;\r\n        }\r\n        else{\r\n            estYield = (users[user].stakedAmount * DAILY_RETURN) / PRECISION;\r\n        }\r\n        return estYield;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"busdTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bankKeyNFTAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PartialWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferralReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTop3Depositors\",\"outputs\":[{\"internalType\":\"address[3]\",\"name\":\"\",\"type\":\"address[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTop3Referrers\",\"outputs\":[{\"internalType\":\"address[3]\",\"name\":\"\",\"type\":\"address[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ownsNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partialWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pickWeeklyWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"viewUserEstYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"viewUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BUSDBANK", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000005348bbd91beb34af12780f07d206d2fa3eb15b63000000000000000000000000b5234861658a89ceaefd4e0275918bcfbc3a86d2", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d4f3b4872fb3b5278089624c40066f711617e11acd0a8b1f9791307137cd4a5e"}