{"SourceCode": "// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/Math.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)\r\n    external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721Holder.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n  /**\r\n   * @dev Implementation of the {IERC721Receiver} interface.\r\n   *\r\n   * Accepts all token transfers. \r\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\r\n   */\r\ncontract ERC721Holder is IERC721Receiver {\r\n\r\n    /**\r\n     * @dev See {IERC721Receiver-onERC721Received}.\r\n     *\r\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Pausable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/EnumerableSet.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/AccessControl.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using Address for address;\r\n\r\n    struct RoleData {\r\n        EnumerableSet.AddressSet members;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    mapping (bytes32 => RoleData) private _roles;\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view returns (bool) {\r\n        return _roles[role].members.contains(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\r\n        return _roles[role].members.length();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\r\n        return _roles[role].members.at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\r\n\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.add(account)) {\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.remove(account)) {\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20Pausable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev ERC20 token with pausable token transfers, minting and burning.\r\n *\r\n * Useful for scenarios such as preventing trades until the end of an evaluation\r\n * period, or having an emergency switch for freezing all token transfers in the\r\n * event of a large bug.\r\n */\r\nabstract contract ERC20Pausable is ERC20, Pausable {\r\n    /**\r\n     * @dev See {ERC20-_beforeTokenTransfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the contract must not be paused.\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\r\n    }\r\n}\r\n\r\n// File: contracts/siege/FruitToken.sol\r\n\r\npragma solidity =0.6.6;\r\n\r\n\r\n\r\n\r\n\r\ncontract FruitToken is ERC20Pausable, AccessControl, Ownable {\r\n    bytes32 public constant SAFE_MINT_ROLE = keccak256('SAFE_MINT_ROLE');\r\n\r\n    constructor(string memory name, string memory symbol) public ERC20(name, symbol) {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        _mint(address(this), 2E26);\r\n    }\r\n\r\n    function safeMint(address _to, uint256 _amount) public whenNotPaused returns (uint256 balance) {\r\n        require(hasRole(SAFE_MINT_ROLE, _msgSender()), 'Must have safe mint role');\r\n        balance = balanceOf(address(this));\r\n        if (balance != 0) {\r\n            balance = _amount > balance ? balance : _amount;\r\n            if (allowance(address(this), _msgSender()) < balance) {\r\n                _approve(address(this), _msgSender(), uint256(-1));\r\n            }\r\n            transferFrom(address(this), _to, balance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public {\r\n        uint256 decreasedAllowance =\r\n            allowance(account, _msgSender()).sub(amount, 'ERC20: burn amount exceeds allowance');\r\n\r\n        _approve(account, _msgSender(), decreasedAllowance);\r\n        _burn(account, amount);\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        _unpause();\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/introspection/IERC165.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.2;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts/introspection/ERC165.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    /*\r\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    constructor () internal {\r\n        // Derived contracts need only register support for their own interfaces,\r\n        // we register support for ERC165 itself here\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     *\r\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/EnumerableMap.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing an enumerable variant of Solidity's\r\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\r\n * type.\r\n *\r\n * Maps have the following properties:\r\n *\r\n * - Entries are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableMap.UintToAddressMap private myMap;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\r\n * supported.\r\n */\r\nlibrary EnumerableMap {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Map type with\r\n    // bytes32 keys and values.\r\n    // The Map implementation uses private functions, and user-facing\r\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\r\n    // the underlying Map.\r\n    // This means that we can only create new EnumerableMaps for types that fit\r\n    // in bytes32.\r\n\r\n    struct MapEntry {\r\n        bytes32 _key;\r\n        bytes32 _value;\r\n    }\r\n\r\n    struct Map {\r\n        // Storage of map keys and values\r\n        MapEntry[] _entries;\r\n\r\n        // Position of the entry defined by a key in the `entries` array, plus 1\r\n        // because index 0 means a key is not in the map.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\r\n        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\r\n            map._entries.push(MapEntry({ _key: key, _value: value }));\r\n            // The entry is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            map._indexes[key] = map._entries.length;\r\n            return true;\r\n        } else {\r\n            map._entries[keyIndex - 1]._value = value;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a key-value pair from a map. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\r\n        // We read and store the key's index to prevent multiple reads from the same storage slot\r\n        uint256 keyIndex = map._indexes[key];\r\n\r\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\r\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\r\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = keyIndex - 1;\r\n            uint256 lastIndex = map._entries.length - 1;\r\n\r\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            MapEntry storage lastEntry = map._entries[lastIndex];\r\n\r\n            // Move the last entry to the index where the entry to delete is\r\n            map._entries[toDeleteIndex] = lastEntry;\r\n            // Update the index for the moved entry\r\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved entry was stored\r\n            map._entries.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete map._indexes[key];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\r\n        return map._indexes[key] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of key-value pairs in the map. O(1).\r\n     */\r\n    function _length(Map storage map) private view returns (uint256) {\r\n        return map._entries.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of entries inside the\r\n    * array, and it may change when more entries are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\r\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\r\n\r\n        MapEntry storage entry = map._entries[index];\r\n        return (entry._key, entry._value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\r\n        return _get(map, key, \"EnumerableMap: nonexistent key\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\r\n     */\r\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\r\n        uint256 keyIndex = map._indexes[key];\r\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\r\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\r\n    }\r\n\r\n    // UintToAddressMap\r\n\r\n    struct UintToAddressMap {\r\n        Map _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\r\n        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\r\n        return _remove(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\r\n        return _contains(map._inner, bytes32(key));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements in the map. O(1).\r\n     */\r\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\r\n        return _length(map._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the element stored at position `index` in the set. O(1).\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\r\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\r\n        return (uint256(key), address(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\r\n        return address(uint256(_get(map._inner, bytes32(key))));\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\r\n     */\r\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\r\n        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        uint256 index = digits - 1;\r\n        temp = value;\r\n        while (temp != 0) {\r\n            buffer[index--] = byte(uint8(48 + temp % 10));\r\n            temp /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\r\n    using Strings for uint256;\r\n\r\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\r\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    // Mapping from holder address to their (enumerable) set of owned tokens\r\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\r\n\r\n    // Enumerable mapping from token ids to their owners\r\n    EnumerableMap.UintToAddressMap private _tokenOwners;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Optional mapping for token URIs\r\n    mapping (uint256 => string) private _tokenURIs;\r\n\r\n    // Base URI\r\n    string private _baseURI;\r\n\r\n    /*\r\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\r\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\r\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\r\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\r\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\r\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\r\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\r\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\r\n     *\r\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\r\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n\r\n    /*\r\n     *     bytes4(keccak256('name()')) == 0x06fdde03\r\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\r\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\r\n     *\r\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n\r\n    /*\r\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\r\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\r\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\r\n     *\r\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\r\n     */\r\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n\r\n        // register the supported interfaces to conform to ERC721 via ERC165\r\n        _registerInterface(_INTERFACE_ID_ERC721);\r\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\r\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n\r\n        return _holderTokens[owner].length();\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view override returns (address) {\r\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory _tokenURI = _tokenURIs[tokenId];\r\n\r\n        // If there is no base URI, return the token URI.\r\n        if (bytes(_baseURI).length == 0) {\r\n            return _tokenURI;\r\n        }\r\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\r\n        if (bytes(_tokenURI).length > 0) {\r\n            return string(abi.encodePacked(_baseURI, _tokenURI));\r\n        }\r\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\r\n        return string(abi.encodePacked(_baseURI, tokenId.toString()));\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\r\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\r\n    * to the token ID if no specific URI is set for that token ID.\r\n    */\r\n    function baseURI() public view returns (string memory) {\r\n        return _baseURI;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\r\n        return _holderTokens[owner].at(index);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\r\n        return _tokenOwners.length();\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\r\n        (uint256 tokenId, ) = _tokenOwners.at(index);\r\n        return tokenId;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return _tokenOwners.contains(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     d*\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _holderTokens[to].add(tokenId);\r\n\r\n        _tokenOwners.set(tokenId, to);\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        // Clear metadata (if any)\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n            delete _tokenURIs[tokenId];\r\n        }\r\n\r\n        _holderTokens[owner].remove(tokenId);\r\n\r\n        _tokenOwners.remove(tokenId);\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n        require(ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _holderTokens[from].remove(tokenId);\r\n        _holderTokens[to].add(tokenId);\r\n\r\n        _tokenOwners.set(tokenId, to);\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\r\n        _tokenURIs[tokenId] = _tokenURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to set the base URI for all token IDs. It is\r\n     * automatically added as a prefix to the value returned in {tokenURI},\r\n     * or to the token ID if {tokenURI} is empty.\r\n     */\r\n    function _setBaseURI(string memory baseURI_) internal virtual {\r\n        _baseURI = baseURI_;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        private returns (bool)\r\n    {\r\n        if (!to.isContract()) {\r\n            return true;\r\n        }\r\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\r\n            IERC721Receiver(to).onERC721Received.selector,\r\n            _msgSender(),\r\n            from,\r\n            tokenId,\r\n            _data\r\n        ), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n        bytes4 retval = abi.decode(returndata, (bytes4));\r\n        return (retval == _ERC721_RECEIVED);\r\n    }\r\n\r\n    function _approve(address to, uint256 tokenId) private {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721Pausable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev ERC721 token with pausable token transfers, minting and burning.\r\n *\r\n * Useful for scenarios such as preventing trades until the end of an evaluation\r\n * period, or having an emergency switch for freezing all token transfers in the\r\n * event of a large bug.\r\n */\r\nabstract contract ERC721Pausable is ERC721, Pausable {\r\n    /**\r\n     * @dev See {ERC721-_beforeTokenTransfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the contract must not be paused.\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        require(!paused(), \"ERC721Pausable: token transfer while paused\");\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IBurn.sol\r\n\r\npragma solidity >=0.6.6;\r\n\r\ninterface IBurn {\r\n    function burn(uint256 token) external;\r\n}\r\n\r\n// File: contracts/libraries/StringHelper.sol\r\n\r\npragma solidity >=0.6.0;\r\n\r\nlibrary StringHelper {\r\n    function utilCompare(string memory a, string memory b) internal pure returns (bool) {\r\n        if (bytes(a).length != bytes(b).length) {\r\n            return false;\r\n        }\r\n        for (uint256 i = 0; i < bytes(a).length; i++) {\r\n            if (bytes(a)[i] != bytes(b)[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function hashCompare(string memory a, string memory b) internal pure returns (bool) {\r\n        if (bytes(a).length != bytes(b).length) {\r\n            return false;\r\n        } else {\r\n            return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/PetNFT.sol\r\n\r\npragma solidity >=0.6.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PetNFT is ERC721Pausable, AccessControl, Ownable, ERC721Holder {\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct PetBaseInfo {\r\n        uint256 petType;\r\n        string name;\r\n        uint256 battlePower;\r\n        uint256 experience;\r\n        uint256 stamina;\r\n        uint256 petToGet; // pet to get when decompose\r\n        uint256 bakeToGet; // bake to get when decompose\r\n    }\r\n    struct PetEquipmentInfo {\r\n        uint256 weapon;\r\n        uint256 shield;\r\n        uint256 helmet;\r\n        uint256 armour;\r\n    }\r\n    struct PetExtraInfo {\r\n        uint256 extraUintA; // last charge stamina for 1200 blocks plus 10\r\n        uint256 extraUintB;\r\n        uint256 extraUintC;\r\n        uint256 extraUintD;\r\n        uint256 extraUintE;\r\n        uint256 extraUintF;\r\n        uint256 extraUintG;\r\n        uint256 extraUintH;\r\n        string extraStringA;\r\n        string extraStringB;\r\n        string extraStringC;\r\n    }\r\n\r\n    bytes32 public constant MINT_ROLE = keccak256('MINT_ROLE');\r\n    bytes32 public constant UPDATE_BASE_INFO_ROLE = keccak256('UPDATE_BASE_INFO_ROLE');\r\n    bytes32 public constant EQUIPPED_ROLE = keccak256('EQUIPPED_ROLE');\r\n    bytes32 public constant UPDATE_EXTRA_INFO_ROLE = keccak256('UPDATE_EXTRA_INFO_ROLE');\r\n    enum EquipmentType {WEAPON, SHIELD, HELMET, ARMOUR}\r\n\r\n    uint256 public nextTokenId = 1;\r\n    uint256 public petReserve;\r\n    uint256 public bakeReserve;\r\n\r\n    address public immutable PET;\r\n    address public immutable BAKE;\r\n\r\n    mapping(uint256 => PetBaseInfo) public petBaseInfoMap;\r\n    mapping(uint256 => PetEquipmentInfo) public petEquipmentInfoMap;\r\n    mapping(uint256 => PetExtraInfo) public petExtraInfoMap;\r\n    mapping(EquipmentType => address) public equipmentAddressMap;\r\n\r\n    event Mint(\r\n        address indexed user,\r\n        uint256 indexed tokenId,\r\n        uint256 petType,\r\n        string name,\r\n        uint256 battlePower,\r\n        uint256 experience,\r\n        uint256 stamina,\r\n        uint256 petToGet,\r\n        uint256 bakeToGet\r\n    );\r\n    event BurnBaseInfo(\r\n        address indexed user,\r\n        uint256 indexed tokenId,\r\n        uint256 petType,\r\n        string name,\r\n        uint256 battlePower,\r\n        uint256 experience,\r\n        uint256 stamina,\r\n        uint256 petToGet,\r\n        uint256 bakeToGet\r\n    );\r\n    event BurnEquipmentInfo(\r\n        address indexed user,\r\n        uint256 indexed tokenId,\r\n        uint256 weapon,\r\n        uint256 shield,\r\n        uint256 helmet,\r\n        uint256 armour\r\n    );\r\n    event BurnExtraInfo(address indexed user, uint256 indexed tokenId, PetExtraInfo petExtraInfo);\r\n    event UpdateBaseInfo(\r\n        address indexed sender,\r\n        uint256 indexed tokenId,\r\n        uint256 petType,\r\n        string name,\r\n        uint256 battlePower,\r\n        uint256 experience,\r\n        uint256 stamina,\r\n        uint256 petToGet,\r\n        uint256 bakeToGet\r\n    );\r\n    event UpdateExtraInfo(address indexed sender, uint256 indexed tokenId, PetExtraInfo petExtraInfoC);\r\n    event Sync(uint256 petReserve, uint256 bakeReserve);\r\n    event Equipped(uint256 tokenId, EquipmentType equipmentType, uint256 equipmentTokenId);\r\n    event SetEquipmentAddress(\r\n        address indexed sender,\r\n        EquipmentType equipmentType,\r\n        address indexed previousAddress,\r\n        address indexed newAddress\r\n    );\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        address _PET,\r\n        address _BAKE\r\n    ) public ERC721(name, symbol) {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        PET = _PET;\r\n        BAKE = _BAKE;\r\n    }\r\n\r\n    function _sync(\r\n        uint256 pendingPetToGet,\r\n        uint256 pendingBakeToGet,\r\n        bool isAdd\r\n    ) private {\r\n        uint256 balanceOfPet = IERC20(PET).balanceOf(address(this));\r\n        uint256 balanceOfBake = IERC20(BAKE).balanceOf(address(this));\r\n        require(\r\n            pendingPetToGet == 0 ||\r\n                (\r\n                    isAdd\r\n                        ? balanceOfPet.sub(petReserve) == pendingPetToGet\r\n                        : balanceOfPet.add(pendingPetToGet) == petReserve\r\n                ),\r\n            'Error pet amount'\r\n        );\r\n        require(\r\n            pendingBakeToGet == 0 ||\r\n                (\r\n                    isAdd\r\n                        ? balanceOfBake.sub(bakeReserve) == pendingBakeToGet\r\n                        : balanceOfBake.add(pendingBakeToGet) == bakeReserve\r\n                ),\r\n            'Error bake amount'\r\n        );\r\n        if (petReserve != balanceOfPet) {\r\n            petReserve = balanceOfPet;\r\n        }\r\n        if (bakeReserve != balanceOfBake) {\r\n            bakeReserve = balanceOfBake;\r\n        }\r\n        emit Sync(petReserve, bakeReserve);\r\n    }\r\n\r\n    function mint(\r\n        address to,\r\n        uint256 petType,\r\n        string memory name,\r\n        uint256 battlePower,\r\n        uint256 experience,\r\n        uint256 stamina,\r\n        uint256 petToGet,\r\n        uint256 bakeToGet\r\n    ) public returns (uint256 tokenId) {\r\n        require(hasRole(MINT_ROLE, _msgSender()), 'Must have mint role');\r\n        tokenId = nextTokenId;\r\n        _mint(to, tokenId);\r\n        nextTokenId++;\r\n        petBaseInfoMap[tokenId] = PetBaseInfo({\r\n            petType: petType,\r\n            name: name,\r\n            battlePower: battlePower,\r\n            experience: experience,\r\n            stamina: stamina,\r\n            petToGet: petToGet,\r\n            bakeToGet: bakeToGet\r\n        });\r\n        if (petToGet != 0 || bakeToGet != 0) {\r\n            _sync(petToGet, bakeToGet, true);\r\n        }\r\n        emit Mint(to, tokenId, petType, name, battlePower, experience, stamina, petToGet, bakeToGet);\r\n    }\r\n\r\n    function updateBaseInfo(\r\n        uint256 tokenId,\r\n        uint256 petType,\r\n        string memory name,\r\n        uint256 battlePower,\r\n        uint256 experience,\r\n        uint256 stamina,\r\n        uint256 petToGet,\r\n        uint256 bakeToGet\r\n    ) public {\r\n        require(hasRole(UPDATE_BASE_INFO_ROLE, _msgSender()), 'Must have update base info role');\r\n        PetBaseInfo storage petBaseInfo = petBaseInfoMap[tokenId];\r\n        if (petBaseInfo.petToGet != petToGet || petBaseInfo.bakeToGet != bakeToGet) {\r\n            // petToGet || bakeToGet must be grant than old value\r\n            _sync(petToGet.sub(petBaseInfo.petToGet), bakeToGet.sub(petBaseInfo.bakeToGet), true);\r\n        }\r\n        if (petType != petBaseInfo.petType) {\r\n            petBaseInfo.petType = petType;\r\n        }\r\n        if (!StringHelper.utilCompare(name, petBaseInfo.name)) {\r\n            petBaseInfo.name = name;\r\n        }\r\n        if (battlePower != petBaseInfo.battlePower) {\r\n            petBaseInfo.battlePower = battlePower;\r\n        }\r\n        if (experience != petBaseInfo.experience) {\r\n            petBaseInfo.experience = experience;\r\n        }\r\n        if (stamina != petBaseInfo.stamina) {\r\n            petBaseInfo.stamina = stamina;\r\n        }\r\n        if (petToGet != petBaseInfo.petToGet) {\r\n            petBaseInfo.petToGet = petToGet;\r\n        }\r\n        if (bakeToGet != petBaseInfo.bakeToGet) {\r\n            petBaseInfo.bakeToGet = bakeToGet;\r\n        }\r\n        emit UpdateBaseInfo(\r\n            _msgSender(),\r\n            tokenId,\r\n            petType,\r\n            name,\r\n            battlePower,\r\n            experience,\r\n            stamina,\r\n            petToGet,\r\n            bakeToGet\r\n        );\r\n    }\r\n\r\n    function updateExtraInfo(\r\n        uint256 tokenId,\r\n        uint256 extraUintA,\r\n        uint256 extraUintB,\r\n        uint256 extraUintC,\r\n        uint256 extraUintD,\r\n        uint256 extraUintE,\r\n        uint256 extraUintF,\r\n        uint256 extraUintG,\r\n        uint256 extraUintH,\r\n        string memory extraStringA,\r\n        string memory extraStringB,\r\n        string memory extraStringC\r\n    ) public {\r\n        require(hasRole(UPDATE_EXTRA_INFO_ROLE, _msgSender()), 'Must have update extra info role');\r\n        PetExtraInfo storage petExtraInfo = petExtraInfoMap[tokenId];\r\n        if (extraUintA != petExtraInfo.extraUintA) {\r\n            petExtraInfo.extraUintA = extraUintA;\r\n        }\r\n        if (extraUintB != petExtraInfo.extraUintB) {\r\n            petExtraInfo.extraUintB = extraUintB;\r\n        }\r\n        if (extraUintC != petExtraInfo.extraUintC) {\r\n            petExtraInfo.extraUintC = extraUintC;\r\n        }\r\n        if (extraUintD != petExtraInfo.extraUintD) {\r\n            petExtraInfo.extraUintD = extraUintD;\r\n        }\r\n        if (extraUintE != petExtraInfo.extraUintE) {\r\n            petExtraInfo.extraUintE = extraUintE;\r\n        }\r\n        if (extraUintF != petExtraInfo.extraUintF) {\r\n            petExtraInfo.extraUintF = extraUintF;\r\n        }\r\n        if (extraUintG != petExtraInfo.extraUintG) {\r\n            petExtraInfo.extraUintG = extraUintG;\r\n        }\r\n        if (extraUintH != petExtraInfo.extraUintH) {\r\n            petExtraInfo.extraUintH = extraUintH;\r\n        }\r\n\r\n        if (!StringHelper.utilCompare(extraStringA, petExtraInfo.extraStringA)) {\r\n            petExtraInfo.extraStringA = extraStringA;\r\n        }\r\n        if (!StringHelper.utilCompare(extraStringB, petExtraInfo.extraStringB)) {\r\n            petExtraInfo.extraStringB = extraStringB;\r\n        }\r\n        if (!StringHelper.utilCompare(extraStringC, petExtraInfo.extraStringC)) {\r\n            petExtraInfo.extraStringC = extraStringC;\r\n        }\r\n        emit UpdateExtraInfo(_msgSender(), tokenId, petExtraInfo);\r\n    }\r\n\r\n    function _burnEquipment(\r\n        address equipmentAddress,\r\n        uint256 tokenId,\r\n        uint256 equipmentTokenId\r\n    ) internal virtual {\r\n        IERC721(equipmentAddress).safeTransferFrom(address(this), ownerOf(tokenId), equipmentTokenId);\r\n        IBurn(equipmentAddress).burn(equipmentTokenId);\r\n    }\r\n\r\n    /**\r\n     * burn token, and send `petToGet` to owner, send `bakeToGet` to owner.\r\n     */\r\n    function burn(uint256 tokenId) public {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), 'caller is not owner nor approved');\r\n        PetBaseInfo memory petBaseInfo = petBaseInfoMap[tokenId];\r\n        PetEquipmentInfo memory petEquipmentInfo = petEquipmentInfoMap[tokenId];\r\n        PetExtraInfo memory petExtraInfo = petExtraInfoMap[tokenId];\r\n\r\n        if (petBaseInfo.petToGet != 0) {\r\n            IERC20(PET).safeTransfer(ownerOf(tokenId), petBaseInfo.petToGet);\r\n        }\r\n        if (petBaseInfo.bakeToGet != 0) {\r\n            IERC20(BAKE).safeTransfer(ownerOf(tokenId), petBaseInfo.bakeToGet);\r\n        }\r\n        _sync(petBaseInfo.petToGet, petBaseInfo.bakeToGet, false);\r\n        if (petEquipmentInfo.weapon != 0) {\r\n            _burnEquipment(equipmentAddressMap[EquipmentType.WEAPON], tokenId, petEquipmentInfo.weapon);\r\n        }\r\n        if (petEquipmentInfo.shield != 0) {\r\n            _burnEquipment(equipmentAddressMap[EquipmentType.SHIELD], tokenId, petEquipmentInfo.shield);\r\n        }\r\n        if (petEquipmentInfo.helmet != 0) {\r\n            _burnEquipment(equipmentAddressMap[EquipmentType.HELMET], tokenId, petEquipmentInfo.helmet);\r\n        }\r\n        if (petEquipmentInfo.armour != 0) {\r\n            _burnEquipment(equipmentAddressMap[EquipmentType.ARMOUR], tokenId, petEquipmentInfo.armour);\r\n        }\r\n        delete petBaseInfoMap[tokenId];\r\n        delete petEquipmentInfoMap[tokenId];\r\n        delete petExtraInfoMap[tokenId];\r\n        _burn(tokenId);\r\n        emit BurnBaseInfo(\r\n            _msgSender(),\r\n            tokenId,\r\n            petBaseInfo.petType,\r\n            petBaseInfo.name,\r\n            petBaseInfo.battlePower,\r\n            petBaseInfo.experience,\r\n            petBaseInfo.stamina,\r\n            petBaseInfo.petToGet,\r\n            petBaseInfo.bakeToGet\r\n        );\r\n        emit BurnEquipmentInfo(\r\n            _msgSender(),\r\n            tokenId,\r\n            petEquipmentInfo.weapon,\r\n            petEquipmentInfo.shield,\r\n            petEquipmentInfo.helmet,\r\n            petEquipmentInfo.armour\r\n        );\r\n        emit BurnExtraInfo(_msgSender(), tokenId, petExtraInfo);\r\n    }\r\n\r\n    function _updatePetEquipment(\r\n        uint256 tokenId,\r\n        EquipmentType equipmentType,\r\n        uint256 equipmentTokenId\r\n    ) internal virtual {\r\n        uint256 oldEquipmentTokenId = 0;\r\n        if (equipmentType == EquipmentType.WEAPON) {\r\n            require(\r\n                (petEquipmentInfoMap[tokenId].weapon == 0 && equipmentTokenId != 0) || equipmentTokenId == 0,\r\n                'wrong equipmentTokenId'\r\n            );\r\n            oldEquipmentTokenId = petEquipmentInfoMap[tokenId].weapon;\r\n            petEquipmentInfoMap[tokenId].weapon = equipmentTokenId;\r\n        } else if (equipmentType == EquipmentType.SHIELD) {\r\n            require(\r\n                (petEquipmentInfoMap[tokenId].shield == 0 && equipmentTokenId != 0) || equipmentTokenId == 0,\r\n                'wrong equipmentTokenId'\r\n            );\r\n            oldEquipmentTokenId = petEquipmentInfoMap[tokenId].shield;\r\n            petEquipmentInfoMap[tokenId].shield = equipmentTokenId;\r\n        } else if (equipmentType == EquipmentType.HELMET) {\r\n            require(\r\n                (petEquipmentInfoMap[tokenId].helmet == 0 && equipmentTokenId != 0) || equipmentTokenId == 0,\r\n                'wrong equipmentTokenId'\r\n            );\r\n            oldEquipmentTokenId = petEquipmentInfoMap[tokenId].helmet;\r\n            petEquipmentInfoMap[tokenId].helmet = equipmentTokenId;\r\n        } else if (equipmentType == EquipmentType.ARMOUR) {\r\n            require(\r\n                (petEquipmentInfoMap[tokenId].armour == 0 && equipmentTokenId != 0) || equipmentTokenId == 0,\r\n                'wrong equipmentTokenId'\r\n            );\r\n            oldEquipmentTokenId = petEquipmentInfoMap[tokenId].armour;\r\n            petEquipmentInfoMap[tokenId].armour = equipmentTokenId;\r\n        } else {\r\n            revert('unknown equipmentType');\r\n        }\r\n        if (equipmentTokenId != 0) {\r\n            IERC721(equipmentAddressMap[equipmentType]).safeTransferFrom(\r\n                IERC721(equipmentAddressMap[equipmentType]).ownerOf(equipmentTokenId),\r\n                address(this),\r\n                equipmentTokenId\r\n            );\r\n        } else {\r\n            IERC721(equipmentAddressMap[equipmentType]).safeTransferFrom(\r\n                address(this),\r\n                ownerOf(tokenId),\r\n                oldEquipmentTokenId\r\n            );\r\n        }\r\n    }\r\n\r\n    function equipped(\r\n        uint256 tokenId,\r\n        EquipmentType equipmentType,\r\n        uint256 equipmentTokenId\r\n    ) public {\r\n        require(hasRole(EQUIPPED_ROLE, _msgSender()), 'Must have equipped role');\r\n        _updatePetEquipment(tokenId, equipmentType, equipmentTokenId);\r\n        emit Equipped(tokenId, equipmentType, equipmentTokenId);\r\n    }\r\n\r\n    function setBaseURI(string memory baseURI) public onlyOwner {\r\n        _setBaseURI(baseURI);\r\n    }\r\n\r\n    function setTokenURI(uint256 tokenId, string memory tokenURI) public onlyOwner {\r\n        _setTokenURI(tokenId, tokenURI);\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        _unpause();\r\n    }\r\n\r\n    function setEquipmentAddress(EquipmentType equipmentType, address _address) public onlyOwner {\r\n        require(equipmentAddressMap[equipmentType] != _address, 'Not need update.');\r\n        emit SetEquipmentAddress(_msgSender(), equipmentType, equipmentAddressMap[equipmentType], _address);\r\n        equipmentAddressMap[equipmentType] = _address;\r\n    }\r\n\r\n    function getPetInfo(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (\r\n            PetBaseInfo memory,\r\n            PetEquipmentInfo memory,\r\n            PetExtraInfo memory\r\n        )\r\n    {\r\n        return (petBaseInfoMap[tokenId], petEquipmentInfoMap[tokenId], petExtraInfoMap[tokenId]);\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/ERC721ApproveHelper.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity >=0.6.0;\r\n\r\n\r\nlibrary ERC721ApproveHelper {\r\n    function isApprovedOrOwner(\r\n        IERC721 token,\r\n        address spender,\r\n        uint256 tokenId\r\n    ) internal view returns (bool) {\r\n        address owner = token.ownerOf(tokenId);\r\n        return (spender == owner || token.getApproved(tokenId) == spender || token.isApprovedForAll(owner, spender));\r\n    }\r\n}\r\n\r\n// File: contracts/weapon/WeaponNFT.sol\r\n\r\npragma solidity =0.6.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract WeaponNFT is ERC721Pausable, AccessControl, Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    struct WeaponInfo {\r\n        uint256 weaponType;\r\n        uint256 stakingPower;\r\n        uint256 level;\r\n        uint256 petToGet;\r\n        uint256 bakeToGet;\r\n    }\r\n\r\n    bytes32 public constant MINT_ROLE = keccak256('MINT_ROLE');\r\n\r\n    uint256 public nextTokenId = 1;\r\n    uint256 public petReserve;\r\n    uint256 public bakeReserve;\r\n\r\n    address public immutable PET;\r\n    address public immutable BAKE;\r\n\r\n    mapping(uint256 => WeaponInfo) public weaponInfoMap;\r\n\r\n    event Mint(\r\n        address indexed user,\r\n        uint256 indexed tokenId,\r\n        uint256 weaponType,\r\n        uint256 level,\r\n        uint256 stakingPower,\r\n        uint256 petToGet,\r\n        uint256 bakeToGet\r\n    );\r\n    event Burn(\r\n        address indexed user,\r\n        uint256 indexed tokenId,\r\n        uint256 weaponType,\r\n        uint256 level,\r\n        uint256 stakingPower,\r\n        uint256 petToGet,\r\n        uint256 bakeToGet\r\n    );\r\n    event Update(\r\n        address indexed sender,\r\n        uint256 indexed tokenId,\r\n        uint256 weaponType,\r\n        uint256 level,\r\n        uint256 stakingPower,\r\n        uint256 petToGet,\r\n        uint256 bakeToGet\r\n    );\r\n    event Sync(uint256 petReserve, uint256 bakeReserve);\r\n\r\n    constructor(address _PET, address _BAKE) public ERC721('Weapon NFT', 'WEAPONNFT') {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        PET = _PET;\r\n        BAKE = _BAKE;\r\n    }\r\n\r\n    function getLevel(uint256 stakingPower) public pure returns (uint256 level) {\r\n        level = 1; // < 1k\r\n        if (stakingPower >= 1E3 && stakingPower < 2E3) {\r\n            level = 2;\r\n        } else if (stakingPower >= 2E3 && stakingPower < 5E3) {\r\n            level = 3;\r\n        } else if (stakingPower >= 5E3 && stakingPower < 1E4) {\r\n            level = 4;\r\n        } else if (stakingPower >= 1E4 && stakingPower < 2E4) {\r\n            level = 5;\r\n        } else if (stakingPower >= 2E4 && stakingPower < 5E4) {\r\n            level = 6;\r\n        } else if (stakingPower >= 5E4 && stakingPower < 1E5) {\r\n            level = 7;\r\n        } else if (stakingPower >= 1E5 && stakingPower < 5E5) {\r\n            level = 8;\r\n        } else if (stakingPower >= 5E5 && stakingPower < 1E6) {\r\n            level = 9;\r\n        } else if (stakingPower >= 1E6) {\r\n            level = 10;\r\n        }\r\n    }\r\n\r\n    function _sync(\r\n        uint256 pendingPetToGet,\r\n        uint256 pendingBakeToGet,\r\n        bool isAdd\r\n    ) private {\r\n        uint256 balanceOfPet = IERC20(PET).balanceOf(address(this));\r\n        uint256 balanceOfBake = IERC20(BAKE).balanceOf(address(this));\r\n        require(\r\n            pendingPetToGet == 0 ||\r\n                (\r\n                    isAdd\r\n                        ? balanceOfPet.sub(petReserve) == pendingPetToGet\r\n                        : balanceOfPet.add(pendingPetToGet) == petReserve\r\n                ),\r\n            'Error pet amount'\r\n        );\r\n        require(\r\n            pendingBakeToGet == 0 ||\r\n                (\r\n                    isAdd\r\n                        ? balanceOfBake.sub(bakeReserve) == pendingBakeToGet\r\n                        : balanceOfBake.add(pendingBakeToGet) == bakeReserve\r\n                ),\r\n            'Error bake amount'\r\n        );\r\n        if (petReserve != balanceOfPet) {\r\n            petReserve = balanceOfPet;\r\n        }\r\n        if (bakeReserve != balanceOfBake) {\r\n            bakeReserve = balanceOfBake;\r\n        }\r\n        emit Sync(petReserve, bakeReserve);\r\n    }\r\n\r\n    function mint(\r\n        address to,\r\n        uint256 weaponType,\r\n        uint256 stakingPower,\r\n        uint256 petToGet,\r\n        uint256 bakeToGet\r\n    ) public returns (uint256 tokenId) {\r\n        require(hasRole(MINT_ROLE, _msgSender()), 'Must have mint role');\r\n        tokenId = nextTokenId;\r\n        _mint(to, tokenId);\r\n        nextTokenId++;\r\n        uint256 level = getLevel(stakingPower);\r\n        weaponInfoMap[tokenId] = WeaponInfo({\r\n            weaponType: weaponType,\r\n            stakingPower: stakingPower,\r\n            level: level,\r\n            petToGet: petToGet,\r\n            bakeToGet: bakeToGet\r\n        });\r\n        _sync(petToGet, bakeToGet, true);\r\n        emit Mint(to, tokenId, weaponType, stakingPower, level, petToGet, bakeToGet);\r\n    }\r\n\r\n    function update(\r\n        uint256 tokenId,\r\n        uint256 weaponType,\r\n        uint256 stakingPower,\r\n        uint256 petToGet,\r\n        uint256 bakeToGet\r\n    ) public {\r\n        require(hasRole(MINT_ROLE, _msgSender()), 'Must have mint role');\r\n        uint256 level = getLevel(stakingPower);\r\n        WeaponInfo memory weaponInfo = weaponInfoMap[tokenId];\r\n        // petToGet & bakeToGet must be grant than equal old value\r\n        _sync(petToGet.sub(weaponInfo.petToGet), bakeToGet.sub(weaponInfo.bakeToGet), true);\r\n        weaponInfoMap[tokenId] = WeaponInfo({\r\n            weaponType: weaponType,\r\n            stakingPower: stakingPower,\r\n            level: level,\r\n            petToGet: petToGet,\r\n            bakeToGet: bakeToGet\r\n        });\r\n        emit Update(_msgSender(), tokenId, weaponType, stakingPower, level, petToGet, bakeToGet);\r\n    }\r\n\r\n    /**\r\n     * burn token, and send `petToGet` to owner, send `bakeToGet` to owner.\r\n     */\r\n    function burn(uint256 tokenId) public {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), 'caller is not owner nor approved');\r\n        WeaponInfo memory weaponInfo = weaponInfoMap[tokenId];\r\n        if (weaponInfo.petToGet != 0) {\r\n            IERC20(PET).safeTransfer(ownerOf(tokenId), weaponInfo.petToGet);\r\n        }\r\n        if (weaponInfo.bakeToGet != 0) {\r\n            IERC20(BAKE).safeTransfer(ownerOf(tokenId), weaponInfo.bakeToGet);\r\n        }\r\n        _sync(weaponInfo.petToGet, weaponInfo.bakeToGet, false);\r\n        delete weaponInfoMap[tokenId];\r\n        _burn(tokenId);\r\n        emit Burn(\r\n            _msgSender(),\r\n            tokenId,\r\n            weaponInfo.weaponType,\r\n            weaponInfo.stakingPower,\r\n            weaponInfo.level,\r\n            weaponInfo.petToGet,\r\n            weaponInfo.bakeToGet\r\n        );\r\n    }\r\n\r\n    function setBaseURI(string memory baseURI) public onlyOwner {\r\n        _setBaseURI(baseURI);\r\n    }\r\n\r\n    function setTokenURI(uint256 tokenId, string memory tokenURI) public onlyOwner {\r\n        _setTokenURI(tokenId, tokenURI);\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        _unpause();\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IGetBattlePower.sol\r\n\r\npragma solidity >=0.6.6;\r\n\r\ninterface IGetBattlePower {\r\n    function getBattlePower(uint256 token) external view returns (uint256 battlePower);\r\n}\r\n\r\n// File: contracts/libraries/PetNftHelper.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity >=0.6.0;\r\n\r\n\r\n\r\n\r\nlibrary PetNftHelper {\r\n    using SafeMath for uint256;\r\n\r\n    function getPetBaseInfo(PetNFT petNFT, uint256 tokenId) internal view returns (PetNFT.PetBaseInfo memory) {\r\n        (\r\n            uint256 petType,\r\n            string memory name,\r\n            uint256 battlePower,\r\n            uint256 experience,\r\n            uint256 stamina,\r\n            uint256 petToGet,\r\n            uint256 bakeToGet\r\n        ) = petNFT.petBaseInfoMap(tokenId);\r\n\r\n        return\r\n            PetNFT.PetBaseInfo({\r\n                petType: petType,\r\n                name: name,\r\n                battlePower: battlePower,\r\n                experience: experience,\r\n                stamina: stamina,\r\n                petToGet: petToGet,\r\n                bakeToGet: bakeToGet\r\n            });\r\n    }\r\n\r\n    function getPetEquipmentInfo(PetNFT petNFT, uint256 tokenId)\r\n        internal\r\n        view\r\n        returns (PetNFT.PetEquipmentInfo memory)\r\n    {\r\n        (uint256 weapon, uint256 shield, uint256 helmet, uint256 armour) = petNFT.petEquipmentInfoMap(tokenId);\r\n        return PetNFT.PetEquipmentInfo({weapon: weapon, shield: shield, helmet: helmet, armour: armour});\r\n    }\r\n\r\n    function getPetExtraInfo(PetNFT petNFT, uint256 tokenId) internal view returns (PetNFT.PetExtraInfo memory) {\r\n        (\r\n            uint256 extraUintA,\r\n            uint256 extraUintB,\r\n            uint256 extraUintC,\r\n            uint256 extraUintD,\r\n            uint256 extraUintE,\r\n            uint256 extraUintF,\r\n            uint256 extraUintG,\r\n            uint256 extraUintH,\r\n            string memory extraStringA,\r\n            string memory extraStringB,\r\n            string memory extraStringC\r\n        ) = petNFT.petExtraInfoMap(tokenId);\r\n        return\r\n            PetNFT.PetExtraInfo({\r\n                extraUintA: extraUintA,\r\n                extraUintB: extraUintB,\r\n                extraUintC: extraUintC,\r\n                extraUintD: extraUintD,\r\n                extraUintE: extraUintE,\r\n                extraUintF: extraUintF,\r\n                extraUintG: extraUintG,\r\n                extraUintH: extraUintH,\r\n                extraStringA: extraStringA,\r\n                extraStringB: extraStringB,\r\n                extraStringC: extraStringC\r\n            });\r\n    }\r\n\r\n    function getTotalBattlePower(PetNFT petNFT, uint256 tokenId) internal view returns (uint256 battlePower) {\r\n        PetNFT.PetBaseInfo memory baseInfo = PetNftHelper.getPetBaseInfo(petNFT, tokenId);\r\n        battlePower = baseInfo.battlePower;\r\n        PetNFT.PetEquipmentInfo memory equipmentInfo = PetNftHelper.getPetEquipmentInfo(petNFT, tokenId);\r\n        if (equipmentInfo.weapon != 0) {\r\n            (, uint256 stakingPower, , , ) =\r\n                WeaponNFT(petNFT.equipmentAddressMap(PetNFT.EquipmentType.WEAPON)).weaponInfoMap(equipmentInfo.weapon);\r\n            battlePower = battlePower.add(stakingPower);\r\n        }\r\n        if (equipmentInfo.armour != 0) {\r\n            battlePower = battlePower.add(\r\n                IGetBattlePower(petNFT.equipmentAddressMap(PetNFT.EquipmentType.ARMOUR)).getBattlePower(\r\n                    equipmentInfo.armour\r\n                )\r\n            );\r\n        }\r\n        if (equipmentInfo.helmet != 0) {\r\n            battlePower = battlePower.add(\r\n                IGetBattlePower(petNFT.equipmentAddressMap(PetNFT.EquipmentType.HELMET)).getBattlePower(\r\n                    equipmentInfo.helmet\r\n                )\r\n            );\r\n        }\r\n        if (equipmentInfo.shield != 0) {\r\n            battlePower = battlePower.add(\r\n                IGetBattlePower(petNFT.equipmentAddressMap(PetNFT.EquipmentType.SHIELD)).getBattlePower(\r\n                    equipmentInfo.shield\r\n                )\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/PetStaminaManager.sol\r\n\r\npragma solidity =0.6.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PetStaminaManager is Ownable, Pausable {\r\n    using SafeMath for uint256;\r\n    using ERC721ApproveHelper for PetNFT;\r\n    using PetNftHelper for PetNFT;\r\n    PetNFT public immutable petNFT;\r\n    uint256 public constant MAX_STAMINA = 100;\r\n    // charge stamina for 1200 blocks plus 10\r\n    uint256 public chargeStaminaBlocks = 1200;\r\n    event SetChargeStaminaBlocks(\r\n        address indexed seller,\r\n        uint256 oldChargeStaminaBlocks,\r\n        uint256 newChargeStaminaBlocks\r\n    );\r\n\r\n    constructor(address _petNFT) public {\r\n        petNFT = PetNFT(_petNFT);\r\n    }\r\n\r\n    event EmergencyUnstake(address indexed user, address indexed poolAddress, uint256 amount);\r\n\r\n    function refreshStamina(uint256 tokenId) public whenNotPaused {\r\n        require(petNFT.isApprovedOrOwner(_msgSender(), tokenId), 'caller is not owner nor approved');\r\n        PetNFT.PetBaseInfo memory baseInfo = petNFT.getPetBaseInfo(tokenId);\r\n        PetNFT.PetExtraInfo memory extraInfo = petNFT.getPetExtraInfo(tokenId);\r\n        if (baseInfo.stamina == MAX_STAMINA) {\r\n            petNFT.updateExtraInfo(\r\n                tokenId,\r\n                block.number,\r\n                extraInfo.extraUintB,\r\n                extraInfo.extraUintC,\r\n                extraInfo.extraUintD,\r\n                extraInfo.extraUintE,\r\n                extraInfo.extraUintF,\r\n                extraInfo.extraUintG,\r\n                extraInfo.extraUintH,\r\n                extraInfo.extraStringA,\r\n                extraInfo.extraStringB,\r\n                extraInfo.extraStringC\r\n            );\r\n        }\r\n        uint256 diffBlocks = block.number.sub(extraInfo.extraUintA);\r\n        uint256 newStamina = baseInfo.stamina.add(diffBlocks.div(chargeStaminaBlocks).mul(10));\r\n        newStamina = Math.min(newStamina, MAX_STAMINA);\r\n        if (newStamina != baseInfo.stamina) {\r\n            petNFT.updateBaseInfo(\r\n                tokenId,\r\n                baseInfo.petType,\r\n                baseInfo.name,\r\n                baseInfo.battlePower,\r\n                baseInfo.experience,\r\n                newStamina,\r\n                baseInfo.petToGet,\r\n                baseInfo.bakeToGet\r\n            );\r\n            petNFT.updateExtraInfo(\r\n                tokenId,\r\n                block.number.sub(diffBlocks.mod(chargeStaminaBlocks)),\r\n                extraInfo.extraUintB,\r\n                extraInfo.extraUintC,\r\n                extraInfo.extraUintD,\r\n                extraInfo.extraUintE,\r\n                extraInfo.extraUintF,\r\n                extraInfo.extraUintG,\r\n                extraInfo.extraUintH,\r\n                extraInfo.extraStringA,\r\n                extraInfo.extraStringB,\r\n                extraInfo.extraStringC\r\n            );\r\n        }\r\n    }\r\n\r\n    function deductStamina(uint256 tokenId, uint256 deductAmount) public whenNotPaused {\r\n        refreshStamina(tokenId);\r\n        PetNFT.PetBaseInfo memory baseInfo = petNFT.getPetBaseInfo(tokenId);\r\n        petNFT.updateBaseInfo(\r\n            tokenId,\r\n            baseInfo.petType,\r\n            baseInfo.name,\r\n            baseInfo.battlePower,\r\n            baseInfo.experience,\r\n            baseInfo.stamina.sub(deductAmount),\r\n            baseInfo.petToGet,\r\n            baseInfo.bakeToGet\r\n        );\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        _unpause();\r\n    }\r\n\r\n    function setChargeStaminaBlocks(uint256 _chargeStaminaBlocks) public onlyOwner {\r\n        require(chargeStaminaBlocks != _chargeStaminaBlocks, 'Not need update');\r\n        emit SetChargeStaminaBlocks(_msgSender(), chargeStaminaBlocks, _chargeStaminaBlocks);\r\n        chargeStaminaBlocks = _chargeStaminaBlocks;\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/RandomGenUtils.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\nlibrary RandomGenUtils {\r\n    function randomGen(uint256 seed, uint256 max) internal view returns (uint256 randomNumber) {\r\n        return (uint256(\r\n            keccak256(abi.encodePacked(blockhash(block.number - 1), now, msg.sender, block.difficulty, seed))\r\n        ) % max);\r\n    }\r\n}\r\n\r\n// File: contracts/siege/Siege.sol\r\n\r\npragma solidity =0.6.6;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Siege is ERC721Holder, Ownable, Pausable {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n    using PetNftHelper for PetNFT;\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        EnumerableSet.UintSet stakingPetNFTs;\r\n    }\r\n    // Info of each user.\r\n    struct UserInfoView {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n        uint256[] stakingPetNFTs;\r\n    }\r\n\r\n    // Info of each cave.\r\n    struct CaveInfo {\r\n        uint256 allocPoint; // How many allocation points assigned to this cave. FRUITs to distribute per block.\r\n        uint256 bossBattlePower; // cave boss battle power\r\n        uint256 lastRewardBlock; // Last block number that FRUITs distribution occurs.\r\n        uint256 accFruitPerShare; // Accumulated FRUITs per share, times 1e12. See below.\r\n        uint256 amount; // Accumulated staking amount\r\n    }\r\n\r\n    struct BattleInfo {\r\n        uint256 times;\r\n        bool isWin;\r\n    }\r\n\r\n    // Total allocation points. Must be the sum of all allocation points in all caves.\r\n    uint256 public totalAllocPoint = 0;\r\n    // The block number when FRUIT mining starts.\r\n    uint256 public immutable startBlock;\r\n    // FRUIT tokens created per block.\r\n    uint256 public fruitPerBlock;\r\n    // Accumulated FRUITs per share, times 1e12.\r\n    uint256 public constant accFruitPerShareMultiple = 1E12;\r\n    FruitToken public immutable fruitToken;\r\n    PetNFT public immutable petNFT;\r\n    PetStaminaManager public immutable petStaminaManager;\r\n    uint256[] public caves;\r\n    // Info of each cave.\r\n    mapping(uint256 => CaveInfo) public caveInfoMap;\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => mapping(address => UserInfo)) private _caveUserInfoMap;\r\n    // petNFT => (caveId => BattleInfo)\r\n    mapping(uint256 => mapping(uint256 => BattleInfo)) public petBattleInfoMap;\r\n\r\n    event Battle(address indexed user, uint256 tokenId, uint256 caveId, uint256 times, bool result);\r\n    event SetFruitPerBlock(address indexed user, uint256 fruitPerBlock);\r\n    event Stake(address indexed user, uint256 indexed caveId, uint256 tokenId, uint256 amount);\r\n    event Unstake(address indexed user, uint256 indexed caveId, uint256 tokenId, uint256 amount);\r\n    event EmergencyUnstake(address indexed user, uint256 indexed caveId, uint256 tokenId, uint256 amount);\r\n\r\n    constructor(\r\n        address _fruitToken,\r\n        address _petNFT,\r\n        address _petStaminaManager,\r\n        uint256 _startBlock,\r\n        uint256 _fruitPerBlock\r\n    ) public {\r\n        fruitToken = FruitToken(_fruitToken);\r\n        petNFT = PetNFT(_petNFT);\r\n        petStaminaManager = PetStaminaManager(_petStaminaManager);\r\n        startBlock = _startBlock;\r\n        fruitPerBlock = _fruitPerBlock;\r\n    }\r\n\r\n    // *** POOL MANAGER ***\r\n    function caveLength() external view returns (uint256) {\r\n        return caves.length;\r\n    }\r\n\r\n    function addDefaultCave() public onlyOwner {\r\n        add(1, 1, 1E2, false);\r\n        add(2, 2, 5E2, false);\r\n        add(3, 3, 1E3, false);\r\n        add(4, 4, 5E3, false);\r\n        add(5, 5, 1E4, false);\r\n        add(6, 6, 5E4, false);\r\n        add(7, 7, 1E5, false);\r\n        add(8, 8, 2E5, false);\r\n        add(9, 9, 3E5, false);\r\n        add(10, 10, 5E5, false);\r\n        add(11, 11, 7E5, false);\r\n        add(12, 12, 1E6, false);\r\n        add(13, 13, 15E5, false);\r\n        add(14, 14, 2E6, false);\r\n        add(15, 15, 3E6, false);\r\n        add(16, 16, 5E6, false);\r\n        add(17, 17, 7E6, false);\r\n        add(18, 18, 1E7, false);\r\n        add(19, 19, 15E6, false);\r\n        add(20, 20, 2E7, false);\r\n    }\r\n\r\n    // Add a new lp to the cave. Can only be called by the owner.\r\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\r\n    function add(\r\n        uint256 _caveId,\r\n        uint256 _allocPoint,\r\n        uint256 _bossBattlePower,\r\n        bool _withUpdate\r\n    ) public onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdateCaves();\r\n        }\r\n        CaveInfo storage cave = caveInfoMap[_caveId];\r\n        require(cave.lastRewardBlock == 0, 'cave already exists');\r\n        uint256 lastRewardBlock = Math.max(block.number, startBlock);\r\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\r\n        caveInfoMap[_caveId] = CaveInfo({\r\n            allocPoint: _allocPoint,\r\n            bossBattlePower: _bossBattlePower,\r\n            lastRewardBlock: lastRewardBlock,\r\n            accFruitPerShare: 0,\r\n            amount: 0\r\n        });\r\n        caves.push(_caveId);\r\n    }\r\n\r\n    // Update the given cave's FRUIT allocation point. Can only be called by the owner.\r\n    function set(\r\n        uint256 _caveId,\r\n        uint256 _allocPoint,\r\n        uint256 _bossBattlePower,\r\n        bool _withUpdate\r\n    ) public onlyOwner {\r\n        if (_withUpdate) {\r\n            massUpdateCaves();\r\n        }\r\n        CaveInfo storage cave = caveInfoMap[_caveId];\r\n        require(cave.lastRewardBlock == 0, 'cave not exists');\r\n        require(cave.allocPoint != _allocPoint || cave.bossBattlePower != _bossBattlePower, 'not need update');\r\n        totalAllocPoint = totalAllocPoint.sub(cave.allocPoint).add(_allocPoint);\r\n        cave.allocPoint = _allocPoint;\r\n        cave.bossBattlePower = _bossBattlePower;\r\n    }\r\n\r\n    function battle(uint256 caveId, uint256 tokenId) public returns (bool) {\r\n        require(!address(msg.sender).isContract(), 'only user address can battle');\r\n        require(petNFT.ownerOf(tokenId) == _msgSender(), 'only owner can battle');\r\n        require(!petBattleInfoMap[tokenId][caveId].isWin, 'not need battle');\r\n        CaveInfo memory caveInfo = caveInfoMap[caveId];\r\n        require(caveInfo.lastRewardBlock != 0, 'cave not exists');\r\n        petStaminaManager.deductStamina(tokenId, 20);\r\n        uint256 petBattlePower = petNFT.getTotalBattlePower(tokenId);\r\n        uint256 randomAmount =\r\n            RandomGenUtils.randomGen(\r\n                caveInfo.lastRewardBlock.add(caveInfo.amount).add(tokenId).add(caveInfo.accFruitPerShare),\r\n                petBattlePower.add(caveInfo.bossBattlePower)\r\n            );\r\n        BattleInfo storage battleInfo = petBattleInfoMap[tokenId][caveId];\r\n        if (randomAmount <= petBattlePower) {\r\n            battleInfo.isWin = true;\r\n        }\r\n        battleInfo.times++;\r\n        emit Battle(_msgSender(), tokenId, caveId, battleInfo.times, battleInfo.isWin);\r\n        return battleInfo.isWin;\r\n    }\r\n\r\n    function petBattleInfos(uint256 tokenId)\r\n        public\r\n        view\r\n        returns (uint256[] memory cavesView, BattleInfo[] memory battleInfos)\r\n    {\r\n        uint256 length = caves.length;\r\n        cavesView = new uint256[](length);\r\n        battleInfos = new BattleInfo[](length);\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            cavesView[i] = caves[i];\r\n            battleInfos[i] = petBattleInfoMap[tokenId][caves[i]];\r\n        }\r\n    }\r\n\r\n    // Return total reward over the given _from to _to block.\r\n    function getTotalReward(uint256 _from, uint256 _to) public view returns (uint256 totalReward) {\r\n        uint256 balance = fruitToken.balanceOf(address(fruitToken));\r\n        if (_to <= startBlock || balance == 0) {\r\n            return 0;\r\n        }\r\n        if (_from < startBlock) {\r\n            _from = startBlock;\r\n        }\r\n        return Math.min(balance, _to.sub(_from).mul(fruitPerBlock));\r\n    }\r\n\r\n    // View function to see pending FRUITs on frontend.\r\n    function pendingFruit(uint256 caveId, address _user) external view returns (uint256) {\r\n        CaveInfo memory cave = caveInfoMap[caveId];\r\n        if (cave.lastRewardBlock == 0) {\r\n            return 0;\r\n        }\r\n        UserInfo memory userInfo = _caveUserInfoMap[caveId][_user];\r\n        uint256 accFruitPerShare = cave.accFruitPerShare;\r\n        if (block.number > cave.lastRewardBlock && cave.amount != 0) {\r\n            uint256 totalReward = getTotalReward(cave.lastRewardBlock, block.number);\r\n            uint256 fruitReward = totalReward.mul(cave.allocPoint).div(totalAllocPoint);\r\n            accFruitPerShare = accFruitPerShare.add(fruitReward.mul(accFruitPerShareMultiple).div(cave.amount));\r\n        }\r\n        return userInfo.amount.mul(accFruitPerShare).div(accFruitPerShareMultiple).sub(userInfo.rewardDebt);\r\n    }\r\n\r\n    // Update reward vairables for all caves. Be careful of gas spending!\r\n    function massUpdateCaves() public {\r\n        uint256 length = caves.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            updateCave(caves[i]);\r\n        }\r\n    }\r\n\r\n    // Update reward variables of the given cave to be up-to-date.\r\n    function updateCave(uint256 caveId) public {\r\n        CaveInfo storage cave = caveInfoMap[caveId];\r\n        if (block.number <= cave.lastRewardBlock) {\r\n            return;\r\n        }\r\n        if (cave.amount == 0) {\r\n            cave.lastRewardBlock = block.number;\r\n            return;\r\n        }\r\n        uint256 totalReward = getTotalReward(cave.lastRewardBlock, block.number);\r\n        uint256 fruitReward = totalReward.mul(cave.allocPoint).div(totalAllocPoint);\r\n        fruitReward = fruitToken.safeMint(address(this), fruitReward);\r\n        cave.accFruitPerShare = cave.accFruitPerShare.add(fruitReward.mul(accFruitPerShareMultiple).div(cave.amount));\r\n        cave.lastRewardBlock = block.number;\r\n    }\r\n\r\n    function stake(uint256 caveId, uint256 tokenId) public whenNotPaused {\r\n        require(tokenId == 0 || petBattleInfoMap[tokenId][caveId].isWin, 'battle first');\r\n        CaveInfo storage cave = caveInfoMap[caveId];\r\n        UserInfo storage userInfo = _caveUserInfoMap[caveId][msg.sender];\r\n        updateCave(caveId);\r\n        if (userInfo.amount != 0) {\r\n            uint256 pending =\r\n                userInfo.amount.mul(cave.accFruitPerShare).div(accFruitPerShareMultiple).sub(userInfo.rewardDebt);\r\n            if (pending != 0) {\r\n                safeFruitTransfer(msg.sender, pending);\r\n            }\r\n        }\r\n        if (tokenId != 0) {\r\n            petNFT.safeTransferFrom(address(msg.sender), address(this), tokenId);\r\n            uint256 battlePower = petNFT.getTotalBattlePower(tokenId);\r\n            userInfo.amount = userInfo.amount.add(battlePower);\r\n            userInfo.stakingPetNFTs.add(tokenId);\r\n            cave.amount = cave.amount.add(battlePower);\r\n            emit Stake(msg.sender, caveId, tokenId, battlePower);\r\n        }\r\n        userInfo.rewardDebt = userInfo.amount.mul(cave.accFruitPerShare).div(accFruitPerShareMultiple);\r\n    }\r\n\r\n    function unstake(uint256 caveId, uint256 tokenId) public {\r\n        UserInfo storage userInfo = _caveUserInfoMap[caveId][msg.sender];\r\n        require(userInfo.stakingPetNFTs.contains(tokenId), 'unstake forbidden');\r\n        CaveInfo storage cave = caveInfoMap[caveId];\r\n        updateCave(caveId);\r\n        uint256 pending =\r\n            userInfo.amount.mul(cave.accFruitPerShare).div(accFruitPerShareMultiple).sub(userInfo.rewardDebt);\r\n        if (pending != 0) {\r\n            safeFruitTransfer(msg.sender, pending);\r\n        }\r\n        uint256 battlePower = petNFT.getTotalBattlePower(tokenId);\r\n\r\n        userInfo.amount = userInfo.amount.sub(battlePower);\r\n        userInfo.stakingPetNFTs.remove(tokenId);\r\n        cave.amount = cave.amount.sub(battlePower);\r\n        petNFT.safeTransferFrom(address(this), address(msg.sender), tokenId);\r\n        userInfo.rewardDebt = userInfo.amount.mul(cave.accFruitPerShare).div(accFruitPerShareMultiple);\r\n        emit Unstake(msg.sender, caveId, tokenId, battlePower);\r\n    }\r\n\r\n    function unstakeAll(uint256 caveId) public {\r\n        EnumerableSet.UintSet storage stakingPetNftTokens = _caveUserInfoMap[caveId][msg.sender].stakingPetNFTs;\r\n        uint256 length = stakingPetNftTokens.length();\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            unstake(caveId, stakingPetNftTokens.at(0));\r\n        }\r\n    }\r\n\r\n    function emergencyUnstake(uint256 caveId, uint256 tokenId) public {\r\n        UserInfo storage userInfo = _caveUserInfoMap[caveId][msg.sender];\r\n        require(userInfo.stakingPetNFTs.contains(tokenId), 'emergency unstake forbidden');\r\n        CaveInfo memory cave = caveInfoMap[caveId];\r\n        uint256 battlePower = petNFT.getTotalBattlePower(tokenId);\r\n        userInfo.amount = userInfo.amount.sub(battlePower);\r\n        userInfo.stakingPetNFTs.remove(tokenId);\r\n        cave.amount = cave.amount.sub(battlePower);\r\n        petNFT.safeTransferFrom(address(this), address(msg.sender), tokenId);\r\n        userInfo.rewardDebt = userInfo.amount.mul(cave.accFruitPerShare).div(accFruitPerShareMultiple);\r\n        emit EmergencyUnstake(msg.sender, caveId, tokenId, battlePower);\r\n    }\r\n\r\n    function emergencyAll(uint256 caveId) public {\r\n        EnumerableSet.UintSet storage stakingPetNftTokens = _caveUserInfoMap[caveId][msg.sender].stakingPetNFTs;\r\n        uint256 length = stakingPetNftTokens.length();\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            emergencyUnstake(caveId, stakingPetNftTokens.at(0));\r\n        }\r\n    }\r\n\r\n    function getCaveUserInfo(uint256 caveId, address user) public view returns (UserInfoView memory) {\r\n        UserInfo storage userInfo = _caveUserInfoMap[caveId][user];\r\n        uint256 stakingPetNFTSize = userInfo.stakingPetNFTs.length();\r\n        UserInfoView memory userInfoView =\r\n            UserInfoView({\r\n                amount: userInfo.amount,\r\n                rewardDebt: userInfo.rewardDebt,\r\n                stakingPetNFTs: new uint256[](stakingPetNFTSize)\r\n            });\r\n        for (uint256 i = 0; i < stakingPetNFTSize; ++i) {\r\n            userInfoView.stakingPetNFTs[i] = userInfo.stakingPetNFTs.at(i);\r\n        }\r\n        return userInfoView;\r\n    }\r\n\r\n    // Safe fruit transfer function, just in case if rounding error causes cave to not have enough FRUITs.\r\n    function safeFruitTransfer(address _to, uint256 _amount) internal {\r\n        uint256 fruitBal = fruitToken.balanceOf(address(this));\r\n        if (_amount > fruitBal) {\r\n            fruitToken.transfer(_to, fruitBal);\r\n        } else {\r\n            fruitToken.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    function pauseStake() public onlyOwner whenNotPaused {\r\n        _pause();\r\n    }\r\n\r\n    function unpauseStake() public onlyOwner whenPaused {\r\n        _unpause();\r\n    }\r\n\r\n    function setFruitPerBlock(uint256 _fruitPerBlock) public onlyOwner {\r\n        require(fruitPerBlock != _fruitPerBlock, ' NOT NEED UPDATE');\r\n        emit SetFruitPerBlock(msg.sender, _fruitPerBlock);\r\n        fruitPerBlock = _fruitPerBlock;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fruitToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_petNFT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_petStaminaManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fruitPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"caveId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"Battle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"caveId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fruitPerBlock\",\"type\":\"uint256\"}],\"name\":\"SetFruitPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"caveId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"caveId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accFruitPerShareMultiple\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_caveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bossBattlePower\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addDefaultCave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"caveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"battle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"caveInfoMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bossBattlePower\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accFruitPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caveLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"caves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"caveId\",\"type\":\"uint256\"}],\"name\":\"emergencyAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"caveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fruitPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fruitToken\",\"outputs\":[{\"internalType\":\"contract FruitToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"caveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCaveUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"stakingPetNFTs\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Siege.UserInfoView\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getTotalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdateCaves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"caveId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingFruit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"petBattleInfoMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWin\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"petBattleInfos\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"cavesView\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWin\",\"type\":\"bool\"}],\"internalType\":\"struct Siege.BattleInfo[]\",\"name\":\"battleInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"petNFT\",\"outputs\":[{\"internalType\":\"contract PetNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"petStaminaManager\",\"outputs\":[{\"internalType\":\"contract PetStaminaManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_caveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bossBattlePower\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fruitPerBlock\",\"type\":\"uint256\"}],\"name\":\"setFruitPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"caveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"caveId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"caveId\",\"type\":\"uint256\"}],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"caveId\",\"type\":\"uint256\"}],\"name\":\"updateCave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Siege", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "1", "Runs": "39999", "ConstructorArguments": "0000000000000000000000009cf518b83804d30fb007e17757d317d9b03619a500000000000000000000000090e88d4c8e8f19af15dfeabd516d80666f06a2f500000000000000000000000091f178e03548da2058505d073fc7081e0283a60300000000000000000000000000000000000000000000000000000000002cf0810000000000000000000000000000000000000000000000007877874945eeb8e3", "EVMVersion": "istanbul", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://06d0f0198c75a16b38e935caee0d94792e8cf1f9642e8401a6664e2ee775f893"}