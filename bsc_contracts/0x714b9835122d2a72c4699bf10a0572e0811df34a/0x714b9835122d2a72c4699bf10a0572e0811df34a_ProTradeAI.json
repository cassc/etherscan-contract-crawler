{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n /*  PROTRADESAI\r\n *   is dedicated to remove the risks of the possible errors and circumstances in conventional online \r\n *   based trading using our state of the art BNB smart contract. An impartial third-party audit firm \r\n *   has examined the smart contract's source code to prove its credibility.\r\n *\r\n *   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n *   \u2502   Website: https://ProTradesAI.com           \t\t\t\t\t\t \u2502\r\n *\t \u2502\t 1% to 1.5% Daily ROI \t       \t                                     \u2502\r\n *   \u2502   Audited, Verified with No Backdoor.       \t\t\t\t\t\t\t \u2502\r\n *   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n *\r\n *   [AFFILIATE PLAN REBATE]\r\n *\r\n *   - 11-level daily affiliate rebate: 10% - 3% - 2% - 1% - 1% - 0.5% - 0.5% - 0.5% - 0.5% - 0.5% - 0.5%  \r\n *  \r\n */\r\n\r\npragma solidity 0.8.18;\r\n\r\n/**\r\n * @title ProTradeAI\r\n * @dev Leading BNB trading smartcontract investment\r\n */\r\ncontract ProTradeAI {\r\n    \r\n    //STATE VARIABLES\r\n    address public owner;\r\n    AdminStruct[4] public admins;\r\n    uint public total_members = 0;\r\n    uint public total_cummulative_investment = 0; //In wei\r\n    uint public total_cummulative_withdrawn = 0; //In wei\r\n    uint public min_investment; //In wei\r\n    uint public min_withdraw; //In wei\r\n    uint public max_investment; //In wei\r\n    uint public max_withdraw_perweek; //In wei\r\n    uint public max_earning_percentage = 300; //In percentage\r\n    uint public bnb_to_usd; //Conversion rate for 1 bnb to usd\r\n    uint constant BONUS_LINES_COUNT = 11;\r\n    uint constant WITHDRAW_FEES = 5; //In percentage\r\n    uint[BONUS_LINES_COUNT] public referral_pay_rates = [100,30,20,10,10,5,5,5,5,5,5]; //Divide by REFERRAL_PERCENT_DIVIDER\r\n    uint constant REFERRAL_PERCENT_DIVIDER = 1000;\r\n    uint constant INTEREST_PERCENT_DIVIDER = 1000;\r\n    mapping(address => UserStruct) private users;\r\n    //BASIC\r\n    uint constant DAY_INTEREST_PERCENT = 10; //In percentage (should divide by 1000) 1%\r\n    //VIP\r\n    uint constant DAY_INTEREST_PERCENT_VIP = 12; //In percentage (should divide by 1000) 1.2%\r\n    uint public vip_lower_limit;//In wei\r\n    //VVIP\r\n    uint constant DAY_INTEREST_PERCENT_VVIP = 15; //In percentage (should divide by 1000) 1.5%\r\n    uint public vvip_lower_limit;//In wei\r\n    //END OF STATE VARIABLES\r\n\r\n    //REENTRY GUARD VARIABLES\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n    //END REENTRY GUARD VARIABLES\r\n\r\n    //CONSTRUCTOR\r\n    constructor(){\r\n        owner = payable(msg.sender);\r\n        bnb_to_usd = 210; //value of 1 bnb to usd\r\n        min_investment = usdToWei(30);\r\n        min_withdraw = usdToWei(30);\r\n        vip_lower_limit = usdToWei(1000);\r\n        vvip_lower_limit = usdToWei(10000);\r\n        max_investment = usdToWei(25000);\r\n        max_withdraw_perweek = usdToWei(5000);\r\n        //First Upline User - Owner - For breaking loop\r\n        total_members+=1;\r\n        total_cummulative_investment+=0;\r\n        UserStruct memory ownerUser =  UserStruct({\r\n                is_active: true,\r\n                self_address: msg.sender,\r\n                balance : 0,\r\n                sponsor: address(0),\r\n                investment: max_investment,\r\n                investment_interest_times1000: DAY_INTEREST_PERCENT_VVIP,\r\n                dividends_paid: 0,\r\n                last_dividend_time: block.timestamp,\r\n                referral_bonus_earned: 0,\r\n                withdrawn_amount: 0,\r\n                last_withdraw_time: block.timestamp,\r\n                week_limit_count: 0,\r\n                week_limit_count_time: block.timestamp, \r\n                referral_structure: [0,0,0,0,0,0,0,0,0,0,0],\r\n                referral_amount_per_second: [uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0)],\r\n                referral_network_earnings: [uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0)]\r\n            });\r\n        users[msg.sender] = ownerUser;\r\n        \r\n        //Adding Admins\r\n        admins[0] = AdminStruct(\"ZM\",0xbE0F7664f7534E4f71aFFfCDA7ef851cf453bFFb,5,20);\r\n        admins[1] = AdminStruct(\"RM\",0x354Bcc1906349307cD035D9F3F2bdFe7a1E970cb,20,40);\r\n        admins[2] = AdminStruct(\"PR_MARKETING\",0xA494C431b045f617d2BB0Cb3DBB217D790EfB368,5,0);\r\n        admins[3] = AdminStruct(\"LEADER\",0x54C85FDF5486f2D750992D6c8b7060444b5b66BC,10,40);\r\n\r\n        //REENTRYGUARD VARIABLE\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    //END OF CONSTRUCTOR\r\n\r\n    //EVENTS DEFINITIONS\r\n    event UplineCountUpdated(address indexed registeringAddress, address indexed sponsor, uint256 amount);\r\n    event NewInvestment(address indexed investingAddress, uint256 amount);\r\n    event WithdrawCompleted(address indexed withdrawingAddress, uint256 amount);\r\n    //END OF EVENTS DEFINITION\r\n\r\n    //UTILITY FUNCTIONS\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner, \"ONLY the owner of ProTradesAI contract can perform this action\");\r\n        _;\r\n    }\r\n\r\n    modifier noReentry() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call. Action Stopped!\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    function bnbTimes100ToWei(uint _bnbTimes100) private pure returns(uint){\r\n        uint convesionRate = 1000000000000000000;\r\n        uint weiConverted = _bnbTimes100 * (convesionRate/100);//(convesionRate/100) because _bnbTimes100 is X 100\r\n        return weiConverted;\r\n    }\r\n\r\n    function usdToWei(uint _usdAmount) private view returns(uint){\r\n        uint _convesionRate = bnb_to_usd;\r\n        uint _weiConverted = (bnbTimes100ToWei (_usdAmount*100))/_convesionRate;\r\n        return _weiConverted;\r\n    }\r\n\r\n    function payUserInvestmentEarnings(UserStruct storage _user) private {\r\n        payUsersReferralEarnings(_user);\r\n        uint earningsFromLastPay = calculateEaringsFromLastPaytime(_user.investment, _user.last_dividend_time, _user.investment_interest_times1000);\r\n        _user.balance += earningsFromLastPay;\r\n        _user.dividends_paid += earningsFromLastPay;\r\n        _user.last_dividend_time = block.timestamp;\r\n    }\r\n\r\n    function calculateEaringsFromLastPaytime(uint _investedAmount, uint _lastPayTime, uint _interestTimes1000) private view returns(uint){\r\n        uint secondsPassed = block.timestamp - _lastPayTime;\r\n        uint earnings =  secondsPassed * getPaymentPerSecondWithInterest(_investedAmount,_interestTimes1000);\r\n        return earnings;\r\n    }\r\n\r\n    function payUsersReferralEarnings(UserStruct storage _user) private {\r\n        uint secondsPassed = block.timestamp - _user.last_dividend_time;\r\n        uint256[11] memory referralEarningsPerSecond = _user.referral_amount_per_second;\r\n        for(uint8 i = 0; i < referralEarningsPerSecond.length; i++) {\r\n            uint bonusPayPerSecond = (referralEarningsPerSecond[i]/REFERRAL_PERCENT_DIVIDER ) * referral_pay_rates[i];\r\n            _user.balance += (secondsPassed * bonusPayPerSecond);\r\n            _user.referral_bonus_earned += (secondsPassed * bonusPayPerSecond);\r\n            _user.referral_network_earnings[i] += (secondsPassed * bonusPayPerSecond);\r\n        }\r\n    }\r\n\r\n    function calculatesReferralEarningsFromLastPaytime(UserStruct storage _user) private view returns (uint) {\r\n        uint secondsPassed = block.timestamp - _user.last_dividend_time;\r\n        uint256[11] memory referralEarningsPerSecond = _user.referral_amount_per_second;\r\n        uint referralEarned = 0;\r\n        for(uint8 i = 0; i < referralEarningsPerSecond.length; i++) {\r\n            uint bonusPayPerSecond = (referralEarningsPerSecond[i]/REFERRAL_PERCENT_DIVIDER ) * referral_pay_rates[i];\r\n            referralEarned += (secondsPassed * bonusPayPerSecond);\r\n        }\r\n        return referralEarned;\r\n    }\r\n\r\n    function getCommulativeEarningsFromLastPay(UserStruct storage _user) private view returns (uint256[2] memory) {\r\n        uint dividends = calculateEaringsFromLastPaytime(_user.investment, _user.last_dividend_time, _user.investment_interest_times1000);\r\n        uint referrals = calculatesReferralEarningsFromLastPaytime(_user);\r\n        return [uint256(dividends), uint256(referrals)];\r\n    }\r\n\r\n    function getInterestToUse(uint _investedAmount) private view returns(uint){\r\n        uint interestToUse = DAY_INTEREST_PERCENT;\r\n        if(_investedAmount > vvip_lower_limit){\r\n            interestToUse = DAY_INTEREST_PERCENT_VVIP;\r\n        }\r\n        if(_investedAmount > vip_lower_limit && _investedAmount <= vvip_lower_limit){\r\n            interestToUse = DAY_INTEREST_PERCENT_VIP;\r\n        }\r\n        return interestToUse;\r\n    }\r\n\r\n    function generateNewUser(address _selfAddress, address _sponsor, uint _investedAmount) \r\n    private returns (UserStruct memory){   \r\n        total_members+=1;\r\n        total_cummulative_investment+=_investedAmount;\r\n        uint interestToUse = getInterestToUse(_investedAmount);\r\n        return UserStruct({\r\n                is_active : true,\r\n                self_address: _selfAddress,\r\n                balance : 0,\r\n                sponsor: _sponsor,\r\n                investment: _investedAmount,\r\n                investment_interest_times1000: interestToUse,\r\n                dividends_paid: 0,\r\n                last_dividend_time: block.timestamp,\r\n                referral_bonus_earned: 0,\r\n                withdrawn_amount: 0,\r\n                last_withdraw_time: (block.timestamp - 24 hours),\r\n                week_limit_count: 0,\r\n                week_limit_count_time: (block.timestamp - 7 days), \r\n                referral_structure: [0,0,0,0,0,0,0,0,0,0,0],\r\n                referral_amount_per_second: [uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0)],\r\n                referral_network_earnings: [uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0),uint256(0)]\r\n        });\r\n    }\r\n\r\n    function updateUplineCount(address _sponsorAddress, uint _investedAmount) private{\r\n        for(uint8 i = 0; i < BONUS_LINES_COUNT; i++) {\r\n            users[_sponsorAddress].referral_structure[i]++;\r\n            users[_sponsorAddress].referral_amount_per_second[i] += getPaymentPerSecond(_investedAmount);\r\n            _sponsorAddress = users[_sponsorAddress].sponsor;\r\n            if(_sponsorAddress == address(0)) break; //Owner is first upline - break loop\r\n        }\r\n        emit UplineCountUpdated(_sponsorAddress, users[_sponsorAddress].sponsor, users[_sponsorAddress].investment);\r\n    }\r\n\r\n    function getPaymentPerSecond(uint _amountInvested) private view returns(uint interestPerSecond){\r\n        uint interestUsed = getInterestToUse(_amountInvested);\r\n        uint paymentPerSecond = ((_amountInvested/INTEREST_PERCENT_DIVIDER) * interestUsed)/(24*60*60);\r\n        return paymentPerSecond;\r\n    }\r\n\r\n    function getPaymentPerSecondWithInterest(uint _amountInvested, uint _interestToUse) private pure returns(uint interestPerSecond){\r\n        uint paymentPerSecond = ((_amountInvested/INTEREST_PERCENT_DIVIDER) * _interestToUse)/(24*60*60);\r\n        return paymentPerSecond;\r\n    }\r\n\r\n    function getUserBalance(UserStruct storage _user) private returns (uint){\r\n        payUserInvestmentEarnings(_user);\r\n        return _user.balance;\r\n    }\r\n\r\n    function getUserTotalEarnings(UserStruct memory _user) private pure returns(uint){\r\n        return (_user.dividends_paid + _user.referral_bonus_earned);\r\n    }\r\n\r\n    function getUserRemainingWithdrawLimit(UserStruct memory _user) private view returns(uint){\r\n        return (getUserMaximumEarningsLimit(_user) - _user.withdrawn_amount);\r\n    }\r\n\r\n    function getUserMaximumEarningsLimit(UserStruct memory _user) private view returns(uint){\r\n        return (_user.investment * (max_earning_percentage/100));\r\n    }\r\n    \r\n    function getUserRemainingEarningLimit(UserStruct memory _user) private view returns(uint){\r\n        return (getUserMaximumEarningsLimit(_user) - getUserTotalEarnings(_user));\r\n    }\r\n    //END OF UTILITY FUNCTIONS\r\n\r\n\r\n    //ADMIN FUNCTIONS\r\n    function payAdminFees(uint _investedAmount) private{\r\n        for (uint i = 0; i < admins.length; i++) {\r\n            payable(admins[i].payAddress).transfer(admins[i].payPercentage * (_investedAmount/100)); //Divided by 100 because of percentage\r\n        }\r\n    }\r\n\r\n    function payMarketingFees(uint _cost) onlyOwner public{\r\n        for (uint i = 0; i < admins.length; i++) {\r\n            if(admins[i].marketingPercentage > 0){\r\n                payable(admins[i].payAddress).transfer(admins[i].marketingPercentage * (_cost/100)); //Divided by 100 because of percentage\r\n            }\r\n        }\r\n    }\r\n\r\n    function updateUsdToBNBRate(uint _bnbToUSd) onlyOwner public{\r\n        bnb_to_usd = _bnbToUSd; // value of 1 bnb to usd\r\n        min_investment = usdToWei(30);\r\n        min_withdraw = usdToWei(30);\r\n        vip_lower_limit = usdToWei(1000);\r\n        vvip_lower_limit = usdToWei(10000);\r\n        max_investment = usdToWei(25000);\r\n    }\r\n    //END OF ADMIN FUNCTIONS\r\n\r\n    //BUSINESS FUNCTIONS\r\n    receive() external payable {\r\n\r\n    }\r\n\r\n    function invest(address _sponsorAddress) external noReentry payable{\r\n        //Basic validations\r\n        require(msg.value >= min_investment, \"Minimum investment amount is USD 30. Consider BNB conversion rate\");\r\n        require(msg.value <= max_investment, \"Maximum investment amount is USD 25,000. Consider BNB conversion rate\");\r\n        require(users[_sponsorAddress].is_active == true, \"The given sponsor not registered!\");\r\n\r\n        //Checking if is exisiting user\r\n        if(users[msg.sender].is_active == true){\r\n            //pay daily earnings and update date so to start with new rate\r\n            payUserInvestmentEarnings(users[msg.sender]);\r\n            uint _newTotalInvestment = users[msg.sender].investment + msg.value;\r\n            uint interestToUse = getInterestToUse(_newTotalInvestment); \r\n            users[msg.sender].investment = _newTotalInvestment;\r\n            users[msg.sender].investment_interest_times1000 = interestToUse;\r\n        }else{\r\n            UserStruct memory newUserObject = generateNewUser(msg.sender, _sponsorAddress, msg.value);\r\n            users[msg.sender] = newUserObject;\r\n            updateUplineCount( _sponsorAddress, msg.value);\r\n        }\r\n        payAdminFees(msg.value);\r\n        emit NewInvestment(msg.sender, msg.value);\r\n        payUserInvestmentEarnings(users[_sponsorAddress]);\r\n    }\r\n\r\n    function withdraw(uint _withdrawAmountRequested) external noReentry payable{\r\n        require(users[msg.sender].is_active == true, \"No such user registered in ProTradesAI!\");\r\n        UserStruct storage withdrawingUser = users[msg.sender];\r\n        require( _withdrawAmountRequested >= min_withdraw, \"You cannot withdraw below $30. Consider current system BNB conversion rate\");\r\n        require( getUserBalance(withdrawingUser) >= _withdrawAmountRequested, \"You cannot withdraw more than your available balance!\");\r\n        require( getUserRemainingWithdrawLimit(withdrawingUser) > 0, \"Increase you earning limit by investing more to withdraw your balance!\");\r\n        require( getUserRemainingWithdrawLimit(withdrawingUser) >= _withdrawAmountRequested, \"You cannot withdraw beyond 300% your investment!\");\r\n        require(block.timestamp >= (withdrawingUser.last_withdraw_time + 24 hours ), \"You can only withdraw once every 24 hours!\");\r\n        if(block.timestamp > (withdrawingUser.week_limit_count_time + 7 days)){\r\n            withdrawingUser.week_limit_count_time = block.timestamp;\r\n            withdrawingUser.week_limit_count = 0; \r\n        }\r\n        require((withdrawingUser.week_limit_count + _withdrawAmountRequested) <= max_withdraw_perweek, \"You can only withdraw $5,000 in 7 days!\");\r\n        uint contractBalance = address(this).balance;\r\n        if (contractBalance < _withdrawAmountRequested) {\r\n            _withdrawAmountRequested = contractBalance;\r\n        }\r\n        uint _withdrawAmountToSend = ((_withdrawAmountRequested/100)*(100-WITHDRAW_FEES));//Divide by 100 because of fee in percentage\r\n        payable(msg.sender).transfer(_withdrawAmountToSend); \r\n        withdrawingUser.balance -= _withdrawAmountRequested;\r\n        withdrawingUser.withdrawn_amount += _withdrawAmountRequested;\r\n        withdrawingUser.last_withdraw_time = block.timestamp; \r\n        total_cummulative_withdrawn += _withdrawAmountRequested;\r\n        //Update weekly limit check\r\n        withdrawingUser.week_limit_count += _withdrawAmountRequested;\r\n        //End of weekly limit check \r\n        emit WithdrawCompleted(msg.sender, _withdrawAmountRequested);\r\n        payUserInvestmentEarnings(withdrawingUser);\r\n    }\r\n    //END OF BUSINESS FUNCTIONS\r\n\r\n    //REPORTING FUNCTIONS (MUST HAVE VIEW SPECIFIER)\r\n    function getBNBConversionRate() public view returns(uint conversionRate) \r\n    {\r\n        return (bnb_to_usd);\r\n    }\r\n\r\n    function getUsersInfo(address _userAddress) public view  \r\n    returns(uint balance, uint investment, uint dividends_paid, uint referral_bonus_earned, uint withdrawn_amount, uint last_withdraw_time, uint8[11] memory referral_structure) \r\n    {\r\n        // require(users[_userAddress].is_active == true, \"No such user registered in ProTradesAI!\"); //Disabled based on frontend logic to allow user address query before investing\r\n        UserStruct storage userToCheckInfo = users[_userAddress];\r\n        uint[2] memory balanceToAdd = getCommulativeEarningsFromLastPay(userToCheckInfo);\r\n        uint _balance = userToCheckInfo.balance + balanceToAdd[0] + balanceToAdd[1];\r\n        uint _investment = userToCheckInfo.investment;\r\n        uint _dividends_paid = userToCheckInfo.dividends_paid + balanceToAdd[0];\r\n        uint _referral_bonus_earned = userToCheckInfo.referral_bonus_earned + balanceToAdd[1];\r\n        uint _withdrawn_amount = userToCheckInfo.withdrawn_amount;\r\n        uint _last_withdraw_time = userToCheckInfo.last_withdraw_time;\r\n        uint8[11] memory _referral_structure = userToCheckInfo.referral_structure;\r\n        return (_balance, _investment, _dividends_paid, _referral_bonus_earned, _withdrawn_amount, _last_withdraw_time, _referral_structure);\r\n    }\r\n\r\n    function getUsersExtraInfo(address _userAddress) public view \r\n    returns(uint investment_interest_times1000, uint256[11] memory referral_amount_per_second, uint256[11] memory referral_network_earnings) \r\n    {\r\n        // require(users[_userAddress].is_active == true, \"No such user registered in ProTradesAI!\"); //Disabled based on frontend logic to allow user address query before investing\r\n        UserStruct storage userToCheckInfo = users[_userAddress];\r\n        return (userToCheckInfo.investment_interest_times1000, userToCheckInfo.referral_amount_per_second, userToCheckInfo.referral_network_earnings);\r\n    }\r\n\r\n    function getUsersReferralsCount(address _userAddress) public view returns(uint8[11] memory referral_structure){\r\n        // require(users[_userAddress].is_active == true, \"No such user registered in BNBGainers!\"); //Disabled based on frontend logic to allow user address query before investing\r\n        UserStruct memory userToCheckInfo = users[_userAddress];\r\n        uint8[11] memory _referral_structure = userToCheckInfo.referral_structure;\r\n        return _referral_structure;\r\n    }\r\n    //END OF REPORTING FUNCTIONS\r\n\r\n}\r\n\r\n\r\n//STRUCTURES AND OTHER CODES\r\nstruct AdminStruct{\r\n    string name;\r\n    address payAddress;\r\n    uint256 payPercentage;\r\n    uint256 marketingPercentage;\r\n}\r\n\r\nstruct UserStruct{\r\n    bool is_active; //For checking if registered on reinvestment\r\n    address self_address;\r\n    uint balance;\r\n    address sponsor;\r\n    uint investment;\r\n    uint investment_interest_times1000; //In percentage (should divide by 1000)\r\n    uint dividends_paid;\r\n    uint last_dividend_time;\r\n    uint referral_bonus_earned;\r\n    uint withdrawn_amount;\r\n    uint last_withdraw_time;\r\n    uint week_limit_count;\r\n    uint week_limit_count_time;\r\n    uint8[11] referral_structure;\r\n    uint256[11] referral_amount_per_second;\r\n    uint256[11] referral_network_earnings;\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investingAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewInvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registeringAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UplineCountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawingAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawCompleted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"payAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"payPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingPercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnb_to_usd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBNBConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUsersExtraInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"investment_interest_times1000\",\"type\":\"uint256\"},{\"internalType\":\"uint256[11]\",\"name\":\"referral_amount_per_second\",\"type\":\"uint256[11]\"},{\"internalType\":\"uint256[11]\",\"name\":\"referral_network_earnings\",\"type\":\"uint256[11]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUsersInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dividends_paid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referral_bonus_earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_withdraw_time\",\"type\":\"uint256\"},{\"internalType\":\"uint8[11]\",\"name\":\"referral_structure\",\"type\":\"uint8[11]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUsersReferralsCount\",\"outputs\":[{\"internalType\":\"uint8[11]\",\"name\":\"referral_structure\",\"type\":\"uint8[11]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sponsorAddress\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_earning_percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_investment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_withdraw_perweek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"min_investment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"min_withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"payMarketingFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referral_pay_rates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_cummulative_investment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_cummulative_withdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_members\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bnbToUSd\",\"type\":\"uint256\"}],\"name\":\"updateUsdToBNBRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vip_lower_limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vvip_lower_limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawAmountRequested\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ProTradeAI", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5e6e53fa74010c2758f44af74c7fadb49db26c39bdcfe0e4917a6e29d7f3468e"}