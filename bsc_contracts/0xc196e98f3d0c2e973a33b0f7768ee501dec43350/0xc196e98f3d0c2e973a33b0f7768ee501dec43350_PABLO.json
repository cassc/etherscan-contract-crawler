{"SourceCode": "pragma solidity ^0.8.6;\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function getUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    function getTime() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    function unlock() public virtual {\r\n        require(_previousOwner == msg.sender, \"You don't have permission to unlock\");\r\n        require(block.timestamp > _lockTime , \"Contract is locked until 7 days\");\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract PABLO is Context, IERC20, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _isIncludedInFee;\r\n\r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 1112207055887174849251416613421609;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n    uint256 private _tReflectionTotal;\r\n    uint256 private _tBurnTotal;\r\n\r\n    string private _name = \"Pablo\";\r\n    string private _symbol = \"PABLO\";\r\n    uint8 private _decimals = 18;\r\n\r\n    uint256 public _redistributionFee = 2;\r\n    uint256 private _previousRedistributionFee = _redistributionFee;\r\n\r\n    uint256 public _burnFee = 2;\r\n    uint256 private _previousBurnFee = _burnFee;\r\n\r\n    uint256 public _lpFee = 2;\r\n    uint256 private _previousLpFee = _lpFee;\r\n\r\n    uint256 public _marketingFee = 2;\r\n    uint256 private _previousMarketingFee = _marketingFee;\r\n\r\n    uint256 public _charityFee = 2;\r\n    uint256 private _previousCharityFee = _charityFee;\r\n\r\n    uint256 public _equalizerFee = 1;\r\n    uint256 private _previousEqualizerFee = _equalizerFee;\r\n\r\n    uint256 private _convertToBNBFee = 7;\r\n    uint256 private _previousBNBFee = _convertToBNBFee;\r\n\r\n    uint256 public _maxTxAmount = 1 * 10**15 * 10**18;\r\n    uint256 private minimumTokensBeforeSwap = 1 * 10**11 * 10**18;\r\n\r\n    address payable public charityAddress;\r\n    address payable public marketingAddress;\r\n    address payable public equalizerAddress;\r\n    address public controlledBurnAddress;\r\n\r\n    uint256 public controlledBurnWeeklyAmount = 1 * 10**13 * 10**18;\r\n    uint256 private _burnAt = block.timestamp;\r\n\r\n    IUniswapV2Router02 public router;\r\n    address public uniswapV2Pair;\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n\r\n    event RewardLiquidityProviders(uint256 tokenAmount);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    event Burn(address ctrlBurnWallet, uint256 tokenAmount, uint256 timestamp);\r\n    event UpdateOperationWallet(address previousAddress, address newAddress, string operation);\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    /**\r\n    * @dev Deploy the contract, message sender will get the initial total supply minted.\r\n    * Create initial PancaceSwap V2 pair and router. Can be updated in setRouterAddress()\r\n    *\r\n    * The pair should always be excluded from reward and included in fees.\r\n    *\r\n    */\r\n    constructor () {\r\n        _rOwned[_msgSender()] = _rTotal;\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n        .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        router = _uniswapV2Router;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    // Start ERC-20 standard functions\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    // End ERC-20 standart functions\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount,,,,,,) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (,uint256 rTransferAmount,,,,,) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        if(amount == 0){\r\n            emit Transfer(from, to, 0);\r\n            return;\r\n        }\r\n        if(from != owner() && to != owner())\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinimumTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;\r\n        if (\r\n            overMinimumTokenBalance &&\r\n            !inSwapAndLiquify &&\r\n            from != uniswapV2Pair &&\r\n            swapAndLiquifyEnabled\r\n        ) {\r\n            swapAndLiquify(minimumTokensBeforeSwap);\r\n        }\r\n\r\n        bool takeFee = false;\r\n\r\n        if(_isIncludedInFee[from] || _isIncludedInFee[to]) {\r\n            takeFee = true;\r\n        }\r\n\r\n        _tokenTransfer(from,to,amount,takeFee);\r\n    }\r\n\r\n    /**\r\n    * @dev Handles all autoswap to BNB, adding to LP and distributing BNB shares to the set addresses.\r\n    *\r\n    * @param tokensToSwap the amount that will be swapped, will always be minimumTokensBeforeSwap\r\n    *\r\n    * NOTE: will never be called if swapAndLiquify = false!.\r\n    */\r\n    function swapAndLiquify(uint256 tokensToSwap) private lockTheSwap {\r\n        uint256 liquidityTokenAmount = tokensToSwap.div(_convertToBNBFee).mul(_lpFee);\r\n        reAddLiquidity(liquidityTokenAmount);\r\n        uint256 bnbDistributionAmount = tokensToSwap.sub(liquidityTokenAmount);\r\n        swapTokensForEth(bnbDistributionAmount);\r\n        distributeBNBFee(address(this).balance);\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Handles distribution of BNB to charity, marketing and equalizer\r\n    *\r\n    * @param amountBNB the amount of BNB that will be distributed\r\n    *\r\n    * NOTE: will never be called if swapAndLiquify = false!.\r\n    */\r\n    function distributeBNBFee(uint256 amountBNB) private {\r\n        uint256 totalFee = _convertToBNBFee.sub(_lpFee);\r\n        uint256 _marketing = amountBNB.div(totalFee).mul(_marketingFee);\r\n        uint256 _charity = amountBNB.div(totalFee).mul(_charityFee);\r\n        uint256 _equalizer = amountBNB.sub(_marketing).sub(_charity);\r\n        marketingAddress.transfer(_marketing);\r\n        charityAddress.transfer(_charity);\r\n        equalizerAddress.transfer(_equalizer);\r\n    }\r\n\r\n    /**\r\n    * @dev Handles swaping tokens stored on the contract, half of the {amount} for BNB and adding it with the other hald of tokens to LP\r\n    *\r\n    * @param amount of tokens to swap and add to liquidity\r\n    *\r\n    * NOTE: will never be called if swapAndLiquify = false!.\r\n    */\r\n    function reAddLiquidity (uint256 amount) private {\r\n        uint256 half = amount.div(2);\r\n        uint256 otherHalf = amount.sub(half);\r\n        uint256 initialBalance = address(this).balance;\r\n        swapTokensForEth(half);\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n        addLiquidity(otherHalf, newBalance);\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    /**\r\n    * @dev Handles selling of {tokenAmount}\r\n    *\r\n    * @param tokenAmount the amount of tokens to swap for BNB\r\n    *\r\n    */\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev Handles add {tokenAmount} and {BNBAmount} to LP\r\n    *\r\n    * @param tokenAmount, BNBAmount amount of tokens and BNB to be added to LP\r\n    *\r\n    * NOTE: LP tokens will be sent to the owner address.\r\n    *\r\n    */\r\n    function addLiquidity(uint256 tokenAmount, uint256 BNBAmount) private {\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.addLiquidityETH{value: BNBAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev wrapper for token transfer, will enable the fees on {takefee} = true\r\n    *\r\n    * @param takeFee flag for taking fee - initially no fee on any transfer except when includedInFee\r\n    *\r\n    */\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\r\n        if(!takeFee)\r\n            removeAllFee();\r\n\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n\r\n        if(!takeFee)\r\n            restoreAllFee();\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev internal function to handle the token transfer, burn, redistribution and BNBtotal-fees\r\n    *\r\n    * NOTE: Rewards will be distributed differently on sending/receiving from/to excludedFromRewards addresses\r\n    */\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        uint256 currentRate =  _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tRedistributionFee, uint256 tBurn, uint256 tConvertToBNB) = _getValues(tAmount);\r\n        uint256 rBurn =  tBurn.mul(currentRate);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _stackTokensToContract(tConvertToBNB);\r\n        _reflectFee(rFee, rBurn, tRedistributionFee, tBurn);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev internal function to handle the token transfer, burn, redistribution and BNBtotal-fees\r\n    *\r\n    * NOTE: Rewards will be distributed differently on sending/receiving from/to excludedFromRewards addresses\r\n    */\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        uint256 currentRate =  _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tRedistributionFee, uint256 tBurn, uint256 tConvertToBNB) = _getValues(tAmount);\r\n        uint256 rBurn =  tBurn.mul(currentRate);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _stackTokensToContract(tConvertToBNB);\r\n        _reflectFee(rFee, rBurn, tRedistributionFee, tBurn);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev internal function to handle the token transfer, burn, redistribution and BNBtotal-fees\r\n    *\r\n    * NOTE: Rewards will be distributed differently on sending/receiving from/to excludedFromRewards addresses\r\n    */\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        uint256 currentRate =  _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tRedistributionFee, uint256 tBurn, uint256 tConvertToBNB) = _getValues(tAmount);\r\n        uint256 rBurn =  tBurn.mul(currentRate);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _stackTokensToContract(tConvertToBNB);\r\n        _reflectFee(rFee, rBurn, tRedistributionFee, tBurn);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev internal function to handle the token transfer, burn, redistribution and BNBtotal-fees\r\n    *\r\n    * NOTE: Rewards will be distributed differently on sending/receiving from/to excludedFromRewards addresses\r\n    */\r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        uint256 currentRate =  _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tRedistributionFee, uint256 tBurn, uint256 tConvertToBNB) = _getValues(tAmount);\r\n        uint256 rBurn =  tBurn.mul(currentRate);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _stackTokensToContract(tConvertToBNB);\r\n        _reflectFee(rFee, rBurn, tRedistributionFee, tBurn);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    /**\r\n    * @dev internal function will hanlde the changing total values for rewards and burn. {_tReflectionTotal} & {_tBurnTotal} are public counters to call the total amounts.\r\n    */\r\n    function _reflectFee(uint256 rFee, uint256 rBurn, uint256 tRedistributionFee, uint256 tBurn) private {\r\n        _rTotal = _rTotal.sub(rFee).sub(rBurn);\r\n        _tTotal = _tTotal.sub(tBurn);\r\n        _tReflectionTotal = _tReflectionTotal.add(tRedistributionFee);\r\n        _tBurnTotal = _tBurnTotal.add(tBurn);\r\n    }\r\n\r\n    /**\r\n    * @dev Handles the manual controlled burns from the controlledBurnAddress\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `_burnAt` cannot be less than 7 days in the past.\r\n    * - `controlledBurnAddress` needs to own more than `controlledBurnWeeklyAmount` tokens.\r\n    *\r\n    * NOTE: Anybody can call this function anytime!\r\n    */\r\n    function doControlledBurn() external {\r\n        require(_burnAt <= block.timestamp, \"Wait at least 7 days after each controlled burn!\");\r\n        require(balanceOf(controlledBurnAddress) >= controlledBurnWeeklyAmount, \"There are no more tokens to burn left on the Controlled-Burn-Address!\");\r\n        uint256 tBurn = controlledBurnWeeklyAmount;\r\n        uint256 rBurn = controlledBurnWeeklyAmount.mul(_getRate());\r\n        _rOwned[controlledBurnAddress] = _rOwned[controlledBurnAddress].sub(rBurn);\r\n        if(_isExcluded[controlledBurnAddress]) {\r\n            _tOwned[controlledBurnAddress] = _tOwned[controlledBurnAddress].sub(tBurn);\r\n        }\r\n        _rTotal = _rTotal.sub(rBurn);\r\n        _tTotal = _tTotal.sub(tBurn);\r\n        _tBurnTotal = _tBurnTotal.add(tBurn);\r\n        _burnAt = _burnAt.add(7 days);\r\n        emit Burn(controlledBurnAddress, controlledBurnWeeklyAmount, _burnAt);\r\n    }\r\n\r\n    /**\r\n    * @dev internal function to get the current transfer and reward values to {tAmount}\r\n    */\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tRedistributionFee, uint256 tBurn, uint256 _tConvertToBNB) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tRedistributionFee, tBurn, _tConvertToBNB, _getRate());\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tRedistributionFee, tBurn, _tConvertToBNB);\r\n    }\r\n\r\n    /**\r\n    * @dev internal function to get the current transfer values to {tAmount}\r\n    */\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256) {\r\n        uint256 tRedistributionFee = _takeFeeFromAmount(tAmount, _redistributionFee);\r\n        uint256 tBurn = _takeFeeFromAmount(tAmount, _burnFee);\r\n        uint256 _tConvertToBNB = _takeFeeFromAmount(tAmount, _convertToBNBFee);\r\n        uint256 tTransferAmount = tAmount.sub(tRedistributionFee).sub(tBurn).sub(_tConvertToBNB);\r\n        return (tTransferAmount, tRedistributionFee, tBurn, _tConvertToBNB);\r\n    }\r\n\r\n    /**\r\n    * @dev internal function to get the current reward values to {tAmount} and all transfer fees\r\n    */\r\n    function _getRValues(uint256 tAmount, uint256 tRedistributionFee, uint256 tBurn, uint256 _tConvertToBNB, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tRedistributionFee.mul(currentRate);\r\n        uint256 rBurn = tBurn.mul(currentRate);\r\n        uint256 rConvertToBNB = _tConvertToBNB.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rBurn).sub(rConvertToBNB);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    /**\r\n    * @dev internal function to get the current rate between tTotal and rTotal\r\n    */\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    /**\r\n    * @dev internal function to retrieve the current supply regarding rewards.\r\n    *\r\n    * @return rSupply - current reflection total\r\n    * @return tSupply - current transfer total\r\n    */\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    /**\r\n    * @dev internal function to stack tokens on the contract itself\r\n    *\r\n    * @param _tConvertToBNB the amount of tokens to stack on the contract for later conversion to BNB\r\n    *\r\n    */\r\n    function _stackTokensToContract(uint256 _tConvertToBNB) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rConvertToBNB = _tConvertToBNB.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rConvertToBNB);\r\n        if(_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(_tConvertToBNB);\r\n    }\r\n\r\n    /**\r\n    * @dev internal function takes {fee} as in % from {_amount}\r\n    *\r\n    * @param _amount to take the fee from\r\n    * @param fee as in % to take from {_amount}\r\n    *\r\n    * @return the delta from taking {fee}% from {_amount}\r\n    */\r\n    function _takeFeeFromAmount(uint256 _amount, uint256 fee) private pure returns (uint256) {\r\n        return _amount.mul(fee).div(\r\n            10**2\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev internal function that will set all fees to 0\r\n    *\r\n    * NOTE: this will only ever happen for a single transfer, restoreAllFee() will be called after the transfer\r\n    *\r\n    */\r\n    function removeAllFee() private {\r\n        if(_redistributionFee == 0 && _burnFee == 0 && _convertToBNBFee == 0) return;\r\n\r\n        _previousRedistributionFee = _redistributionFee;\r\n        _previousBurnFee = _burnFee;\r\n        _previousBNBFee = _convertToBNBFee;\r\n\r\n        _redistributionFee = 0;\r\n        _burnFee = 0;\r\n        _convertToBNBFee = 0;\r\n    }\r\n\r\n    /**\r\n    * @dev internal function that will restore all fees to their last value\r\n    *\r\n    */\r\n    function restoreAllFee() private {\r\n        _redistributionFee = _previousRedistributionFee;\r\n        _burnFee = _previousBurnFee;\r\n        _convertToBNBFee = _previousBNBFee;\r\n    }\r\n\r\n    /**\r\n    * @dev external function allows the owner to exclude addresses from rewards like any trading pair.\r\n    * This function should only be called to addresses that do not hold any tokens.\r\n    *\r\n    * @param account the address to be excluded\r\n    *\r\n    * Requirements:\r\n    * - `account` cannot be excluded already.\r\n    *\r\n    */\r\n    function excludeFromReward(address account) external onlyOwner() {\r\n        require(!_isExcluded[account], \"Account is already excluded\");\r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    /**\r\n    * @dev external function allows the owner to include a previously excluded address.\r\n    * This function should only be called to addresses that do not hold any tokens.\r\n    *\r\n    * @param account the address to be included\r\n    *\r\n    * Requirements:\r\n    * - `account` needs to be excluded.\r\n    *\r\n    */\r\n    function includeInReward(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Account is already excluded\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                uint256 currentRate = _getRate();\r\n                _rOwned[account] = _tOwned[account].mul(currentRate);\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev public function to read if {account} is excludedFromReward\r\n    *\r\n    */\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    /**\r\n    * @dev public function to read if {account} is includedInFee\r\n    *\r\n    */\r\n    function isIncludedInFee(address account) external view returns(bool) {\r\n        return _isIncludedInFee[account];\r\n    }\r\n\r\n    /**\r\n    * @dev owner only function to add {account} to addresses that need to pay fee\r\n    *\r\n    */\r\n    function includeInFee(address account) external onlyOwner {\r\n        _isIncludedInFee[account] = true;\r\n    }\r\n\r\n    /**\r\n    * @dev owner only function to remove {account} from addresses that need to pay fee\r\n    *\r\n    */\r\n    function excludeFromFee(address account) external onlyOwner {\r\n        _isIncludedInFee[account] = false;\r\n    }\r\n\r\n    /**\r\n    * @dev owner only function to set the charity address\r\n    *\r\n    * Emits an {UpdateOperationWallet} event.\r\n    *\r\n    */\r\n    function setCharityAddress(address payable _charityAddress) external onlyOwner {\r\n        address prevCharity = charityAddress;\r\n        charityAddress = _charityAddress;\r\n        emit UpdateOperationWallet(prevCharity, charityAddress, \"charity\");\r\n    }\r\n\r\n    /**\r\n    * @dev owner only function to set the marketing address\r\n    *\r\n    * Emits an {UpdateOperationWallet} event.\r\n    *\r\n    */\r\n    function setMarketingAddress(address payable _marketingAddress) external onlyOwner {\r\n        address prevMarketing = marketingAddress;\r\n        marketingAddress = _marketingAddress;\r\n        emit UpdateOperationWallet(prevMarketing, marketingAddress, \"marketing\");\r\n    }\r\n\r\n    /**\r\n    * @dev owner only function to set the equalizer address\r\n    *\r\n    * Emits an {UpdateOperationWallet} event.\r\n    *\r\n    */\r\n    function setEqualizerAddress(address payable _equalizerAddress) external onlyOwner {\r\n        address prevEQ = equalizerAddress;\r\n        equalizerAddress = _equalizerAddress;\r\n        emit UpdateOperationWallet(prevEQ, equalizerAddress, \"equalizer\");\r\n    }\r\n\r\n    /**\r\n    * @dev owner only function to set the controlled-burn  address\r\n    *\r\n    * Emits an {UpdateOperationWallet} event.\r\n    *\r\n    */\r\n    function setControlledBurnAddress(address _controlledBurnAddress) external onlyOwner {\r\n        require(balanceOf(_controlledBurnAddress) == 0, \"Cannot set controlled-burn address to a holding wallet\");\r\n        address prevCtrlBurn = controlledBurnAddress;\r\n        controlledBurnAddress = _controlledBurnAddress;\r\n        emit UpdateOperationWallet(prevCtrlBurn, controlledBurnAddress, \"controlledBurn\");\r\n    }\r\n    /**\r\n    * @dev internal function that will update the total autoswap to BNB fees\r\n    *\r\n    */\r\n    function setBNBFeeTotal() private {\r\n        _convertToBNBFee = _lpFee.add(_marketingFee).add(_charityFee).add(_equalizerFee);\r\n    }\r\n\r\n    /**\r\n    * @dev owner only function to set the redistribution fee\r\n    *\r\n    * @param redistributionFee the fee in %\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The sum of all fees cannot be higher than 25%\r\n    *\r\n    */\r\n    function setRedistributionFee(uint256 redistributionFee) external onlyOwner() {\r\n        uint256 totalFees = redistributionFee.add(_marketingFee).add(_charityFee).add(_lpFee).add(_burnFee).add(_equalizerFee);\r\n        require(totalFees <= 25, \"Cannot set fees higher than 25%!\");\r\n        _redistributionFee = redistributionFee;\r\n    }\r\n\r\n    /**\r\n    * @dev owner only function to set the burn fee\r\n    *\r\n    * @param burnFee the fee in %\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The sum of all fees cannot be higher than 25%\r\n    *\r\n    */\r\n    function setBurnFee(uint256 burnFee) external onlyOwner() {\r\n        uint256 totalFees = burnFee.add(_marketingFee).add(_charityFee).add(_lpFee).add(_redistributionFee).add(_equalizerFee);\r\n        require(totalFees <= 25, \"Cannot set fees higher than 25%!\");\r\n        _burnFee = burnFee;\r\n    }\r\n\r\n    /**\r\n    * @dev owner only function to set the re-add to LP fee\r\n    *\r\n    * @param lpFee the fee in %\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The sum of all fees cannot be higher than 25%\r\n    *\r\n    */\r\n    function setLpFee(uint256 lpFee) external onlyOwner() {\r\n        uint256 totalFees = lpFee.add(_marketingFee).add(_charityFee).add(_burnFee).add(_redistributionFee).add(_equalizerFee);\r\n        require(totalFees <= 25, \"Cannot set fees higher than 25%!\");\r\n        _lpFee = lpFee;\r\n        setBNBFeeTotal();\r\n    }\r\n\r\n    /**\r\n    * @dev owner only function to set the marketing fee\r\n    *\r\n    * @param marketingFee the fee in %\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The sum of all fees cannot be higher than 25%\r\n    *\r\n    */\r\n    function setMarketingFee(uint256 marketingFee) external onlyOwner() {\r\n        uint256 totalFees = marketingFee.add(_lpFee).add(_charityFee).add(_burnFee).add(_redistributionFee).add(_equalizerFee);\r\n        require(totalFees <= 25, \"Cannot set fees higher than 25%!\");\r\n        _marketingFee = marketingFee;\r\n        setBNBFeeTotal();\r\n    }\r\n\r\n    /**\r\n    * @dev owner only function to set the charity fee\r\n    *\r\n    * @param charityFee the fee in %\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The sum of all fees cannot be higher than 25%\r\n    *\r\n    */\r\n    function setCharityFee(uint256 charityFee) external onlyOwner() {\r\n        uint256 totalFees = charityFee.add(_lpFee).add(_marketingFee).add(_burnFee).add(_redistributionFee).add(_equalizerFee);\r\n        require(totalFees <= 25, \"Cannot set fees higher than 25%!\");\r\n        _charityFee = charityFee;\r\n        setBNBFeeTotal();\r\n    }\r\n\r\n    /**\r\n    * @dev owner only function to set the equalizer fee\r\n    *\r\n    * @param equalizerFee the fee in %\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The sum of all fees cannot be higher than 25%\r\n    *\r\n    */\r\n    function setEqualizerFee(uint256 equalizerFee) external onlyOwner() {\r\n        uint256 totalFees = equalizerFee.add(_lpFee).add(_marketingFee).add(_burnFee).add(_redistributionFee).add(_charityFee);\r\n        require(totalFees <= 25, \"Cannot set fees higher than 25%!\");\r\n        _equalizerFee = equalizerFee;\r\n        setBNBFeeTotal();\r\n    }\r\n\r\n    /**\r\n    * @dev public function to read the limiter on when the contract will auto convert to BNB\r\n    *\r\n    */\r\n    function getTokenAutoSwapLimit() external view returns (uint256) {\r\n        return minimumTokensBeforeSwap;\r\n    }\r\n\r\n    /**\r\n    * @dev owner only function to set the maximum transfer amount\r\n    *\r\n    * @param maxTxPercent the amount of % of total supply\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `maxTxPercent` must be more than 0\r\n    *\r\n    */\r\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r\n        require(maxTxPercent > 0, \"Cannot set maximum transfer amount to 0!\");\r\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(\r\n            10**2\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev owner only function to set the limit of tokens to sell for BNB when reached\r\n    *\r\n    * @param _minimumTokensBeforeSwap the amount tokens when to sell from the contract\r\n    *\r\n    */\r\n    function setTokenAutoSwapLimit(uint256 _minimumTokensBeforeSwap) external onlyOwner() {\r\n        minimumTokensBeforeSwap = _minimumTokensBeforeSwap;\r\n    }\r\n\r\n    /**\r\n    * @dev owner only function to control if the autoswap to BNB should happen\r\n    *\r\n    * Emits an {SwapAndLiquifyEnabledUpdated} event.\r\n    *\r\n    */\r\n    function setSwapAndLiquifyEnabled(bool _enabled) external onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    /**\r\n    * @dev owner only function to set a new router address and create a new pair.\r\n    *\r\n    */\r\n    function setRouterAddress(address newRouter) external onlyOwner() {\r\n        IUniswapV2Router02 _newPancakeRouter = IUniswapV2Router02(newRouter);\r\n        uniswapV2Pair = IUniswapV2Factory(_newPancakeRouter.factory()).createPair(address(this), _newPancakeRouter.WETH());\r\n        router = _newPancakeRouter;\r\n    }\r\n\r\n    /**\r\n    * @dev public function to read the total amount of reflection reward tokens\r\n    *\r\n    */\r\n    function totalReflectionFees() external view returns (uint256) {\r\n        return _tReflectionTotal;\r\n    }\r\n\r\n    /**\r\n    * @dev public function to read the total amount of tokens burned\r\n    *\r\n    */\r\n    function totalBurn() external view returns (uint256) {\r\n        return _tBurnTotal;\r\n    }\r\n\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ctrlBurnWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"RewardLiquidityProviders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"}],\"name\":\"UpdateOperationWallet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_charityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_equalizerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_redistributionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controlledBurnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controlledBurnWeeklyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doControlledBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"equalizerAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAutoSwapLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isIncludedInFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setBurnFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_charityAddress\",\"type\":\"address\"}],\"name\":\"setCharityAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"charityFee\",\"type\":\"uint256\"}],\"name\":\"setCharityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controlledBurnAddress\",\"type\":\"address\"}],\"name\":\"setControlledBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_equalizerAddress\",\"type\":\"address\"}],\"name\":\"setEqualizerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"equalizerFee\",\"type\":\"uint256\"}],\"name\":\"setEqualizerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpFee\",\"type\":\"uint256\"}],\"name\":\"setLpFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"}],\"name\":\"setMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redistributionFee\",\"type\":\"uint256\"}],\"name\":\"setRedistributionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"setTokenAutoSwapLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReflectionFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PABLO", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Apache-2.0", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://34f5c31678a89dc551e762c9b7b93922c96ad71aab4d47f339cbb25943fab01e"}