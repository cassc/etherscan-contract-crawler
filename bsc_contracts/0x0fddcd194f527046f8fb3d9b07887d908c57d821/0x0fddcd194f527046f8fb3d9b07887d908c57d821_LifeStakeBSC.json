{"SourceCode": "/*                           'coddl,.            .';;:clc;.                                           \r\n*                          .lKWMMMWNd.        .:x0XNNWWWWk.                                           \r\n*   ';;;;::'               ,0WMMMMMMXc       ;ONMMMMMMMMWO'                                           \r\n*  'OWMMMMMO'              .dNMMMMMWk'      :KWMMMMMMWNKOl.                                           \r\n*  'OWMMMMMO'               .:dO00kl.      .xWMMMMMNXx,.                                              \r\n*  'OWMMMMMO'                  ...         ;KWMMMMWOc'                                                \r\n*  'OWMMMMMO'                ','''''.   .',oXMMMMMWOl:,',.           ..,;:ccc:;,..                    \r\n*  'OWMMMMMO'               ,0NNNNNKc  .xNNWMMMMMMMWWNNNN0,       .cdOKNWMMMMMWWX0xl,.                \r\n*  'OWMMMMMO'               ;XMMMMMNl  .kMMMMMMMMMMMMMMMMK;    .;xXWMMMMMMMMMMMMMMMWXOc.              \r\n*  'OWMMMMMO'               ;XMMMMMNl  .xNNWMMMMMMMWWWNNN0,   'xXMMMMMMWNKOO0KXWMMMMMMWO;             \r\n*  'OWMMMMMO'               ;XMMMMMNl   .''oXMMMMMWOl:'''.   ,OWMMMMMXkc'.....':kXMMMMMMK:.           \r\n*  'OWMMMMMO'               ;XMMMMMNl      ;KMMMMMWx,.      'kWMMMMWKc.         .:0WMMMMM0;           \r\n*  'OWMMMMMO'               ;XMMMMMNl      ;KWMMMMWx,.      lNMMMMMNo.           .cKMMMMMNx.          \r\n*  'OWMMMMMO'               ;XMMMMMNl      ;KWMMMMWx,.     .xWMMMMMW0xxxxxxxxxxxxk0NMMMMMM0'          \r\n*  'OWMMMMMO'               ;XMMMMMNl      ;KWMMMMWx,.     'OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK,          \r\n*  'OWMMMMMO'               ;XMMMMMNl      ;KWMMMMWx,.     .kWMMMMMWK000000000000000000000d.          \r\n*  'OWMMMMMO'               ;XMMMMMNl      ;KWMMMMWx,.     .dWMMMMMXc.                                \r\n*  'OWMMMMMO'               ;XMMMMMNl      ;KWMMMMWx,.      ;KMMMMMWk'           ':cccccc;.           \r\n*  'OWMMMMMO'               ;XMMMMMNl      ;KWMMMMWx,.      .lXMMMMMW0c.       .lKWMMMMMNd.    'lxOOxl\r\n*  'OWMMMMMXxooooooooool:.  ;XMMMMMNl      ;KWMMMMWx,.       .cKWMMMMMWKkolcldkKWMMMMMMXo.    cKWMMMMMc\r\n*  'OWMMMMMMMMMWWMMMMMWW0,  ;XMMMMMNl      ;KWMMMMWx,.         'dXWMMMMMMMWWWMMMMMMMWNk;     .xWMMMMMMx.\r\n*  'OWMMMMMMMMMMMMMMMMMW0,  ;KMMMMWXl      ;KWMMMMWd,.           'lOXWWMMMMMMMMMWWN0d,.       cKWMMMMWc.\r\n*  .xKXXXXXXXXXXXXXXXXXKk'  ,OXXXXX0:      ,kXXXXXKo'.             .;okXWMMMMMWN0x:.          .:ONMMXk.\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n \r\ncontract LifeStakeBSC {\r\n    //constant\r\n    uint256 public constant percentDivider = 1_000;\r\n    uint256 public maxStake = 2_500_000_000;\r\n    uint256 public minStake = 10_000;\r\n    uint256 public totalStaked;\r\n    uint256 public currentStaked;\r\n    uint256 public tier1Staked;\r\n    uint256 public tier2Staked;\r\n    uint256 public tier3Staked;\r\n    uint256 public TimeStep = 1 hours;\r\n    //address\r\n    IERC20 public TOKEN;\r\n    address payable public Admin;\r\n    address payable public RewardAddress;\r\n \r\n    // structures\r\n    struct Stake {\r\n        uint256 StakePercent;\r\n        uint256 StakePeriod;\r\n    }\r\n    struct Staker {\r\n        uint256 Amount;\r\n        uint256 Claimed;\r\n        uint256 Claimable;\r\n        uint256 MaxClaimable;\r\n        uint256 TokenPerHour;\r\n        uint256 LastClaimTime;\r\n        uint256 UnStakeTime;\r\n        uint256 StakeTime;\r\n    }\r\n \r\n    Stake public StakeI;\r\n    Stake public StakeII;\r\n    Stake public StakeIII;\r\n    // mapping & array\r\n    mapping(address => Staker) public PlanI;\r\n    mapping(address => Staker) public PlanII;\r\n    mapping(address => Staker) public PlanIII;\r\n \r\n    modifier onlyAdmin() {\r\n        require(msg.sender == Admin, \"Stake: Not an Admin\");\r\n        _;\r\n    }\r\n    modifier validDepositId(uint256 _depositId) {\r\n        require(_depositId >= 1 && _depositId <= 3, \"Invalid depositId\");\r\n        _;\r\n    }\r\n \r\n    constructor(address _TOKEN) {\r\n        Admin = payable(msg.sender);\r\n        RewardAddress = payable(msg.sender);\r\n        TOKEN = IERC20(_TOKEN);\r\n        StakeI.StakePercent = 25;\r\n        StakeI.StakePeriod = 30 days;\r\n \r\n        StakeII.StakePercent = 175;\r\n        StakeII.StakePeriod = 180 days;\r\n \r\n        StakeIII.StakePercent = 390;\r\n        StakeIII.StakePeriod = 360 days;\r\n \r\n        maxStake = maxStake * (10**TOKEN.decimals());\r\n        minStake = minStake * (10**TOKEN.decimals());\r\n    }\r\n \r\n    receive() external payable {}\r\n \r\n    // to buy  token during Stake time => for web3 use\r\n    function deposit(uint256 _depositId, uint256 _amount)\r\n        public\r\n        validDepositId(_depositId)\r\n    {\r\n        require(currentStaked + _amount <= maxStake, \"MaxStake limit reached\");\r\n        require(_amount >= minStake, \"Deposit more than 10_000\");\r\n        TOKEN.transferFrom(msg.sender, address(this), _amount);\r\n        totalStaked = totalStaked + (_amount);\r\n        currentStaked = currentStaked + (_amount);\r\n \r\n        if (_depositId == 1) {\r\n            tier1Staked = tier1Staked + (_amount);\r\n            PlanI[msg.sender].Claimable = calcRewardsHour(msg.sender, _depositId);\r\n            PlanI[msg.sender].Amount = PlanI[msg.sender].Amount + (_amount);\r\n            \r\n            PlanI[msg.sender].MaxClaimable =\r\n                ((PlanI[msg.sender].Amount * (StakeI.StakePercent)) /\r\n                    (percentDivider)) +\r\n                PlanI[msg.sender].Claimable;\r\n                \r\n            PlanI[msg.sender].TokenPerHour = (\r\n                CalculatePerHour(PlanI[msg.sender].MaxClaimable - PlanI[msg.sender].Claimable,\r\n                    StakeI.StakePeriod\r\n                )\r\n            );\r\n \r\n            PlanI[msg.sender].LastClaimTime = block.timestamp;\r\n \r\n            PlanI[msg.sender].StakeTime = block.timestamp;\r\n            PlanI[msg.sender].UnStakeTime =\r\n                block.timestamp +\r\n                (StakeI.StakePeriod);\r\n            PlanI[msg.sender].Claimed = 0; \r\n        } else if (_depositId == 2) {\r\n            tier2Staked = tier2Staked + (_amount);\r\n            PlanII[msg.sender].Claimable = calcRewardsHour(msg.sender, _depositId);\r\n \r\n            PlanII[msg.sender].Amount = PlanII[msg.sender].Amount + (_amount);\r\n            \r\n            PlanII[msg.sender].MaxClaimable =\r\n                ((PlanII[msg.sender].Amount * (StakeII.StakePercent)) /\r\n                    (percentDivider)) +\r\n                PlanII[msg.sender].Claimable;\r\n            PlanII[msg.sender].TokenPerHour = (\r\n                CalculatePerHour(PlanII[msg.sender].MaxClaimable - PlanII[msg.sender].Claimable,\r\n                    StakeII.StakePeriod\r\n                )\r\n            );\r\n \r\n            PlanII[msg.sender].LastClaimTime = block.timestamp;\r\n \r\n            PlanII[msg.sender].StakeTime = block.timestamp;\r\n            PlanII[msg.sender].UnStakeTime =\r\n                block.timestamp +\r\n                (StakeII.StakePeriod);\r\n            PlanII[msg.sender].Claimed = 0;\r\n        } else if (_depositId == 3) {\r\n            tier3Staked = tier3Staked + (_amount);\r\n            PlanIII[msg.sender].Claimable = calcRewardsHour(msg.sender, _depositId);\r\n            PlanIII[msg.sender].Amount = PlanIII[msg.sender].Amount + (_amount);\r\n            \r\n            PlanIII[msg.sender].MaxClaimable =\r\n                ((PlanIII[msg.sender].Amount * (StakeIII.StakePercent)) /\r\n                    (percentDivider)) +\r\n                PlanIII[msg.sender].Claimable;\r\n            PlanIII[msg.sender].TokenPerHour = (\r\n                CalculatePerHour(PlanIII[msg.sender].MaxClaimable - PlanIII[msg.sender].Claimable,\r\n                    StakeIII.StakePeriod\r\n                )\r\n            );\r\n \r\n            PlanIII[msg.sender].LastClaimTime = block.timestamp;\r\n \r\n            PlanIII[msg.sender].StakeTime = block.timestamp;\r\n            PlanIII[msg.sender].UnStakeTime =\r\n                block.timestamp +\r\n                (StakeIII.StakePeriod);\r\n            PlanIII[msg.sender].Claimed = 0;\r\n        }\r\n    }\r\n    function extendLockup(uint256 _depositId)\r\n        public\r\n        validDepositId(_depositId)\r\n    {\r\n        if(calcRewardsHour(msg.sender, _depositId) > 0)\r\n        {\r\n            require(currentStaked + (calcRewardsHour(msg.sender, _depositId)) <= maxStake, \"Max stake limit reached. Please harvest before reinvesting\");\r\n            }\r\n        totalStaked = totalStaked + (calcRewardsHour(msg.sender, _depositId));\r\n \r\n        currentStaked = currentStaked + (calcRewardsHour(msg.sender, _depositId));\r\n        if(calcRewardsHour(msg.sender, _depositId) > 0)\r\n        {\r\n            TOKEN.transferFrom(RewardAddress, address(this),calcRewardsHour(msg.sender, _depositId) );\r\n        }\r\n        if (_depositId == 1) {\r\n            require(PlanI[msg.sender].Amount > 0, \"Nothing staked\");\r\n            tier1Staked = tier1Staked + (calcRewardsHour(msg.sender, _depositId));\r\n \r\n            PlanI[msg.sender].Amount = PlanI[msg.sender].Amount + (calcRewardsHour(msg.sender, _depositId));\r\n            PlanI[msg.sender].TokenPerHour = (\r\n                CalculatePerHour(\r\n                    ((PlanI[msg.sender].Amount * (StakeI.StakePercent)) /\r\n                        (percentDivider)),\r\n                    StakeI.StakePeriod\r\n                )\r\n            );\r\n            PlanI[msg.sender].MaxClaimable =\r\n                ((PlanI[msg.sender].Amount * (StakeI.StakePercent)) /\r\n                    (percentDivider)) ;\r\n \r\n            PlanI[msg.sender].LastClaimTime = block.timestamp;\r\n \r\n            PlanI[msg.sender].StakeTime = block.timestamp;\r\n            PlanI[msg.sender].UnStakeTime =\r\n                block.timestamp +\r\n                (StakeI.StakePeriod);\r\n            PlanI[msg.sender].Claimable = 0;\r\n            PlanI[msg.sender].Claimed = 0;\r\n        } else if (_depositId == 2) {\r\n            require(PlanII[msg.sender].Amount > 0, \"Nothing staked\");\r\n            tier2Staked = tier2Staked + (calcRewardsHour(msg.sender, _depositId));\r\n \r\n            PlanII[msg.sender].Amount = PlanII[msg.sender].Amount + (calcRewardsHour(msg.sender, _depositId));\r\n            PlanII[msg.sender].TokenPerHour = (\r\n                CalculatePerHour(\r\n                    ((PlanII[msg.sender].Amount * (StakeII.StakePercent)) /\r\n                        (percentDivider)),\r\n                    StakeII.StakePeriod\r\n                )\r\n            );\r\n            PlanII[msg.sender].MaxClaimable =\r\n                ((PlanII[msg.sender].Amount * (StakeII.StakePercent)) /\r\n                    (percentDivider)) ;\r\n \r\n            PlanII[msg.sender].LastClaimTime = block.timestamp;\r\n \r\n            PlanII[msg.sender].StakeTime = block.timestamp;\r\n            PlanII[msg.sender].UnStakeTime =\r\n                block.timestamp +\r\n                (StakeII.StakePeriod);\r\n            PlanII[msg.sender].Claimable = 0;\r\n            PlanII[msg.sender].Claimed = 0;\r\n        } else if (_depositId == 3) {\r\n            require(PlanIII[msg.sender].Amount > 0, \"Nothing staked\");\r\n            tier3Staked = tier3Staked + (calcRewardsHour(msg.sender, _depositId));\r\n            PlanIII[msg.sender].Claimable = 0;\r\n            PlanIII[msg.sender].Amount = PlanIII[msg.sender].Amount + (calcRewardsHour(msg.sender, _depositId));\r\n            PlanIII[msg.sender].TokenPerHour = (\r\n                CalculatePerHour(\r\n                    ((PlanIII[msg.sender].Amount * (StakeIII.StakePercent)) /\r\n                        (percentDivider)),\r\n                    StakeIII.StakePeriod\r\n                )\r\n            );\r\n            PlanIII[msg.sender].MaxClaimable =\r\n                ((PlanIII[msg.sender].Amount * (StakeIII.StakePercent)) /\r\n                    (percentDivider)) ;\r\n \r\n            PlanIII[msg.sender].LastClaimTime = block.timestamp;\r\n \r\n            PlanIII[msg.sender].StakeTime = block.timestamp;\r\n            PlanIII[msg.sender].UnStakeTime =\r\n                block.timestamp +\r\n                (StakeIII.StakePeriod);\r\n            PlanIII[msg.sender].Claimable = 0;\r\n            PlanIII[msg.sender].Claimed = 0;\r\n        }\r\n    }\r\n    function withdrawAll(uint256 _depositId,address reward)\r\n        external\r\n        validDepositId(_depositId)\r\n    {\r\n        require(calcRewardsHour(msg.sender,_depositId) > 0,\"No claimable amount available yet\");\r\n        _withdraw(msg.sender, _depositId,reward);\r\n    }\r\n \r\n    function _withdraw(address _user, uint256 _depositId , address reward)\r\n        internal\r\n        validDepositId(_depositId)\r\n    {\r\n        if (_depositId == 1) {\r\n            require(PlanI[_user].Claimed <= PlanI[_user].MaxClaimable,\"No claimable amount available\");\r\n            require(block.timestamp > PlanI[_user].LastClaimTime,\"Lockout time has not expired\");\r\n \r\n \r\n            if (calcRewardsHour(_user, _depositId) > 0) {\r\n                TOKEN.transferFrom(RewardAddress, reward, calcRewardsHour(_user, _depositId));\r\n            }\r\n            PlanI[_user].Claimed = PlanI[_user].Claimed + (calcRewardsHour(_user, _depositId));\r\n            PlanI[_user].LastClaimTime = block.timestamp;\r\n            PlanI[_user].Claimable = 0;\r\n        }\r\n        if (_depositId == 2) {\r\n            require(PlanII[_user].Claimed <= PlanII[_user].MaxClaimable,\"No claimable amount available\");\r\n            require(block.timestamp > PlanII[_user].LastClaimTime,\"Lockout time has not expired\");\r\n \r\n \r\n            if (calcRewardsHour(_user, _depositId) > 0) {\r\n                TOKEN.transferFrom(RewardAddress, reward, calcRewardsHour(_user, _depositId));\r\n            }\r\n            PlanII[_user].Claimed = PlanII[_user].Claimed + (calcRewardsHour(_user, _depositId));\r\n            PlanII[_user].LastClaimTime = block.timestamp;\r\n            PlanII[_user].Claimable = 0;\r\n        }\r\n \r\n        if (_depositId == 3) {\r\n            require(PlanIII[_user].Claimed <= PlanIII[_user].MaxClaimable,\"No claimable amount available\");\r\n            require(block.timestamp > PlanIII[_user].LastClaimTime,\"Lockout time has not expired\");\r\n \r\n \r\n            if (calcRewardsHour(_user, _depositId) > 0) {\r\n                TOKEN.transferFrom(RewardAddress, reward, calcRewardsHour(_user, _depositId));\r\n            }\r\n            PlanIII[_user].Claimed = PlanIII[_user].Claimed + (calcRewardsHour(_user, _depositId));\r\n            PlanIII[_user].LastClaimTime = block.timestamp;\r\n            PlanIII[_user].Claimable = 0;\r\n        }\r\n        }\r\n \r\n    function CompleteWithDraw(uint256 _depositId, address reward)\r\n        external\r\n        validDepositId(_depositId)\r\n    {\r\n        if (_depositId == 1) {\r\n            require(\r\n                PlanI[msg.sender].UnStakeTime < block.timestamp,\r\n                \"Time1 not reached\"\r\n            );\r\n            TOKEN.transfer(msg.sender, PlanI[msg.sender].Amount);\r\n            currentStaked = currentStaked - (PlanI[msg.sender].Amount);\r\n            tier1Staked = tier1Staked - (PlanI[msg.sender].Amount);\r\n            _withdraw(msg.sender, _depositId , reward);\r\n            delete PlanI[msg.sender];\r\n        } else if (_depositId == 2) {\r\n            require(\r\n                PlanII[msg.sender].UnStakeTime < block.timestamp,\r\n                \"Time2 not reached\"\r\n            );\r\n            TOKEN.transfer(msg.sender, PlanII[msg.sender].Amount);\r\n            currentStaked = currentStaked - (PlanII[msg.sender].Amount);\r\n            tier2Staked = tier2Staked - (PlanII[msg.sender].Amount);\r\n            _withdraw(msg.sender, _depositId,reward);\r\n            delete PlanII[msg.sender];\r\n        } else if (_depositId == 3) {\r\n            require(\r\n                PlanIII[msg.sender].UnStakeTime < block.timestamp,\r\n                \"Time3 not reached\"\r\n            );\r\n            TOKEN.transfer(msg.sender, PlanIII[msg.sender].Amount);\r\n            currentStaked = currentStaked - (PlanIII[msg.sender].Amount);\r\n            tier3Staked = tier3Staked - (PlanIII[msg.sender].Amount);\r\n            _withdraw(msg.sender, _depositId,reward);\r\n            delete PlanIII[msg.sender];\r\n        }\r\n    }\r\n\r\n    function calcRewardsHour(address _sender, uint256 _depositId)\r\n        public\r\n        view\r\n        validDepositId(_depositId)\r\n        returns (uint256 amount)\r\n    {\r\n        if (_depositId == 1) {\r\n            uint256 claimable = PlanI[_sender].TokenPerHour *\r\n                ((block.timestamp - (PlanI[_sender].LastClaimTime)) /\r\n                    (TimeStep));\r\n            claimable = claimable + PlanI[_sender].Claimable;\r\n            if (\r\n                claimable >\r\n                PlanI[_sender].MaxClaimable - (PlanI[_sender].Claimed)\r\n            ) {\r\n                claimable =\r\n                    PlanI[_sender].MaxClaimable -\r\n                    (PlanI[_sender].Claimed);\r\n            }\r\n            return (claimable);\r\n        } else if (_depositId == 2) {\r\n            uint256 claimable = PlanII[_sender].TokenPerHour *\r\n                ((block.timestamp - (PlanII[_sender].LastClaimTime)) /\r\n                    (TimeStep));\r\n            claimable = claimable + PlanII[_sender].Claimable;\r\n            if (\r\n                claimable >\r\n                PlanII[_sender].MaxClaimable - (PlanII[_sender].Claimed)\r\n            ) {\r\n                claimable =\r\n                    PlanII[_sender].MaxClaimable -\r\n                    (PlanII[_sender].Claimed);\r\n            }\r\n            return (claimable);\r\n        } else if (_depositId == 3) {\r\n            uint256 claimable = PlanIII[_sender].TokenPerHour *\r\n                ((block.timestamp - (PlanIII[_sender].LastClaimTime)) /\r\n                    (TimeStep));\r\n            claimable = claimable + PlanIII[_sender].Claimable;\r\n            if (\r\n                claimable >\r\n                PlanIII[_sender].MaxClaimable - (PlanIII[_sender].Claimed)\r\n            ) {\r\n                claimable =\r\n                    PlanIII[_sender].MaxClaimable -\r\n                    (PlanIII[_sender].Claimed);\r\n            }\r\n            return (claimable);\r\n        }\r\n    }\r\n \r\n    function getCurrentBalance(uint256 _depositId, address _sender)\r\n        public\r\n        view\r\n        returns (uint256 addressBalance)\r\n    {\r\n        if (_depositId == 1) {\r\n            return (PlanI[_sender].Amount);\r\n        } else if (_depositId == 2) {\r\n            return (PlanII[_sender].Amount);\r\n        } else if (_depositId == 3) {\r\n            return (PlanIII[_sender].Amount);\r\n        }\r\n    }\r\n \r\n    function depositDates(address _sender, uint256 _depositId)\r\n        public\r\n        view\r\n        validDepositId(_depositId)\r\n        returns (uint256 date)\r\n    {\r\n        if (_depositId == 1) {\r\n            return (PlanI[_sender].StakeTime);\r\n        } else if (_depositId == 2) {\r\n            return (PlanII[_sender].StakeTime);\r\n        } else if (_depositId == 3) {\r\n            return (PlanIII[_sender].StakeTime);\r\n        }\r\n    }\r\n \r\n    function isLockupPeriodExpired(address _user,uint256 _depositId)\r\n        public\r\n        view\r\n        validDepositId(_depositId)\r\n        returns (bool val)\r\n    {\r\n        if (_depositId == 1) {\r\n            if (block.timestamp > PlanI[_user].UnStakeTime) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else if (_depositId == 2) {\r\n            if (block.timestamp > PlanII[_user].UnStakeTime) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        } else if (_depositId == 3) {\r\n            if (block.timestamp > PlanIII[_user].UnStakeTime) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n \r\n    // transfer Adminship\r\n    function transferOwnership(address payable _newAdmin) external onlyAdmin {\r\n        Admin = _newAdmin;\r\n    }\r\n    \r\n    function withdrawStuckToken(address _token,uint256 _amount) external onlyAdmin {\r\n        IERC20(_token).transfer(msg.sender,_amount);\r\n    }\r\n \r\n    function ChangeRewardAddress(address payable _newAddress) external onlyAdmin {\r\n        RewardAddress = _newAddress;\r\n    }\r\n \r\n    function ChangePlan(\r\n        uint256 _depositId,\r\n        uint256 StakePercent,\r\n        uint256 StakePeriod\r\n    ) external onlyAdmin {\r\n        if (_depositId == 1) {\r\n            StakeI.StakePercent = StakePercent;\r\n            StakeI.StakePeriod = StakePeriod;\r\n        } else if (_depositId == 2) {\r\n            StakeII.StakePercent = StakePercent;\r\n            StakeII.StakePeriod = StakePeriod;\r\n        } else if (_depositId == 3) {\r\n            StakeIII.StakePercent = StakePercent;\r\n            StakeIII.StakePeriod = StakePeriod;\r\n        }\r\n    }\r\n \r\n    function ChangeMinStake(uint256 val) external onlyAdmin {\r\n        minStake = val;\r\n    }\r\n \r\n    function ChangeMaxStake(uint256 val) external onlyAdmin {\r\n        maxStake = val;\r\n    }\r\n \r\n    function userData(\r\n        uint256[] memory _depositId,\r\n        uint256[] memory _amount,\r\n        address[] memory _user\r\n    ) external onlyAdmin {\r\n        require(\r\n            _amount.length == _depositId.length &&\r\n                _depositId.length == _user.length,\r\n            \"invalid number of arguments\"\r\n        );\r\n        for (uint256 i; i < _depositId.length; i++) {\r\n            totalStaked = totalStaked + (_amount[i]);\r\n            currentStaked = currentStaked + (_amount[i]);\r\n \r\n            if (_depositId[i] == 1) {\r\n                tier1Staked = tier1Staked + (_amount[i]);\r\n                PlanI[_user[i]].Claimable = calcRewardsHour(\r\n                    _user[i],\r\n                    _depositId[i]\r\n                );\r\n                \r\n                PlanI[_user[i]].MaxClaimable =\r\n                    PlanI[_user[i]].MaxClaimable +\r\n                    ((_amount[i] * (StakeI.StakePercent)) / (percentDivider));\r\n                    PlanI[_user[i]].TokenPerHour =\r\n                    (\r\n                        CalculatePerHour(PlanI[_user[i]].MaxClaimable - PlanIII[_user[i]].Claimed ,\r\n                            StakeI.StakePeriod\r\n                        )\r\n                    ); \r\n\r\n                PlanI[_user[i]].LastClaimTime = block.timestamp;\r\n                PlanI[_user[i]].StakeTime = block.timestamp;\r\n                PlanI[_user[i]].UnStakeTime =\r\n                    block.timestamp +\r\n                    (StakeI.StakePeriod);\r\n                PlanI[_user[i]].Amount = PlanI[_user[i]].Amount + (_amount[i]);\r\n\r\n            } else if (_depositId[i] == 2) {\r\n                tier2Staked = tier2Staked + (_amount[i]);\r\n                PlanII[_user[i]].Claimable = calcRewardsHour(\r\n                    _user[i],\r\n                    _depositId[i]\r\n                );\r\n                \r\n                PlanII[_user[i]].MaxClaimable =\r\n                    PlanII[_user[i]].MaxClaimable +\r\n                    ((_amount[i] * (StakeII.StakePercent)) / (percentDivider));\r\n\r\n                    PlanII[_user[i]].TokenPerHour =\r\n                    (\r\n                        CalculatePerHour(PlanII[_user[i]].MaxClaimable - PlanIII[_user[i]].Claimed ,\r\n                            StakeII.StakePeriod\r\n                        )\r\n                    );\r\n                PlanII[_user[i]].LastClaimTime = block.timestamp;\r\n                PlanII[_user[i]].StakeTime = block.timestamp;\r\n                PlanII[_user[i]].UnStakeTime =\r\n                    block.timestamp +\r\n                    (StakeII.StakePeriod);\r\n                PlanII[_user[i]].Amount =\r\n                    PlanII[_user[i]].Amount +\r\n                    (_amount[i]);\r\n            } else if (_depositId[i] == 3) {\r\n                tier3Staked = tier3Staked + (_amount[i]);\r\n                PlanIII[_user[i]].Claimable = calcRewardsHour(\r\n                    _user[i],\r\n                    _depositId[i]\r\n                );\r\n                \r\n                PlanIII[_user[i]].MaxClaimable =\r\n                    PlanIII[_user[i]].MaxClaimable +\r\n                    ((_amount[i] * (StakeIII.StakePercent)) / (percentDivider));\r\n                    PlanIII[_user[i]].TokenPerHour =\r\n                    (\r\n                        CalculatePerHour(PlanIII[_user[i]].MaxClaimable - PlanIII[_user[i]].Claimed ,\r\n                            StakeIII.StakePeriod\r\n                        )\r\n                    );\r\n                PlanIII[_user[i]].LastClaimTime = block.timestamp;\r\n                PlanIII[_user[i]].StakeTime = block.timestamp;\r\n                PlanIII[_user[i]].UnStakeTime =\r\n                    block.timestamp +\r\n                    (StakeIII.StakePeriod);\r\n                PlanIII[_user[i]].Amount =\r\n                    PlanIII[_user[i]].Amount +\r\n                    (_amount[i]);\r\n            }\r\n        }\r\n    }\r\n    function ResetSpecificUserData(uint256 _depositId,uint256 _amount,address _user) external onlyAdmin {\r\n        currentStaked = currentStaked + _amount;\r\n        if (_depositId == 1) {\r\n            currentStaked = currentStaked - PlanI[_user].Amount;\r\n            tier1Staked = tier1Staked - PlanI[_user].Amount;\r\n            tier1Staked = tier1Staked + _amount;\r\n            delete PlanI[_user];\r\n            PlanI[_user].TokenPerHour =\r\n                (\r\n                    CalculatePerHour(\r\n                        (_amount * (StakeI.StakePercent)) / (percentDivider),\r\n                        StakeI.StakePeriod\r\n                    )\r\n                );\r\n            PlanI[_user].MaxClaimable =\r\n                ((_amount * (StakeI.StakePercent)) / (percentDivider));\r\n            PlanI[_user].LastClaimTime = block.timestamp;\r\n            PlanI[_user].StakeTime = block.timestamp;\r\n            PlanI[_user].UnStakeTime =\r\n                block.timestamp +\r\n                (StakeI.StakePeriod);\r\n            PlanI[_user].Amount = (_amount);\r\n        }else if (_depositId == 2) {\r\n            currentStaked = currentStaked - PlanII[_user].Amount;\r\n            tier2Staked = tier2Staked - PlanII[_user].Amount;\r\n            tier2Staked = tier2Staked + _amount;\r\n            delete PlanII[_user];\r\n            PlanII[_user].TokenPerHour =\r\n                (\r\n                    CalculatePerHour(\r\n                        (_amount * (StakeII.StakePercent)) / (percentDivider),\r\n                        StakeII.StakePeriod\r\n                    )\r\n                );\r\n            PlanII[_user].MaxClaimable =\r\n                ((_amount * (StakeII.StakePercent)) / (percentDivider));\r\n            PlanII[_user].LastClaimTime = block.timestamp;\r\n            PlanII[_user].StakeTime = block.timestamp;\r\n            PlanII[_user].UnStakeTime =\r\n                block.timestamp +\r\n                (StakeII.StakePeriod);\r\n            PlanII[_user].Amount = (_amount);\r\n        }else if (_depositId == 3) {\r\n            currentStaked = currentStaked - PlanIII[_user].Amount;\r\n            tier3Staked = tier3Staked - PlanIII[_user].Amount;\r\n            tier3Staked = tier3Staked + _amount;\r\n            delete PlanIII[_user];\r\n            PlanIII[_user].TokenPerHour =\r\n                (\r\n                    CalculatePerHour(\r\n                        (_amount * (StakeIII.StakePercent)) / (percentDivider),\r\n                        StakeIII.StakePeriod\r\n                    )\r\n                );\r\n            PlanIII[_user].MaxClaimable =\r\n                ((_amount * (StakeIII.StakePercent)) / (percentDivider));\r\n            PlanIII[_user].LastClaimTime = block.timestamp;\r\n            PlanIII[_user].StakeTime = block.timestamp;\r\n            PlanIII[_user].UnStakeTime =\r\n                block.timestamp +\r\n                (StakeIII.StakePeriod);\r\n            PlanIII[_user].Amount = (_amount);\r\n        }\r\n        \r\n    }\r\n \r\n    function getContractTokenBalance() public view returns (uint256) {\r\n        return TOKEN.balanceOf(address(this));\r\n    }\r\n    function CalculatePerHour(uint256 amount, uint256 _VestingPeriod)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (amount * (TimeStep)) / (_VestingPeriod);\r\n    }\r\n}\r\n \r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n \r\n    function decimals() external view returns (uint8);\r\n \r\n    function symbol() external view returns (string memory);\r\n \r\n    function name() external view returns (string memory);\r\n \r\n    function balanceOf(address account) external view returns (uint256);\r\n \r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n \r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n \r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TOKEN\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Admin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"ChangeMaxStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"ChangeMinStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StakePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StakePeriod\",\"type\":\"uint256\"}],\"name\":\"ChangePlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"ChangeRewardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"CompleteWithDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PlanI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MaxClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TokenPerHour\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LastClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UnStakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StakeTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PlanII\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MaxClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TokenPerHour\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LastClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UnStakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StakeTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PlanIII\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MaxClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TokenPerHour\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LastClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UnStakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StakeTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"ResetSpecificUserData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StakeI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"StakePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StakePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StakeII\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"StakePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StakePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StakeIII\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"StakePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StakePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TimeStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"calcRewardsHour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"depositDates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"extendLockup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"getCurrentBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"addressBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"isLockupPeriodExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentDivider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tier1Staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tier2Staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tier3Staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_depositId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_user\",\"type\":\"address[]\"}],\"name\":\"userData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LifeStakeBSC", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000082190d28e710ea9c029d009fad951c6f1d803bb3", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://48fc275a37b740419fa822f08a3d853772f3e91bbc65c6b6965e2e59e017270d"}