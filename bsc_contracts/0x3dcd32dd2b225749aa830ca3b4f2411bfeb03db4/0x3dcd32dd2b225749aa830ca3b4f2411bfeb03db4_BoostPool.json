{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Staking/BoostPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport {FixedPointMath} from \\\"./libraries/FixedPointMath.sol\\\";\\nimport {Pool} from \\\"./libraries/boostPools/Pool.sol\\\";\\nimport {Stake} from \\\"./libraries/boostPools/Stake.sol\\\";\\n\\n/// @title BoostPool\\n/// @dev A contract which allows users to stake to farm tokens.\\n///\\n/// This contract was inspired by Chef Nomi's 'MasterChef' contract which can be found in this\\n/// repository: https://github.com/sushiswap/sushiswap.\\ncontract BoostPool is ReentrancyGuard {\\n    using FixedPointMath for FixedPointMath.uq192x64;\\n    using Pool for Pool.Data;\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using Stake for Stake.Data;\\n\\n    struct LockTimeWeighted {\\n        uint256 lockTime;\\n        uint256 weighted;\\n    }\\n\\n    struct UserDepositedOrder {\\n        uint256 amount;\\n        uint256 expiredTime;\\n        uint256 weighted;\\n        bool isWithdraw;\\n    }\\n\\n    struct Cooldown {\\n        uint256 claimStart;\\n        uint256 claimEnd;\\n    }\\n\\n    event PendingGovernanceUpdated(address pendingGovernance);\\n\\n    event GovernanceUpdated(address governance);\\n\\n    event RewardRateUpdated(uint256 rewardRate);\\n\\n    event LockTimeWeightedSet(uint256 lockTime, uint256 weighted);\\n\\n    event CooldownPeriodUpdated(uint256 period);\\n\\n    event PenaltyPercentUpdated(uint256 percent);\\n\\n    event TokensDeposited(address indexed user, uint256 amount, uint256 weightedAmount);\\n\\n    event TokensWithdrawn(address indexed user, uint256 amount, uint256 weightedAmount);\\n\\n    event TokensClaimed(address indexed user, uint256 amount);\\n\\n    event CooldownStart(address indexed user, uint256 claimStart, uint256 claimEnd);\\n\\n    /// @dev The token which will be minted as a reward for staking.\\n    IERC20 public reward;\\n\\n    /// @dev The address of the account which currently has administrative capabilities over this contract.\\n    address public governance;\\n\\n    /// @dev The address which is the candidate of governance\\n    address public pendingGovernance;\\n\\n    /// @dev The claim period after cooldown period is expired\\n    uint256 public constant CLAIM_PERIOD = 86400;\\n\\n    /// @dev The resolution of fixed point. The resolution allows for a granularity of 1% increments.\\n    uint256 public constant PERCENT_RESOLUTION = 100;\\n\\n    /// @dev The cooldown period\\n    uint256 public cooldownPeriod;\\n\\n    /// @dev The percent of reward will be distributed to the pool if user claims reward immediately.\\n    uint256 public penaltyPercent;\\n\\n    /// @dev The weight in the pool of different lock time\\n    LockTimeWeighted[] lockTimeWeightedList;\\n\\n    /// @dev The count of user's deposited orders.\\n    mapping(address => uint256) public userOrderCount;\\n\\n    /// @dev The record of user's deposited orders.\\n    mapping(address => mapping(uint256 => UserDepositedOrder)) public userDepositedOrder;\\n\\n    /// @dev The cooldown period for each user.\\n    mapping(address => Cooldown) public userCooldown;\\n\\n    /// @dev The context shared between the pools.\\n    Pool.Context private _ctx;\\n\\n    /// @dev The pool information.\\n    Pool.Data private pool;\\n\\n    /// @dev A mapping of all of the user stakes mapped by address.\\n    mapping(address => Stake.Data) private _stakes;\\n\\n    constructor(\\n        IERC20 _token,\\n        IERC20 _reward,\\n        address _governance\\n    ) public {\\n        require(address(_token) != address(0), \\\"BoostPool: token address cannot be 0x0\\\");\\n        require(address(_reward) != address(0), \\\"BoostPool: reward address cannot be 0x0\\\");\\n        require(_governance != address(0), \\\"BoostPool: governance address cannot be 0x0\\\");\\n\\n        pool.set(_token);\\n\\n        reward = _reward;\\n        governance = _governance;\\n        cooldownPeriod = 86400 * 7;\\n        penaltyPercent = 50;\\n    }\\n\\n    /// @dev A modifier which reverts when the caller is not the governance.\\n    modifier onlyGovernance() {\\n        require(msg.sender == governance, \\\"BoostPool: only governance\\\");\\n        _;\\n    }\\n\\n    /// @dev Sets the governance.\\n    ///\\n    /// This function can only called by the current governance.\\n    ///\\n    /// @param _pendingGovernance the new pending governance.\\n    function setPendingGovernance(address _pendingGovernance) external onlyGovernance {\\n        require(_pendingGovernance != address(0), \\\"BoostPool: pending governance address cannot be 0x0\\\");\\n        pendingGovernance = _pendingGovernance;\\n\\n        emit PendingGovernanceUpdated(_pendingGovernance);\\n    }\\n\\n    function acceptGovernance() external {\\n        require(msg.sender == pendingGovernance, \\\"BoostPool: only pending governance\\\");\\n\\n        governance = pendingGovernance;\\n\\n        emit GovernanceUpdated(pendingGovernance);\\n    }\\n\\n    /// @dev Sets the distribution reward rate.\\n    ///\\n    /// @param _rewardRate The number of tokens to distribute per block.\\n    function setRewardRate(uint256 _rewardRate) external onlyGovernance {\\n        Pool.Data storage _pool = pool.get();\\n        _pool.update(_ctx);\\n\\n        _ctx.rewardRate = _rewardRate;\\n\\n        emit RewardRateUpdated(_rewardRate);\\n    }\\n\\n    /// @dev set lock time and its weight\\n    ///\\n    /// @param _lockTime the lock time of the deposited order\\n    /// @param _weighted the weighted of the deposited order\\n    function setLockTimeWeighted(uint256 _lockTime, uint256 _weighted) external onlyGovernance {\\n        lockTimeWeightedList.push(LockTimeWeighted({lockTime: _lockTime, weighted: _weighted}));\\n\\n        emit LockTimeWeightedSet(_lockTime, _weighted);\\n    }\\n\\n    /// @dev set cool down period\\n    ///\\n    /// @param _cooldownPeriod the cooldown period when user claims reward\\n    function setCooldown(uint256 _cooldownPeriod) external onlyGovernance {\\n        cooldownPeriod = _cooldownPeriod;\\n\\n        emit CooldownPeriodUpdated(_cooldownPeriod);\\n    }\\n\\n    /// @dev set penalty percent\\n    ///\\n    /// @param _penaltyPercent the percent of reward will be distributed to other users\\n    function setPenaltyPercent(uint256 _penaltyPercent) external onlyGovernance {\\n        require(_penaltyPercent <= 100, \\\"BoostPool: penalty percent should be less or equal to 100\\\");\\n        penaltyPercent = _penaltyPercent;\\n\\n        emit PenaltyPercentUpdated(_penaltyPercent);\\n    }\\n\\n    /// @dev Stakes tokens into a pool.\\n    ///\\n    /// @param _depositAmount the amount of tokens to deposit.\\n    /// @param _index the index of the lock time weighted list\\n    function deposit(uint256 _depositAmount, uint256 _index) external nonReentrant {\\n        require(_index < lockTimeWeightedList.length, \\\"invalid index\\\");\\n\\n        Pool.Data storage _pool = pool.get();\\n        _pool.update(_ctx);\\n\\n        Stake.Data storage _stake = _stakes[msg.sender];\\n        _stake.update(_pool, _ctx);\\n\\n        _deposit(_depositAmount, _index);\\n    }\\n\\n    /// @dev Withdraws staked tokens from a pool.\\n    ///\\n    /// @param _index           The index of deposited order.\\n    function withdraw(uint256[] calldata _index) external nonReentrant {\\n        Pool.Data storage _pool = pool.get();\\n        _pool.update(_ctx);\\n\\n        Stake.Data storage _stake = _stakes[msg.sender];\\n        _stake.update(_pool, _ctx);\\n\\n        require(_index.length <= userOrderCount[msg.sender], \\\"invalid index\\\");\\n\\n        uint256 withdrawAmount;\\n        uint256 weightedWithdrawAmount;\\n        for (uint256 i = 0; i < _index.length; i++) {\\n            UserDepositedOrder storage depositedOrder = userDepositedOrder[msg.sender][_index[i]];\\n            require(_index[i] < userOrderCount[msg.sender], \\\"invalid index\\\");\\n            require(!depositedOrder.isWithdraw, \\\"The order has been withdrew\\\");\\n            require(depositedOrder.expiredTime < block.timestamp, \\\"The lock time is not expired!\\\");\\n            depositedOrder.isWithdraw = true;\\n            withdrawAmount = withdrawAmount.add(depositedOrder.amount);\\n            weightedWithdrawAmount = weightedWithdrawAmount.add(depositedOrder.amount.mul(depositedOrder.weighted));\\n        }\\n\\n        _withdraw(withdrawAmount, weightedWithdrawAmount);\\n    }\\n\\n    /// @dev Claims all rewarded tokens from a pool.\\n    function claimImmediately() external nonReentrant {\\n        Cooldown memory cooldown = userCooldown[msg.sender];\\n        require(cooldown.claimEnd < block.timestamp, \\\"wait for the last cooldown period expired\\\");\\n\\n        Pool.Data storage _pool = pool.get();\\n        _pool.update(_ctx);\\n\\n        Stake.Data storage _stake = _stakes[msg.sender];\\n        _stake.update(_pool, _ctx);\\n\\n        uint256 penalty = _stake.totalUnclaimed.mul(penaltyPercent).div(PERCENT_RESOLUTION);\\n        _pool.distribute(penalty);\\n        _stake.totalUnclaimed = _stake.totalUnclaimed.sub(penalty);\\n\\n        if (address(reward) == address(_pool.token)) {\\n            require(_pool.totalDeposited.add(_stake.totalUnclaimed) <= reward.balanceOf(address(this)), \\\"pool has no enough rewards\\\");\\n        }\\n\\n        _claim();\\n    }\\n\\n    /// @dev Claims all rewarded tokens from a pool.\\n    function claim() external nonReentrant {\\n        Cooldown storage cooldown = userCooldown[msg.sender];\\n        require(cooldown.claimStart <= block.timestamp && cooldown.claimEnd >= block.timestamp, \\\"not in the claim period!\\\");\\n\\n        cooldown.claimStart = 0;\\n        cooldown.claimEnd = 0;\\n\\n        Pool.Data storage _pool = pool.get();\\n        _pool.update(_ctx);\\n\\n        Stake.Data storage _stake = _stakes[msg.sender];\\n        _stake.update(_pool, _ctx);\\n\\n        if (address(reward) == address(_pool.token)) {\\n            require(_pool.totalDeposited.add(_stake.totalUnclaimed) <= reward.balanceOf(address(this)), \\\"pool has no enough rewards\\\");\\n        }\\n\\n        _claim();\\n    }\\n\\n    /// @dev lead user into cooldown period.\\n    function startCoolDown() external nonReentrant {\\n        Cooldown storage cooldown = userCooldown[msg.sender];\\n        require(cooldown.claimEnd < block.timestamp, \\\"wait for the last cooldown period expired\\\");\\n        cooldown.claimStart = block.timestamp + cooldownPeriod;\\n        cooldown.claimEnd = block.timestamp + cooldownPeriod + CLAIM_PERIOD;\\n\\n        emit CooldownStart(msg.sender, cooldown.claimStart, cooldown.claimEnd);\\n    }\\n\\n    /// @dev donate reward to the pool\\n    ///\\n    /// @param _donateAmount The donate amount\\n    function donateReward(uint256 _donateAmount) external nonReentrant {\\n        Pool.Data storage _pool = pool.get();\\n        _pool.update(_ctx);\\n\\n        _pool.distribute(_donateAmount);\\n        reward.transferFrom(msg.sender, address(this), _donateAmount);\\n    }\\n\\n    /// @dev Gets the rate at which tokens are minted to stakers for all pools.\\n    ///\\n    /// @return the reward rate.\\n    function rewardRate() external view returns (uint256) {\\n        return _ctx.rewardRate;\\n    }\\n\\n    /// @dev Gets the token a pool accepts.\\n    ///\\n    /// @return the token.\\n    function getPoolToken() external view returns (IERC20) {\\n        Pool.Data storage _pool = pool.get();\\n        return _pool.token;\\n    }\\n\\n    /// @dev Gets the total amount of funds staked in a pool.\\n    ///\\n    /// @return the total amount of staked or deposited tokens.\\n    function getPoolTotalDeposited() external view returns (uint256) {\\n        Pool.Data storage _pool = pool.get();\\n        return _pool.totalDeposited;\\n    }\\n\\n    /// @dev Gets the pool total deposited weight.\\n    ///\\n    /// @return the pool total deposited weight.\\n    function getPoolTotalDepositedWeight() external view returns (uint256) {\\n        Pool.Data storage _pool = pool.get();\\n        return _pool.totalDepositedWeight;\\n    }\\n\\n    /// @dev Gets the number of tokens a user has staked into a pool.\\n    ///\\n    /// @param _account The account to query.\\n    ///\\n    /// @return the amount of deposited tokens.\\n    function getStakeTotalDeposited(address _account) external view returns (uint256) {\\n        Stake.Data storage _stake = _stakes[_account];\\n        return _stake.totalDeposited;\\n    }\\n\\n    /// @dev Gets the user's deposited weight.\\n    ///\\n    /// @param _account The account to query.\\n    ///\\n    /// @return the account's total boost weight.\\n    function getStakeTotalDepositedWeight(address _account) external view returns (uint256) {\\n        Stake.Data storage _stake = _stakes[_account];\\n        return _stake.totalDepositedWeight;\\n    }\\n\\n    /// @dev Gets the number of unclaimed reward tokens a user can claim from a pool immediately.\\n    ///\\n    /// @param _account The account to get the unclaimed balance of.\\n    ///\\n    /// @return the amount of unclaimed reward tokens a user has in a pool.\\n    function getStakeTotalUnclaimedImmediately(address _account) external view returns (uint256) {\\n        Stake.Data storage _stake = _stakes[_account];\\n\\n        uint256 updatedTotalUnclaimed = _stake.getUpdatedTotalUnclaimed(pool.get(), _ctx);\\n        uint256 penalty = updatedTotalUnclaimed.mul(penaltyPercent).div(PERCENT_RESOLUTION);\\n\\n        return updatedTotalUnclaimed.sub(penalty);\\n    }\\n\\n    /// @dev Gets the number of unclaimed reward tokens a user can claim from a pool.\\n    ///\\n    /// @param _account The account to get the unclaimed balance of.\\n    ///\\n    /// @return the amount of unclaimed reward tokens a user has in a pool.\\n    function getStakeTotalUnclaimed(address _account) external view returns (uint256) {\\n        Stake.Data storage _stake = _stakes[_account];\\n        return _stake.getUpdatedTotalUnclaimed(pool.get(), _ctx);\\n    }\\n\\n    /// @dev Gets the number of user's deposited order count.\\n    ///\\n    /// @param _account The user account.\\n    ///\\n    /// @return count the count of user's deposited order.\\n    function getUserOrderCount(address _account) external view returns (uint256 count) {\\n        return userOrderCount[_account];\\n    }\\n\\n    /// @dev Gets user's deposited order by index.\\n    ///\\n    /// @param _account The user account.\\n    /// @param _index The deposited order index.\\n    ///\\n    /// @return amount the amount of the deposited order.\\n    /// @return expiredTime the expired time of the deposited order.\\n    /// @return weighted the weighted of the deposited order\\n    /// @return isWithdraw the deposited order is withdraw or not.\\n    function getUserDepositOrderByIndex(address _account, uint256 _index)\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 expiredTime,\\n            uint256 weighted,\\n            bool isWithdraw\\n        )\\n    {\\n        UserDepositedOrder memory userDepositedOrder = userDepositedOrder[_account][_index];\\n        return (userDepositedOrder.amount, userDepositedOrder.expiredTime, userDepositedOrder.weighted, userDepositedOrder.isWithdraw);\\n    }\\n\\n    /// @dev Gets lock time weighted list length.\\n    ///\\n    /// @return the lock time weighted list length.\\n    function getLockTimeWeightedListLength() external view returns (uint256) {\\n        return lockTimeWeightedList.length;\\n    }\\n\\n    /// @dev Gets the lock time and weighted of lock time weighted list by index.\\n    ///\\n    /// @param _index index.\\n    ///\\n    /// @return lockTime the lock time.\\n    /// @return weighted the weighted when user locks the time.\\n    function getLockTimeWeightedByIndex(uint256 _index) external view returns (uint256 lockTime, uint256 weighted) {\\n        require(_index < lockTimeWeightedList.length, \\\"invalid index\\\");\\n        LockTimeWeighted memory lockTimeWeight = lockTimeWeightedList[_index];\\n        return (lockTimeWeight.lockTime, lockTimeWeight.weighted);\\n    }\\n\\n    /// @dev Gets user's claim reward period.\\n    ///\\n    /// @param _account The user account.\\n    ///\\n    /// @return claimStart the start time that user can claim reward.\\n    /// @return claimEnd the end time that user can claim reward.\\n    function getUserClaimPeriod(address _account) external view returns (uint256 claimStart, uint256 claimEnd) {\\n        Cooldown memory cooldown = userCooldown[_account];\\n        return (cooldown.claimStart, cooldown.claimEnd);\\n    }\\n\\n    /// @dev Stakes tokens into a pool.\\n    ///\\n    /// The pool and stake MUST be updated before calling this function.\\n    ///\\n    /// @param _depositAmount the amount of tokens to deposit.\\n    /// @param _index the index of the lock time weighted list\\n    function _deposit(uint256 _depositAmount, uint256 _index) internal {\\n        Pool.Data storage _pool = pool.get();\\n        Stake.Data storage _stake = _stakes[msg.sender];\\n        LockTimeWeighted memory lockTimeWeight = lockTimeWeightedList[_index];\\n\\n        _pool.totalDeposited = _pool.totalDeposited.add(_depositAmount);\\n        _stake.totalDeposited = _stake.totalDeposited.add(_depositAmount);\\n        _pool.totalDepositedWeight = _pool.totalDepositedWeight.add(_depositAmount.mul(lockTimeWeight.weighted));\\n        _stake.totalDepositedWeight = _stake.totalDepositedWeight.add(_depositAmount.mul(lockTimeWeight.weighted));\\n\\n        userDepositedOrder[msg.sender][userOrderCount[msg.sender]] = UserDepositedOrder({amount: _depositAmount, expiredTime: block.timestamp.add(lockTimeWeight.lockTime), weighted: lockTimeWeight.weighted, isWithdraw: false});\\n\\n        userOrderCount[msg.sender] = userOrderCount[msg.sender] + 1;\\n\\n        _pool.token.transferFrom(msg.sender, address(this), _depositAmount);\\n\\n        emit TokensDeposited(msg.sender, _depositAmount, _depositAmount.mul(lockTimeWeight.weighted));\\n    }\\n\\n    /// @dev Withdraws staked tokens from a pool.\\n    ///\\n    /// The pool and stake MUST be updated before calling this function.\\n    ///\\n    /// @param _withdrawAmount  The number of tokens to withdraw.\\n    /// @param _weightedWithdrawAmount The weighted withdraw amount\\n    function _withdraw(uint256 _withdrawAmount, uint256 _weightedWithdrawAmount) internal {\\n        Pool.Data storage _pool = pool.get();\\n        Stake.Data storage _stake = _stakes[msg.sender];\\n\\n        _pool.totalDeposited = _pool.totalDeposited.sub(_withdrawAmount);\\n        _stake.totalDeposited = _stake.totalDeposited.sub(_withdrawAmount);\\n        _pool.totalDepositedWeight = _pool.totalDepositedWeight.sub(_weightedWithdrawAmount);\\n        _stake.totalDepositedWeight = _stake.totalDepositedWeight.sub(_weightedWithdrawAmount);\\n\\n        _pool.token.transfer(msg.sender, _withdrawAmount);\\n\\n        emit TokensWithdrawn(msg.sender, _withdrawAmount, _weightedWithdrawAmount);\\n    }\\n\\n    /// @dev Claims all rewarded tokens from a pool.\\n    ///\\n    /// The pool and stake MUST be updated before calling this function.\\n    ///\\n    /// @notice use this function to claim the tokens from a corresponding pool by ID.\\n    function _claim() internal {\\n        Stake.Data storage _stake = _stakes[msg.sender];\\n\\n        uint256 _claimAmount = _stake.totalUnclaimed;\\n        _stake.totalUnclaimed = 0;\\n\\n        reward.transfer(msg.sender, _claimAmount);\\n\\n        emit TokensClaimed(msg.sender, _claimAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Staking/libraries/FixedPointMath.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\nlibrary FixedPointMath {\\n    uint256 public constant DECIMALS = 18;\\n    uint256 public constant SCALAR = 10**DECIMALS;\\n\\n    struct uq192x64 {\\n        uint256 x;\\n    }\\n\\n    function fromU256(uint256 value) internal pure returns (uq192x64 memory) {\\n        uint256 x;\\n        require(value == 0 || (x = value * SCALAR) / SCALAR == value);\\n        return uq192x64(x);\\n    }\\n\\n    function maximumValue() internal pure returns (uq192x64 memory) {\\n        return uq192x64(uint256(-1));\\n    }\\n\\n    function add(uq192x64 memory self, uq192x64 memory value) internal pure returns (uq192x64 memory) {\\n        uint256 x;\\n        require((x = self.x + value.x) >= self.x);\\n        return uq192x64(x);\\n    }\\n\\n    function add(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\\n        return add(self, fromU256(value));\\n    }\\n\\n    function sub(uq192x64 memory self, uq192x64 memory value) internal pure returns (uq192x64 memory) {\\n        uint256 x;\\n        require((x = self.x - value.x) <= self.x);\\n        return uq192x64(x);\\n    }\\n\\n    function sub(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\\n        return sub(self, fromU256(value));\\n    }\\n\\n    function mul(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\\n        uint256 x;\\n        require(value == 0 || (x = self.x * value) / value == self.x);\\n        return uq192x64(x);\\n    }\\n\\n    function div(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\\n        require(value != 0);\\n        return uq192x64(self.x / value);\\n    }\\n\\n    function cmp(uq192x64 memory self, uq192x64 memory value) internal pure returns (int256) {\\n        if (self.x < value.x) {\\n            return -1;\\n        }\\n\\n        if (self.x > value.x) {\\n            return 1;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function decode(uq192x64 memory self) internal pure returns (uint256) {\\n        return self.x / SCALAR;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Staking/libraries/boostPools/Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport {FixedPointMath} from \\\"../FixedPointMath.sol\\\";\\n\\n/// @title Pool\\n///\\n/// @dev A library which provides the Pool data struct and associated functions.\\nlibrary Pool {\\n    using FixedPointMath for FixedPointMath.uq192x64;\\n    using Pool for Pool.Data;\\n    using SafeMath for uint256;\\n\\n    struct Context {\\n        uint256 rewardRate;\\n    }\\n\\n    struct Data {\\n        IERC20 token;\\n        uint256 totalDeposited;\\n        uint256 totalDepositedWeight;\\n        FixedPointMath.uq192x64 accumulatedRewardWeight;\\n        uint256 lastUpdatedBlock;\\n    }\\n\\n    /// @dev Updates the pool.\\n    ///\\n    /// @param _ctx the pool context.\\n    function update(Data storage _data, Context storage _ctx) internal {\\n        _data.accumulatedRewardWeight = _data.getUpdatedAccumulatedRewardWeight(_ctx);\\n        _data.lastUpdatedBlock = block.number;\\n    }\\n\\n    /// @dev distribute rewards to other users.\\n    ///\\n    /// @param _distributeAmount the amount will be distributed.\\n    function distribute(Data storage _data, uint256 _distributeAmount) internal {\\n        FixedPointMath.uq192x64 memory distributeAmount = FixedPointMath.fromU256(_distributeAmount).div(_data.totalDepositedWeight);\\n        _data.accumulatedRewardWeight = _data.accumulatedRewardWeight.add(distributeAmount);\\n    }\\n\\n    /// @dev Gets the accumulated reward weight of a pool.\\n    ///\\n    /// @param _ctx the pool context.\\n    ///\\n    /// @return the accumulated reward weight.\\n    function getUpdatedAccumulatedRewardWeight(Data storage _data, Context storage _ctx) internal view returns (FixedPointMath.uq192x64 memory) {\\n        if (_data.totalDeposited == 0) {\\n            return _data.accumulatedRewardWeight;\\n        }\\n\\n        uint256 _elapsedTime = block.number.sub(_data.lastUpdatedBlock);\\n        if (_elapsedTime == 0) {\\n            return _data.accumulatedRewardWeight;\\n        }\\n\\n        uint256 _distributeAmount = _ctx.rewardRate.mul(_elapsedTime);\\n\\n        if (_distributeAmount == 0) {\\n            return _data.accumulatedRewardWeight;\\n        }\\n\\n        FixedPointMath.uq192x64 memory _rewardWeight = FixedPointMath.fromU256(_distributeAmount).div(_data.totalDepositedWeight);\\n        return _data.accumulatedRewardWeight.add(_rewardWeight);\\n    }\\n\\n    /// @dev Adds an element to the list.\\n    function set(Data storage _self, IERC20 _token) internal {\\n        _self.token = _token;\\n        _self.totalDeposited = 0;\\n        _self.totalDepositedWeight = 0;\\n        _self.accumulatedRewardWeight = FixedPointMath.uq192x64(0);\\n        _self.lastUpdatedBlock = block.number;\\n    }\\n\\n    /// @dev Gets an element from the list.\\n    ///\\n    /// @return the element at the specified index.\\n    function get(Data storage _self) internal view returns (Data storage) {\\n        return _self;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Staking/libraries/boostPools/Stake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport {FixedPointMath} from \\\"../FixedPointMath.sol\\\";\\nimport {Pool} from \\\"./Pool.sol\\\";\\n\\n/// @title Stake\\n///\\n/// @dev A library which provides the Stake data struct and associated functions.\\nlibrary Stake {\\n    using FixedPointMath for FixedPointMath.uq192x64;\\n    using Pool for Pool.Data;\\n    using SafeMath for uint256;\\n    using Stake for Stake.Data;\\n\\n    struct Data {\\n        uint256 totalDeposited;\\n        uint256 totalDepositedWeight;\\n        uint256 totalUnclaimed;\\n        FixedPointMath.uq192x64 lastAccumulatedWeight;\\n    }\\n\\n    function update(\\n        Data storage _self,\\n        Pool.Data storage _pool,\\n        Pool.Context storage _ctx\\n    ) internal {\\n        _self.totalUnclaimed = _self.getUpdatedTotalUnclaimed(_pool, _ctx);\\n        _self.lastAccumulatedWeight = _pool.getUpdatedAccumulatedRewardWeight(_ctx);\\n    }\\n\\n    function getUpdatedTotalUnclaimed(\\n        Data storage _self,\\n        Pool.Data storage _pool,\\n        Pool.Context storage _ctx\\n    ) internal view returns (uint256) {\\n        FixedPointMath.uq192x64 memory _currentAccumulatedWeight = _pool.getUpdatedAccumulatedRewardWeight(_ctx);\\n        FixedPointMath.uq192x64 memory _lastAccumulatedWeight = _self.lastAccumulatedWeight;\\n\\n        if (_currentAccumulatedWeight.cmp(_lastAccumulatedWeight) == 0) {\\n            return _self.totalUnclaimed;\\n        }\\n\\n        uint256 _distributedAmount = _currentAccumulatedWeight.sub(_lastAccumulatedWeight).mul(_self.totalDepositedWeight).decode();\\n\\n        return _self.totalUnclaimed.add(_distributedAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"CooldownPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimEnd\",\"type\":\"uint256\"}],\"name\":\"CooldownStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"GovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weighted\",\"type\":\"uint256\"}],\"name\":\"LockTimeWeightedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"PenaltyPercentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernance\",\"type\":\"address\"}],\"name\":\"PendingGovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"}],\"name\":\"RewardRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weightedAmount\",\"type\":\"uint256\"}],\"name\":\"TokensDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weightedAmount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_RESOLUTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimImmediately\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_donateAmount\",\"type\":\"uint256\"}],\"name\":\"donateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLockTimeWeightedByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weighted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockTimeWeightedListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolTotalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolTotalDepositedWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getStakeTotalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getStakeTotalDepositedWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getStakeTotalUnclaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getStakeTotalUnclaimedImmediately\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getUserClaimPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositOrderByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiredTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weighted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWithdraw\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getUserOrderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cooldownPeriod\",\"type\":\"uint256\"}],\"name\":\"setCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weighted\",\"type\":\"uint256\"}],\"name\":\"setLockTimeWeighted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_penaltyPercent\",\"type\":\"uint256\"}],\"name\":\"setPenaltyPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernance\",\"type\":\"address\"}],\"name\":\"setPendingGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startCoolDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userDepositedOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiredTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weighted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWithdraw\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userOrderCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_index\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BoostPool", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000758d08864fb6cce3062667225ca10b8f00496cc2000000000000000000000000758d08864fb6cce3062667225ca10b8f00496cc2000000000000000000000000b4247b0010f269ebaf9ad87d3bbb53431a0f333a", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}