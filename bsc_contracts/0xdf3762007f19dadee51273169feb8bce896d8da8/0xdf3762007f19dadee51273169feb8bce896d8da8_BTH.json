{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BTH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts@4.9/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts@4.9/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts@4.9/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n\\r\\ncontract BTH is ERC20,Ownable{ \\r\\n    using SafeMath for uint256;\\r\\n    struct UserInfo{\\r\\n        address inviter;                \\r\\n        uint256 ethAmount;              \\r\\n        uint256 rewardBalance;          \\r\\n        uint256 releaseWETHBalance;     \\r\\n        uint256 nextRelease;            \\r\\n        uint256 pendingTeamRewards;\\r\\n        uint256 lastRewardBlock;\\r\\n        uint256 shareActiveNums;\\r\\n        uint256 teamAmount;        \\r\\n    }\\r\\n\\r\\n    bool inSwap;\\r\\n\\r\\n    modifier swapping(){\\r\\n        inSwap=true;\\r\\n        _;\\r\\n        inSwap=false;\\r\\n    }\\r\\n\\r\\n    uint256[] public shareRateList;\\r\\n    uint256[] public teamRateList;\\r\\n\\r\\n    uint256 public tokenId;\\r\\n\\r\\n    uint256 public sosAmount;\\r\\n\\r\\n    ISwapRouter public SwapRouter;\\r\\n    IWETH public WETH;          \\r\\n    IERC20 public USDT;          \\r\\n    IFund public NFTFund;\\r\\n    mapping(address=>bool) public isExcludeFee;\\r\\n    mapping(address=>bool) public automatedMarketMakerPairs;\\r\\n\\r\\n    AutoSwap public autoSwap;\\r\\n    AutoSwap public autoSwapFund;\\r\\n\\r\\n    address public foundation;\\r\\n    INonfungiblePositionManager public V3Manage;\\r\\n           \\r\\n    address public sosAddress; \\r\\n    IV3CALC public v3_position_calc;\\r\\n    \\r\\n    bool public isStartup;\\r\\n    bool public isEnableInviter;\\r\\n    bool public isEnableBuy;\\r\\n    mapping(address=>mapping(address=>bool)) public bindState;\\r\\n\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n\\r\\n    event Deposit(address from,uint256 amount);\\r\\n\\r\\n    event Finished(address from,uint256 amount);\\r\\n    \\r\\n    event ShareReward(address shareUser,address rewardUser,uint256 amount);\\r\\n\\r\\n    event BindUser(address from,address inviter);\\r\\n\\r\\n    event Reward(address from ,uint256 bnbAmount,uint256 bthAmount);\\r\\n\\r\\n    event TeamReward(address from,address claimUser,uint256 rewardAmount,bool isShare);\\r\\n    \\r\\n    constructor()ERC20(\\\"BTH-ERC20\\\", \\\"BTH\\\") {\\r\\n        shareRateList = [20,10,10,5,5];\\r\\n        teamRateList =  [10,10,10,5,5,5,5,5,5,5];\\r\\n        foundation=0x10c83b9eE5037DbE4D3138643771E3C281bf3D31;\\r\\n\\r\\n        isExcludeFee[foundation]=true;\\r\\n\\r\\n        _mint(foundation,3000000e18);\\r\\n\\r\\n        _mint(address(this),17999000e18); \\r\\n        \\r\\n        _mint(0xA515515e9Ee61a8995b6b287b776eff65720A5D3,1000e18);\\r\\n\\r\\n        sosAddress=0x0305Fe450428D2723E3b1783bBCFCA6EAC8Fa7ed;                                                                 \\r\\n\\r\\n        WETH=IWETH(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);                                 \\r\\n        \\r\\n        USDT=IERC20(0x55d398326f99059fF775485246999027B3197955);                                \\r\\n        \\r\\n        NFTFund=IFund(0x490E1C570539CFc8374C9D86eB4DcCF828AC19E1);                              \\r\\n\\r\\n        SwapRouter=ISwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);                     \\r\\n\\r\\n        V3Manage = INonfungiblePositionManager(0x46A15B0b27311cedF172AB29E4f4766fbE7F4364);     \\r\\n        \\r\\n        v3_position_calc = IV3CALC(0xdB8e871731789D40aC3CF2690Dba486B68bF3F9C);                \\r\\n\\r\\n        tokenId=311746;\\r\\n\\r\\n        address factory=SwapRouter.factory();\\r\\n        \\r\\n        address usdtPair = ISwapFactory(factory).createPair(address(this),address(USDT));\\r\\n\\r\\n        address bnbPair =ISwapFactory(factory).createPair(address(this),address(WETH));\\r\\n\\r\\n        automatedMarketMakerPairs[usdtPair]=true;\\r\\n\\r\\n        automatedMarketMakerPairs[bnbPair]=true;\\r\\n\\r\\n        autoSwap = new AutoSwap(address(this));\\r\\n\\r\\n        autoSwapFund=new AutoSwap(address(this));\\r\\n\\r\\n        userInfo[0xA515515e9Ee61a8995b6b287b776eff65720A5D3].inviter = 0xC80eB15e2d68695DE2A4366Fb22A250290388004;\\r\\n\\r\\n        WETH.approve(address(SwapRouter), type(uint256).max);\\r\\n\\r\\n        _approve(address(this), address(SwapRouter), type(uint256).max);\\r\\n\\r\\n    }\\r\\n\\r\\n    receive() external payable{\\r\\n        address sender = msg.sender;\\r\\n        uint256 ethAmount = msg.value; \\r\\n        bool isBot = isContract(sender);  \\r\\n        if(isBot  || (tx.origin != sender)){\\r\\n            return;\\r\\n        }\\r\\n        require(isStartup,\\\"BTH-ERC20: Not yet open\\\");\\r\\n\\r\\n        UserInfo storage user=userInfo[sender];\\r\\n\\r\\n        require(user.ethAmount ==0&&user.rewardBalance==0,\\\"BTH-ERC20: Deposit exsists\\\");\\r\\n        require(ethAmount >= 1e18,\\\"BTH-ERC20: pass 1 eth\\\");\\r\\n\\r\\n        address parent=user.inviter;\\r\\n        \\r\\n        if(parent != address(0)){\\r\\n            UserInfo storage parentUser=userInfo[parent];\\r\\n            parentUser.shareActiveNums+=1;\\r\\n            parentUser.teamAmount+=ethAmount;\\r\\n\\r\\n            uint256[] memory rateList=shareRateList;\\r\\n            uint256 rewardAmount=ethAmount.mul(rateList[0]).div(1000);\\r\\n            \\r\\n            if(rewardAmount>=parentUser.rewardBalance){\\r\\n                payable(parent).transfer(parentUser.rewardBalance);\\r\\n                payable(sosAddress).transfer(rewardAmount.sub(parentUser.rewardBalance));\\r\\n                emit ShareReward(sender,parent,parentUser.rewardBalance);\\r\\n                finished(parent);\\r\\n            }else{\\r\\n                payable(parent).transfer(rewardAmount);\\r\\n                parentUser.rewardBalance-=rewardAmount;\\r\\n                emit ShareReward(sender,parent,rewardAmount);\\r\\n            }\\r\\n\\r\\n            for(uint i=1;i<5;i++){\\r\\n                parent=parentUser.inviter;\\r\\n                rewardAmount=ethAmount.mul(rateList[i]).div(1000);\\r\\n\\r\\n                if(parent == address(0)){\\r\\n                    payable(sosAddress).transfer(rewardAmount);\\r\\n                    continue;\\r\\n                }\\r\\n                \\r\\n                parentUser=userInfo[parent];\\r\\n                parentUser.teamAmount+=ethAmount;\\r\\n                \\r\\n                if(parentUser.rewardBalance>0){\\r\\n                    if(rewardAmount>=parentUser.rewardBalance){\\r\\n                        payable(parent).transfer(parentUser.rewardBalance);\\r\\n                        payable (sosAddress).transfer(rewardAmount.sub(parentUser.rewardBalance));\\r\\n                        emit ShareReward(sender,parent,parentUser.rewardBalance);\\r\\n                        finished(parent);\\r\\n                    }else{\\r\\n                        payable(parent).transfer(rewardAmount);\\r\\n                        parentUser.rewardBalance-=rewardAmount;\\r\\n                        emit ShareReward(sender,parent,rewardAmount);\\r\\n                    }\\r\\n                }else{\\r\\n                    payable(sosAddress).transfer(rewardAmount);\\r\\n                }\\r\\n                \\r\\n            }\\r\\n        \\r\\n            for(uint256 i=0;i<50;i++){\\r\\n                if(parent ==address(0)){\\r\\n                    break;\\r\\n                }\\r\\n\\r\\n                parentUser.teamAmount+=ethAmount;\\r\\n                parent = parentUser.inviter;\\r\\n                parentUser=userInfo[parent];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        user.ethAmount=ethAmount;\\r\\n        user.releaseWETHBalance=ethAmount.mul(79).div(100);     \\r\\n        user.rewardBalance=ethAmount.mul(150).div(100);\\r\\n        user.nextRelease=ethAmount.div(100); \\r\\n        user.lastRewardBlock=block.number;\\r\\n\\r\\n        WETH.deposit{value:user.nextRelease}();\\r\\n\\r\\n        swapWETHToBTH(user.nextRelease);\\r\\n                \\r\\n        NFTFund.fund{value:ethAmount.div(10)}();\\r\\n\\r\\n        payable(0x57c8E60641F283Fa40098189f9241dd6EA4A9329).transfer(ethAmount.div(20));\\r\\n\\r\\n        uint256 WETHBalance = address(this).balance;\\r\\n        \\r\\n        if(WETHBalance>0){\\r\\n            (uint128 lpAmount,,uint256 amount1) = V3Manage.increaseLiquidity{value: WETHBalance}(INonfungiblePositionManager.IncreaseLiquidityParams({\\r\\n                tokenId:tokenId,\\r\\n                amount0Desired:0,\\r\\n                amount1Desired:WETHBalance,\\r\\n                amount0Min:0,\\r\\n                amount1Min:WETHBalance,\\r\\n                deadline:block.timestamp\\r\\n            }));\\r\\n\\r\\n            require(lpAmount>0 && amount1 == WETHBalance,\\\"DepositV3 Error\\\");\\r\\n        }\\r\\n        \\r\\n        emit Deposit(sender,ethAmount);\\r\\n    \\r\\n    }\\r\\n\\r\\n    function finished(address from) internal {\\r\\n        UserInfo storage user=userInfo[from];\\r\\n        \\r\\n        emit Finished(from,user.ethAmount);\\r\\n\\r\\n        user.ethAmount=0;\\r\\n        user.lastRewardBlock=0;\\r\\n        user.nextRelease=0;\\r\\n        user.pendingTeamRewards=0;\\r\\n        user.rewardBalance=0;\\r\\n\\r\\n        if(user.releaseWETHBalance>0){\\r\\n            sosAmount+=user.releaseWETHBalance;\\r\\n        }\\r\\n        user.releaseWETHBalance=0;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        require(from != to,\\\"BTH-ERC20: must from != to\\\");\\r\\n        require(amount >0 ,\\\"BTH-ERC20: must amount > 0\\\");\\r\\n        \\r\\n        if(inSwap || ((isExcludeFee[from]||isExcludeFee[to])&&!isStartup)){ \\r\\n            return super._transfer(from,to,amount);\\r\\n        }\\r\\n\\r\\n        if(automatedMarketMakerPairs[from]){\\r\\n            require(isEnableBuy,\\\"BTH-ERC20: Swap BTH Disabled\\\");\\r\\n            uint256 fees=amount.div(20);\\r\\n            super._transfer(from, address(autoSwapFund), fees);\\r\\n            return super._transfer(from,to,amount.sub(fees));\\r\\n        }else if(automatedMarketMakerPairs[to]){\\r\\n            uint256 fees=amount.div(20);\\r\\n            super._transfer(from, address(autoSwapFund), fees);\\r\\n            process();\\r\\n            return super._transfer(from,to,amount.sub(fees));\\r\\n        }else if(!isContract(from)&&to == address(this)){\\r\\n            reward(from);\\r\\n        }else{\\r\\n            doInviter(from,to);\\r\\n        }\\r\\n\\r\\n        super._transfer(from, to, amount);\\r\\n    }\\r\\n    \\r\\n\\r\\n    function doInviter(address from,address to) internal {\\r\\n        UserInfo memory fromUser=userInfo[from];\\r\\n        UserInfo memory toUser=userInfo[to];\\r\\n        if(isContract(from)||isContract(to)||!isEnableInviter){\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if(toUser.inviter == address(0)&&fromUser.inviter !=address(0)){\\r\\n            bindState[from][to] = true;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if(fromUser.inviter == address(0)&&toUser.inviter !=address(0)&&bindState[to][from]){\\r\\n            userInfo[from].inviter = to;\\r\\n            emit BindUser(from,to);\\r\\n        }\\r\\n        \\r\\n    }\\r\\n\\r\\n\\r\\n    function process() internal swapping {\\r\\n        uint256 totalAmount=balanceOf(address(autoSwapFund));\\r\\n        super._transfer(address(autoSwapFund), address(this), totalAmount);\\r\\n        super._transfer(address(this), address(0xDead), totalAmount.div(5));\\r\\n\\r\\n        uint256 swapAmount = totalAmount.mul(3).div(5);\\r\\n        \\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = address(WETH);\\r\\n\\r\\n        SwapRouter.swapExactTokensForTokens(swapAmount,0,path,address(autoSwap),block.timestamp);\\r\\n\\r\\n        uint256 wethAmount= WETH.balanceOf(address(autoSwap));\\r\\n\\r\\n        autoSwap.withdraw(WETH, address(this), wethAmount);\\r\\n\\r\\n        SwapRouter.addLiquidity(address(WETH), address(this) , wethAmount, totalAmount.div(5), 0, 0, 0x66aDD9Dd2dc3aAAff708bEaDb1219A5305C7C10e, block.timestamp);\\r\\n        \\r\\n        wethAmount=WETH.balanceOf(address(this));\\r\\n        \\r\\n        WETH.withdraw(wethAmount);\\r\\n        uint256 halfAmount=wethAmount.div(2);\\r\\n        payable(0xcad734be9eCAa4a90DB7A5E857701C106d4B90d9).transfer(halfAmount);\\r\\n        NFTFund.fund{value:halfAmount}();\\r\\n    }\\r\\n\\r\\n    function reward(address from) internal {\\r\\n        address sender = msg.sender;\\r\\n        require(sender == from && sender == tx.origin,\\\"BTH-ERC20: Bot Warning\\\");  \\r\\n        UserInfo storage fromUser=userInfo[from];\\r\\n\\r\\n        uint256 ethAmount = fromUser.ethAmount;\\r\\n        \\r\\n        require(ethAmount>0,\\\"BTH-ERC20: Insufficient Deposit Amount\\\");\\r\\n\\r\\n        require(fromUser.lastRewardBlock>0&&block.number>fromUser.lastRewardBlock+28800,\\\"BTH-ERC20: Insufficient Reward Time\\\");\\r\\n\\r\\n        uint256 subDay = block.number.sub(fromUser.lastRewardBlock).div(28800);\\r\\n\\r\\n        uint256 staticPending = ethAmount.mul(subDay).mul(15).div(1000);\\r\\n\\r\\n        uint256 rewardPending=staticPending.add(fromUser.pendingTeamRewards);\\r\\n        \\r\\n        if(fromUser.releaseWETHBalance>0){\\r\\n            \\r\\n            uint256 releaseAmount=fromUser.nextRelease.mul(subDay);\\r\\n            if(releaseAmount>fromUser.releaseWETHBalance){\\r\\n                releaseAmount=fromUser.releaseWETHBalance;\\r\\n            }\\r\\n            releaseAndSwap(releaseAmount);\\r\\n            fromUser.releaseWETHBalance=fromUser.releaseWETHBalance.sub(releaseAmount);\\r\\n        }\\r\\n        \\r\\n\\r\\n        if(rewardPending>=fromUser.rewardBalance){\\r\\n            uint256 sendAmount=_getAmountsOut(fromUser.rewardBalance);\\r\\n            super._transfer(address(this), from, sendAmount);\\r\\n            emit Reward(from, fromUser.rewardBalance,sendAmount);\\r\\n            finished(from);\\r\\n            \\r\\n        }else{\\r\\n            uint256 sendAmount=_getAmountsOut(rewardPending);\\r\\n            super._transfer(address(this), from,sendAmount );\\r\\n            fromUser.rewardBalance=fromUser.rewardBalance.sub(rewardPending);\\r\\n            fromUser.lastRewardBlock=block.number;\\r\\n            emit Reward(from, rewardPending,sendAmount);\\r\\n        }\\r\\n        \\r\\n        rewardTeam(from,fromUser.inviter,staticPending);\\r\\n    }\\r\\n\\r\\n    function rewardTeam(address from,address inviter,uint256 rewardAmount) internal {\\r\\n    \\r\\n        uint256[] memory rateList=teamRateList;\\r\\n\\r\\n        uint256 currSpendRate=0;\\r\\n        \\r\\n        for(uint8 i=0;i<50;i++){\\r\\n            if(inviter == address(0)){\\r\\n                break;\\r\\n            }\\r\\n            UserInfo storage parent=userInfo[inviter];\\r\\n        \\r\\n            if(parent.rewardBalance==0){\\r\\n                continue ;\\r\\n            }\\r\\n\\r\\n            if(i<10&&i<parent.shareActiveNums&&parent.ethAmount>0){\\r\\n                uint256 shareRewars = rewardAmount.mul(rateList[i]).div(100);\\r\\n                parent.pendingTeamRewards+= shareRewars;\\r\\n                emit TeamReward(from, inviter, shareRewars,true);\\r\\n            }\\r\\n            \\r\\n            uint256 teamReward;\\r\\n            if(parent.teamAmount >= 100000e18){\\r\\n                teamReward = rewardAmount * (50 - currSpendRate) / 100;\\r\\n                parent.pendingTeamRewards+=teamReward;\\r\\n                emit TeamReward(from, inviter, teamReward,false);\\r\\n                break;\\r\\n            }else if(parent.teamAmount >= 50000e18&&currSpendRate<45){\\r\\n                teamReward = rewardAmount * (45 - currSpendRate) / 100;\\r\\n                currSpendRate=45;\\r\\n            }else if(parent.teamAmount >= 20000e18&&currSpendRate<40){\\r\\n                teamReward = rewardAmount * (40 - currSpendRate) / 100;\\r\\n                currSpendRate=40;\\r\\n            }else if(parent.teamAmount >= 10000e18&&currSpendRate<35){\\r\\n                teamReward = rewardAmount * (35 - currSpendRate) / 100;\\r\\n                currSpendRate=35;\\r\\n            }else if(parent.teamAmount >= 5000e18&&currSpendRate<30){\\r\\n                teamReward = rewardAmount * (30 - currSpendRate) / 100;\\r\\n                currSpendRate=30;\\r\\n            }else if(parent.teamAmount >= 2000e18&&currSpendRate<25){\\r\\n                teamReward = rewardAmount * (25 - currSpendRate) / 100;\\r\\n                currSpendRate=25;\\r\\n            }else if(parent.teamAmount >= 1000e18&&currSpendRate<20){\\r\\n                teamReward = rewardAmount * (20 - currSpendRate) / 100;\\r\\n                currSpendRate=20;\\r\\n            }else if(parent.teamAmount >= 500e18&&currSpendRate<15){\\r\\n                teamReward = rewardAmount * (15 - currSpendRate) / 100;\\r\\n                currSpendRate=15;\\r\\n            }else if(parent.teamAmount >= 200e18&&currSpendRate<10){\\r\\n                teamReward = rewardAmount * (10 - currSpendRate) / 100;\\r\\n                currSpendRate=10;\\r\\n            }else if(parent.teamAmount >= 50e18&&currSpendRate==0){\\r\\n                teamReward = rewardAmount/20;\\r\\n                currSpendRate=5;\\r\\n            }\\r\\n\\r\\n            if(teamReward>0){\\r\\n                parent.pendingTeamRewards+=teamReward;\\r\\n                emit TeamReward(from, inviter, teamReward,false);\\r\\n            }\\r\\n\\r\\n            inviter=parent.inviter;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    function releaseAndSwap(uint256 wethAmount) internal {\\r\\n\\r\\n        (,,,,,int24 tickLower,int24 tickUpper,uint128 liquidity,,,,) = V3Manage.positions(tokenId);\\r\\n\\r\\n        (,uint256 amountWETH) = IV3CALC(v3_position_calc).principal(0x36696169C63e42cd08ce11f5deeBbCeBae652050,tickLower,tickUpper,liquidity);\\r\\n\\r\\n        require(amountWETH >= wethAmount&&liquidity>0,\\\"BTH-ERC20:  Insufficient funds\\\");\\r\\n\\r\\n        uint256 calcRes = wethAmount * liquidity / amountWETH;\\r\\n\\r\\n        uint128 deLpAmunt = uint128(calcRes)+1;\\r\\n        \\r\\n        if(deLpAmunt>liquidity){\\r\\n            deLpAmunt = liquidity;\\r\\n        }\\r\\n\\r\\n        (,uint256 weth2) = V3Manage.decreaseLiquidity(INonfungiblePositionManager.DecreaseLiquidityParams({\\r\\n             tokenId:tokenId,\\r\\n             liquidity:deLpAmunt,\\r\\n             amount0Min:0,\\r\\n             amount1Min:0,\\r\\n             deadline:block.timestamp\\r\\n        }));\\r\\n\\r\\n        require(weth2>0,\\\"BTH-ERC20: Insufficient position\\\");\\r\\n        V3Manage.collect(INonfungiblePositionManager.CollectParams({\\r\\n            tokenId:tokenId,\\r\\n            recipient:address(this),\\r\\n            amount0Max:340282366920938463463374607431768211455,\\r\\n            amount1Max:340282366920938463463374607431768211455\\r\\n        }));\\r\\n\\r\\n        swapWETHToBTH(weth2);\\r\\n        \\r\\n    }\\r\\n\\r\\n    function swapWETHToBTH(uint256 wethAmount) internal swapping returns(uint256){\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(WETH);                                   \\r\\n        path[1] = address(this);\\r\\n\\r\\n        SwapRouter.swapExactTokensForTokens(wethAmount,0,path,address(autoSwap),block.timestamp);\\r\\n        uint256 bthAmount=balanceOf(address(autoSwap));\\r\\n        super._transfer(address(autoSwap), address(this), bthAmount);\\r\\n\\r\\n        return bthAmount;\\r\\n    }\\r\\n\\r\\n    function _getAmountsOut(uint256 ethAmount) internal view returns(uint256){\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(WETH);\\r\\n        path[1] = address(this);\\r\\n        uint256[] memory amounts = ISwapRouter(SwapRouter).getAmountsOut(ethAmount, path);\\r\\n        return amounts[1];\\r\\n    }\\r\\n    \\r\\n    function sosBuy(uint256 amount) external {\\r\\n        require(sosAmount>=amount,\\\"BTH-ERC20: err amount\\\"); \\r\\n        require(msg.sender==sosAddress,\\\"BTH-ERC20: err permission\\\"); \\r\\n        \\r\\n        WETH.approve(address(SwapRouter), type(uint256).max);\\r\\n        _approve(address(this), address(SwapRouter), type(uint256).max);\\r\\n\\r\\n        releaseAndSwap(amount);\\r\\n        sosAmount-=amount;\\r\\n    }\\r\\n\\r\\n    function startup() public onlyOwner{\\r\\n        require(!isStartup,\\\"BTH-ERC20: inviter started\\\");\\r\\n        isStartup = true;\\r\\n    }\\r\\n\\r\\n    function enableInviter() public onlyOwner{\\r\\n        require(!isEnableInviter,\\\"BTH-ERC20: inviter started\\\");\\r\\n        isEnableInviter = true;\\r\\n    }\\r\\n\\r\\n    function enableBuy() public {\\r\\n        require(msg.sender==sosAddress,\\\"BTH-ERC20: err permission\\\"); \\r\\n        require(!isEnableBuy,\\\"BTH-ERC20: err status\\\");\\r\\n        isEnableBuy=true;\\r\\n    }\\r\\n\\r\\n    function withdrawV3NFT(address to) external onlyOwner{\\r\\n        V3Manage.transferFrom(address(this), to, tokenId);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ninterface IFund {\\r\\n    function fund() external payable;\\r\\n}\\r\\n\\r\\ninterface ISwapPair {\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n}\\r\\n\\r\\ninterface ISwapRouter {\\r\\n    function factory() external pure returns (address);\\r\\n    function swapExactETHForTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n}\\r\\n\\r\\ninterface ISwapFactory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\\r\\n\\r\\ncontract AutoSwap{\\r\\n    address owner;\\r\\n    constructor(address _owner){\\r\\n        owner=_owner;\\r\\n    }\\r\\n\\r\\n    function withdraw(IERC20 token,address to,uint256 amount) external {\\r\\n        require(msg.sender==owner,\\\"AutoSwap: permission err\\\");\\r\\n        token.transfer(to,amount);\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface INonfungiblePositionManager is IERC721{\\r\\n\\r\\n    struct DecreaseLiquidityParams {\\r\\n        uint256 tokenId;\\r\\n        uint128 liquidity;\\r\\n        uint256 amount0Min;\\r\\n        uint256 amount1Min;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    struct IncreaseLiquidityParams {\\r\\n        uint256 tokenId;\\r\\n        uint256 amount0Desired;\\r\\n        uint256 amount1Desired;\\r\\n        uint256 amount0Min;\\r\\n        uint256 amount1Min;\\r\\n        uint256 deadline;\\r\\n    }\\r\\n\\r\\n    struct CollectParams {\\r\\n        uint256 tokenId;\\r\\n        address recipient;\\r\\n        uint128 amount0Max;\\r\\n        uint128 amount1Max;\\r\\n    }\\r\\n\\r\\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function increaseLiquidity(IncreaseLiquidityParams calldata params) external payable returns (uint128 liquidity,uint256 amount0,uint256 amount1);\\r\\n\\r\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n    function positions(uint256 tokenId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n        uint96 nonce,\\r\\n        address operator,\\r\\n        address token0,\\r\\n        address token1,\\r\\n        uint24 fee,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        uint128 liquidity,\\r\\n        uint256 feeGrowthInside0LastX128,\\r\\n        uint256 feeGrowthInside1LastX128,\\r\\n        uint128 tokensOwed0,\\r\\n        uint128 tokensOwed1\\r\\n    );\\r\\n}\\r\\n\\r\\ninterface IV3CALC{\\r\\n    function principal(\\r\\n        address pool,\\r\\n        int24 _tickLower,\\r\\n        int24 _tickUpper,\\r\\n        uint128 liquidity\\r\\n    ) external view returns (uint256 amount0, uint256 amount1);\\r\\n}\\r\\n\\r\\ninterface IWETH is IERC20{\\r\\n    function deposit() external payable ;\\r\\n    function withdraw(uint wad) external ;\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts@4.9/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"}],\"name\":\"BindUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Finished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bthAmount\",\"type\":\"uint256\"}],\"name\":\"Reward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"shareUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ShareReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isShare\",\"type\":\"bool\"}],\"name\":\"TeamReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NFTFund\",\"outputs\":[{\"internalType\":\"contract IFund\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SwapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"V3Manage\",\"outputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwap\",\"outputs\":[{\"internalType\":\"contract AutoSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoSwapFund\",\"outputs\":[{\"internalType\":\"contract AutoSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bindState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableInviter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"foundation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEnableBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEnableInviter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStartup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shareRateList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sosAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sosAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sosBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamRateList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseWETHBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextRelease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingTeamRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareActiveNums\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v3_position_calc\",\"outputs\":[{\"internalType\":\"contract IV3CALC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawV3NFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BTH", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c5dc3940315c435c6beabfca4959bfa711b1f5b385ee48cabed45e61bb615dba"}