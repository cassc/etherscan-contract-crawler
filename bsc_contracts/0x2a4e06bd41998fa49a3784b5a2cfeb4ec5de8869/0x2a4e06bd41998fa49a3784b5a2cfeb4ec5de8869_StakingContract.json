{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StakingContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title Staking Contract\\n/// @author Metalogics LTD. For queries contact@metalogics.io\\n/// @notice Implements the logic for Staking Contract\\n/// @dev Allows multiple users to stake tokens on multiple pools\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract StakingContract is Ownable, ReentrancyGuard {\\n    /// @notice APY % can not be a null value\\n    error InvalidStakeAPY();\\n\\n    /// @notice Provided unstake fee can not be a null value\\n    error InvalidUnstakeFee();\\n\\n    /// @notice Provided staking limit can not be a null value\\n    error InvalidStakingLimit();\\n\\n    /// @notice Provided validity period can not be a null value\\n    error InvalidPoolValidity();\\n\\n    /// @notice Reward allowance can not be a null value\\n    error InvalidAllowance();\\n\\n    /// @notice Pool does not exist for the provided token\\n    error PoolNotExists();\\n\\n    /// @notice Pool does not exist for the provided token\\n    error MinimumStakeAmount();\\n\\n    /// @notice The staked amount can not be zero value\\n    error InvalidStakeAmount();\\n\\n    /// @notice The minimum stake limit can not be zero value\\n    error InvalidMinStakeLimit();\\n\\n    /// @notice No amount is staked for particular user\\n    error NoAmountStaked();\\n\\n    /// @notice Last claim time should be less than current time\\n    error StatusAlreadySet();\\n\\n    /// @notice User already unstaked amount\\n    error AlreadyUnstaked();\\n\\n    /// @notice Staking already started\\n    error StakingStarted();\\n\\n    /// @notice Staking not started yet\\n    error StakingNotStarted();\\n\\n    /// @notice Thrown when provided address is in invalid format\\n    error InvalidAddress();\\n\\n    /// @notice Contract using the SafeMath library for uint256 arithmetic operations\\n    using SafeMath for uint256;\\n\\n    /// @notice Returns the fee wallet address where deducted fee is stored in wei\\n    address public feeWallet;\\n\\n    /// @notice Returns the total count of pool created by admin\\n    uint256 public poolCount;\\n\\n    /// @notice Constant variable initialized with the value 100\\n    uint256 constant HUNDRED = 100;\\n\\n    /// @member stakedAmount Amount of staked ERC20 tokens in wei\\n    /// @member stakedTime Time when user staked tokens in block.timestamp\\n    /// @member lastClaimTime Time when user last claimed earned rewards\\n    /// @member reward Latest calculated/claimed reward by user\\n    struct User {\\n        uint256 stakedAmount;\\n        uint256 stakedTime;\\n        uint256 reward;\\n        bool unstaked;\\n    }\\n\\n    /// @member poolName Name of staking token pool in string\\n    /// @member PID Pool ID\\n    /// @member stakeAPY The APY% of pool\\n    /// @member UNSTAKE_FEE Early unstaking fee percentage\\n    /// @member stakingToken Address of staking token\\n    /// @member rewardToken Address of rewarding tokens that will be transferred as reward\\n    /// @member stakingStartTime Staking start time of pool\\n    /// @member poolValidityPeriod Validity time of pool in block.timestamp for staking\\n    /// @member totalStakedAmount Total amount of tokens staked into the pool\\n    /// @member stakingStarted Boolean status for staking started or not\\n    /// @member unStakingPaused Boolean status for unStaking paused or not\\n    /// @member poolExists Boolean status for pool existence\\n    struct Pool {\\n        string poolName;\\n        uint256 PID;\\n        uint256 stakeAPY;\\n        uint256 UNSTAKE_FEE;\\n        uint256 minStakingLimit;\\n        address stakingToken;\\n        address rewardToken;\\n        uint256 stakingStartTime;\\n        uint256 poolValidityPeriod;\\n        uint256 totalStakedAmount;\\n        bool stakingStarted;\\n        bool unStakingPaused;\\n        bool poolExists;\\n    }\\n\\n    /* ========== STORAGE ========== */\\n\\n    mapping(uint256 => Pool) public pools;\\n    mapping(address => mapping(uint256 => mapping(uint256 => User)))\\n        public users;\\n    mapping(address => mapping(uint256 => uint256)) public stakerindex; // user => pid => stakerIndex\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Staked(address indexed user, address indexed token, uint256 amount);\\n    event UnStaked(address indexed user, address indexed token, uint256 amount);\\n    event RewardPaid(\\n        address indexed user,\\n        address indexed rewardToken,\\n        uint256 amount\\n    );\\n    event PoolAdded(\\n        string poolName,\\n        uint256 PID,\\n        uint256 stakeAPY,\\n        uint256 earlyUnstakeFee,\\n        address stakingToken,\\n        address rewardToken,\\n        uint256 poolValidityPeriod\\n    );\\n    event PoolUpdated(uint256 indexed poolId, uint256 newRewardPercentage);\\n    event UnstakeFeeUpdated(uint256 indexed poolId, uint256 newUnstakeFee);\\n    event MinStakeLimitUpdated(\\n        uint256 indexed poolId,\\n        uint256 newMinStakeLimit\\n    );\\n    event RewardAllowanceAdded(\\n        uint256 indexed poolId,\\n        uint256 additionalAllowance\\n    );\\n    event Deposit(address indexed sender, uint256 value);\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    /// @notice throws exeception when address is invalid\\n    modifier notNull(address _address) {\\n        if (_address == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        _;\\n    }\\n\\n    /// @notice throws exeception when staking started\\n    modifier stakingStarted(uint256 poolID) {\\n        if (pools[poolID].stakingStarted) {\\n            revert StakingStarted();\\n        }\\n        _;\\n    }\\n\\n    /// @notice throws exeception when staking not started\\n    modifier stakingNotStarted(uint256 poolID) {\\n        if (!pools[poolID].stakingStarted) {\\n            revert StakingNotStarted();\\n        }\\n        _;\\n    }\\n\\n    /// @notice throws exeception when unstaking is paused\\n    modifier whenUnstakingNotPaused(uint256 poolID) {\\n        require(!pools[poolID].unStakingPaused, \\\"Unstaking is paused\\\");\\n        _;\\n    }\\n\\n    /// @notice throws exeception when pool not exist for provided token address\\n    modifier poolNotExist(uint256 poolID) {\\n        Pool storage pool = pools[poolID];\\n        if (!pool.poolExists) {\\n            revert PoolNotExists();\\n        }\\n        _;\\n    }\\n\\n    /// @dev Constructor sets msg.sender as the owner\\n    constructor() Ownable() {}\\n\\n    /// @notice Allows to deposit ether\\n    receive() external payable {\\n        if (msg.value > 0) emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    /// @notice Allow the admin to pause/resume staking for stakers\\n    /// @param poolID Address of staking token/pool\\n    /// @param _status Boolean status i.e. true/false\\n    function pauseStaking(\\n        uint256 poolID,\\n        bool _status\\n    ) external onlyOwner poolNotExist(poolID) {\\n        Pool storage pool = pools[poolID];\\n        if (_status == pool.stakingStarted) {\\n            revert StatusAlreadySet();\\n        }\\n        pool.stakingStarted = _status;\\n    }\\n\\n    /// @notice Allow the admin to pause/resume unStaking for stakers\\n    /// @param poolID Pool ID\\n    /// @param _status Boolean status i.e. true/false\\n    function pauseUnstaking(uint256 poolID, bool _status) external onlyOwner poolNotExist(poolID) {\\n        Pool storage pool = pools[poolID];\\n        if (_status == pool.unStakingPaused) {\\n            revert StatusAlreadySet();\\n        }\\n        pool.unStakingPaused = _status;\\n    }\\n\\n    /// @notice Allow the admin to set wallet address for collection of deducted fee\\n    /// @param _feeWallet Address of wallet address\\n    function setFeeWallet(\\n        address _feeWallet\\n    ) external onlyOwner notNull(_feeWallet) {\\n        feeWallet = _feeWallet;\\n    }\\n\\n    /// @notice Allow users to stake tokens\\n    /// @param poolID Pool ID\\n    /// @param amount Amount of ERC20 staking token\\n    function stake(\\n        uint256 poolID,\\n        uint256 amount\\n    ) public poolNotExist(poolID) stakingNotStarted(poolID) nonReentrant {\\n        if (amount <= 0) {\\n            revert InvalidStakeAmount();\\n        }\\n        if (amount < pools[poolID].minStakingLimit) {\\n            revert MinimumStakeAmount();\\n        }\\n\\n        Pool storage pool = pools[poolID];\\n        address stakingToken = pool.stakingToken;\\n        uint256 userIndex = stakerindex[msg.sender][poolID];\\n        User storage user = users[msg.sender][poolID][userIndex];\\n\\n        IERC20(stakingToken).transferFrom(msg.sender, address(this), amount);\\n\\n        pool.totalStakedAmount += amount;\\n        user.stakedAmount = amount;\\n        user.stakedTime = block.timestamp;\\n\\n        stakerindex[msg.sender][poolID]++;\\n\\n        emit Staked(msg.sender, stakingToken, amount);\\n    }\\n\\n    /// @notice Calculates reward per second for staked amount\\n    /// @param poolID Pool ID\\n    /// @param user Staker Address\\n    /// @param index Staker index\\n    function calculateRewardPerSecond(\\n        uint256 poolID,\\n        address user,\\n        uint256 index\\n    ) public view poolNotExist(poolID) returns (uint256) {\\n        Pool storage pool = pools[poolID];\\n\\n        uint256 rewardAPY = pool.stakeAPY;\\n        uint256 poolValidity = pool.poolValidityPeriod;\\n\\n        return\\n            users[user][poolID][index]\\n                .stakedAmount\\n                .mul(rewardAPY)\\n                .div(HUNDRED)\\n                .div(poolValidity);\\n    }\\n\\n    /// @notice Allow staker to view earned rewards\\n    /// @param poolID Pool ID\\n    /// @param user Staker Address\\n    /// @param index Staker index\\n    function getRewards(\\n        uint256 poolID,\\n        address user,\\n        uint256 index,\\n        uint256 poolValidity\\n    ) public view returns (uint256) {\\n        User memory userStorage = users[msg.sender][poolID][index];\\n        uint256 currentTime = block.timestamp;\\n        uint256 lastClaimTime = userStorage.stakedTime;\\n\\n        uint256 compareTime = lastClaimTime.add(poolValidity);\\n        if (currentTime > compareTime) {\\n            currentTime = compareTime;\\n        }\\n\\n        uint256 elapsedTime = currentTime.sub(lastClaimTime);\\n\\n        uint256 rewardPerSecond = calculateRewardPerSecond(poolID, user, index);\\n        uint256 newReward = rewardPerSecond.mul(elapsedTime);\\n\\n        return newReward;\\n    }\\n\\n    /// @notice Transfer earned rewards to user while unstaking\\n    /// @param poolID Pool ID\\n    /// @param index Staker index\\n    function claimRewards(\\n        uint256 poolID,\\n        uint256 index\\n    ) internal poolNotExist(poolID) {\\n        Pool storage pool = pools[poolID];\\n        address sender = msg.sender;\\n\\n        User storage userStorage = users[sender][poolID][index];\\n\\n        uint256 stakedAmount = userStorage.stakedAmount;\\n        if (stakedAmount == 0) {\\n            revert NoAmountStaked();\\n        }\\n\\n        uint256 rewardAmount = getRewards(\\n            poolID,\\n            sender,\\n            index,\\n            pool.poolValidityPeriod\\n        );\\n        userStorage.reward = rewardAmount;\\n\\n        if (rewardAmount > 0) {\\n            address rewardToken = pool.rewardToken;\\n            IERC20(rewardToken).transfer(sender, rewardAmount);\\n\\n            emit RewardPaid(sender, rewardToken, rewardAmount);\\n        }\\n    }\\n\\n    /// @notice Allow staker to unstake the staked amount plus the earned reward\\n    /// @param poolID Pool ID\\n    /// @param index Staker index\\n    function unStake(\\n        uint256 poolID,\\n        uint256 index\\n    )\\n        external\\n        poolNotExist(poolID)\\n        whenUnstakingNotPaused(poolID)\\n        nonReentrant\\n    {\\n        //transfers earned reward tokens\\n        claimRewards(poolID, index);\\n\\n        Pool storage pool = pools[poolID];\\n        User storage user = users[msg.sender][poolID][index];\\n\\n        bool hasUserUnstaked = user.unstaked;\\n\\n        if (hasUserUnstaked) {\\n            revert AlreadyUnstaked();\\n        }\\n\\n        uint256 stakedAmount = user.stakedAmount;\\n        address stakedToken = pool.stakingToken;\\n        uint256 poolvalidityPeriod = pool.poolValidityPeriod;\\n        uint256 EarlyUnstakeFee = pool.UNSTAKE_FEE;\\n        uint256 userPoolValidity = user.stakedTime;\\n\\n        if (block.timestamp < userPoolValidity.add(poolvalidityPeriod)) {\\n            uint256 fee = stakedAmount.mul(EarlyUnstakeFee).div(HUNDRED);\\n            stakedAmount = stakedAmount.sub(fee);\\n\\n            if (feeWallet != address(0)) {\\n                IERC20(stakedToken).transfer(feeWallet, fee);\\n            }\\n        }\\n\\n        IERC20(stakedToken).transfer(msg.sender, stakedAmount);\\n\\n        pool.totalStakedAmount -= stakedAmount;\\n        user.unstaked = true;\\n\\n        emit UnStaked(msg.sender, stakedToken, stakedAmount);\\n    }\\n\\n    /// @notice Allow admin to create a staking pool\\n    /// @param stakeAPY The APY% of staking token\\n    /// @param earlyUnstakeFee Early unStaking deducted fee%\\n    /// @param minimumStakingLimit Minimunt amount limit to stake per pool\\n    /// @param stakingToken Address of staking token\\n    /// @param rewardToken Address of reward token\\n    /// @param poolValidityPeriod Expiry time of pool in unixtime-stamp\\n    /// @param allowanceAmount The rewarding token allowance\\n    function addPool(\\n        string memory poolName,\\n        uint256 stakeAPY,\\n        uint256 earlyUnstakeFee,\\n        uint256 minimumStakingLimit,\\n        address stakingToken,\\n        address rewardToken,\\n        uint256 poolValidityPeriod,\\n        uint256 allowanceAmount\\n    ) public onlyOwner returns (uint256 poolId) {\\n        if (stakeAPY <= 0) {\\n            revert InvalidStakeAPY();\\n        }\\n        if (allowanceAmount <= 0) {\\n            revert InvalidAllowance();\\n        }\\n        if (earlyUnstakeFee <= 0) {\\n            revert InvalidUnstakeFee();\\n        }\\n        if (minimumStakingLimit <= 0) {\\n            revert InvalidStakingLimit();\\n        }\\n        if (poolValidityPeriod <= 0) {\\n            revert InvalidPoolValidity();\\n        }\\n\\n        poolId = poolCount;\\n\\n        pools[poolId] = Pool({\\n            poolName: poolName,\\n            PID: poolId,\\n            stakeAPY: stakeAPY,\\n            UNSTAKE_FEE: earlyUnstakeFee,\\n            minStakingLimit: minimumStakingLimit,\\n            stakingToken: stakingToken,\\n            rewardToken: rewardToken,\\n            stakingStartTime: block.timestamp,\\n            poolValidityPeriod: poolValidityPeriod,\\n            totalStakedAmount: 0,\\n            stakingStarted: true,\\n            unStakingPaused: false,\\n            poolExists: true\\n        });\\n\\n        poolCount++;\\n\\n        // grant allowance to this contract for the rewarding token\\n        IERC20(rewardToken).transferFrom(\\n            msg.sender,\\n            address(this),\\n            allowanceAmount\\n        );\\n\\n        emit PoolAdded(\\n            poolName,\\n            poolId,\\n            stakeAPY,\\n            earlyUnstakeFee,\\n            stakingToken,\\n            rewardToken,\\n            poolValidityPeriod\\n        );\\n    }\\n\\n    /// @notice Allow admin to update minimum staking tokens limit\\n    /// @param poolId Pool ID\\n    /// @param _newLimit Updated minimum staking limit\\n    function updateMinStakeLimit(\\n        uint256 poolId,\\n        uint256 _newLimit\\n    ) public onlyOwner poolNotExist(poolId) {\\n        Pool storage pool = pools[poolId];\\n\\n        if (_newLimit <= 0) {\\n            revert InvalidMinStakeLimit();\\n        }\\n\\n        pool.minStakingLimit = _newLimit;\\n\\n        emit MinStakeLimitUpdated(poolId, _newLimit);\\n    }\\n\\n    /// @notice Allow admin to update a staking pool unstake Fee%\\n    /// @param poolId Pool ID\\n    /// @param newUnstakeFee New newUnstakeFee%\\n    function updateUnStakeFee(\\n        uint256 poolId,\\n        uint256 newUnstakeFee\\n    ) external onlyOwner poolNotExist(poolId) {\\n        if (newUnstakeFee <= 0) {\\n            revert InvalidUnstakeFee();\\n        }\\n\\n        pools[poolId].UNSTAKE_FEE = newUnstakeFee;\\n\\n        emit UnstakeFeeUpdated(poolId, newUnstakeFee);\\n    }\\n\\n    /// @notice Allow admin to update a staking pool APY%\\n    /// @param poolId Pool ID\\n    /// @param newRewardPercentage New APY% of staking token\\n    function updatePoolAPY(\\n        uint256 poolId,\\n        uint256 newRewardPercentage\\n    ) external onlyOwner poolNotExist(poolId) {\\n        if (newRewardPercentage <= 0) {\\n            revert InvalidStakeAPY();\\n        }\\n\\n        pools[poolId].stakeAPY = newRewardPercentage;\\n\\n        emit PoolUpdated(poolId, newRewardPercentage);\\n    }\\n\\n    /// @notice Allow admin to add more reward tokens to the pool after pool is created\\n    /// @param poolId Pool ID\\n    /// @param additionalAllowance Allowance amount of rewarding tokens\\n    function addRewardAllowance(\\n        uint256 poolId,\\n        uint256 additionalAllowance\\n    ) external onlyOwner poolNotExist(poolId) {\\n        if (additionalAllowance <= 0) {\\n            revert InvalidAllowance();\\n        }\\n\\n        Pool storage pool = pools[poolId];\\n\\n        IERC20(pool.rewardToken).transferFrom(\\n            msg.sender,\\n            address(this),\\n            additionalAllowance\\n        );\\n\\n        emit RewardAllowanceAdded(poolId, additionalAllowance);\\n    }\\n\\n    /// @notice Allow admin to withdraw reward tokens once the pool expires\\n    /// @param poolId Pool ID\\n    /// @param _withdrawAmount Amount of rewarding tokens\\n    function withdrawRewardAmount(\\n        uint256 poolId,\\n        uint256 _withdrawAmount\\n    ) public onlyOwner poolNotExist(poolId) {\\n        if (_withdrawAmount <= 0) {\\n            revert InvalidAllowance();\\n        }\\n\\n        Pool storage pool = pools[poolId];\\n\\n        uint256 contractBalance = IERC20(pool.rewardToken).balanceOf(\\n            address(this)\\n        );\\n        require(\\n            _withdrawAmount <= contractBalance,\\n            \\\"Contract: Insufficient reward balance\\\"\\n        );\\n\\n        IERC20(pool.rewardToken).transfer(msg.sender, _withdrawAmount);\\n    }\\n\\n    /// @notice Returns the token balance of contract\\n    /// @param token Address of token\\n    function contractTokenBalance(address token) public view returns (uint256) {\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000,\r\n      \"details\": {\r\n        \"yulDetails\": {\r\n          \"optimizerSteps\": \"u\"\r\n        }\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyUnstaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMinStakeLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPoolValidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakeAPY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakingLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUnstakeFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MinimumStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAmountStaked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakingStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StatusAlreadySet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinStakeLimit\",\"type\":\"uint256\"}],\"name\":\"MinStakeLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAPY\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earlyUnstakeFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolValidityPeriod\",\"type\":\"uint256\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardPercentage\",\"type\":\"uint256\"}],\"name\":\"PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"additionalAllowance\",\"type\":\"uint256\"}],\"name\":\"RewardAllowanceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newUnstakeFee\",\"type\":\"uint256\"}],\"name\":\"UnstakeFeeUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"stakeAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyUnstakeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumStakingLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolValidityPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowanceAmount\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additionalAllowance\",\"type\":\"uint256\"}],\"name\":\"addRewardAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"calculateRewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"contractTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolValidity\",\"type\":\"uint256\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"pauseStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"pauseUnstaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"poolName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"PID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UNSTAKE_FEE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minStakingLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolValidityPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stakingStarted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"unStakingPaused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"poolExists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakerindex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"updateMinStakeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRewardPercentage\",\"type\":\"uint256\"}],\"name\":\"updatePoolAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newUnstakeFee\",\"type\":\"uint256\"}],\"name\":\"updateUnStakeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unstaked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "StakingContract", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}