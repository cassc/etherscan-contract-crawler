{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\npragma experimental ABIEncoderV2;\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\r\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\r\n     *\r\n     * NOTE: To accept the transfer, this must return\r\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     * (i.e. 0xf23a6e61, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param id The ID of the token being transferred\r\n     * @param value The amount of tokens being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\r\n     * been updated.\r\n     *\r\n     * NOTE: To accept the transfer(s), this must return\r\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     * (i.e. 0xbc197c81, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the basic standard multi-token.\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n *\r\n * _Available since v3.1._\r\n */\r\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\r\n   // instance of datetime contract\r\n    \r\n    using Address for address;\r\n     \r\n    // Mapping from token ID to account balances\r\n    mapping(uint256 => mapping(address => uint256)) internal _balances;\r\n\r\n    // Mapping from account to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\r\n    string private _uri;\r\n    /// custom code used block tokens\r\n      struct safeCard{   \r\n        uint256 time;          \r\n        uint256 amount ;\r\n   }\r\n     //safeCard public card;\r\n     mapping(address => mapping( uint256  => safeCard ) ) public LockCard;\r\n     uint256 refDay;\r\n    /**\r\n     * @dev See {_setURI}.\r\n     */\r\n    constructor(string memory uri_) {\r\n        _setURI(uri_);\r\n       refDay = block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155MetadataURI-uri}.\r\n     *\r\n     * This implementation returns the same URI for *all* token types. It relies\r\n     * on the token type ID substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * Clients calling this function must replace the `\\{id\\}` substring with the\r\n     * actual token type ID.\r\n     */\r\n   function uri(uint256 id) public view virtual override returns (string memory) {\r\n        id;\r\n        return _uri;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\r\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\r\n        return _balances[id][account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOfBatch}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n        for (uint256 i = 0; i < accounts.length; ++i) {\r\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[account][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not owner nor approved\"\r\n        );\r\n        //custom code \r\n\r\n        _safeTransferFrom(from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: transfer caller is not owner nor approved\"\r\n        );\r\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n        _balances[id][to] += amount;\r\n \r\n      //custom code add blocked Ide\r\n        \r\n        _addBlock(to,id,amount);\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }\r\n\r\n function _addBlock(   \r\n        address account,\r\n        uint256 id,\r\n        uint256 amount\r\n        ) internal virtual{    \r\n        // ) public returns (uint256 initTime, uint256 newTime ){      \r\n             uint256 initTime;\r\n             uint256 newTime;\r\n             if(LockCard[account][id].time > 0 ){\r\n                initTime = (LockCard[account][id].time - refDay) / 1 days; //mro\r\n                newTime = (block.timestamp - refDay) / 1 days; \r\n\r\n               \r\n              if (  newTime > initTime  ){\r\n                 //reemplace due date\r\n                  LockCard[account][id].time = block.timestamp;\r\n                  LockCard[account][id].amount = amount;\r\n              \r\n                 }else{\r\n                         //add to active date \r\n                         LockCard[account][id].amount += amount;                                    \r\n              }\r\n         } else{\r\n              LockCard[account][id].time = block.timestamp;\r\n              LockCard[account][id].amount = amount;\r\n         }\r\n     }\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n \r\n        for (uint256 i = 0; i < ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n            _balances[id][to] += amount;\r\n            //custom code for block transfered cards\r\n            \r\n              _addBlock(to,id,amount);\r\n            \r\n        }\r\n\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new URI for all token types, by relying on the token type ID\r\n     * substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\r\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\r\n     * clients with the token type ID.\r\n     *\r\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\r\n     * interpreted by clients as\r\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\r\n     * for token type ID 0x4cce0.\r\n     *\r\n     * See {uri}.\r\n     *\r\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\r\n     * this function emits no events.\r\n     */\r\n    function _setURI(string memory newuri) internal virtual {\r\n        _uri = newuri;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mint(\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\r\n\r\n        _balances[id][to] += amount;\r\n        emit TransferSingle(operator, address(0), to, id, amount);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mintBatch(\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            _balances[ids[i]][to] += amounts[i];\r\n        }\r\n\r\n        emit TransferBatch(operator, address(0), to, ids, amounts);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens of token type `id` from `from`\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `from` must have at least `amount` tokens of token type `id`.\r\n     */\r\n    function _burn(\r\n        address from,\r\n        uint256 id,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n\r\n        emit TransferSingle(operator, from, address(0), id, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     */\r\n    function _burnBatch(\r\n        address from,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n        }\r\n\r\n        emit TransferBatch(operator, from, address(0), ids, amounts);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits a {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(\r\n        address owner,\r\n        address operator,\r\n        bool approved\r\n    ) internal virtual {\r\n        require(owner != operator, \"ERC1155: setting approval status for self\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning, as well as batched variants.\r\n     *\r\n     * The same hook is called on both single and batched variants. For single\r\n     * transfers, the length of the `id` and `amount` arrays will be 1.\r\n     *\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n     *\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * of token type `id` will be  transferred to `to`.\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n     * for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n     * will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\r\n                bytes4 response\r\n            ) {\r\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\r\n        uint256[] memory array = new uint256[](1);\r\n        array[0] = element;\r\n\r\n        return array;\r\n    }\r\n///  manual lock\r\n     mapping (address => uint256 ) public Mlock ;\r\n/// lock cards by events\r\n      function specialBlock(  \r\n        address account,\r\n        uint256 ids,\r\n        uint256 amount\r\n        )  public { \r\n                    \r\n          require( Mlock[msg.sender] == 1 ); \r\n            \r\n                _addBlock(account,ids,amount);\r\n           \r\n        }\r\n     \r\n}\r\n\r\n\r\ncontract mintDeck is ERC1155, Ownable {\r\n    \r\n\r\n    //// this store the relation betwen the card and id\r\n     mapping( string  => uint256 )  public ide; \r\n     mapping( uint256  => string  ) public ideName; \r\n     mapping( uint256  => uint256 ) private  _raririty; \r\n    \r\n    //Pool transfer\r\n    uint256 public poolIde; \r\n    \r\n    \r\n    constructor() ERC1155(\"https://app.lasthorde.com/NFTs/{id}.json\") {\r\n          poolIde = 0;         \r\n      createIde( \"1Skeleton\");\r\n          mint( msg.sender,\"1Skeleton\",7000,1);\r\n          createIde( \"1SkeletonV\");\r\n          mint( msg.sender,\"1SkeletonV\",230,2);\r\n          createIde( \"1SkeletonD\");\r\n          mint( msg.sender,\"1SkeletonD\",50,3);\r\n           createIde( \"1SkeletonR\");\r\n          mint( msg.sender,\"1SkeletonR\",15,4);\r\n           createIde( \"1SkeletonM\");\r\n          mint( msg.sender,\"1SkeletonM\",5,5);\r\n          createIde( \"AcidStorm\");\r\n          mint( msg.sender,\"AcidStorm\",700,1);\r\n          createIde( \"AcidStormV\");\r\n          mint( msg.sender,\"AcidStormV\",230,2);\r\n          createIde( \"AcidStormD\");\r\n          mint( msg.sender,\"AcidStormD\",50,3);\r\n           createIde( \"AcidStormR\");\r\n          mint( msg.sender,\"AcidStormR\",15,4);\r\n           createIde( \"AcidStormM\");\r\n          mint( msg.sender,\"AcidStormM\",5,5);         \r\n         createIde( \"Ademius\");\r\n          mint( msg.sender,\"Ademius\",700,1);\r\n          createIde( \"AdemiusV\");\r\n          mint( msg.sender,\"AdemiusV\",230,2);\r\n          createIde( \"AdemiusD\");\r\n          mint( msg.sender,\"AdemiusD\",50,3);\r\n           createIde( \"AdemiusR\");\r\n          mint( msg.sender,\"AdemiusR\",15,4);\r\n           createIde( \"AdemiusM\");\r\n          mint( msg.sender,\"AdemiusM\",5,5);\r\n          createIde( \"Adeom\");\r\n          mint( msg.sender,\"Adeom\",700,1);\r\n          createIde( \"AdeomV\");\r\n          mint( msg.sender,\"AdeomV\",230,2);\r\n          createIde( \"AdeomD\");\r\n          mint( msg.sender,\"AdeomD\",50,3);\r\n           createIde( \"AdeomR\");\r\n          mint( msg.sender,\"AdeomR\",15,4);\r\n           createIde( \"AdeomM\");\r\n          mint( msg.sender,\"AdeomM\",5,5);\r\n          createIde( \"Archer\");\r\n          mint( msg.sender,\"Archer\",700,1);\r\n          createIde( \"ArcherV\");\r\n          mint( msg.sender,\"ArcherV\",230,2);\r\n          createIde( \"ArcherD\");\r\n          mint( msg.sender,\"ArcherD\",50,3);\r\n           createIde( \"ArcherR\");\r\n          mint( msg.sender,\"ArcherR\",15,4);\r\n           createIde( \"ArcherM\");\r\n          mint( msg.sender,\"ArcherM\",5,5);\r\n          createIde( \"Assassin\");\r\n          mint( msg.sender,\"Assassin\",700,1);\r\n          createIde( \"AssassinV\");\r\n          mint( msg.sender,\"AssassinV\",230,2);\r\n          createIde( \"AssassinD\");\r\n          mint( msg.sender,\"AssassinD\",50,3);\r\n           createIde( \"AssassinR\");\r\n          mint( msg.sender,\"AssassinR\",15,4);\r\n           createIde( \"AssassinM\");\r\n          mint( msg.sender,\"AssassinM\",5,5);\r\n           createIde( \"Balandel\");\r\n          mint( msg.sender,\"Balandel\",700,1);\r\n          createIde( \"BalandelV\");\r\n          mint( msg.sender,\"BalandelV\",230,2);\r\n          createIde( \"BalandelD\");\r\n          mint( msg.sender,\"BalandelD\",50,3);\r\n           createIde( \"BalandelR\");\r\n          mint( msg.sender,\"BalandelR\",15,4);\r\n           createIde( \"BalandelM\");\r\n          mint( msg.sender,\"BalandelM\",5,5);\r\n          createIde( \"Barbarian\");\r\n          mint( msg.sender,\"Barbarian\",700,1);\r\n          createIde( \"BarbarianV\");\r\n          mint( msg.sender,\"BarbarianV\",230,2);\r\n          createIde( \"BarbarianD\");\r\n          mint( msg.sender,\"BarbarianD\",50,3);\r\n           createIde( \"BarbarianR\");\r\n            mint( msg.sender,\"BarbarianR\",15,4);\r\n           createIde( \"BarbarianM\");\r\n          mint( msg.sender,\"BarbarianM\",5,5);\r\n          createIde( \"Blizzard\");\r\n          mint( msg.sender,\"Blizzard\",700,1);\r\n          createIde( \"BlizzardV\");\r\n          mint( msg.sender,\"BlizzardV\",230,2);\r\n          createIde( \"BlizzardD\");\r\n          mint( msg.sender,\"BlizzardD\",50,3);\r\n           createIde( \"BlizzardR\");\r\n            mint( msg.sender,\"BlizzardR\",15,4);\r\n           createIde( \"BlizzardM\");\r\n          mint( msg.sender,\"BlizzardM\",5,5);\r\n          createIde( \"Caley\");\r\n          mint( msg.sender,\"Caley\",700,1);\r\n          createIde( \"CaleyV\");\r\n          mint( msg.sender,\"CaleyV\",230,2);\r\n          createIde( \"CaleyD\");\r\n          mint( msg.sender,\"CaleyD\",50,3);\r\n           createIde( \"CaleyR\");\r\n          mint( msg.sender,\"CaleyR\",15,4);\r\n           createIde( \"CaleyM\");\r\n          mint( msg.sender,\"CaleyM\",5,5);\r\n          createIde( \"Carantul\");\r\n          mint( msg.sender,\"Carantul\",700,1);\r\n          createIde( \"CarantulV\");\r\n          mint( msg.sender,\"CarantulV\",230,2);\r\n          createIde( \"CarantulD\");\r\n          mint( msg.sender,\"CarantulD\",50,3);\r\n           createIde( \"CarantulR\");\r\n          mint( msg.sender,\"CarantulR\",15,4);\r\n           createIde( \"CarantulM\");\r\n          mint( msg.sender,\"CarantulM\",5,5);\r\n           createIde( \"Castle\");\r\n          mint( msg.sender,\"Castle\",700,1);\r\n          createIde( \"CastleV\");\r\n          mint( msg.sender,\"CastleV\",230,2);\r\n          createIde( \"CastleD\");\r\n          mint( msg.sender,\"CastleD\",50,3);\r\n           createIde( \"CastleR\");\r\n          mint( msg.sender,\"CastleR\",15,4);\r\n           createIde( \"CastleM\");\r\n          mint( msg.sender,\"CastleM\",5,5);\r\n           createIde( \"Catapult\");\r\n          mint( msg.sender,\"Catapult\",700,1);\r\n          createIde( \"CatapultV\");\r\n          mint( msg.sender,\"CatapultV\",230,2);\r\n          createIde( \"CatapultD\");\r\n          mint( msg.sender,\"CatapultD\",50,3);\r\n           createIde( \"CatapultR\");\r\n          mint( msg.sender,\"CatapultR\",15,4);\r\n           createIde( \"CatapultM\");\r\n          mint( msg.sender,\"CatapultM\",5,5);\r\n          createIde( \"Centaur\");\r\n          mint( msg.sender,\"Centaur\",700,1);\r\n          createIde( \"CentaurV\");\r\n          mint( msg.sender,\"CentaurV\",230,2);\r\n          createIde( \"CentaurD\");\r\n          mint( msg.sender,\"CentaurD\",50,3);\r\n           createIde( \"CentaurR\");\r\n          mint( msg.sender,\"CentaurR\",15,4);\r\n           createIde( \"CentaurM\");\r\n          mint( msg.sender,\"CentaurM\",5,5);\r\n          createIde( \"CorruptedDragon\");\r\n          mint( msg.sender,\"CorruptedDragon\",700,1);\r\n          createIde( \"CorruptedDragonV\");\r\n          mint( msg.sender,\"CorruptedDragonV\",230,2);\r\n          createIde( \"CorruptedDragonD\");\r\n          mint( msg.sender,\"CorruptedDragonD\",50,3);\r\n           createIde( \"CorruptedDragonR\");\r\n          mint( msg.sender,\"CorruptedDragonR\",15,4);\r\n           createIde( \"CorruptedDragonM\");\r\n          mint( msg.sender,\"CorruptedDragonM\",5,5);\r\n          createIde( \"Cyclops\");\r\n          mint( msg.sender,\"Cyclops\",700,1);\r\n          createIde( \"CyclopsV\");\r\n          mint( msg.sender,\"CyclopsV\",230,2);\r\n          createIde( \"CyclopsD\");\r\n          mint( msg.sender,\"CyclopsD\",50,3);\r\n           createIde( \"CyclopsR\");\r\n          mint( msg.sender,\"CyclopsR\",15,4);\r\n           createIde( \"CyclopsM\");\r\n          mint( msg.sender,\"CyclopsM\",5,5);\r\n          createIde( \"Dagor\");\r\n          mint( msg.sender,\"Dagor\",700,1);\r\n          createIde( \"DagorV\");\r\n          mint( msg.sender,\"DagorV\",230,2);\r\n          createIde( \"DagorD\");\r\n          mint( msg.sender,\"DagorD\",50,3);\r\n           createIde( \"DagorR\");\r\n          mint( msg.sender,\"DagorR\",15,4);\r\n           createIde( \"DagorM\");\r\n          mint( msg.sender,\"DagorM\",5,5);\r\n          createIde( \"Dog\");\r\n          mint( msg.sender,\"Dog\",700,1);\r\n          createIde( \"DogV\");\r\n          mint( msg.sender,\"DogV\",230,2);\r\n          createIde( \"DogD\");\r\n          mint( msg.sender,\"DogD\",50,3);\r\n           createIde( \"DogR\");\r\n          mint( msg.sender,\"DogR\",15,4);\r\n           createIde( \"DogM\");\r\n          mint( msg.sender,\"DogM\",5,5);\r\n          createIde( \"DrekkaWarrior\");\r\n          mint( msg.sender,\"DrekkaWarrior\",700,1);\r\n          createIde( \"DrekkaWarriorV\");\r\n          mint( msg.sender,\"DrekkaWarriorV\",230,2);\r\n          createIde( \"DrekkaWarriorD\");\r\n          mint( msg.sender,\"DrekkaWarriorD\",50,3);\r\n           createIde( \"DrekkaWarriorR\");\r\n          mint( msg.sender,\"DrekkaWarriorR\",15,4);\r\n           createIde( \"DrekkaWarriorM\");\r\n          mint( msg.sender,\"DrekkaWarriorM\",5,5);\r\n          createIde( \"Elephant\");\r\n          mint( msg.sender,\"Elephant\",700,1);\r\n          createIde( \"ElephantV\");\r\n          mint( msg.sender,\"ElephantV\",230,2);\r\n          createIde( \"ElephantD\");\r\n          mint( msg.sender,\"ElephantD\",50,3);\r\n           createIde( \"ElephantR\");\r\n          mint( msg.sender,\"ElephantR\",15,4);\r\n           createIde( \"ElephantM\");\r\n          mint( msg.sender,\"ElephantM\",5,5);\r\n          createIde( \"Errantknight\");\r\n          mint( msg.sender,\"Errantknight\",700,1);\r\n          createIde( \"ErrantknightV\");\r\n          mint( msg.sender,\"ErrantknightV\",230,2);\r\n          createIde( \"ErrantknightD\");\r\n          mint( msg.sender,\"ErrantknightD\",50,3);\r\n           createIde( \"ErrantknightR\");\r\n          mint( msg.sender,\"ErrantknightR\",15,4);\r\n           createIde( \"ErrantknightM\");\r\n          mint( msg.sender,\"ErrantknightM\",5,5);\r\n          createIde( \"ForestWitch\");\r\n          mint( msg.sender,\"ForestWitch\",700,1);\r\n          createIde( \"ForestWitchV\");\r\n          mint( msg.sender,\"ForestWitchV\",230,2);\r\n          createIde( \"ForestWitchD\");\r\n          mint( msg.sender,\"ForestWitchD\",50,3);\r\n           createIde( \"ForestWitchR\");\r\n          mint( msg.sender,\"ForestWitchR\",15,4);\r\n           createIde( \"ForestWitchM\");\r\n          mint( msg.sender,\"ForestWitchM\",5,5);\r\n           createIde( \"Galed\");\r\n          mint( msg.sender,\"Galed\",700,1);\r\n          createIde( \"GaledV\");\r\n          mint( msg.sender,\"GaledV\",230,2);\r\n          createIde( \"GaledD\");\r\n          mint( msg.sender,\"GaledD\",50,3);\r\n           createIde( \"GaledR\");\r\n          mint( msg.sender,\"GaledR\",15,4);\r\n           createIde( \"GaledM\");\r\n          mint( msg.sender,\"GaledM\",5,5);\r\n          createIde( \"Gargoyle\");\r\n          mint( msg.sender,\"Gargoyle\",700,1);\r\n          createIde( \"GargoyleV\");\r\n          mint( msg.sender,\"GargoyleV\",230,2);\r\n          createIde( \"GargoyleD\");\r\n          mint( msg.sender,\"GargoyleD\",50,3);\r\n           createIde( \"GargoyleR\");\r\n          mint( msg.sender,\"GargoyleR\",15,4);\r\n           createIde( \"GargoyleM\");\r\n          mint( msg.sender,\"GargoyleM\",5,5);\r\n          createIde( \"Goblin\");\r\n          mint( msg.sender,\"Goblin\",700,1);\r\n          createIde( \"GoblinV\");\r\n          mint( msg.sender,\"GoblinV\",230,2);\r\n          createIde( \"GoblinD\");\r\n          mint( msg.sender,\"GoblinD\",50,3);\r\n           createIde( \"GoblinR\");\r\n          mint( msg.sender,\"GoblinR\",15,4);\r\n           createIde( \"GoblinM\");\r\n          mint( msg.sender,\"GoblinM\",5,5);\r\n          createIde( \"GoblinLeader\");\r\n          mint( msg.sender,\"GoblinLeader\",700,1);\r\n          createIde( \"GoblinLeaderV\");\r\n          mint( msg.sender,\"GoblinLeaderV\",230,2);\r\n          createIde( \"GoblinLeaderD\");\r\n          mint( msg.sender,\"GoblinLeaderD\",50,3);\r\n           createIde( \"GoblinLeaderR\");\r\n          mint( msg.sender,\"GoblinLeaderR\",15,4);\r\n           createIde( \"GoblinLeaderM\");\r\n          mint( msg.sender,\"GoblinLeaderM\",5,5);\r\n          createIde( \"GoldenArcher\");\r\n          mint( msg.sender,\"GoldenArcher\",700,1);\r\n          createIde( \"GoldenArcherV\");\r\n          mint( msg.sender,\"GoldenArcherV\",230,2);\r\n          createIde( \"GoldenArcherD\");\r\n          mint( msg.sender,\"GoldenArcherD\",50,3);\r\n           createIde( \"GoldenArcherR\");\r\n          mint( msg.sender,\"GoldenArcherR\",15,4);\r\n           createIde( \"GoldenArcherM\");\r\n          mint( msg.sender,\"GoldenArcherM\",5,5);\r\n          createIde( \"Griffin\");\r\n          mint( msg.sender,\"Griffin\",700,1);\r\n          createIde( \"GriffinV\");\r\n          mint( msg.sender,\"GriffinV\",230,2);\r\n          createIde( \"GriffinD\");\r\n          mint( msg.sender,\"GriffinD\",50,3);\r\n           createIde( \"GriffinR\");\r\n          mint( msg.sender,\"GriffinR\",15,4);\r\n           createIde( \"GriffinM\");\r\n          mint( msg.sender,\"GriffinM\",5,5);\r\n          createIde( \"Gunther\");\r\n          mint( msg.sender,\"Gunther\",700,1);\r\n          createIde( \"GuntherV\");\r\n          mint( msg.sender,\"GuntherV\",230,2);\r\n          createIde( \"GuntherD\");\r\n          mint( msg.sender,\"GuntherD\",50,3);\r\n           createIde( \"GuntherR\");\r\n          mint( msg.sender,\"GuntherR\",15,4);\r\n           createIde( \"GuntherM\");\r\n          mint( msg.sender,\"GuntherM\",5,5);\r\n          createIde( \"HungryZombie\");\r\n          mint( msg.sender,\"HungryZombie\",700,1);\r\n          createIde( \"HungryZombieV\");\r\n          mint( msg.sender,\"HungryZombieV\",230,2);\r\n          createIde( \"HungryZombieD\");\r\n          mint( msg.sender,\"HungryZombieD\",50,3);\r\n           createIde( \"HungryZombieR\");\r\n          mint( msg.sender,\"HungryZombieR\",15,4);\r\n           createIde( \"HungryZombieM\");\r\n          mint( msg.sender,\"HungryZombieM\",5,5);\r\n          createIde( \"Knight\");\r\n          mint( msg.sender,\"Knight\",700,1);\r\n          createIde( \"KnightV\");\r\n          mint( msg.sender,\"KnightV\",230,2);\r\n          createIde( \"KnightD\");\r\n          mint( msg.sender,\"KnightD\",50,3);\r\n           createIde( \"KnightR\");\r\n          mint( msg.sender,\"KnightR\",15,4);\r\n           createIde( \"KnightM\");\r\n          mint( msg.sender,\"KnightM\",5,5);\r\n           createIde( \"Meteor\");\r\n          mint( msg.sender,\"Meteor\",700,1);\r\n          createIde( \"MeteorV\");\r\n          mint( msg.sender,\"MeteorV\",230,2);\r\n          createIde( \"MeteorD\");\r\n          mint( msg.sender,\"MeteorD\",50,3);\r\n           createIde( \"MeteorR\");\r\n          mint( msg.sender,\"MeteorR\",15,4);\r\n           createIde( \"MeteorM\");\r\n          mint( msg.sender,\"MeteorM\",5,5);\r\n          createIde( \"NorthernWarrior\");\r\n          mint( msg.sender,\"NorthernWarrior\",700,1);\r\n          createIde( \"NorthernWarriorV\");\r\n          mint( msg.sender,\"NorthernWarriorV\",230,2);\r\n          createIde( \"NorthernWarriorD\");\r\n          mint( msg.sender,\"NorthernWarriorD\",50,3);\r\n           createIde( \"NorthernWarriorR\");\r\n          mint( msg.sender,\"NorthernWarriorR\",15,4);\r\n           createIde( \"NorthernWarriorM\");\r\n          mint( msg.sender,\"NorthernWarriorM\",5,5);\r\n          createIde( \"Ogre\");\r\n          mint( msg.sender,\"Ogre\",700,1);\r\n          createIde( \"OgreV\");\r\n          mint( msg.sender,\"OgreV\",230,2);\r\n          createIde( \"OgreD\");\r\n          mint( msg.sender,\"OgreD\",50,3);\r\n           createIde( \"OgreR\");\r\n          mint( msg.sender,\"OgreR\",15,4);\r\n           createIde( \"OgreM\");\r\n          mint( msg.sender,\"OgreM\",5,5);\r\n          createIde( \"Orc\");\r\n          mint( msg.sender,\"Orc\",700,1);\r\n          createIde( \"OrcV\");\r\n          mint( msg.sender,\"OrcV\",230,2);\r\n          createIde( \"OrcD\");\r\n          mint( msg.sender,\"OrcD\",50,3);\r\n           createIde( \"OrcR\");\r\n          mint( msg.sender,\"OrcR\",15,4);\r\n           createIde( \"OrcM\");\r\n          mint( msg.sender,\"OrcM\",5,5);\r\n          createIde( \"RedDragon\");\r\n          mint( msg.sender,\"RedDragon\",700,1);\r\n          createIde( \"RedDragonV\");\r\n          mint( msg.sender,\"RedDragonV\",230,2);\r\n          createIde( \"RedDragonD\");\r\n          mint( msg.sender,\"RedDragonD\",50,3);\r\n           createIde( \"RedDragonR\");\r\n          mint( msg.sender,\"RedDragonR\",15,4);\r\n           createIde( \"RedDragonM\");\r\n          mint( msg.sender,\"RedDragonM\",5,5);\r\n          createIde( \"Renegade\");\r\n          mint( msg.sender,\"Renegade\",700,1);\r\n          createIde( \"RenegadeV\");\r\n          mint( msg.sender,\"RenegadeV\",230,2);\r\n          createIde( \"RenegadeD\");\r\n          mint( msg.sender,\"RenegadeD\",50,3);\r\n           createIde( \"RenegadeR\");\r\n          mint( msg.sender,\"RenegadeR\",15,4);\r\n           createIde( \"RenegadeM\");\r\n          mint( msg.sender,\"RenegadeM\",5,5);\r\n          createIde( \"Salesha\");\r\n          mint( msg.sender,\"Salesha\",700,1);\r\n          createIde( \"SaleshaV\");\r\n          mint( msg.sender,\"SaleshaV\",230,2);\r\n          createIde( \"SaleshaD\");\r\n          mint( msg.sender,\"SaleshaD\",50,3);\r\n           createIde( \"SaleshaR\");\r\n          mint( msg.sender,\"SaleshaR\",15,4);\r\n           createIde( \"SaleshaM\");\r\n          mint( msg.sender,\"SaleshaM\",5,5);\r\n           createIde( \"Spider\");\r\n          mint( msg.sender,\"Spider\",700,1);\r\n          createIde( \"SpiderV\");\r\n          mint( msg.sender,\"SpiderV\",230,2);\r\n          createIde( \"SpiderD\");\r\n          mint( msg.sender,\"SpiderD\",50,3);\r\n           createIde( \"SpiderR\");\r\n          mint( msg.sender,\"SpiderR\",15,4);\r\n           createIde( \"SpiderM\");\r\n          mint( msg.sender,\"SpiderM\",5,5);\r\n          createIde( \"Telempest\");\r\n          mint( msg.sender,\"Telempest\",700,1);\r\n          createIde( \"TelempestV\");\r\n          mint( msg.sender,\"TelempestV\",230,2);\r\n          createIde( \"TelempestD\");\r\n          mint( msg.sender,\"TelempestD\",50,3);\r\n           createIde( \"TelempestR\");\r\n          mint( msg.sender,\"TelempestR\",15,4);\r\n           createIde( \"TelempestM\");\r\n          mint( msg.sender,\"TelempestM\",5,5);\r\n          createIde( \"Thunderbolts\");\r\n          mint( msg.sender,\"Thunderbolts\",700,1);\r\n          createIde( \"ThunderboltsV\");\r\n          mint( msg.sender,\"ThunderboltsV\",230,2);\r\n          createIde( \"ThunderboltsD\");\r\n          mint( msg.sender,\"ThunderboltsD\",50,3);\r\n           createIde( \"ThunderboltsR\");\r\n          mint( msg.sender,\"ThunderboltsR\",15,4);\r\n           createIde( \"ThunderboltsM\");\r\n          mint( msg.sender,\"ThunderboltsM\",5,5);\r\n          createIde( \"Timul\");\r\n          mint( msg.sender,\"Timul\",700,1);\r\n       \r\n        }\r\n      \r\n      function mint( address account, string memory id, uint256 amount,uint256 class) public  onlyOwner  {   \r\n           if(ide[id] > 0 ){\r\n             _mint(account, ide[id], amount, \"\");\r\n             _raririty[ide[id]]= class;\r\n           }\r\n        }\r\n       function  raritych(uint256 id, uint256 class)public onlyOwner {        \r\n            _raririty[id] = class; \r\n        }\r\n\r\n       function burn( address account, uint256 id, uint256 amount) public  onlyOwner {         \r\n            _burn(account, id, amount);\r\n        }\r\n        function createIde( string memory newIde  ) public  onlyOwner {\t\r\n          //create relation between ide name and ide number\r\n             if ( ide[newIde] == 0){\r\n               poolIde += 1; \r\n               ide[newIde] = poolIde;\r\n               ideName[poolIde] = newIde;\r\n             }          \r\n        } \r\n  \r\n\r\n       function viewDeck1(address account)  public view returns( string memory deck)  {\r\n             string memory message; \r\n             string memory value;           \r\n             string memory idLock;\r\n             uint newline = 0;\r\n             uint256 initTime;\r\n             uint256 newTime;\r\n             initTime = 0;\r\n             newTime = 0;\r\n             message = string (abi.encodePacked(message,'{', '\"', \"car\", '\"',':', '['));\r\n             newTime = (block.timestamp - refDay)/ 1 days;   //<-change this\r\n            for (uint i = 1; i <= poolIde; i++) {    \r\n                                     \r\n                 if( balanceOf(account,i) > 0){\r\n                   value =  Strings.toString( balanceOf(account,i));\r\n                   if (LockCard[account][i].time > 0){\r\n                     initTime = (LockCard[account][i].time - refDay) / 1 days; //<-change this\r\n                     \r\n                      if ( newTime  <= initTime   ){  \r\n                       idLock =  Strings.toString(LockCard[account][i].amount);\r\n                      }else{\r\n                       idLock = \"0\";  \r\n                      }\r\n                   }else{\r\n                       idLock = \"0\";\r\n                   }\r\n\r\n                   //add comma for each line after the first was added\r\n                    if(newline == 1){\r\n                      message = string (abi.encodePacked(message,','));\r\n                    }  \r\n                 \r\n                   message = string (abi.encodePacked(message,'{','\"', \"nom\",'\"',':', '\"',ideName[i],'\"',',','\"',\"can\",'\"',':', '\"', value,'\"',',','\"',\"idL\",'\"',':', '\"' ,idLock,'\"' ,'}' ));                                   \r\n                  newline = 1;\r\n                }                   \r\n               }     \r\n               message = string (abi.encodePacked(message,']','}')); \r\n                deck = message ;  \r\n            \r\n              }\r\n\r\n      function viewDeck2(address account) public view returns(uint256[] memory, uint256[] memory ){\r\n       uint256 value;\r\n       uint256[] memory ids = new uint256[](poolIde+1);\r\n       uint256[] memory rarty = new uint256[](poolIde+1);\r\n           for (uint i = 0; i <= poolIde; i++) {    \r\n                value =  balanceOf(account,i);                                                 \r\n                    ids[i] = value;\r\n                    rarty[i] = _raririty[i];\r\n               }   \r\n           return (ids, rarty);\r\n      }\r\n       //add lock account\r\n        function  actMlock( address account, uint active) public onlyOwner{                \r\n              Mlock[account] = active;\r\n             }\r\n\r\n        function getBalance(address account) public view returns (uint256 deckbalance, uint256 refTime){\r\n              for(uint i = 0; i <= poolIde; i++){          \r\n               deckbalance += _balances[i][account];\r\n              } \r\n             refTime = refDay;\r\n        }\r\n\r\n \r\n      function uri(uint256 id) public view virtual override returns (string memory) {\r\n        \r\n        //return _uri; \r\n        string memory nft = Strings.toString(id);\r\n        return string (abi.encodePacked(\"https://app.lasthorde.com/NFTs/\",nft,\".json\"));\r\n     }\r\n         \r\n    }", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LockCard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Mlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"active\",\"type\":\"uint256\"}],\"name\":\"actMlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newIde\",\"type\":\"string\"}],\"name\":\"createIde\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deckbalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"ide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ideName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"class\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolIde\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"class\",\"type\":\"uint256\"}],\"name\":\"raritych\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ids\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"specialBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"viewDeck1\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"deck\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"viewDeck2\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "mintDeck", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4e607e44228fad50ba0f9e593c70bf8d4ba8686b7c4d171df72aafc28d1fe02e"}