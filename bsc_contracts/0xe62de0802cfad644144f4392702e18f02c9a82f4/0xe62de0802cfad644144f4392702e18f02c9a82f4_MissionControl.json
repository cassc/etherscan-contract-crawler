{"SourceCode": "pragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n// a library for performing overflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math)\r\nlibrary BoringMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a + b) >= b, \"BoringMath: Add Overflow\");}\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a - b) <= a, \"BoringMath: Underflow\");}\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {require(b == 0 || (c = a * b)/b == a, \"BoringMath: Mul Overflow\");}\r\n    function to128(uint256 a) internal pure returns (uint128 c) {\r\n        require(a <= uint128(-1), \"BoringMath: uint128 Overflow\");\r\n        c = uint128(a);\r\n    }\r\n    function to64(uint256 a) internal pure returns (uint64 c) {\r\n        require(a <= uint64(-1), \"BoringMath: uint64 Overflow\");\r\n        c = uint64(a);\r\n    }\r\n    function to32(uint256 a) internal pure returns (uint32 c) {\r\n        require(a <= uint32(-1), \"BoringMath: uint32 Overflow\");\r\n        c = uint32(a);\r\n    }\r\n}\r\n\r\nlibrary BoringMath128 {\r\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a + b) >= b, \"BoringMath: Add Overflow\");}\r\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {require((c = a - b) <= a, \"BoringMath: Underflow\");}\r\n}\r\n\r\nlibrary BoringMath64 {\r\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {require((c = a + b) >= b, \"BoringMath: Add Overflow\");}\r\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {require((c = a - b) <= a, \"BoringMath: Underflow\");}\r\n}\r\n\r\nlibrary BoringMath32 {\r\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {require((c = a + b) >= b, \"BoringMath: Add Overflow\");}\r\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {require((c = a - b) <= a, \"BoringMath: Underflow\");}\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // EIP 2612\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\nlibrary BoringERC20 {\r\n    function safeSymbol(IERC20 token) internal view returns(string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41));\r\n        return success && data.length > 0 ? abi.decode(data, (string)) : \"???\";\r\n    }\r\n\r\n    function safeName(IERC20 token) internal view returns(string memory) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03));\r\n        return success && data.length > 0 ? abi.decode(data, (string)) : \"???\";\r\n    }\r\n\r\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\r\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567));\r\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\r\n    }\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 amount) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: Transfer failed\");\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: TransferFrom failed\");\r\n    }\r\n}\r\n\r\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\r\n// P1 - P3: OK\r\n// solhint-disable avoid-low-level-calls\r\n// T1 - T4: OK\r\ncontract BaseBoringBatchable {\r\n    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\r\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\r\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\r\n\r\n        assembly {\r\n            // Slice the sighash.\r\n            _returnData := add(_returnData, 0x04)\r\n        }\r\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\r\n    }    \r\n    \r\n    // F3 - F9: OK\r\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\r\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\r\n    // C1 - C21: OK\r\n    // C3: The length of the loop is fully under user control, so can't be exploited\r\n    // C7: Delegatecall is only used on the same contract, so it's safe\r\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns(bool[] memory successes, bytes[] memory results) {\r\n        // Interactions\r\n        successes = new bool[](calls.length);\r\n        results = new bytes[](calls.length);\r\n        for (uint256 i = 0; i < calls.length; i++) {\r\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\r\n            require(success || !revertOnFail, _getRevertMsg(result));\r\n            successes[i] = success;\r\n            results[i] = result;\r\n        }\r\n    }\r\n}\r\n\r\n// T1 - T4: OK\r\ncontract BoringBatchable is BaseBoringBatchable {\r\n    // F1 - F9: OK\r\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\r\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\r\n    // C1 - C21: OK\r\n    function permitToken(IERC20 token, address from, address to, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n        // Interactions\r\n        // X1 - X5\r\n        token.permit(from, to, amount, deadline, v, r, s);\r\n    }\r\n}\r\n\r\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\r\n// P1 - P3: OK\r\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\r\n// Edited by BoringCrypto\r\n// T1 - T4: OK\r\ncontract BoringOwnableData {\r\n    // V1 - V5: OK\r\n    address public owner;\r\n    // V1 - V5: OK\r\n    address public pendingOwner;\r\n}\r\n\r\n// T1 - T4: OK\r\ncontract BoringOwnable is BoringOwnableData {\r\n    // E1: OK\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    // F1 - F9: OK\r\n    // C1 - C21: OK\r\n    function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {\r\n        if (direct) {\r\n            // Checks\r\n            require(newOwner != address(0) || renounce, \"Ownable: zero address\");\r\n\r\n            // Effects\r\n            emit OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n            pendingOwner = address(0);\r\n        } else {\r\n            // Effects\r\n            pendingOwner = newOwner;\r\n        }\r\n    }\r\n\r\n    // F1 - F9: OK\r\n    // C1 - C21: OK\r\n    function claimOwnership() public {\r\n        address _pendingOwner = pendingOwner;\r\n        \r\n        // Checks\r\n        require(msg.sender == _pendingOwner, \"Ownable: caller != pending owner\");\r\n\r\n        // Effects\r\n        emit OwnershipTransferred(owner, _pendingOwner);\r\n        owner = _pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    // M1 - M5: OK\r\n    // C1 - C21: OK\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}\r\n\r\nlibrary SignedSafeMath {\r\n    int256 constant private _INT256_MIN = -2**255;\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two signed integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0, \"SignedSafeMath: division by zero\");\r\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function toUInt256(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0, \"Integer < 0\");\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\ninterface ISfexRewarder {\r\n    using BoringERC20 for IERC20;\r\n    function onSfexReward(uint256 pid, address user, address recipient, uint256 sfexAmount, uint256 newLpAmount) external;\r\n    function pendingTokens(uint256 pid, address user, uint256 sfexAmount) external view returns (IERC20[] memory, uint256[] memory);\r\n}\r\n\r\ninterface IMigratorChef {\r\n    // Take the current LP token address and return the new LP token address.\r\n    // Migrator should have full access to the caller's LP token.\r\n    function migrate(IERC20 token) external returns (IERC20);\r\n}\r\n\r\ncontract MissionControl is BoringOwnable, BoringBatchable {\r\n    using BoringMath for uint256;\r\n    using BoringMath128 for uint128;\r\n    using BoringERC20 for IERC20;\r\n    using SignedSafeMath for int256;\r\n\r\n    /// @notice Info of each MC user.\r\n    /// `amount` LP token amount the user has provided.\r\n    /// `rewardDebt` The amount of SFEX entitled to the user.\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        int256 rewardDebt;\r\n        uint64 lastClaimTime;\r\n    }\r\n\r\n    /// @notice Info of each MC pool.\r\n    /// `allocPoint` The amount of allocation points assigned to the pool.\r\n    /// Also known as the amount of SFEX to distribute per block.\r\n    struct PoolInfo {\r\n        uint128 accSfexPerShare;\r\n        uint64 lastRewardTime;\r\n        uint64 allocPoint;\r\n        // lock time in seconds\r\n        uint64 lockTime;\r\n    }\r\n\r\n    /// @notice Address of SFEX contract.\r\n    IERC20 public immutable SFEX;\r\n    // @notice The migrator contract. It has a lot of power. Can only be set through governance (owner).\r\n    IMigratorChef public migrator;\r\n    /// @notice Address where emergency withdraw fees are sent to\r\n    address public feeCollector;\r\n    uint256 public feePercent = 10;\r\n\r\n    /// @notice Info of each MC pool.\r\n    PoolInfo[] public poolInfo;\r\n    /// @notice Address of the LP token for each MC pool.\r\n    IERC20[] public lpToken;\r\n    /// @notice Address of each `ISfexRewarder` contract in MC.\r\n    ISfexRewarder[] public rewarder;\r\n\r\n    /// @notice Info of each user that stakes LP tokens.\r\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\r\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\r\n    uint256 public totalAllocPoint;\r\n\r\n    mapping (uint256 => uint256) public lpTokenDeposits;\r\n\r\n    /// @notice SFEX rewards to pay per second. These are paid until the\r\n    /// contract runs out of SFEX\r\n    uint256 public sfexPerSecond;\r\n    uint256 private constant ACC_SFEX_PRECISION = 1e12;\r\n\r\n    /// @notice Total SFEX deposited in SFEX pool (if any exist)\r\n    uint256 public SFEX_DEPOSITED;\r\n    /// @dev Amount of SFEX from balance that is set aside to be harvested\r\n    uint256 public PENDING_SFEX_REWARDS;\r\n\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\r\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event LogPoolAddition(uint256 indexed pid, uint256 allocPoint, IERC20 indexed lpToken, ISfexRewarder indexed rewarder, uint256 lockTime);\r\n    event LogSetPool(uint256 indexed pid, uint256 allocPoint, ISfexRewarder indexed rewarder, bool overwrite, uint256 lockTime);\r\n    event LogUpdatePool(uint256 indexed pid, uint64 lastRewardTime, uint256 lpSupply, uint256 accSfexPerShare);\r\n    event LogSfexPerSecond(uint256 sfexPerSecond);\r\n\r\n    /// @param _sfex The SFEX token contract address.\r\n    /// @param _feeCollector Address to send emergency withdrawal fees to\r\n    constructor(IERC20 _sfex, address _feeCollector) public {\r\n        SFEX = _sfex;\r\n        feeCollector = _feeCollector;\r\n    }\r\n\r\n    /// @notice Returns the number of MC pools.\r\n    function poolLength() public view returns (uint256 pools) {\r\n        pools = poolInfo.length;\r\n    }\r\n\r\n    /// @notice Add a new LP to the pool with time lock. Can only be called by the owner.\r\n    /// @param allocPoint AP of the new pool.\r\n    /// @param _lpToken Address of the LP ERC-20 token.\r\n    /// @param _rewarder Address of the rewarder delegate.\r\n    /// @param _lockTimeInSeconds Number of seconds to lock users tokens for\r\n    function addWithLock(uint256 allocPoint, IERC20 _lpToken, ISfexRewarder _rewarder, uint256 _lockTimeInSeconds) public onlyOwner {\r\n        totalAllocPoint = totalAllocPoint.add(allocPoint);\r\n        lpToken.push(_lpToken);\r\n        rewarder.push(_rewarder);\r\n\r\n        poolInfo.push(PoolInfo({\r\n            allocPoint: allocPoint.to64(),\r\n            lastRewardTime: block.timestamp.to64(),\r\n            accSfexPerShare: 0,\r\n            lockTime: _lockTimeInSeconds.to64()\r\n        }));\r\n        emit LogPoolAddition(lpToken.length.sub(1), allocPoint, _lpToken, _rewarder, _lockTimeInSeconds);\r\n    }\r\n\r\n    function _getLpSupply(uint256 pid) private view returns (uint256) {\r\n        if (lpToken[pid] == SFEX) {\r\n            return SFEX_DEPOSITED;\r\n        }\r\n        return lpTokenDeposits[pid];\r\n    }\r\n\r\n    /// @notice Gives the total SFEX reward for all pools over time period\r\n    function _getSfexRewardForTime(uint256 _time, uint64 allocPoint) private view returns (uint256) {\r\n        uint256 rewardBalance = SFEX.balanceOf(address(this)).sub(SFEX_DEPOSITED).sub(PENDING_SFEX_REWARDS);\r\n        uint256 desiredSfexReward = _time.mul(sfexPerSecond).mul(allocPoint) / totalAllocPoint;\r\n\r\n        if (rewardBalance > desiredSfexReward) {\r\n            return desiredSfexReward;\r\n        } else {\r\n            return rewardBalance;\r\n        }\r\n    }\r\n\r\n    function _trackPendingSfexReward(uint256 amount) private {\r\n        PENDING_SFEX_REWARDS = PENDING_SFEX_REWARDS.add(amount);\r\n    }\r\n\r\n    /// @notice Add a new LP to the pool. Can only be called by the owner.\r\n    /// @param allocPoint AP of the new pool.\r\n    /// @param _lpToken Address of the LP ERC-20 token.\r\n    /// @param _rewarder Address of the rewarder delegate.\r\n    function add(uint256 allocPoint, IERC20 _lpToken, ISfexRewarder _rewarder) public onlyOwner {\r\n        addWithLock(allocPoint, _lpToken, _rewarder, 0);\r\n    }\r\n\r\n\r\n    /// @notice Update the given pool's SFEX allocation point and `ISfexRewarder` contract. Can only be called by the owner.\r\n    /// @param _pid The index of the pool. See `poolInfo`.\r\n    /// @param _allocPoint New AP of the pool.\r\n    /// @param _rewarder Address of the rewarder delegate.\r\n    /// @param overwrite True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.\r\n    /// @param _lockTime pool lock time in seconds. Set to 0 to remove lock\r\n    function set(uint256 _pid, uint256 _allocPoint, ISfexRewarder _rewarder, bool overwrite, uint256 _lockTime) public onlyOwner {\r\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\r\n        poolInfo[_pid].allocPoint = _allocPoint.to64();\r\n        poolInfo[_pid].lockTime = _lockTime.to64();\r\n        if (overwrite) { rewarder[_pid] = _rewarder; }\r\n        emit LogSetPool(_pid, _allocPoint, overwrite ? _rewarder : rewarder[_pid], overwrite, _lockTime);\r\n    }\r\n\r\n    /// @notice Sets the sfex per second to be distributed. Can only be called by the owner.\r\n    /// @param _sfexPerSecond The amount of Sfex to be distributed per second.\r\n    function setSfexPerSecond(uint256 _sfexPerSecond) public onlyOwner {\r\n        sfexPerSecond = _sfexPerSecond;\r\n        emit LogSfexPerSecond(_sfexPerSecond);\r\n    }\r\n\r\n    /// @notice Set the `migrator` contract. Can only be called by the owner.\r\n    /// @param _migrator The contract address to set.\r\n    function setMigrator(IMigratorChef _migrator) public onlyOwner {\r\n        migrator = _migrator;\r\n    }\r\n\r\n    /// @notice Migrate LP token to another LP contract through the `migrator` contract.\r\n    /// @param _pid The index of the pool. See `poolInfo`.\r\n    function migrate(uint256 _pid) public {\r\n        require(address(migrator) != address(0), \"MasterChefV2: no migrator set\");\r\n\r\n        IERC20 _lpToken = lpToken[_pid];\r\n        uint256 bal = _getLpSupply(_pid);\r\n\r\n        _lpToken.approve(address(migrator), bal);\r\n\r\n        IERC20 newLpToken = migrator.migrate(_lpToken);\r\n\r\n        // no need to update lpTokenDeposits as we guaratee the balances match\r\n        require(bal == newLpToken.balanceOf(address(this)), \"MasterChefV2: migrated balance must match\");\r\n        lpToken[_pid] = newLpToken;\r\n    }\r\n\r\n    /// @notice View function to see pending SFEX on frontend.\r\n    /// @param _pid The index of the pool. See `poolInfo`.\r\n    /// @param _user Address of user.\r\n    /// @return pending SFEX reward for a given user.\r\n    function pendingSfex(uint256 _pid, address _user) external view returns (uint256 pending) {\r\n        PoolInfo memory pool = poolInfo[_pid];\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        uint256 accSfexPerShare = pool.accSfexPerShare;\r\n        uint256 lpSupply = _getLpSupply(_pid);\r\n        if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\r\n            uint256 time = block.timestamp.sub(pool.lastRewardTime);\r\n            uint256 sfexReward = _getSfexRewardForTime(time, pool.allocPoint);\r\n\r\n            accSfexPerShare = accSfexPerShare.add(sfexReward.mul(ACC_SFEX_PRECISION) / lpSupply);\r\n        }\r\n        pending = int256(user.amount.mul(accSfexPerShare) / ACC_SFEX_PRECISION).sub(user.rewardDebt).toUInt256();\r\n    }\r\n\r\n    /// @notice Update reward variables for all pools. Be careful of gas spending!\r\n    /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.\r\n    function massUpdatePools(uint256[] calldata pids) external {\r\n        uint256 len = pids.length;\r\n        for (uint256 i = 0; i < len; ++i) {\r\n            updatePool(pids[i]);\r\n        }\r\n    }\r\n\r\n    /// @notice Update reward variables of the given pool.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    /// @return pool Returns the pool that was updated.\r\n    function updatePool(uint256 pid) public returns (PoolInfo memory pool) {\r\n        pool = poolInfo[pid];\r\n        if (block.timestamp > pool.lastRewardTime) {\r\n            uint256 lpSupply = _getLpSupply(pid);\r\n            if (lpSupply > 0) {\r\n                uint256 time = block.timestamp.sub(pool.lastRewardTime);\r\n                uint256 sfexReward = _getSfexRewardForTime(time, pool.allocPoint);\r\n\r\n                _trackPendingSfexReward(sfexReward);\r\n                pool.accSfexPerShare = pool.accSfexPerShare.add((sfexReward.mul(ACC_SFEX_PRECISION) / lpSupply).to128());\r\n            }\r\n            pool.lastRewardTime = block.timestamp.to64();\r\n            poolInfo[pid] = pool;\r\n            emit LogUpdatePool(pid, pool.lastRewardTime, lpSupply, pool.accSfexPerShare);\r\n        }\r\n    }\r\n\r\n    function _depositLpToken(uint256 pid, uint256 amount) private {\r\n        lpToken[pid].safeTransferFrom(msg.sender, address(this), amount);\r\n        lpTokenDeposits[pid] = lpTokenDeposits[pid].add(amount);\r\n        // Track deposited SFEX separately from contract SFEX used for rewards\r\n        if (lpToken[pid] == SFEX) {\r\n            SFEX_DEPOSITED = SFEX_DEPOSITED.add(amount);\r\n        }\r\n    }\r\n\r\n    function _withdrawLpToken(uint256 pid, uint256 amount, address to) private {\r\n        lpToken[pid].safeTransfer(to, amount);\r\n        lpTokenDeposits[pid] = lpTokenDeposits[pid].sub(amount);\r\n        // Track deposited SFEX separately from contract SFEX used for rewards\r\n        if (lpToken[pid] == SFEX) {\r\n            SFEX_DEPOSITED = SFEX_DEPOSITED.sub(amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Deposit LP tokens to MC for SFEX allocation.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    /// @param amount LP token amount to deposit.\r\n    /// @param to The receiver of `amount` deposit benefit.\r\n    function deposit(uint256 pid, uint256 amount, address to) public {\r\n        PoolInfo memory pool = updatePool(pid);\r\n        UserInfo storage user = userInfo[pid][to];\r\n\r\n        // Effects\r\n        user.amount = user.amount.add(amount);\r\n        user.rewardDebt = user.rewardDebt.add(int256(amount.mul(pool.accSfexPerShare) / ACC_SFEX_PRECISION));\r\n        user.lastClaimTime = block.timestamp.to64();\r\n\r\n        // Interactions\r\n        ISfexRewarder _rewarder = rewarder[pid];\r\n        if (address(_rewarder) != address(0)) {\r\n            _rewarder.onSfexReward(pid, to, to, 0, user.amount);\r\n        }\r\n\r\n        _depositLpToken(pid, amount);\r\n\r\n        emit Deposit(msg.sender, pid, amount, to);\r\n    }\r\n\r\n    /// @notice Pays out SFEX rewards\r\n    /// @param _pendingSfex amount of SFEX to pay\r\n    /// @param _to address to pay to\r\n    function _paySfexReward(uint256 _pendingSfex, address _to) private {\r\n        SFEX.safeTransfer(_to, _pendingSfex);\r\n        PENDING_SFEX_REWARDS = PENDING_SFEX_REWARDS.sub(_pendingSfex);\r\n    }\r\n\r\n    /// @notice Withdraw LP tokens from MC.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    /// @param amount LP token amount to withdraw.\r\n    /// @param to Receiver of the LP tokens.\r\n    function withdraw(uint256 pid, uint256 amount, address to) public {\r\n        PoolInfo memory pool = updatePool(pid);\r\n        UserInfo storage user = userInfo[pid][msg.sender];\r\n        require((block.timestamp.to64() - user.lastClaimTime) >= pool.lockTime, \"lock period not ended\");\r\n\r\n        // Effects\r\n        user.rewardDebt = user.rewardDebt.sub(int256(amount.mul(pool.accSfexPerShare) / ACC_SFEX_PRECISION));\r\n        user.amount = user.amount.sub(amount);\r\n        user.lastClaimTime = block.timestamp.to64();\r\n\r\n        // Interactions\r\n        ISfexRewarder _rewarder = rewarder[pid];\r\n        if (address(_rewarder) != address(0)) {\r\n            _rewarder.onSfexReward(pid, msg.sender, to, 0, user.amount);\r\n        }\r\n\r\n        _withdrawLpToken(pid, amount, to);\r\n\r\n        emit Withdraw(msg.sender, pid, amount, to);\r\n    }\r\n\r\n    /// @notice Harvest proceeds for transaction sender to `to`.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    /// @param to Receiver of SFEX rewards.\r\n    function harvest(uint256 pid, address to) public {\r\n        PoolInfo memory pool = updatePool(pid);\r\n        UserInfo storage user = userInfo[pid][msg.sender];\r\n        int256 accumulatedSfex = int256(user.amount.mul(pool.accSfexPerShare) / ACC_SFEX_PRECISION);\r\n        uint256 _pendingSfex = accumulatedSfex.sub(user.rewardDebt).toUInt256();\r\n\r\n        // Effects\r\n        user.rewardDebt = accumulatedSfex;\r\n        user.lastClaimTime = block.timestamp.to64();\r\n\r\n        // Interactions\r\n        if (_pendingSfex != 0) {\r\n            _paySfexReward(_pendingSfex, to);\r\n        }\r\n\r\n        ISfexRewarder _rewarder = rewarder[pid];\r\n        if (address(_rewarder) != address(0)) {\r\n            _rewarder.onSfexReward( pid, msg.sender, to, _pendingSfex, user.amount);\r\n        }\r\n\r\n        emit Harvest(msg.sender, pid, _pendingSfex);\r\n    }\r\n\r\n    /// @notice Withdraw LP tokens from MC and harvest proceeds for transaction sender to `to`.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    /// @param amount LP token amount to withdraw.\r\n    /// @param to Receiver of the LP tokens and SFEX rewards.\r\n    function withdrawAndHarvest(uint256 pid, uint256 amount, address to) public {\r\n        PoolInfo memory pool = updatePool(pid);\r\n        UserInfo storage user = userInfo[pid][msg.sender];\r\n\r\n        require((block.timestamp.to64() - user.lastClaimTime) >= pool.lockTime, \"lock period not ended\");\r\n\r\n        int256 accumulatedSfex = int256(user.amount.mul(pool.accSfexPerShare) / ACC_SFEX_PRECISION);\r\n        uint256 _pendingSfex = accumulatedSfex.sub(user.rewardDebt).toUInt256();\r\n\r\n        // Effects\r\n        user.rewardDebt = accumulatedSfex.sub(int256(amount.mul(pool.accSfexPerShare) / ACC_SFEX_PRECISION));\r\n        user.amount = user.amount.sub(amount);\r\n        user.lastClaimTime = block.timestamp.to64();\r\n\r\n        // Interactions\r\n        _paySfexReward(_pendingSfex, to);\r\n\r\n        ISfexRewarder _rewarder = rewarder[pid];\r\n        if (address(_rewarder) != address(0)) {\r\n            _rewarder.onSfexReward(pid, msg.sender, to, _pendingSfex, user.amount);\r\n        }\r\n\r\n        _withdrawLpToken(pid, amount, to);\r\n\r\n        emit Withdraw(msg.sender, pid, amount, to);\r\n        emit Harvest(msg.sender, pid, _pendingSfex);\r\n    }\r\n\r\n    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    /// @param pid The index of the pool. See `poolInfo`.\r\n    /// @param to Receiver of the LP tokens.\r\n    function emergencyWithdraw(uint256 pid, address to) public {\r\n        UserInfo storage user = userInfo[pid][msg.sender];\r\n        uint256 amount = user.amount;\r\n        user.amount = 0;\r\n        user.rewardDebt = 0;\r\n\r\n        ISfexRewarder _rewarder = rewarder[pid];\r\n        if (address(_rewarder) != address(0)) {\r\n            _rewarder.onSfexReward(pid, msg.sender, to, 0, 0);\r\n        }\r\n\r\n        // calculate amount to pay first so that fee is always taken even on\r\n        // tiny amounts\r\n        uint256 amountMulti = uint256(100).sub(feePercent);\r\n        uint256 amountRemaining = amount.mul(amountMulti) / 100;\r\n        uint256 fee = amount.sub(amountRemaining);\r\n\r\n        // Note: transfer can fail or succeed if `amount` is zero.\r\n        _withdrawLpToken(pid, amountRemaining, to);\r\n        _withdrawLpToken(pid, fee, feeCollector);\r\n        emit EmergencyWithdraw(msg.sender, pid, amount, to);\r\n    }\r\n\r\n    /// @notice Update fee collector address by the previous fee collector\r\n    function setFeeCollector(address _feeCollector) public {\r\n        require(msg.sender == feeCollector, \"you arent the current fee collector\");\r\n        feeCollector = _feeCollector;\r\n    }\r\n\r\n    /// @notice Update fee percent\r\n    function setFeePercent(uint256 _feePercent) public {\r\n        require(msg.sender == feeCollector, \"you arent the current fee collector\");\r\n        require(_feePercent <= 100, \"fee is above 100\");\r\n        feePercent = _feePercent;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_sfex\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ISfexRewarder\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"LogPoolAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract ISfexRewarder\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"overwrite\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"LogSetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sfexPerSecond\",\"type\":\"uint256\"}],\"name\":\"LogSfexPerSecond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lastRewardTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accSfexPerShare\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PENDING_SFEX_REWARDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SFEX\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SFEX_DEPOSITED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract ISfexRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract ISfexRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockTimeInSeconds\",\"type\":\"uint256\"}],\"name\":\"addWithLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"calls\",\"type\":\"bytes[]\"},{\"internalType\":\"bool\",\"name\":\"revertOnFail\",\"type\":\"bool\"}],\"name\":\"batch\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"successes\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpTokenDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"}],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingSfex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"accSfexPerShare\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"lastRewardTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"allocPoint\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lockTime\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pools\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewarder\",\"outputs\":[{\"internalType\":\"contract ISfexRewarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract ISfexRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"overwrite\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_lockTime\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sfexPerSecond\",\"type\":\"uint256\"}],\"name\":\"setSfexPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sfexPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"accSfexPerShare\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"lastRewardTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"allocPoint\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lockTime\",\"type\":\"uint64\"}],\"internalType\":\"struct MissionControl.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardDebt\",\"type\":\"int256\"},{\"internalType\":\"uint64\",\"name\":\"lastClaimTime\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawAndHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MissionControl", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005392ff4a9bd006dc272c1855af6640e17cc5ec0b00000000000000000000000093660f1ca928fa639448c516b24478ee124de816", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2bf374059b44f36f6a2ce77bcff0de35fd42dfca24426d69e9a3b626ac00f363"}