{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ExactInputDelegateSwapModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.21;\\n\\n/// @title Interface for ExactInputDelegateSwapModule\\ninterface ExactInputDelegateSwapModule {\\n    struct ExactInputParams {\\n        uint256 inputTokenAmount;\\n        uint256 paymentTokenAmountMin;\\n        uint256 deadline;\\n        bytes swapData;\\n    }\\n\\n    function exactInputNativeSwap(bytes calldata swapParams) external returns (uint256);\\n\\n    function exactInputSwap(bytes calldata swapParams) external returns (uint256);\\n\\n    function decodeSwapData(bytes calldata swapData) external returns (address, address, address);\\n}\\n\"\r\n    },\r\n    \"contracts/receiver/SpritzReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/ExactInputDelegateSwapModule.sol\\\";\\n\\ninterface ISpritzPay {\\n    function payWithToken(address paymentTokenAddress, uint256 paymentTokenAmount, bytes32 paymentReference) external;\\n}\\n\\ninterface IReceiverFactory {\\n    function getDestinationAddresses() external view returns (address, address);\\n}\\n\\ncontract SpritzReceiver {\\n    error NotController();\\n    error InvalidDestination();\\n    error SwapFailure();\\n    error DecodeFailure();\\n    error FailedSweep();\\n\\n    bytes32 private immutable accountReference;\\n    address private immutable controller;\\n    address private immutable factory;\\n\\n    modifier onlyController() {\\n        if (msg.sender != controller) revert NotController();\\n        _;\\n    }\\n\\n    constructor(address _controller, bytes32 _accountReference) payable {\\n        controller = _controller;\\n        accountReference = _accountReference;\\n        factory = msg.sender;\\n    }\\n\\n    function payWithToken(address token, uint256 amount) external onlyController {\\n        (address spritzPay, ) = getDestinationAddresses();\\n        _payWithToken(spritzPay, token, amount);\\n    }\\n\\n    function payWithSwap(\\n        uint256 sourceTokenAmount,\\n        uint256 paymentTokenAmountMin,\\n        uint256 deadline,\\n        bytes calldata swapData\\n    ) external onlyController {\\n        (address spritzPay, address swapModule) = getDestinationAddresses();\\n\\n        (address sourceToken, address paymentToken, address weth) = decodeSwapData(swapModule, swapData);\\n\\n        string memory selector;\\n\\n        if (sourceToken == weth) {\\n            selector = address(this).balance >= sourceTokenAmount\\n                ? \\\"exactInputNativeSwap(bytes)\\\"\\n                : \\\"exactInputSwap(bytes)\\\";\\n        } else {\\n            selector = \\\"exactInputSwap(bytes)\\\";\\n        }\\n\\n        ExactInputDelegateSwapModule.ExactInputParams memory swapParams = ExactInputDelegateSwapModule\\n            .ExactInputParams({\\n                inputTokenAmount: sourceTokenAmount,\\n                paymentTokenAmountMin: paymentTokenAmountMin,\\n                deadline: deadline,\\n                swapData: swapData\\n            });\\n\\n        uint256 paymentTokenReceived = delegateSwap(\\n            swapModule,\\n            abi.encodeWithSignature(selector, abi.encode(swapParams))\\n        );\\n\\n        _payWithToken(spritzPay, paymentToken, paymentTokenReceived);\\n    }\\n\\n    function _payWithToken(address spritzPay, address token, uint256 amount) internal {\\n        ensureSpritzPayAllowance(spritzPay, token);\\n        ISpritzPay(spritzPay).payWithToken(address(token), amount, accountReference);\\n    }\\n\\n    function ensureSpritzPayAllowance(address spritzPay, address token) internal {\\n        uint256 allowance = IERC20(token).allowance(address(this), spritzPay);\\n        if (allowance == 0) {\\n            IERC20(token).approve(spritzPay, type(uint256).max);\\n        }\\n    }\\n\\n    function getDestinationAddresses() internal view returns (address spritzPay, address swapModule) {\\n        (spritzPay, swapModule) = IReceiverFactory(factory).getDestinationAddresses();\\n        if (spritzPay == address(0) || swapModule == address(0)) revert InvalidDestination();\\n    }\\n\\n    function decodeSwapData(\\n        address swapModule,\\n        bytes calldata swapData\\n    ) internal view returns (address inputToken, address outputToken, address weth) {\\n        bytes memory data = abi.encodeWithSelector(ExactInputDelegateSwapModule.decodeSwapData.selector, swapData);\\n\\n        (bool success, bytes memory result) = swapModule.staticcall(data);\\n        if (!success) revert DecodeFailure();\\n\\n        (inputToken, outputToken, weth) = abi.decode(result, (address, address, address));\\n    }\\n\\n    function delegateSwap(address target, bytes memory data) internal returns (uint256 paymentTokenReceived) {\\n        (bool success, bytes memory result) = target.delegatecall(data);\\n        if (!success || result.length == 0) {\\n            if (result.length == 0) {\\n                revert SwapFailure();\\n            } else {\\n                assembly {\\n                    let resultSize := mload(result)\\n                    revert(add(32, result), resultSize)\\n                }\\n            }\\n        }\\n\\n        (paymentTokenReceived) = abi.decode(result, (uint256));\\n    }\\n\\n    /**\\n     * @dev Withdraw deposited tokens to the given address\\n     * @param token Token to withdraw\\n     * @param to Target address\\n     */\\n    function sweep(IERC20 token, address to) external onlyController {\\n        token.transfer(to, token.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @dev Withdraw ETH to the given address\\n     * @param to Target address\\n     */\\n    function nativeSweep(address to) external onlyController {\\n        (bool success, ) = to.call{ value: address(this).balance }(\\\"\\\");\\n        if (!success) revert FailedSweep();\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_accountReference\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DecodeFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedSweep\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDestination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapFailure\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"nativeSweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sourceTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentTokenAmountMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"name\":\"payWithSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SpritzReceiver", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "000000000000000000000000aaaf0666a916bdf97710a8e44e42ba250490e5b8000000000000000000000000000000000000000065232646d7558626714ea256", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}