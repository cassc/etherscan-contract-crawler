{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/GITREPOS/PlatformSolidityBsc/contracts/BEP20Timelock.sol\": {\r\n      \"content\": \"/*\\r\\n__/\\\\\\\\\\\\________/\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_        \\r\\n _\\\\///\\\\\\\\\\\\____/\\\\\\\\\\\\/____/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\///////////______/\\\\\\\\\\\\////////__       \\r\\n  ___\\\\///\\\\\\\\\\\\/\\\\\\\\\\\\/_____\\\\//\\\\\\\\\\\\______\\\\///__\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\/___________      \\r\\n   _____\\\\///\\\\\\\\\\\\/________\\\\////\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\\\\\\\_____________     \\r\\n    _______\\\\/\\\\\\\\\\\\____________\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\///////______\\\\/\\\\\\\\\\\\_____________    \\r\\n     _______\\\\/\\\\\\\\\\\\_______________\\\\////\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_____________\\\\//\\\\\\\\\\\\____________   \\r\\n      _______\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________\\\\///\\\\\\\\\\\\__________  \\r\\n       _______\\\\/\\\\\\\\\\\\_______\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/___\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_ \\r\\n        _______\\\\///__________\\\\///////////_____\\\\///////////////________\\\\/////////__\\r\\n\\r\\nVisit and follow!\\r\\n\\r\\n* Website:  https://www.ysec.finance\\r\\n* Twitter:  https://twitter.com/YearnSecure\\r\\n* Telegram: https://t.me/YearnSecure\\r\\n* Medium:   https://yearnsecure.medium.com/\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./Models/TokenAllocation.sol\\\";\\r\\nimport \\\"./interfaces/IBEP20Timelock.sol\\\";\\r\\nimport \\\"./interfaces/IBEP20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract BEP20Timelock is IBEP20Timelock, Context, ReentrancyGuard{\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    address public Owner;\\r\\n    address public TokenOwner;\\r\\n\\r\\n    mapping(string => TokenAllocation) public Allocations;\\r\\n    string[] public AllocationIndexer;\\r\\n\\r\\n    constructor(address owner, address tokenOwner) public{\\r\\n        Owner = owner;\\r\\n        TokenOwner = tokenOwner;\\r\\n    }\\r\\n\\r\\n    //Returns number of existing Allocations so that frontend can loop through them -> \\r\\n    //(call this for loop numbers(number of allocations) -> loop through AllocationIndexer to get keys \\r\\n    //-> get Allocation from mapping with given key)\\r\\n    function AllocationLength() override public view returns (uint256) {\\r\\n        return AllocationIndexer.length;\\r\\n    }\\r\\n\\r\\n    function AddAllocation(string memory name, uint256 amount, uint256 releaseDate, bool isInterval, uint256 percentageOfRelease, uint256 intervalOfRelease, address token) OnlyOwner() override external{\\r\\n        require(IBEP20(token).allowance(_msgSender(), address(this)) >= amount , \\\"Transfer of token has not been approved\\\");\\r\\n        Allocations[name] = TokenAllocation(\\r\\n            {\\r\\n                Name:name,\\r\\n                Amount:amount,\\r\\n                RemainingAmount:amount,\\r\\n                ReleaseDate:releaseDate,\\r\\n                IsInterval:isInterval,\\r\\n                PercentageOfRelease:percentageOfRelease,\\r\\n                IntervalOfRelease:intervalOfRelease,\\r\\n                Exists:true,\\r\\n                Token:token\\r\\n            }\\r\\n        );\\r\\n        AllocationIndexer.push(name);\\r\\n        IBEP20(token).transferFrom(_msgSender(), address(this), amount);\\r\\n    }\\r\\n\\r\\n    function WithdrawFromAllocation(string memory name) nonReentrant() RequireTokenOwner() override external{\\r\\n        TokenAllocation memory allocation = Allocations[name];\\r\\n        require(allocation.Exists, \\\"Allocation with that name does not exist!\\\");\\r\\n        if(!allocation.IsInterval) //regular locked\\r\\n        {\\r\\n            require(allocation.ReleaseDate < block.timestamp, \\\"Allocation is not unlocked yet!\\\");\\r\\n            require(allocation.RemainingAmount > 0, \\\"Insufficient allocation remaining!\\\");\\r\\n            Allocations[name].RemainingAmount = allocation.RemainingAmount.sub(allocation.Amount);\\r\\n            IBEP20(allocation.Token).transfer(TokenOwner, allocation.Amount);\\r\\n        }else\\r\\n        {\\r\\n            require(allocation.ReleaseDate < block.timestamp, \\\"Token release has not started yet!\\\");\\r\\n            require(allocation.RemainingAmount > 0, \\\"Insufficient allocation remaining!\\\");\\r\\n            uint256 claimed = allocation.Amount.sub(allocation.RemainingAmount);\\r\\n            uint256 elapsed = block.timestamp.sub(allocation.ReleaseDate);\\r\\n            uint256 releaseTimes = elapsed.div(allocation.IntervalOfRelease * 1 days);\\r\\n            require(releaseTimes > 0, \\\"No interval available!\\\");\\r\\n            uint256 toRelease = allocation.Amount.div(100).mul(allocation.PercentageOfRelease).mul(releaseTimes).sub(claimed);\\r\\n            Allocations[name].RemainingAmount = allocation.RemainingAmount.sub(toRelease);\\r\\n            IBEP20(allocation.Token).transfer(TokenOwner, toRelease);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    modifier RequireTokenOwner(){\\r\\n        require(TokenOwner == _msgSender(), \\\"Caller is not the token owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier OnlyOwner(){\\r\\n        require(Owner == _msgSender(), \\\"Caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/C/GITREPOS/PlatformSolidityBsc/contracts/Factories/BEP20TimelockFactory.sol\": {\r\n      \"content\": \"/*\\r\\n__/\\\\\\\\\\\\________/\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_        \\r\\n _\\\\///\\\\\\\\\\\\____/\\\\\\\\\\\\/____/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\///////////______/\\\\\\\\\\\\////////__       \\r\\n  ___\\\\///\\\\\\\\\\\\/\\\\\\\\\\\\/_____\\\\//\\\\\\\\\\\\______\\\\///__\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\/___________      \\r\\n   _____\\\\///\\\\\\\\\\\\/________\\\\////\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\\\\\\\_____________     \\r\\n    _______\\\\/\\\\\\\\\\\\____________\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\///////______\\\\/\\\\\\\\\\\\_____________    \\r\\n     _______\\\\/\\\\\\\\\\\\_______________\\\\////\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_____________\\\\//\\\\\\\\\\\\____________   \\r\\n      _______\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________\\\\///\\\\\\\\\\\\__________  \\r\\n       _______\\\\/\\\\\\\\\\\\_______\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/___\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_ \\r\\n        _______\\\\///__________\\\\///////////_____\\\\///////////////________\\\\/////////__\\r\\n\\r\\nVisit and follow!\\r\\n\\r\\n* Website:  https://www.ysec.finance\\r\\n* Twitter:  https://twitter.com/YearnSecure\\r\\n* Telegram: https://t.me/YearnSecure\\r\\n* Medium:   https://yearnsecure.medium.com/\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"../BEP20Timelock.sol\\\";\\r\\nimport \\\"../interfaces/IBEP20Timelock.sol\\\";\\r\\nimport \\\"../interfaces/IBEP20TimelockFactory.sol\\\";\\r\\n\\r\\ncontract BEP20TimelockFactory is IBEP20TimelockFactory{\\r\\n    constructor() public{}\\r\\n\\r\\n    function CreateTimelock(address owner, address tokenOwner) external override returns(address){\\r\\n        IBEP20Timelock TokenTimelockInstance = new BEP20Timelock(owner, tokenOwner);\\r\\n        return address(TokenTimelockInstance);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/C/GITREPOS/PlatformSolidityBsc/contracts/Models/TokenAllocation.sol\": {\r\n      \"content\": \"/*\\r\\n__/\\\\\\\\\\\\________/\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_        \\r\\n _\\\\///\\\\\\\\\\\\____/\\\\\\\\\\\\/____/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\///////////______/\\\\\\\\\\\\////////__       \\r\\n  ___\\\\///\\\\\\\\\\\\/\\\\\\\\\\\\/_____\\\\//\\\\\\\\\\\\______\\\\///__\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\/___________      \\r\\n   _____\\\\///\\\\\\\\\\\\/________\\\\////\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\\\\\\\_____________     \\r\\n    _______\\\\/\\\\\\\\\\\\____________\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\///////______\\\\/\\\\\\\\\\\\_____________    \\r\\n     _______\\\\/\\\\\\\\\\\\_______________\\\\////\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_____________\\\\//\\\\\\\\\\\\____________   \\r\\n      _______\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________\\\\///\\\\\\\\\\\\__________  \\r\\n       _______\\\\/\\\\\\\\\\\\_______\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/___\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_ \\r\\n        _______\\\\///__________\\\\///////////_____\\\\///////////////________\\\\/////////__\\r\\n\\r\\nVisit and follow!\\r\\n\\r\\n* Website:  https://www.ysec.finance\\r\\n* Twitter:  https://twitter.com/YearnSecure\\r\\n* Telegram: https://t.me/YearnSecure\\r\\n* Medium:   https://yearnsecure.medium.com/\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nstruct TokenAllocation\\r\\n{\\r\\n    string Name;\\r\\n    uint256 Amount;\\r\\n    uint256 RemainingAmount;\\r\\n    uint256 ReleaseDate;\\r\\n    bool IsInterval;\\r\\n    uint256 PercentageOfRelease;\\r\\n    uint256 IntervalOfRelease;\\r\\n    bool Exists;\\r\\n    address Token;\\r\\n}\"\r\n    },\r\n    \"/C/GITREPOS/PlatformSolidityBsc/contracts/interfaces/IBEP20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\"\r\n    },\r\n    \"/C/GITREPOS/PlatformSolidityBsc/contracts/interfaces/IBEP20Timelock.sol\": {\r\n      \"content\": \"/*\\r\\n__/\\\\\\\\\\\\________/\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_        \\r\\n _\\\\///\\\\\\\\\\\\____/\\\\\\\\\\\\/____/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\///////////______/\\\\\\\\\\\\////////__       \\r\\n  ___\\\\///\\\\\\\\\\\\/\\\\\\\\\\\\/_____\\\\//\\\\\\\\\\\\______\\\\///__\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\/___________      \\r\\n   _____\\\\///\\\\\\\\\\\\/________\\\\////\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\\\\\\\_____________     \\r\\n    _______\\\\/\\\\\\\\\\\\____________\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\///////______\\\\/\\\\\\\\\\\\_____________    \\r\\n     _______\\\\/\\\\\\\\\\\\_______________\\\\////\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_____________\\\\//\\\\\\\\\\\\____________   \\r\\n      _______\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________\\\\///\\\\\\\\\\\\__________  \\r\\n       _______\\\\/\\\\\\\\\\\\_______\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/___\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_ \\r\\n        _______\\\\///__________\\\\///////////_____\\\\///////////////________\\\\/////////__\\r\\n\\r\\nVisit and follow!\\r\\n\\r\\n* Website:  https://www.ysec.finance\\r\\n* Twitter:  https://twitter.com/YearnSecure\\r\\n* Telegram: https://t.me/YearnSecure\\r\\n* Medium:   https://yearnsecure.medium.com/\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\ninterface IBEP20Timelock{\\r\\n    function AllocationLength() external view returns (uint256);\\r\\n    function AddAllocation(string memory name, uint256 amount, uint256 releaseDate, bool isInterval, uint256 percentageOfRelease, uint256 intervalOfRelease, address token) external;\\r\\n    function WithdrawFromAllocation(string memory name) external;\\r\\n}\"\r\n    },\r\n    \"/C/GITREPOS/PlatformSolidityBsc/contracts/interfaces/IBEP20TimelockFactory.sol\": {\r\n      \"content\": \"/*\\r\\n__/\\\\\\\\\\\\________/\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_        \\r\\n _\\\\///\\\\\\\\\\\\____/\\\\\\\\\\\\/____/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\///////////______/\\\\\\\\\\\\////////__       \\r\\n  ___\\\\///\\\\\\\\\\\\/\\\\\\\\\\\\/_____\\\\//\\\\\\\\\\\\______\\\\///__\\\\/\\\\\\\\\\\\_______________/\\\\\\\\\\\\/___________      \\r\\n   _____\\\\///\\\\\\\\\\\\/________\\\\////\\\\\\\\\\\\_________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\\\\\\\_____________     \\r\\n    _______\\\\/\\\\\\\\\\\\____________\\\\////\\\\\\\\\\\\______\\\\/\\\\\\\\\\\\///////______\\\\/\\\\\\\\\\\\_____________    \\r\\n     _______\\\\/\\\\\\\\\\\\_______________\\\\////\\\\\\\\\\\\___\\\\/\\\\\\\\\\\\_____________\\\\//\\\\\\\\\\\\____________   \\r\\n      _______\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\______________\\\\///\\\\\\\\\\\\__________  \\r\\n       _______\\\\/\\\\\\\\\\\\_______\\\\///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/___\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_ \\r\\n        _______\\\\///__________\\\\///////////_____\\\\///////////////________\\\\/////////__\\r\\n\\r\\nVisit and follow!\\r\\n\\r\\n* Website:  https://www.ysec.finance\\r\\n* Twitter:  https://twitter.com/YearnSecure\\r\\n* Telegram: https://t.me/YearnSecure\\r\\n* Medium:   https://yearnsecure.medium.com/\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\ninterface IBEP20TimelockFactory\\r\\n{\\r\\n    function CreateTimelock(address owner, address tokenOwner) external returns(address);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"CreateTimelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BEP20TimelockFactory", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}