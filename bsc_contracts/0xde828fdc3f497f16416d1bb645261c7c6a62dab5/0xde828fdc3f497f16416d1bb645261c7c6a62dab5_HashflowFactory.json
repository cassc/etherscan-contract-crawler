{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/HashflowFactory.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity 0.8.18;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/access/Ownable2Step.sol';\\nimport '@openzeppelin/contracts/proxy/Clones.sol';\\nimport '@openzeppelin/contracts/proxy/utils/Initializable.sol';\\n\\nimport './interfaces/IHashflowFactory.sol';\\nimport './interfaces/IHashflowPool.sol';\\nimport './interfaces/IHashflowRouter.sol';\\n\\n/// @title HashflowFactory\\n/// @author Victor Ionescu\\n/// @notice Implementation of IHashflowFactory.\\ncontract HashflowFactory is IHashflowFactory, Ownable2Step, Initializable {\\n    using Address for address;\\n\\n    address public router;\\n\\n    address public _poolImpl;\\n\\n    mapping(address => bool) public allowedPoolCreators;\\n\\n    /// @inheritdoc IHashflowFactory\\n    function initialize(address _router)\\n        external\\n        override\\n        initializer\\n        onlyOwner\\n    {\\n        require(\\n            _router != address(0),\\n            'HashflowFactory::initialize Router cannot be 0 address.'\\n        );\\n        router = _router;\\n    }\\n\\n    /// @inheritdoc IHashflowFactory\\n    function updatePoolCreatorAuthorization(address poolCreator, bool status)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(\\n            poolCreator != address(0),\\n            'HashflowFactory::updatePoolCreatorAuthorization Pool creator cannot be 0 address.'\\n        );\\n        allowedPoolCreators[poolCreator] = status;\\n        emit UpdatePoolCreatorAuthorization(poolCreator, status);\\n    }\\n\\n    /// @inheritdoc IHashflowFactory\\n    function createPool(string calldata name, address signer)\\n        external\\n        override\\n    {\\n        require(\\n            allowedPoolCreators[_msgSender()],\\n            'HashflowFactory::createPool Not authorized.'\\n        );\\n\\n        require(\\n            router != address(0),\\n            'HashflowFactory::createPool Router has not been initialized.'\\n        );\\n\\n        address newPool = _createPoolInternal(name, signer, _msgSender());\\n\\n        IHashflowRouter(router).updatePoolAuthorization(newPool, true);\\n\\n        emit CreatePool(newPool, _msgSender());\\n    }\\n\\n    function _createPoolInternal(\\n        string memory name,\\n        address signer,\\n        address operations\\n    ) internal virtual returns (address) {\\n        require(\\n            bytes(name).length > 0,\\n            'HashflowFactory::_createPoolInternal Name cannot be empty.'\\n        );\\n        require(\\n            _poolImpl != address(0),\\n            'HasflowFactory::_createPoolInternal Pool implementation not set.'\\n        );\\n\\n        address newPool = Clones.clone(_poolImpl);\\n        IHashflowPool(newPool).initialize(name, signer, operations, router);\\n\\n        require(\\n            newPool != address(0),\\n            'HashflowFactory: new pool is 0 address'\\n        );\\n\\n        return newPool;\\n    }\\n\\n    /// @inheritdoc IHashflowFactory\\n    function updatePoolImpl(address poolImpl) external override onlyOwner {\\n        require(\\n            poolImpl.isContract(),\\n            'HashflowFactory::updatePoolImpl Pool Implementation must be a contract.'\\n        );\\n        require(\\n            _poolImpl == address(0),\\n            'HashflowFactory::updatePoolImpl Pool Implementation cannot be re-initialized.'\\n        );\\n\\n        emit UpdatePoolImplementation(poolImpl, _poolImpl);\\n\\n        _poolImpl = poolImpl;\\n    }\\n\\n    /// @dev We do not allow owner to renounce ownership.\\n    function renounceOwnership() public view override onlyOwner {\\n        revert('HashflowFactory: Renouncing ownership not allowed.');\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHashflowFactory.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity >=0.8.0;\\n\\nimport './IQuote.sol';\\n\\n/// @title IHashflowFactory\\n/// @author Victor Ionescu\\n/**\\n * @notice The Factory's main purpose is to create HashflowPool contracts. Every\\n * Hashflow trade happens within the context of a HashflowPool.\\n *\\n * The Factory tracks implementation contracts that every instance of HashflowPool,\\n * delegates its function calls to.\\n *\\n * The Factory is configured with an instance of a HashflowRouter contract, which\\n * is passed on to pools.\\n */\\ninterface IHashflowFactory is IQuote {\\n    /// @notice Emitted when the owner updates the authorization status of a pool creator\\n    /// @param poolCreator The wallet to create pools.\\n    /// @param authorizationStatus Whether the wallet is now authorized to create pools.\\n    event UpdatePoolCreatorAuthorization(\\n        address poolCreator,\\n        bool authorizationStatus\\n    );\\n\\n    /// @notice Emitted when a pool is created.\\n    /// @param pool The address of the newly created pool.\\n    /// @param operations The Operations key that manages the pool.\\n    event CreatePool(address pool, address operations);\\n\\n    /// @notice Emitted when the implementation of the HashflowPool contract changes.\\n    /// @param poolImpl The address of the new HashflowPool implementation.\\n    /// @param prevPoolImpl The address of the old HashflowPool implementation.\\n    event UpdatePoolImplementation(address poolImpl, address prevPoolImpl);\\n\\n    /// @notice Initializes the Factory.\\n    /// @param router The Hashflow Router.\\n    function initialize(address router) external;\\n\\n    /// @notice Returns the associated Hashflow Router.\\n    function router() external view returns (address);\\n\\n    /// @notice Returns where a Pool Creator is authorized to create pools.\\n    /// @param poolCreator The address of the Pool Creator.\\n    /// @return Whether the creator is allowed to create pools.\\n    function allowedPoolCreators(address poolCreator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice Updates the authorization status for a Pool Creator.\\n    /// @param poolCreator The address of the Pool Creator.\\n    /// @param status The new authorization status.\\n    function updatePoolCreatorAuthorization(address poolCreator, bool status)\\n        external;\\n\\n    /// @notice Creates a HashflowPool smart contract.\\n    /// @param name Name of the pool.\\n    /// @param signer The signer key used to validate signatures.\\n    /// @dev The msg.sender is the operations key that owns and manages the pool.\\n    function createPool(string calldata name, address signer) external;\\n\\n    /**\\n     * @notice Updates the implementation contract that is used to create pools.\\n     * The update only reflects on pools that are created after this update occurs.\\n     * The existing pool contracts are not upgradeable.\\n     */\\n    /// @param poolImpl The address of the new implementation contract.\\n    function updatePoolImpl(address poolImpl) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHashflowPool.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts/interfaces/IERC1271.sol';\\n\\nimport './IQuote.sol';\\n\\n/// @title IHashflowPool\\n/// @author Victor Ionescu\\n/**\\n * Pool contract used for trading. The Pool can either hold funds or\\n * rely on external accounts. External accounts are used in order to preserve\\n * Capital Efficiency on the Market Maker side. This way, a Market Maker can\\n * make markets using funds that are also used on other venues.\\n */\\ninterface IHashflowPool is IQuote, IERC1271 {\\n    /// @notice Specifies a HashflowPool on a foreign chain.\\n    struct AuthorizedXChainPool {\\n        uint16 chainId;\\n        bytes32 pool;\\n    }\\n\\n    /// @notice Contains a signer verification address, and whether trading is enabled.\\n    struct SignerConfiguration {\\n        address signer;\\n        bool enabled;\\n    }\\n\\n    /// @notice Emitted when the authorization status of a withdrawal account changes.\\n    /// @param account The account for which the status changes.\\n    /// @param authorized The new authorization status.\\n    event UpdateWithdrawalAccount(address account, bool authorized);\\n\\n    /// @notice Emitted when the signer key used for the pool has changed.\\n    /// @param signer The new signer key.\\n    /// @param prevSigner The old signer key.\\n    event UpdateSigner(address signer, address prevSigner);\\n\\n    /// @notice Emitted when liquidity is withdrawn from the pool.\\n    /// @param token Token being withdrawn.\\n    /// @param recipient Address receiving the token.\\n    /// @param withdrawAmount Amount being withdrawn.\\n    event RemoveLiquidity(\\n        address token,\\n        address recipient,\\n        uint256 withdrawAmount\\n    );\\n\\n    /// @notice Emitted when an intra-chain trade happens.\\n    /// @param trader The trader.\\n    /// @param effectiveTrader The effective Trader.\\n    /// @param txid The txid of the quote.\\n    /// @param baseToken The token the trader sold.\\n    /// @param quoteToken The token the trader bought.\\n    /// @param baseTokenAmount The amount of baseToken sold.\\n    /// @param quoteTokenAmount The amount of quoteToken bought.\\n    event Trade(\\n        address trader,\\n        address effectiveTrader,\\n        bytes32 txid,\\n        address baseToken,\\n        address quoteToken,\\n        uint256 baseTokenAmount,\\n        uint256 quoteTokenAmount\\n    );\\n\\n    /// @notice Emitted when a cross-chain trade happens.\\n    /// @param dstChainId The Hashflow Chain ID for the destination chain.\\n    /// @param dstPool The pool address on the destination chain.\\n    /// @param trader The trader address.\\n    /// @param txid The txid of the quote.\\n    /// @param baseToken The token the trader sold.\\n    /// @param quoteToken The token the trader bought.\\n    /// @param baseTokenAmount The amount of baseToken sold.\\n    /// @param quoteTokenAmount The amount of quoteToken bought.\\n    event XChainTrade(\\n        uint16 dstChainId,\\n        bytes32 dstPool,\\n        address trader,\\n        bytes32 dstTrader,\\n        bytes32 txid,\\n        address baseToken,\\n        bytes32 quoteToken,\\n        uint256 baseTokenAmount,\\n        uint256 quoteTokenAmount\\n    );\\n\\n    /// @notice Emitted when a cross-chain trade is filled.\\n    /// @param txid The txid identified the quote that was filled.\\n    event XChainTradeFill(bytes32 txid);\\n\\n    /// @notice Main initializer.\\n    /// @param name Name of the pool.\\n    /// @param signer Signer key used for quote / deposit verification.\\n    /// @param operations Operations key that governs the pool.\\n    /// @param router Address of the HashflowRouter contract.\\n    function initialize(\\n        string calldata name,\\n        address signer,\\n        address operations,\\n        address router\\n    ) external;\\n\\n    /// @notice Returns the pool name.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Returns the signer address and whether the pool is enabled.\\n    function signerConfiguration() external view returns (address, bool);\\n\\n    /// @notice Returns the Operations address of this pool.\\n    function operations() external view returns (address);\\n\\n    /// @notice Returns the Router contract address.\\n    function router() external view returns (address);\\n\\n    /// @notice Returns the current nonce for a trader.\\n    function nonces(address trader) external view returns (uint256);\\n\\n    /// @notice Removes liquidity from the pool.\\n    /// @param token Token to withdraw.\\n    /// @param recipient Address to send token to.\\n    /// @param amount Amount to withdraw.\\n    function removeLiquidity(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Execute an RFQ-T trade.\\n    /// @param quote The quote to be executed.\\n    function tradeRFQT(RFQTQuote memory quote) external payable;\\n\\n    /// @notice Execute an RFQ-M trade.\\n    /// @param quote The quote to be executed.\\n    function tradeRFQM(RFQMQuote memory quote) external;\\n\\n    /// @notice Execute a cross-chain RFQ-T trade.\\n    /// @param quote The quote to be executed.\\n    /// @param trader The account that sends baseToken on this chain.\\n    function tradeXChainRFQT(XChainRFQTQuote memory quote, address trader)\\n        external\\n        payable;\\n\\n    /// @notice Execute a cross-chain RFQ-M trade.\\n    /// @param quote The quote to be executed.\\n    function tradeXChainRFQM(XChainRFQMQuote memory quote) external;\\n\\n    /// @notice Changes authorization for a set of pools to send X-Chain messages.\\n    /// @param pools The pools to change authorization status for.\\n    /// @param authorized The new authorization status.\\n    function updateXChainPoolAuthorization(\\n        AuthorizedXChainPool[] calldata pools,\\n        bool authorized\\n    ) external;\\n\\n    /// @notice Changes authorization for an X-Chain Messenger app.\\n    /// @param xChainMessenger The address of the Messenger app.\\n    /// @param authorized The new authorization status.\\n    function updateXChainMessengerAuthorization(\\n        address xChainMessenger,\\n        bool authorized\\n    ) external;\\n\\n    /// @notice Fills an x-chain order that completed on the source chain.\\n    /// @param externalAccount The external account to fill from, if any.\\n    /// @param txid The txid of the quote.\\n    /// @param trader The trader to receive the funds.\\n    /// @param quoteToken The token to be sent.\\n    /// @param quoteTokenAmount The amount of quoteToken to be sent.\\n    function fillXChain(\\n        address externalAccount,\\n        bytes32 txid,\\n        address trader,\\n        address quoteToken,\\n        uint256 quoteTokenAmount\\n    ) external;\\n\\n    /// @notice Updates withdrawal account authorization.\\n    /// @param withdrawalAccounts the accounts for which to update authorization status.\\n    /// @param authorized The new authorization status.\\n    function updateWithdrawalAccount(\\n        address[] memory withdrawalAccounts,\\n        bool authorized\\n    ) external;\\n\\n    /// @notice Updates the signer key.\\n    /// @param signer The new signer key.\\n    function updateSigner(address signer) external;\\n\\n    /// @notice Used by the router to disable pool actions (Trade, Withdraw, Deposit)\\n    function killswitchOperations(bool enabled) external;\\n\\n    /// @notice Returns the token reserves for this pool.\\n    /// @param token The token to check reserves for.\\n    function getReserves(address token) external view returns (uint256);\\n\\n    /// @notice Approves a token for spend. Used for 1inch RFQ protocol.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param spender The spender address (typically the 1inch RFQ order router)\\n    /// @param amount The approval amount.\\n    function approveToken(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Increases allowance for a token. Used for 1inch RFQ protocol.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param spender The spender address (typically the 1inch RFQ order router).\\n    /// @param amount The approval amount.\\n    function increaseTokenAllowance(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice Decreases allowance for a token. Used for 1inch RFQ protocol.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param spender The spender address (typically the 1inch RFQ order router)\\n    /// @param amount The approval amount.\\n    function decreaseTokenAllowance(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHashflowRouter.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity >=0.8.0;\\n\\nimport './IQuote.sol';\\n\\n/// @title IHashflowRouter\\n/// @author Victor Ionescu\\n/**\\n * @notice In terms of user-facing functionality, the Router is responsible for:\\n * - orchestrating trades\\n * - managing cross-chain permissions\\n *\\n * Every trade requires consent from two parties: the Trader and the Market Maker.\\n * However, there are two models to establish consent:\\n * - RFQ-T: in this model, the Market Maker provides an EIP-191 signature for the quote,\\n *   while the Trader signs the transaction and submits it on-chain\\n * - RFQ-M: in this model, the Trader provides an EIP-712 signature for the quote,\\n *   the Market Maker provides an EIP-191 signature, and a 3rd party relays the trade.\\n *   The 3rd party can be the Market Maker itself.\\n *\\n * In terms of Hashflow internals, the Router maintains a set of authorized pool\\n * contracts that are allowed to be used for trading. This allowlist creates\\n * guarantees against malicious behavior, as documented in specific places.\\n *\\n * The Router contract is not upgradeable. In order to change functionality, a new\\n * Router has to be deployed, and new HashflowPool contracts have to be deployed\\n * by the Market Makers.\\n */\\n/// @dev Trade / liquidity events are emitted at the HashflowPool level, rather than the router.\\ninterface IHashflowRouter is IQuote {\\n    /**\\n     * @notice X-Chain message received from an X-Chain Messenger. This is used by the\\n     * Router to communicate a fill to a HashflowPool.\\n     */\\n    struct XChainFillMessage {\\n        /// @notice The Hashflow Chain ID of the source chain.\\n        uint16 srcHashflowChainId;\\n        /// @notice The address of the HashflowPool on the source chain.\\n        bytes32 srcPool;\\n        /// @notice The HashflowPool to disburse funds on the destination chain.\\n        address dstPool;\\n        /**\\n         * @notice The external account linked to the HashflowPool on the destination chain.\\n         * If the HashflowPool holds funds, this should be bytes32(0).\\n         */\\n        address dstExternalAccount;\\n        /// @notice The recipient of the quoteToken on the destination chain.\\n        address dstTrader;\\n        /// @notice The token that the trader buys on the destination chain.\\n        address quoteToken;\\n        /// @notice The amount of quoteToken bought.\\n        uint256 quoteTokenAmount;\\n        /// @notice Unique identifier for the quote.\\n        /// @dev Generated off-chain via a distributed UUID generator.\\n        bytes32 txid;\\n        /// @notice The caller of the trade function on the source chain.\\n        bytes32 srcCaller;\\n        /// @notice The contract to call, if any.\\n        address dstContract;\\n        /// @notice The calldata for the contract.\\n        bytes dstContractCalldata;\\n    }\\n\\n    /// @notice Emitted when the authorization status of a pool changes.\\n    /// @param pool The pool whose status changed.\\n    /// @param authorized The new auth status.\\n    event UpdatePoolAuthorizaton(address pool, bool authorized);\\n\\n    /// @notice Emitted when a sender pool authorization changes.\\n    /// @param pool Pool address on this chain.\\n    /// @param otherHashflowChainId Hashflow Chain ID of the other chain.\\n    /// @param otherChainPool Pool address on the other chain.\\n    /// @param authorized Whether the pool is authorized.\\n    event UpdateXChainPoolAuthorization(\\n        address indexed pool,\\n        uint16 otherHashflowChainId,\\n        bytes32 otherChainPool,\\n        bool authorized\\n    );\\n\\n    /// @notice Emitted when the authorization of an x-caller changes.\\n    /// @param pool Pool address on this chain.\\n    /// @param otherHashflowChainId Hashflow Chain ID of the other chain.\\n    /// @param caller Caller address on the other chain.\\n    /// @param authorized Whether the caller is authorized.\\n    event UpdateXChainCallerAuthorization(\\n        address indexed pool,\\n        uint16 otherHashflowChainId,\\n        bytes32 caller,\\n        bool authorized\\n    );\\n\\n    /// @notice Emitted when the authorization status of an X-Chain Messenger changes for a pool.\\n    /// @param pool Pool address for which the Messenger authorization changes.\\n    /// @param xChainMessenger Address of the Messenger.\\n    /// @param authorized Whether the X-Chain Messenger is authorized.\\n    event UpdateXChainMessengerAuthorization(\\n        address indexed pool,\\n        address xChainMessenger,\\n        bool authorized\\n    );\\n\\n    /// @notice Emitted when the authorized status of an X-Chain Messenger changes for a callee.\\n    /// @param callee Address of the callee.\\n    /// @param xChainMessenger Address of the Messenger.\\n    /// @param authorized Whether the X-Chain Messenger is authorized.\\n    event UpdateXChainMessengerCallerAuthorization(\\n        address indexed callee,\\n        address xChainMessenger,\\n        bool authorized\\n    );\\n\\n    /// @notice Emitted when the Limit Order Guardian address is updated.\\n    /// @param guardian The new Guardian address.\\n    event UpdateLimitOrderGuardian(address guardian);\\n\\n    /// @notice Initializes the Router. Called one time.\\n    /// @param factory The address of the HashflowFactory contract.\\n    function initialize(address factory) external;\\n\\n    /// @notice Returns the address of the associated HashflowFactor contract.\\n    function factory() external view returns (address);\\n\\n    function authorizedXChainPools(\\n        bytes32 dstPool,\\n        uint16 srcHChainId,\\n        bytes32 srcPool\\n    ) external view returns (bool);\\n\\n    function authorizedXChainCallers(\\n        address dstContract,\\n        uint16 srcHashflowChainId,\\n        bytes32 caller\\n    ) external view returns (bool);\\n\\n    function authorizedXChainMessengersByPool(address pool, address messenger)\\n        external\\n        view\\n        returns (bool);\\n\\n    function authorizedXChainMessengersByCallee(\\n        address callee,\\n        address messenger\\n    ) external view returns (bool);\\n\\n    /// @notice Executes an intra-chain RFQ-T trade.\\n    /// @param quote The quote data to be executed.\\n    function tradeRFQT(RFQTQuote memory quote) external payable;\\n\\n    /// @notice Executes an intra-chain RFQ-T trade, leveraging an ERC-20 permit.\\n    /// @param quote The quote data to be executed.\\n    /// @dev Does not support native tokens for the baseToken.\\n    function tradeRFQTWithPermit(\\n        RFQTQuote memory quote,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 amountToApprove\\n    ) external;\\n\\n    /// @notice Executes an intra-chain RFQ-T trade.\\n    /// @param quote The quote to be executed.\\n    function tradeRFQM(RFQMQuote memory quote) external;\\n\\n    /// @notice Executes an intra-chain RFQ-T trade, leveraging an ERC-20 permit.\\n    /// @param quote The quote to be executed.\\n    /// @param deadline The deadline of the ERC-20 permit.\\n    /// @param v v-part of the signature.\\n    /// @param r r-part of the signature.\\n    /// @param s s-part of the signature.\\n    /// @param amountToApprove The amount being approved.\\n    function tradeRFQMWithPermit(\\n        RFQMQuote memory quote,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 amountToApprove\\n    ) external;\\n\\n    /// @notice Executes an intra-chain RFQ-T trade.\\n    /// @param quote The quote to be executed.\\n    /// @param guardianSignature A signature issued by the Limit Order Guardian.\\n    function tradeRFQMLimitOrder(\\n        RFQMQuote memory quote,\\n        bytes memory guardianSignature\\n    ) external;\\n\\n    /// @notice Executes an intra-chain RFQ-T trade, leveraging an ERC-20 permit.\\n    /// @param quote The quote to be executed.\\n    /// @param guardianSignature A signature issued by the Limit Order Guardian.\\n    /// @param deadline The deadline of the ERC-20 permit.\\n    /// @param v v-part of the signature.\\n    /// @param r r-part of the signature.\\n    /// @param s s-part of the signature.\\n    /// @param amountToApprove The amount being approved.\\n    function tradeRFQMLimitOrderWithPermit(\\n        RFQMQuote memory quote,\\n        bytes memory guardianSignature,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 amountToApprove\\n    ) external;\\n\\n    /// @notice Executes an RFQ-T cross-chain trade.\\n    /// @param quote The quote to be executed.\\n    /// @param dstContract The address of the contract to be called on the destination chain.\\n    /// @param dstCalldata The calldata for the smart contract call.\\n    function tradeXChainRFQT(\\n        XChainRFQTQuote memory quote,\\n        bytes32 dstContract,\\n        bytes memory dstCalldata\\n    ) external payable;\\n\\n    /// @notice Executes an RFQ-T cross-chain trade, leveraging an ERC-20 permit.\\n    /// @param quote The quote to be executed.\\n    /// @param dstContract The address of the contract to be called on the destination chain.\\n    /// @param dstCalldata The calldata for the smart contract call.\\n    /// @param deadline The deadline of the ERC-20 permit.\\n    /// @param v v-part of the signature.\\n    /// @param r r-part of the signature.\\n    /// @param s s-part of the signature.\\n    /// @param amountToApprove The amount being approved.\\n    function tradeXChainRFQTWithPermit(\\n        XChainRFQTQuote memory quote,\\n        bytes32 dstContract,\\n        bytes memory dstCalldata,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 amountToApprove\\n    ) external payable;\\n\\n    /// @notice Executes an RFQ-M cross-chain trade.\\n    /// @param quote The quote to be executed.\\n    /// @param dstContract The address of the contract to be called on the destination chain.\\n    /// @param dstCalldata The calldata for the smart contract call.\\n    function tradeXChainRFQM(\\n        XChainRFQMQuote memory quote,\\n        bytes32 dstContract,\\n        bytes memory dstCalldata\\n    ) external payable;\\n\\n    /// @notice Similar to tradeXChainRFQm, but includes a spend permit for the baseToken.\\n    /// @param quote The quote to be executed.\\n    /// @param dstContract The address of the contract to be called on the destination chain.\\n    /// @param dstCalldata The calldata for the smart contract call.\\n    /// @param deadline The deadline of the ERC-20 permit.\\n    /// @param v v-part of the signature.\\n    /// @param r r-part of the signature.\\n    /// @param s s-part of the signature.\\n    /// @param amountToApprove The amount to approve.\\n    function tradeXChainRFQMWithPermit(\\n        XChainRFQMQuote memory quote,\\n        bytes32 dstContract,\\n        bytes memory dstCalldata,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 amountToApprove\\n    ) external payable;\\n\\n    /// @notice Completes the second leg of a cross-chain trade.\\n    /// @param fillMessage Payload containing information necessary to complete the trade.\\n    function fillXChain(XChainFillMessage memory fillMessage) external;\\n\\n    /// @notice Returns whether the pool is authorized for trading.\\n    /// @param pool The address of the HashflowPool.\\n    function authorizedPools(address pool) external view returns (bool);\\n\\n    /// @notice Allows the owner to unauthorize a potentially compromised pool. Cannot be reverted.\\n    /// @param pool The address of the HashflowPool.\\n    function forceUnauthorizePool(address pool) external;\\n\\n    /// @notice Authorizes a HashflowPool for trading.\\n    /// @dev Can only be called by the HashflowFactory or the admin.\\n    function updatePoolAuthorization(address pool, bool authorized) external;\\n\\n    /// @notice Updates the authorization status of an X-Chain pool pair.\\n    /// @param otherHashflowChainId The Hashflow Chain ID of the peer chain.\\n    /// @param otherPool The 32-byte representation of the Pool address on the peer chain.\\n    /// @param authorized Whether the pool is authorized to communicate with the sender pool.\\n    function updateXChainPoolAuthorization(\\n        uint16 otherHashflowChainId,\\n        bytes32 otherPool,\\n        bool authorized\\n    ) external;\\n\\n    /// @notice Updates the authorization status of an X-Chain caller.\\n    /// @param otherHashflowChainId The Hashflow Chain ID of the peer chain.\\n    /// @param caller The caller address.\\n    /// @param authorized Whether the caller is authorized to send an x-call to the sender pool.\\n    function updateXChainCallerAuthorization(\\n        uint16 otherHashflowChainId,\\n        bytes32 caller,\\n        bool authorized\\n    ) external;\\n\\n    /// @notice Updates the authorization status of an X-Chain Messenger app.\\n    /// @param xChainMessenger The address of the Messenger App.\\n    /// @param authorized The new authorization status.\\n    function updateXChainMessengerAuthorization(\\n        address xChainMessenger,\\n        bool authorized\\n    ) external;\\n\\n    /// @notice Updates the authorization status of an X-Chain Messenger app.\\n    /// @param xChainMessenger The address of the Messenger App.\\n    /// @param authorized The new authorization status.\\n    function updateXChainMessengerCallerAuthorization(\\n        address xChainMessenger,\\n        bool authorized\\n    ) external;\\n\\n    /// @notice Used to stop all operations on a pool, in case of an emergency.\\n    /// @param pool The address of the HashflowPool.\\n    /// @param enabled Whether the pool is enabled.\\n    function killswitchPool(address pool, bool enabled) external;\\n\\n    /// @notice Used to update the Limit Order Guardian.\\n    /// @param guardian The address of the new Guardian.\\n    function updateLimitOrderGuardian(address guardian) external;\\n\\n    /// @notice Allows the owner to withdraw excess funds from the Router.\\n    /// @dev Under normal operations, the Router should not have excess funds.\\n    function withdrawFunds(address token) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IQuote.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity >=0.8.0;\\n\\n/// @title IQuote\\n/// @author Victor Ionescu\\n/**\\n * @notice Interface for quote structs used for trading. There are two major types of trades:\\n * - intra-chain: atomic transactions within one chain\\n * - cross-chain: multi-leg transactions between two chains, which utilize interoperability protocols\\n *                such as Wormhole.\\n *\\n * Separately, there are two trading modes:\\n * - RFQ-T: the trader signs the transaction, the market maker signs the quote\\n * - RFQ-M: both the trader and Market Maker sign the quote, any relayer can sign the transaction\\n */\\ninterface IQuote {\\n    /// @notice Used for intra-chain RFQ-T trades.\\n    struct RFQTQuote {\\n        /// @notice The address of the HashflowPool to trade against.\\n        address pool;\\n        /**\\n         * @notice The external account linked to the HashflowPool.\\n         * If the HashflowPool holds funds, this should be address(0).\\n         */\\n        address externalAccount;\\n        /// @notice The recipient of the quoteToken at the end of the trade.\\n        address trader;\\n        /**\\n         * @notice The account \\\"effectively\\\" making the trade (ultimately receiving the funds).\\n         * This is commonly used by aggregators, where a proxy contract (the 'trader')\\n         * receives the quoteToken, and the effective trader is the user initiating the call.\\n         *\\n         * This field DOES NOT influence movement of funds. However, it is used to check against\\n         * quote replay.\\n         */\\n        address effectiveTrader;\\n        /// @notice The token that the trader sells.\\n        address baseToken;\\n        /// @notice The token that the trader buys.\\n        address quoteToken;\\n        /**\\n         * @notice The amount of baseToken sold in this trade. The exchange rate\\n         * is going to be preserved as the quoteTokenAmount / baseTokenAmount ratio.\\n         *\\n         * Most commonly, effectiveBaseTokenAmount will == baseTokenAmount.\\n         */\\n        uint256 effectiveBaseTokenAmount;\\n        /// @notice The max amount of baseToken sold.\\n        uint256 baseTokenAmount;\\n        /// @notice The amount of quoteToken bought when baseTokenAmount is sold.\\n        uint256 quoteTokenAmount;\\n        /// @notice The Unix timestamp (in seconds) when the quote expires.\\n        /// @dev This gets checked against block.timestamp.\\n        uint256 quoteExpiry;\\n        /// @notice The nonce used by this effectiveTrader. Nonces are used to protect against replay.\\n        uint256 nonce;\\n        /// @notice Unique identifier for the quote.\\n        /// @dev Generated off-chain via a distributed UUID generator.\\n        bytes32 txid;\\n        /// @notice Signature provided by the market maker (EIP-191).\\n        bytes signature;\\n    }\\n\\n    /// @notice Used for intra-chain RFQ-M trades.\\n    struct RFQMQuote {\\n        /// @notice The address of the HashflowPool to trade against.\\n        address pool;\\n        /**\\n         * @notice The external account linked to the HashflowPool.\\n         * If the HashflowPool holds funds, this should be address(0).\\n         */\\n        address externalAccount;\\n        /// @notice The account that will be debited baseToken / credited quoteToken.\\n        address trader;\\n        /// @notice The token that the trader sells.\\n        address baseToken;\\n        /// @notice The token that the trader buys.\\n        address quoteToken;\\n        /// @notice The amount of baseToken sold.\\n        uint256 baseTokenAmount;\\n        /// @notice The amount of quoteToken bought.\\n        uint256 quoteTokenAmount;\\n        /// @notice The Unix timestamp (in seconds) when the quote expires.\\n        /// @dev This gets checked against block.timestamp.\\n        uint256 quoteExpiry;\\n        /// @notice Unique identifier for the quote.\\n        /// @dev Generated off-chain via a distributed UUID generator.\\n        bytes32 txid;\\n        /// @notice Signature provided by the trader (EIP-712).\\n        bytes takerSignature;\\n        /// @notice Signature provided by the market maker (EIP-191).\\n        bytes makerSignature;\\n    }\\n\\n    /// @notice Used for cross-chain RFQ-T trades.\\n    struct XChainRFQTQuote {\\n        /// @notice The Hashflow Chain ID of the source chain.\\n        uint16 srcChainId;\\n        /// @notice The Hashflow Chain ID of the destination chain.\\n        uint16 dstChainId;\\n        /// @notice The address of the HashflowPool to trade against on the source chain.\\n        address srcPool;\\n        /// @notice The HashflowPool to disburse funds on the destination chain.\\n        /// @dev This is bytes32 in order to anticipate non-EVM chains.\\n        bytes32 dstPool;\\n        /**\\n         * @notice The external account linked to the HashflowPool on the source chain.\\n         * If the HashflowPool holds funds, this should be address(0).\\n         */\\n        address srcExternalAccount;\\n        /**\\n         * @notice The external account linked to the HashflowPool on the destination chain.\\n         * If the HashflowPool holds funds, this should be bytes32(0).\\n         */\\n        bytes32 dstExternalAccount;\\n        /// @notice The recipient of the quoteToken on the destination chain.\\n        bytes32 dstTrader;\\n        /// @notice The token that the trader sells on the source chain.\\n        address baseToken;\\n        /// @notice The token that the trader buys on the destination chain.\\n        bytes32 quoteToken;\\n        /**\\n         * @notice The amount of baseToken sold in this trade. The exchange rate\\n         * is going to be preserved as the quoteTokenAmount / baseTokenAmount ratio.\\n         *\\n         * Most commonly, effectiveBaseTokenAmount will == baseTokenAmount.\\n         */\\n        uint256 effectiveBaseTokenAmount;\\n        /// @notice The amount of baseToken sold.\\n        uint256 baseTokenAmount;\\n        /// @notice The amount of quoteToken bought.\\n        uint256 quoteTokenAmount;\\n        /**\\n         * @notice The Unix timestamp (in seconds) when the quote expire. Only enforced\\n         * on the source chain.\\n         */\\n        /// @dev This gets checked against block.timestamp.\\n        uint256 quoteExpiry;\\n        /// @notice The nonce used by this trader.\\n        uint256 nonce;\\n        /// @notice Unique identifier for the quote.\\n        /// @dev Generated off-chain via a distributed UUID generator.\\n        bytes32 txid;\\n        /**\\n         * @notice The address of the IHashflowXChainMessenger contract used for\\n         * cross-chain communication.\\n         */\\n        address xChainMessenger;\\n        /// @notice Signature provided by the market maker (EIP-191).\\n        bytes signature;\\n    }\\n\\n    /// @notice Used for Cross-Chain RFQ-M trades.\\n    struct XChainRFQMQuote {\\n        /// @notice The Hashflow Chain ID of the source chain.\\n        uint16 srcChainId;\\n        /// @notice The Hashflow Chain ID of the destination chain.\\n        uint16 dstChainId;\\n        /// @notice The address of the HashflowPool to trade against on the source chain.\\n        address srcPool;\\n        /// @notice The HashflowPool to disburse funds on the destination chain.\\n        /// @dev This is bytes32 in order to anticipate non-EVM chains.\\n        bytes32 dstPool;\\n        /**\\n         * @notice The external account linked to the HashflowPool on the source chain.\\n         * If the HashflowPool holds funds, this should be address(0).\\n         */\\n        address srcExternalAccount;\\n        /**\\n         * @notice The external account linked to the HashflowPool on the destination chain.\\n         * If the HashflowPool holds funds, this should be bytes32(0).\\n         */\\n        bytes32 dstExternalAccount;\\n        /// @notice The account that will be debited baseToken on the source chain.\\n        address trader;\\n        /// @notice The recipient of the quoteToken on the destination chain.\\n        bytes32 dstTrader;\\n        /// @notice The token that the trader sells on the source chain.\\n        address baseToken;\\n        /// @notice The token that the trader buys on the destination chain.\\n        bytes32 quoteToken;\\n        /// @notice The amount of baseToken sold.\\n        uint256 baseTokenAmount;\\n        /// @notice The amount of quoteToken bought.\\n        uint256 quoteTokenAmount;\\n        /**\\n         * @notice The Unix timestamp (in seconds) when the quote expire. Only enforced\\n         * on the source chain.\\n         */\\n        /// @dev This gets checked against block.timestamp.\\n        uint256 quoteExpiry;\\n        /// @notice Unique identifier for the quote.\\n        /// @dev Generated off-chain via a distributed UUID generator.\\n        bytes32 txid;\\n        /**\\n         * @notice The address of the IHashflowXChainMessenger contract used for\\n         * cross-chain communication.\\n         */\\n        address xChainMessenger;\\n        /// @notice Signature provided by the trader (EIP-712).\\n        bytes takerSignature;\\n        /// @notice Signature provided by the market maker (EIP-191).\\n        bytes makerSignature;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operations\",\"type\":\"address\"}],\"name\":\"CreatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"authorizationStatus\",\"type\":\"bool\"}],\"name\":\"UpdatePoolCreatorAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolImpl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevPoolImpl\",\"type\":\"address\"}],\"name\":\"UpdatePoolImplementation\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_poolImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedPoolCreators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolCreator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updatePoolCreatorAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolImpl\",\"type\":\"address\"}],\"name\":\"updatePoolImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "HashflowFactory", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}