{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.10;\\n\\n/**\\n * @notice This codes were copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/ERC721Enumerable.sol, and did some changes.\\n * @dev This implements an optional extension of defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\n\\nabstract contract Enumerable {\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {\\n        require(index < _balances[owner], \\\"Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    function balanceOf(address owner) public view returns (uint256) {\\n        require(owner != address(0), \\\"Enumerable: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    function addToken(address from, uint256 tokenId) internal {\\n        _addTokenToOwnerEnumeration(from, tokenId);\\n        unchecked {\\n            _balances[from] += 1;\\n        }\\n    }\\n\\n    function removeToken(address from, uint256 tokenId) internal {\\n        _removeTokenFromOwnerEnumeration(from, tokenId);\\n        unchecked {\\n            _balances[from] -= 1;\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = _balances[to];\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _balances[from] - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n        require(tokenId == _ownedTokens[from][tokenIndex], \\\"Invalid tokenId\\\");\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFarmBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IFarmBooster {\\n    function getUserMultiplier(uint256 _tokenId) external view returns (uint256);\\n\\n    function whiteList(uint256 _pid) external view returns (bool);\\n\\n    function updatePositionBoostMultiplier(uint256 _tokenId) external returns (uint256 _multiplier);\\n\\n    function removeBoostMultiplier(address _user, uint256 _tokenId, uint256 _pid) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILMPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface ILMPool {\\n    function updatePosition(int24 tickLower, int24 tickUpper, int128 liquidityDelta) external;\\n\\n    function getRewardGrowthInside(\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) external view returns (uint256 rewardGrowthInsideX128);\\n\\n    function accumulateReward(uint32 currTimestamp) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILMPoolDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ISquadV3Pool.sol\\\";\\nimport \\\"./ILMPool.sol\\\";\\n\\ninterface ILMPoolDeployer {\\n    function deploy(ISquadV3Pool pool) external returns (ILMPool lmPool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMasterChefV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IMasterChefV2 {\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function pendingSquad(uint256 _pid, address _user) external view returns (uint256);\\n\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function updateBoostMultiplier(address _user, uint256 _pid, uint256 _newBoostMulti) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INonfungiblePositionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.10;\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"./INonfungiblePositionManagerStruct.sol\\\";\\n\\ninterface INonfungiblePositionManager is INonfungiblePositionManagerStruct, IERC721 {\\n    /// @notice Returns the position information associated with a given token ID.\\n    /// @dev Throws if the token ID is not valid.\\n    /// @param tokenId The ID of the token that represents the position\\n    /// @return nonce The nonce for permits\\n    /// @return operator The address that is approved for spending\\n    /// @return token0 The address of the token0 for a specific pool\\n    /// @return token1 The address of the token1 for a specific pool\\n    /// @return fee The fee associated with the pool\\n    /// @return tickLower The lower end of the tick range for the position\\n    /// @return tickUpper The higher end of the tick range for the position\\n    /// @return liquidity The liquidity of the position\\n    /// @return feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\\n    /// @return feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\\n    /// @return tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\\n    /// @return tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\\n    function positions(\\n        uint256 tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(\\n        IncreaseLiquidityParams calldata params\\n    ) external payable returns (uint128 liquidity, uint256 amount0, uint256 amount1);\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(\\n        DecreaseLiquidityParams calldata params\\n    ) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\\n    /// must be collected first.\\n    /// @param tokenId The ID of the token that is being burned\\n    function burn(uint256 tokenId) external payable;\\n\\n    function refundETH() external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INonfungiblePositionManagerStruct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.10;\\n\\ninterface INonfungiblePositionManagerStruct {\\n    struct IncreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint256 amount0Desired;\\n        uint256 amount1Desired;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    struct DecreaseLiquidityParams {\\n        uint256 tokenId;\\n        uint128 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        uint256 deadline;\\n    }\\n\\n    struct CollectParams {\\n        uint256 tokenId;\\n        address recipient;\\n        uint128 amount0Max;\\n        uint128 amount1Max;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISquadV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.10;\\n\\ninterface ISquadV3Pool {\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function fee() external view returns (uint24);\\n\\n    function lmPool() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Interface for WETH9\\ninterface IWETH is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2 ** 128, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MasterChefV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./libraries/SafeCast.sol\\\";\\nimport \\\"./interfaces/INonfungiblePositionManager.sol\\\";\\nimport \\\"./interfaces/INonfungiblePositionManagerStruct.sol\\\";\\nimport \\\"./interfaces/ISquadV3Pool.sol\\\";\\nimport \\\"./interfaces/IMasterChefV2.sol\\\";\\nimport \\\"./interfaces/ILMPool.sol\\\";\\nimport \\\"./interfaces/ILMPoolDeployer.sol\\\";\\nimport \\\"./interfaces/IFarmBooster.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./utils/Multicall.sol\\\";\\nimport \\\"./Enumerable.sol\\\";\\n\\ncontract MasterChefV3 is INonfungiblePositionManagerStruct, Multicall, Ownable, ReentrancyGuard, Enumerable {\\n    using SafeERC20 for IERC20;\\n    using SafeCast for uint256;\\n    struct PoolInfo {\\n        uint256 allocPoint;\\n        // V3 pool address\\n        ISquadV3Pool v3Pool;\\n        // V3 pool token0 address\\n        address token0;\\n        // V3 pool token1 address\\n        address token1;\\n        // V3 pool fee\\n        uint24 fee;\\n        // total liquidity staking in the pool\\n        uint256 totalLiquidity;\\n        // total boost liquidity staking in the pool\\n        uint256 totalBoostLiquidity;\\n    }\\n\\n    struct UserPositionInfo {\\n        uint128 liquidity;\\n        uint128 boostLiquidity;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 rewardGrowthInside;\\n        uint256 reward;\\n        address user;\\n        uint256 pid;\\n        uint256 boostMultiplier;\\n    }\\n\\n    uint256 public poolLength;\\n    /// @notice Info of each MCV3 pool.\\n    mapping(uint256 => PoolInfo) public poolInfo;\\n\\n    /// @notice userPositionInfos[tokenId] => UserPositionInfo\\n    /// @dev TokenId is unique, and we can query the pid by tokenId.\\n    mapping(uint256 => UserPositionInfo) public userPositionInfos;\\n\\n    /// @notice v3PoolPid[token0][token1][fee] => pid\\n    mapping(address => mapping(address => mapping(uint24 => uint256))) v3PoolPid;\\n    /// @notice v3PoolAddressPid[v3PoolAddress] => pid\\n    mapping(address => uint256) public v3PoolAddressPid;\\n\\n    /// @notice Address of SQUAD contract.\\n    IERC20 public immutable SQUAD;\\n\\n    /// @notice Address of WETH contract.\\n    address public immutable WETH;\\n\\n    /// @notice Address of Receiver contract.\\n    address public receiver;\\n\\n    INonfungiblePositionManager public immutable nonfungiblePositionManager;\\n\\n    /// @notice Address of liquidity mining pool deployer contract.\\n    ILMPoolDeployer public LMPoolDeployer;\\n\\n    /// @notice Address of farm booster contract.\\n    // IFarmBooster public FARM_BOOSTER;\\n\\n    /// @notice Only use for emergency situations.\\n    bool public emergency;\\n\\n    /// @notice Total allocation points. Must be the sum of all pools' allocation points.\\n    uint256 public totalAllocPoint;\\n\\n    uint256 public latestPeriodNumber;\\n    uint256 public latestPeriodStartTime;\\n    uint256 public latestPeriodEndTime;\\n    uint256 public latestPeriodSquadPerSecond;\\n\\n    /// @notice Address of the operator.\\n    address public operatorAddress;\\n    /// @notice Default period duration.\\n    uint256 public PERIOD_DURATION = 1 days;\\n    uint256 public constant MAX_DURATION = 30 days;\\n    uint256 public constant MIN_DURATION = 1 days;\\n    uint256 public constant PRECISION = 1e12;\\n    /// @notice Basic boost factor, none boosted user's boost factor\\n    uint256 public constant BOOST_PRECISION = 100 * 1e10;\\n    /// @notice Hard limit for maxmium boost factor, it must greater than BOOST_PRECISION\\n    uint256 public constant MAX_BOOST_PRECISION = 200 * 1e10;\\n    uint256 constant Q128 = 0x100000000000000000000000000000000;\\n    uint256 constant MAX_U256 = type(uint256).max;\\n\\n    /// @notice Record the squad amount belong to MasterChefV3.\\n    uint256 public squadAmountBelongToMC;\\n\\n    error ZeroAddress();\\n    error NotOwnerOrOperator();\\n    error NoBalance();\\n    error NotSquadNFT();\\n    error InvalidNFT();\\n    error NotOwner();\\n    error NoLiquidity();\\n    error InvalidPeriodDuration();\\n    error NoLMPool();\\n    error InvalidPid();\\n    error DuplicatedPool(uint256 pid);\\n    error NotEmpty();\\n    error WrongReceiver();\\n    error InconsistentAmount();\\n    error InsufficientAmount();\\n\\n    event AddPool(uint256 indexed pid, uint256 allocPoint, ISquadV3Pool indexed v3Pool, ILMPool indexed lmPool);\\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\\n    event Deposit(\\n        address indexed from,\\n        uint256 indexed pid,\\n        uint256 indexed tokenId,\\n        uint256 liquidity,\\n        int24 tickLower,\\n        int24 tickUpper\\n    );\\n    event Withdraw(address indexed from, address to, uint256 indexed pid, uint256 indexed tokenId);\\n    event UpdateLiquidity(\\n        address indexed from,\\n        uint256 indexed pid,\\n        uint256 indexed tokenId,\\n        int128 liquidity,\\n        int24 tickLower,\\n        int24 tickUpper\\n    );\\n    event NewOperatorAddress(address operator);\\n    event NewLMPoolDeployerAddress(address deployer);\\n    event NewReceiver(address receiver);\\n    event NewPeriodDuration(uint256 periodDuration);\\n    event Harvest(address indexed sender, address to, uint256 indexed pid, uint256 indexed tokenId, uint256 reward);\\n    event NewUpkeepPeriod(\\n        uint256 indexed periodNumber,\\n        uint256 startTime,\\n        uint256 endTime,\\n        uint256 squadPerSecond,\\n        uint256 squadAmount\\n    );\\n    event UpdateUpkeepPeriod(\\n        uint256 indexed periodNumber,\\n        uint256 oldEndTime,\\n        uint256 newEndTime,\\n        uint256 remainingSquad\\n    );\\n    event UpdateFarmBoostContract(address indexed farmBoostContract);\\n    event SetEmergency(bool emergency);\\n\\n    modifier onlyOwnerOrOperator() {\\n        if (msg.sender != operatorAddress && msg.sender != owner()) revert NotOwnerOrOperator();\\n        _;\\n    }\\n\\n    modifier onlyValidPid(uint256 _pid) {\\n        if (_pid == 0 || _pid > poolLength) revert InvalidPid();\\n        _;\\n    }\\n\\n    modifier onlyReceiver() {\\n        require(receiver == msg.sender, \\\"Not receiver\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if caller is not the boost contract.\\n     */\\n    // modifier onlyBoostContract() {\\n    //     require(address(FARM_BOOSTER) == msg.sender, \\\"Not farm boost contract\\\");\\n    //     _;\\n    // }\\n\\n    /// @param _SQUAD The SQUAD token contract address.\\n    /// @param _nonfungiblePositionManager the NFT position manager contract address.\\n    constructor(IERC20 _SQUAD, INonfungiblePositionManager _nonfungiblePositionManager, address _WETH) {\\n        SQUAD = _SQUAD;\\n        nonfungiblePositionManager = _nonfungiblePositionManager;\\n        WETH = _WETH;\\n    }\\n\\n    /// @notice Returns the squad per second , period end time.\\n    /// @param _pid The pool pid.\\n    /// @return squadPerSecond Squad reward per second.\\n    /// @return endTime Period end time.\\n    function getLatestPeriodInfoByPid(uint256 _pid) public view returns (uint256 squadPerSecond, uint256 endTime) {\\n        if (totalAllocPoint > 0) {\\n            squadPerSecond = (latestPeriodSquadPerSecond * poolInfo[_pid].allocPoint) / totalAllocPoint;\\n        }\\n        endTime = latestPeriodEndTime;\\n    }\\n\\n    /// @notice Returns the squad per second , period end time. This is for liquidity mining pool.\\n    /// @param _v3Pool Address of the V3 pool.\\n    /// @return squadPerSecond Squad reward per second.\\n    /// @return endTime Period end time.\\n    function getLatestPeriodInfo(address _v3Pool) public view returns (uint256 squadPerSecond, uint256 endTime) {\\n        if (totalAllocPoint > 0) {\\n            squadPerSecond =\\n                (latestPeriodSquadPerSecond * poolInfo[v3PoolAddressPid[_v3Pool]].allocPoint) /\\n                totalAllocPoint;\\n        }\\n        endTime = latestPeriodEndTime;\\n    }\\n\\n    /// @notice View function for checking pending SQUAD rewards.\\n    /// @dev The pending squad amount is based on the last state in LMPool. The actual amount will happen whenever liquidity changes or harvest.\\n    /// @param _tokenId Token Id of NFT.\\n    /// @return reward Pending reward.\\n    function pendingSquad(uint256 _tokenId) external view returns (uint256 reward) {\\n        UserPositionInfo memory positionInfo = userPositionInfos[_tokenId];\\n        if (positionInfo.pid != 0) {\\n            PoolInfo memory pool = poolInfo[positionInfo.pid];\\n            ILMPool LMPool = ILMPool(pool.v3Pool.lmPool());\\n            if (address(LMPool) != address(0)) {\\n                uint256 rewardGrowthInside = LMPool.getRewardGrowthInside(\\n                    positionInfo.tickLower,\\n                    positionInfo.tickUpper\\n                );\\n                if (\\n                    rewardGrowthInside > positionInfo.rewardGrowthInside &&\\n                    MAX_U256 / (rewardGrowthInside - positionInfo.rewardGrowthInside) > positionInfo.boostLiquidity\\n                )\\n                    reward =\\n                        ((rewardGrowthInside - positionInfo.rewardGrowthInside) * positionInfo.boostLiquidity) /\\n                        Q128;\\n            }\\n            reward += positionInfo.reward;\\n        }\\n    }\\n\\n    /// @notice For emergency use only.\\n    function setEmergency(bool _emergency) external onlyOwner {\\n        emergency = _emergency;\\n        emit SetEmergency(emergency);\\n    }\\n\\n    function setReceiver(address _receiver) external onlyOwner {\\n        if (_receiver == address(0)) revert ZeroAddress();\\n        if (SQUAD.allowance(_receiver, address(this)) != type(uint256).max) revert();\\n        receiver = _receiver;\\n        emit NewReceiver(_receiver);\\n    }\\n\\n    function setLMPoolDeployer(ILMPoolDeployer _LMPoolDeployer) external onlyOwner {\\n        if (address(_LMPoolDeployer) == address(0)) revert ZeroAddress();\\n        LMPoolDeployer = _LMPoolDeployer;\\n        emit NewLMPoolDeployerAddress(address(_LMPoolDeployer));\\n    }\\n\\n    /// @notice Add a new pool. Can only be called by the owner.\\n    /// @notice One v3 pool can only create one pool.\\n    /// @param _allocPoint Number of allocation points for the new pool.\\n    /// @param _v3Pool Address of the V3 pool.\\n    /// @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n    function add(uint256 _allocPoint, ISquadV3Pool _v3Pool, bool _withUpdate) external onlyOwner {\\n        if (_withUpdate) massUpdatePools();\\n\\n        ILMPool lmPool = LMPoolDeployer.deploy(_v3Pool);\\n\\n        totalAllocPoint += _allocPoint;\\n        address token0 = _v3Pool.token0();\\n        address token1 = _v3Pool.token1();\\n        uint24 fee = _v3Pool.fee();\\n        if (v3PoolPid[token0][token1][fee] != 0) revert DuplicatedPool(v3PoolPid[token0][token1][fee]);\\n        if (IERC20(token0).allowance(address(this), address(nonfungiblePositionManager)) == 0)\\n            IERC20(token0).safeApprove(address(nonfungiblePositionManager), type(uint256).max);\\n        if (IERC20(token1).allowance(address(this), address(nonfungiblePositionManager)) == 0)\\n            IERC20(token1).safeApprove(address(nonfungiblePositionManager), type(uint256).max);\\n        unchecked {\\n            poolLength++;\\n        }\\n        poolInfo[poolLength] = PoolInfo({\\n            allocPoint: _allocPoint,\\n            v3Pool: _v3Pool,\\n            token0: token0,\\n            token1: token1,\\n            fee: fee,\\n            totalLiquidity: 0,\\n            totalBoostLiquidity: 0\\n        });\\n\\n        v3PoolPid[token0][token1][fee] = poolLength;\\n        v3PoolAddressPid[address(_v3Pool)] = poolLength;\\n        emit AddPool(poolLength, _allocPoint, _v3Pool, lmPool);\\n    }\\n\\n    /// @notice Update the given pool's SQUAD allocation point. Can only be called by the owner.\\n    /// @param _pid The id of the pool. See `poolInfo`.\\n    /// @param _allocPoint New number of allocation points for the pool.\\n    /// @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external onlyOwner onlyValidPid(_pid) {\\n        uint32 currentTime = uint32(block.timestamp);\\n        PoolInfo storage pool = poolInfo[_pid];\\n        ILMPool LMPool = ILMPool(pool.v3Pool.lmPool());\\n        if (address(LMPool) != address(0)) {\\n            LMPool.accumulateReward(currentTime);\\n        }\\n\\n        if (_withUpdate) massUpdatePools();\\n        totalAllocPoint = totalAllocPoint - pool.allocPoint + _allocPoint;\\n        pool.allocPoint = _allocPoint;\\n        emit SetPool(_pid, _allocPoint);\\n    }\\n\\n    struct DepositCache {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint128 liquidity;\\n    }\\n\\n    /// @notice Upon receiving a ERC721\\n    function onERC721Received(\\n        address,\\n        address _from,\\n        uint256 _tokenId,\\n        bytes calldata\\n    ) external nonReentrant returns (bytes4) {\\n        if (msg.sender != address(nonfungiblePositionManager)) revert NotSquadNFT();\\n        DepositCache memory cache;\\n        (\\n            ,\\n            ,\\n            cache.token0,\\n            cache.token1,\\n            cache.fee,\\n            cache.tickLower,\\n            cache.tickUpper,\\n            cache.liquidity,\\n            ,\\n            ,\\n            ,\\n\\n        ) = nonfungiblePositionManager.positions(_tokenId);\\n        if (cache.liquidity == 0) revert NoLiquidity();\\n        uint256 pid = v3PoolPid[cache.token0][cache.token1][cache.fee];\\n        if (pid == 0) revert InvalidNFT();\\n        PoolInfo memory pool = poolInfo[pid];\\n        ILMPool LMPool = ILMPool(pool.v3Pool.lmPool());\\n        if (address(LMPool) == address(0)) revert NoLMPool();\\n\\n        UserPositionInfo storage positionInfo = userPositionInfos[_tokenId];\\n        positionInfo.tickLower = cache.tickLower;\\n        positionInfo.tickUpper = cache.tickUpper;\\n        positionInfo.user = _from;\\n        positionInfo.pid = pid;\\n        // Need to update LMPool.\\n        LMPool.accumulateReward(uint32(block.timestamp));\\n        updateLiquidityOperation(positionInfo, _tokenId, 0);\\n\\n        positionInfo.rewardGrowthInside = LMPool.getRewardGrowthInside(cache.tickLower, cache.tickUpper);\\n\\n        // Update Enumerable\\n        addToken(_from, _tokenId);\\n        emit Deposit(_from, pid, _tokenId, cache.liquidity, cache.tickLower, cache.tickUpper);\\n\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /// @notice harvest squad from pool.\\n    /// @param _tokenId Token Id of NFT.\\n    /// @param _to Address to.\\n    /// @return reward Squad reward.\\n    function harvest(uint256 _tokenId, address _to) external nonReentrant returns (uint256 reward) {\\n        UserPositionInfo storage positionInfo = userPositionInfos[_tokenId];\\n        if (positionInfo.user != msg.sender) revert NotOwner();\\n        if (positionInfo.liquidity == 0 && positionInfo.reward == 0) revert NoLiquidity();\\n        reward = harvestOperation(positionInfo, _tokenId, _to);\\n    }\\n\\n    function harvestOperation(\\n        UserPositionInfo storage positionInfo,\\n        uint256 _tokenId,\\n        address _to\\n    ) internal returns (uint256 reward) {\\n        PoolInfo memory pool = poolInfo[positionInfo.pid];\\n        ILMPool LMPool = ILMPool(pool.v3Pool.lmPool());\\n        if (address(LMPool) != address(0) && !emergency) {\\n            // Update rewardGrowthInside\\n            LMPool.accumulateReward(uint32(block.timestamp));\\n            uint256 rewardGrowthInside = LMPool.getRewardGrowthInside(positionInfo.tickLower, positionInfo.tickUpper);\\n            // Check overflow\\n            if (\\n                rewardGrowthInside > positionInfo.rewardGrowthInside &&\\n                MAX_U256 / (rewardGrowthInside - positionInfo.rewardGrowthInside) > positionInfo.boostLiquidity\\n            ) reward = ((rewardGrowthInside - positionInfo.rewardGrowthInside) * positionInfo.boostLiquidity) / Q128;\\n            positionInfo.rewardGrowthInside = rewardGrowthInside;\\n        }\\n        reward += positionInfo.reward;\\n\\n        if (reward > 0) {\\n            if (_to != address(0)) {\\n                positionInfo.reward = 0;\\n                _safeTransfer(_to, reward);\\n                emit Harvest(msg.sender, _to, positionInfo.pid, _tokenId, reward);\\n            } else {\\n                positionInfo.reward = reward;\\n            }\\n        }\\n    }\\n\\n    /// @notice Withdraw LP tokens from pool.\\n    /// @param _tokenId Token Id of NFT to deposit.\\n    /// @param _to Address to which NFT token to withdraw.\\n    /// @return reward Squad reward.\\n    function withdraw(uint256 _tokenId, address _to) external nonReentrant returns (uint256 reward) {\\n        if (_to == address(this) || _to == address(0)) revert WrongReceiver();\\n        UserPositionInfo storage positionInfo = userPositionInfos[_tokenId];\\n        if (positionInfo.user != msg.sender) revert NotOwner();\\n        reward = harvestOperation(positionInfo, _tokenId, _to);\\n        uint256 pid = positionInfo.pid;\\n        PoolInfo storage pool = poolInfo[pid];\\n        ILMPool LMPool = ILMPool(pool.v3Pool.lmPool());\\n        if (address(LMPool) != address(0) && !emergency) {\\n            // Remove all liquidity from liquidity mining pool.\\n            int128 liquidityDelta = -int128(positionInfo.boostLiquidity);\\n            LMPool.updatePosition(positionInfo.tickLower, positionInfo.tickUpper, liquidityDelta);\\n            emit UpdateLiquidity(\\n                msg.sender,\\n                pid,\\n                _tokenId,\\n                liquidityDelta,\\n                positionInfo.tickLower,\\n                positionInfo.tickUpper\\n            );\\n        }\\n        pool.totalLiquidity -= positionInfo.liquidity;\\n        pool.totalBoostLiquidity -= positionInfo.boostLiquidity;\\n\\n        delete userPositionInfos[_tokenId];\\n        // Update Enumerable\\n        removeToken(msg.sender, _tokenId);\\n        // Remove boosted token id in farm booster.\\n        // if (address(FARM_BOOSTER) != address(0)) FARM_BOOSTER.removeBoostMultiplier(msg.sender, _tokenId, pid);\\n        nonfungiblePositionManager.safeTransferFrom(address(this), _to, _tokenId);\\n        emit Withdraw(msg.sender, _to, pid, _tokenId);\\n    }\\n\\n    /// @notice Update liquidity for the NFT position.\\n    /// @param _tokenId Token Id of NFT to update.\\n    function updateLiquidity(uint256 _tokenId) external nonReentrant {\\n        UserPositionInfo storage positionInfo = userPositionInfos[_tokenId];\\n        if (positionInfo.pid == 0) revert InvalidNFT();\\n        harvestOperation(positionInfo, _tokenId, address(0));\\n        updateLiquidityOperation(positionInfo, _tokenId, 0);\\n    }\\n\\n    /// @notice Update farm boost multiplier for the NFT position.\\n    /// @param _tokenId Token Id of NFT to update.\\n    /// @param _newMultiplier New boost multiplier.\\n    function updateBoostMultiplier(uint256 _tokenId, uint256 _newMultiplier) external onlyOwnerOrOperator {\\n        UserPositionInfo storage positionInfo = userPositionInfos[_tokenId];\\n        if (positionInfo.pid == 0) revert InvalidNFT();\\n        harvestOperation(positionInfo, _tokenId, address(0));\\n        updateLiquidityOperation(positionInfo, _tokenId, _newMultiplier);\\n    }\\n\\n    function updateLiquidityOperation(\\n        UserPositionInfo storage positionInfo,\\n        uint256 _tokenId,\\n        uint256 _newMultiplier\\n    ) internal {\\n        (, , , , , int24 tickLower, int24 tickUpper, uint128 liquidity, , , , ) = nonfungiblePositionManager.positions(\\n            _tokenId\\n        );\\n        PoolInfo storage pool = poolInfo[positionInfo.pid];\\n        if (positionInfo.liquidity != liquidity) {\\n            pool.totalLiquidity = pool.totalLiquidity - positionInfo.liquidity + liquidity;\\n            positionInfo.liquidity = liquidity;\\n        }\\n        uint256 boostMultiplier = BOOST_PRECISION;\\n        // if (address(FARM_BOOSTER) != address(0) && _newMultiplier == 0) {\\n        //     // Get the latest boostMultiplier and update boostMultiplier in farm booster.\\n        //     boostMultiplier = FARM_BOOSTER.updatePositionBoostMultiplier(_tokenId);\\n        // } else \\n        if (_newMultiplier != 0) {\\n            // Update boostMultiplier from farm booster call.\\n            boostMultiplier = _newMultiplier;\\n        }\\n\\n        if (boostMultiplier < BOOST_PRECISION) {\\n            boostMultiplier = BOOST_PRECISION;\\n        } else if (boostMultiplier > MAX_BOOST_PRECISION) {\\n            boostMultiplier = MAX_BOOST_PRECISION;\\n        }\\n\\n        positionInfo.boostMultiplier = boostMultiplier;\\n        uint128 boostLiquidity = ((uint256(liquidity) * boostMultiplier) / BOOST_PRECISION).toUint128();\\n        int128 liquidityDelta = int128(boostLiquidity) - int128(positionInfo.boostLiquidity);\\n        if (liquidityDelta != 0) {\\n            pool.totalBoostLiquidity = pool.totalBoostLiquidity - positionInfo.boostLiquidity + boostLiquidity;\\n            positionInfo.boostLiquidity = boostLiquidity;\\n            ILMPool LMPool = ILMPool(pool.v3Pool.lmPool());\\n            if (address(LMPool) == address(0)) revert NoLMPool();\\n            LMPool.updatePosition(tickLower, tickUpper, liquidityDelta);\\n            emit UpdateLiquidity(msg.sender, positionInfo.pid, _tokenId, liquidityDelta, tickLower, tickUpper);\\n        }\\n    }\\n\\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\\n    /// amount0Desired The desired amount of token0 to be spent,\\n    /// amount1Desired The desired amount of token1 to be spent,\\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return liquidity The new liquidity amount as a result of the increase\\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\\n    function increaseLiquidity(\\n        IncreaseLiquidityParams memory params\\n    ) external payable nonReentrant returns (uint128 liquidity, uint256 amount0, uint256 amount1) {\\n        UserPositionInfo storage positionInfo = userPositionInfos[params.tokenId];\\n        if (positionInfo.pid == 0) revert InvalidNFT();\\n        PoolInfo memory pool = poolInfo[positionInfo.pid];\\n        pay(pool.token0, params.amount0Desired);\\n        pay(pool.token1, params.amount1Desired);\\n        if (pool.token0 != WETH && pool.token1 != WETH && msg.value > 0) revert();\\n        (liquidity, amount0, amount1) = nonfungiblePositionManager.increaseLiquidity{value: msg.value}(params);\\n        uint256 token0Left = params.amount0Desired - amount0;\\n        uint256 token1Left = params.amount1Desired - amount1;\\n        if (token0Left > 0) {\\n            refund(pool.token0, token0Left);\\n        }\\n        if (token1Left > 0) {\\n            refund(pool.token1, token1Left);\\n        }\\n        harvestOperation(positionInfo, params.tokenId, address(0));\\n        updateLiquidityOperation(positionInfo, params.tokenId, 0);\\n    }\\n\\n    /// @notice Pay.\\n    /// @param _token The token to pay\\n    /// @param _amount The amount to pay\\n    function pay(address _token, uint256 _amount) internal {\\n        if (_token == WETH && msg.value > 0) {\\n            if (msg.value != _amount) revert InconsistentAmount();\\n        } else {\\n            IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        }\\n    }\\n\\n    /// @notice Refund.\\n    /// @param _token The token to refund\\n    /// @param _amount The amount to refund\\n    function refund(address _token, uint256 _amount) internal {\\n        if (_token == WETH && msg.value > 0) {\\n            nonfungiblePositionManager.refundETH();\\n            safeTransferETH(msg.sender, address(this).balance);\\n        } else {\\n            IERC20(_token).safeTransfer(msg.sender, _amount);\\n        }\\n    }\\n\\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\\n    /// amount The amount by which liquidity will be decreased,\\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\\n    /// deadline The time by which the transaction must be included to effect the change\\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\\n    function decreaseLiquidity(\\n        DecreaseLiquidityParams memory params\\n    ) external nonReentrant returns (uint256 amount0, uint256 amount1) {\\n        UserPositionInfo storage positionInfo = userPositionInfos[params.tokenId];\\n        if (positionInfo.user != msg.sender) revert NotOwner();\\n        (amount0, amount1) = nonfungiblePositionManager.decreaseLiquidity(params);\\n        harvestOperation(positionInfo, params.tokenId, address(0));\\n        updateLiquidityOperation(positionInfo, params.tokenId, 0);\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\\n    /// recipient The account that should receive the tokens,\\n    /// @dev Warning!!! Please make sure to use multicall to call unwrapWETH9 or sweepToken when set recipient address(0), or you will lose your funds.\\n    /// amount0Max The maximum amount of token0 to collect,\\n    /// amount1Max The maximum amount of token1 to collect\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(CollectParams memory params) external nonReentrant returns (uint256 amount0, uint256 amount1) {\\n        UserPositionInfo memory positionInfo = userPositionInfos[params.tokenId];\\n        if (positionInfo.user != msg.sender) revert NotOwner();\\n        if (params.recipient == address(0)) params.recipient = address(this);\\n        (amount0, amount1) = nonfungiblePositionManager.collect(params);\\n    }\\n\\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient, then refund.\\n    /// @param params CollectParams.\\n    /// @param to Refund recipent.\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collectTo(\\n        CollectParams memory params,\\n        address to\\n    ) external nonReentrant returns (uint256 amount0, uint256 amount1) {\\n        UserPositionInfo memory positionInfo = userPositionInfos[params.tokenId];\\n        if (positionInfo.user != msg.sender) revert NotOwner();\\n        if (params.recipient == address(0)) params.recipient = address(this);\\n        (amount0, amount1) = nonfungiblePositionManager.collect(params);\\n        // Need to refund token to user when recipient is zero address\\n        if (params.recipient == address(this)) {\\n            PoolInfo memory pool = poolInfo[positionInfo.pid];\\n            if (to == address(0)) to = msg.sender;\\n            transferToken(pool.token0, to);\\n            transferToken(pool.token1, to);\\n        }\\n    }\\n\\n    /// @notice Transfer token from MasterChef V3.\\n    /// @param _token The token to transfer.\\n    /// @param _to The to address.\\n    function transferToken(address _token, address _to) internal {\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        // Need to reduce squadAmountBelongToMC.\\n        if (_token == address(SQUAD)) {\\n            unchecked {\\n                // In fact balance should always be greater than or equal to squadAmountBelongToMC, but in order to avoid any unknown issue, we added this check.\\n                if (balance >= squadAmountBelongToMC) {\\n                    balance -= squadAmountBelongToMC;\\n                } else {\\n                    // This should never happend.\\n                    squadAmountBelongToMC = balance;\\n                    balance = 0;\\n                }\\n            }\\n        }\\n        if (balance > 0) {\\n            if (_token == WETH) {\\n                IWETH(WETH).withdraw(balance);\\n                safeTransferETH(_to, balance);\\n            } else {\\n                IERC20(_token).safeTransfer(_to, balance);\\n            }\\n        }\\n    }\\n\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external nonReentrant {\\n        uint256 balanceWETH = IWETH(WETH).balanceOf(address(this));\\n        if (balanceWETH < amountMinimum) revert InsufficientAmount();\\n\\n        if (balanceWETH > 0) {\\n            IWETH(WETH).withdraw(balanceWETH);\\n            safeTransferETH(recipient, balanceWETH);\\n        }\\n    }\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(address token, uint256 amountMinimum, address recipient) external nonReentrant {\\n        uint256 balanceToken = IERC20(token).balanceOf(address(this));\\n        // Need to reduce squadAmountBelongToMC.\\n        if (token == address(SQUAD)) {\\n            unchecked {\\n                // In fact balance should always be greater than or equal to squadAmountBelongToMC, but in order to avoid any unknown issue, we added this check.\\n                if (balanceToken >= squadAmountBelongToMC) {\\n                    balanceToken -= squadAmountBelongToMC;\\n                } else {\\n                    // This should never happend.\\n                    squadAmountBelongToMC = balanceToken;\\n                    balanceToken = 0;\\n                }\\n            }\\n        }\\n        if (balanceToken < amountMinimum) revert InsufficientAmount();\\n\\n        if (balanceToken > 0) {\\n            IERC20(token).safeTransfer(recipient, balanceToken);\\n        }\\n    }\\n\\n    /// @notice Upkeep period.\\n    /// @param _amount The amount of squad injected.\\n    /// @param _duration The period duration.\\n    /// @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n    function upkeep(uint256 _amount, uint256 _duration, bool _withUpdate) external onlyReceiver {\\n        // Transfer squad token from receiver.\\n        SQUAD.safeTransferFrom(receiver, address(this), _amount);\\n        // Update squadAmountBelongToMC\\n        unchecked {\\n            squadAmountBelongToMC += _amount;\\n        }\\n\\n        if (_withUpdate) massUpdatePools();\\n\\n        uint256 duration = PERIOD_DURATION;\\n        // Only use the _duration when _duration is between MIN_DURATION and MAX_DURATION.\\n        if (_duration >= MIN_DURATION && _duration <= MAX_DURATION) duration = _duration;\\n        uint256 currentTime = block.timestamp;\\n        uint256 endTime = currentTime + duration;\\n        uint256 squadPerSecond;\\n        uint256 squadAmount = _amount;\\n        if (latestPeriodEndTime > currentTime) {\\n            uint256 remainingSquad = ((latestPeriodEndTime - currentTime) * latestPeriodSquadPerSecond) / PRECISION;\\n            emit UpdateUpkeepPeriod(latestPeriodNumber, latestPeriodEndTime, currentTime, remainingSquad);\\n            squadAmount += remainingSquad;\\n        }\\n        squadPerSecond = (squadAmount * PRECISION) / duration;\\n        unchecked {\\n            latestPeriodNumber++;\\n            latestPeriodStartTime = currentTime + 1;\\n            latestPeriodEndTime = endTime;\\n            latestPeriodSquadPerSecond = squadPerSecond;\\n        }\\n        emit NewUpkeepPeriod(latestPeriodNumber, currentTime + 1, endTime, squadPerSecond, squadAmount);\\n    }\\n\\n    /// @notice Update squad reward for all the liquidity mining pool.\\n    function massUpdatePools() internal {\\n        uint32 currentTime = uint32(block.timestamp);\\n        for (uint256 pid = 1; pid <= poolLength; pid++) {\\n            PoolInfo memory pool = poolInfo[pid];\\n            ILMPool LMPool = ILMPool(pool.v3Pool.lmPool());\\n            if (pool.allocPoint != 0 && address(LMPool) != address(0)) {\\n                LMPool.accumulateReward(currentTime);\\n            }\\n        }\\n    }\\n\\n    /// @notice Update squad reward for the liquidity mining pool.\\n    /// @dev Avoid too many pools, and a single transaction cannot be fully executed for all pools.\\n    function updatePools(uint256[] calldata pids) external onlyOwnerOrOperator {\\n        uint32 currentTime = uint32(block.timestamp);\\n        for (uint256 i = 0; i < pids.length; i++) {\\n            PoolInfo memory pool = poolInfo[pids[i]];\\n            ILMPool LMPool = ILMPool(pool.v3Pool.lmPool());\\n            if (pool.allocPoint != 0 && address(LMPool) != address(0)) {\\n                LMPool.accumulateReward(currentTime);\\n            }\\n        }\\n    }\\n\\n    /// @notice Set operator address.\\n    /// @dev Callable by owner\\n    /// @param _operatorAddress New operator address.\\n    function setOperator(address _operatorAddress) external onlyOwner {\\n        if (_operatorAddress == address(0)) revert ZeroAddress();\\n        operatorAddress = _operatorAddress;\\n        emit NewOperatorAddress(_operatorAddress);\\n    }\\n\\n    /// @notice Set period duration.\\n    /// @dev Callable by owner\\n    /// @param _periodDuration New period duration.\\n    function setPeriodDuration(uint256 _periodDuration) external onlyOwner {\\n        if (_periodDuration < MIN_DURATION || _periodDuration > MAX_DURATION) revert InvalidPeriodDuration();\\n        PERIOD_DURATION = _periodDuration;\\n        emit NewPeriodDuration(_periodDuration);\\n    }\\n\\n    // /// @notice Update farm boost contract address.\\n    // /// @param _newFarmBoostContract The new farm booster address.\\n    // function updateFarmBoostContract(address _newFarmBoostContract) external onlyOwner {\\n    //     // farm booster can be zero address when need to remove farm booster\\n    //     FARM_BOOSTER = IFarmBooster(_newFarmBoostContract);\\n    //     emit UpdateFarmBoostContract(_newFarmBoostContract);\\n    // }\\n\\n    /**\\n     * @notice Transfer ETH in a safe way\\n     * @param to: address to transfer ETH to\\n     * @param value: ETH amount to transfer (in wei)\\n     */\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(\\\"\\\");\\n        if (!success) revert();\\n    }\\n\\n    /// @notice Safe Transfer SQUAD.\\n    /// @param _to The SQUAD receiver address.\\n    /// @param _amount Transfer SQUAD amounts.\\n    function _safeTransfer(address _to, uint256 _amount) internal {\\n        if (_amount > 0) {\\n            uint256 balance = SQUAD.balanceOf(address(this));\\n            if (balance < _amount) {\\n                _amount = balance;\\n            }\\n            // Update squadAmountBelongToMC\\n            unchecked {\\n                if (squadAmountBelongToMC >= _amount) {\\n                    squadAmountBelongToMC -= _amount;\\n                } else {\\n                    squadAmountBelongToMC = balance - _amount;\\n                }\\n            }\\n            SQUAD.safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    receive() external payable {\\n        if (msg.sender != address(nonfungiblePositionManager) && msg.sender != WETH) revert();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Multicall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.10;\\n\\n/// @title Multicall\\n/// @notice Enables calling multiple methods in a single call to the contract\\ncontract Multicall {\\n    function multicall(bytes[] calldata data) public payable returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_SQUAD\",\"type\":\"address\"},{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"_nonfungiblePositionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"DuplicatedPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNFT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPeriodDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoLMPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerOrOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSquadNFT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract ISquadV3Pool\",\"name\":\"v3Pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ILMPool\",\"name\":\"lmPool\",\"type\":\"address\"}],\"name\":\"AddPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"NewLMPoolDeployerAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"NewOperatorAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodDuration\",\"type\":\"uint256\"}],\"name\":\"NewPeriodDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"NewReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"periodNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"squadPerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"squadAmount\",\"type\":\"uint256\"}],\"name\":\"NewUpkeepPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"emergency\",\"type\":\"bool\"}],\"name\":\"SetEmergency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"SetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farmBoostContract\",\"type\":\"address\"}],\"name\":\"UpdateFarmBoostContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"liquidity\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"UpdateLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"periodNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEndTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingSquad\",\"type\":\"uint256\"}],\"name\":\"UpdateUpkeepPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOOST_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LMPoolDeployer\",\"outputs\":[{\"internalType\":\"contract ILMPoolDeployer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BOOST_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERIOD_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SQUAD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract ISquadV3Pool\",\"name\":\"_v3Pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Max\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Max\",\"type\":\"uint128\"}],\"internalType\":\"struct INonfungiblePositionManagerStruct.CollectParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"collect\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount0Max\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount1Max\",\"type\":\"uint128\"}],\"internalType\":\"struct INonfungiblePositionManagerStruct.CollectParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"collectTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManagerStruct.DecreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"decreaseLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_v3Pool\",\"type\":\"address\"}],\"name\":\"getLatestPeriodInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"squadPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getLatestPeriodInfoByPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"squadPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Desired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct INonfungiblePositionManagerStruct.IncreaseLiquidityParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"increaseLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestPeriodEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestPeriodNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestPeriodSquadPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestPeriodStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonfungiblePositionManager\",\"outputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"pendingSquad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract ISquadV3Pool\",\"name\":\"v3Pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBoostLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_emergency\",\"type\":\"bool\"}],\"name\":\"setEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILMPoolDeployer\",\"name\":\"_LMPoolDeployer\",\"type\":\"address\"}],\"name\":\"setLMPoolDeployer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operatorAddress\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_periodDuration\",\"type\":\"uint256\"}],\"name\":\"setPeriodDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"squadAmountBelongToMC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrapWETH9\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMultiplier\",\"type\":\"uint256\"}],\"name\":\"updateBoostMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"updateLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"}],\"name\":\"updatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"upkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPositionInfos\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"boostLiquidity\",\"type\":\"uint128\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"rewardGrowthInside\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostMultiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"v3PoolAddressPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MasterChefV3", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006d2d8ad6f7c044fbf7bbd3677d40fbba732f8ae1000000000000000000000000fb230cebfd707fcdf7d13450fa57d700e917bc77000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}