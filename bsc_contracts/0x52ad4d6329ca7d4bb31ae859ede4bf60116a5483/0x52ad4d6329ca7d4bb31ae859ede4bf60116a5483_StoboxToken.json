{"SourceCode": "library SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n}\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n  * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n  * account.\r\n  */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n  * @dev Throws if called by any account other than the owner.\r\n  */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"Only the Contract owner can perform this action\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n  * @param newOwner The address to transfer ownership to.\r\n  */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0), \"New owner cannot be current owner\");\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n/**\r\n * @title BEP20Basic\r\n * @dev Simpler version of BEP20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract BEP20Basic {\r\n\r\n  /// Total amount of tokens\r\n  uint256 public totalSupply;\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n  function transfer(address _to, uint256 _amount) public returns (bool success);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n}\r\n\r\n/**\r\n * @title BEP20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract BEP20 is BEP20Basic {\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success);\r\n\r\n  function approve(address _spender, uint256 _amount) public returns (bool success);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is BEP20Basic {\r\n\r\n  using SafeMath for uint256;\r\n  uint balanceOfParticipant;\r\n  uint lockedAmount;\r\n  uint allowedAmount;\r\n  bool lockupIsActive = false;\r\n  uint256 lockupStartTime;\r\n\r\n  // balances for each address\r\n  mapping(address => uint256) balances;\r\n\r\n  struct Lockup {\r\n    uint256 lockupAmount;\r\n  }\r\n  Lockup lockup;\r\n  mapping(address => Lockup) lockupParticipants;\r\n  event LockupStarted(uint256 indexed lockupStartTime);\r\n\r\n  function requireWithinLockupRange(address _spender, uint256 _amount) internal {\r\n    if (lockupIsActive) {\r\n      uint timePassed = now - lockupStartTime;\r\n      balanceOfParticipant = balances[_spender];\r\n      lockedAmount = lockupParticipants[_spender].lockupAmount;\r\n      allowedAmount = lockedAmount;\r\n      if (timePassed < 92 days) {\r\n        allowedAmount = lockedAmount.mul(5).div(100);\r\n      } else if (timePassed >= 92 days && timePassed < 183 days) {\r\n        allowedAmount = lockedAmount.mul(30).div(100);\r\n      } else if (timePassed >= 183 days && timePassed < 365 days) {\r\n        allowedAmount = lockedAmount.mul(55).div(100);\r\n      }\r\n      require(\r\n        balanceOfParticipant.sub(_amount) >= lockedAmount.sub(allowedAmount),\r\n        \"Must maintain correct % of PVC during lockup periods\"\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _amount The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n    require(_to != msg.sender, \"Cannot transfer to self\");\r\n    require(_to != address(this), \"Cannot transfer to Contract\");\r\n    require(_to != address(0), \"Cannot transfer to 0x0\");\r\n    require(\r\n      balances[msg.sender] >= _amount && _amount > 0 && balances[_to].add(_amount) > balances[_to],\r\n      \"Cannot transfer (Not enough balance)\"\r\n    );\r\n\r\n    requireWithinLockupRange(msg.sender, _amount);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    emit Transfer(msg.sender, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard BEP20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract StandardToken is BEP20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  /**\r\n  * @dev Transfer tokens from one address to another\r\n  * @param _from address The address which you want to send tokens from\r\n  * @param _to address The address which you want to transfer to\r\n  * @param _amount uint256 the amount of tokens to be transferred\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\r\n    require(_from != msg.sender, \"Cannot transfer from self, use transfer function instead\");\r\n    require(_from != address(this) && _to != address(this), \"Cannot transfer from or to Contract\");\r\n    require(_to != address(0), \"Cannot transfer to 0x0\");\r\n    require(balances[_from] >= _amount, \"Not enough balance to transfer from\");\r\n    require(allowed[_from][msg.sender] >= _amount, \"Not enough allowance to transfer from\");\r\n    require(_amount > 0 && balances[_to].add(_amount) > balances[_to], \"Amount must be > 0 to transfer from\");\r\n\r\n    requireWithinLockupRange(_from, _amount);\r\n\r\n    balances[_from] = balances[_from].sub(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\r\n    emit Transfer(_from, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n  *\r\n  * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n  * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n  * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n  * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n  * @param _spender The address which will spend the funds.\r\n  * @param _amount The amount of tokens to be spent.\r\n  */\r\n  function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n    require(_spender != msg.sender, \"Cannot approve an allowance to self\");\r\n    require(_spender != address(this), \"Cannot approve contract an allowance\");\r\n    require(_spender != address(0), \"Cannot approve 0x0 an allowance\");\r\n    allowed[msg.sender][_spender] = _amount;\r\n    emit Approval(msg.sender, _spender, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n  * @param _owner address The address which owns the funds.\r\n  * @param _spender address The address which will spend the funds.\r\n  * @return A uint256 specifying the amount of tokens still available for the spender.\r\n  */\r\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Burnable Token\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n */\r\ncontract BurnableToken is StandardToken, Ownable {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n    * @dev Burns a specific amount of tokens.\r\n    * @param _value The amount of token to be burned.\r\n    */\r\n  function burn(uint256 _value) public onlyOwner {\r\n    require(_value <= balances[msg.sender], \"Not enough balance to burn\");\r\n    // no need to require value <= totalSupply, since that would imply the\r\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    totalSupply = totalSupply.sub(_value);\r\n    emit Burn(msg.sender, _value);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Brainz\r\n * @dev Token representing Brainz.\r\n */\r\ncontract StoboxToken is BurnableToken {\r\n\r\n  string public name;\r\n  string public symbol;\r\n  uint8 public decimals = 18;\r\n  \r\n  /**\r\n  * @dev users sending ether to this contract will be reverted. Any ether sent to the contract will be sent back to the caller\r\n  */\r\n  function() external payable {\r\n    revert(\"Cannot send Ether to this contract\");\r\n  }\r\n\r\n  /**\r\n  * @dev Constructor function to initialize the initial supply of token to the creator of the contract\r\n  */\r\n  constructor(address wallet) public {\r\n    owner = wallet;\r\n    totalSupply = uint(100000000).mul(10 ** uint256(decimals)); //Update total supply with the decimal amount\r\n    name = \"Stobox Token\";\r\n    symbol = \"STBU\";\r\n    balances[wallet] = totalSupply;\r\n    \r\n    //Emitting transfer event since assigning all tokens to the creator also corresponds to the transfer of tokens to the creator\r\n    emit Transfer(address(0), msg.sender, totalSupply);\r\n  }\r\n    \r\n  /**\r\n  * @dev helper method to get token details, name, symbol and totalSupply in one go\r\n  */\r\n  function getTokenDetail() public view returns (string memory, string memory, uint256) {\r\n    return (name, symbol, totalSupply);\r\n  }\r\n\r\n  function vest(address[] memory _owners, uint[] memory _amounts) public onlyOwner {\r\n    require(_owners.length == _amounts.length, \"Length of addresses & token amounts are not the same\");\r\n    for (uint i = 0; i < _owners.length; i++) {\r\n      _amounts[i] = _amounts[i].mul(10 ** 18);\r\n      require(_owners[i] != address(0), \"Vesting funds cannot be sent to 0x0\");\r\n      require(_amounts[i] > 0, \"Amount must be > 0\");\r\n      require(balances[owner] > _amounts[i], \"Not enough balance to vest\");\r\n      require(balances[_owners[i]].add(_amounts[i]) > balances[_owners[i]], \"Internal vesting error\");\r\n\r\n      // SafeMath.sub will throw if there is not enough balance.\r\n      balances[owner] = balances[owner].sub(_amounts[i]);\r\n      balances[_owners[i]] = balances[_owners[i]].add(_amounts[i]);\r\n      emit Transfer(owner, _owners[i], _amounts[i]);\r\n      lockup = Lockup({ lockupAmount: _amounts[i] });\r\n      lockupParticipants[_owners[i]] = lockup;\r\n    }\r\n  }\r\n\r\n  function initiateLockup() public onlyOwner {\r\n    uint256 currentTime = now;\r\n    lockupIsActive = true;\r\n    lockupStartTime = currentTime;\r\n    emit LockupStarted(currentTime);\r\n  }\r\n\r\n  function lockupActive() public view returns (bool) {\r\n    return lockupIsActive;\r\n  }\r\n\r\n  function lockupAmountOf(address _owner) public view returns (uint256) {\r\n    return lockupParticipants[_owner].lockupAmount;\r\n  }\r\n\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTokenDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"lockupAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"initiateLockup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\"},{\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"vest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockupActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"lockupStartTime\",\"type\":\"uint256\"}],\"name\":\"LockupStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]", "ContractName": "StoboxToken", "CompilerVersion": "v0.4.25+commit.59dbf8f1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000e864a71ef7cf20e5704c10dd820444a62a3f938f", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://ccc9f5d349e8e91cb2c8922edb3c4956d6ebada8ed10384a159ce7e7df75d6e0"}