{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/Pausable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: contracts/ItemsMarketplace.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.19;\r\n\r\n\r\n\r\n\r\ncontract ItemsMarketplace is Ownable, Pausable {\r\n\r\n    using IterableMapping for IterableMapping.Map;\r\n\r\n    IterableMapping.Map private tokenIdToOrder;\r\n    IERC721 public collection;\r\n    uint8 public commissionRate; // 1 = 0.1%\r\n\r\n    event OrderFilled(uint128 indexed tokenId, address seller, address buyer, uint128 indexed price);\r\n\r\n    constructor(uint8 _commissionRate, address _collection) {\r\n        commissionRate = _commissionRate;\r\n        collection = IERC721(_collection);\r\n    }\r\n\r\nfunction createOrder(uint128 _tokenId, uint128 _startPrice, uint128 _endPrice, uint32 _duration) external {\r\n    require(collection.isApprovedForAll(msg.sender, address(this)), \"Not approved for ERC721 token transfer\");\r\n    IterableMapping.Order memory order = tokenIdToOrder.get(_tokenId);\r\n    \r\n    if (order.seller == msg.sender) {\r\n        revert(\"Order already exist\");\r\n    } else {\r\n        require(collection.ownerOf(_tokenId) == msg.sender, \"Seller not owner\");\r\n        IterableMapping.Order memory newOrder = IterableMapping.Order({\r\n            seller: msg.sender,\r\n            tokenId: _tokenId,\r\n            startPrice: _startPrice,\r\n            endPrice: _endPrice,\r\n            duration: _duration,\r\n            startTime: uint32(block.timestamp)\r\n        });\r\n        tokenIdToOrder.set(_tokenId, newOrder);\r\n    }\r\n\r\n}\r\n\r\n function fillOrder(uint128 _tokenId) external payable {\r\n    IterableMapping.Order storage order = tokenIdToOrder.get(_tokenId);\r\n    address seller = order.seller;\r\n    uint128 startPrice = order.startPrice;\r\n    uint128 endPrice = order.endPrice;\r\n    uint128 duration = order.duration;\r\n\r\n    require(collection.ownerOf(order.tokenId) == seller, \"Seller not owner\");\r\n    require(collection.isApprovedForAll(seller, address(this)), \"Not approved for ERC721 token transfer\");\r\n\r\n    uint128 currentPrice;\r\n    if (block.timestamp < (order.startTime + duration)) {\r\n        // Calculate the current price based on the linear price decrease\r\n        uint128 elapsedTime = uint32(block.timestamp) - order.startTime;\r\n        uint128 priceDifference;\r\n        if (endPrice > startPrice) {\r\n            priceDifference = endPrice - startPrice;\r\n            currentPrice = startPrice + (elapsedTime * priceDifference / duration);\r\n        } else {\r\n            priceDifference = startPrice - endPrice;\r\n            currentPrice = startPrice - (elapsedTime * priceDifference / duration);\r\n        }     \r\n    } else {\r\n        // The auction has ended; the price is now the end price\r\n        currentPrice = endPrice;\r\n    }\r\n\r\n    require(msg.value >= currentPrice, \"Insufficient payment value\");\r\n\r\n    uint128 commission = (currentPrice * commissionRate) / 1000;\r\n    uint128 sellerProceeds = currentPrice - commission;\r\n    payable(seller).transfer(sellerProceeds);\r\n    collection.transferFrom(seller, msg.sender, order.tokenId);\r\n    tokenIdToOrder.remove(_tokenId);\r\n\r\n    emit OrderFilled(_tokenId, seller, msg.sender, currentPrice);\r\n}\r\n\r\n\r\n    function updatePriceOrder(uint128 _tokenId, uint128 _newPrice) external {\r\n        require(_newPrice > 0, \"Price must be greater than 0\");\r\n        IterableMapping.Order storage order = tokenIdToOrder.get(_tokenId);\r\n        require(order.seller == msg.sender, \"Only the seller can update the price\");\r\n        require(block.timestamp > (order.startTime + order.duration), \"You cannot change the price of the auction, wait until the end of time\");\r\n        order.endPrice = _newPrice;\r\n        tokenIdToOrder.set(_tokenId, order);\r\n    }\r\n\r\n    function cancelOrder(uint128 _tokenId) external {\r\n        IterableMapping.Order storage order = tokenIdToOrder.get(_tokenId);\r\n        require(order.seller == msg.sender, \"Only the seller can cancel the order\");\r\n        // Remove the order\r\n        tokenIdToOrder.remove(_tokenId);\r\n    }\r\n\r\n    function cancelAnyOrder(uint128 _tokenId) external onlyOwner {\r\n        tokenIdToOrder.remove(_tokenId);\r\n    }\r\n\r\n    function removeAllInvalidOrders() external onlyOwner {\r\n        uint32 totalOrders = tokenIdToOrder.size();\r\n        for (uint32 i = 0; i < totalOrders; i++) {\r\n           uint128 tokenId = tokenIdToOrder.getKeyAtIndex(i);\r\n           IterableMapping.Order storage order = tokenIdToOrder.get(tokenId);\r\n            if (collection.ownerOf(order.tokenId) != order.seller) {\r\n                tokenIdToOrder.remove(tokenId);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function cancelAllOrders() external onlyOwner {\r\n        uint32 totalOrders = tokenIdToOrder.size();\r\n        for (uint32 i = 0; i < totalOrders; i++) {\r\n             uint128 tokenId = tokenIdToOrder.getKeyAtIndex(i);\r\n             tokenIdToOrder.remove(tokenId);\r\n        }\r\n    }\r\n\r\n    function getOrders() external view returns (IterableMapping.Order[] memory) {\r\n        uint32 totalOrders = tokenIdToOrder.size();\r\n        IterableMapping.Order[] memory ordersArray = new IterableMapping.Order[](totalOrders);\r\n        uint32 validOrdersIndex = 0;\r\n        for (uint32 i = 0; i < totalOrders; i++) {\r\n            uint128 tokenId = tokenIdToOrder.getKeyAtIndex(i);\r\n            IterableMapping.Order storage order = tokenIdToOrder.get(tokenId);\r\n            if (collection.ownerOf(order.tokenId) == order.seller) {\r\n                ordersArray[validOrdersIndex] = order;\r\n                validOrdersIndex++;\r\n            }\r\n        }\r\n        assembly {\r\n            mstore(ordersArray, validOrdersIndex)\r\n        }\r\n        return ordersArray;\r\n    }\r\n\r\n    function getSellerOrders(address _seller) external view returns (IterableMapping.Order[] memory) {\r\n        uint32 totalOrders = tokenIdToOrder.size();\r\n        IterableMapping.Order[] memory sellerOrders = new IterableMapping.Order[](totalOrders);\r\n        uint32 validOrdersIndex = 0;\r\n        for (uint32 i = 0; i < totalOrders; i++) {\r\n            uint128 tokenId = tokenIdToOrder.getKeyAtIndex(i);\r\n            IterableMapping.Order storage order = tokenIdToOrder.get(tokenId);\r\n            if (order.seller == _seller && collection.ownerOf(order.tokenId) == _seller) {\r\n                sellerOrders[validOrdersIndex] = order;\r\n                validOrdersIndex++;\r\n            }\r\n        }\r\n        assembly {\r\n            mstore(sellerOrders, validOrdersIndex)\r\n        }\r\n\r\n        return sellerOrders;\r\n    }\r\n\r\n    function getOrderByTokenId(uint128 _tokenId) external view returns (IterableMapping.Order memory) {\r\n        IterableMapping.Order storage order = tokenIdToOrder.get(_tokenId);\r\n\r\n        if (collection.ownerOf(order.tokenId) == order.seller) {\r\n            return order;\r\n        }\r\n        revert(\"Order not found for the given item ID\");\r\n    }\r\n\r\n    function setCommissionRate(uint8 _newCommissionRate) external onlyOwner {\r\n        commissionRate = _newCommissionRate;\r\n    }\r\n\r\n    function withdrawCommission() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"No commission to withdraw\");\r\n        payable(owner()).transfer(balance);\r\n}\r\n\r\n\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n}\r\n\r\nlibrary IterableMapping {\r\n\r\n    struct Order {\r\n        address seller;\r\n        uint128 tokenId;\r\n        uint128 startPrice;\r\n        uint128 endPrice;\r\n        uint32 duration;\r\n        uint32 startTime;\r\n    }\r\n\r\n    // Iterable mapping from uint32 to Order;\r\n    struct Map {\r\n        uint128[] keys;\r\n        mapping(uint128 => Order) values;\r\n        mapping(uint128 => uint32) indexOf;\r\n        mapping(uint128 => bool) inserted;\r\n    }\r\n\r\n    function get(Map storage map, uint128 key) internal view returns (Order storage) {\r\n        return map.values[key];\r\n    }\r\n\r\n    function getKeyAtIndex(Map storage map, uint32 index) internal view returns (uint128) {\r\n        return map.keys[index];\r\n    }\r\n\r\n    function size(Map storage map) internal view returns (uint32) {\r\n        return uint32(map.keys.length);\r\n    }\r\n\r\n    function set(Map storage map, uint128 key, Order memory val) internal {\r\n        if (map.inserted[key]) {\r\n            map.values[key] = val;\r\n        } else {\r\n            map.inserted[key] = true;\r\n            map.values[key] = val;\r\n            map.indexOf[key] = uint32(map.keys.length);\r\n            map.keys.push(key);\r\n        }\r\n    }\r\n\r\n    function remove(Map storage map, uint128 key) internal {\r\n        if (!map.inserted[key]) {\r\n            return;\r\n        }\r\n        delete map.inserted[key];\r\n        delete map.values[key];\r\n\r\n        uint32 index = map.indexOf[key];\r\n        uint128 lastKey = map.keys[map.keys.length - 1];\r\n\r\n        map.indexOf[lastKey] = index;\r\n        delete map.indexOf[key];\r\n\r\n        map.keys[index] = lastKey;\r\n        map.keys.pop();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_commissionRate\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_collection\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"tokenId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cancelAllOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_tokenId\",\"type\":\"uint128\"}],\"name\":\"cancelAnyOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_tokenId\",\"type\":\"uint128\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collection\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commissionRate\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_tokenId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_startPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_endPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"_duration\",\"type\":\"uint32\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_tokenId\",\"type\":\"uint128\"}],\"name\":\"fillOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_tokenId\",\"type\":\"uint128\"}],\"name\":\"getOrderByTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"tokenId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"startPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"}],\"internalType\":\"struct IterableMapping.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"tokenId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"startPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"}],\"internalType\":\"struct IterableMapping.Order[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"getSellerOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"tokenId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"startPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endPrice\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"}],\"internalType\":\"struct IterableMapping.Order[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllInvalidOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_newCommissionRate\",\"type\":\"uint8\"}],\"name\":\"setCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_tokenId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_newPrice\",\"type\":\"uint128\"}],\"name\":\"updatePriceOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ItemsMarketplace", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000000f00000000000000000000000047f36d4a50ac23a448476fecab1fd688f1f80e84", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://556388c265e56ec2b0dfe7765f21f313686fecc1463809f383ead695570a7152"}