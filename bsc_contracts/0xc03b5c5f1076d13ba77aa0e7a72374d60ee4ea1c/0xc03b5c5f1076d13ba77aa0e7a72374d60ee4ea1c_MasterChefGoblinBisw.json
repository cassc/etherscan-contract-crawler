{"SourceCode": "// File: openzeppelin-solidity-2.3.0/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity-2.3.0/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity-2.3.0/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\r\n * available, which can be aplied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter += 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity-2.3.0/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/libraries/Math.sol\r\n\r\npragma solidity =0.5.16;\r\n\r\n// a library for performing various math operations\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/biswap/IBiswapRouter02.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IBiswapRouter02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapFeeReward() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint swapFee) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint swapFee) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/Strategy.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface Strategy {\r\n    /// @dev Execute worker strategy. Take LP tokens + ETH. Return LP tokens + ETH.\r\n    /// @param user The original user that is interacting with the operator.\r\n    /// @param debt The user's total debt, for better decision making context.\r\n    /// @param data Extra calldata information passed along to this strategy.\r\n    function execute(address user, uint256 debt, bytes calldata data) external payable;\r\n}\r\n\r\n// File: contracts/SafeToken.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface ERC20Interface {\r\n    function balanceOf(address user) external view returns (uint256);\r\n}\r\n\r\nlibrary SafeToken {\r\n    function myBalance(address token) internal view returns (uint256) {\r\n        return ERC20Interface(token).balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOf(address token, address user) internal view returns (uint256) {\r\n        return ERC20Interface(token).balanceOf(user);\r\n    }\r\n\r\n    function safeApprove(address token, address to, uint256 value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"!safeApprove\");\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint256 value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"!safeTransfer\");\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint256 value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"!safeTransferFrom\");\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call.value(value)(new bytes(0));\r\n        require(success, \"!safeTransferETH\");\r\n    }\r\n}\r\n\r\n// File: contracts/Goblin.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface Goblin {\r\n    /// @dev Work on a (potentially new) position. Optionally send ETH back to Bank.\r\n    function work(uint256 id, address user, uint256 debt, bytes calldata data) external payable;\r\n\r\n    /// @dev Re-invest whatever the goblin is working on.\r\n    function reinvest() external;\r\n\r\n    /// @dev Return the amount of ETH wei to get back if we are to liquidate the position.\r\n    function health(uint256 id) external view returns (uint256);\r\n\r\n    /// @dev Liquidate the given position to ETH. Send all ETH back to Bank.\r\n    function liquidate(uint256 id) external;\r\n}\r\n\r\n// File: contracts/biswap/IBiswapMasterChef.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n// Making the original MasterChef as an interface leads to compilation fail.\r\n// Use Contract instead of Interface here\r\ncontract IBiswapMasterChef {\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount; // How many LP tokens the user has provided.\r\n        uint256 rewardDebt; // Reward debt. See explanation below.\r\n    }\r\n\r\n    // Info of each pool.\r\n    struct PoolInfo {\r\n        IERC20 lpToken; // Address of LP token contract.\r\n        uint256 allocPoint; // How many allocation points assigned to this pool. Cakes to distribute per block.\r\n        uint256 lastRewardBlock; // Last block number that Cakes distribution occurs.\r\n        uint256 accCakePerShare; // Accumulated Cakes per share, times 1e12. See below.\r\n    }\r\n\r\n    address public BSW;\r\n\r\n    // Info of each user that stakes LP tokens.\r\n    mapping(uint256 => PoolInfo) public poolInfo;\r\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\r\n\r\n    // Deposit LP tokens to MasterChef for Cake allocation.\r\n    function deposit(uint256 _pid, uint256 _amount) external {}\r\n\r\n    // Withdraw LP tokens from MasterChef.\r\n    function withdraw(uint256 _pid, uint256 _amount) external {}\r\n}\r\n\r\n// File: contracts/MasterChefGoblinBiswap.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract MasterChefGoblinBiswap is Ownable, ReentrancyGuard, Goblin {\r\n    /// @notice Libraries\r\n    using SafeToken for address;\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice Events\r\n    event Reinvest(address indexed caller, uint256 reward, uint256 bounty);\r\n    event AddShare(uint256 indexed id, uint256 share);\r\n    event RemoveShare(uint256 indexed id, uint256 share);\r\n    event Liquidate(uint256 indexed id, uint256 wad);\r\n\r\n    /// @notice Immutable variables\r\n    IBiswapMasterChef public masterChef;\r\n    IUniswapV2Factory public factory;\r\n    IBiswapRouter02 public router;\r\n    IUniswapV2Pair public lpToken;\r\n    address public weth;\r\n    address public fToken;\r\n    address public rewardToken;\r\n    address public operator;\r\n    uint256 public pid;\r\n\r\n    /// @notice Mutable state variables\r\n    mapping(uint256 => uint256) public shares;\r\n    mapping(address => bool) public okStrats;\r\n    uint256 public totalShare;\r\n    Strategy public addStrat;\r\n    Strategy public liqStrat;\r\n    uint256 public reinvestBountyBps;\r\n    bool public reinvestToTreasury;\r\n    address public treasuryAddr;\r\n\r\n    constructor(\r\n        address _operator,\r\n        IBiswapMasterChef _masterChef,\r\n        IBiswapRouter02 _router,\r\n        uint256 _pid,        \r\n        Strategy _addStrat,\r\n        Strategy _liqStrat,\r\n        uint256 _reinvestBountyBps,\r\n        bool _reinvestToTreasury,\r\n        address _treasuryAddr\r\n    ) public {\r\n        operator = _operator;\r\n        weth = _router.WETH();\r\n        masterChef = _masterChef;\r\n        router = _router;\r\n        factory = IUniswapV2Factory(_router.factory());\r\n        // Get lpToken and fToken from MasterChef pool\r\n        pid = _pid;\r\n        (IERC20 _lpToken, , , ) = masterChef.poolInfo(_pid);\r\n        lpToken = IUniswapV2Pair(address(_lpToken));\r\n        address token0 = lpToken.token0();\r\n        address token1 = lpToken.token1();\r\n        fToken = token0 == weth ? token1 : token0;\r\n        rewardToken = address(masterChef.BSW());\r\n        addStrat = _addStrat;\r\n        liqStrat = _liqStrat;\r\n        okStrats[address(addStrat)] = true;\r\n        okStrats[address(liqStrat)] = true;\r\n        reinvestBountyBps = _reinvestBountyBps;\r\n        reinvestToTreasury = _reinvestToTreasury;\r\n        treasuryAddr = _treasuryAddr;\r\n        lpToken.approve(address(_masterChef), uint256(-1)); // 100% trust in the staking pool\r\n        lpToken.approve(address(router), uint256(-1)); // 100% trust in the router\r\n        fToken.safeApprove(address(router), uint256(-1)); // 100% trust in the router\r\n        rewardToken.safeApprove(address(router), uint256(-1)); // 100% trust in the router\r\n    }\r\n\r\n    /// @dev Require that the caller must be an EOA account to avoid flash loans.\r\n    modifier onlyEOA() {\r\n        require(msg.sender == tx.origin, \"not eoa\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Require that the caller must be the operator (the bank).\r\n    modifier onlyOperator() {\r\n        require(msg.sender == operator, \"not operator\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Return the entitied LP token balance for the given shares.\r\n    /// @param share The number of shares to be converted to LP balance.\r\n    function shareToBalance(uint256 share) public view returns (uint256) {\r\n        if (totalShare == 0) return share; // When there's no share, 1 share = 1 balance.\r\n        (uint256 totalBalance, ) = masterChef.userInfo(pid, address(this));\r\n        return share.mul(totalBalance).div(totalShare);\r\n    }\r\n\r\n    /// @dev Return the number of shares to receive if staking the given LP tokens.\r\n    /// @param balance the number of LP tokens to be converted to shares.\r\n    function balanceToShare(uint256 balance) public view returns (uint256) {\r\n        if (totalShare == 0) return balance; // When there's no share, 1 share = 1 balance.\r\n        (uint256 totalBalance, ) = masterChef.userInfo(pid, address(this));\r\n        return balance.mul(totalShare).div(totalBalance);\r\n    }\r\n\r\n    /// @dev Re-invest whatever this worker has earned back to staked LP tokens.\r\n    function reinvest() public onlyEOA nonReentrant {\r\n        // 1. Withdraw all the rewards.        \r\n        masterChef.withdraw(pid, 0);\r\n        uint256 reward = rewardToken.balanceOf(address(this));\r\n        if (reward == 0) return;\r\n        // 2. Send the reward bounty to the caller or Owner.\r\n        uint256 bounty = reward.mul(reinvestBountyBps) / 10000;\r\n\r\n        address rewardTo = reinvestToTreasury == true ? treasuryAddr : msg.sender;\r\n\r\n        rewardToken.safeTransfer(rewardTo, bounty);\r\n        // 3. Convert all the remaining rewards to ETH.\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(rewardToken);\r\n        path[1] = address(weth);\r\n        router.swapExactTokensForETH(reward.sub(bounty), 0, path, address(this), now);\r\n        // 4. Use add ETH strategy to convert all ETH to LP tokens.\r\n        addStrat.execute.value(address(this).balance)(address(0), 0, abi.encode(fToken, 0));\r\n        // 5. Mint more LP tokens and stake them for more rewards.\r\n        masterChef.deposit(pid, lpToken.balanceOf(address(this)));\r\n        emit Reinvest(msg.sender, reward, bounty);\r\n    }\r\n\r\n    /// @dev Work on the given position. Must be called by the operator.\r\n    /// @param id The position ID to work on.\r\n    /// @param user The original user that is interacting with the operator.\r\n    /// @param debt The amount of user debt to help the strategy make decisions.\r\n    /// @param data The encoded data, consisting of strategy address and calldata.\r\n    function work(uint256 id, address user, uint256 debt, bytes calldata data) \r\n        external payable \r\n        onlyOperator nonReentrant \r\n    {\r\n        // 1. Convert this position back to LP tokens.\r\n        _removeShare(id);\r\n        // 2. Perform the worker strategy; sending LP tokens + ETH; expecting LP tokens + ETH.\r\n        (address strat, bytes memory ext) = abi.decode(data, (address, bytes));\r\n        require(okStrats[strat], \"unapproved work strategy\");\r\n        lpToken.transfer(strat, lpToken.balanceOf(address(this)));\r\n        Strategy(strat).execute.value(msg.value)(user, debt, ext);\r\n        // 3. Add LP tokens back to the farming pool.\r\n        _addShare(id);\r\n        // 4. Return any remaining ETH back to the operator.\r\n        SafeToken.safeTransferETH(msg.sender, address(this).balance);\r\n    }\r\n\r\n    /// @dev Return maximum output given the input amount and the status of Uniswap reserves.\r\n    /// @param aIn The amount of asset to market sell.\r\n    /// @param rIn the amount of asset in reserve for input.\r\n    /// @param rOut The amount of asset in reserve for output.\r\n    function getMktSellAmount(uint256 aIn, uint256 rIn, uint256 rOut) public pure returns (uint256) {\r\n        if (aIn == 0) return 0;\r\n        require(rIn > 0 && rOut > 0, \"bad reserve values\");\r\n        uint256 aInWithFee = aIn.mul(9975);\r\n        uint256 numerator = aInWithFee.mul(rOut);\r\n        uint256 denominator = rIn.mul(10000).add(aInWithFee);\r\n        return numerator / denominator;\r\n    }\r\n\r\n    /// @dev Return the amount of ETH to receive if we are to liquidate the given position.\r\n    /// @param id The position ID to perform health check.\r\n    function health(uint256 id) external view returns (uint256) {\r\n        // 1. Get the position's LP balance and LP total supply.\r\n        uint256 lpBalance = shareToBalance(shares[id]);\r\n        uint256 lpSupply = lpToken.totalSupply(); // Ignore pending mintFee as it is insignificant\r\n        // 2. Get the pool's total supply of WETH and farming token.\r\n        (uint256 r0, uint256 r1,) = lpToken.getReserves();\r\n        (uint256 totalWETH, uint256 totalfToken) = lpToken.token0() == weth ? (r0, r1) : (r1, r0);\r\n        // 3. Convert the position's LP tokens to the underlying assets.\r\n        uint256 userWETH = lpBalance.mul(totalWETH).div(lpSupply);\r\n        uint256 userfToken = lpBalance.mul(totalfToken).div(lpSupply);\r\n        // 4. Convert all farming tokens to ETH and return total ETH.\r\n        return getMktSellAmount(\r\n            userfToken, totalfToken.sub(userfToken), totalWETH.sub(userWETH)\r\n        ).add(userWETH);\r\n    }\r\n\r\n    /// @dev Liquidate the given position by converting it to ETH and return back to caller.\r\n    /// @param id The position ID to perform liquidation\r\n    function liquidate(uint256 id) external onlyOperator nonReentrant {\r\n        // 1. Convert the position back to LP tokens and use liquidate strategy.\r\n        _removeShare(id);\r\n        lpToken.transfer(address(liqStrat), lpToken.balanceOf(address(this)));\r\n        liqStrat.execute(address(0), 0, abi.encode(fToken, 0));\r\n        // 2. Return all available ETH back to the operator.\r\n        uint256 wad = address(this).balance;\r\n        SafeToken.safeTransferETH(msg.sender, wad);\r\n        emit Liquidate(id, wad);\r\n    }\r\n\r\n    /// @dev Internal function to stake all outstanding LP tokens to the given position ID.\r\n    function _addShare(uint256 id) internal {\r\n        uint256 balance = lpToken.balanceOf(address(this));\r\n        if (balance > 0) {\r\n            uint256 share = balanceToShare(balance);\r\n            masterChef.deposit(pid, balance);\r\n            shares[id] = shares[id].add(share);\r\n            totalShare = totalShare.add(share);\r\n            emit AddShare(id, share);\r\n        }\r\n    }\r\n\r\n    /// @dev Internal function to remove shares of the ID and convert to outstanding LP tokens.\r\n    function _removeShare(uint256 id) internal {\r\n        uint256 share = shares[id];\r\n        if (share > 0) {\r\n            uint256 balance = shareToBalance(share);\r\n            masterChef.withdraw(pid, balance);\r\n            totalShare = totalShare.sub(share);\r\n            shares[id] = 0;\r\n            emit RemoveShare(id, share);\r\n        }\r\n    }\r\n\r\n    /// @dev Recover ERC20 tokens that were accidentally sent to this smart contract.\r\n    /// @param token The token contract. Can be anything. This contract should not hold ERC20 tokens.\r\n    /// @param to The address to send the tokens to.\r\n    /// @param value The number of tokens to transfer to `to`.\r\n    function recover(address token, address to, uint256 value) external onlyOwner nonReentrant {\r\n        token.safeTransfer(to, value);\r\n    }\r\n\r\n    /// @dev Set the reward bounty for calling reinvest operations.\r\n    /// @param _reinvestBountyBps The bounty value to update.\r\n    function setReinvestBountyBps(uint256 _reinvestBountyBps) external onlyOwner {\r\n        reinvestBountyBps = _reinvestBountyBps;\r\n    }\r\n\r\n    /// @dev Set the given strategies' approval status.\r\n    /// @param strats The strategy addresses.\r\n    /// @param isOk Whether to approve or unapprove the given strategies.\r\n    function setStrategyOk(address[] calldata strats, bool isOk) external onlyOwner {\r\n        uint256 len = strats.length;\r\n        for (uint256 idx = 0; idx < len; idx++) {\r\n            okStrats[strats[idx]] = isOk;\r\n        }\r\n    }\r\n\r\n    /// @dev Set Reward Reinvest Reward to owner or msg,sender\r\n    /// @param toTreasury bool set to treasury or not\r\n    function setReinvestToTreasury (bool toTreasury) external onlyOwner {\r\n        reinvestToTreasury = toTreasury;\r\n    }\r\n\r\n\r\n    /// @dev Set Treasury Address\r\n    /// @param _treasuryAddr treasury address \r\n    function setTreasuryAddress (address _treasuryAddr) external onlyOwner {\r\n        treasuryAddr = _treasuryAddr;\r\n    }\r\n\r\n    /// @dev Update critical strategy smart contracts. EMERGENCY ONLY. Bad strategies can steal funds.\r\n    /// @param _addStrat The new add strategy contract.\r\n    /// @param _liqStrat The new liquidate strategy contract.\r\n    function setCriticalStrategies(Strategy _addStrat, Strategy _liqStrat) external onlyOwner {\r\n        addStrat = _addStrat;\r\n        liqStrat = _liqStrat;\r\n    }\r\n\r\n    function() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"contract IBiswapMasterChef\",\"name\":\"_masterChef\",\"type\":\"address\"},{\"internalType\":\"contract IBiswapRouter02\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"contract Strategy\",\"name\":\"_addStrat\",\"type\":\"address\"},{\"internalType\":\"contract Strategy\",\"name\":\"_liqStrat\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reinvestBountyBps\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_reinvestToTreasury\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"AddShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"RemoveShare\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"addStrat\",\"outputs\":[{\"internalType\":\"contract Strategy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"balanceToShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rOut\",\"type\":\"uint256\"}],\"name\":\"getMktSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"health\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liqStrat\",\"outputs\":[{\"internalType\":\"contract Strategy\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"contract IBiswapMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"okStrats\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"recover\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reinvestBountyBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reinvestToTreasury\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IBiswapRouter02\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract Strategy\",\"name\":\"_addStrat\",\"type\":\"address\"},{\"internalType\":\"contract Strategy\",\"name\":\"_liqStrat\",\"type\":\"address\"}],\"name\":\"setCriticalStrategies\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reinvestBountyBps\",\"type\":\"uint256\"}],\"name\":\"setReinvestBountyBps\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"toTreasury\",\"type\":\"bool\"}],\"name\":\"setReinvestToTreasury\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"strats\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isOk\",\"type\":\"bool\"}],\"name\":\"setStrategyOk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddr\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"shareToBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasuryAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"work\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "MasterChefGoblinBiswap", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000056979af35ddbce14f5dbba1571cafb9a35d48401000000000000000000000000dbc1a13490deef9c3c12b44fe77b503c1b0617390000000000000000000000003a6d8ca21d1cf76f653a67577fa0d27453350dd800000000000000000000000000000000000000000000000000000000000000030000000000000000000000009deaecad8a59e000d807107e3d2f06b77fc38e990000000000000000000000007890607443d9348f09b56b9da04d10a5fabebb8b000000000000000000000000000000000000000000000000000000000000012c00000000000000000000000000000000000000000000000000000000000000010000000000000000000000008b8da69ea24252a8b8a46014a3a6c34f99866566", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://d92e113fef3ae513a2ecae90579734447671e16f0329e59ad7327772707b7b76"}