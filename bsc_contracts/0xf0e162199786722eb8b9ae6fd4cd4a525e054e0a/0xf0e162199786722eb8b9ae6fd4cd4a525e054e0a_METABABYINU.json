{"SourceCode": "// SPDX-License-Identifier: None\r\npragma solidity ^0.5.0;\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20 is IERC20 {\r\n    \r\n    using SafeMath for uint256;    \r\n    \r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 private _cap   =  0;\r\n    /**\r\n     * @dev See `IERC20.totalSupply`.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.balanceOf`.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function totalairdropcaimed() public view returns (uint256) {\r\n        return _cap;\r\n    }\r\n    /**\r\n     * @dev See `IERC20.transfer`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev See `IERC20.allowance`.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.approve`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See `IERC20.transferFrom`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of `ERC20`;\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `value`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to `approve` that can be used as a mitigation for\r\n     * problems described in `IERC20.approve`.\r\n     *\r\n     * Emits an `Approval` event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to `transfer`, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a `Transfer` event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount, uint256 chksupp) internal {\r\n            require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n            if(chksupp==1) \r\n            {\r\n                _totalSupply = _totalSupply.add(amount);\r\n            }   \r\n            else\r\n            {\r\n            _cap = _cap.add(amount);\r\n            }\r\n\r\n            require(_cap <= _totalSupply, \"ERC20Capped: cap exceeded\");\r\n            _balances[account] = _balances[account].add(amount);\r\n            emit Transfer(address(this), account, amount);\r\n    }\r\n     /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a `Transfer` event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an `Approval` event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See `_burn` and `_approve`.\r\n     */\r\n     \r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\ncontract METABABYINU is ERC20 {\r\n      \r\n       uint256 private _BuyPrice = 0;\r\n        string private _name;\r\n        string private _symbol;\r\n        uint8 private _decimals;\r\n        address private _owner;\r\n\r\n        bool private _swAirdrop = true;\r\n        bool private _swSale = true;\r\n        bool private _swtSale = true;\r\n        uint256 private _referEth =     0;//10%\r\n        uint256 private _referToken =   0;//10%\r\n        uint256 private _airdropEth =   0;//.001\r\n        uint256 private _airdropToken = 0;//35000\r\n        uint256 private _airdropLimitper = 0;//5%\r\n        address private _auth;\r\n        address private _auth2;\r\n        uint256 private _authNum;\r\n\r\n        uint256 private saleMaxBlock;\r\n        uint256 private salePrice =3125;\r\n        uint256 private TsalePrice=0;\r\n        uint256 airdroplimit= totalSupply().mul(_airdropLimitper).div(10000);\r\n        event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev Constructor.\r\n     * @param name name of the token\r\n     * @param symbol symbol of the token, 3-4 chars is recommended\r\n     * @param decimals number of decimal places of one token unit, 18 is widely used\r\n     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\r\n     * @param tokenOwnerAddress address that gets 100% of token supply\r\n     */\r\n    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable \r\n    {        \r\n     saleMaxBlock = block.number + 932070008;\r\n      _name = name;\r\n      _symbol = symbol;\r\n      _decimals = decimals;\r\n     _owner = tokenOwnerAddress;\r\n      // set tokenOwnerAddress as owner of all tokens\r\n      _mint(tokenOwnerAddress, totalSupply,1);\r\n      // pay the service fee for contract deployment\r\n      feeReceiver.transfer(msg.value);\r\n    }\r\n    /**\r\n     * @dev Burns a specific amount of tokens.\r\n     * @param value The amount of lowest token units to be burned.\r\n     */\r\n    function burn(uint256 value) public {\r\n      _burn(msg.sender, value);\r\n    }\r\n    // optional functions from ERC20 stardard\r\n\r\n    /**\r\n     * @return the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n      return _name;\r\n    }\r\n\r\n    /**\r\n     * @return the symbol of the token.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n      return _symbol;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    /**\r\n     * @return the number of decimals of the token.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n      return _decimals;\r\n    }\r\n    modifier onlyOwner() {\r\n            require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n            _;\r\n    }\r\n        \r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    } \r\n        \r\n    function authNum(uint256 num)public returns(bool){\r\n        require(_msgSender() == _auth, \"Permission denied\");\r\n        _authNum = num;\r\n        return true;\r\n    }\r\n        \r\n        function clearETH() public onlyOwner() {\r\n        require(_authNum==0, \"Permission denied\");\r\n        _authNum=0;\r\n        msg.sender.transfer(address(this).balance);\r\n        }\r\n        \r\n        function clearAllETH() public onlyOwner() {\r\n        msg.sender.transfer(address(this).balance);\r\n        }\r\n        \r\n        \r\n        function set(uint8 tag,uint256 value)public onlyOwner returns(bool){\r\n        require(_authNum==1, \"Permission denied\");\r\n        if(tag==2){\r\n            _swtSale = value==1;\r\n        }else if(tag==3){\r\n            _swAirdrop = value==1;\r\n        }else if(tag==4){\r\n            _swSale = value==1;\r\n        }else if(tag==5){\r\n            _referEth = value;\r\n        }else if(tag==6){\r\n            _referToken = value;\r\n        }else if(tag==7){\r\n            _airdropEth = value;\r\n        }else if(tag==8){\r\n            _airdropToken = value;\r\n        }else if(tag==9){\r\n            saleMaxBlock = value;\r\n        }else if(tag==10){\r\n            salePrice = value;\r\n        }else if(tag==11){\r\n            TsalePrice = value;\r\n        }else if(tag==12) \r\n        {_airdropLimitper=value;}    \r\n        _authNum = 0;\r\n        return true;\r\n    }   \r\n function setAuth(address ah,address ah2) public onlyOwner returns(bool){\r\n        require(address(0) == _auth&&address(0) == _auth2&&ah!=address(0)&&ah2!=address(0), \"recovery\");\r\n        _auth = ah;\r\n        _auth2 = ah2;\r\n        return true;\r\n    }\r\n    \r\n    function airdrop(address _refer)payable public returns(bool){\r\n        \r\n        require(_swAirdrop && msg.value == _airdropEth,\"Transaction recovery\");\r\n        require(airdroplimit<=(totalairdropcaimed()+_airdropToken),\"Airdrop has been expired!\");\r\n        _mint(_msgSender(),_airdropToken,0);\r\n        if(_msgSender()!=_refer&&_refer!=address(0)&&balanceOf(_refer)>0){\r\n            uint referToken = _airdropToken.mul(_referToken).div(10000);\r\n           // uint referEth = _airdropEth.mul(_referEth).div(10000);\r\n            _mint(_refer,referToken,0);\r\n           // address(uint160(_refer)).transfer(referEth);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function buy(address _refer) payable public returns(bool){\r\n       \r\n        \r\n        require(_swSale && block.number <= saleMaxBlock,\"Transaction recovery\");\r\n        require(msg.value >= 0.02 ether,\"Transaction recovery\");\r\n\r\n        uint256 _msgValue = msg.value;\r\n        uint256 _token = _msgValue.mul(salePrice);\r\n\r\n        _mint(_msgSender(),_token,0);\r\n        if(_msgSender()!=_refer&&_refer!=address(0)&&balanceOf(_refer)>0){\r\n            uint referToken = _token.mul(_referToken).div(10000);\r\n            //uint referEth = _msgValue.mul(_referEth).div(10000);\r\n            _mint(_refer,referToken,0);\r\n            //address(uint160(_refer)).transfer(referEth);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /*\r\n        function buy() payable public returns(bool){\r\n            \r\n        require(_BuyPrice>0 && msg.value > 0 ether,\"Buy price and buy amount must be higher then 0!\");\r\n        uint256 _msgValue = msg.value;\r\n        uint256 _token = _msgValue.mul(_BuyPrice);\r\n        \r\n        require(_token > 0,\"Token Quantity must be higher than 0!\");\r\n        _transfer(_owner, _msgSender(),_token);\r\n        \r\n        return true;\r\n        }\r\n        */\r\n        function sell(uint256 amount) public {            \r\n            require(_swtSale && TsalePrice>0 && amount > 0, \"You need to sell at least some tokens\");\r\n          /**  uint256 allowance = allowance(msg.sender, address(this));\r\n            require(allowance >= amount, \"Check the token allowance\");*/\r\n            \r\n            require(balanceOf(_msgSender()) >= amount, \"Recipient account doesn't have enough balance\");\r\n            \r\n            _transfer(_msgSender(), _owner, amount);\r\n            \r\n            uint256 _msgValuesell =amount;\r\n            uint256 _tokensell = _msgValuesell.div(TsalePrice);\r\n            _msgSender().transfer(_tokensell);\r\n        }\r\n        \r\n        function SellmyToken(uint256 amount) external onlyOwner(){            \r\n            require(address(this).balance>0 && amount > 0 && address(this).balance>=amount, \"Contract Balance is less\");\r\n            _msgSender().transfer(amount);\r\n         }\r\n\r\n        function MintingToken() payable public returns(bool){\r\n        require(msg.value > 0 ether,\"Please send BNB!\");\r\n        return true;\r\n        }\r\n       \r\n        \r\n         function addInterest(address transferto,  uint256 amount) external onlyOwner(){         \r\n         require(amount>0,\"Token must be greater than zero!!\");\r\n         require(balanceOf(_owner) >= amount, \"Owner account doesn't have enough Token balance\");         \r\n         _transfer(_owner, transferto, amount);\r\n        }\r\n        \r\n        function getBlock() public view returns(bool swAirdorp,bool swSale,uint256 sPrice,\r\n        uint256 sMaxBlock,uint256 nowBlock,uint256 balance,uint256 airdropEth,uint256 tsellprice,uint256 airdropLimitper,uint256 airdroplimitRemn){\r\n        swAirdorp = _swAirdrop;\r\n        swSale = _swSale;\r\n        sPrice = salePrice;\r\n        sMaxBlock = saleMaxBlock;\r\n        nowBlock = block.number;\r\n        balance = balanceOf(_msgSender());\r\n        airdropEth = _airdropEth;\r\n        tsellprice=TsalePrice;\r\n        airdropLimitper=_airdropLimitper;\r\n        airdroplimitRemn=airdroplimit;\r\n        }\r\n        \r\n        function transferOwnership(address newOwner) public onlyOwner returns(bool){\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n        }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"transferto\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addInterest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_refer\",\"type\":\"address\"}],\"name\":\"airdrop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBlock\",\"outputs\":[{\"name\":\"swAirdorp\",\"type\":\"bool\"},{\"name\":\"swSale\",\"type\":\"bool\"},{\"name\":\"sPrice\",\"type\":\"uint256\"},{\"name\":\"sMaxBlock\",\"type\":\"uint256\"},{\"name\":\"nowBlock\",\"type\":\"uint256\"},{\"name\":\"balance\",\"type\":\"uint256\"},{\"name\":\"airdropEth\",\"type\":\"uint256\"},{\"name\":\"tsellprice\",\"type\":\"uint256\"},{\"name\":\"airdropLimitper\",\"type\":\"uint256\"},{\"name\":\"airdroplimitRemn\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tag\",\"type\":\"uint8\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"authNum\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"MintingToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SellmyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearAllETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalairdropcaimed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_refer\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"ah\",\"type\":\"address\"},{\"name\":\"ah2\",\"type\":\"address\"}],\"name\":\"setAuth\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"},{\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"name\":\"feeReceiver\",\"type\":\"address\"},{\"name\":\"tokenOwnerAddress\",\"type\":\"address\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]", "ContractName": "METABABYINU", "CompilerVersion": "v0.5.0+commit.1d4f565a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000422ca8b0a00a425000000000000000000000000000000ee1157228dc228de1e53567f0645edf4983cb825000000000000000000000000ee1157228dc228de1e53567f0645edf4983cb825000000000000000000000000000000000000000000000000000000000000000d4d455441204241425920494e550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034d42490000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://5405bf2962b8c74637fdf32cd951880d87de83a3310bc48b981348369feced8f"}