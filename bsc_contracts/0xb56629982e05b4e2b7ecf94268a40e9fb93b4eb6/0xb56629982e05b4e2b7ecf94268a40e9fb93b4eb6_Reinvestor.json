{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/vyacheslav/Documents/nmx-dex/eth-smart-contracts/contracts/Reinvestor.sol\": {\r\n      \"content\": \"pragma solidity >=0.7.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./NomiswapLibrary.sol\\\";\\nimport \\\"./INomiswapPair.sol\\\";\\nimport \\\"./Math.sol\\\";\\nimport \\\"./StakingService.sol\\\";\\nimport \\\"./RecoverableByOwner.sol\\\";\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\\ncontract Reinvestor is RecoverableByOwner {\\n    using SafeERC20 for IERC20;\\n\\n    address constant nmx = 0xd32d01A43c869EdcD1117C640fBDcfCFD97d9d65;\\n    address constant factory = 0xd6715A8be3944ec72738F0BFDC739d48C3c29349;\\n    address constant wbnb = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    function launchpoolReinvest(\\n            uint256 deadline,\\n            uint128 signedClaimNmxAmount,\\n            uint8 claimV,\\n            bytes32 claimR,\\n            bytes32 claimS,\\n            address stakingService) external {\\n        require(StakingService(stakingService).stakingToken() == StakingService(stakingService).nmx(), \\\"Reinvestor: reinvestment is not supported\\\");\\n\\n        StakingService(stakingService).claimWithAuthorization(\\n            msg.sender,\\n            signedClaimNmxAmount,\\n            signedClaimNmxAmount,\\n            deadline,\\n            claimV,\\n            claimR,\\n            claimS\\n        );\\n\\n        IERC20(nmx).safeTransfer(msg.sender, signedClaimNmxAmount);\\n        StakingService(stakingService).stakeFrom(msg.sender, signedClaimNmxAmount);\\n    }\\n\\n    function reinvestETH(\\n            uint128 maxClaimNmxAmount,\\n            uint256 deadline,\\n            uint8 claimV,\\n            bytes32 claimR,\\n            bytes32 claimS,\\n            uint128 maxPairedTokenAmount,\\n            address stakingService) external payable {\\n        \\n        address pair = StakingService(stakingService).stakingToken();\\n        address pairedToken = INomiswapPair(pair).token0();\\n\\n        if (pairedToken == nmx) {\\n            pairedToken = INomiswapPair(pair).token1();\\n        }\\n\\n        require(pairedToken == wbnb, \\\"Reinvestor: Only for pools with bnb\\\");\\n\\n        uint liquidityMinted = mintLpTokensByETH(\\n            maxClaimNmxAmount,\\n            deadline,\\n            claimV,\\n            claimR,\\n            claimS,\\n            maxPairedTokenAmount,\\n            stakingService,\\n            pair,\\n            pairedToken\\n        );\\n\\n        StakingService(stakingService).stakeFrom(msg.sender, uint128(liquidityMinted));\\n    }\\n\\n    function reinvest(\\n            uint128 maxClaimNmxAmount,\\n            uint256 deadline,\\n            uint8 claimV,\\n            bytes32 claimR,\\n            bytes32 claimS,\\n            uint128 maxPairedTokenAmount,\\n            address stakingService) external {\\n\\n        address pair = StakingService(stakingService).stakingToken();\\n        address pairedToken = INomiswapPair(pair).token0();\\n\\n        if (pairedToken == nmx) {\\n            pairedToken = INomiswapPair(pair).token1();\\n        }\\n\\n        uint liquidityMinted = mintLpTokens(\\n            maxClaimNmxAmount,\\n            deadline,\\n            claimV,\\n            claimR,\\n            claimS,\\n            maxPairedTokenAmount,\\n            stakingService,\\n            pair,\\n            pairedToken\\n        );\\n\\n        StakingService(stakingService).stakeFrom(msg.sender, uint128(liquidityMinted));\\n    }\\n\\n    function mintLpTokens(\\n        uint128 signedClaimNmxAmount,\\n        uint256 claimDeadline,\\n        uint8 claimV,\\n        bytes32 claimR,\\n        bytes32 claimS,\\n        uint128 maxPairedTokenAmount,\\n        address stakingService,\\n        address pair,\\n        address pairedToken\\n    ) internal returns (uint256) {\\n        uint128 claimNmxAmount;\\n        uint128 pairedTokenAmount;\\n        (claimNmxAmount, pairedTokenAmount) = getNmxAmount(signedClaimNmxAmount, maxPairedTokenAmount, pairedToken);\\n        StakingService(stakingService).claimWithAuthorization(\\n            msg.sender,\\n            claimNmxAmount,\\n            signedClaimNmxAmount,\\n            claimDeadline,\\n            claimV,\\n            claimR,\\n            claimS\\n        );\\n\\n        IERC20(nmx).safeTransfer(pair, claimNmxAmount);\\n        IERC20(pairedToken).safeTransferFrom(msg.sender, pair, pairedTokenAmount);\\n        return INomiswapPair(pair).mint(msg.sender);\\n    }\\n\\n    function mintLpTokensByETH(\\n        uint128 signedClaimNmxAmount,\\n        uint256 claimDeadline,\\n        uint8 claimV,\\n        bytes32 claimR,\\n        bytes32 claimS,\\n        uint128 maxPairedTokenAmount,\\n        address stakingService,\\n        address pair,\\n        address pairedToken\\n    ) internal returns (uint256) {\\n        uint128 claimNmxAmount;\\n        uint128 pairedTokenAmount;\\n        (claimNmxAmount, pairedTokenAmount) = getNmxAmount(signedClaimNmxAmount, maxPairedTokenAmount, pairedToken);\\n        StakingService(stakingService).claimWithAuthorization(\\n            msg.sender,\\n            claimNmxAmount,\\n            signedClaimNmxAmount,\\n            claimDeadline,\\n            claimV,\\n            claimR,\\n            claimS\\n        );\\n\\n        IERC20(nmx).safeTransfer(pair, claimNmxAmount);\\n        IWETH(wbnb).deposit{value: pairedTokenAmount}();\\n        require(IWETH(wbnb).transfer(pair, pairedTokenAmount));\\n        return INomiswapPair(pair).mint(msg.sender);\\n        // refund dust eth\\n        if (msg.value > pairedTokenAmount) {\\n            (bool success,) = msg.sender.call{value: msg.value - pairedTokenAmount}(new bytes(0));\\n            require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n        }\\n    }\\n\\n    function getNmxAmount(uint128 nmxAmount, uint128 pairedTokenAmount, address pairedToken) private view\\n    returns (uint128 requiredNmxAmount, uint128 requiredTokenAmount) {\\n        (uint nmxReserve, uint pairedTokenReserve) = NomiswapLibrary.getReserves(factory, nmx, pairedToken);\\n        uint quotedNmxAmount = NomiswapLibrary.quote(pairedTokenAmount, pairedTokenReserve, nmxReserve);\\n        if (quotedNmxAmount <= nmxAmount) {\\n            return (uint128(quotedNmxAmount), pairedTokenAmount);\\n        }\\n        uint requiredTokenAmount256 = NomiswapLibrary.quote(nmxAmount, nmxReserve, pairedTokenReserve);\\n        return (nmxAmount, uint128(requiredTokenAmount256));\\n    }\\n}\\n\"\r\n    },\r\n    \"abdk-libraries-solidity/ABDKMath64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.5.0 || ^0.6.0 || ^0.7.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n  /*\\n   * Minimum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n  /*\\n   * Maximum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  /**\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromInt (int256 x) internal pure returns (int128) {\\n    require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n    return int128 (x << 64);\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n   * rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64-bit integer number\\n   */\\n  function toInt (int128 x) internal pure returns (int64) {\\n    return int64 (x >> 64);\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\n    require (x <= 0x7FFFFFFFFFFFFFFF);\\n    return int128 (x << 64);\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n   * number rounding down.  Revert on underflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return unsigned 64-bit integer number\\n   */\\n  function toUInt (int128 x) internal pure returns (uint64) {\\n    require (x >= 0);\\n    return uint64 (x >> 64);\\n  }\\n\\n  /**\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n   * number rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 128.128-bin fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function from128x128 (int256 x) internal pure returns (int128) {\\n    int256 result = x >> 64;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n   * number.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 128.128 fixed point number\\n   */\\n  function to128x128 (int128 x) internal pure returns (int256) {\\n    return int256 (x) << 64;\\n  }\\n\\n  /**\\n   * Calculate x + y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\n    int256 result = int256(x) + y;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate x - y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\n    int256 result = int256(x) - y;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\n    int256 result = int256(x) * y >> 64;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y signed 256-bit integer number\\n   * @return signed 256-bit integer number\\n   */\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\n    if (x == MIN_64x64) {\\n      require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n        y <= 0x1000000000000000000000000000000000000000000000000);\\n      return -y << 63;\\n    } else {\\n      bool negativeResult = false;\\n      if (x < 0) {\\n        x = -x;\\n        negativeResult = true;\\n      }\\n      if (y < 0) {\\n        y = -y; // We rely on overflow behavior here\\n        negativeResult = !negativeResult;\\n      }\\n      uint256 absoluteResult = mulu (x, uint256 (y));\\n      if (negativeResult) {\\n        require (absoluteResult <=\\n          0x8000000000000000000000000000000000000000000000000000000000000000);\\n        return -int256 (absoluteResult); // We rely on overflow behavior here\\n      } else {\\n        require (absoluteResult <=\\n          0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int256 (absoluteResult);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\n    if (y == 0) return 0;\\n\\n    require (x >= 0);\\n\\n    uint256 lo = (uint256 (x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n    uint256 hi = uint256 (x) * (y >> 128);\\n\\n    require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n    hi <<= 64;\\n\\n    require (hi <=\\n      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n    return hi + lo;\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\n    require (y != 0);\\n    int256 result = (int256 (x) << 64) / y;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @param y signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\n    require (y != 0);\\n\\n    bool negativeResult = false;\\n    if (x < 0) {\\n      x = -x; // We rely on overflow behavior here\\n      negativeResult = true;\\n    }\\n    if (y < 0) {\\n      y = -y; // We rely on overflow behavior here\\n      negativeResult = !negativeResult;\\n    }\\n    uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\n    if (negativeResult) {\\n      require (absoluteResult <= 0x80000000000000000000000000000000);\\n      return -int128 (absoluteResult); // We rely on overflow behavior here\\n    } else {\\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return int128 (absoluteResult); // We rely on overflow behavior here\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\n    require (y != 0);\\n    uint128 result = divuu (x, y);\\n    require (result <= uint128 (MAX_64x64));\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate -x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function neg (int128 x) internal pure returns (int128) {\\n    require (x != MIN_64x64);\\n    return -x;\\n  }\\n\\n  /**\\n   * Calculate |x|.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function abs (int128 x) internal pure returns (int128) {\\n    require (x != MIN_64x64);\\n    return x < 0 ? -x : x;\\n  }\\n\\n  /**\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function inv (int128 x) internal pure returns (int128) {\\n    require (x != 0);\\n    int256 result = int256 (0x100000000000000000000000000000000) / x;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\n    return int128 ((int256 (x) + int256 (y)) >> 1);\\n  }\\n\\n  /**\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n   * Revert on overflow or in case x * y is negative.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\n    int256 m = int256 (x) * int256 (y);\\n    require (m >= 0);\\n    require (m <\\n        0x4000000000000000000000000000000000000000000000000000000000000000);\\n    return int128 (sqrtu (uint256 (m)));\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y uint256 value\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\n    bool negative = x < 0 && y & 1 == 1;\\n\\n    uint256 absX = uint128 (x < 0 ? -x : x);\\n    uint256 absResult;\\n    absResult = 0x100000000000000000000000000000000;\\n\\n    if (absX <= 0x10000000000000000) {\\n      absX <<= 63;\\n      while (y != 0) {\\n        if (y & 0x1 != 0) {\\n          absResult = absResult * absX >> 127;\\n        }\\n        absX = absX * absX >> 127;\\n\\n        if (y & 0x2 != 0) {\\n          absResult = absResult * absX >> 127;\\n        }\\n        absX = absX * absX >> 127;\\n\\n        if (y & 0x4 != 0) {\\n          absResult = absResult * absX >> 127;\\n        }\\n        absX = absX * absX >> 127;\\n\\n        if (y & 0x8 != 0) {\\n          absResult = absResult * absX >> 127;\\n        }\\n        absX = absX * absX >> 127;\\n\\n        y >>= 4;\\n      }\\n\\n      absResult >>= 64;\\n    } else {\\n      uint256 absXShift = 63;\\n      if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\\n      if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\\n      if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\\n      if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\\n      if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\\n      if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\\n\\n      uint256 resultShift = 0;\\n      while (y != 0) {\\n        require (absXShift < 64);\\n\\n        if (y & 0x1 != 0) {\\n          absResult = absResult * absX >> 127;\\n          resultShift += absXShift;\\n          if (absResult > 0x100000000000000000000000000000000) {\\n            absResult >>= 1;\\n            resultShift += 1;\\n          }\\n        }\\n        absX = absX * absX >> 127;\\n        absXShift <<= 1;\\n        if (absX >= 0x100000000000000000000000000000000) {\\n            absX >>= 1;\\n            absXShift += 1;\\n        }\\n\\n        y >>= 1;\\n      }\\n\\n      require (resultShift < 64);\\n      absResult >>= 64 - resultShift;\\n    }\\n    int256 result = negative ? -int256 (absResult) : int256 (absResult);\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sqrt (int128 x) internal pure returns (int128) {\\n    require (x >= 0);\\n    return int128 (sqrtu (uint256 (x) << 64));\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function log_2 (int128 x) internal pure returns (int128) {\\n    require (x > 0);\\n\\n    int256 msb = 0;\\n    int256 xc = x;\\n    if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n    if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n    if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n    if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n    if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n    if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n    if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n    int256 result = msb - 64 << 64;\\n    uint256 ux = uint256 (x) << uint256 (127 - msb);\\n    for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n      ux *= ux;\\n      uint256 b = ux >> 255;\\n      ux >>= 127 + b;\\n      result += bit * int256 (b);\\n    }\\n\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function ln (int128 x) internal pure returns (int128) {\\n    require (x > 0);\\n\\n    return int128 (\\n        uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128);\\n  }\\n\\n  /**\\n   * Calculate binary exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp_2 (int128 x) internal pure returns (int128) {\\n    require (x < 0x400000000000000000); // Overflow\\n\\n    if (x < -0x400000000000000000) return 0; // Underflow\\n\\n    uint256 result = 0x80000000000000000000000000000000;\\n\\n    if (x & 0x8000000000000000 > 0)\\n      result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n    if (x & 0x4000000000000000 > 0)\\n      result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n    if (x & 0x2000000000000000 > 0)\\n      result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n    if (x & 0x1000000000000000 > 0)\\n      result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n    if (x & 0x800000000000000 > 0)\\n      result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n    if (x & 0x400000000000000 > 0)\\n      result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n    if (x & 0x200000000000000 > 0)\\n      result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n    if (x & 0x100000000000000 > 0)\\n      result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n    if (x & 0x80000000000000 > 0)\\n      result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n    if (x & 0x40000000000000 > 0)\\n      result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n    if (x & 0x20000000000000 > 0)\\n      result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n    if (x & 0x10000000000000 > 0)\\n      result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n    if (x & 0x8000000000000 > 0)\\n      result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n    if (x & 0x4000000000000 > 0)\\n      result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n    if (x & 0x2000000000000 > 0)\\n      result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n    if (x & 0x1000000000000 > 0)\\n      result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n    if (x & 0x800000000000 > 0)\\n      result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n    if (x & 0x400000000000 > 0)\\n      result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n    if (x & 0x200000000000 > 0)\\n      result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n    if (x & 0x100000000000 > 0)\\n      result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n    if (x & 0x80000000000 > 0)\\n      result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n    if (x & 0x40000000000 > 0)\\n      result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n    if (x & 0x20000000000 > 0)\\n      result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n    if (x & 0x10000000000 > 0)\\n      result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n    if (x & 0x8000000000 > 0)\\n      result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n    if (x & 0x4000000000 > 0)\\n      result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n    if (x & 0x2000000000 > 0)\\n      result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n    if (x & 0x1000000000 > 0)\\n      result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n    if (x & 0x800000000 > 0)\\n      result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n    if (x & 0x400000000 > 0)\\n      result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n    if (x & 0x200000000 > 0)\\n      result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n    if (x & 0x100000000 > 0)\\n      result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n    if (x & 0x80000000 > 0)\\n      result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n    if (x & 0x40000000 > 0)\\n      result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n    if (x & 0x20000000 > 0)\\n      result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n    if (x & 0x10000000 > 0)\\n      result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n    if (x & 0x8000000 > 0)\\n      result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n    if (x & 0x4000000 > 0)\\n      result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n    if (x & 0x2000000 > 0)\\n      result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n    if (x & 0x1000000 > 0)\\n      result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n    if (x & 0x800000 > 0)\\n      result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n    if (x & 0x400000 > 0)\\n      result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n    if (x & 0x200000 > 0)\\n      result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n    if (x & 0x100000 > 0)\\n      result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n    if (x & 0x80000 > 0)\\n      result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n    if (x & 0x40000 > 0)\\n      result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n    if (x & 0x20000 > 0)\\n      result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n    if (x & 0x10000 > 0)\\n      result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n    if (x & 0x8000 > 0)\\n      result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n    if (x & 0x4000 > 0)\\n      result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n    if (x & 0x2000 > 0)\\n      result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n    if (x & 0x1000 > 0)\\n      result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n    if (x & 0x800 > 0)\\n      result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n    if (x & 0x400 > 0)\\n      result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n    if (x & 0x200 > 0)\\n      result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n    if (x & 0x100 > 0)\\n      result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n    if (x & 0x80 > 0)\\n      result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n    if (x & 0x40 > 0)\\n      result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n    if (x & 0x20 > 0)\\n      result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n    if (x & 0x10 > 0)\\n      result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n    if (x & 0x8 > 0)\\n      result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n    if (x & 0x4 > 0)\\n      result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n    if (x & 0x2 > 0)\\n      result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n    if (x & 0x1 > 0)\\n      result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n\\n    result >>= uint256 (63 - (x >> 64));\\n    require (result <= uint256 (MAX_64x64));\\n\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate natural exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp (int128 x) internal pure returns (int128) {\\n    require (x < 0x400000000000000000); // Overflow\\n\\n    if (x < -0x400000000000000000) return 0; // Underflow\\n\\n    return exp_2 (\\n        int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 64.64-bit fixed point number\\n   */\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\n    require (y != 0);\\n\\n    uint256 result;\\n\\n    if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n      result = (x << 64) / y;\\n    else {\\n      uint256 msb = 192;\\n      uint256 xc = x >> 192;\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n      uint256 hi = result * (y >> 128);\\n      uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n      uint256 xh = x >> 192;\\n      uint256 xl = x << 64;\\n\\n      if (xl < lo) xh -= 1;\\n      xl -= lo; // We rely on overflow behavior here\\n      lo = hi << 128;\\n      if (xl < lo) xh -= 1;\\n      xl -= lo; // We rely on overflow behavior here\\n\\n      assert (xh == hi >> 128);\\n\\n      result += xl / y;\\n    }\\n\\n    require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n    return uint128 (result);\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n   * number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return unsigned 128-bit integer number\\n   */\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\n    if (x == 0) return 0;\\n    else {\\n      uint256 xx = x;\\n      uint256 r = 1;\\n      if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\n      if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\n      if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\n      if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\n      if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\n      if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\n      if (xx >= 0x8) { r <<= 1; }\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1; // Seven iterations should be enough\\n      uint256 r1 = x / r;\\n      return uint128 (r < r1 ? r : r1);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2ERC20.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/vyacheslav/Documents/nmx-dex/eth-smart-contracts/contracts/StakingService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./Nmx.sol\\\";\\nimport \\\"./PausableByOwner.sol\\\";\\nimport \\\"./RecoverableByOwner.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2ERC20.sol\\\";\\n\\ncontract StakingService is PausableByOwner, RecoverableByOwner {\\n    /**\\n     * @param totalStaked amount of NMXLP currently staked in the service\\n     * @param historicalRewardRate how many NMX minted per one NMXLP (<< 40). Never decreases.\\n     */\\n    struct State {\\n        uint128 totalStaked;\\n        uint128 historicalRewardRate;\\n    }\\n    /**\\n     * @param amount of NMXLP currently staked by the staker\\n     * @param initialRewardRate value of historicalRewardRate before last update of the staker's data\\n     * @param reward total amount of Nmx accrued to the staker\\n     * @param claimedReward total amount of Nmx the staker transferred from the service already\\n     */\\n    struct Staker {\\n        uint256 amount;\\n        uint128 initialRewardRate;\\n        uint128 reward;\\n        uint256 claimedReward;\\n    }\\n\\n    bytes32 immutable public DOMAIN_SEPARATOR;\\n\\n    string private constant CLAIM_TYPE =\\n        \\\"Claim(address owner,address spender,uint128 value,uint256 nonce,uint256 deadline)\\\";\\n    bytes32 public constant CLAIM_TYPEHASH =\\n        keccak256(abi.encodePacked(CLAIM_TYPE));\\n\\n    string private constant UNSTAKE_TYPE =\\n        \\\"Unstake(address owner,address spender,uint128 value,uint256 nonce,uint256 deadline)\\\";\\n    bytes32 public constant UNSTAKE_TYPEHASH =\\n        keccak256(abi.encodePacked(UNSTAKE_TYPE));\\n\\n    mapping(address => uint256) public nonces;\\n\\n    address immutable public nmx; /// @dev Nmx contract\\n    address immutable public stakingToken; /// @dev NmxLp contract of uniswap\\n    address public nmxSupplier;\\n    State public state; /// @dev internal service state\\n    mapping(address => Staker) public stakers; /// @dev mapping of staker's address to its state\\n\\n    event Staked(address indexed owner, uint128 amount); /// @dev someone is staked NMXLP\\n    event Unstaked(address indexed from, address indexed to, uint128 amount); /// @dev someone unstaked NMXLP\\n    event Rewarded(address indexed from, address indexed to, uint128 amount); /// @dev someone transferred Nmx from the service\\n    event StakingBonusAccrued(address indexed staker, uint128 amount); /// @dev Nmx accrued to the staker\\n\\n    constructor(\\n        address _nmx,\\n        address _stakingToken,\\n        address _nmxSupplier\\n    ) {\\n        nmx = _nmx;\\n        stakingToken = _stakingToken;\\n        nmxSupplier = _nmxSupplier;\\n\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(\\\"StakingService\\\")),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     @dev function to stake permitted amount of LP tokens from uniswap contract\\n     @param amount of NMXLP to be staked in the service\\n     */\\n    function stake(uint128 amount) external {\\n        _stakeFrom(_msgSender(), amount);\\n    }\\n\\n    function stakeWithPermit(\\n        uint128 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        IUniswapV2ERC20(stakingToken).permit(\\n            _msgSender(),\\n            address(this),\\n            amount,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n        _stakeFrom(_msgSender(), amount);\\n    }\\n\\n    function stakeFrom(address owner, uint128 amount) external {\\n        _stakeFrom(owner, amount);\\n    }\\n\\n    function _stakeFrom(address owner, uint128 amount) private whenNotPaused {\\n        bool transferred =\\n            IERC20(stakingToken).transferFrom(\\n                owner,\\n                address(this),\\n                uint256(amount)\\n            );\\n        require(transferred, \\\"NmxStakingService: LP_FAILED_TRANSFER\\\");\\n\\n        Staker storage staker = updateStateAndStaker(owner);\\n\\n        emit Staked(owner, amount);\\n        state.totalStaked += amount;\\n        staker.amount += amount;\\n    }\\n\\n    /**\\n     @dev function to unstake LP tokens from the service and transfer to uniswap contract\\n     @param amount of NMXLP to be unstaked from the service\\n     */\\n    function unstake(uint128 amount) external {\\n        _unstake(_msgSender(), _msgSender(), amount);\\n    }\\n\\n    function unstakeTo(address to, uint128 amount) external {\\n        _unstake(_msgSender(), to, amount);\\n    }\\n\\n    function unstakeWithAuthorization(\\n        address owner,\\n        uint128 amount,\\n        uint128 signedAmount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(amount <= signedAmount, \\\"NmxStakingService: INVALID_AMOUNT\\\");\\n        verifySignature(\\n            UNSTAKE_TYPEHASH,\\n            owner,\\n            _msgSender(),\\n            signedAmount,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n        _unstake(owner, _msgSender(), amount);\\n    }\\n\\n    function _unstake(\\n        address from,\\n        address to,\\n        uint128 amount\\n    ) private {\\n        Staker storage staker = updateStateAndStaker(from);\\n        require(staker.amount >= amount, \\\"NmxStakingService: NOT_ENOUGH_STAKED\\\");\\n\\n        emit Unstaked(from, to, amount);\\n        state.totalStaked -= amount;\\n        staker.amount -= amount;\\n\\n        bool transferred = IERC20(stakingToken).transfer(to, amount);\\n        require(transferred, \\\"NmxStakingService: LP_FAILED_TRANSFER\\\");\\n    }\\n\\n    /**\\n     * @dev updates current reward and transfers it to the caller's address\\n     */\\n    function claimReward() external returns (uint256) {\\n        Staker storage staker = updateStateAndStaker(_msgSender());\\n        assert(staker.reward >= staker.claimedReward);\\n        uint128 unclaimedReward = staker.reward - uint128(staker.claimedReward);\\n        _claimReward(staker, _msgSender(), _msgSender(), unclaimedReward);\\n        return unclaimedReward;\\n    }\\n\\n    function claimRewardTo(address to) external returns (uint256) {\\n        Staker storage staker = updateStateAndStaker(_msgSender());\\n        assert(staker.reward >= staker.claimedReward);\\n        uint128 unclaimedReward = staker.reward - uint128(staker.claimedReward);\\n        _claimReward(staker, _msgSender(), to, unclaimedReward);\\n        return unclaimedReward;\\n    }\\n\\n    function claimRewardToWithoutUpdate(address to) external returns (uint256) {\\n        Staker storage staker = stakers[_msgSender()];\\n        assert(staker.reward >= staker.claimedReward);\\n        uint128 unclaimedReward = staker.reward - uint128(staker.claimedReward);\\n        _claimReward(staker, _msgSender(), to, unclaimedReward);\\n        return unclaimedReward;\\n    }\\n\\n    function claimWithAuthorization(\\n        address owner,\\n        uint128 nmxAmount,\\n        uint128 signedAmount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(nmxAmount <= signedAmount, \\\"NmxStakingService: INVALID_NMX_AMOUNT\\\");\\n        verifySignature(\\n            CLAIM_TYPEHASH,\\n            owner,\\n            _msgSender(),\\n            signedAmount,\\n            deadline,\\n            v,\\n            r,\\n            s\\n        );\\n\\n        Staker storage staker = updateStateAndStaker(owner);\\n        _claimReward(staker, owner, _msgSender(), nmxAmount);\\n    }\\n\\n    function updateStateAndStaker(address stakerAddress)\\n        private\\n        returns (Staker storage staker)\\n    {\\n        updateHistoricalRewardRate();\\n        staker = stakers[stakerAddress];\\n\\n        uint128 unrewarded = uint128(((state.historicalRewardRate - staker.initialRewardRate) * staker.amount) >> 40);\\n        emit StakingBonusAccrued(stakerAddress, unrewarded);\\n\\n        staker.initialRewardRate = state.historicalRewardRate;\\n        staker.reward += unrewarded;\\n    }\\n\\n    function _claimReward(\\n        Staker storage staker,\\n        address from,\\n        address to,\\n        uint128 amount\\n    ) private {\\n        assert(staker.reward >= staker.claimedReward);\\n        uint128 unclaimedReward = staker.reward - uint128(staker.claimedReward);\\n        require(amount <= unclaimedReward, \\\"NmxStakingService: NOT_ENOUGH_BALANCE\\\");\\n        emit Rewarded(from, to, amount);\\n        staker.claimedReward += amount;\\n        bool transferred = IERC20(nmx).transfer(to, amount);\\n        require(transferred, \\\"NmxStakingService: NMX_FAILED_TRANSFER\\\");\\n    }\\n\\n    function verifySignature(\\n        bytes32 typehash,\\n        address owner,\\n        address spender,\\n        uint128 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) private {\\n        require(deadline >= block.timestamp, \\\"NmxStakingService: EXPIRED\\\");\\n        bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR,\\n                    keccak256(\\n                        abi.encode(\\n                            typehash,\\n                            owner,\\n                            spender,\\n                            value,\\n                            nonces[owner]++,\\n                            deadline\\n                        )\\n                    )\\n                )\\n            );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\n            \\\"NmxStakingService: INVALID_SIGNATURE\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev updates state and returns unclaimed reward amount. Is supposed to be invoked as call from metamask to display current amount of Nmx available\\n     */\\n    function getReward() external returns (uint256 unclaimedReward) {\\n        Staker memory staker = updateStateAndStaker(_msgSender());\\n        assert(staker.reward >= staker.claimedReward);\\n        unclaimedReward = staker.reward - staker.claimedReward;\\n    }\\n\\n    function updateHistoricalRewardRate() public {\\n        uint256 currentNmxSupply = NmxSupplier(nmxSupplier).supplyNmx(uint40(block.timestamp));\\n        if (currentNmxSupply == 0) return;\\n        if (state.totalStaked != 0) {\\n            uint128 additionalRewardRate = uint128((currentNmxSupply << 40) / state.totalStaked);\\n            state.historicalRewardRate += additionalRewardRate;\\n        } else {\\n            bool transferred = ERC20(nmx).transfer(owner(), currentNmxSupply);\\n            require(transferred, \\\"NmxStakingService: NMX_FAILED_TRANSFER\\\");\\n        }\\n    }\\n\\n    function changeNmxSupplier(address newNmxSupplier) external onlyOwner {\\n        nmxSupplier = newNmxSupplier;\\n    }\\n\\n    function totalStaked() external view returns (uint128) {\\n        return state.totalStaked;\\n    }\\n\\n    function getRecoverableAmount(address tokenAddress) override internal view returns (uint256) {\\n        // there is no way to know exact amount of nmx service owns to the stakers\\n        require(tokenAddress != nmx, 'NmxStakingService: INVALID_RECOVERABLE_TOKEN');\\n        if (tokenAddress == stakingToken) {\\n            uint256 _totalStaked = state.totalStaked;\\n            uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\\n            assert(balance >= _totalStaked);\\n            return balance - _totalStaked;\\n        }\\n        return RecoverableByOwner.getRecoverableAmount(tokenAddress);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"/Users/vyacheslav/Documents/nmx-dex/eth-smart-contracts/contracts/RecoverableByOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n @dev The contract is intendent to help recovering arbitrary ERC20 tokens and ETH accidentally transferred to the contract address\\n */\\nabstract contract RecoverableByOwner is Ownable {\\n    function getRecoverableAmount(address tokenAddress)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        if (tokenAddress == address(0)) return address(this).balance;\\n        else return IERC20(tokenAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     @param tokenAddress ERC20 token's address to recover or address(0) to recover ETH\\n     @param amount to recover from contract's address\\n     @param to address to receive tokens from the contract\\n     */\\n    function recoverFunds(\\n        address tokenAddress,\\n        uint256 amount,\\n        address to\\n    ) external onlyOwner {\\n        uint256 recoverableAmount = getRecoverableAmount(tokenAddress);\\n        require(\\n            amount <= recoverableAmount,\\n            \\\"RecoverableByOwner: RECOVERABLE_AMOUNT_NOT_ENOUGH\\\"\\n        );\\n        if (tokenAddress == address(0)) recoverEth(amount, to);\\n        else recoverErc20(tokenAddress, amount, to);\\n    }\\n\\n    function recoverEth(uint256 amount, address to) private {\\n        address payable toPayable = payable(to);\\n        toPayable.transfer(amount);\\n    }\\n\\n    function recoverErc20(\\n        address tokenAddress,\\n        uint256 amount,\\n        address to\\n    ) private {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = tokenAddress.call(abi.encodeWithSelector(0xa9059cbb, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'RecoverableByOwner: TRANSFER_FAILED');\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/vyacheslav/Documents/nmx-dex/eth-smart-contracts/contracts/PausableByOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n\\n/**\\n * @dev Contract module which is essentially like Pausable but only owner is allowed to change the state.\\n */\\nabstract contract PausableByOwner is Pausable, Ownable {\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function pause() external virtual onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function unpause() external virtual onlyOwner {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/vyacheslav/Documents/nmx-dex/eth-smart-contracts/contracts/NomiswapLibrary.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\nimport './INomiswapPair.sol';\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary NomiswapLibrary {\\n    using SafeMath for uint;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'NomiswapLibrary: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'NomiswapLibrary: ZERO_ADDRESS');\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint(keccak256(abi.encodePacked(\\n                hex'ff',\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                hex'83eb759f5ea0525124f03d4ac741bb4af0bb1c703d5f694bd42a8bd72e495a01' // init code hash\\n            ))));\\n    }\\n\\n    function getSwapFee(address factory, address tokenA, address tokenB) internal view returns (uint swapFee) {\\n        swapFee = INomiswapPair(pairFor(factory, tokenA, tokenB)).swapFee();\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (uint reserve0, uint reserve1,) = INomiswapPair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\n        require(amountA > 0, 'NomiswapLibrary: INSUFFICIENT_AMOUNT');\\n        require(reserveA > 0 && reserveB > 0, 'NomiswapLibrary: INSUFFICIENT_LIQUIDITY');\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint swapFee) internal pure returns (uint amountOut) {\\n        require(amountIn > 0, 'NomiswapLibrary: INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'NomiswapLibrary: INSUFFICIENT_LIQUIDITY');\\n        uint amountInWithFee = amountIn.mul(uint(1000).sub(swapFee));\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint swapFee) internal pure returns (uint amountIn) {\\n        require(amountOut > 0, 'NomiswapLibrary: INSUFFICIENT_OUTPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'NomiswapLibrary: INSUFFICIENT_LIQUIDITY');\\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint denominator = reserveOut.sub(amountOut).mul(uint(1000).sub(swapFee));\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2, 'NomiswapLibrary: INVALID_PATH');\\n        amounts = new uint[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint i; i < path.length - 1; i++) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, getSwapFee(factory, path[i], path[i + 1]));\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\\n        require(path.length >= 2, 'NomiswapLibrary: INVALID_PATH');\\n        amounts = new uint[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint i = path.length - 1; i > 0; i--) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut, getSwapFee(factory, path[i - 1], path[i]));\\n        }\\n    }\\n    \\n}\"\r\n    },\r\n    \"/Users/vyacheslav/Documents/nmx-dex/eth-smart-contracts/contracts/NmxSupplier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\n/**\\n * @dev Interface to got minted Nmx.\\n */\\ninterface NmxSupplier {\\n    /**\\n      @dev if caller is owner of any mint pool it will be supplied with Nmx based on the schedule and time passed from the moment\\n      when the method was invoked by the same mint pool owner last time\\n      @param maxTime the upper limit of the time to make calculations\\n    */\\n    function supplyNmx(uint40 maxTime) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/vyacheslav/Documents/nmx-dex/eth-smart-contracts/contracts/Nmx.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./NmxSupplier.sol\\\";\\nimport \\\"./MintSchedule.sol\\\";\\nimport \\\"./RecoverableByOwner.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract Nmx is ERC20, NmxSupplier, RecoverableByOwner {\\n    bytes32 immutable public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n\\n    address public mintSchedule;\\n    mapping(address => MintPool) public poolByOwner;\\n    address[3] public poolOwners; // 3 - number of MintPool values\\n    /** @dev dedicated state for every pool to decrease gas consumtion in case of staking/unstaking - no updates related to other mint pools are required to be persisted */\\n    MintScheduleState[3] public poolMintStates; // 3 - number of MintPool values\\n\\n    uint40 private constant DISTRIBUTION_START_TIME = 1614319200; // 2021-02-26T06:00:00Z\\n\\n    event PoolOwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner,\\n        MintPool indexed pool\\n    );\\n    event ScheduleChanged(address previousSchedule, address newSchedule);\\n\\n    constructor(address _mintSchedule) ERC20(\\\"Nominex\\\", \\\"NMX\\\") {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(name())),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n        emit ScheduleChanged(mintSchedule, _mintSchedule);\\n        mintSchedule = _mintSchedule;\\n        for (\\n            uint256 i = uint256(MintPool.PRIMARY);\\n            i <= uint256(MintPool.NOMINEX);\\n            i++\\n        ) {\\n            MintScheduleState storage poolMintState = poolMintStates[i];\\n            poolMintState.nextTickSupply =\\n                (40000 * 10**18) /\\n                uint40(1 days) +\\n                1; // +1 - to coupe with rounding error when daily supply is 9999.9999...\\n            poolMintState.time = DISTRIBUTION_START_TIME;\\n            poolMintState.weekStartTime = DISTRIBUTION_START_TIME;\\n        }\\n        // amount of Nmx has been distributed or sold already at the moment of contract deployment\\n        uint256 alreadyDistributedAmount = 7505656;\\n        // airdrops, starts of liquidity mining pools, running other secondary liquidity mining pools\\n        uint256 additionalAmount = 20000000;\\n        _mint(_msgSender(), (alreadyDistributedAmount + additionalAmount) * 10**18);\\n    }\\n\\n    function changeSchedule(address _mintSchedule) external onlyOwner {\\n        require(_mintSchedule != address(0), \\\"NMX: new schedule can not have zero address\\\");\\n        require(_mintSchedule != mintSchedule, \\\"NMX: new schedule can not be equal to the previous one\\\");\\n        emit ScheduleChanged(mintSchedule, _mintSchedule);\\n        mintSchedule = _mintSchedule;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"NMX: deadline expired\\\");\\n        bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR,\\n                    keccak256(\\n                        abi.encode(\\n                            PERMIT_TYPEHASH,\\n                            owner,\\n                            spender,\\n                            value,\\n                            nonces[owner]++,\\n                            deadline\\n                        )\\n                    )\\n                )\\n            );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\n            \\\"NMX: invalid signature\\\"\\n        );\\n        _approve(owner, spender, value);\\n    }\\n\\n    /// @dev the contract owner can change any of mint pool owners\\n    function transferPoolOwnership(MintPool pool, address newOwner) external {\\n        address currentOwner = poolOwners[uint256(pool)];\\n        require(\\n            newOwner != currentOwner,\\n            \\\"NMX: new owner must differs from the old one\\\"\\n        );\\n        require(\\n            _msgSender() == owner() || _msgSender() == currentOwner,\\n            \\\"NMX: only owner can transfer pool ownership\\\"\\n        );\\n        MintPool existentPoolOfNewOwner = poolByOwner[newOwner];\\n        require(MintPool.DEFAULT_VALUE == existentPoolOfNewOwner || newOwner == address(0), \\\"NMX: every pool must have dedicated owner\\\");\\n\\n        emit PoolOwnershipTransferred(currentOwner, newOwner, pool);\\n        poolOwners[uint256(pool)] = newOwner;\\n        poolByOwner[currentOwner] = MintPool.DEFAULT_VALUE;\\n        poolByOwner[newOwner] = pool;\\n    }\\n\\n    /**\\n      @dev if caller is owner of any mint pool it will be supplied with Nmx based on the schedule and time passed from the moment\\n      when the method was invoked by the same mint pool owner last time\\n      @param maxTime the upper limit of the time to make calculations\\n    */\\n    function supplyNmx(uint40 maxTime) external override returns (uint256) {\\n        if (maxTime > uint40(block.timestamp)) maxTime = uint40(block.timestamp);\\n        MintPool pool = poolByOwner[_msgSender()];\\n        if (pool == MintPool.DEFAULT_VALUE) return 0;\\n        MintScheduleState storage state = poolMintStates[uint256(pool)];\\n        (uint256 supply, MintScheduleState memory newState) =\\n            MintSchedule(mintSchedule).makeProgress(\\n                state,\\n                maxTime,\\n                pool\\n            );\\n        poolMintStates[uint256(pool)] = newState;\\n        _mint(_msgSender(), supply);\\n        return supply;\\n    }\\n\\n    /// @dev view function to support displaying PRIMARY POOL daily supply on UI\\n    function rewardRate() external view returns (uint256) {\\n        (, MintScheduleState memory newState) =\\n            MintSchedule(mintSchedule).makeProgress(\\n                poolMintStates[uint256(MintPool.PRIMARY)],\\n                uint40(block.timestamp),\\n                MintPool.PRIMARY\\n            );\\n        return uint256(newState.nextTickSupply);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/vyacheslav/Documents/nmx-dex/eth-smart-contracts/contracts/MintSchedule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Lib.sol\\\";\\nimport \\\"./RecoverableByOwner.sol\\\";\\nimport \\\"abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\n\\ncontract MintSchedule is RecoverableByOwner {\\n    /**\\n     @dev structure to describe the mint schedule. After each week MintScheduleState.nextTickSupply decreases.\\n     When the schedule completes weekCount weeks in current item it goes to the next item in the items.\\n     @param weekCount duration of the item in weeks\\n     @param weekCompletenessMultiplier a number nextTickSupply is multiplied by after each week in the item\\n     @param poolShares shares of the mint pool in the item\\n     */\\n    struct ScheduleItem {\\n        uint16 weekCount;\\n        int128 weekCompletenessMultiplier;\\n        int128[] poolShares;\\n    }\\n    uint40 constant WEEK_DURATION = 7 days;\\n\\n    using ABDKMath64x64 for int128;\\n    ScheduleItem[] public items; /// @dev array of shcedule describing items\\n\\n    constructor() {\\n        // 0.0, 0.625, 0.375\\n        int128[3] memory shares_01_28 =\\n            [\\n                0,\\n                ABDKMath64x64.divu(625, 1000),\\n                ABDKMath64x64.divu(375, 1000)\\n            ];\\n\\n        // 0.0, 0.5625, 0.4375\\n        int128[3] memory shares_29_56 =\\n            [\\n                0,\\n                ABDKMath64x64.divu(5625, 10000),\\n                ABDKMath64x64.divu(4375, 10000)\\n            ];\\n\\n        // 0.0, 0.5, 0.5\\n        int128[3] memory shares_57_xx =\\n            [\\n                0,\\n                ABDKMath64x64.divu(5, 10),\\n                ABDKMath64x64.divu(5, 10)\\n            ];\\n\\n        /* period 1-7 days | duration 7 days | summary 1 week */\\n        ScheduleItem storage item = items.push();\\n        item.weekCount = 1;\\n        item.weekCompletenessMultiplier = ABDKMath64x64.divu(75, 100);\\n        item.poolShares = shares_01_28;\\n\\n        /* period 8-14 days | duration 7 days | summary 2 weeks */\\n        item = items.push();\\n        item.weekCount = 1;\\n        item.weekCompletenessMultiplier = ABDKMath64x64.divu(35, 100);\\n        item.poolShares = shares_01_28;\\n\\n        /* period 15-28 days | 2 weeks | summary 4 weeks */\\n        item = items.push();\\n        item.weekCount = 2;\\n        item.weekCompletenessMultiplier = ABDKMath64x64.divu(104, 100);\\n        item.poolShares = shares_01_28;\\n\\n        /* period 29-56 days | 4 weeks | summary 8 weeks */\\n        item = items.push();\\n        item.weekCount = 4;\\n        item.weekCompletenessMultiplier = ABDKMath64x64.divu(104, 100);\\n        item.poolShares = shares_29_56;\\n\\n        /* period 57-105 days | 7 weeks | summary 15 weeks */\\n        item = items.push();\\n        item.weekCount = 7;\\n        item.weekCompletenessMultiplier = ABDKMath64x64.divu(104, 100);\\n        item.poolShares = shares_57_xx;\\n\\n        /* period 106-196 days | duration 3 months | summary 28 weeks */\\n        item = items.push();\\n        item.weekCount = 13;\\n        item.weekCompletenessMultiplier = ABDKMath64x64.divu(102, 100);\\n        item.poolShares = shares_57_xx;\\n\\n        /* period 197-287 days | duration 3 months | summary 41 weeks */\\n        item = items.push();\\n        item.weekCount = 13;\\n        item.weekCompletenessMultiplier = ABDKMath64x64.divu(101, 100);\\n        item.poolShares = shares_57_xx;\\n\\n        /* period 288-378 days | duration 3 months | summary 54 weeks */\\n        item = items.push();\\n        item.weekCount = 13;\\n        item.weekCompletenessMultiplier = ABDKMath64x64.divu(1, 1);\\n        item.poolShares = shares_57_xx;\\n\\n        /* period 379-560 days | duration 6 months | summary 80 weeks */\\n        item = items.push();\\n        item.weekCount = 26;\\n        item.weekCompletenessMultiplier = ABDKMath64x64.divu(9995, 10000);\\n        item.poolShares = shares_57_xx;\\n\\n        /* period 561-742 days | duration 6 months | summary 106 weeks */\\n        item = items.push();\\n        item.weekCount = 26;\\n        item.weekCompletenessMultiplier = ABDKMath64x64.divu(999, 1000);\\n        item.poolShares = shares_57_xx;\\n\\n        /* period 743-924 days | duration 6 months | summary 132 weeks */\\n        item = items.push();\\n        item.weekCount = 26;\\n        item.weekCompletenessMultiplier = ABDKMath64x64.divu(9985, 10000);\\n        item.poolShares = shares_57_xx;\\n\\n        /* period 925-1106 days | duration 6 months | summary 158 weeks */\\n        item = items.push();\\n        item.weekCount = 26;\\n        item.weekCompletenessMultiplier = ABDKMath64x64.divu(998, 1000);\\n        item.poolShares = shares_57_xx;\\n\\n        /* period 1107-1470 days | duration 1 year | summary 210 weeks */\\n        item = items.push();\\n        item.weekCount = 52;\\n        item.weekCompletenessMultiplier = ABDKMath64x64.divu(9975, 10000);\\n        item.poolShares = shares_57_xx;\\n\\n        /* period 1471-1834 days | duration 1 year | summary 262 weeks */\\n        item = items.push();\\n        item.weekCount = 52;\\n        item.weekCompletenessMultiplier = ABDKMath64x64.divu(997, 1000);\\n        item.poolShares = shares_57_xx;\\n\\n        /* period 1835-2198 days | duration 1 year | summary 314 weeks */\\n        item = items.push();\\n        item.weekCount = 52;\\n        item.weekCompletenessMultiplier = ABDKMath64x64.divu(9965, 10000);\\n        item.poolShares = shares_57_xx;\\n\\n        /* period 2199-2562 days | duration 1 year | summary 366 weeks */\\n        item = items.push();\\n        item.weekCount = 52;\\n        item.weekCompletenessMultiplier = ABDKMath64x64.divu(996, 1000);\\n        item.poolShares = shares_57_xx;\\n\\n        /* period 2563-2926 days | duration 1 year | summary 418 weeks */\\n        item = items.push();\\n        item.weekCount = 52;\\n        item.weekCompletenessMultiplier = ABDKMath64x64.divu(997, 1000);\\n        item.poolShares = shares_57_xx;\\n\\n        /* period 2927-3654 days | duration 2 year | summary 522 weeks */\\n        item = items.push();\\n        item.weekCount = 104;\\n        item.weekCompletenessMultiplier = ABDKMath64x64.divu(998, 1000);\\n        item.poolShares = shares_57_xx;\\n\\n        /* period 3655-5110 days | duration 4 years | summary 730 weeks */\\n        item = items.push();\\n        item.weekCount = 208;\\n        item.weekCompletenessMultiplier = ABDKMath64x64.divu(999, 1000);\\n        item.poolShares = shares_57_xx;\\n\\n        /* period 5111-8022 days | duration 8 years | summary 1146 weeks */\\n        item = items.push();\\n        item.weekCount = 416;\\n        item.weekCompletenessMultiplier = ABDKMath64x64.divu(9995, 10000);\\n        item.poolShares = shares_57_xx;\\n\\n        /* period 8023-22582 days | duration 40 years | summary 3226 weeks */\\n        item = items.push();\\n        item.weekCount = 2080;\\n        item.weekCompletenessMultiplier = ABDKMath64x64.divu(9999, 10000);\\n        item.poolShares = shares_57_xx;\\n\\n        /* period 22583-26096 days | duration 10 years (without 18 weeks) | summary 3728 weeks */\\n        item = items.push();\\n        item.weekCount = 502;\\n        item.weekCompletenessMultiplier = ABDKMath64x64.divu(99995, 100000);\\n        item.poolShares = shares_57_xx;\\n    }\\n\\n    /**\\n     @dev calculates changes in scheduleState based on the time passed from last update and returns updated state and amount of Nmx to be minted\\n     */\\n    function makeProgress(\\n        MintScheduleState memory scheduleState,\\n        uint40 time,\\n        MintPool pool\\n    ) external view returns (uint256 nmxSupply, MintScheduleState memory) {\\n        if (time <= scheduleState.time) return (0, scheduleState);\\n        while (\\n            time > scheduleState.time && scheduleState.itemIndex < items.length\\n        ) {\\n            ScheduleItem storage item = items[scheduleState.itemIndex];\\n            uint40 boundary =\\n                min(time, scheduleState.weekStartTime + WEEK_DURATION);\\n            uint256 secondsFromLastUpdate = boundary - scheduleState.time;\\n            nmxSupply +=\\n                secondsFromLastUpdate *\\n                item.poolShares[uint256(pool)].mulu(\\n                    uint256(scheduleState.nextTickSupply)\\n                );\\n            persistStateChange(scheduleState, item, boundary);\\n        }\\n        return (nmxSupply, scheduleState);\\n    }\\n\\n    function persistStateChange(\\n        MintScheduleState memory state,\\n        ScheduleItem memory item,\\n        uint40 time\\n    ) private pure {\\n        state.time = time;\\n        if (time == state.weekStartTime + WEEK_DURATION) {\\n            state.nextTickSupply = uint128(\\n                item.weekCompletenessMultiplier.mulu(\\n                    uint256(state.nextTickSupply)\\n                )\\n            );\\n            state.weekIndex++;\\n            state.weekStartTime = time;\\n            if (state.weekIndex == item.weekCount) {\\n                state.weekIndex = 0;\\n                state.itemIndex++;\\n            }\\n        }\\n    }\\n\\n    function min(uint40 a, uint40 b) private pure returns (uint40) {\\n        if (a < b) return a;\\n        return b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/vyacheslav/Documents/nmx-dex/eth-smart-contracts/contracts/Math.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.12 <0.8.0;\\n\\n// a library for performing various math operations\\n\\nlibrary Math {\\n    function min(uint x, uint y) internal pure returns (uint z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/vyacheslav/Documents/nmx-dex/eth-smart-contracts/contracts/Lib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.8.0;\\n\\n/**\\n * @dev kinds of possible pools\\n *\\n * @param DEFAULT_VALUE - dummy type for null value\\n * @param PRIMARY - blockchain based staking. All rules are declared in the  contracts\\n * @param NOMINEX - tokens for Nominex company (BONUS and TEAM pools included)\\n */\\nenum MintPool {DEFAULT_VALUE, PRIMARY, NOMINEX}\\n\\n/**\\n * @dev current state of the schedule for each MintPool\\n *\\n * @param time last invocation time\\n * @param itemIndex index of current item in MintSchedule.items\\n * @param weekIndex index of current week in current item in MintSchedule.items\\n * @param weekStartTime start time of the current week\\n * @param nextTickSupply amount of Nmx to be distributed next second\\n */\\nstruct MintScheduleState {\\n    uint40 time;\\n    uint8 itemIndex;\\n    uint16 weekIndex;\\n    uint40 weekStartTime;\\n    uint128 nextTickSupply;\\n}\\n\"\r\n    },\r\n    \"/Users/vyacheslav/Documents/nmx-dex/eth-smart-contracts/contracts/INomiswapPair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface INomiswapPair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n    function swapFee() external view returns (uint32);\\n    function devFee() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n    function setSwapFee(uint32) external;\\n    function setDevFee(uint) external;\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"signedClaimNmxAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"claimV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"claimR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"claimS\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"stakingService\",\"type\":\"address\"}],\"name\":\"launchpoolReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"maxClaimNmxAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"claimV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"claimR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"claimS\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"maxPairedTokenAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"stakingService\",\"type\":\"address\"}],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"maxClaimNmxAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"claimV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"claimR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"claimS\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"maxPairedTokenAmount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"stakingService\",\"type\":\"address\"}],\"name\":\"reinvestETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Reinvestor", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}