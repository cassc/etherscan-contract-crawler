{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// Eternity Staking Contract\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/proxy/utils/Initializable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = !_initializing;\r\n        require(\r\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n        _initialized = 1;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\r\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\r\n     * initialization.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\r\n        _initialized = version;\r\n        _initializing = true;\r\n        _;\r\n        _initializing = false;\r\n        emit Initialized(version);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        require(!_initializing, \"Initializable: contract is initializing\");\r\n        if (_initialized < type(uint8).max) {\r\n            _initialized = type(uint8).max;\r\n            emit Initialized(type(uint8).max);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: TokenStaking.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract TokenStaking is Ownable, ReentrancyGuard, Initializable {\r\n    // Struct to store the User's Details\r\n    struct User {\r\n        uint256 stakeAmount; // Stake Amount\r\n        uint256 rewardAmount; // Reward Amount\r\n        uint256 lastStakeTime; // Last Stake Timestamp\r\n        uint256 lastRewardCalculationTime; // Last Reward Calculation Timestamp\r\n        uint256 rewardsClaimedSoFar; // Sum of rewards claimed so far\r\n    }\r\n\r\n    uint256 _minimumStakingAmount; // minimum staking amount\r\n\r\n    uint256 _maxStakeTokenLimit; // maximum staking token limit for program\r\n\r\n    uint256 _stakeEndDate; // end date for program\r\n\r\n    uint256 _stakeStartDate; // end date for program\r\n\r\n    uint256 _totalStakedTokens; // Total no of tokens that are staked\r\n\r\n    uint256 _totalUsers; // Total no of users\r\n\r\n    uint256 _stakeDays; // staking days\r\n\r\n    uint256 _earlyUnstakeFeePercentage; // early unstake fee percentage\r\n\r\n    bool _isStakingPaused; // staking status\r\n\r\n    // Token contract address\r\n    address private _tokenAddress;\r\n\r\n    // APY\r\n    uint256 _apyRate;\r\n\r\n    uint256 public constant PERCENTAGE_DENOMINATOR = 10000;\r\n    uint256 public constant APY_RATE_CHANGE_THRESHOLD = 10;\r\n\r\n    // User address => User\r\n    mapping(address => User) private _users;\r\n\r\n    event Stake(address indexed user, uint256 amount);\r\n    event UnStake(address indexed user, uint256 amount);\r\n    event EarlyUnStakeFee(address indexed user, uint256 amount);\r\n    event ClaimReward(address indexed user, uint256 amount);\r\n\r\n    modifier whenTreasuryHasBalance(uint256 amount) {\r\n        require(\r\n            IERC20(_tokenAddress).balanceOf(address(this)) >= amount,\r\n            \"TokenStaking: insufficient funds in the treasury\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function initialize(\r\n        address owner_,\r\n        address tokenAddress_,\r\n        uint256 apyRate_,\r\n        uint256 minimumStakingAmount_,\r\n        uint256 maxStakeTokenLimit_,\r\n        uint256 stakeStartDate_,\r\n        uint256 stakeEndDate_,\r\n        uint256 stakeDays_,\r\n        uint256 earlyUnstakeFeePercentage_\r\n    ) public virtual initializer {\r\n        __TokenStaking_init_unchained(\r\n            owner_,\r\n            tokenAddress_,\r\n            apyRate_,\r\n            minimumStakingAmount_,\r\n            maxStakeTokenLimit_,\r\n            stakeStartDate_,\r\n            stakeEndDate_,\r\n            stakeDays_,\r\n            earlyUnstakeFeePercentage_\r\n        );\r\n    }\r\n\r\n    function __TokenStaking_init_unchained(\r\n        address owner_,\r\n        address tokenAddress_,\r\n        uint256 apyRate_,\r\n        uint256 minimumStakingAmount_,\r\n        uint256 maxStakeTokenLimit_,\r\n        uint256 stakeStartDate_,\r\n        uint256 stakeEndDate_,\r\n        uint256 stakeDays_,\r\n        uint256 earlyUnstakeFeePercentage_\r\n    ) internal onlyInitializing {\r\n        require(_apyRate <= 10000, \"TokenStaking: apy rate should be less than 10000\");\r\n        require(stakeDays_ > 0, \"TokenStaking: stake days must be non-zero\");\r\n        require(tokenAddress_ != address(0), \"TokenStaking: token address cannot be 0 address\");\r\n        require(stakeStartDate_ < stakeEndDate_, \"TokenStaking: start date must be less than end date\");\r\n\r\n        _transferOwnership(owner_);\r\n        _tokenAddress = tokenAddress_;\r\n        _apyRate = apyRate_;\r\n        _minimumStakingAmount = minimumStakingAmount_;\r\n        _maxStakeTokenLimit = maxStakeTokenLimit_;\r\n        _stakeStartDate = stakeStartDate_;\r\n        _stakeEndDate = stakeEndDate_;\r\n        _stakeDays = stakeDays_ * 1 days;\r\n        _earlyUnstakeFeePercentage = earlyUnstakeFeePercentage_;\r\n    }\r\n\r\n    /* View Methods Start */\r\n\r\n    /**\r\n     * @notice This function is used to get the minimum staking amount\r\n     */\r\n    function getMinimumStakingAmount() external view returns (uint256) {\r\n        return _minimumStakingAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to get the maximum staking token limit for program\r\n     */\r\n    function getMaxStakingTokenLimit() external view returns (uint256) {\r\n        return _maxStakeTokenLimit;\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to get the staking start date for program\r\n     */\r\n    function getStakeStartDate() external view returns (uint256) {\r\n        return _stakeStartDate;\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to get the staking end date for program\r\n     */\r\n    function getStakeEndDate() external view returns (uint256) {\r\n        return _stakeEndDate;\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to get the total no of tokens that are staked\r\n     */\r\n    function getTotalStakedTokens() external view returns (uint256) {\r\n        return _totalStakedTokens;\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to get the total no of users\r\n     */\r\n    function getTotalUsers() external view returns (uint256) {\r\n        return _totalUsers;\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to get stake days\r\n     */\r\n    function getStakeDays() external view returns (uint256) {\r\n        return _stakeDays;\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to get early unstake fee percentage\r\n     */\r\n    function getEarlyUnstakeFeePercentage() external view returns (uint256) {\r\n        return _earlyUnstakeFeePercentage;\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to get staking status\r\n     */\r\n    function getStakingStatus() external view returns (bool) {\r\n        return _isStakingPaused;\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to get the current APY Rate\r\n     * @return Current APY Rate\r\n     */\r\n    function getAPY() external view returns (uint256) {\r\n        return _apyRate;\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to get msg.sender's estimated reward amount\r\n     * @return msg.sender's estimated reward amount\r\n     */\r\n    function getUserEstimatedRewards() external view returns (uint256) {\r\n        (uint256 amount, ) = _getUserEstimatedRewards(msg.sender);\r\n        return _users[msg.sender].rewardAmount + amount;\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to get withdrawable amount from contract\r\n     */\r\n    function getWithdrawableAmount() external view returns (uint256) {\r\n        return IERC20(_tokenAddress).balanceOf(address(this)) - _totalStakedTokens;\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to get User's details\r\n     * @param userAddress User's address to get details of\r\n     * @return User Struct\r\n     */\r\n    function getUser(address userAddress) external view returns (User memory) {\r\n        return _users[userAddress];\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to check if a user is a stakeholder\r\n     * @param _user Address of the user to check\r\n     * @return True if user is a stakeholder, false otherwise\r\n     */\r\n    function isStakeHolder(address _user) external view returns (bool) {\r\n        return _users[_user].stakeAmount != 0;\r\n    }\r\n\r\n    /* View Methods End */\r\n\r\n    /* Owner Methods Start */\r\n\r\n    /**\r\n     * @notice This function is used to update minimum staking amount\r\n     */\r\n    function updateMinimumStakingAmount(uint256 newAmount) external onlyOwner {\r\n        _minimumStakingAmount = newAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to update maximum staking amount\r\n     */\r\n    function updateMaximumStakingAmount(uint256 newAmount) external onlyOwner {\r\n        _maxStakeTokenLimit = newAmount;\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to update staking end date\r\n     */\r\n    function updateStakingEndDate(uint256 newDate) external onlyOwner {\r\n        _stakeEndDate = newDate;\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to update early unstake fee percentage\r\n     */\r\n    function updateEarlyUnstakeFeePercentage(uint256 newPercentage) external onlyOwner {\r\n        _earlyUnstakeFeePercentage = newPercentage;\r\n    }\r\n\r\n    /**\r\n     * @notice stake tokens for specific user\r\n     * @dev This function can be used to stake tokens for specific user\r\n     *\r\n     * @param amount the amount to stake\r\n     * @param user user's address\r\n     */\r\n    function stakeForUser(uint256 amount, address user) external onlyOwner nonReentrant {\r\n        _stakeTokens(amount, user);\r\n    }\r\n\r\n    /**\r\n     * @notice enable/disable staking\r\n     * @dev This function can be used to toggle staking status\r\n     */\r\n    function toggleStakingStatus() external onlyOwner {\r\n        _isStakingPaused = !_isStakingPaused;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw the specified amount if possible.\r\n     *\r\n     * @dev This function can be used to withdraw the available tokens\r\n     * with this contract to the caller\r\n     *\r\n     * @param amount the amount to withdraw\r\n     */\r\n    function withdraw(uint256 amount) external onlyOwner nonReentrant {\r\n        require(this.getWithdrawableAmount() >= amount, \"TokenStaking: not enough withdrawable tokens\");\r\n        IERC20(_tokenAddress).transfer(msg.sender, amount);\r\n    }\r\n\r\n    /* Owner Methods End */\r\n\r\n    /* User Methods Start */\r\n\r\n    /**\r\n     * @notice This function is used to stake tokens\r\n     * @param _amount Amount of tokens to be staked\r\n     */\r\n    function stake(uint256 _amount) external nonReentrant {\r\n        _stakeTokens(_amount, msg.sender);\r\n    }\r\n\r\n    function _stakeTokens(uint256 _amount, address user_) private {\r\n        require(!_isStakingPaused, \"TokenStaking: staking is paused\");\r\n\r\n        uint256 currentTime = getCurrentTime();\r\n        require(currentTime > _stakeStartDate, \"TokenStaking: staking not started yet\");\r\n        require(currentTime < _stakeEndDate, \"TokenStaking: staking ended\");\r\n        require(_amount > 0, \"TokenStaking: stake amount must be non-zero\");\r\n        require(\r\n            _amount >= _minimumStakingAmount,\r\n            \"TokenStaking: stake amount must greater than minimum amount allowed\"\r\n        );\r\n\r\n        if (_users[user_].stakeAmount != 0) {\r\n            _calculateRewards(user_);\r\n        } else {\r\n            _users[user_].lastRewardCalculationTime = currentTime;\r\n            _totalUsers += 1;\r\n        }\r\n\r\n        _users[user_].stakeAmount += _amount;\r\n        _users[user_].lastStakeTime = currentTime;\r\n\r\n        _totalStakedTokens += _amount;\r\n\r\n        require(\r\n            IERC20(_tokenAddress).transferFrom(msg.sender, address(this), _amount),\r\n            \"TokenStaking: failed to transfer tokens\"\r\n        );\r\n        emit Stake(user_, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to unstake tokens\r\n     * @param _amount Amount of tokens to be unstaked\r\n     */\r\n    function unstake(uint256 _amount) external nonReentrant whenTreasuryHasBalance(_amount) {\r\n        address user = msg.sender;\r\n\r\n        require(_amount != 0, \"TokenStaking: amount should be non-zero\");\r\n        require(this.isStakeHolder(user), \"TokenStaking: not a stakeholder\");\r\n        require(_users[user].stakeAmount >= _amount, \"TokenStaking: not enough stake to unstake\");\r\n\r\n        // Calculate User's rewards until now\r\n        _calculateRewards(user);\r\n\r\n        uint256 feeEarlyUnstake;\r\n\r\n        if (getCurrentTime() <= _users[user].lastStakeTime + _stakeDays) {\r\n            feeEarlyUnstake = ((_amount * _earlyUnstakeFeePercentage) / PERCENTAGE_DENOMINATOR);\r\n            emit EarlyUnStakeFee(user, feeEarlyUnstake);\r\n        }\r\n\r\n        uint256 amountToUnstake = _amount - feeEarlyUnstake;\r\n\r\n        _users[user].stakeAmount -= _amount;\r\n\r\n        _totalStakedTokens -= _amount;\r\n\r\n        if (_users[user].stakeAmount == 0) {\r\n            // delete _users[user];\r\n            _totalUsers -= 1;\r\n        }\r\n\r\n        require(IERC20(_tokenAddress).transfer(user, amountToUnstake), \"TokenStaking: failed to transfer\");\r\n        emit UnStake(user, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to claim user's rewards\r\n     */\r\n    function claimReward() external nonReentrant whenTreasuryHasBalance(_users[msg.sender].rewardAmount) {\r\n        _calculateRewards(msg.sender);\r\n        uint256 rewardAmount = _users[msg.sender].rewardAmount;\r\n\r\n        require(rewardAmount > 0, \"TokenStaking: no reward to claim\");\r\n\r\n        require(IERC20(_tokenAddress).transfer(msg.sender, rewardAmount), \"TokenStaking: failed to transfer\");\r\n\r\n        _users[msg.sender].rewardAmount = 0;\r\n        _users[msg.sender].rewardsClaimedSoFar += rewardAmount;\r\n\r\n        emit ClaimReward(msg.sender, rewardAmount);\r\n    }\r\n\r\n    /* User Methods End */\r\n\r\n    /* Private Helper Methods Start */\r\n\r\n    /**\r\n     * @notice This function is used to calculate rewards for a user\r\n     * @param _user Address of the user\r\n     */\r\n    function _calculateRewards(address _user) private {\r\n        (uint256 userReward, uint256 currentTime) = _getUserEstimatedRewards(_user);\r\n\r\n        _users[_user].rewardAmount += userReward;\r\n        _users[_user].lastRewardCalculationTime = currentTime;\r\n    }\r\n\r\n    /**\r\n     * @notice This function is used to get estimated rewards for a user\r\n     * @param _user Address of the user\r\n     * @return Estimated rewards for the user\r\n     */\r\n    function _getUserEstimatedRewards(address _user) private view returns (uint256, uint256) {\r\n        uint256 userReward;\r\n        uint256 userTimestamp = _users[_user].lastRewardCalculationTime;\r\n\r\n        uint256 currentTime = getCurrentTime();\r\n\r\n        if (currentTime > _users[_user].lastStakeTime + _stakeDays) {\r\n            currentTime = _users[_user].lastStakeTime + _stakeDays;\r\n        }\r\n\r\n        uint256 totalStakedTime = currentTime - userTimestamp;\r\n\r\n        userReward += ((totalStakedTime * _users[_user].stakeAmount * _apyRate) / 365 days) / PERCENTAGE_DENOMINATOR;\r\n\r\n        return (userReward, currentTime);\r\n    }\r\n\r\n    /* Private Helper Methods End */\r\n\r\n    function getCurrentTime() internal view virtual returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EarlyUnStakeFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APY_RATE_CHANGE_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEarlyUnstakeFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxStakingTokenLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumStakingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeStartDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardCalculationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsClaimedSoFar\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenStaking.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserEstimatedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"apyRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumStakingAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxStakeTokenLimit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeStartDate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeEndDate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeDays_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyUnstakeFeePercentage_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isStakeHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"stakeForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleStakingStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPercentage\",\"type\":\"uint256\"}],\"name\":\"updateEarlyUnstakeFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaximumStakingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinimumStakingAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDate\",\"type\":\"uint256\"}],\"name\":\"updateStakingEndDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TokenStaking", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5255a8b56bb04e38cafbc0111afb516dec57cbe6a73766767d130e3a4b341abe"}