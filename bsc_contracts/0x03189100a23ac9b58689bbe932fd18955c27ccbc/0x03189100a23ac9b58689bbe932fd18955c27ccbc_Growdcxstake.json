{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Growdcxstake {\r\n\tusing SafeMath for uint256;\r\n\r\n\tIERC20 public erctoken;\r\n\taddress token = 0xEB0ae76f3e67a7439884c8ff80f734c8d2472Ebb; //GDX\r\n    \r\n\r\n\t/** default percentages **/\r\n\tuint256 public PROJECT_FEE = 100;\r\n    uint256 public DEV_FEE = 100;\r\n\tuint256 public MKT_BUYBACK_FEE = 50;\r\n\tuint256[] public REFERRAL_PERCENT = [100, 50, 40, 30, 20, 10, 10, 10, 5, 5, 5, 5, 2, 2, 2, 2, 1, 1, 1, 1];\r\n\tuint256 constant public TIME_STEP = 1 days;\r\n\tuint256 constant private PERCENTS_DIVIDER = 1000;\r\n\r\n\t/* whale control features. **/\r\n\t\r\n\t  \r\n\tuint256 public COMPOUND_COOLDOWN = 24 * 60 * 60;  //24h\r\n    uint256 public REINVEST_BONUS = 0; //1% Bonus on compounding\r\n\tuint256 public MAX_WITHDRAW = 100000 ether;  //10k\r\n\tuint256 public WALLET_LIMIT = 1000000000 ether;  //20k\r\n\r\n    /** deposits after this timestamp gets additional percentages **/\r\n    uint256 public PERCENTAGE_BONUS_STARTTIME = 1690905600; \r\n\tuint256 public PERCENTAGE_BONUS_PLAN_1 = 0; // +1% from Above time stamp\r\n    uint256 public PERCENTAGE_BONUS_PLAN_2 = 0;\r\n    uint256 public PERCENTAGE_BONUS_PLAN_3 = 0;\r\n    uint256 public PERCENTAGE_BONUS_PLAN_4 = 0;\r\n\r\n    /* project statistics **/\r\n\tuint256 public totalInvested;\r\n\tuint256 public totalReInvested;\r\n\tuint256 public totalRefBonus;\r\n\tuint256 public totalInvestorCount;\r\n\r\n    struct Plan {\r\n        uint256 time;\r\n        uint256 percent;\r\n        uint256 mininvest;\r\n        uint256 maxinvest;\r\n\r\n        /** plan statistics **/\r\n        uint256 planTotalInvestorCount;\r\n        uint256 planTotalInvestments;\r\n        uint256 planTotalReInvestorCount;\r\n        uint256 planTotalReInvestments;\r\n        \r\n        bool planActivated;\r\n    }\r\n    \r\n\tstruct Deposit {\r\n        uint8 plan;\r\n\t\tuint256 amount;\r\n\t\tuint256 start;\r\n\t\tbool reinvested;\r\n\t}\r\n    \r\n    Plan[] internal plans;\r\n\r\n\tstruct User {\r\n\t\tDeposit[] deposits;\r\n        \r\n\t\tmapping (uint8 => uint256) checkpoints; /** a checkpoint for each plan **/\r\n\t\t\r\n\t\tuint256 totalInvested;\r\n\t\taddress referrer;\r\n\t\tuint256 referralsCount;\r\n\t\tuint256 bonus;\r\n\t\tuint256 totalBonus;\r\n\t\tuint256 withdrawn;\r\n\t\tuint256 reinvested;\r\n\t\tuint256 totalDepositAmount;\r\n\t}\r\n\r\n\tmapping (address => User) internal users;\r\n\r\n    address payable private dev1;\r\n    address payable private dev2;\r\n    address payable private mktAndBuyBack;\r\n\taddress public contractOwner;\r\n    uint public startTime = 1690300800 ; \r\n\tevent Newbie(address user);\r\n\tevent NewDeposit(address indexed user, uint8 plan, uint256 amount);\r\n\tevent ReinvestedDeposit(address indexed user, uint8 plan, uint256 amount);\r\n\tevent Withdrawn(address indexed user, uint256 amount);\r\n\tevent RefBonus(address indexed referrer, address indexed referral, uint256 amount);\r\n\tevent FeePayed(address indexed user, uint256 totalAmount);\r\n\r\n\tconstructor(address payable _dev1, address payable _dev2, address payable _mkt) {require(!isContract(_dev1) && !isContract(_dev2) && !isContract(_mkt));\r\n        contractOwner = msg.sender;\r\n        dev1 = _dev1;\r\n        dev2 = _dev2;\r\n        mktAndBuyBack = _mkt;\r\n        erctoken = IERC20(token);\r\n\r\n        plans.push(Plan(400, 5, 10000 ether, 100000 ether, 0, 0, 0, 0, true));\r\n        plans.push(Plan(286, 7, 100000 ether, 1000000 ether, 0, 0, 0, 0, true));\r\n        plans.push(Plan(200, 10, 1000000 ether, 1000000000 ether, 0, 0, 0, 0, true));\r\n\t}\r\n\r\n\tfunction invest(address referrer, uint8 plan, uint256 amounterc) public {\r\n    require(block.timestamp > startTime, \"Project not started yet\");\r\n    require(plan < plans.length, \"Invalid Plan.\");\r\n    require(amounterc >= plans[plan].mininvest, \"Less than minimum amount required for the selected Plan.\");\r\n    require(amounterc <= plans[plan].maxinvest, \"More than maximum amount required for the selected Plan.\");\r\n    require(plans[plan].planActivated, \"Plan selected is disabled\");\r\n    require(getUserActiveProjectInvestments(msg.sender).add(amounterc) <= WALLET_LIMIT, \"Max wallet deposit limit reached.\");\r\n\r\n    // fees\r\n    erctoken.transferFrom(address(msg.sender), address(this), amounterc);\r\n    emit FeePayed(msg.sender, payFees(amounterc));\r\n\r\n    User storage user = users[msg.sender];\r\n\r\n    if (user.referrer == address(0)) {\r\n        if (users[referrer].deposits.length > 0 && referrer != msg.sender) {\r\n            user.referrer = referrer;\r\n        }\r\n\r\n        // Update the referral count for the first level\r\n        address upline1 = user.referrer;\r\n        if (upline1 != address(0)) {\r\n            users[upline1].referralsCount = users[upline1].referralsCount.add(1);\r\n        }\r\n\r\n        // Update referral count for additional levels\r\n        for (uint256 i = 1; i < REFERRAL_PERCENT.length; i++) {\r\n            address upline = users[upline1].referrer;\r\n            if (upline != address(0)) {\r\n                users[upline].referralsCount = users[upline].referralsCount.add(1);\r\n                upline1 = upline;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (user.referrer != address(0)) {\r\n        address upline = user.referrer;\r\n        for (uint256 i = 0; i < REFERRAL_PERCENT.length; i++) {\r\n            if (upline != address(0)) {\r\n                uint256 amount = amounterc.mul(REFERRAL_PERCENT[i]).div(PERCENTS_DIVIDER);\r\n                users[upline].bonus = users[upline].bonus.add(amount);\r\n                users[upline].totalBonus = users[upline].totalBonus.add(amount);\r\n                totalRefBonus = totalRefBonus.add(amount);\r\n                emit RefBonus(upline, msg.sender, amount);\r\n                upline = users[upline].referrer;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (user.deposits.length == 0) {\r\n        user.checkpoints[plan] = block.timestamp;\r\n\r\n        emit Newbie(msg.sender);\r\n        totalInvestorCount = totalInvestorCount.add(1);\r\n        plans[plan].planTotalInvestorCount = plans[plan].planTotalInvestorCount.add(1);\r\n    }\r\n\r\n    user.deposits.push(Deposit(plan, amounterc, block.timestamp, false));\r\n\r\n    user.totalInvested = user.totalInvested.add(amounterc);\r\n    totalInvested = totalInvested.add(amounterc);\r\n\r\n    plans[plan].planTotalInvestments = plans[plan].planTotalInvestments.add(amounterc);\r\n\r\n    emit NewDeposit(msg.sender, plan, amounterc);\r\n}\r\n\r\n\r\n    function reinvest() public {\r\n        uint8 plan = 0;\r\n        require(block.timestamp > startTime, \"Project not started yet\");\r\n\r\n        User storage user = users[msg.sender];\r\n\r\n        if(user.checkpoints[plan].add(COMPOUND_COOLDOWN) > block.timestamp){\r\n            revert(\"Compounding/Reinvesting can only be made after compound cooldown.\");\r\n        }\r\n\r\n        uint256 totalAmount = getUserDividends(msg.sender, int8(plan));\r\n\r\n        uint256 finalAmount = totalAmount.add(totalAmount.mul(REINVEST_BONUS).div(PERCENTS_DIVIDER));\r\n\r\n        uint256 referralBonus = getUserReferralBonus(msg.sender);\r\n\t\tif (referralBonus > 0) {\r\n\t\t\tuser.bonus = 0;\r\n\t\t\tfinalAmount = finalAmount.add(referralBonus);\r\n\t\t}\r\n\r\n\t\tuser.deposits.push(Deposit(plan, finalAmount, block.timestamp, true));\r\n\r\n        if(user.checkpoints[plan] == 0){\r\n\t\t    plans[plan].planTotalReInvestorCount = plans[plan].planTotalReInvestorCount.add(1);\r\n        }\r\n\r\n        user.reinvested = user.reinvested.add(finalAmount);\r\n        user.checkpoints[plan] = block.timestamp;\r\n        \r\n\r\n        /** statistics **/\r\n\t\ttotalReInvested = totalReInvested.add(finalAmount);\r\n\t\tplans[plan].planTotalReInvestments = plans[plan].planTotalReInvestments.add(finalAmount);\r\n\r\n\t\temit ReinvestedDeposit(msg.sender, plan, finalAmount);\r\n\t}\r\n\r\n\tfunction withdraw() public {\r\n        require(block.timestamp > startTime, \"Project not started yet\");\r\n\t\tUser storage user = users[msg.sender];\r\n\r\n\t\tuint256 totalAmount = getUserDividends(msg.sender);\r\n\r\n\t\tuint256 referralBonus = getUserReferralBonus(msg.sender);\r\n\t\tif (referralBonus > 0) {\r\n\t\t\tuser.bonus = 0;\r\n\t\t\ttotalAmount = totalAmount.add(referralBonus);\r\n\t\t}\r\n\r\n\t\trequire(totalAmount > 0, \"User has no dividends\");\r\n\r\n\t\tuint256 contractBalance = erctoken.balanceOf(address(this));\r\n\r\n\t\tif (contractBalance < totalAmount) {\r\n\t\t\tuser.bonus = totalAmount.sub(contractBalance);\r\n\t\t\tuser.totalBonus = user.totalBonus.add(user.bonus);\r\n\t\t\ttotalAmount = contractBalance;\r\n\t\t}\r\n\r\n\t\tfor (uint8 i = 0; i < plans.length; i++) {\r\n\t\t\tif (user.checkpoints[i] > block.timestamp) {\r\n\t\t\t\trevert(\"Withdrawals can only be made after withdraw cooldown.\");\r\n\t\t\t}\r\n\r\n\t\t\tuser.checkpoints[i] = block.timestamp; /** global withdraw will reset checkpoints on all plans **/\r\n\t\t}\r\n\r\n\t\t/** Excess dividends are sent back to the user's account available for the next withdrawal. **/\r\n\t\tif (totalAmount > MAX_WITHDRAW) {\r\n\t\t\tuser.bonus = totalAmount.sub(MAX_WITHDRAW);\r\n\t\t\ttotalAmount = MAX_WITHDRAW;\r\n\t\t}\r\n\r\n\t\t /** global withdraw will also reset CUTOFF **/\r\n\t\tuser.withdrawn = user.withdrawn.add(totalAmount);\r\n\r\n\t\terctoken.transfer(msg.sender, totalAmount);\r\n\t\temit Withdrawn(msg.sender, totalAmount);\r\n\t}\r\n\t\r\n\tfunction payFees(uint256 amounterc) internal returns(uint256) {\r\n\t\tuint256 fee = amounterc.mul(PROJECT_FEE).div(PERCENTS_DIVIDER);\r\n        uint256 feeDev = amounterc.mul(DEV_FEE).div(PERCENTS_DIVIDER);\r\n\t\tuint256 marketing = amounterc.mul(MKT_BUYBACK_FEE).div(PERCENTS_DIVIDER);\r\n\t\terctoken.transfer(dev1, fee);\r\n        erctoken.transfer(dev2, feeDev);\r\n        erctoken.transfer(mktAndBuyBack, marketing);\r\n        return fee.add(marketing).add(feeDev);\r\n    }\r\n\r\n\tfunction getUserDividends(address userAddress, int8 plan) public view returns (uint256) {\r\n\t\tUser storage user = users[userAddress];\r\n\r\n\t\tuint256 totalAmount;\r\n\r\n\t\tuint256 endPoint = block.timestamp;\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\t\t    if(plan > -1){\r\n\t\t        if(user.deposits[i].plan != uint8(plan)){\r\n\t\t            continue;\r\n\t\t        }\r\n\t\t    }\r\n\t\t\tuint256 finish = user.deposits[i].start.add(plans[user.deposits[i].plan].time.mul(1 days));\r\n\t\t\t/** check if plan is not yet finished. **/\r\n\t\t\tif (user.checkpoints[user.deposits[i].plan] < finish) {\r\n\r\n\t\t\t    uint256 percent = plans[user.deposits[i].plan].percent;\r\n\t\t\t    if(user.deposits[i].start >= PERCENTAGE_BONUS_STARTTIME){\r\n                    if(user.deposits[i].plan == 0){\r\n                        percent = percent.add(PERCENTAGE_BONUS_PLAN_1);\r\n                    }else if(user.deposits[i].plan == 1){\r\n                        percent = percent.add(PERCENTAGE_BONUS_PLAN_2);\r\n                    }else if(user.deposits[i].plan == 2){\r\n                        percent = percent.add(PERCENTAGE_BONUS_PLAN_3);\r\n                    }else if(user.deposits[i].plan == 3){\r\n                        percent = percent.add(PERCENTAGE_BONUS_PLAN_4);\r\n                    }\r\n\t\t\t    }\r\n\r\n\t\t\t\tuint256 share = user.deposits[i].amount.mul(percent).div(PERCENTS_DIVIDER);\r\n\r\n\t\t\t\tuint256 from = user.deposits[i].start > user.checkpoints[user.deposits[i].plan] ? user.deposits[i].start : user.checkpoints[user.deposits[i].plan];\r\n\t\t\t\t/** uint256 to = finish < block.timestamp ? finish : block.timestamp; **/\r\n\t\t\t\tuint256 to = finish < endPoint ? finish : endPoint;\r\n\t\t\t\tif (from < to) {\r\n\t\t\t\t\ttotalAmount = totalAmount.add(share.mul(to.sub(from)).div(TIME_STEP));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn totalAmount;\r\n\t}\r\n    \r\n\tfunction getUserActiveProjectInvestments(address userAddress) public view returns (uint256){\r\n\t    uint256 totalAmount;\r\n\r\n\t\t/** get total active investments in all plans. **/\r\n        for(uint8 i = 0; i < plans.length; i++){\r\n              totalAmount = totalAmount.add(getUserActiveInvestments(userAddress, i));  \r\n        }\r\n        \r\n\t    return totalAmount;\r\n\t}\r\n\r\n\tfunction getUserActiveInvestments(address userAddress, uint8 plan) public view returns (uint256){\r\n\t    User storage user = users[userAddress];\r\n\t    uint256 totalAmount;\r\n\r\n\t\tfor (uint256 i = 0; i < user.deposits.length; i++) {\r\n\r\n\t        if(user.deposits[i].plan != uint8(plan)){\r\n\t            continue;\r\n\t        }\r\n\r\n\t\t\tuint256 finish = user.deposits[i].start.add(plans[user.deposits[i].plan].time.mul(1 days));\r\n\t\t\tif (user.checkpoints[uint8(plan)] < finish) {\r\n\t\t\t    /** sum of all unfinished deposits from plan **/\r\n\t\t\t\ttotalAmount = totalAmount.add(user.deposits[i].amount);\r\n\t\t\t}\r\n\t\t}\r\n\t    return totalAmount;\r\n\t}\r\n\r\n\r\n\tfunction getPlanInfo(uint8 plan) public view returns(uint256 time, uint256 percent, uint256 minimumInvestment, uint256 maximumInvestment,\r\n\t  uint256 planTotalInvestorCount, uint256 planTotalInvestments , uint256 planTotalReInvestorCount, uint256 planTotalReInvestments, bool planActivated) {\r\n\t\ttime = plans[plan].time;\r\n\t\tpercent = plans[plan].percent;\r\n\t\tminimumInvestment = plans[plan].mininvest;\r\n\t\tmaximumInvestment = plans[plan].maxinvest;\r\n\t\tplanTotalInvestorCount = plans[plan].planTotalInvestorCount;\r\n\t\tplanTotalInvestments = plans[plan].planTotalInvestments;\r\n\t\tplanTotalReInvestorCount = plans[plan].planTotalReInvestorCount;\r\n\t\tplanTotalReInvestments = plans[plan].planTotalReInvestments;\r\n\t\tplanActivated = plans[plan].planActivated;\r\n\t}\r\n\r\n\tfunction getContractBalance() public view returns (uint256) {\r\n\t\treturn erctoken.balanceOf(address(this));\r\n\t}\r\n\r\n\tfunction getUserDividends(address userAddress) public view returns (uint256) {\r\n\t    return getUserDividends(userAddress, -1);\r\n\t}\r\n\r\n\tfunction getUserTotalWithdrawn(address userAddress) public view returns (uint256) {\r\n\t\treturn users[userAddress].withdrawn;\r\n\t}\r\n\r\n\tfunction getUserCheckpoint(address userAddress, uint8 plan) public view returns(uint256) {\r\n\t\treturn users[userAddress].checkpoints[plan];\r\n\t}\r\n\r\n\tfunction getUserReferrer(address userAddress) public view returns(address) {\r\n\t\treturn users[userAddress].referrer;\r\n\t}\r\n\r\n    function getUserTotalReferrals(address userAddress) public view returns (uint256){\r\n        return users[userAddress].referralsCount;\r\n    }\r\n\r\n\tfunction getUserReferralBonus(address userAddress) public view returns(uint256) {\r\n\t    return users[userAddress].bonus;\r\n\t}\r\n\r\n\tfunction getUserReferralTotalBonus(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].totalBonus;\r\n\t}\r\n\r\n\tfunction getUserReferralWithdrawn(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].totalBonus.sub(users[userAddress].bonus);\r\n\t}\r\n\r\n\tfunction getUserAvailable(address userAddress) public view returns(uint256) {\r\n\t\treturn getUserReferralBonus(userAddress).add(getUserDividends(userAddress));\r\n\t}\r\n\r\n\tfunction getUserAmountOfDeposits(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].deposits.length;\r\n\t}\r\n\r\n\tfunction getUserTotalDeposits(address userAddress) public view returns(uint256 amount) {\r\n\t\tfor (uint256 i = 0; i < users[userAddress].deposits.length; i++) {\r\n\t\t\tamount = amount.add(users[userAddress].deposits[i].amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getUserDepositInfo(address userAddress, uint256 index) public view returns(uint8 plan, uint256 percent, uint256 amount, uint256 start, uint256 finish, bool reinvested) {\r\n\t    User storage user = users[userAddress];\r\n\t\tplan = user.deposits[index].plan;\r\n\t\tpercent = plans[plan].percent;\r\n\t\tamount = user.deposits[index].amount;\r\n\t\tstart = user.deposits[index].start;\r\n\t\tfinish = user.deposits[index].start.add(plans[user.deposits[index].plan].time.mul(1 days));\r\n\t\treinvested = user.deposits[index].reinvested;\r\n\t}\r\n\r\n    function getSiteInfo() public view returns (uint256 _totalInvested, uint256 _totalBonus) {\r\n        return (totalInvested, totalRefBonus);\r\n    }\r\n\r\n\tfunction getUserInfo(address userAddress) public view returns(uint256 totalDeposit, uint256 totalWithdrawn, uint256 totalReferrals) {\r\n\t\treturn(getUserTotalDeposits(userAddress), getUserTotalWithdrawn(userAddress), getUserTotalReferrals(userAddress));\r\n\t}\r\n\r\n\t/** Get Block Timestamp **/\r\n\tfunction getBlockTimeStamp() public view returns (uint256) {\r\n\t    return block.timestamp;\r\n\t}\r\n\r\n\t/** Get Plans Length **/\r\n\tfunction getPlansLength() public view returns (uint256) {\r\n\t    return plans.length;\r\n\t}\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n\r\n   \r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_dev1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_dev2\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_mkt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"FeePayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Newbie\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReinvestedDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COMPOUND_COOLDOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MKT_BUYBACK_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BONUS_PLAN_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BONUS_PLAN_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BONUS_PLAN_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BONUS_PLAN_4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BONUS_STARTTIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJECT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERRAL_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_BONUS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIME_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WALLET_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erctoken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getPlanInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumInvestment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planTotalInvestorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planTotalInvestments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planTotalReInvestorCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planTotalReInvestments\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"planActivated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlansLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getUserActiveInvestments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserActiveProjectInvestments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"}],\"name\":\"getUserCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserDepositInfo\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finish\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"reinvested\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"int8\",\"name\":\"plan\",\"type\":\"int8\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReferrals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralTotalBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalReferrals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amounterc\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Growdcxstake", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000004d869d67cc0f065cf9a48c0c2c82272962fcc8370000000000000000000000004d869d67cc0f065cf9a48c0c2c82272962fcc8370000000000000000000000004d869d67cc0f065cf9a48c0c2c82272962fcc837", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://031012ee6a04bf45dda445cac5dbc2f0561f05158dc325a41f2facde57419baf"}