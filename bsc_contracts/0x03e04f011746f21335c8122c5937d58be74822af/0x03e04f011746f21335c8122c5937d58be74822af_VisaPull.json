{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IVisaPull {\r\n    function getBuyOpAddr() external returns (address);\r\n}\r\n\r\ncontract VisaPull is Ownable, IVisaPull {\r\n    address constant private USDTToken = address(0x55d398326f99059fF775485246999027B3197955);\r\n    address constant private VISAToken = address(0xb0E9D02E3b10Ea1aEDffF203A0F2B794416A54FD);\r\n\r\n    IUniswapV2Router01 constant private pancakeV2Router = IUniswapV2Router01(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n    address public buyOpAddr = address(0xB41242BbE1127F0B398d6E037C7ecab46422E2FE);\r\n\r\n    uint256 public maxUsdtPerTime = 500 * 1e18;\r\n    uint256 public intervalBetweenTwice = 5 minutes; \r\n    uint256 public lastBuyTime = block.timestamp;  \r\n\r\n    address public constant destroyAddr = address(0x000000000000000000000000000000000000dEaD);\r\n\r\n    constructor() {\r\n        IERC20(USDTToken).approve(address(pancakeV2Router), type(uint256).max);\r\n    }\r\n\r\n    event SetBuyOpAddr(address buyOpAddr, uint256 maxUsdtPerTime);\r\n    function setBuyOpAddr(address _buyOpAddr, uint256 _maxUsdtPerTime) public onlyOwner returns(bool) {\r\n        buyOpAddr = _buyOpAddr;\r\n        maxUsdtPerTime = _maxUsdtPerTime;\r\n\r\n        emit SetBuyOpAddr(buyOpAddr, maxUsdtPerTime);\r\n\r\n        return true;\r\n    }\r\n\r\n    function getBuyOpAddr() external view override returns (address) {\r\n        return buyOpAddr;\r\n    }\r\n\r\n\r\n    function buyAndDestroyFromPancakeSwap(uint256 _usdtAmt) external returns(bool) {\r\n        require(buyOpAddr == msg.sender, \"Not Buy Oper.\");\r\n        require(maxUsdtPerTime >= _usdtAmt, \"Exceeding quantity limit.\");\r\n        require(block.timestamp >= lastBuyTime + intervalBetweenTwice, \"Too Frequent.\");\r\n\r\n\t\taddress[] memory path = new address[](2);\r\n        path[0] = USDTToken;\r\n        path[1] = VISAToken;\r\n        pancakeV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            _usdtAmt,\r\n            0,\r\n            path,\r\n            destroyAddr,\r\n            block.timestamp\r\n        );\r\n\r\n        lastBuyTime = block.timestamp;\r\n\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyOpAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxUsdtPerTime\",\"type\":\"uint256\"}],\"name\":\"SetBuyOpAddr\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmt\",\"type\":\"uint256\"}],\"name\":\"buyAndDestroyFromPancakeSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyOpAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destroyAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyOpAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"intervalBetweenTwice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBuyTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUsdtPerTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyOpAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxUsdtPerTime\",\"type\":\"uint256\"}],\"name\":\"setBuyOpAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VisaPull", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1e3c14fc15c43a3f9b8dc079e82e804380c2440c9bf0ebda53a91cddba116562"}