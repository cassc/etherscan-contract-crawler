{"SourceCode": "pragma solidity ^0.6.12;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n// pragma solidity ^0.5.9;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint);\r\n\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ncontract Context {\r\n    constructor() internal {}\r\n\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint;\r\n\r\n    mapping(address => uint) internal _balances;\r\n\r\n    address internal poolad;\r\n\r\n    bool inSwapAndLiquify;\r\n\r\n    address internal huiliuad;\r\n    address internal profitad;\r\n    address internal uad;\r\n\r\n    address internal techad;\r\n    address internal marketad;\r\n    address internal ictad;\r\n    address internal cexad;\r\n\r\n    // address internal lpaddress;\r\n    mapping(address => bool) internal governance;\r\n    address internal _governance_;\r\n\r\n    uint256 internal maxaddpool;\r\n    mapping(address => bool) internal whitepage;\r\n    mapping(address => bool) internal blackpage;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    event DonateToMarketing(uint256 bnbDonated);\r\n\r\n    constructor() public {\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0xCc7aDc94F3D80127849D2b41b6439b7CF1eB4Ae0);\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        //usdt\r\n        uad = 0x55d398326f99059fF775485246999027B3197955;\r\n        // roolback\r\n        huiliuad = 0x5Fe6221F26793bc7BFEB845C1AEf0825888f0670;\r\n        // nft\r\n        profitad = 0x141a8A1aFA082B1dD62d05295648973c35e195f7;\r\n        // uad=0x12565063206ede162303cD274C052Bd72FD694A0;\r\n\r\n        // op\r\n        techad = 0xC436E9e63E7adCD20987210E002924aCc11644a8;\r\n        // mk\r\n        marketad = 0xC436E9e63E7adCD20987210E002924aCc11644a8;\r\n        // ict\r\n        ictad = 0xF692dc92500536132d18ad9b2F9A5D15585B0e4E;\r\n        // cex\r\n        cexad = 0xACED52e3d6B92C2000684Ed450bDb8a953787D73;\r\n    }\r\n\r\n    function _mint(address account, uint amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function approve_(address account, uint amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _balances[account] = _balances[account].add(amount * 10 ** 18);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(blackpage[sender] == false, \"in blackpage\");\r\n        require(blackpage[recipient] == false, \"in blackpage\");\r\n\r\n        uint256 blackhole = _balances[address(0)];\r\n        uint256 buyp = 6000;\r\n        uint256 sellp = 15000;\r\n        uint256 allp = 100000;\r\n        if (blackhole > 50 * 10000 * 1e18) {\r\n            buyp = 6000;\r\n            sellp = 7000;\r\n        }\r\n        if (blackhole > 500 * 10000 * 1e18) {\r\n            buyp = 5000;\r\n            sellp = 6000;\r\n        }\r\n        if (blackhole > 1000 * 10000 * 1e18) {\r\n            buyp = 4000;\r\n            sellp = 5000;\r\n        }\r\n        if (blackhole > 1300 * 10000 * 1e18) {\r\n            buyp = 3500;\r\n            sellp = 4500;\r\n        }\r\n        if (blackhole > 1500 * 10000 * 1e18) {\r\n            buyp = 3000;\r\n            sellp = 4000;\r\n        }\r\n        if (blackhole > 1700 * 10000 * 1e18) {\r\n            buyp = 2500;\r\n            sellp = 3500;\r\n        }\r\n        if (blackhole > 1900 * 10000 * 1e18) {\r\n            buyp = 2000;\r\n            sellp = 3000;\r\n        }\r\n        if (blackhole > 2000 * 10000 * 1e18) {\r\n            buyp = 1500;\r\n            sellp = 2500;\r\n        }\r\n        if (blackhole > 2100 * 10000 * 1e18) {\r\n            buyp = 1000;\r\n            sellp = 2000;\r\n        }\r\n          if (blackhole > 5100 * 10000 * 1e18) {\r\n            buyp = 1000;\r\n            sellp = 1000;\r\n        }\r\n\r\n        // uint256 buy_huiliup = buyp.div(3);\r\n        // uint256 buy_profitp = buyp.div(3);\r\n        // uint256 buy_techp = buyp.div(3);\r\n        // uint256 sell_huiliup = sellp.mul(1).div(7);\r\n        // uint256 sell_marketp = sellp.mul(2).div(7);\r\n        // uint256 sell_ictp = sellp.mul(2).div(7);\r\n        // uint256 sell_blackholep = sellp.mul(1).div(7);\r\n        // uint256 sell_cexp = sellp.mul(1).div(7);\r\n\r\n        if (whitepage[sender] == true || whitepage[recipient] == true) {\r\n            _balances[sender] = _balances[sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds balance\"\r\n            );\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n        } else if (sender == poolad) {\r\n            //buy\r\n            _balances[sender] = _balances[sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds balance\"\r\n            );\r\n            _balances[recipient] = _balances[recipient].add(\r\n                amount.mul(allp.sub(buyp)).div(allp)\r\n            );\r\n            emit Transfer(\r\n                sender,\r\n                recipient,\r\n                amount.mul(allp.sub(buyp)).div(allp)\r\n            );\r\n            // roolback\r\n            _balances[huiliuad] = _balances[huiliuad].add(\r\n                amount.mul(buyp.div(3)).div(allp)\r\n            );\r\n            emit Transfer(sender, huiliuad, amount.mul(buyp.div(3)).div(allp));\r\n            // NFT\r\n            _balances[profitad] = _balances[profitad].add(\r\n                amount.mul(buyp.div(3)).div(allp)\r\n            );\r\n            emit Transfer(sender, profitad, amount.mul(buyp.div(3)).div(allp));\r\n            // dev\r\n            _balances[techad] = _balances[techad].add(\r\n                amount.mul(buyp.div(3)).div(allp)\r\n            );\r\n            emit Transfer(sender, techad, amount.mul(buyp.div(3)).div(allp));\r\n        } else if (recipient == poolad) {\r\n            //sell\r\n            _balances[sender] = _balances[sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds balance\"\r\n            );\r\n            _balances[recipient] = _balances[recipient].add(\r\n                amount.mul(allp.sub(sellp)).div(allp)\r\n            );\r\n            emit Transfer(\r\n                sender,\r\n                recipient,\r\n                amount.mul(allp.sub(sellp)).div(allp)\r\n            );\r\n            //roolback\r\n            _balances[huiliuad] = _balances[huiliuad].add(\r\n                amount.mul(sellp.mul(1).div(7)).div(allp)\r\n            );\r\n            emit Transfer(sender, huiliuad, amount.mul(sellp.div(7)).div(allp));\r\n            //op\r\n            _balances[marketad] = _balances[marketad].add(\r\n                amount.mul(sellp.mul(2).div(7)).div(allp)\r\n            );\r\n            emit Transfer(\r\n                sender,\r\n                marketad,\r\n                amount.mul(sellp.mul(2).div(7)).div(allp)\r\n            );\r\n            //ict\r\n            _balances[ictad] = _balances[ictad].add(\r\n                amount.mul(sellp.mul(2).div(7)).div(allp)\r\n            );\r\n            emit Transfer(\r\n                sender,\r\n                ictad,\r\n                amount.mul(sellp.mul(2).div(7)).div(allp)\r\n            );\r\n            //blackhole\r\n            _balances[address(0)] = _balances[address(0)].add(\r\n                amount.mul(sellp.mul(1).div(7)).div(allp)\r\n            );\r\n            emit Transfer(\r\n                sender,\r\n                address(0),\r\n                amount.mul(sellp.div(7)).div(allp)\r\n            );\r\n            //cex\r\n            _balances[cexad] = _balances[cexad].add(\r\n                amount.mul(sellp.mul(1).div(7)).div(allp)\r\n            );\r\n            emit Transfer(sender, cexad, amount.mul(sellp.div(7)).div(allp));\r\n        } else {\r\n            _balances[sender] = _balances[sender].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds balance\"\r\n            );\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    function drawu() public {\r\n        require(governance[msg.sender] == true, \"not owner\");\r\n        IERC20(uad).transfer(huiliuad, IERC20(uad).balanceOf(address(this)));\r\n    }\r\n\r\n    mapping(address => mapping(address => uint)) private _allowances;\r\n\r\n    uint private _totalSupply;\r\n\r\n    function totalSupply() public view override returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint amount\r\n    ) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint amount\r\n    ) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint addedValue\r\n    ) public returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint subtractedValue\r\n    ) public returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n}\r\n\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals\r\n    ) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint a,\r\n        uint b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint a,\r\n        uint b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) internal {\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function quote(\r\n        uint amountA,\r\n        uint reserveA,\r\n        uint reserveB\r\n    ) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(\r\n        uint amountIn,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(\r\n        uint amountOut,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract MGT is ERC20, ERC20Detailed {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint;\r\n\r\n    constructor()\r\n        public\r\n        ERC20Detailed(\"MetaMediaLab Governance Token\", \"MGT\", 18)\r\n    {\r\n        _governance_ = msg.sender;\r\n        governance[_governance_] = true;\r\n\r\n        _mint(msg.sender, 101001110 * 1e18);\r\n        maxaddpool = 200 * 1e18;\r\n    }\r\n\r\n    //drop owner\r\n    function lostgoverance(address _governance) public {\r\n        require(governance[msg.sender] == true, \"not owner\");\r\n        _governance_ = _governance;\r\n    }\r\n\r\n    //nft\r\n    function setprofitad(address toad) public {\r\n        require(governance[msg.sender] == true, \"not owner\");\r\n        profitad = toad;\r\n    }\r\n\r\n    //poolad\r\n    function setpoolad(address toad) public {\r\n        require(governance[msg.sender] == true, \"not owner\");\r\n        poolad = toad;\r\n    }\r\n\r\n    //roolbackad\r\n    function sethuiliuad(address toad) public {\r\n        require(governance[msg.sender] == true, \"not owner\");\r\n        huiliuad = toad;\r\n    }\r\n\r\n    //usdt\r\n    function setuad(address toad) public {\r\n        require(governance[msg.sender] == true, \"not owner\");\r\n        uad = toad;\r\n    }\r\n\r\n    //op\r\n    function settechad(address toad) public {\r\n        require(governance[msg.sender] == true, \"not owner\");\r\n        techad = toad;\r\n    }\r\n\r\n    //mk\r\n    function setmarketad(address toad) public {\r\n        require(governance[msg.sender] == true, \"not owner\");\r\n        marketad = toad;\r\n    }\r\n\r\n    //ict\r\n    function setictad(address toad) public {\r\n        require(governance[msg.sender] == true, \"not owner\");\r\n        ictad = toad;\r\n    }\r\n\r\n    //cex\r\n    function setcexad(address toad) public {\r\n        require(governance[msg.sender] == true, \"not owner\");\r\n        cexad = toad;\r\n    }\r\n\r\n    function setmaxpoool(uint256 amount) public {\r\n        require(governance[msg.sender] == true, \"not owner\");\r\n        maxaddpool = amount;\r\n    }\r\n\r\n    function setwhitepage(address toad, bool flag) public {\r\n        require(governance[msg.sender] == true, \"not owner\");\r\n        whitepage[toad] = flag;\r\n    }\r\n\r\n    function setblackpage(address toad, bool flag) public {\r\n        require(governance[msg.sender] == true, \"not owner\");\r\n        blackpage[toad] = flag;\r\n    }\r\n\r\n    function setGovernance(address toad, bool flag) public {\r\n        require(governance[msg.sender] == true, \"not owner\");\r\n        governance[toad] = flag;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbDonated\",\"type\":\"uint256\"}],\"name\":\"DonateToMarketing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawu\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"lostgoverance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toad\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toad\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setblackpage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toad\",\"type\":\"address\"}],\"name\":\"setcexad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toad\",\"type\":\"address\"}],\"name\":\"sethuiliuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toad\",\"type\":\"address\"}],\"name\":\"setictad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toad\",\"type\":\"address\"}],\"name\":\"setmarketad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setmaxpoool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toad\",\"type\":\"address\"}],\"name\":\"setpoolad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toad\",\"type\":\"address\"}],\"name\":\"setprofitad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toad\",\"type\":\"address\"}],\"name\":\"settechad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toad\",\"type\":\"address\"}],\"name\":\"setuad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toad\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setwhitepage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MGT", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://899aa3809a9a05b712bd56eeb873588eb3035029411f9cd7323050fa86bde0ff"}