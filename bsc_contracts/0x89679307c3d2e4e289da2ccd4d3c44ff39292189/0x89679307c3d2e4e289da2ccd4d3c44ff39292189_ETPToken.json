{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"meta/ETP2.sol\": {\r\n      \"content\": \"\\r\\n// SPDX-License-Identifier: MIT\\r\\n \\r\\npragma solidity ^0.8.0;\\r\\n \\r\\ninterface IERC20 {\\r\\n \\r\\n    function totalSupply() external view returns (uint256);\\r\\n \\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n \\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n \\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n \\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    \\r\\n    \\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n \\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n\\r\\ninterface ETC {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n \\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n \\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n \\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n \\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    function casting(uint256 taxes,address _caller)  external  returns(bool);\\r\\n\\r\\n    function setETP(address _ETP) external;\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n \\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    \\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ninterface fomo {\\r\\n    function deposit(address _user) external;\\r\\n    function deposit(address _user,uint256 amount) external;\\r\\n    function getFomo(address _user) external view returns(uint _bonus,uint _award,uint _expiration);\\r\\n}\\r\\n \\r\\n \\r\\nlibrary SafeMath {\\r\\n \\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n \\r\\n        return c;\\r\\n    }\\r\\n \\r\\n \\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n \\r\\n \\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n \\r\\n        return c;\\r\\n    }\\r\\n \\r\\n  \\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n \\r\\n \\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n \\r\\n \\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n \\r\\n \\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n \\r\\n \\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n \\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n \\r\\nlibrary Address {\\r\\n \\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n \\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n \\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n \\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n \\r\\n   \\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n \\r\\n    \\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n \\r\\n \\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n \\r\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n \\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n \\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n \\r\\ncontract Ownable is Context {\\r\\n    address internal _owner;\\r\\n \\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n \\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n \\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n \\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n \\r\\ninterface IUniswapV2Factory {\\r\\n    function createPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n}\\r\\n \\r\\ninterface IUniswapV2Router02 {\\r\\n    function factory() external pure returns (address);\\r\\n \\r\\n    function WETH() external pure returns (address);\\r\\nfunction removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n     function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )external\\r\\n        returns (\\r\\n            uint256 amountA,\\r\\n            uint256 amountB,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external    returns (uint[] memory amounts);\\r\\n\\r\\n    function getAmountsOut(uint amountIn, address[] memory path)\\r\\n        external\\r\\n        view returns  (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] memory path)\\r\\n    external\\r\\n    view\\r\\n        returns (uint[] memory amounts);\\r\\n}\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\r\\n    }\\r\\n \\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\r\\n    }\\r\\n \\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\r\\n    }\\r\\n \\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        (bool success,) = to.call{value:value}(new bytes(0));\\r\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ninterface DAOPoolDividend {\\r\\n    function countDaoUsdtIn(uint256 usdtValue_) external ;\\r\\n    event countDaoUsdtInLog(address indexed caller_, uint256 usdtValue_,uint256 days_);\\r\\n}\\r\\n\\r\\ninterface LpPoolDividend{\\r\\n    function countLpUsdtIn(uint256 usdtValue_) external ;\\r\\n    event countLpUsdtInLog(address indexed caller_,uint256 usdtValue_,uint256 days_);\\r\\n\\r\\n}\\r\\n \\r\\ncontract ETPToken is Context, IERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n \\r\\n    mapping (address => uint256) private _tOwned;\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n \\r\\n    mapping (address => bool) private _isExcludedFromFee;\\r\\n   \\r\\n    uint256 private _decimals = 18;\\r\\n    uint256 private _tTotal = 100000000 * 10**18;\\r\\n \\r\\n    string private _name = \\\"ETP\\\";\\r\\n    string private _symbol = \\\"ETP\\\";\\r\\n    \\r\\n    // uint256 public _buyFee = 80;\\r\\n    mapping(uint256 => uint256) public _buyFee;\\r\\n    // uint256 public _sellFee = 90;\\r\\n    mapping(uint256 => uint256) public _sellFee;\\r\\n\\r\\n    uint256 public PERSENT =  1000;\\r\\n    uint256 public usdtSlippage = 900;\\r\\n\\r\\n    uint256 public feeRate = 1;\\r\\n    bool public isUpdateFeeRate = true;\\r\\n\\r\\n\\r\\n\\r\\n    mapping(uint256 => uint256 ) public etpPriceOrical;\\r\\n   \\r\\n  \\r\\n \\r\\n    IUniswapV2Router02 public  uniswapV2Router;\\r\\n    address public  uniswapV2Pair;\\r\\n \\r\\n    mapping(address => bool) public ammPairs;\\r\\n    \\r\\n   \\r\\n   \\r\\n \\r\\n    address public holder;\\r\\n\\r\\n   uint256 public startTime;\\r\\n   uint256 private startTime_utc8;\\r\\n\\r\\n   uint256 public superNodeAmount = 0;\\r\\n   uint256 public nodeAmount = 0 ;\\r\\n\\r\\n    //============ update ==============\\r\\n   address public daoAddress = 0xEa1E0FdD85205fdf1D637F9D14336Bb3b362ecAc;\\r\\n   address public ETC_TOKEN = 0xEa1E0FdD85205fdf1D637F9D14336Bb3b362ecAc;\\r\\n   address public lpPoolAddress = 0xEa1E0FdD85205fdf1D637F9D14336Bb3b362ecAc;\\r\\n   address public fom3dAddress = 0xEa1E0FdD85205fdf1D637F9D14336Bb3b362ecAc;\\r\\n   address public usdtSparePoolManager ;\\r\\n   //============ update ===============\\r\\n   \\r\\n    address public lpPoolContractAddress;\\r\\n    address public daoContractAddress;\\r\\n  \\r\\n    address public busd;\\r\\n\\r\\n    \\r\\n    uint256 public usdtSparePoolPrepaidCount;\\r\\n    uint256 public etpFee2UsdtCount;\\r\\n    uint256 public _maxTxAmount = 10e18;\\r\\n    uint256 public DAY_STEP = 1 days;\\r\\n\\r\\n \\r\\n\\r\\n    constructor (\\r\\n       \\r\\n    )  {\\r\\n\\r\\n    \\r\\n        holder = msg.sender;              \\r\\n        _tOwned[holder] = _tTotal;    \\r\\n        startTime = block.timestamp;\\r\\n        startTime_utc8 = startTime.div(DAY_STEP).mul(DAY_STEP);\\r\\n\\r\\n        \\r\\n        busd = 0x55d398326f99059fF775485246999027B3197955;\\r\\n\\r\\n\\r\\n        //==================== update ==========================================\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        address _uniswapV2Pair  = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), busd);\\r\\n\\r\\n        daoAddress = 0x7eC63fF7a0A17FBeeAD6464BA85d0FbB77eD06EB;         //dao usdt mananger asset(in)\\r\\n        lpPoolAddress = 0x39Da9E989A14b9519591147DDe26D76903cD0cFB;      // lppool usdt manager asset(in)   \\r\\n        usdtSparePoolManager  = 0x1e54253723f268590c1c30e7dbb75Edb0f0E35A5; // usdt spare pool,this must approve address(this) contract;\\r\\n        \\r\\n\\r\\n        // lpPoolContractAddress = 0x388D329f6B1Cc7B7cf696dB87E5f203775a77E35;   //lp dividend contract \\r\\n        // daoContractAddress = 0x586c8483062FB260630078617F3a08A745dc2336;        //dao dividend contract\\r\\n\\r\\n        // ETC_TOKEN = 0xEa1E0FdD85205fdf1D637F9D14336Bb3b362ecAc;    //etc token contract\\r\\n        // fom3dAddress = 0xEa1E0FdD85205fdf1D637F9D14336Bb3b362ecAc;     //fomo3d contract\\r\\n   \\r\\n        //==================== update ==========================================\\r\\n        \\r\\n        uniswapV2Pair = _uniswapV2Pair;\\r\\n \\r\\n        ammPairs[uniswapV2Pair] = true;\\r\\n \\r\\n        _isExcludedFromFee[holder] = true;\\r\\n        _isExcludedFromFee[address(this)] = true;\\r\\n        _isExcludedFromFee[usdtSparePoolManager] = true;\\r\\n        // _isExcludedFromFee[address(_uniswapV2Router)] = true;\\r\\n        \\r\\n\\r\\n       \\r\\n        _owner = msg.sender;\\r\\n\\r\\n        _buyFee[1] =80;\\r\\n        _buyFee[2] =80;\\r\\n        _buyFee[3] = 0 ;\\r\\n        _sellFee[1] = 90;\\r\\n        _sellFee[2] =180;\\r\\n        _sellFee[3] =360;\\r\\n\\r\\n        emit Transfer(address(0), holder, _tTotal);\\r\\n    }\\r\\n\\r\\n\\r\\n       //================update first===================\\r\\n\\r\\n    //1: approve usdtSparePoolManager for this contract\\r\\n    //2: ETC token address\\r\\n    function setETCTOKEN(address ETC_TOKEN_) public onlyOwner{\\r\\n        ETC_TOKEN = ETC_TOKEN_;\\r\\n    }\\r\\n\\r\\n    //3: lp dividend pool contract\\r\\n    function setlpPoolContractAddress(address lpPoolContractAddress_)public onlyOwner{\\r\\n        lpPoolContractAddress = lpPoolContractAddress_;\\r\\n        excludeFromFee(lpPoolContractAddress);\\r\\n\\r\\n    }\\r\\n    //4\uff1adao dividend contract\\r\\n    function setdaoContractAddress(address daoContractAddress_)public onlyOwner{\\r\\n        daoContractAddress = daoContractAddress_;\\r\\n\\r\\n    }\\r\\n\\r\\n    //5 : fomo 3d contract \\r\\n    function setfom3dAddress (address fom3dAddress_) public onlyOwner{\\r\\n        fom3dAddress = fom3dAddress_;\\r\\n        excludeFromFee(fom3dAddress_);\\r\\n    }\\r\\n\\r\\n\\r\\n    //================update first===================\\r\\n\\r\\n    function setUsdtSlippage(uint256 usdtSlippage_)public onlyOwner{\\r\\n        usdtSlippage =  usdtSlippage_;\\r\\n    }\\r\\n\\r\\n    function setUsdtAddress(address usdt_) public onlyOwner{\\r\\n        busd = usdt_;\\r\\n        address _uniswapV2Pair  = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), busd);\\r\\n        uniswapV2Pair = _uniswapV2Pair;\\r\\n \\r\\n        ammPairs[uniswapV2Pair] = true;\\r\\n    }\\r\\n\\r\\n    function setDAYSTEP(uint256 time_)public onlyOwner{\\r\\n        DAY_STEP = time_;\\r\\n    }\\r\\n\\r\\n    function setisUpdateFeeRate() public onlyOwner{\\r\\n        if(isUpdateFeeRate){\\r\\n            isUpdateFeeRate = false;\\r\\n        }else{\\r\\n            isUpdateFeeRate = true;\\r\\n        }       \\r\\n    }\\r\\n\\r\\n    function set_maxTxAmount(uint256 maxTxAmount_)public onlyOwner{\\r\\n        _maxTxAmount = maxTxAmount_;\\r\\n    }\\r\\n\\r\\n    function setFeeRate(uint256 n_) public onlyOwner{\\r\\n        feeRate = n_;\\r\\n    }\\r\\n\\r\\n    function setSuperAddress(address snaddr) external onlyOwner{\\r\\n        daoAddress = snaddr;\\r\\n    }\\r\\n    function setdaoAddress(address naddr) external onlyOwner{\\r\\n        daoAddress = naddr;\\r\\n    }\\r\\n\\r\\n    function setlpPoolAddress(address lpPoolAddress_) public onlyOwner{\\r\\n        lpPoolAddress = lpPoolAddress_;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function getDay() public view returns (uint256) {\\r\\n        return (block.timestamp - startTime)/DAY_STEP;\\r\\n    }\\r\\n\\r\\n\\r\\n \\r\\n    function setAmmPair(address pair,bool hasPair)external onlyOwner{\\r\\n        ammPairs[pair] = hasPair;\\r\\n    }\\r\\n \\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n \\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n \\r\\n    function decimals() public view returns (uint256) {\\r\\n        return _decimals;\\r\\n    }\\r\\n \\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n \\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _tOwned[account];\\r\\n    }\\r\\n \\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n \\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n \\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n \\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n \\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n \\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function excludeFromFee(address account) public onlyOwner {\\r\\n        _isExcludedFromFee[account] = true;\\r\\n    }\\r\\n \\r\\n    function excludeFromFees(address[] memory accounts) public onlyOwner{\\r\\n        uint len = accounts.length;\\r\\n        for( uint i = 0; i < len; i++ ){\\r\\n            _isExcludedFromFee[accounts[i]] = true;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function includeInFee(address account) public onlyOwner {\\r\\n        _isExcludedFromFee[account] = false;\\r\\n    }\\r\\n    \\r\\n    receive() external payable {}\\r\\n \\r\\n    \\r\\n    function isExcludedFromFee(address account) public view returns(bool) {\\r\\n        return _isExcludedFromFee[account];\\r\\n    }\\r\\n \\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n \\r\\n\\r\\n    bool public isAutoUsdtConvertFee  = false;\\r\\n    function setAutoUsdtConvertFee() public onlyOwner{\\r\\n        if(isAutoUsdtConvertFee){\\r\\n            isAutoUsdtConvertFee = false;\\r\\n        }else{\\r\\n           isAutoUsdtConvertFee = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event etpFeeToUsdtSparePool(address usdtSparePoolManager,uint256 value);\\r\\n    function  etpFeeToUsdt() public {\\r\\n        if(balanceOf(address(this)) > 0){\\r\\n            emit etpFeeToUsdtSparePool(usdtSparePoolManager ,balanceOf(address(this)));\\r\\n            swap(balanceOf(address(this)),usdtSparePoolManager);\\r\\n            \\r\\n        }\\r\\n       \\r\\n    }\\r\\n    \\r\\n    event burn(address indexed from,address  to,uint256 amount);\\r\\n    event UsdtSpareFeeLog(address indexed from, uint256 etpFeeValue, address indexed sender, uint256 spareUsdtValue,uint256 feeRate);\\r\\n    \\r\\n    \\r\\n    \\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        if( \\r\\n            balanceOf(address(this)) >= _maxTxAmount \\r\\n            && !ammPairs[from] \\r\\n            && !ammPairs[to]\\r\\n            && IERC20(uniswapV2Pair).totalSupply() > 10 * 10**18 ){\\r\\n            \\r\\n            uint256 beforeBalance =  IERC20(busd).balanceOf(usdtSparePoolManager);\\r\\n\\r\\n            swap(balanceOf(address(this)),usdtSparePoolManager);\\r\\n\\r\\n            uint256 afeterBalance =  IERC20(busd).balanceOf(usdtSparePoolManager);\\r\\n\\r\\n            if(afeterBalance > beforeBalance){\\r\\n                etpFee2UsdtCount += afeterBalance.sub(beforeBalance);\\r\\n            }\\r\\n            if(isAutoUsdtConvertFee && etpFee2UsdtCount < usdtSparePoolPrepaidCount && etpFee2UsdtCount >0 && usdtSparePoolPrepaidCount > 0){\\r\\n                usdtSlippage = PERSENT.mul(etpFee2UsdtCount).div(usdtSparePoolPrepaidCount);\\r\\n            }\\r\\n\\r\\n        }\\r\\n        \\r\\n        bool takeFee = true;\\r\\n \\r\\n        if( _isExcludedFromFee[from] || _isExcludedFromFee[to] || from ==  address(uniswapV2Router)){\\r\\n            takeFee = false;\\r\\n        }\\r\\n              \\r\\n        uint256 tTransferAmount;\\r\\n    \\r\\n         if( takeFee ){           \\r\\n           if( ammPairs[from]){  // buy or removeLiquidity\\r\\n                \\r\\n                uint256 day_ =  block.timestamp.sub(startTime_utc8).div(DAY_STEP);\\r\\n                etpPriceOrical[day_] = getETPPrice(1e18);\\r\\n                uint256 usdtAmountOut =  getETPPrice(amount);\\r\\n                if(usdtAmountOut > 100e18){\\r\\n                    fomo(fom3dAddress).deposit(to);\\r\\n                }\\r\\n               \\r\\n                uint256 etpFeeValue = amount.mul(_buyFee[feeRate]).div(PERSENT);\\r\\n                _takeFee(to,etpFeeValue);\\r\\n           \\r\\n                tTransferAmount = amount.sub(etpFeeValue);\\r\\n\\r\\n                if(etpFeeValue > 0 ){\\r\\n\\r\\n                    uint256 usdtFeeValue =  getETPPrice(etpFeeValue).mul(usdtSlippage).div(PERSENT);  \\r\\n                    emit UsdtSpareFeeLog(to,etpFeeValue,usdtSparePoolManager,usdtFeeValue,_buyFee[feeRate]);             \\r\\n                    if(usdtFeeValue > 0 && IERC20(busd).balanceOf(usdtSparePoolManager) > usdtFeeValue){               \\r\\n                        if(!_isContract(to)){\\r\\n                            usdtSparePoolPrepaidCount += usdtFeeValue;\\r\\n                            TransferHelper.safeTransferFrom(busd,usdtSparePoolManager,ETC_TOKEN,usdtFeeValue.mul(6).div(8));\\r\\n                            ETC(ETC_TOKEN).casting(usdtFeeValue.mul(6).div(8),to);\\r\\n                        \\r\\n                            IERC20(busd).transferFrom(usdtSparePoolManager,daoAddress,usdtFeeValue.mul(1).div(8));\\r\\n                            IERC20(busd).transferFrom(usdtSparePoolManager,lpPoolAddress,usdtFeeValue.mul(1).div(8));\\r\\n\\r\\n                            LpPoolDividend(lpPoolContractAddress).countLpUsdtIn(usdtFeeValue.mul(1).div(8));\\r\\n                            DAOPoolDividend(daoContractAddress).countDaoUsdtIn(usdtFeeValue.mul(1).div(8));\\r\\n                        }\\r\\n\\r\\n                    }\\r\\n                }\\r\\n\\r\\n   \\r\\n                if(feeRate != 1 && day_ > 0){\\r\\n                    if(getEtpPriceOrical(day_) >= getEtpPriceOrical((day_-1)) && isUpdateFeeRate){                       \\r\\n                        feeRate = 1;\\r\\n                    }else{                     \\r\\n                       if(getEtpPriceOrical(day_.sub(1)).mul(80).div(100) < getEtpPriceOrical(day_) && isUpdateFeeRate){\\r\\n                          feeRate = 1; \\r\\n                       }\\r\\n                    }\\r\\n                }\\r\\n           }\\r\\n           if( ammPairs[to]){//sell or addLiquidity\\r\\n\\r\\n      \\r\\n                uint256 day_ =  block.timestamp.sub(startTime_utc8).div(DAY_STEP);\\r\\n                etpPriceOrical[day_] = getETPPrice(1e18);\\r\\n                uint256 etpFeeValue = amount.mul(_sellFee[feeRate]).div(PERSENT);\\r\\n                _takeFee(from,etpFeeValue);\\r\\n                tTransferAmount = amount.sub(etpFeeValue);\\r\\n                uint256 usdtFeeValue =  getETPPrice(etpFeeValue).mul(usdtSlippage).div(PERSENT);\\r\\n\\r\\n                emit UsdtSpareFeeLog(from,etpFeeValue,usdtSparePoolManager,usdtFeeValue,_sellFee[feeRate]);  \\r\\n                if(usdtFeeValue > 0  && IERC20(busd).balanceOf(usdtSparePoolManager) > usdtFeeValue){\\r\\n                    \\r\\n                    if(feeRate == 3){\\r\\n                         if(!_isContract(from)){\\r\\n                            usdtSparePoolPrepaidCount += usdtFeeValue;\\r\\n                            TransferHelper.safeTransferFrom(busd,usdtSparePoolManager,ETC_TOKEN,usdtFeeValue);\\r\\n                         }\\r\\n                    }else{\\r\\n                        if(!_isContract(from)){\\r\\n                            usdtSparePoolPrepaidCount += usdtFeeValue;\\r\\n                            TransferHelper.safeTransferFrom(busd,usdtSparePoolManager,ETC_TOKEN,usdtFeeValue.mul(6).div(9));\\r\\n                            ETC(ETC_TOKEN).casting(usdtFeeValue.mul(6).div(9),from);                           \\r\\n                        \\r\\n                            IERC20(busd).transferFrom(usdtSparePoolManager, daoAddress,usdtFeeValue.mul(1).div(9));\\r\\n                            IERC20(busd).transferFrom(usdtSparePoolManager,lpPoolAddress,usdtFeeValue.mul(1).div(9));\\r\\n                            //fomo pool\\r\\n                            TransferHelper.safeTransferFrom(busd,usdtSparePoolManager,fom3dAddress,usdtFeeValue.mul(1).div(9));\\r\\n                            fomo(fom3dAddress).deposit(to,usdtFeeValue.mul(1).div(9));\\r\\n                            LpPoolDividend(lpPoolContractAddress).countLpUsdtIn(usdtFeeValue.mul(1).div(9));\\r\\n                            DAOPoolDividend(daoContractAddress).countDaoUsdtIn(usdtFeeValue.mul(1).div(9));\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n               \\r\\n                if(day_ > 0 ){\\r\\n                    uint256 priceDown80 =  getEtpPriceOrical(day_.sub(1)).mul(80).div(100); \\r\\n                    uint256 priceDown40 =  getEtpPriceOrical(day_.sub(1)).mul(60).div(100); \\r\\n                    if(getEtpPriceOrical(day_) < priceDown40){\\r\\n                        if(feeRate != 3 && isUpdateFeeRate){\\r\\n                            feeRate= 3;\\r\\n                        }\\r\\n                    }else if(getEtpPriceOrical(day_) <  priceDown80){\\r\\n                         if(feeRate != 2 && isUpdateFeeRate){\\r\\n                            feeRate= 2;\\r\\n                        }\\r\\n                    }\\r\\n                }   \\r\\n\\r\\n           }\\r\\n \\r\\n           if( !ammPairs[from] && !ammPairs[to]){\\r\\n                tTransferAmount = amount.mul(91).div(100);  \\r\\n                if(balanceOf(address(0)) < _tTotal.mul(99).div(100)){\\r\\n                    _tOwned[address(0)] = _tOwned[address(0)].add(amount.mul(9).div(100));\\r\\n                    emit Transfer(from,address(0),amount.mul(9).div(100));\\r\\n                }    \\r\\n           }\\r\\n        }else{\\r\\n            tTransferAmount = amount;      \\r\\n        }\\r\\n         _tokenTransfer(from,to,amount,tTransferAmount);\\r\\n       \\r\\n    }\\r\\n \\r\\n\\r\\n \\r\\n    function swapTokensForTokens(uint256 tokenAmount,address to)  private {\\r\\n        \\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = busd;\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);      \\r\\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, \\r\\n            path,\\r\\n            to,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    function swap(uint256 tokenAmount,address to) private{\\r\\n\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = busd;\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n        uniswapV2Router.swapExactTokensForTokens(\\r\\n        tokenAmount,\\r\\n        0,\\r\\n        path,\\r\\n        to,\\r\\n        block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    function getEtpPriceOrical(uint256 i) public view returns(uint256){\\r\\n        // uint256 i =  getDay();\\r\\n        uint256 price;\\r\\n        if(i == 0){\\r\\n            price =  etpPriceOrical[0];\\r\\n        }else{\\r\\n            for(i;i>0;i--){\\r\\n                price =  etpPriceOrical[i];\\r\\n               if(price!= 0 ){\\r\\n                   break;\\r\\n               }\\r\\n            }\\r\\n        }\\r\\n        return price;\\r\\n    }\\r\\n\\r\\n\\r\\n \\r\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\r\\n        \\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n        IERC20(busd).approve(address(uniswapV2Router),ethAmount);\\r\\n        // uint256 hb = IERC20(busd).balanceOf(holder);\\r\\n        IERC20(busd).transferFrom(holder,address(this), ethAmount);\\r\\n       \\r\\n\\r\\n        uniswapV2Router.addLiquidity(\\r\\n            address(this),\\r\\n            busd,\\r\\n            tokenAmount,\\r\\n            ethAmount,\\r\\n            0, // slippage is unavoidable\\r\\n            0, // slippage is unavoidable\\r\\n            holder,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n    \\r\\n\\r\\n    function getUsdtAmountIn(uint256 outEtp) public view returns(uint256 UsdtAmoutIn){\\r\\n          address[] memory path = new address[](2);\\r\\n           \\r\\n            path[0] = busd;\\r\\n            path[1] = address(this);\\r\\n            \\r\\n\\r\\n            uint[] memory amounts  = uniswapV2Router.getAmountsIn(outEtp,path);\\r\\n\\r\\n            return amounts[0];\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function getETPPrice(uint total) public view returns (uint amount1){\\r\\n\\r\\n            address[] memory path = new address[](2);\\r\\n           \\r\\n            path[0] = address(this);\\r\\n            path[1] = busd;\\r\\n\\r\\n            uint[] memory amounts  = uniswapV2Router.getAmountsOut(total,path);\\r\\n\\r\\n            return amounts[1];\\r\\n        \\r\\n    }   \\r\\n\\r\\n \\r\\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount,uint256 _tTransferAmount) private {\\r\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\r\\n        _tOwned[recipient] = _tOwned[recipient].add(_tTransferAmount);\\r\\n         emit Transfer(sender, recipient,_tTransferAmount);\\r\\n    }\\r\\n\\r\\n    \\r\\n    function _takeFee(address sender,uint256 fee_) private{\\r\\n         _tOwned[address(this)] = _tOwned[address(this)].add(fee_);\\r\\n         emit Transfer(sender,address(this),fee_);\\r\\n    }\\r\\n \\r\\n    function donateDust(address addr, uint256 amount) external onlyOwner {\\r\\n        TransferHelper.safeTransfer(addr, _msgSender(), amount);\\r\\n    }\\r\\n \\r\\n    function donateEthDust(uint256 amount) external onlyOwner {\\r\\n        TransferHelper.safeTransferETH(_msgSender(), amount);\\r\\n    }\\r\\n \\r\\n     function _isContract(address a) internal view returns(bool){\\r\\n        uint256 size;\\r\\n        assembly {size := extcodesize(a)}\\r\\n        return size > 0;\\r\\n    }\\r\\n    \\r\\n \\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"etpFeeValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spareUsdtValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"}],\"name\":\"UsdtSpareFeeLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"usdtSparePoolManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"etpFeeToUsdtSparePool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAY_STEP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETC_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERSENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ammPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donateDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donateEthDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etpFee2UsdtCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etpFeeToUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"etpPriceOrical\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fom3dAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"getETPPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getEtpPriceOrical\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"outEtp\",\"type\":\"uint256\"}],\"name\":\"getUsdtAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"UsdtAmoutIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAutoUsdtConvertFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isUpdateFeeRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPoolContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nodeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasPair\",\"type\":\"bool\"}],\"name\":\"setAmmPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAutoUsdtConvertFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time_\",\"type\":\"uint256\"}],\"name\":\"setDAYSTEP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ETC_TOKEN_\",\"type\":\"address\"}],\"name\":\"setETCTOKEN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n_\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"snaddr\",\"type\":\"address\"}],\"name\":\"setSuperAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usdt_\",\"type\":\"address\"}],\"name\":\"setUsdtAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtSlippage_\",\"type\":\"uint256\"}],\"name\":\"setUsdtSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount_\",\"type\":\"uint256\"}],\"name\":\"set_maxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"naddr\",\"type\":\"address\"}],\"name\":\"setdaoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daoContractAddress_\",\"type\":\"address\"}],\"name\":\"setdaoContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fom3dAddress_\",\"type\":\"address\"}],\"name\":\"setfom3dAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setisUpdateFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpPoolAddress_\",\"type\":\"address\"}],\"name\":\"setlpPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpPoolContractAddress_\",\"type\":\"address\"}],\"name\":\"setlpPoolContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superNodeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtSparePoolManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtSparePoolPrepaidCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ETPToken", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f1a755ec40fa2da32c05f5dc7ba986d0b6900d6b1db31af619a5446b78e4ce32"}