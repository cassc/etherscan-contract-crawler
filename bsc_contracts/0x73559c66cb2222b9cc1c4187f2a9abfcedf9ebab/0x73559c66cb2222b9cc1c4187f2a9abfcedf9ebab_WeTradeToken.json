{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n// IUniswapV2Factory interface taken from: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Factory.sol\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// IUniswapV2Pair interface taken from: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Pair.sol\r\ninterface IUniswapV2Pair {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint256 amount0,\r\n        uint256 amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n        external\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// IUniswapV2Router01 interface taken from: https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\n// IUniswapV2Router02 interface taken from: https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n// Context from OpenZeppelin\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// Ownable from OpenZeppelin\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _owner = _msgSender();\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// SafeMath Library\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// IBEP20 interface\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/// @title WeTrade Token\r\n/// @author Helal Yosra\r\n/// @notice You can use this contract for only the most basic simulation\r\n/// @dev All function calls are currently implemented without side effects\r\n\r\ncontract WeTradeToken is IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // General Info WETRADE token\r\n    string private _NAME = \"Wetrade\";\r\n    string private _SYMBOL = \"WETRADE\";\r\n    uint8 private _DECIMALS = 18;\r\n\r\n    // Pancackeswap info\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n\r\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n\r\n    // BUSD token on BSC\r\n    address public constant BUSD =\r\n        address(0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56);\r\n\r\n    // addresses\r\n    address payable public _burnWalletAddress =\r\n        payable(0x000000000000000000000000000000000000dEaD); // Burn address used to burn a 1% of tokens\r\n    address payable public _supplyWalletAddress =\r\n        payable(0x0b8df1aE292723B90Fe556850Af447787b05260D); // Wallet Supply-team\r\n    address payable public _formationWalletAddress =\r\n        payable(0x2D84a8511D5e5299329BB17E386A9E37dA476746); // Wallet formation to receive BUSD rewards CF Wehold\r\n    address payable public _teamWalletAddress =\r\n        payable(0x641d6c8cA429A7587809863a408bE3956906d650); // Wallet Team to receive 1% of transaction fees\r\n    address payable public _rewardsWalletAddress =\r\n        payable(0xd785B74aC532a49627B244D23fd9AEFF14CF5dEC); // Wallet rewards to receive 1% of transcation fees\r\n    address payable public _algoWalletAddress =\r\n        payable(0x42502725Db3296cc28b85A374E1252b762445ED3); // Wallet Algo to receive 7% of transcation fees when price impact >= 2%\r\n\r\n    // Token reflection\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 10**6 * 10**18;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _totalReflections; // Total reflections\r\n\r\n    // Fees exlusion\r\n    mapping(address => bool) private _isExcludedFromFees;\r\n    mapping(address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n\r\n    // Token taxes\r\n    uint256 public formationFee = 2;\r\n    uint256 public rewardsFee    = 1;\r\n    uint256 public reflectionFee = 1;\r\n    uint256 public liquidityFee = 2;\r\n    uint256 public marketingFee = 1;\r\n    uint256 public burnFee = 1;\r\n    uint256 public totalFees = 8;\r\n    uint256 public sellFee = 7;\r\n    uint256 public priceImpact = 2;\r\n\r\n    // Track original fees to bypass fees for excluded accounts or when price impact >= 2%\r\n    uint256 private origin_formationFee = formationFee;\r\n    uint256 private origin_rewardsFee   = rewardsFee;\r\n    uint256 private origin_reflectionFee = reflectionFee;\r\n    uint256 private origin_liquidityFee = liquidityFee;\r\n    uint256 private origin_marketingFee = marketingFee;\r\n    uint256 private origin_burnFee = burnFee;\r\n    uint256 private origin_totalFees = totalFees;\r\n    uint256 private origin_sellFee = sellFee;\r\n\r\n    // Blacklisting for 2 days after a sell\r\n    mapping(address => bool) public isBlacklisted;\r\n    mapping(address => uint256) public isBlacklistedTo;\r\n    uint256 public blacklistDeadline = 2 days;\r\n\r\n    bool public  tradingEnabled;\r\n    bool private currentlySwapping;\r\n\r\n    // all events\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event ExcludeMultipleAccountsFromFees(\r\n        address[] accounts,\r\n        bool[] isExcluded\r\n    );\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    event SwapAndSendToCFWehold(address to, uint256 tokens);\r\n    event SwapAndSendDividends(address to, uint256 tokens);\r\n    event SwapAndSendToTeam(address to, uint256 tokens);\r\n    event SwapAndSendToAlgo(address to, uint256 tokens);\r\n\r\n    modifier lockSwapping() {\r\n        currentlySwapping = true;\r\n        _;\r\n        currentlySwapping = false;\r\n    }\r\n\r\n    constructor() {\r\n        // Mint the total reflection balance to the deployer of this contract (owner)\r\n        _rOwned[_supplyWalletAddress] = _rTotal;\r\n\r\n        // PancakeSwap router v2\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n        );\r\n\r\n        // Create a uniswap pair for this new token (WETRADE/BUSD)\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), BUSD);\r\n\r\n        // initialise Pair and Router\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n\r\n        // add new Pair to automatedMarketMakerPairs\r\n        automatedMarketMakerPairs[uniswapV2Pair] = true;\r\n\r\n        // exclude from paying fees or having max transaction amount\r\n        excludeFromFees(owner(), true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(_supplyWalletAddress, true);\r\n        excludeFromFees(_formationWalletAddress, true);\r\n        excludeFromFees(_teamWalletAddress, true);\r\n        excludeFromFees(_rewardsWalletAddress,true);\r\n        excludeFromFees(_algoWalletAddress, true);\r\n\r\n        emit Transfer(address(0), _supplyWalletAddress, _tTotal);\r\n    }\r\n\r\n    /// @notice Required to recieve BNB from PancakeSwap V2 Router when swaping\r\n    receive() external payable {}\r\n\r\n    /// @notice required to withdraw BNB from this smart contract, only Owner can call this function\r\n    /// @param amount number of BNB to be transfered\r\n    function withdrawBNB(uint256 amount) public onlyOwner {\r\n        if (amount == 0) payable(owner()).transfer(address(this).balance);\r\n        else payable(owner()).transfer(amount);\r\n    }\r\n\r\n    /// @notice required to transfer BNB from this smart contract to recipient, only Owner can call this function\r\n    /// @param recipient of BNB\r\n    /// @param amount number of tokens to be transfered\r\n    function transferBNBToAddress(address payable recipient, uint256 amount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    /// @notice required to withdraw foreign tokens from this smart contract, only Owner can call this function\r\n    /// @param token address of the token to withdraw\r\n    function withdrawForeignToken(address token) public onlyOwner {\r\n        require(\r\n            address(this) != address(token),\r\n            \"Cannot withdraw native token\"\r\n        );\r\n        IBEP20(address(token)).transfer(\r\n            msg.sender,\r\n            IBEP20(token).balanceOf(address(this))\r\n        );\r\n    }\r\n\r\n    /// @notice required to withdraw WETRADE tokens from this smart contract, only Owner can call this function\r\n    function withdrawTokens(uint256 _amount) public onlyOwner {\r\n        _approve(address(this), owner(), _amount);\r\n        transferFrom(address(this), owner(), _amount);\r\n    }\r\n\r\n    /// @notice name of the token\r\n    /// @return returns name of the token\r\n    function name() public view returns (string memory) {\r\n        return _NAME;\r\n    }\r\n\r\n    /// @notice symbol of the token\r\n    /// @return returns symbol of the token\r\n    function symbol() public view returns (string memory) {\r\n        return _SYMBOL;\r\n    }\r\n\r\n    /// @notice decimals of the token\r\n    /// @return returns decimals of the token\r\n    function decimals() public view returns (uint8) {\r\n        return _DECIMALS;\r\n    }\r\n\r\n    /// @notice totalSupply of the token\r\n    /// @return returns totalSupply of the token\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    /// @notice balanceOf an account\r\n    /// @return  Returns the amount of tokens owned by `account`\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    /// @notice transfer  moves `amount` tokens from the caller's account to `recipient`.\r\n    /// @param amount number of tokens to transfer\r\n    /// @param recipient address where to send amount\r\n    /// @return a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice value changes when {approve} or {transferFrom} are called.\r\n    /// @param owner the owner of tokens\r\n    /// @param spender the spender which will be allowed to spend\r\n    /// @return the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default.\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /// @notice sets `amount` as the allowance of `spender` over the caller's tokens.\r\n    /// @param amount number of tokens to be spent\r\n    /// @param spender the spender which will be allowed to spend\r\n    /// @return a boolean value indicating whether the operation succeeded. Emits an {Approval} event.\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice sets `amount` as the allowance of `spender` over the caller's tokens.\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"TOKEN20: approve from the zero address\");\r\n        require(spender != address(0), \"TOKEN20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /// @notice moves `amount` tokens from  `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance.\r\n    /// @param sender the owner of tokens to send\r\n    /// @param recipient address where to send amount\r\n    /// @param amount number of tokens to transfer\r\n    /// @return a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"Transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /// @notice increase allowance\r\n    /// @param spender the spender which will be allowed to spend\r\n    /// @param addedValue number of tokens to add to allowance\r\n    /// @return a boolean value indicating whether the operation succeeded.\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /// @notice decrease allowance\r\n    /// @param spender the spender which will be allowed to spend\r\n    /// @param subtractedValue number of tokens to subtract from allowance\r\n    /// @return a boolean value indicating whether the operation succeeded.\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"Decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /// @notice burns a value of tokens, can be called only by owner\r\n    function burn(uint256 _value) external onlyOwner {\r\n        uint256 rFee = _value.mul(_getRate());\r\n        _rOwned[_burnWalletAddress] = _rOwned[_burnWalletAddress].add(rFee);\r\n        if (_isExcludedFromFees[_burnWalletAddress]) {\r\n            _tOwned[_burnWalletAddress] = _tOwned[_burnWalletAddress].add(\r\n                _value\r\n            );\r\n        }\r\n\r\n        emit Transfer(owner(), _burnWalletAddress, _value);\r\n    }\r\n\r\n    /// @notice exluded from rewards\r\n    /// @param account to check if exluded or not from rewards\r\n    /// @return a boolean value indicating whether the operation succeeded.\r\n    function isExcludedFromReward(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    /// @notice Allows a user to voluntarily reflect their tokens to everyone else\r\n    function reflect(uint256 tAmount) public {\r\n        require(\r\n            !_isExcludedFromFees[_msgSender()],\r\n            \"Excluded addresses cannot call this function\"\r\n        );\r\n        (uint256 rAmount, , , , ) = _getValues(tAmount);\r\n        _rOwned[_msgSender()] = _rOwned[_msgSender()].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        _totalReflections = _totalReflections.add(tAmount);\r\n    }\r\n\r\n    /// @notice get total of reflected tokens\r\n    /// @return  Returns the total of tokens reflected\r\n    function getTotalReflections() external view returns (uint256) {\r\n        return _totalReflections;\r\n    }\r\n\r\n    /// @notice Converts a token value to a reflection value\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount, , , , ) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (, uint256 rTransferAmount, , , ) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    /// @notice Converts a reflection value to a token value\r\n    function tokenFromReflection(uint256 rAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    /// @notice exclude from fees an address, only Owner can call this function\r\n    /// @param account to be excluded\r\n    /// @param excluded to be set to true or false\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        require(\r\n            _isExcludedFromFees[account] != excluded,\r\n            \"Account is already the value of 'excluded'\"\r\n        );\r\n        _isExcludedFromFees[account] = excluded;\r\n\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    /// @notice exclude from fees multiple addresses, only Owner can call this function\r\n    /// @param accounts to be excluded\r\n    /// @param excluded to be set to true or false\r\n    function excludeMultipleAccountsFromFees(\r\n        address[] calldata accounts,\r\n        bool[] calldata excluded\r\n    ) external onlyOwner {\r\n        require(\r\n            accounts.length == excluded.length,\r\n            \"The length of arrays should be equal\"\r\n        );\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            _isExcludedFromFees[accounts[i]] = excluded[i];\r\n        }\r\n\r\n        emit ExcludeMultipleAccountsFromFees(accounts, excluded);\r\n    }\r\n\r\n    /// @notice return if an account is exluded from fees or not\r\n    /// @param account to check\r\n    /// @return returns bool\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    /// @notice Excludes an address from receiving reflections\r\n    function excludeFromReward(address account) external onlyOwner {\r\n        require(!_isExcludedFromFees[account], \"Account is already excluded\");\r\n        if (_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcludedFromFees[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    /// @notice Includes an address back into the reflection system\r\n    function includeInReward(address account) external onlyOwner {\r\n        require(_isExcludedFromFees[account], \"Account is already included\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcludedFromFees[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice set Automated Market Maker Pair to add or remove a pair, only Owner can call this function\r\n    /// @param pair address for Pancackeswap\r\n    /// @param value (true or false)\r\n    function setAutomatedMarketMakerPair(address pair, bool value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            pair != uniswapV2Pair,\r\n            \"The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\"\r\n        );\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(\r\n            automatedMarketMakerPairs[pair] != value,\r\n            \"Automated market maker pair is already set to that value\"\r\n        );\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    /// @notice set trading, only Owner can call this function\r\n    /// @param _enabled (true or false)\r\n    function setTrading(bool _enabled) public onlyOwner {\r\n        tradingEnabled = _enabled;\r\n    }\r\n\r\n    /// @notice blacklist address, only Owner can call this function\r\n    /// @param account to be blacklisted\r\n    /// @param value (true or false)\r\n    /// @param deadline the limit of blacklisting\r\n    function blacklistAddress(\r\n        address account,\r\n        bool value,\r\n        uint256 deadline\r\n    ) public onlyOwner {\r\n        if (value) {\r\n            require(\r\n                block.timestamp < deadline,\r\n                \"The ability to blacklist accounts has been disabled.\"\r\n            );\r\n        }\r\n        isBlacklisted[account] = value;\r\n        isBlacklistedTo[account] = deadline;\r\n    }\r\n\r\n    /// @notice blacklist multiple address, only Owner can call this function\r\n    /// @param accounts to be blacklisted\r\n    /// @param value (true or false)\r\n    /// @param deadlines the limit of blacklisting\r\n    function blacklistMultipleAccounts(\r\n        address[] calldata accounts,\r\n        bool[] calldata value,\r\n        uint256[] calldata deadlines\r\n    ) public onlyOwner {\r\n        require(\r\n            accounts.length == value.length && value.length == deadlines.length,\r\n            \"Should be the same length.\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < accounts.length; i++) {\r\n            if (value[i]) {\r\n                require(\r\n                    block.timestamp < deadlines[i],\r\n                    \"The ability to blacklist accounts has been disabled.\"\r\n                );\r\n            }\r\n            isBlacklisted[accounts[i]] = value[i];\r\n            isBlacklistedTo[accounts[i]] = deadlines[i];\r\n        }\r\n    }\r\n\r\n    /// @notice whitelist address, only Owner can call this function\r\n    /// @param account to be whitelisted\r\n    function whitelistAddress(address account) public onlyOwner {\r\n        isBlacklisted[account] = false;\r\n        isBlacklistedTo[account] = 0;\r\n    }\r\n\r\n    /// @notice update PancakeSwap Router address, only Owner can call this function\r\n    /// @param newAddress of router\r\n    function updateUniswapV2Router(address newAddress) public onlyOwner {\r\n        require(\r\n            newAddress != address(uniswapV2Router),\r\n            \"The router already has that address\"\r\n        );\r\n        uniswapV2Router = IUniswapV2Router02(newAddress);\r\n        address _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory())\r\n            .createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n    }\r\n\r\n    /// @notice Collects all the necessary transfer values\r\n    /// @param tAmount token amount\r\n    /// @return reflected amount, reflected transfer amount, reflected fee, token transfered and token fee\r\n    function _getValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(\r\n            tAmount,\r\n            tFee,\r\n            _getRate()\r\n        );\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);\r\n    }\r\n\r\n    /// @notice Calculates transfer token values\r\n    function _getTValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        uint256 tFee = tAmount.mul(totalFees).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tFee);\r\n        return (tTransferAmount, tFee);\r\n    }\r\n\r\n    /// @notice Calculates transfer reflection values\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    /// @notice Calculates the rate of reflections to tokens\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    /// @notice Gets the current supply values\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (\r\n                _rOwned[_excluded[i]] > rSupply ||\r\n                _tOwned[_excluded[i]] > tSupply\r\n            ) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    /// @notice update all fees, onlyOwner can call this function\r\n    function updateFee(\r\n        uint256 _formationFee,\r\n        uint256 _rewardsFee,\r\n        uint256 _reflectionFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _marketingFee,\r\n        uint256 _burnFee,\r\n        uint256 _sellFee\r\n    ) public onlyOwner {\r\n        formationFee = _formationFee;\r\n        rewardsFee = _rewardsFee;\r\n        reflectionFee = _reflectionFee;\r\n        liquidityFee = _liquidityFee;\r\n        marketingFee = _marketingFee;\r\n        burnFee = _burnFee;\r\n        sellFee = _sellFee;\r\n\r\n        totalFees = formationFee\r\n            .add(rewardsFee)\r\n            .add(reflectionFee)\r\n            .add(liquidityFee)\r\n            .add(marketingFee)\r\n            .add(burnFee);\r\n\r\n        origin_formationFee = formationFee;\r\n        origin_rewardsFee = rewardsFee;\r\n        origin_reflectionFee = reflectionFee;\r\n        origin_liquidityFee = liquidityFee;\r\n        origin_marketingFee = marketingFee;\r\n        origin_burnFee = burnFee;\r\n        origin_totalFees = totalFees;\r\n        origin_sellFee = sellFee;\r\n    }\r\n\r\n    /// @notice remove all fees and stores their previous values to be later restored\r\n    function removeAllFees() private {\r\n        if (\r\n            formationFee == 0 &&\r\n            rewardsFee == 0 &&\r\n            reflectionFee == 0 &&\r\n            liquidityFee == 0 &&\r\n            marketingFee == 0 &&\r\n            burnFee == 0 &&\r\n            sellFee == 0 &&\r\n            totalFees == 0\r\n        ) return;\r\n        origin_formationFee = formationFee;\r\n        origin_rewardsFee = rewardsFee;\r\n        origin_reflectionFee = reflectionFee;\r\n        origin_liquidityFee = liquidityFee;\r\n        origin_marketingFee = marketingFee;\r\n        origin_burnFee = burnFee;\r\n        origin_totalFees = totalFees;\r\n        origin_sellFee = sellFee;\r\n\r\n        formationFee = 0;\r\n        rewardsFee = 0;\r\n        reflectionFee = 0;\r\n        liquidityFee = 0;\r\n        marketingFee = 0;\r\n        burnFee = 0;\r\n        totalFees = 0;\r\n        sellFee = 0;\r\n    }\r\n\r\n    /// @notice Restores the fees\r\n    function restoreAllFees() private {\r\n        formationFee = origin_formationFee;\r\n        rewardsFee = origin_rewardsFee;\r\n        reflectionFee = origin_reflectionFee;\r\n        liquidityFee = origin_liquidityFee;\r\n        marketingFee = origin_marketingFee;\r\n        burnFee = origin_burnFee;\r\n        sellFee = origin_sellFee;\r\n        totalFees = origin_totalFees;\r\n    }\r\n\r\n    /// @notice set price impact only from owner\r\n    function setPriceImpact(uint256 _percent) external onlyOwner {\r\n        priceImpact = _percent;\r\n    }\r\n\r\n    function calculPriceImpactLimit() internal view returns (uint256) {\r\n        return ((uint256(100).sub(priceImpact)).mul(10**_DECIMALS)).div(100);\r\n    }\r\n\r\n    /// @notice handles the before and after of a token transfer, such as taking fees and firing off a swap and liquify event\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"ERC20: transfer amount must be greater than zero\");\r\n        if (!_isExcludedFromFees[from]) {\r\n            require(tradingEnabled, \"Is trading Disabled.\");\r\n        }\r\n\r\n        _checkBlacklist(to);\r\n        _checkBlacklist(from);\r\n\r\n        if (!automatedMarketMakerPairs[from] && !_isExcludedFromFees[from]) {\r\n            require(\r\n                !isBlacklisted[from] && !isBlacklisted[to],\r\n                \"Is blacklisted\"\r\n            );\r\n        }\r\n\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        bool takeFee = !(_isExcludedFromFees[from] || _isExcludedFromFees[to]);\r\n\r\n        // Remove fees completely from the transfer if either wallet are excluded\r\n        if (!takeFee) {\r\n            removeAllFees();\r\n        }\r\n\r\n        // if sell\r\n        if (takeFee && automatedMarketMakerPairs[to]) {\r\n            if (_priceImpactTax(amount)) {\r\n                totalFees = totalFees.add(sellFee);\r\n            }\r\n\r\n            // blacklist for 2 days\r\n            isBlacklisted[from] = true;\r\n            isBlacklistedTo[from] = block.timestamp.add(blacklistDeadline);\r\n        }\r\n\r\n        //transfer amount, it will take tax, burn, liquidity fee\r\n        _tokenTransfer(from, to, amount);\r\n\r\n        // If we removed the fees for this transaction, then restore them for future transactions\r\n        if (!takeFee) {\r\n            restoreAllFees();\r\n        }\r\n\r\n        // If this transaction was a sell, and we took a fee, restore the fee amount back to the original buy amount\r\n        if (takeFee && automatedMarketMakerPairs[to]) {\r\n            totalFees = origin_totalFees;\r\n        }\r\n    }\r\n\r\n    /// @notice takes liquidity part to renforce the liquidity pool\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n        if (_isExcluded[address(this)])\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n    }\r\n\r\n    /// @notice check if the address is blacklisted or not\r\n    function _checkBlacklist(address _blacklisted) private {\r\n        if (\r\n            isBlacklisted[_blacklisted] &&\r\n            isBlacklistedTo[_blacklisted] < block.timestamp &&\r\n            isBlacklistedTo[_blacklisted] != 0\r\n        ) {\r\n            isBlacklisted[_blacklisted] = false;\r\n            isBlacklistedTo[_blacklisted] = 0;\r\n        }\r\n    }\r\n\r\n    /// @notice takes all fee, if takeFee is true\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        // Calculate the values required to execute a transfer\r\n        (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount, ) = _getRValues(\r\n            tAmount,\r\n            tFee,\r\n            _getRate()\r\n        );\r\n\r\n        // Transfer from sender to recipient\r\n        if (_isExcluded[sender]) {\r\n            _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        }\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\r\n        if (_isExcluded[recipient]) {\r\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        }\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\r\n        if (tFee > 0) {\r\n            uint256 tPortion = tFee.div(totalFees);\r\n\r\n            // Burn some of the taxed tokens\r\n            _burnTokens(tPortion);\r\n\r\n            // Reflect some of the taxed tokens\r\n            _sendToHolder(tPortion, sender);\r\n            _reflectTokens(tPortion);\r\n\r\n            // Take the rest of the taxed tokens for the other functions\r\n            _takeTokens(tFee.sub(tPortion).sub(tPortion));\r\n        }\r\n\r\n        // Emit an event\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    /// @notice burns tokens\r\n    function _burnTokens(uint256 tFee) private {\r\n        uint256 rFee = tFee.mul(_getRate());\r\n        _rOwned[_burnWalletAddress] = _rOwned[_burnWalletAddress].add(rFee);\r\n        if (_isExcludedFromFees[_burnWalletAddress]) {\r\n            _tOwned[_burnWalletAddress] = _tOwned[_burnWalletAddress].add(tFee);\r\n        }\r\n\r\n        emit Transfer(tx.origin, _burnWalletAddress, tFee);\r\n    }\r\n\r\n    /// @notice Increases the rate of how many reflections each token is worth\r\n    function _reflectTokens(uint256 tFee) private {\r\n        uint256 rFee = tFee.mul(_getRate());\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _totalReflections = _totalReflections.add(tFee);\r\n    }\r\n\r\n    /// @notice send some 1% tokens to holder\r\n    function _sendToHolder(uint256 tHolder, address sender) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rHolder = tHolder.mul(currentRate);\r\n\r\n        _rOwned[sender] = _rOwned[sender].add(rHolder);\r\n        _tOwned[sender] = _tOwned[sender].add(tHolder);\r\n\r\n        emit Transfer(sender, sender, tHolder);\r\n    }\r\n\r\n    /// @notice The contract takes a portion of tokens from taxed transactions\r\n    function _takeTokens(uint256 tTakeAmount) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 rTakeAmount = tTakeAmount.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTakeAmount);\r\n        if (_isExcluded[address(this)]) {\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tTakeAmount);\r\n        }\r\n\r\n        emit Transfer(tx.origin, address(this), tTakeAmount);\r\n    }\r\n\r\n    /// @notice swap and liquify WeTrade tokens, only Owner can swap and liquify\r\n    /// 2% liquidity pool (1% WeTrade 1% BUSD) sent to LP (WeTrade/BUSD)\r\n    /// 2% CF Wehold formation to sent to _formationWalletAddress\r\n    /// 1% holders sent to _rewardsWalletAddress\r\n    /// 1% BUSD for team sent to _teamWalletAddress\r\n    /// rest for _algoWalletAddress\r\n    function swapAndLiquify() public onlyOwner lockSwapping {\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        // 2% liquidity and add Liquidity\r\n        uint256 swapTokens = contractTokenBalance.mul(liquidityFee).div(100);\r\n        swapAndLiquify(swapTokens);\r\n\r\n        // swap the rest of tokens to BUSD\r\n        uint256 initialBUSDBalance = IBEP20(BUSD).balanceOf(address(this));\r\n        uint256 tokensToSwap = balanceOf(address(this));\r\n        swapTokensForBUSD(tokensToSwap);\r\n        uint256 newBalance = (IBEP20(BUSD).balanceOf(address(this))).sub(\r\n            initialBUSDBalance\r\n        );\r\n\r\n        IBEP20(BUSD).approve(address(this), newBalance);\r\n\r\n        // 2% BUSD for CF Wehold formation\r\n        uint256 formationTokens = newBalance.mul(formationFee).div(100);\r\n        bool success = IBEP20(BUSD).transferFrom(\r\n            address(this),\r\n            _formationWalletAddress,\r\n            formationTokens\r\n        );\r\n        if (success)\r\n            emit SwapAndSendToCFWehold(_formationWalletAddress, formationTokens);\r\n\r\n        // 1 % reward holders\r\n        uint256 dividendsTokens = newBalance.mul(rewardsFee).div(100);\r\n        success = IBEP20(BUSD).transferFrom(\r\n            address(this),\r\n            _rewardsWalletAddress,\r\n            dividendsTokens\r\n        );\r\n        if (success) emit SwapAndSendDividends(_rewardsWalletAddress, dividendsTokens);\r\n\r\n        // 1 % team\r\n        uint256 teamTokens = newBalance.mul(marketingFee).div(100);\r\n        success = IBEP20(BUSD).transferFrom(\r\n            address(this),\r\n            _teamWalletAddress,\r\n            teamTokens\r\n        );\r\n        if (success) emit SwapAndSendToTeam(_teamWalletAddress, teamTokens);\r\n\r\n        // 7% algo\r\n        uint256 sellTokens = newBalance.sub(formationTokens).sub(dividendsTokens).sub(teamTokens);\r\n        success = IBEP20(BUSD).transferFrom(\r\n            address(this),\r\n            _algoWalletAddress,\r\n            sellTokens\r\n        );\r\n        if (success) emit SwapAndSendToAlgo(_algoWalletAddress, sellTokens);\r\n    }\r\n\r\n    /// @notice Generates BNB by selling tokens and pairs some of the received BNB with tokens to add and grow the liquidity pool\r\n    function swapAndLiquify(uint256 tokens) private lockSwapping {\r\n        // split the contract balance into halves\r\n        uint256 half = tokens.div(2);\r\n        uint256 otherHalf = tokens.sub(half);\r\n\r\n        // capture the contract's current ETH balance.\r\n        // this is so that we can capture exactly the amount of ETH that the\r\n        // swap creates, and not make the liquidity event include any ETH that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for BNB\r\n        swapTokensForBNB(half);\r\n\r\n        // how much ETH did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // add liquidity to uniswap\r\n        if (newBalance > 0) {\r\n            addLiquidity(otherHalf, newBalance);\r\n            emit SwapAndLiquify(half, newBalance, otherHalf);\r\n        }\r\n    }\r\n\r\n    /// @notice Swap tokens for BNB storing the resulting BNB in the contract\r\n    function swapTokensForBNB(uint256 tokenAmount) private lockSwapping {\r\n        // Generate the Pancakeswap pair for token/WBNB\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH(); // WETH = WBNB on BSC\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // Execute the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // Accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp.add(300)\r\n        );\r\n    }\r\n\r\n    /// @notice Swaps BNB for tokens and immedietely burns them\r\n    function swapBNBForTokens(uint256 amount) private lockSwapping {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = uniswapV2Router.WETH();\r\n        path[1] = address(this);\r\n\r\n        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: amount\r\n        }(\r\n            0, // Accept any amount of RAINBOW\r\n            path,\r\n            _burnWalletAddress, // Burn address\r\n            block.timestamp.add(300)\r\n        );\r\n    }\r\n\r\n    /// @notice Adds liquidity to the PancakeSwap V2 LP\r\n    function addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n        // Approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // Adds the liquidity and gives the LP tokens to the owner of this contract\r\n        // The LP tokens need to be manually locked\r\n        uniswapV2Router.addLiquidityETH{value: bnbAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // Take any amount of tokens (ratio varies)\r\n            0, // Take any amount of BNB (ratio varies)\r\n            owner(),\r\n            block.timestamp.add(300)\r\n        );\r\n    }\r\n\r\n    /// @notice Swaps tokens for BUSD and immedietely burns them\r\n    function swapTokensForBUSD(uint256 tokenAmount) private lockSwapping {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        path[2] = BUSD;\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB)\r\n        internal\r\n        pure\r\n        returns (address token0, address token1)\r\n    {\r\n        require(tokenA != tokenB, \"UniswapV2Library: IDENTICAL_ADDRESSES\");\r\n        (token0, token1) = tokenA < tokenB\r\n            ? (tokenA, tokenB)\r\n            : (tokenB, tokenA);\r\n        require(token0 != address(0), \"UniswapV2Library: ZERO_ADDRESS\");\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(address tokenA, address tokenB)\r\n        internal\r\n        view\r\n        returns (uint256 reserveA, uint256 reserveB)\r\n    {\r\n        (address token0, ) = sortTokens(tokenA, tokenB);\r\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(uniswapV2Pair)\r\n            .getReserves();\r\n        (reserveA, reserveB) = tokenA == token0\r\n            ? (reserve0, reserve1)\r\n            : (reserve1, reserve0);\r\n    }\r\n\r\n    // Check for price impact before doing transfer\r\n    function _priceImpactTax(uint256 amount) internal view returns (bool) {\r\n        (uint256 _reserveA, uint256 _reserveB) = getReserves(\r\n            address(this),\r\n            BUSD\r\n        );\r\n        uint256 _constant = IUniswapV2Pair(uniswapV2Pair).kLast();\r\n        uint256 _market_price = _reserveA.div(_reserveB);\r\n\r\n        if (_reserveA == 0 && _reserveB == 0) {\r\n            return false;\r\n        } else {\r\n            if (amount >= _reserveA) return false;\r\n\r\n            uint256 _reserveA_new = _reserveA.sub(amount);\r\n            uint256 _reserveB_new = _constant.div(_reserveA_new);\r\n\r\n            if (_reserveB >= _reserveB_new) return false;\r\n            uint256 receivedBUSD = _reserveB_new.sub(_reserveB);\r\n\r\n            uint256 _new_price = (amount.div(receivedBUSD)).mul(10**18);\r\n            uint256 _delta_price = _new_price.div(_market_price);\r\n            uint256 _priceImpact = calculPriceImpactLimit();\r\n\r\n            return (_delta_price < _priceImpact);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"isExcluded\",\"type\":\"bool[]\"}],\"name\":\"ExcludeMultipleAccountsFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"SwapAndSendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"SwapAndSendToAlgo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"SwapAndSendToCFWehold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"SwapAndSendToTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_algoWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_formationWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardsWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_supplyWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_teamWalletAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"blacklistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklistDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"value\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"deadlines\",\"type\":\"uint256[]\"}],\"name\":\"blacklistMultipleAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"excluded\",\"type\":\"bool[]\"}],\"name\":\"excludeMultipleAccountsFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"formationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReflections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklistedTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceImpact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"reflect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflectionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setPriceImpact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferBNBToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_formationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"whitelistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawForeignToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WeTradeToken", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://587b389680023d20cbc654b7aa3e42eb2895662915ec00403c85c161be851288"}