{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-0.8/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/GaugeVotingAdminUtil.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\n\\ninterface IGaugeVoting {\\n    function gauges(uint256 _gaugeId) external view returns (\\n        uint256 pid,\\n        address masterChef,\\n        uint256 chainId,\\n        address pairAddress,\\n        uint256 boostMultiplier,\\n        uint256 maxVoteCap\\n    );\\n\\n    function gaugeCount() external view returns (uint256 gauge_count);\\n\\n    function checkpointGauge(address gauge_addr, uint256 _chainId) external;\\n\\n    function gaugeIndex_(bytes32 _hash) external view returns (uint256 gauge_idx);\\n\\n    function gaugeTypes_(bytes32 _hash) external view returns (uint256 gauge_type);\\n}\\n\\ncontract GaugeVotingAdminUtil is Ownable {\\n\\n    address public gaugeVotingAddress;\\n\\n    event GaugeVotingAddressUpdated(address indexed sender, address indexed gaugeVotingAddress);\\n\\n    function updateGaugeVotingAddress(address _newAddress) external onlyOwner {\\n        require(_newAddress != address(0), \\\"address should not be empty\\\");\\n        gaugeVotingAddress = _newAddress;\\n        emit GaugeVotingAddressUpdated(msg.sender, _newAddress);\\n    }\\n\\n    function checkPointGaugesBulk(uint256 _startGaugeId, uint256 _endGaugeId) external {\\n        if (_startGaugeId == 0 && _endGaugeId == 0) {\\n            _endGaugeId = IGaugeVoting(gaugeVotingAddress).gaugeCount() - 1;\\n        }\\n\\n        for (uint256 i = _startGaugeId; i <= _endGaugeId; i++) {\\n            ( , , uint256 chainId, address pairAddress, , ) =\\n                                    IGaugeVoting(gaugeVotingAddress).gauges(i);\\n            IGaugeVoting(gaugeVotingAddress).checkpointGauge(pairAddress, chainId);\\n        }\\n    }\\n\\n    function getGaugeHashFromId(uint256 _gaugeId) external view returns (bytes32 hash) {\\n        ( , , uint256 chainId, address pairAddress, , ) = IGaugeVoting(gaugeVotingAddress).gauges(_gaugeId);\\n        hash = keccak256(abi.encodePacked(pairAddress, chainId));\\n    }\\n\\n    function getGaugeHashFromPairAndChain(address pairAddress, uint256 chainId) external view returns (bytes32 hash) {\\n        hash = keccak256(abi.encodePacked(pairAddress, chainId));\\n    }\\n\\n    function getGaugeInfoFull(bytes32 _hash) external view returns (\\n        uint256 gaugeId,\\n        uint256 gaugeTypeId,\\n        uint256 pid,\\n        address masterChef,\\n        uint256 chainId,\\n        address pairAddress,\\n        uint256 boostMultiplier,\\n        uint256 maxVoteCap\\n    ) {\\n        gaugeId = IGaugeVoting(gaugeVotingAddress).gaugeIndex_(_hash) - 1;\\n        gaugeTypeId = IGaugeVoting(gaugeVotingAddress).gaugeTypes_(_hash) - 1;\\n        (pid, masterChef, chainId, pairAddress, boostMultiplier, maxVoteCap) =\\n            IGaugeVoting(gaugeVotingAddress).gauges(gaugeId);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gaugeVotingAddress\",\"type\":\"address\"}],\"name\":\"GaugeVotingAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startGaugeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endGaugeId\",\"type\":\"uint256\"}],\"name\":\"checkPointGaugesBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeVotingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gaugeId\",\"type\":\"uint256\"}],\"name\":\"getGaugeHashFromId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"getGaugeHashFromPairAndChain\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getGaugeInfoFull\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaugeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gaugeTypeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"masterChef\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"boostMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxVoteCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"updateGaugeVotingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GaugeVotingAdminUtil", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}