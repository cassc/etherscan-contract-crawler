{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n\r\n    function safeTransfer(IERC20 token, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(isContract(address(token)), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n\r\n\tfunction isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n\r\nabstract contract ReentrancyGuard {\r\n    bool internal locked;\r\n\r\n    modifier noReentrant() {\r\n        require(!locked, \"No re-entrancy\");\r\n        locked = true;\r\n        _;  \r\n        locked = false;\r\n    }\r\n}\r\ncontract InstantGain is ReentrancyGuard {\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\taddress private tokenAddr = address(0x55d398326f99059fF775485246999027B3197955);\r\n    IERC20 public token;\r\n\r\n\tuint256 constant private PERCENTS_DIVIDER = 1000;\r\n    uint256 constant private ACTIVATE_PRICE = 50 ether;\r\n    uint256 constant private DIRECT_COMMISSION = 10 ether;\r\n    uint256 constant private OWNER_FEE = 10 ether;\r\n    uint256 constant private REFERRAL_COMMISSION = 4 ether;\r\n    uint256 constant private MAX_COMMISSION_LEVEL = 4;\r\n    uint256 constant private MAX_DIRECT_REFERRAL = 2;\r\n    uint256 constant private PROFIT_LIMIT = 100 ether;\r\n    uint256 constant private TIME_STEP = 1 days;\r\n    uint256 public MAX_SEARCH_ADDRESS = 600;\r\n\r\n\tstruct User {\r\n        uint256 id;\r\n        uint256 joinDate;\r\n        uint256 checkpoint;\r\n        uint256 originReferrer;\r\n        uint256 mainReferrer;\r\n        uint256 available;\r\n        uint256 downlineCount;\r\n        uint256[] referral;\r\n        uint256 totalDirectCommission;\r\n        uint256 missedDirectCommission;\r\n        uint256[] totalReferralCommission;\r\n        uint256[] missedCommission;\r\n        uint256[] savedSearchArray;\r\n        uint256 currentSearchIndex;\r\n        uint256 reactivateCount;\r\n        uint256 paidCommission;\r\n\t}\r\n\r\n\tmapping (address => User) public users;\r\n    mapping (uint256 => address) public userList;\r\n    mapping (address => bool) public userReactiveStatus;\r\n    mapping (address => uint256) public userCurrentCommisson;\r\n\r\n    uint256 public currentID = 1;\r\n\r\n\tuint256 public totalUsers;\r\n    uint256 public totalActiveAmount;\r\n    uint256 public totalReActiveAmount;\r\n    uint256 public totalDirectReferralPaid;\r\n    uint256 public totalDirectReferralMissed;\r\n    uint256 public totalCommissionPaid;\r\n    uint256 public totalCommissionMissed;\r\n    uint256 public totalProfitPaid;\r\n    uint256 public launchTime;\r\n\taddress public ownerWallet;\r\n    bool public initial;\r\n    InstantGain private oldInstantGain;\r\n\r\n\r\n\tevent Activate(address userAddress, uint256 indexed id, uint256 timestamp);\r\n    event ReActivate(address userAddress, uint256 indexed id, uint256 timestamp);\r\n    event WithdrawProfit(address userAddress, uint256 indexed id, uint256 amount, uint256 timestamp);\r\n    event OwnerFeePaid(uint256 amount, uint256 timestamp);\r\n    event DirectCommissionPaid(uint256 fromID, uint256 toID, uint256 timestamp);\r\n    event DirectCommissionMissed(uint256 fromID, uint256 toID, uint256 timestamp);\r\n    event ReferralCommissionPaid(uint256 fromID, uint256 toID, uint256 level, uint256 timestamp);\r\n    event ReferralCommissionMissed(uint256 fromID, uint256 toID, uint256 level, uint256 timestamp);\r\n\r\n\tconstructor() {\r\n\t\townerWallet = address(0x0Fb85ae76698c198Ca4d765Cdd2510a3F71616eA);\r\n        oldInstantGain = InstantGain(0x177FB1973019C8D78E86959d66A7539CA3666E09);\r\n        launchTime = block.timestamp;\r\n\t\ttoken = IERC20(tokenAddr);\r\n\t}\r\n\r\n    function activate(uint256 referrer) public noReentrant {\r\n        require(initial , \"Project not launch yet\");\r\n        require(users[msg.sender].joinDate == 0, \"Activate only once\");\r\n        require(users[userList[referrer]].joinDate != 0, \"Referrer is not valid\");\r\n        require(ACTIVATE_PRICE <= token.allowance(msg.sender, address(this)), \"Low allowance\");\r\n        token.safeTransferFrom(msg.sender, address(this), ACTIVATE_PRICE);\r\n\r\n        uint256 refID = users[userList[referrer]].id;\r\n        if (users[userList[refID]].referral.length >= MAX_DIRECT_REFERRAL) {\r\n            refID = _findFreeReferrer(refID);\r\n        }\r\n\r\n        User memory userStruct;\r\n        uint256[] memory deafultArray;\r\n        userStruct = User({\r\n            id: currentID,\r\n            joinDate: block.timestamp,\r\n            checkpoint: block.timestamp,\r\n            originReferrer: users[userList[referrer]].id,\r\n            mainReferrer: refID,\r\n            available: 0,\r\n            downlineCount: 0,\r\n            referral: new uint256[](0),\r\n            totalDirectCommission: 0,\r\n            missedDirectCommission: 0,\r\n            totalReferralCommission: new uint256[](MAX_COMMISSION_LEVEL),\r\n            missedCommission: new uint256[](MAX_COMMISSION_LEVEL),\r\n            savedSearchArray: deafultArray,\r\n            currentSearchIndex: 0,\r\n            reactivateCount: 0,\r\n            paidCommission: 0\r\n        });\r\n        users[msg.sender] = userStruct;\r\n        users[userList[users[msg.sender].originReferrer]].downlineCount++;\r\n        userList[currentID] = msg.sender;\r\n        users[userList[users[msg.sender].mainReferrer]].referral.push(currentID);\r\n        currentID++;\r\n        totalUsers++;\r\n        totalActiveAmount += ACTIVATE_PRICE;\r\n\r\n        _payCommission(msg.sender, 0, 0);\r\n\r\n        emit Activate(msg.sender, users[msg.sender].id, block.timestamp);\r\n    }\r\n\r\n    function reactivate() public noReentrant {\r\n        require(initial , \"Project not launch yet\");\r\n        require(users[msg.sender].joinDate > 0, \"Activate first\");\r\n        require(userReactiveStatus[msg.sender], \"First Make Withdraw to Activate your Account Again\");\r\n        require(ACTIVATE_PRICE <= token.allowance(msg.sender, address(this)), \"Low allowance\");\r\n        token.safeTransferFrom(msg.sender, address(this), ACTIVATE_PRICE);\r\n\r\n       _payCommission(msg.sender, 0, 1);\r\n\r\n        users[msg.sender].checkpoint = block.timestamp;\r\n        users[msg.sender].reactivateCount++;\r\n        userReactiveStatus[msg.sender] = false;\r\n        userCurrentCommisson[msg.sender] = 0;\r\n        totalReActiveAmount += ACTIVATE_PRICE;\r\n        emit ReActivate(msg.sender, users[msg.sender].id, block.timestamp);\r\n    }\r\n\r\n    function withdrawProfit() public noReentrant {\r\n        require(initial, \"Project not launch yet\");\r\n        require(users[msg.sender].joinDate > 0, \"Activate first\");\r\n        require(users[msg.sender].checkpoint + TIME_STEP <= block.timestamp, \"Not time to claim\");\r\n        require(!userReactiveStatus[msg.sender], \"Only once\");\r\n\r\n        uint256 availableProfit = users[msg.sender].available;\r\n        _payCommission(msg.sender, 1, 1);\r\n\r\n        users[msg.sender].paidCommission += availableProfit;\r\n        totalProfitPaid += availableProfit;\r\n        users[msg.sender].available = 0;\r\n\r\n        if(isUserActiveOnClaim(msg.sender)){\r\n            users[msg.sender].checkpoint = block.timestamp;\r\n        }else{\r\n            userReactiveStatus[msg.sender] = true;\r\n        }\r\n\r\n        if(availableProfit > 0){\r\n            token.safeTransfer(msg.sender, availableProfit);\r\n        }\r\n        emit WithdrawProfit(msg.sender, users[msg.sender].id, availableProfit, block.timestamp);\r\n    }\r\n\r\n    function _payCommission(address userAddress, uint8 commissionType, uint8 inputType) internal {\r\n        User storage user = users[userAddress];\r\n        \r\n        if(inputType == 0){\r\n            address originUser = userList[user.originReferrer];\r\n            if(isUserActive(originUser)){\r\n                users[originUser].available += DIRECT_COMMISSION;\r\n                userCurrentCommisson[originUser] += DIRECT_COMMISSION;\r\n                users[originUser].totalDirectCommission += DIRECT_COMMISSION;\r\n                totalDirectReferralPaid += DIRECT_COMMISSION;\r\n                emit DirectCommissionPaid(user.id, user.originReferrer, block.timestamp);\r\n            } else {\r\n                users[originUser].missedDirectCommission += DIRECT_COMMISSION;\r\n                totalDirectReferralMissed += DIRECT_COMMISSION;\r\n                emit DirectCommissionMissed(user.id, user.originReferrer, block.timestamp);\r\n            }\r\n        } else{\r\n            address upline = userList[user.mainReferrer];\r\n            for (uint256 i = 0; i < MAX_COMMISSION_LEVEL; i++) {\r\n                if (upline != address(0)) {\r\n                    if(isUserActive(upline) && isUserFull(upline) && isUserFull(userAddress)){\r\n                        users[upline].available += REFERRAL_COMMISSION;\r\n                        userCurrentCommisson[upline] += REFERRAL_COMMISSION;\r\n                        users[upline].totalReferralCommission[i] += REFERRAL_COMMISSION;\r\n                        totalCommissionPaid += REFERRAL_COMMISSION;\r\n                        emit ReferralCommissionPaid(user.id, users[upline].id, i, block.timestamp);\r\n                    }else{\r\n                        users[upline].missedCommission[i] += REFERRAL_COMMISSION;\r\n                        totalCommissionMissed += REFERRAL_COMMISSION;\r\n                        emit ReferralCommissionMissed(user.id, users[upline].id, i, block.timestamp);\r\n                    }\r\n                }\r\n                upline = userList[users[upline].mainReferrer];\r\n            }\r\n        }\r\n        \r\n        if(commissionType == 0){\r\n            token.safeTransfer(ownerWallet, OWNER_FEE);\r\n            emit OwnerFeePaid(OWNER_FEE, block.timestamp);\r\n        }\r\n    }\r\n\r\n    function _findFreeReferrer(uint256 _user) internal returns (uint256) {\r\n        if (users[userList[_user]].referral.length < MAX_DIRECT_REFERRAL) {\r\n            return _user;\r\n        }\r\n        uint256[] storage referrals = users[userList[_user]].savedSearchArray;\r\n        if(referrals.length == 0){\r\n            referrals.push(users[userList[_user]].referral[0]);\r\n            referrals.push(users[userList[_user]].referral[1]);\r\n        }\r\n\r\n        uint256 freeReferrer;\r\n        bool noFreeReferrer = true;\r\n        uint256 maxBuildAddress = (MAX_SEARCH_ADDRESS / MAX_DIRECT_REFERRAL) - 1;\r\n        for (uint256 i = users[userList[_user]].currentSearchIndex; i < MAX_SEARCH_ADDRESS; i++) {\r\n            if (users[userList[referrals[i]]].referral.length == MAX_DIRECT_REFERRAL) {\r\n                if (i < maxBuildAddress) {\r\n                    referrals.push(users[userList[referrals[i]]].referral[0]);\r\n                    referrals.push(users[userList[referrals[i]]].referral[1]);\r\n                    users[userList[_user]].currentSearchIndex++;\r\n                }\r\n            } else {\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n        require(!noFreeReferrer, \"No Free Referrer\");\r\n        return freeReferrer;\r\n    }\r\n\r\n    function findFreeReferrer(uint256 _user) public view returns (uint256) {\r\n        if (users[userList[_user]].referral.length < MAX_DIRECT_REFERRAL) {\r\n            return _user;\r\n        }\r\n       uint256[] memory referrals = new uint256[](MAX_SEARCH_ADDRESS);\r\n        for (uint256 i = 0; i < users[userList[_user]].savedSearchArray.length; i++) {\r\n            referrals[i] = users[userList[_user]].savedSearchArray[i];\r\n        }\r\n\r\n        uint256 freeReferrer;\r\n        bool noFreeReferrer = true;\r\n        uint256 maxBuildAddress = (MAX_SEARCH_ADDRESS / MAX_DIRECT_REFERRAL) - 1;\r\n        for (uint256 i = users[userList[_user]].currentSearchIndex; i < MAX_SEARCH_ADDRESS; i++) {\r\n            if (users[userList[referrals[i]]].referral.length == MAX_DIRECT_REFERRAL) {\r\n                if (i < maxBuildAddress) {\r\n                    referrals[(i + 1) * MAX_DIRECT_REFERRAL] = users[userList[referrals[i]]].referral[0];\r\n                    referrals[(i + 1) * MAX_DIRECT_REFERRAL + 1] = users[userList[referrals[i]]].referral[1];\r\n                }\r\n            } else {\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n        require(!noFreeReferrer, \"No Free Referrer\");\r\n        return freeReferrer;\r\n    }\r\n\r\n    function getUserDividends(address userAddress) public view returns (uint256) {\r\n\t\tUser storage user = users[userAddress];\r\n\t\treturn user.available;\r\n\t}\r\n\r\n\r\n    function setMaxSearchAddress(uint256 amount) public {\r\n        require(msg.sender == ownerWallet, \"Only owner\");\r\n\t\tMAX_SEARCH_ADDRESS = amount;\r\n\t}\r\n\r\n    function isUserActive(address userAddress) public view returns (bool) {\r\n\t\tif((userCurrentCommisson[userAddress] < PROFIT_LIMIT && users[userAddress].checkpoint + TIME_STEP > block.timestamp && userAddress != address(0)) || userAddress == ownerWallet){\r\n            return true;\r\n        } else{\r\n            return false;\r\n        }\r\n\t}\r\n\r\n    function isUserActiveOnClaim(address userAddress) public view returns (bool) {\r\n\t\tif((userCurrentCommisson[userAddress] < PROFIT_LIMIT && userAddress != address(0)) || userAddress == ownerWallet){\r\n            return true;\r\n        } else{\r\n            return false;\r\n        }\r\n\t}\r\n\r\n    function isUserFull(address userAddress) public view returns (bool) {\r\n\t\tif(users[userAddress].downlineCount >= MAX_DIRECT_REFERRAL || userAddress == ownerWallet){\r\n            return true;\r\n        } else{\r\n            return false;\r\n        }\r\n\t}\r\n\r\n\tfunction getSiteInfo() public view returns(uint256 _totalUsers, uint256 _totalActiveAmount, uint256 _totalReActiveAmount, \r\n        uint256 _totalDirectReferralPaid, uint256 _totalDirectReferralMissed, uint256 _totalCommissionPaid, \r\n        uint256 _totalCommissionMissed, uint256 _totalProfitPaid, uint256 _launchTime) {\r\n\t\treturn(totalUsers, totalActiveAmount, totalReActiveAmount, totalDirectReferralPaid, totalDirectReferralMissed, totalCommissionPaid, totalCommissionMissed, totalProfitPaid, launchTime);\r\n\t}\r\n\r\n\tfunction getUserExtraInfo(address userAddress) public view returns(uint256 totalReferralCommission, uint256 totalReferralCommissionMissed, uint256 availableROI, uint256 userDeactivateTime, bool canUserReactive, uint256 currentCommisson) {\r\n\t\treturn (\r\n            getUserTotalReferralCommission(userAddress),\r\n            getUserTotalReferralCommissionMissed(userAddress),\r\n            getUserDividends(userAddress),\r\n            users[userAddress].checkpoint + TIME_STEP,\r\n            userReactiveStatus[userAddress] ? true : false,\r\n            userCurrentCommisson[userAddress]\r\n        );\r\n\t}\r\n    \r\n    function getUserReferral(address userAddress) public view returns(uint256[] memory) {\r\n\t\treturn users[userAddress].referral;\r\n\t}\r\n\r\n    function getUserReferralCommission(address userAddress) public view returns(uint256[] memory) {\r\n\t\treturn users[userAddress].totalReferralCommission;\r\n\t}\r\n\r\n    function getUserTotalReferralCommission(address userAddress) public view returns(uint256 amount) {\r\n        for (uint256 i = 0; i < MAX_COMMISSION_LEVEL; i++) {\r\n            amount += users[userAddress].totalReferralCommission[i];\r\n        }\r\n\t}\r\n\r\n    function getUserTotalReferralCommissionMissed(address userAddress) public view returns(uint256 amount) {\r\n        for (uint256 i = 0; i < MAX_COMMISSION_LEVEL; i++) {\r\n            amount += users[userAddress].missedCommission[i];\r\n        }\r\n\t}\r\n\r\n    function getUserMissedCommission(address userAddress) public view returns(uint256[] memory) {\r\n\t\treturn users[userAddress].missedCommission;\r\n\t}\r\n\r\n    function getUserSavedSearchArray(address userAddress) public view returns(uint256[] memory) {\r\n\t\treturn users[userAddress].savedSearchArray;\r\n\t}\r\n\r\n    function getUserReferralLength(address userAddress) public view returns(uint256) {\r\n\t\treturn users[userAddress].referral.length;\r\n\t}\r\n\r\n    function treeView(address _user) public view returns (address[] memory,bool[] memory, uint256[] memory ) {\r\n        address[] memory referrals = new address[](30);\r\n        bool[] memory activeStatus = new bool[](30);\r\n        uint256[] memory IDs = new uint256[](30);\r\n        IDs[0] = users[_user].referral.length > 0 ? users[_user].referral[0] : 0;\r\n        IDs[1] = users[_user].referral.length > 1 ? users[_user].referral[1] : 0;\r\n        for (uint256 i = 0; i < 14; i++) {\r\n            IDs[(i + 1) * MAX_DIRECT_REFERRAL] = users[userList[IDs[i]]].referral.length > 0 ? users[userList[IDs[i]]].referral[0] : 0;\r\n            IDs[(i + 1) * MAX_DIRECT_REFERRAL + 1] =  users[userList[IDs[i]]].referral.length > 1 ? users[userList[IDs[i]]].referral[1] : 0;\r\n        }\r\n        for (uint256 i = 0; i < 30; i++) {\r\n            activeStatus[i] = isUserActive(userList[IDs[i]]);\r\n            referrals[i] = userList[IDs[i]];\r\n        }\r\n        return (referrals, activeStatus, IDs);\r\n    }\r\n\r\n    function MigrateOldUser(uint256 limit) public{\r\n        require(msg.sender == ownerWallet, \"Only owner\");\r\n        require(!initial, \"Only once\");\r\n        for (uint i = 0; i < limit; i++) {\r\n            User memory olduser1;\r\n            address oldusers = oldInstantGain.userList(currentID);\r\n            (\r\n                olduser1.id,\r\n                olduser1.joinDate,\r\n                ,\r\n                olduser1.originReferrer,\r\n                olduser1.mainReferrer,,\r\n                olduser1.downlineCount,\r\n                ,,\r\n                olduser1.currentSearchIndex\r\n                ,,olduser1.paidCommission\r\n            ) = oldInstantGain.users(oldusers);\r\n\r\n            if(olduser1.joinDate > 0 && users[oldusers].joinDate == 0){\r\n                users[oldusers].id = olduser1.id;\r\n                users[oldusers].joinDate = olduser1.joinDate;\r\n                users[oldusers].checkpoint = launchTime + (olduser1.joinDate % TIME_STEP);\r\n                users[oldusers].originReferrer = olduser1.originReferrer;\r\n                users[oldusers].mainReferrer = olduser1.mainReferrer;\r\n                users[oldusers].downlineCount = olduser1.downlineCount;\r\n                users[oldusers].currentSearchIndex = olduser1.currentSearchIndex;\r\n                users[oldusers].referral = oldInstantGain.getUserReferral(oldusers);\r\n                users[oldusers].savedSearchArray = oldInstantGain.getUserSavedSearchArray(oldusers);\r\n                userList[currentID] = oldusers;\r\n                userReactiveStatus[oldusers] = oldInstantGain.userReactiveStatus(oldusers);\r\n                users[oldusers].totalReferralCommission = new uint256[](MAX_COMMISSION_LEVEL);\r\n                users[oldusers].missedCommission = new uint256[](MAX_COMMISSION_LEVEL);\r\n                if(olduser1.paidCommission >= ACTIVATE_PRICE){\r\n                    userReactiveStatus[oldusers] = true;\r\n                }\r\n            }\r\n            currentID++;\r\n            if(currentID == oldInstantGain.currentID()){\r\n                currentID = oldInstantGain.currentID();\r\n                totalUsers = oldInstantGain.totalUsers();\r\n                totalActiveAmount = oldInstantGain.totalActiveAmount();\r\n                totalReActiveAmount = oldInstantGain.totalReActiveAmount();\r\n                totalDirectReferralPaid = oldInstantGain.totalDirectReferralPaid();\r\n                totalDirectReferralMissed = oldInstantGain.totalDirectReferralMissed();\r\n                totalCommissionPaid = oldInstantGain.totalCommissionPaid();\r\n                totalCommissionMissed = oldInstantGain.totalCommissionMissed();\r\n                totalProfitPaid = oldInstantGain.totalProfitPaid();\r\n                initial = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Activate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DirectCommissionMissed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DirectCommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"OwnerFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReActivate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReferralCommissionMissed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReferralCommissionPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WithdrawProfit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SEARCH_ADDRESS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"MigrateOldUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referrer\",\"type\":\"uint256\"}],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_user\",\"type\":\"uint256\"}],\"name\":\"findFreeReferrer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSiteInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalActiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalReActiveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDirectReferralPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDirectReferralMissed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCommissionPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalCommissionMissed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalProfitPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_launchTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserExtraInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalReferralCommission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReferralCommissionMissed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableROI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userDeactivateTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canUserReactive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"currentCommisson\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserMissedCommission\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferral\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralCommission\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserSavedSearchArray\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalReferralCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalReferralCommissionMissed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initial\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isUserActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isUserActiveOnClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isUserFull\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reactivate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxSearchAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalActiveAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCommissionMissed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCommissionPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDirectReferralMissed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDirectReferralPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProfitPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReActiveAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"treeView\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCurrentCommisson\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userReactiveStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originReferrer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mainReferrer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downlineCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDirectCommission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"missedDirectCommission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentSearchIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reactivateCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paidCommission\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InstantGain", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://991b425fca81918e5e65c84925125f3c845aa221efb3465964821228f280ab54"}