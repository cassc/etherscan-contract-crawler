{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2022-08-31\r\n*/\r\n\r\n// Sources flattened with hardhat v2.9.9 https://hardhat.org\r\n\r\n// File contracts/interfaces/IUpgradable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.9;\r\n\r\n// General interface for upgradable contracts\r\ninterface IUpgradable {\r\n    error NotOwner();\r\n    error InvalidOwner();\r\n    error InvalidCodeHash();\r\n    error InvalidImplementation();\r\n    error SetupFailed();\r\n    error NotProxy();\r\n\r\n    event Upgraded(address indexed newImplementation);\r\n    event OwnershipTransferred(address indexed newOwner);\r\n\r\n    // Get current owner\r\n    function owner() external view returns (address);\r\n\r\n    function contractId() external pure returns (bytes32);\r\n\r\n    function implementation() external view returns (address);\r\n\r\n    function upgrade(\r\n        address newImplementation,\r\n        bytes32 newImplementationCodeHash,\r\n        bytes calldata params\r\n    ) external;\r\n\r\n    function setup(bytes calldata data) external;\r\n}\r\n\r\n\r\n// File contracts/util/Proxy.sol\r\n\r\ncontract Proxy {\r\n    error InvalidImplementation();\r\n    error SetupFailed();\r\n    error EtherNotAccepted();\r\n    error NotOwner();\r\n    error AlreadyInitialized();\r\n\r\n    // bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)\r\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n    // keccak256('owner')\r\n    bytes32 internal constant _OWNER_SLOT = 0x02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c0;\r\n\r\n    constructor() {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            sstore(_OWNER_SLOT, caller())\r\n        }\r\n    }\r\n\r\n    function init(\r\n        address implementationAddress,\r\n        address newOwner,\r\n        bytes memory params\r\n    ) external {\r\n        address owner;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            owner := sload(_OWNER_SLOT)\r\n        }\r\n        if (msg.sender != owner) revert NotOwner();\r\n        if (implementation() != address(0)) revert AlreadyInitialized();\r\n        if (IUpgradable(implementationAddress).contractId() != contractId()) revert InvalidImplementation();\r\n\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            sstore(_IMPLEMENTATION_SLOT, implementationAddress)\r\n            sstore(_OWNER_SLOT, newOwner)\r\n        }\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, ) = implementationAddress.delegatecall(\r\n            // keccak('setup(bytes)') selector\r\n            abi.encodeWithSelector(0x9ded06df, params)\r\n        );\r\n        if (!success) revert SetupFailed();\r\n    }\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    function contractId() internal pure virtual returns (bytes32) {}\r\n\r\n    function implementation() public view returns (address implementation_) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            implementation_ := sload(_IMPLEMENTATION_SLOT)\r\n        }\r\n    }\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    function setup(bytes calldata data) public {}\r\n\r\n    // solhint-disable-next-line no-complex-fallback\r\n    fallback() external payable {\r\n        address implementaion_ = implementation();\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            let result := delegatecall(gas(), implementaion_, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n    receive() external payable virtual {\r\n        revert EtherNotAccepted();\r\n    }\r\n}\r\n\r\n\r\n// File contracts/gas-service/AxelarGasServiceProxy.sol\r\n\r\ncontract AxelarGasServiceProxy is Proxy {\r\n    function contractId() internal pure override returns (bytes32) {\r\n        return keccak256('axelar-gas-service');\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EtherNotAccepted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetupFailed\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementationAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "AxelarGasServiceProxy", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "1", "Implementation": "0xe622b1d44f5061db10aba2594f1a8eb2dc1fc1d4", "SwarmSource": "ipfs://651952c349510bec880aaba14c95732e193a934d9454dc378b340fc36d6ef99c"}