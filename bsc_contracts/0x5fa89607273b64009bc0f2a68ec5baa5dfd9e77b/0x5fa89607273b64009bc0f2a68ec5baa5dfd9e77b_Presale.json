{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * @title AIO-Presale contract\r\n * @author 4ndrei\r\n * @dev Contract for holding the ERC20 (BEP20) token presale.\r\n * @notice Presale constants are instanciated in the constructor and are immutable.\r\n */\r\ncontract Presale is Ownable {\r\n    struct Vesting {\r\n        uint256 totalAmount;\r\n        uint256 claimedAmount;\r\n    }\r\n\r\n    uint256 constant HUNDRED_PERCENTS = 100;\r\n    uint256 constant MONTH = 30 days;\r\n\r\n    uint256 internal immutable TO_DECIMALS;\r\n    address public immutable TOKEN;\r\n    uint256 public immutable START_TIME;\r\n    uint256 public immutable PRICE;\r\n    uint256 public endTime;\r\n\r\n    uint256 public constant REF_SHARE = 5;\r\n    uint256 public constant CLIFF_VESTING_SHARE = 40;\r\n    uint256 public constant MONTHLY_VESTING_SHARE = 20;\r\n\r\n    uint256 public amountLeft;\r\n\r\n    mapping(address => Vesting) public userVesting;\r\n\r\n    /**\r\n     * @dev Emits on tokens purchase\r\n     * @param user Tokens buyer\r\n     * @param tokensBought Amount of tokens bought\r\n     * @param amountPaid Amount of native currency provided\r\n     */\r\n    event Purchase(\r\n        address indexed user,\r\n        uint256 tokensBought,\r\n        uint256 amountPaid\r\n    );\r\n\r\n    modifier checkSale() {\r\n        require(\r\n            block.timestamp >= START_TIME && block.timestamp <= endTime,\r\n            \"Presale: Presale is not active\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param _token Presale token address\r\n     * @param _supply Presale token supply\r\n     * @param _startTimestamp Timestamp of presale start\r\n     * @param _presalePeriod Presale period in days\r\n     * @param _price Presale single token price in native wei\r\n     */\r\n    constructor(\r\n        address _token,\r\n        uint256 _supply,\r\n        uint256 _startTimestamp,\r\n        uint256 _presalePeriod,\r\n        uint256 _price\r\n    ) Ownable() {\r\n        TOKEN = _token;\r\n        START_TIME = _startTimestamp;\r\n        endTime = _startTimestamp + _presalePeriod * 1 days;\r\n        PRICE = _price;\r\n\r\n        TO_DECIMALS = 10 ** IERC20Metadata(TOKEN).decimals();\r\n\r\n        amountLeft = _supply * TO_DECIMALS;\r\n    }\r\n\r\n    /**\r\n     * Buy with referrals\r\n     * @dev Converts all provided native currency to presale tokens and saves them for vesting\r\n     * @param referral Address of referral's host\r\n     */\r\n    function buy(address payable referral) external payable {\r\n        if (referral == msg.sender) buy();\r\n        else referral.transfer((buy() * REF_SHARE) / HUNDRED_PERCENTS);\r\n    }\r\n\r\n    /**\r\n     * @dev Claims all available tokens\r\n     */\r\n    function claim() external {\r\n        uint256 amount = claimableAmount(msg.sender);\r\n        require(amount > 0, \"Claim: no tokens to claim\");\r\n\r\n        require(\r\n            amount <= tokenBalance(),\r\n            \"Claim: Not enough tokens in the contract\"\r\n        );\r\n\r\n        userVesting[msg.sender].claimedAmount += amount;\r\n\r\n        IERC20(TOKEN).transfer(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev sends all native balance on contract to owner\r\n     */\r\n    function withdraw() external onlyOwner {\r\n        require(\r\n            block.timestamp > endTime,\r\n            \"Presale: Presale has not ended yet\"\r\n        );\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    function endPresale() external onlyOwner {\r\n        require(\r\n            block.timestamp >= START_TIME,\r\n            \"Presale: Presale has not ended yet\"\r\n        );\r\n\r\n        endTime = block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * Buy without referral\r\n     * @dev Converts all provided native currency to presale tokens and saves them for vesting\r\n     */\r\n    function buy() public payable checkSale returns (uint256 nativeForTokens) {\r\n        uint256 tokensLeft = amountLeft; // saves SLOAD gas\r\n\r\n        require(tokensLeft > 0, \"Presale: No tokens left\");\r\n\r\n        uint256 tokenAmount = (msg.value * TO_DECIMALS) / PRICE;\r\n\r\n        require(tokenAmount > 0, \"Presale: Insufficient funds\");\r\n\r\n        nativeForTokens = msg.value;\r\n\r\n        if (tokensLeft < tokenAmount) {\r\n            nativeForTokens = (tokensLeft * PRICE) / TO_DECIMALS;\r\n            tokenAmount = tokensLeft;\r\n            endTime = block.timestamp;\r\n        }\r\n\r\n        unchecked {\r\n            userVesting[msg.sender].totalAmount += tokenAmount;\r\n            amountLeft -= tokenAmount;\r\n\r\n            if (msg.value > nativeForTokens)\r\n                payable(msg.sender).transfer(msg.value - nativeForTokens);\r\n        }\r\n\r\n        emit Purchase(msg.sender, tokenAmount, nativeForTokens);\r\n    }\r\n\r\n    /**\r\n     * @param user User address that is checked for claimable amount\r\n     * @return amountToClaim The amount of tokens to claim\r\n     */\r\n    function claimableAmount(\r\n        address user\r\n    ) public view returns (uint256 amountToClaim) {\r\n        if (block.timestamp < endTime) return 0;\r\n\r\n        uint256 noOfMonthPassed = (block.timestamp - endTime) / MONTH;\r\n\r\n        Vesting memory vestingData = userVesting[user];\r\n\r\n        uint256 amount = (vestingData.totalAmount *\r\n            (CLIFF_VESTING_SHARE + noOfMonthPassed * MONTHLY_VESTING_SHARE)) /\r\n            HUNDRED_PERCENTS;\r\n\r\n        if (amount > vestingData.totalAmount)\r\n            amountToClaim = vestingData.totalAmount - vestingData.claimedAmount;\r\n        else amountToClaim = amount - vestingData.claimedAmount;\r\n    }\r\n\r\n    /**\r\n     * @return Amount of tokens on the contract\r\n     */\r\n    function tokenBalance() public view returns (uint256) {\r\n        return IERC20(TOKEN).balanceOf(address(this));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_presalePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLIFF_VESTING_SHARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MONTHLY_VESTING_SHARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REF_SHARE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeForTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToClaim\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Presale", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000e5fa0495966b124dd55b390794683bd5cfff4efa0000000000000000000000000000000000000000000000000000000000b71b0000000000000000000000000000000000000000000000000000000000646f77f0000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000b5e620f4800", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f2d5155ddd17dc1ebeb44df5f8ec3257e81b1e78bdd11bdff6a5055c2a3b2c1b"}