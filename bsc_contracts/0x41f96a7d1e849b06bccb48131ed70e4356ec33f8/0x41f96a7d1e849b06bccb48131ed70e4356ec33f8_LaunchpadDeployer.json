{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IEnums.sol\\\";\\n\\ninterface IDeployer {\\n    function addToUserLaunchpad(\\n        address _user,\\n        address _token,\\n        IEnums.LAUNCHPAD_TYPE _launchpadType\\n    ) external;\\n\\n    function changeLaunchpadState(address _token, uint256 _newState) external;\\n\\n    function changeActionChanged(\\n        address _launchpad,\\n        bool _usingWhitelist,\\n        uint256 _endOfWhitelistTime\\n    ) external;\\n\\n    function changeWhitelistUsers(\\n        address _launchpad,\\n        address[] memory _users,\\n        uint256 _action\\n    ) external;\\n\\n    function launchpadRaisedAmountChangedReport(\\n        address _token,\\n        uint256 _currentRaisedAmount,\\n        uint256 _currentNeedToRaised\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IEnums.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IEnums {\\n    enum LAUNCHPAD_TYPE {\\n        NORMAL,\\n        FAIR\\n    }\\n\\n    enum LAUNCHPAD_STATE {\\n        OPENING,\\n        FINISHED,\\n        CANCELLED\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Launchpad.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./IDeployer.sol\\\";\\r\\n\\r\\ncontract LaunchPad is Ownable, Pausable, ReentrancyGuard, IEnums {\\r\\n    //variables for oprating sale\\r\\n    uint256 public softCap;\\r\\n    uint256 public hardCap;\\r\\n    uint256 public startTime;\\r\\n    uint256 public endOfWhitelistTime;\\r\\n    uint256 public endTime;\\r\\n    uint256 public endSaleTime;\\r\\n    uint256 public listingRate;\\r\\n    uint256 public presaleRate;\\r\\n    uint256 public maxBuyPerParticipant;\\r\\n    uint256 public minBuyPerParticipant;\\r\\n    string public URIData;\\r\\n    address public tokenSale;\\r\\n    address public tokenPayment;\\r\\n    address public admin;\\r\\n    uint256 public adminTokenPaymentFee;\\r\\n    uint256 public adminTokenSaleFee;\\r\\n    bool public usingWhitelist;\\r\\n    bool public refundWhenFinish = true;\\r\\n\\r\\n    //variable for display data\\r\\n    uint256 public totalDeposits;\\r\\n    uint256 public totalRaised;\\r\\n    uint256 public totalNeedToRaised;\\r\\n    uint256 public contributorId;\\r\\n    uint256 public status;\\r\\n    IDeployer deployer;\\r\\n    IEnums.LAUNCHPAD_TYPE launchPadType;\\r\\n    mapping(address => uint256) public depositedAmount;\\r\\n    mapping(address => uint256) public earnedAmount;\\r\\n    mapping(uint256 => address) public contributorsList;\\r\\n    mapping(address => bool) public whitelist;\\r\\n\\r\\n    event userDeposit(uint256 amount, address user);\\r\\n    event userRefunded(uint256 amount, address user);\\r\\n    event userClaimed(uint256 amount, address user);\\r\\n    event saleClosed(uint256 timeStamp, uint256 collectedAmount);\\r\\n    event saleCanceled(uint256 timeStamp, address operator);\\r\\n\\r\\n    constructor(\\r\\n        uint256[2] memory _caps,\\r\\n        uint256[3] memory _times,\\r\\n        uint256[2] memory _rates,\\r\\n        uint256[2] memory _limits,\\r\\n        uint256[2] memory _adminFees,\\r\\n        address[2] memory _tokens,\\r\\n        string memory _URIData,\\r\\n        address _admin,\\r\\n        bool _refundWhenFinish,\\r\\n        IEnums.LAUNCHPAD_TYPE _launchpadType\\r\\n    ) {\\r\\n        softCap = _caps[0];\\r\\n        hardCap = _caps[1];\\r\\n        startTime = _times[0];\\r\\n        endTime = _times[1];\\r\\n        endSaleTime = _times[2];\\r\\n        URIData = _URIData;\\r\\n        adminTokenSaleFee = _adminFees[0];\\r\\n        adminTokenPaymentFee = _adminFees[1];\\r\\n        tokenSale = _tokens[0];\\r\\n        tokenPayment = _tokens[1];\\r\\n        admin = _admin;\\r\\n        presaleRate = _rates[0];\\r\\n        listingRate = _rates[1];\\r\\n        maxBuyPerParticipant = _limits[1];\\r\\n        minBuyPerParticipant = _limits[0];\\r\\n        refundWhenFinish = _refundWhenFinish;\\r\\n        launchPadType = _launchpadType;\\r\\n        deployer = IDeployer(msg.sender);\\r\\n    }\\r\\n\\r\\n    modifier restricted() {\\r\\n        require(\\r\\n            msg.sender == owner() || msg.sender == admin,\\r\\n            \\\"Launchpad: Caller not allowed\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == admin, \\\"Launchpad: Caller not admin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function invest(uint256 _amount) external payable nonReentrant {\\r\\n        _checkCanInvest(msg.sender);\\r\\n        require(\\r\\n            status == uint256(IEnums.LAUNCHPAD_STATE.OPENING),\\r\\n            \\\"Launchpad: Sale is not open\\\"\\r\\n        );\\r\\n        require(startTime < block.timestamp, \\\"Launchpad: Sale is not open yet\\\");\\r\\n        require(endTime > block.timestamp, \\\"Launchpad: Sale is already closed\\\");\\r\\n\\r\\n        if (launchPadType == LAUNCHPAD_TYPE.NORMAL) {\\r\\n            require(\\r\\n                _amount + totalDeposits <= hardCap,\\r\\n                \\\"Launchpad(Normal): Hardcap reached\\\"\\r\\n            );\\r\\n        }\\r\\n        if (tokenPayment == address(0)) {\\r\\n            require(_amount == msg.value, \\\"Launchpad: Invalid payment amount\\\");\\r\\n        } else {\\r\\n            IERC20(tokenPayment).transferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                _amount\\r\\n            );\\r\\n        }\\r\\n        if (depositedAmount[msg.sender] == 0) {\\r\\n            contributorsList[contributorId] = msg.sender;\\r\\n            contributorId++;\\r\\n        }\\r\\n        depositedAmount[msg.sender] += _amount;\\r\\n        if (launchPadType == IEnums.LAUNCHPAD_TYPE.NORMAL) {\\r\\n            require(\\r\\n                depositedAmount[msg.sender] >= minBuyPerParticipant,\\r\\n                \\\"Launchpad: Min contribution not reached\\\"\\r\\n            );\\r\\n            require(\\r\\n                depositedAmount[msg.sender] <= maxBuyPerParticipant,\\r\\n                \\\"Launchpad: Max contribution not reached\\\"\\r\\n            );\\r\\n            uint256 tokenRaised = (_amount *\\r\\n                presaleRate *\\r\\n                10**ERC20(tokenSale).decimals()) / 10**18;\\r\\n            totalRaised += tokenRaised;\\r\\n            totalNeedToRaised += tokenRaised;\\r\\n            earnedAmount[msg.sender] += tokenRaised;\\r\\n        }\\r\\n        totalDeposits += _amount;\\r\\n        deployer.addToUserLaunchpad(\\r\\n            msg.sender,\\r\\n            tokenSale,\\r\\n            IEnums.LAUNCHPAD_TYPE.NORMAL\\r\\n        );\\r\\n        deployer.launchpadRaisedAmountChangedReport(tokenSale, totalDeposits, totalNeedToRaised);\\r\\n        emit userDeposit(_amount, msg.sender);\\r\\n    }\\r\\n\\r\\n    function claimFund() external nonReentrant {\\r\\n        _checkCanClaimFund();\\r\\n        uint256 amountEarned = 0;\\r\\n        if (launchPadType == LAUNCHPAD_TYPE.NORMAL) {\\r\\n            amountEarned = earnedAmount[msg.sender];\\r\\n            earnedAmount[msg.sender] = 0;\\r\\n            if (totalNeedToRaised <= amountEarned) {\\r\\n                totalNeedToRaised = 0;\\r\\n            } else {\\r\\n                totalNeedToRaised -= amountEarned;\\r\\n            }\\r\\n        } else {\\r\\n            amountEarned =\\r\\n                (depositedAmount[msg.sender] * getTotalTokenSale()) /\\r\\n                totalDeposits;\\r\\n            depositedAmount[msg.sender] = 0;\\r\\n        }\\r\\n        require(amountEarned > 0, \\\"Launchpad: User have no token to claim\\\");\\r\\n        IERC20(tokenSale).transfer(msg.sender, amountEarned);\\r\\n        deployer.launchpadRaisedAmountChangedReport(tokenSale, totalDeposits, totalNeedToRaised);\\r\\n        emit userClaimed(amountEarned, msg.sender);\\r\\n    }\\r\\n\\r\\n    function claimRefund() external nonReentrant {\\r\\n        if (status != uint256(IEnums.LAUNCHPAD_STATE.CANCELLED)) {\\r\\n            _checkCanCancel();\\r\\n        } else {\\r\\n            require(\\r\\n                status == uint256(IEnums.LAUNCHPAD_STATE.CANCELLED),\\r\\n                \\\"Launchpad: Sale must be cancelled\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 deposit = depositedAmount[msg.sender];\\r\\n        require(deposit > 0, \\\"Launchpad: User doesn't have deposits\\\");\\r\\n        depositedAmount[msg.sender] = 0;\\r\\n        if (tokenPayment == address(0)) {\\r\\n            payable(msg.sender).transfer(deposit);\\r\\n        } else {\\r\\n            IERC20(tokenPayment).transfer(msg.sender, deposit);\\r\\n        }\\r\\n        emit userRefunded(deposit, msg.sender);\\r\\n    }\\r\\n\\r\\n    function finishSale() external restricted nonReentrant {\\r\\n        _checkCanFinish();\\r\\n        status = uint256(IEnums.LAUNCHPAD_STATE.FINISHED);\\r\\n        _ownerWithdraw();\\r\\n        deployer.changeLaunchpadState(\\r\\n            tokenSale,\\r\\n            uint256(IEnums.LAUNCHPAD_STATE.FINISHED)\\r\\n        );\\r\\n        emit saleClosed(block.timestamp, totalDeposits);\\r\\n    }\\r\\n\\r\\n    function cancelSale() external restricted nonReentrant {\\r\\n        _checkCanCancel();\\r\\n        status = uint256(IEnums.LAUNCHPAD_STATE.CANCELLED);\\r\\n        deployer.changeLaunchpadState(\\r\\n            tokenSale,\\r\\n            uint256(IEnums.LAUNCHPAD_STATE.CANCELLED)\\r\\n        );\\r\\n        IERC20(tokenSale).transfer(\\r\\n            msg.sender,\\r\\n            IERC20(tokenSale).balanceOf(address(this))\\r\\n        );\\r\\n        emit saleCanceled(block.timestamp, msg.sender);\\r\\n    }\\r\\n\\r\\n    function changeData(string memory _newData) external onlyOwner {\\r\\n        URIData = _newData;\\r\\n    }\\r\\n\\r\\n    function enableWhitelist() external onlyOwner {\\r\\n        require(usingWhitelist == false || (endOfWhitelistTime > 0 && block.timestamp > endOfWhitelistTime), \\\"Whitelist mode is ongoing\\\");\\r\\n        usingWhitelist = true;\\r\\n        endOfWhitelistTime = 0;\\r\\n        deployer.changeActionChanged(address(this), usingWhitelist, endOfWhitelistTime);\\r\\n    }\\r\\n\\r\\n    function disableWhitelist(uint256 disableTime) external onlyOwner {\\r\\n        require(usingWhitelist == true && (endOfWhitelistTime == 0 || block.timestamp < endOfWhitelistTime), \\\"Whitelist mode is not ongoing\\\");\\r\\n        if (disableTime == 0) {\\r\\n            usingWhitelist = false;\\r\\n        } else {\\r\\n            require(disableTime > block.timestamp);\\r\\n            endOfWhitelistTime = disableTime;\\r\\n        }\\r\\n        deployer.changeActionChanged(address(this), usingWhitelist, endOfWhitelistTime);\\r\\n    }\\r\\n\\r\\n    function grantWhitelist(address[] calldata _users) external onlyOwner {\\r\\n        address[] memory users = new address[](_users.length);\\r\\n        for (uint256 i = 0; i < _users.length; i++) {\\r\\n            if (!whitelist[_users[i]]) {\\r\\n                whitelist[_users[i]] = true;\\r\\n                users[i] = _users[i];\\r\\n            }\\r\\n        }\\r\\n        deployer.changeWhitelistUsers(address(this), users, 0);\\r\\n    }\\r\\n\\r\\n    function revokeWhitelist(address[] calldata _users) external onlyOwner {\\r\\n        address[] memory users = new address[](_users.length);\\r\\n        for (uint256 i = 0; i < _users.length; i++) {\\r\\n            if (whitelist[_users[i]]) {\\r\\n                whitelist[_users[i]] = false;\\r\\n                users[i] = _users[i];\\r\\n            }\\r\\n        }\\r\\n        deployer.changeWhitelistUsers(address(this), users, 1);\\r\\n    }\\r\\n\\r\\n    function getContractInfo()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256[2] memory,\\r\\n            uint256[3] memory,\\r\\n            uint256[2] memory,\\r\\n            uint256[2] memory,\\r\\n            string memory,\\r\\n            address,\\r\\n            address,\\r\\n            bool,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            bool,\\r\\n            IEnums.LAUNCHPAD_TYPE\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            [softCap, hardCap],\\r\\n            [startTime, endTime, endSaleTime],\\r\\n            [presaleRate, listingRate],\\r\\n            [minBuyPerParticipant, maxBuyPerParticipant],\\r\\n            URIData,\\r\\n            tokenSale,\\r\\n            tokenPayment,\\r\\n            usingWhitelist,\\r\\n            totalDeposits,\\r\\n            status,\\r\\n            refundWhenFinish,\\r\\n            launchPadType\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getContributorsList()\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory list, uint256[] memory amounts)\\r\\n    {\\r\\n        list = new address[](contributorId);\\r\\n        amounts = new uint256[](contributorId);\\r\\n\\r\\n        for (uint256 i; i < contributorId; i++) {\\r\\n            address userAddress = contributorsList[i];\\r\\n            list[i] = userAddress;\\r\\n            amounts[i] = depositedAmount[userAddress];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTotalTokenSale() public view returns (uint256) {\\r\\n        return\\r\\n            (hardCap * presaleRate * 10**ERC20(tokenSale).decimals()) / 10**18;\\r\\n    }\\r\\n\\r\\n    function _ownerWithdraw() private {\\r\\n        address DEAD_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\r\\n        uint256 balance;\\r\\n        uint256 tokenSalefee;\\r\\n        uint256 tokenPaymentfee;\\r\\n\\r\\n        if (adminTokenSaleFee > 0) {\\r\\n            tokenSalefee =\\r\\n                ((\\r\\n                    launchPadType == LAUNCHPAD_TYPE.NORMAL\\r\\n                        ? totalRaised\\r\\n                        : getTotalTokenSale()\\r\\n                ) * adminTokenSaleFee) /\\r\\n                10000;\\r\\n        }\\r\\n        if (tokenSalefee > 0) {\\r\\n            IERC20(tokenSale).transfer(admin, tokenSalefee);\\r\\n        }\\r\\n\\r\\n        if (adminTokenPaymentFee > 0) {\\r\\n            tokenPaymentfee = (totalDeposits * adminTokenPaymentFee) / 10000;\\r\\n        }\\r\\n        if (tokenPayment == address(0)) {\\r\\n            balance = address(this).balance;\\r\\n            payable(admin).transfer(tokenPaymentfee);\\r\\n            payable(msg.sender).transfer(balance - tokenPaymentfee);\\r\\n        } else {\\r\\n            balance = IERC20(tokenPayment).balanceOf(address(this));\\r\\n            IERC20(tokenPayment).transfer(admin, tokenPaymentfee);\\r\\n            IERC20(tokenPayment).transfer(\\r\\n                msg.sender,\\r\\n                balance - tokenPaymentfee\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 amountTokenSaleRemain = IERC20(tokenSale).balanceOf(\\r\\n            address(this)\\r\\n        );\\r\\n        if (amountTokenSaleRemain > 0 && refundWhenFinish) {\\r\\n            IERC20(tokenSale).transfer(msg.sender, amountTokenSaleRemain);\\r\\n        }\\r\\n        if (amountTokenSaleRemain > 0 && !refundWhenFinish) {\\r\\n            IERC20(tokenSale).transfer(DEAD_ADDRESS, amountTokenSaleRemain);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkCanInvest(address _user) private view {\\r\\n        // if (usingWhitelist && !whitelist[_user]) {\\r\\n        //     require(\\r\\n        //         endOfWhitelistTime > 0 && block.timestamp >= endOfWhitelistTime,\\r\\n        //         \\\"Launchpad: User can not invest\\\"\\r\\n        //     );\\r\\n        // }\\r\\n        require(\\r\\n            usingWhitelist && (endOfWhitelistTime == 0 || block.timestamp < endOfWhitelistTime) && whitelist[_user] ||\\r\\n            !usingWhitelist || usingWhitelist && endOfWhitelistTime > 0 && block.timestamp > endOfWhitelistTime,\\r\\n            \\\"Launchpad: User can not invest\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _checkCanFinish() private view {\\r\\n        _checkCanClaimFund();\\r\\n        if (\\r\\n            launchPadType == LAUNCHPAD_TYPE.NORMAL &&\\r\\n            block.timestamp < endSaleTime\\r\\n        ) {\\r\\n            require(\\r\\n                totalNeedToRaised == 0,\\r\\n                \\\"Launchpad(Normal): All token sale need raised before end sale time\\\"\\r\\n            );\\r\\n        }\\r\\n        if (\\r\\n            launchPadType == LAUNCHPAD_TYPE.FAIR &&\\r\\n            block.timestamp < endSaleTime\\r\\n        ) {\\r\\n            require(\\r\\n                ERC20(tokenSale).balanceOf(address(this)) <=\\r\\n                    (getTotalTokenSale() * adminTokenSaleFee) / 10000,\\r\\n                \\\"Launchpad(Fair): All token sale need raised before end sale time\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkCanClaimFund() private view {\\r\\n        require(\\r\\n            block.timestamp > endTime,\\r\\n            \\\"Launchpad: Finishing launchpad does not available now\\\"\\r\\n        );\\r\\n        require(\\r\\n            status == uint256(IEnums.LAUNCHPAD_STATE.OPENING),\\r\\n            \\\"Launchpad: Sale is already finished or cancelled\\\"\\r\\n        );\\r\\n        if (launchPadType == LAUNCHPAD_TYPE.NORMAL) {\\r\\n            require(\\r\\n                totalDeposits >= softCap,\\r\\n                \\\"Launchpad(Normal): Soft cap not reached\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                totalDeposits >= hardCap,\\r\\n                \\\"Launchpad(Fair): Cap not reached\\\"\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkCanCancel() private view {\\r\\n        require(\\r\\n            status == uint256(IEnums.LAUNCHPAD_STATE.OPENING),\\r\\n            \\\"Launchpad: Sale is already finished or cancelled\\\"\\r\\n        );\\r\\n        if (launchPadType == IEnums.LAUNCHPAD_TYPE.NORMAL) {\\r\\n            require(\\r\\n                totalDeposits < softCap,\\r\\n                \\\"Launchpad(Normal): Soft cap reached\\\"\\r\\n            );\\r\\n        } else {\\r\\n            require(totalDeposits < hardCap, \\\"Launchpad(Fair): Cap reached\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/LaunchpadDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Launchpad.sol\\\";\\r\\n\\r\\ncontract LaunchpadDeployer is IDeployer, Ownable {\\r\\n    uint256 public deployCost = 0.001 ether;\\r\\n\\r\\n    mapping(address => address) public launchpadByToken;\\r\\n    mapping(IEnums.LAUNCHPAD_TYPE => uint256) public launchpadCount;\\r\\n    mapping(IEnums.LAUNCHPAD_TYPE => mapping(uint256 => address))\\r\\n        public launchpadById;\\r\\n    mapping(IEnums.LAUNCHPAD_TYPE => mapping(address => uint256))\\r\\n        public launchpadIdByAddress;\\r\\n    mapping(IEnums.LAUNCHPAD_TYPE => mapping(address => address[]))\\r\\n        public userLaunchpadInvested;\\r\\n    mapping(IEnums.LAUNCHPAD_TYPE => mapping(address => address[]))\\r\\n        public userLaunchpadCreated;\\r\\n    mapping(IEnums.LAUNCHPAD_TYPE => mapping(address => mapping(address => bool))) isLaunchpadAdded;\\r\\n\\r\\n    event launchpadDeployed(\\r\\n        address launchpad,\\r\\n        address deployer,\\r\\n        address tokenSale,\\r\\n        address tokenPayment,\\r\\n        IEnums.LAUNCHPAD_TYPE launchPadType,\\r\\n        string uriData,\\r\\n        bool refundWhenFinish,\\r\\n        uint256 startTime,\\r\\n        uint256 endTime,\\r\\n        uint256 claimTime,\\r\\n        uint256 adminTokenSaleFee\\r\\n    );\\r\\n\\r\\n    event launchpadDeployedParameter(\\r\\n        address launchpad,\\r\\n        uint256 softcap,\\r\\n        uint256 hardcap,\\r\\n        uint256 presaleRate,\\r\\n        uint256 listingRate,\\r\\n        uint256 minBuyPerParticipant,\\r\\n        uint256 maxBuyPerParticipant\\r\\n    );\\r\\n\\r\\n    event launchpadStateChanged(address launchpad, uint256 state);\\r\\n\\r\\n    event launchpadRaisedChanged(address launchpad, uint256 newRaisedAmount, uint256 newNeedToRaised);\\r\\n\\r\\n    event launchpadActionChanged(address launchpad, bool usingWhitelist, uint256 endOfWhitelistTime);\\r\\n\\r\\n    event launchpadWhitelistUsersChanged(address launchpad, address[] users, uint256 action);\\r\\n\\r\\n    function createLaunchpad(\\r\\n        uint256[2] memory _caps,\\r\\n        uint256[3] memory _times,\\r\\n        uint256[2] memory _rates,\\r\\n        uint256[2] memory _limits,\\r\\n        uint256[2] memory _adminFees,\\r\\n        address[2] memory _tokens,\\r\\n        string memory _URIData,\\r\\n        bool _refundWhenFinish,\\r\\n        IEnums.LAUNCHPAD_TYPE _launchpadType\\r\\n    ) public payable {\\r\\n        _checkCanCreateLaunch(_tokens[0]);\\r\\n        if (_launchpadType == IEnums.LAUNCHPAD_TYPE.FAIR) {\\r\\n            require(\\r\\n                _caps[0] == 0 && _limits[0] == 0 && _limits[1] == 0,\\r\\n                \\\"Invalid create launch input\\\"\\r\\n            );\\r\\n        }\\r\\n        LaunchPad newLaunchpad = new LaunchPad(\\r\\n            _caps,\\r\\n            _times,\\r\\n            _rates,\\r\\n            _limits,\\r\\n            _adminFees,\\r\\n            _tokens,\\r\\n            _URIData,\\r\\n            owner(),\\r\\n            _refundWhenFinish,\\r\\n            _launchpadType\\r\\n        );\\r\\n        _sendTokenToLaunchContract(\\r\\n            _rates[0],\\r\\n            _caps[1],\\r\\n            _tokens[0],\\r\\n            _adminFees[0],\\r\\n            address(newLaunchpad)\\r\\n        );\\r\\n        _updateLaunchpadData(\\r\\n            _launchpadType,\\r\\n            launchpadCount[_launchpadType],\\r\\n            address(newLaunchpad),\\r\\n            _tokens[0]\\r\\n        );\\r\\n        newLaunchpad.transferOwnership(msg.sender);\\r\\n        payable(owner()).transfer(msg.value);\\r\\n        emit launchpadDeployed(\\r\\n            address(newLaunchpad),\\r\\n            msg.sender,\\r\\n            _tokens[0],\\r\\n            _tokens[1],\\r\\n            _launchpadType,\\r\\n            _URIData,\\r\\n            _refundWhenFinish,\\r\\n            _times[0],\\r\\n            _times[1],\\r\\n            _times[2],\\r\\n            _adminFees[0]\\r\\n        );\\r\\n        emit launchpadDeployedParameter(\\r\\n            address(newLaunchpad),\\r\\n            _caps[0],\\r\\n            _caps[1],\\r\\n            _rates[0],\\r\\n            _rates[1],\\r\\n            _limits[0],\\r\\n            _limits[1]\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getDeployedLaunchpads(\\r\\n        uint256 startIndex,\\r\\n        uint256 endIndex,\\r\\n        IEnums.LAUNCHPAD_TYPE _launchpadType\\r\\n    ) public view returns (address[] memory) {\\r\\n        if (endIndex >= launchpadCount[_launchpadType]) {\\r\\n            endIndex = launchpadCount[_launchpadType] - 1;\\r\\n        }\\r\\n\\r\\n        uint256 arrayLength = endIndex - startIndex + 1;\\r\\n        uint256 currentIndex;\\r\\n        address[] memory launchpadAddress = new address[](arrayLength);\\r\\n\\r\\n        for (uint256 i = startIndex; i <= endIndex; i++) {\\r\\n            launchpadAddress[currentIndex] = launchpadById[_launchpadType][\\r\\n                startIndex + i\\r\\n            ];\\r\\n            currentIndex++;\\r\\n        }\\r\\n\\r\\n        return launchpadAddress;\\r\\n    }\\r\\n\\r\\n    function setDeployPrice(uint256 _price) external onlyOwner {\\r\\n        deployCost = _price;\\r\\n    }\\r\\n\\r\\n    function addToUserLaunchpad(\\r\\n        address _user,\\r\\n        address _token,\\r\\n        IEnums.LAUNCHPAD_TYPE _launchpadType\\r\\n    ) external override {\\r\\n        require(\\r\\n            launchpadByToken[_token] == msg.sender,\\r\\n            \\\"Only launchpads can do add\\\"\\r\\n        );\\r\\n        if (!isLaunchpadAdded[_launchpadType][_user][msg.sender]) {\\r\\n            userLaunchpadInvested[_launchpadType][_user].push(msg.sender);\\r\\n            isLaunchpadAdded[_launchpadType][_user][msg.sender] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function changeLaunchpadState(address _token, uint256 _newState)\\r\\n        external\\r\\n        override\\r\\n    {\\r\\n        require(\\r\\n            launchpadByToken[_token] == msg.sender,\\r\\n            \\\"Only launchpads can remove\\\"\\r\\n        );\\r\\n        emit launchpadStateChanged(launchpadByToken[_token], _newState);\\r\\n        launchpadByToken[_token] = address(0);\\r\\n    }\\r\\n\\r\\n    function changeActionChanged(address launchpad, bool usingWhitelist, uint256 endOfWhitelistTime) external override {\\r\\n        emit launchpadActionChanged(launchpad, usingWhitelist, endOfWhitelistTime);\\r\\n    }\\r\\n\\r\\n    function changeWhitelistUsers(address launchpad, address[] memory users, uint256 action) external override {\\r\\n        emit launchpadWhitelistUsersChanged(launchpad, users, action);\\r\\n    }\\r\\n\\r\\n    function launchpadRaisedAmountChangedReport(\\r\\n        address _token,\\r\\n        uint256 _currentRaisedAmount,\\r\\n        uint256 _currentNeedToRaised\\r\\n    ) external override {\\r\\n        require(\\r\\n            launchpadByToken[_token] == msg.sender,\\r\\n            \\\"Only launchpads can report\\\"\\r\\n        );\\r\\n        emit launchpadRaisedChanged(\\r\\n            launchpadByToken[_token],\\r\\n            _currentRaisedAmount,\\r\\n            _currentNeedToRaised\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getAllLaunchpads()\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory, address[] memory)\\r\\n    {\\r\\n        uint256 numberOfNormalLaunchpad = launchpadCount[\\r\\n            IEnums.LAUNCHPAD_TYPE.NORMAL\\r\\n        ];\\r\\n        uint256 numberOfFairLaunchpad = launchpadCount[\\r\\n            IEnums.LAUNCHPAD_TYPE.FAIR\\r\\n        ];\\r\\n        address[] memory allNormalLaunchpads = new address[](\\r\\n            numberOfNormalLaunchpad\\r\\n        );\\r\\n        address[] memory allFairLaunchpads = new address[](\\r\\n            numberOfFairLaunchpad\\r\\n        );\\r\\n        uint256 counter = numberOfNormalLaunchpad > numberOfFairLaunchpad\\r\\n            ? numberOfNormalLaunchpad\\r\\n            : numberOfFairLaunchpad;\\r\\n        for (uint256 i = 0; i < counter; i++) {\\r\\n            if (i < numberOfNormalLaunchpad) {\\r\\n                allNormalLaunchpads[i] = launchpadById[\\r\\n                    IEnums.LAUNCHPAD_TYPE.NORMAL\\r\\n                ][i];\\r\\n            }\\r\\n            if (i < numberOfFairLaunchpad) {\\r\\n                allFairLaunchpads[i] = launchpadById[\\r\\n                    IEnums.LAUNCHPAD_TYPE.FAIR\\r\\n                ][i];\\r\\n            }\\r\\n        }\\r\\n        return (allNormalLaunchpads, allFairLaunchpads);\\r\\n    }\\r\\n\\r\\n    function getUserContributions(\\r\\n        address _user,\\r\\n        IEnums.LAUNCHPAD_TYPE _launchpadType\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory ids, uint256[] memory contributions)\\r\\n    {\\r\\n        uint256 count = userLaunchpadInvested[_launchpadType][_user].length;\\r\\n        ids = new uint256[](count);\\r\\n        contributions = new uint256[](count);\\r\\n\\r\\n        for (uint256 i; i < count; i++) {\\r\\n            address launchpadaddress = userLaunchpadInvested[_launchpadType][\\r\\n                _user\\r\\n            ][i];\\r\\n            ids[i] = launchpadIdByAddress[_launchpadType][launchpadaddress];\\r\\n            contributions[i] = LaunchPad(launchpadaddress).depositedAmount(\\r\\n                _user\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _checkCanCreateLaunch(address _token) private {\\r\\n        require(msg.value >= deployCost, \\\"Not enough BNB to deploy\\\");\\r\\n        require(\\r\\n            launchpadByToken[_token] == address(0),\\r\\n            \\\"Launchpad already created\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _sendTokenToLaunchContract(\\r\\n        uint256 _presaleRate,\\r\\n        uint256 _cap,\\r\\n        address _tokenSale,\\r\\n        uint256 _adminTokenSaleFee,\\r\\n        address _launchpad\\r\\n    ) private {\\r\\n        uint256 tokensToDistribute = (_presaleRate *\\r\\n            _cap *\\r\\n            10**ERC20(_tokenSale).decimals()) / 10**18;\\r\\n        if (_adminTokenSaleFee > 0) {\\r\\n            tokensToDistribute +=\\r\\n                (tokensToDistribute * _adminTokenSaleFee) /\\r\\n                10000;\\r\\n        }\\r\\n        ERC20(_tokenSale).transferFrom(\\r\\n            msg.sender,\\r\\n            _launchpad,\\r\\n            tokensToDistribute\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _updateLaunchpadData(\\r\\n        IEnums.LAUNCHPAD_TYPE _launchpadType,\\r\\n        uint256 _launchpadCount,\\r\\n        address _launchpad,\\r\\n        address _token\\r\\n    ) private {\\r\\n        launchpadByToken[_token] = _launchpad;\\r\\n        launchpadById[_launchpadType][_launchpadCount] = _launchpad;\\r\\n        launchpadIdByAddress[_launchpadType][_launchpad] = _launchpadCount;\\r\\n        launchpadCount[_launchpadType]++;\\r\\n        userLaunchpadCreated[_launchpadType][msg.sender].push(_launchpad);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"launchpad\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"usingWhitelist\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endOfWhitelistTime\",\"type\":\"uint256\"}],\"name\":\"launchpadActionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"launchpad\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenSale\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenPayment\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IEnums.LAUNCHPAD_TYPE\",\"name\":\"launchPadType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uriData\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"refundWhenFinish\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"adminTokenSaleFee\",\"type\":\"uint256\"}],\"name\":\"launchpadDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"launchpad\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"softcap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"presaleRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBuyPerParticipant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBuyPerParticipant\",\"type\":\"uint256\"}],\"name\":\"launchpadDeployedParameter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"launchpad\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRaisedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNeedToRaised\",\"type\":\"uint256\"}],\"name\":\"launchpadRaisedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"launchpad\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"launchpadStateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"launchpad\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"action\",\"type\":\"uint256\"}],\"name\":\"launchpadWhitelistUsersChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"enum IEnums.LAUNCHPAD_TYPE\",\"name\":\"_launchpadType\",\"type\":\"uint8\"}],\"name\":\"addToUserLaunchpad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchpad\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"usingWhitelist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"endOfWhitelistTime\",\"type\":\"uint256\"}],\"name\":\"changeActionChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newState\",\"type\":\"uint256\"}],\"name\":\"changeLaunchpadState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchpad\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"action\",\"type\":\"uint256\"}],\"name\":\"changeWhitelistUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_caps\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_times\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_rates\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_limits\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_adminFees\",\"type\":\"uint256[2]\"},{\"internalType\":\"address[2]\",\"name\":\"_tokens\",\"type\":\"address[2]\"},{\"internalType\":\"string\",\"name\":\"_URIData\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_refundWhenFinish\",\"type\":\"bool\"},{\"internalType\":\"enum IEnums.LAUNCHPAD_TYPE\",\"name\":\"_launchpadType\",\"type\":\"uint8\"}],\"name\":\"createLaunchpad\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllLaunchpads\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"},{\"internalType\":\"enum IEnums.LAUNCHPAD_TYPE\",\"name\":\"_launchpadType\",\"type\":\"uint8\"}],\"name\":\"getDeployedLaunchpads\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"enum IEnums.LAUNCHPAD_TYPE\",\"name\":\"_launchpadType\",\"type\":\"uint8\"}],\"name\":\"getUserContributions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"contributions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IEnums.LAUNCHPAD_TYPE\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"launchpadById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchpadByToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IEnums.LAUNCHPAD_TYPE\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"launchpadCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IEnums.LAUNCHPAD_TYPE\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchpadIdByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_currentRaisedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentNeedToRaised\",\"type\":\"uint256\"}],\"name\":\"launchpadRaisedAmountChangedReport\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setDeployPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IEnums.LAUNCHPAD_TYPE\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userLaunchpadCreated\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IEnums.LAUNCHPAD_TYPE\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userLaunchpadInvested\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LaunchpadDeployer", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}