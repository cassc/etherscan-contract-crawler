{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PaymentSplitterICSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIXED\\r\\n\\r\\n// Sources flattened with hardhat v2.9.0 https://hardhat.org\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.3.2\\r\\n\\r\\n// License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n\\r\\n// File contracts/interfaces/IPaymentSplitter.sol\\r\\n\\r\\n// License-Identifier: MIT\\r\\n// @author: Developed by Alex and Bunzz.\\r\\n// @descpriton: Payment Splitter module for share revenue or salary with trasparency\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\ninterface IPaymentSplitter {\\r\\n    event EthPaymentReleased(address account, uint256 amount);\\r\\n    event ERC20PaymentReleased(\\r\\n        IERC20 indexed token,\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of shares held by an account.\\r\\n     */\\r\\n    function totalShares() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of shares held by an account.\\r\\n     */\\r\\n    function shares(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for a payeer is enabled or not\\r\\n     */\\r\\n    function isEnabled(address account) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for a payeer is exists or not\\r\\n     * @param account Payee address\\r\\n     */\\r\\n    function isPayee(address account) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of Ether already released to a payee.\\r\\n     * @param account Payee address\\r\\n     */\\r\\n    function ethReleased(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\r\\n     * IERC20 contract.\\r\\n     * @param token IERC20 The address of the token contract\\r\\n     * @param account address The address which will receive the tokens\\r\\n     */\\r\\n    function erc20Released(IERC20 token, address account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of payee's releasable Ether.\\r\\n     * @param account The address of the payee to query.\\r\\n     */\\r\\n    function releasableEth(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an\\r\\n     * IERC20 contract.\\r\\n     * @param token IERC20 The address of the token contract\\r\\n     * @param account address The address which will receive the tokens\\r\\n     */\\r\\n    function releasableERC20(IERC20 token, address account)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for number of the payee address.\\r\\n     */\\r\\n    function payeeCount() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers available Ether of the contract to all payees based on their shares\\r\\n     */\\r\\n    function releaseEth() external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers available `token` tokens of the contract to all payees based on their shares\\r\\n     */\\r\\n    function releaseERC20(IERC20 token) external;\\r\\n\\r\\n    function totalEthReleased() external view returns (uint256);\\r\\n\\r\\n    function totalERC20Released(IERC20 token) external view returns (uint256);\\r\\n\\r\\n    function totalEthWithdrawn() external view returns (uint256);\\r\\n\\r\\n    function totalERC20Withdrawn(IERC20 token) external view returns (uint256);\\r\\n\\r\\n    function listOfPayees() external view returns (address[] memory);\\r\\n\\r\\n    function maxPayeeCounter() external view returns (uint256);\\r\\n}\\r\\n\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.2\\r\\n\\r\\n// License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.3.2\\r\\n\\r\\n// License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Address.sol@v4.3.2\\r\\n\\r\\n// License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.3.2\\r\\n\\r\\n// License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n// File contracts/PaymentSplitter.sol\\r\\n\\r\\n// License-Identifier: MIT\\r\\n// @author: Developed by Alex and Bunzz.\\r\\n// @descpriton: Payment Splitter module for share revenue or salary with trasparency\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n/**\\r\\n * @title PaymentSplitter\\r\\n * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\\r\\n * that the Ether will be split in this way, since it is handled transparently by the contract.\\r\\n */\\r\\ncontract PaymentSplitter is Ownable, IPaymentSplitter {\\r\\n    uint256 private _totalShares; // Total shares\\r\\n\\r\\n    uint256 private _totalEthReleased; // Total released eth\\r\\n    mapping(IERC20 => uint256) private _totalERC20Released; // Total released erc20\\r\\n\\r\\n    uint256 private _totalEthWithdrawn; // Total withdrawn eth\\r\\n    mapping(IERC20 => uint256) private _totalERC20Withdrawn; // Total withdrawn erc20\\r\\n\\r\\n    bool private _onlyAfterRelease; // checking release flag\\r\\n    uint256 private _releaseableAmount; // releaseable amount\\r\\n\\r\\n    struct PayeeInfo {\\r\\n        uint256 shares; // Shares assigned to the payee\\r\\n        uint256 ethReleased; // Released eth to the payee\\r\\n        mapping(IERC20 => uint256) erc20Released; // Released erc20 to the payee\\r\\n        bool enabled; // Payee status\\r\\n        bool exists; // Payee exists\\r\\n    }\\r\\n    mapping(address => PayeeInfo) private _payeeInfos; // Payee infos\\r\\n\\r\\n    address[] private _payees; // _payees list\\r\\n    uint256 private _enabledPayeeCounter; // enabled payee counter\\r\\n    uint256 private _maxPayeeCounter; // max enabled payee counter\\r\\n\\r\\n    event MaxPayeeCounterUpdated(uint256 prev, uint256 next);\\r\\n    event PayeeAdded(address account, uint256 shares);\\r\\n    event PayeeRemoved(address account);\\r\\n    event PayeeUpdatedShares(\\r\\n        address account,\\r\\n        uint256 beforeShares,\\r\\n        uint256 shares\\r\\n    );\\r\\n    event PayeeUpdatedStatus(address account, bool beforeStatus, bool status);\\r\\n\\r\\n    event EthPaymentWithdrawn(address account, uint256 amount);\\r\\n    event ERC20PaymentWithdrawn(\\r\\n        IERC20 indexed token,\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    modifier onlyAfterRelease() {\\r\\n        require(!_onlyAfterRelease, \\\"PaymentSplitter: releasing\\\");\\r\\n        _onlyAfterRelease = true;\\r\\n        _;\\r\\n        _onlyAfterRelease = false;\\r\\n    }\\r\\n\\r\\n    modifier notEmptyPayee() {\\r\\n        require(_enabledPayeeCounter > 0, \\\"PaymentSplitter: empty payee\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPayee(address _account) {\\r\\n        require(isPayee(_account), \\\"PaymentSplitter: account not added\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        _maxPayeeCounter = 5;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev receive ETH when msg.data is empty\\r\\n     **/\\r\\n    receive() external payable {}\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of shares held by an account.\\r\\n     */\\r\\n    function totalShares() external view override returns (uint256) {\\r\\n        return _totalShares;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param _counter payee counter\\r\\n     * @dev set _maxPayeeCounter\\r\\n     **/\\r\\n    function setMaxPayeeCounter(uint256 _counter)\\r\\n        external\\r\\n        onlyOwner\\r\\n        onlyAfterRelease\\r\\n    {\\r\\n        require(_counter > 0, \\\"PaymentSplitter: counter is 0\\\");\\r\\n        require(_counter <= 10, \\\"PaymentSplitter: max of counter is 10\\\");\\r\\n        uint256 _beforeMaxPayeeCounter = _maxPayeeCounter;\\r\\n        _maxPayeeCounter = _counter;\\r\\n\\r\\n        emit MaxPayeeCounterUpdated(_beforeMaxPayeeCounter, _maxPayeeCounter);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a new payee to the contract.\\r\\n     * @param _account The address of the payee to add.\\r\\n     * @param _shares The number of shares owned by the payee.\\r\\n     */\\r\\n    function addPayee(address _account, uint256 _shares)\\r\\n        external\\r\\n        onlyOwner\\r\\n        onlyAfterRelease\\r\\n    {\\r\\n        require(\\r\\n            !isPayee(_account),\\r\\n            \\\"PaymentSplitter: account is already a payee\\\"\\r\\n        );\\r\\n        require(_shares > 0, \\\"PaymentSplitter: shares are 0\\\");\\r\\n        require(\\r\\n            payeeCount() < _maxPayeeCounter,\\r\\n            \\\"PaymentSplitter: over the max payee counter\\\"\\r\\n        );\\r\\n\\r\\n        PayeeInfo storage payeeInfo = _payeeInfos[_account];\\r\\n        payeeInfo.shares = _shares;\\r\\n        payeeInfo.enabled = true;\\r\\n        payeeInfo.exists = true;\\r\\n        _payees.push(_account);\\r\\n\\r\\n        _totalShares += _shares;\\r\\n\\r\\n        _enabledPayeeCounter++;\\r\\n\\r\\n        emit PayeeAdded(_account, _shares);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove a payee from the contract.\\r\\n     * @param _account The address of the payee to remove.\\r\\n     */\\r\\n    function removePayee(address _account)\\r\\n        external\\r\\n        onlyOwner\\r\\n        onlyAfterRelease\\r\\n        onlyPayee(_account)\\r\\n    {\\r\\n        if (_payeeInfos[_account].enabled) _enabledPayeeCounter--;\\r\\n\\r\\n        _totalShares -= shares(_account);\\r\\n        delete _payeeInfos[_account];\\r\\n\\r\\n        for (uint256 i = 0; i < _payees.length; i++) {\\r\\n            if (_payees[i] == _account) {\\r\\n                _payees[i] = _payees[_payees.length - 1];\\r\\n                _payees.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit PayeeRemoved(_account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update a payee shares.\\r\\n     * @param _account The address of the payee to update.\\r\\n     * @param _shares The number of shares owned by the payee.\\r\\n     */\\r\\n    function updatePayeeShares(address _account, uint256 _shares)\\r\\n        external\\r\\n        onlyOwner\\r\\n        onlyAfterRelease\\r\\n        onlyPayee(_account)\\r\\n    {\\r\\n        require(\\r\\n            _shares > 0,\\r\\n            \\\"PaymentSplitter: cannot update to 0, please remove the Payee instead\\\"\\r\\n        );\\r\\n\\r\\n        PayeeInfo storage payeeInfo = _payeeInfos[_account];\\r\\n        uint256 _beforeShares = payeeInfo.shares;\\r\\n        payeeInfo.shares = _shares;\\r\\n\\r\\n        _totalShares -= _beforeShares;\\r\\n        _totalShares += _shares;\\r\\n\\r\\n        emit PayeeUpdatedShares(_account, _beforeShares, _shares);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update a payee status.\\r\\n     * @param _account The address of the payee to update.\\r\\n     * @param _status The new status of the payee.\\r\\n     */\\r\\n    function updatePayeeStatus(address _account, bool _status)\\r\\n        external\\r\\n        onlyOwner\\r\\n        onlyAfterRelease\\r\\n        onlyPayee(_account)\\r\\n    {\\r\\n        PayeeInfo storage payeeInfo = _payeeInfos[_account];\\r\\n        bool _beforeStatus = payeeInfo.enabled;\\r\\n\\r\\n        require(\\r\\n            _beforeStatus != _status,\\r\\n            \\\"PaymentSplliter: status is the same with before status\\\"\\r\\n        );\\r\\n\\r\\n        if (_status) {\\r\\n            _enabledPayeeCounter++;\\r\\n        } else {\\r\\n            _enabledPayeeCounter--;\\r\\n        }\\r\\n\\r\\n        payeeInfo.enabled = _status;\\r\\n\\r\\n        emit PayeeUpdatedStatus(_account, _beforeStatus, _status);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers available Ether of the contract to all _payees based on their shares\\r\\n     */\\r\\n    function releaseEth() external override onlyAfterRelease notEmptyPayee {\\r\\n        _releaseableAmount = address(this).balance;\\r\\n\\r\\n        for (uint256 i = 0; i < _payees.length; i++) {\\r\\n            if (isEnabled(_payees[i])) {\\r\\n                releaseEth(payable(_payees[i]));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers available `token` tokens of the contract to all _payees based on their shares\\r\\n     */\\r\\n    function releaseERC20(IERC20 token)\\r\\n        external\\r\\n        override\\r\\n        onlyAfterRelease\\r\\n        notEmptyPayee\\r\\n    {\\r\\n        _releaseableAmount = token.balanceOf(address(this));\\r\\n\\r\\n        for (uint256 i = 0; i < _payees.length; i++) {\\r\\n            if (isEnabled(_payees[i])) {\\r\\n                releaseERC20(token, _payees[i]);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows admin to withdraw Eth to a receiver without shares.\\r\\n     * @param receiver The address of the receiver.\\r\\n     * @param amount The amount of Eth to withdraw.\\r\\n     */\\r\\n    function withdrawEth(address payable receiver, uint256 amount)\\r\\n        external\\r\\n        onlyOwner\\r\\n        onlyAfterRelease\\r\\n    {\\r\\n        require(\\r\\n            receiver != address(0),\\r\\n            \\\"PaymentSplitter: receiver is the zero address\\\"\\r\\n        );\\r\\n        require(amount > 0, \\\"PaymentSplitter: amount is the zero\\\");\\r\\n        require(\\r\\n            address(this).balance >= amount,\\r\\n            \\\"PaymentSplitter: not enough balance\\\"\\r\\n        );\\r\\n\\r\\n        Address.sendValue(receiver, amount);\\r\\n        _totalEthWithdrawn += amount;\\r\\n\\r\\n        emit EthPaymentWithdrawn(receiver, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows admin to withdraw tokens to a receiver without shares.\\r\\n     * @param token IERC20 The address of the token contract\\r\\n     * @param receiver address The address which will receive the tokens\\r\\n     * @param amount uint256 The amount of tokens to withdraw\\r\\n     */\\r\\n    function withdrawERC20(\\r\\n        IERC20 token,\\r\\n        address receiver,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner onlyAfterRelease {\\r\\n        require(\\r\\n            receiver != address(0),\\r\\n            \\\"PaymentSplitter: receiver is the zero address\\\"\\r\\n        );\\r\\n        require(amount > 0, \\\"PaymentSplitter: amount is the zero\\\");\\r\\n        require(\\r\\n            token.balanceOf(address(this)) >= amount,\\r\\n            \\\"PaymentSplitter: not enough balance\\\"\\r\\n        );\\r\\n\\r\\n        SafeERC20.safeTransfer(token, receiver, amount);\\r\\n        _totalERC20Withdrawn[token] += amount;\\r\\n\\r\\n        emit ERC20PaymentWithdrawn(token, receiver, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the total ETH released on the contract\\r\\n     */\\r\\n    function totalEthReleased() external view override returns (uint256) {\\r\\n        return _totalEthReleased;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the total ERC20 released on the contract\\r\\n     */\\r\\n    function totalERC20Released(IERC20 token)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _totalERC20Released[token];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the total ETH withdrawn on the contract\\r\\n     */\\r\\n    function totalEthWithdrawn() external view override returns (uint256) {\\r\\n        return _totalEthWithdrawn;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the total ERC20 released on the contract\\r\\n     */\\r\\n    function totalERC20Withdrawn(IERC20 token)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _totalERC20Withdrawn[token];\\r\\n    }\\r\\n\\r\\n    function listOfPayees() external view override returns (address[] memory) {\\r\\n        return _payees;\\r\\n    }\\r\\n\\r\\n    function maxPayeeCounter() external view override returns (uint256) {\\r\\n        return _maxPayeeCounter;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of shares held by an account.\\r\\n     */\\r\\n    function shares(address account) public view override returns (uint256) {\\r\\n        return _payeeInfos[account].shares;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for a payeer is enabled or not\\r\\n     */\\r\\n    function isEnabled(address account) public view override returns (bool) {\\r\\n        return _payeeInfos[account].enabled;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for a payeer is exists or not\\r\\n     * @param account Payee address\\r\\n     */\\r\\n    function isPayee(address account) public view override returns (bool) {\\r\\n        return _payeeInfos[account].exists;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of Ether already released to a payee.\\r\\n     * @param account Payee address\\r\\n     */\\r\\n    function ethReleased(address account)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _payeeInfos[account].ethReleased;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of `token` tokens already released to a payee. `token` should be the address of an\\r\\n     * IERC20 contract.\\r\\n     * @param token IERC20 The address of the token contract\\r\\n     * @param account address The address which will receive the tokens\\r\\n     */\\r\\n    function erc20Released(IERC20 token, address account)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _payeeInfos[account].erc20Released[token];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for number of the payee address.\\r\\n     */\\r\\n    function payeeCount() public view override returns (uint256) {\\r\\n        return _payees.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of payee's releasable Ether.\\r\\n     * @param account The address of the payee to query.\\r\\n     */\\r\\n    function releasableEth(address account)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        onlyPayee(account)\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 _totalReleasableAmount = _onlyAfterRelease\\r\\n            ? _releaseableAmount\\r\\n            : address(this).balance;\\r\\n\\r\\n        if (_totalShares == 0) return 0;\\r\\n\\r\\n        uint256 _amount = (_totalReleasableAmount * shares(account)) /\\r\\n            _totalShares;\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Getter for the amount of payee's releasable `token` tokens. `token` should be the address of an\\r\\n     * IERC20 contract.\\r\\n     * @param token IERC20 The address of the token contract\\r\\n     * @param account address The address which will receive the tokens\\r\\n     */\\r\\n    function releasableERC20(IERC20 token, address account)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        onlyPayee(account)\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 _totalReleasableAmount = _onlyAfterRelease\\r\\n            ? _releaseableAmount\\r\\n            : token.balanceOf(address(this));\\r\\n\\r\\n        if (_totalShares == 0) return 0;\\r\\n\\r\\n        uint256 _amount = (_totalReleasableAmount * shares(account)) /\\r\\n            _totalShares;\\r\\n        return _amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers available Ether of the contract to a payee.\\r\\n     * @param account The address to release Ether to.\\r\\n     */\\r\\n    function releaseEth(address payable account) private {\\r\\n        require(isEnabled(account), \\\"PaymentSplitter: account not enabled\\\");\\r\\n\\r\\n        uint256 payment = releasableEth(account);\\r\\n\\r\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\r\\n\\r\\n        _payeeInfos[account].ethReleased += payment;\\r\\n        _totalEthReleased += payment;\\r\\n\\r\\n        Address.sendValue(account, payment);\\r\\n        emit EthPaymentReleased(account, payment);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers available `token` tokens of the contract to a payee.\\r\\n     * @param token IERC20 The address of the token contract\\r\\n     * @param account address The address which will receive the tokens\\r\\n     */\\r\\n    function releaseERC20(IERC20 token, address account) private {\\r\\n        require(isEnabled(account), \\\"PaymentSplitter: account not enabled\\\");\\r\\n\\r\\n        uint256 payment = releasableERC20(token, account);\\r\\n\\r\\n        require(payment != 0, \\\"PaymentSplitter: account is not due payment\\\");\\r\\n\\r\\n        _payeeInfos[account].erc20Released[token] += payment;\\r\\n        _totalERC20Released[token] += payment;\\r\\n\\r\\n        SafeERC20.safeTransfer(token, account, payment);\\r\\n        emit ERC20PaymentReleased(token, account, payment);\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20PaymentWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthPaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthPaymentWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prev\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"next\",\"type\":\"uint256\"}],\"name\":\"MaxPayeeCounterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PayeeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beforeShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PayeeUpdatedShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"beforeStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"PayeeUpdatedStatus\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"addPayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"erc20Released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ethReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPayee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listOfPayees\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPayeeCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payeeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releasableERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"releasableEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"releaseERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removePayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_counter\",\"type\":\"uint256\"}],\"name\":\"setMaxPayeeCounter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalERC20Released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalERC20Withdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEthReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEthWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"updatePayeeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updatePayeeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PaymentSplitter", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "istanbul", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}