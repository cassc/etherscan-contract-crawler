{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/GoldDigger.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\"; \\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract GoldDigger is Ownable, ReentrancyGuard {\\r\\n\\r\\n    uint256 private INIT_SECOND_PERCENT = 320600;\\r\\n    uint256 public INIT_MIN_DEPOSIT = 5; // 0.05 bnb\\r\\n    uint128 private INIT_REF_INCREASED = 940;\\r\\n    uint256 private INIT_REF_LIMIT = 116000;\\r\\n    uint256[2] private AFFILIATE_PERCENTS_pickaxe = [60, 15];\\r\\n    uint256[2] private AFFILIATE_PERCENTS_BNB = [40, 10];\\r\\n\\r\\n\\r\\n\\r\\n    bool public gameStarted;\\r\\n    uint256 public timestampGameStarted;\\r\\n\\r\\n    address public defaultRef = 0xaAb5cf19B0D0002221C5723c5616a09F434fc036;\\r\\n    uint256 public totalInvested;\\r\\n    uint256 public totalInvestors;\\r\\n\\r\\n    struct User {\\r\\n        uint256 deposit;\\r\\n        uint256 reinvested;\\r\\n        uint256 earned;\\r\\n        uint256 withdrawn;\\r\\n        uint256 gold;\\r\\n        uint256 pickaxe;\\r\\n        uint256 timestamp;\\r\\n        address partner;\\r\\n        uint256 refsTotal;\\r\\n        uint256 refs1level;\\r\\n        uint256 refearnBNB;\\r\\n        uint256 refearnpickaxe; \\r\\n        uint256 percentage;\\r\\n        uint256 leaderBonus;\\r\\n\\r\\n    }\\r\\n    \\r\\n    mapping(address => User) public user;\\r\\n\\r\\n\\r\\n    constructor() {\\r\\n        renounceOwnership();\\r\\n    }\\r\\n\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    event ChangeUser(address indexed user, address indexed partner, uint256 amount);\\r\\n\\r\\n    function _calcInitMaxDeposit() public view returns(uint) {\\r\\n        if(block.timestamp >= timestampGameStarted && block.timestamp <= timestampGameStarted + 7 days  ) return 500;\\r\\n        if(block.timestamp >= timestampGameStarted && block.timestamp <= timestampGameStarted + 14 days  ) return 1000;\\r\\n        if(block.timestamp >= timestampGameStarted && block.timestamp <= timestampGameStarted + 21 days  ) return 2000;\\r\\n        if(block.timestamp >= timestampGameStarted && block.timestamp <= timestampGameStarted + 28 days  ) return 100000000;\\r\\n    }\\r\\n\\r\\n    function HireMiner(address partner) external payable nonReentrant {\\r\\n        uint amount = msg.value;\\r\\n        require(_msgSender() == tx.origin, \\\"Function can only be called by a user account\\\");\\r\\n        require(amount >= (INIT_MIN_DEPOSIT * 10000000000000000), \\\"Min deposit is 0.05 bnb\\\");\\r\\n        if(!gameStarted) {\\r\\n            timestampGameStarted = block.timestamp;\\r\\n            gameStarted = true;\\r\\n        }\\r\\n        require((user[_msgSender()].deposit + amount) < (_calcInitMaxDeposit() * 10000000000000000), \\\"Max deposit limit has been exceeded\\\");\\r\\n    \\r\\n        _updateprePayment(_msgSender());\\r\\n        totalInvested += amount;\\r\\n        totalInvestors += 1;\\r\\n        user[_msgSender()].deposit += amount;\\r\\n\\r\\n        if (user[_msgSender()].partner == address(0)) {\\r\\n            require(partner != _msgSender(), \\\"Cannot set your own address as partner\\\");\\r\\n            address ref = partner;\\r\\n            user[ref].refs1level++;\\r\\n            user[ref].refsTotal++;\\r\\n            user[user[ref].partner].refsTotal++;\\r\\n            user[_msgSender()].partner = ref;\\r\\n            user[_msgSender()].percentage += INIT_SECOND_PERCENT;\\r\\n            _updatePercentage(ref);\\r\\n        }\\r\\n\\r\\n        emit ChangeUser(_msgSender(), user[_msgSender()].partner, user[_msgSender()].deposit);\\r\\n\\r\\n        // REF\\r\\n        _traverseTree(user[_msgSender()].partner, amount);\\r\\n        \\r\\n        // OWNER FEE\\r\\n        uint256 feepickaxe = (amount * 3) / 100 * 10;\\r\\n        user[defaultRef].pickaxe += feepickaxe;\\r\\n        uint256 feeBNB = (amount * 5) / 100;\\r\\n         (bool sent,) = defaultRef.call{value: feeBNB}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n        \\r\\n        \\r\\n    }\\r\\n    function Reinvest(uint256 amount) external nonReentrant {\\r\\n        require(_msgSender() == tx.origin, \\\"Function can only be called by a user account\\\");\\r\\n        _updateprePayment(_msgSender());\\r\\n        require(amount <= user[_msgSender()].pickaxe, \\\"Insufficient funds\\\");\\r\\n        user[_msgSender()].pickaxe -= amount;\\r\\n        user[_msgSender()].deposit += amount / 10;\\r\\n        user[_msgSender()].reinvested += amount / 10;\\r\\n        emit ChangeUser(_msgSender(), user[_msgSender()].partner, user[_msgSender()].deposit);\\r\\n    }\\r\\n\\r\\n    function ReinvestGold(uint256 amount) external nonReentrant {\\r\\n        require(_msgSender() == tx.origin, \\\"Function can only be called by a user account\\\");\\r\\n        _updateprePayment(_msgSender());\\r\\n        require(amount <= user[_msgSender()].gold, \\\"Insufficient funds\\\");\\r\\n        user[_msgSender()].gold -= amount;\\r\\n        user[_msgSender()].deposit += amount;\\r\\n        user[_msgSender()].reinvested += amount;\\r\\n        emit ChangeUser(_msgSender(), user[_msgSender()].partner, user[_msgSender()].deposit);\\r\\n    }\\r\\n\\r\\n    function Withdraw(uint256 amount) external nonReentrant {\\r\\n        require(_msgSender() == tx.origin, \\\"Function can only be called by a user account\\\");\\r\\n        _updateprePayment(_msgSender());\\r\\n        require(amount <= user[_msgSender()].gold, \\\"Insufficient funds\\\");\\r\\n        user[_msgSender()].gold -= amount;\\r\\n        user[_msgSender()].withdrawn += amount;\\r\\n         (bool sent,) = _msgSender().call{value: amount}(\\\"\\\");\\r\\n        require(sent, \\\"Failed to send Ether\\\");\\r\\n    }\\r\\n\\r\\n    function checkReward(address account) public view returns(uint256) {\\r\\n        uint256 RewardTime = block.timestamp - user[account].timestamp;\\r\\n        return (((user[account].deposit / 100 * user[account].percentage) / 10000000000) * RewardTime);\\r\\n\\r\\n    }\\r\\n    \\r\\n    function _updateprePayment(address account) internal {\\r\\n        uint256 pending = checkReward(_msgSender());\\r\\n        user[account].timestamp = block.timestamp;\\r\\n        user[account].gold += pending;\\r\\n        user[account].earned += pending;\\r\\n    }\\r\\n\\r\\n    function _traverseTree(address account, uint256 value) internal {\\r\\n        if (value != 0) {\\r\\n            for (uint8 i; i < 2; i++) {\\r\\n\\r\\n                uint256 feeBNB = ((value * AFFILIATE_PERCENTS_BNB[i]) / 1000);\\r\\n                uint256 feepickaxe = ((value * AFFILIATE_PERCENTS_pickaxe[i]) / 1000) * 10;\\r\\n\\r\\n                user[account].gold += feeBNB;\\r\\n                user[account].pickaxe += feepickaxe;\\r\\n\\r\\n                user[account].refearnBNB += feeBNB;\\r\\n                user[account].refearnpickaxe += feepickaxe;\\r\\n\\r\\n                account = user[account].partner;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _updatePercentage(address account) internal {\\r\\n        if((user[account].leaderBonus + INIT_REF_INCREASED) < INIT_REF_LIMIT) {\\r\\n            \\r\\n                user[account].percentage += INIT_REF_INCREASED;\\r\\n                user[account].leaderBonus += INIT_REF_INCREASED;\\r\\n            \\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ChangeUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"}],\"name\":\"HireMiner\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INIT_MIN_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReinvestGold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_calcInitMaxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestampGameStarted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pickaxe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refsTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refs1level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refearnBNB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refearnpickaxe\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leaderBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GoldDigger", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}