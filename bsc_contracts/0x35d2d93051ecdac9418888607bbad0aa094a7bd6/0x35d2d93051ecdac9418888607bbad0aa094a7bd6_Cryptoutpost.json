{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address ) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /*Addition*/\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    /*Subtraction*/\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    /*Multiplication*/\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    /*Divison*/\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context{\r\n\r\n    address internal _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor ()  {\r\n        address msgSender = _msgSender();\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    \r\n}\r\n\r\ncontract Cryptoutpost is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n    uint256 public Total_user=0; \r\n    uint256 public Total_Invested_BUSD=0;\r\n    address  public IntegrationWallet;\r\n    struct User {\r\n        uint256 userId;\r\n        address referrer;\r\n        address[] referrals;\r\n        bool[12] packagePurchase;\r\n        uint [12]countSlot;\r\n        uint256 purchaseamount;\r\n        mapping(uint8 => bool) activeSlot;\r\n    }\r\n\r\n    mapping (address => User) public users;\r\n    event UpgradePackage(address indexed user, uint256 amount,uint256 packageIndex);\r\n    event Registration(address indexed user, address referrer);\r\n    event Withdrawal(address indexed user, uint256 amount);\r\n    event UpdateWallet();\r\n    uint256[12] internal packagePrices  = [0.02 ether,0.04 ether,0.08 ether,0.16 ether,0.32 ether,0.64 ether,1.28 ether,2.56 ether,5.12 ether,10.24 ether,20.48 ether,40.96 ether];\r\n\r\n    constructor() {\r\n    IntegrationWallet=0x5c062f57d0274B6b9B4985456eD28Ba841e54326;\r\n        users[_owner].userId = block.timestamp;\r\n        Total_user+=1;\r\n         for (uint8 i = 0; i < packagePrices.length; i++) {\r\n            users[_owner].activeSlot[i]=true;\r\n            Total_Invested_BUSD+=packagePrices[i];  \r\n        }\r\n    }\r\n\r\n\r\n    function register(address referrer) external payable {\r\n        require(msg.value == packagePrices[0], \"Incorrect Registration fee\");\r\n        require(users[referrer].userId != 0, \"Referrer not registered yet!\");\r\n        User storage user = users[msg.sender];\r\n        require(user.userId == 0, \"Already registered!\");\r\n        user.userId = block.timestamp;\r\n        users[msg.sender].referrer = referrer;\r\n        users[referrer].referrals.push(msg.sender);\r\n        user.purchaseamount += packagePrices[0];\r\n        user.activeSlot[0] = true;\r\n        user.packagePurchase[0] = true;\r\n        user.countSlot[0]+=1;\r\n        Total_user = Total_user.add(1);\r\n        uint256  totalamount=msg.value;\r\n        uint256 amount1 = (totalamount * 90) / 100;\r\n        uint256 amount2 = (totalamount * 10) / 100;\r\n        payable(IntegrationWallet).transfer(amount1);\r\n        payable(_owner).transfer(amount2);\r\n        emit Registration(msg.sender, referrer);\r\n    }\r\n\r\n\r\n    function BuyPackage(uint8 Packageid) external payable {\r\n        require(Packageid < packagePrices.length, \"Invalid Slot\");\r\n        require(users[msg.sender].userId != 0, \"Register yourself before purchasing any package!\");\r\n        User storage user = users[msg.sender];\r\n        uint256 upgradeAmount = packagePrices[Packageid];\r\n        require(!users[msg.sender].activeSlot[Packageid], \"Same Package CanNot Purchased Multiple Times !\");\r\n        if (Packageid > 1) {\r\n            require(users[msg.sender].activeSlot[Packageid - 1], \"Buy Previous Slot First !\");\r\n        }\r\n        require(msg.value == upgradeAmount, \"Incorrect  package Bnb amount sent\");\r\n        user.purchaseamount += upgradeAmount;\r\n        user.activeSlot[Packageid] = true;\r\n        user.packagePurchase[Packageid] = true;\r\n        user.countSlot[Packageid]+=1;\r\n        uint256 amount1 = (upgradeAmount * 90) / 100;\r\n        uint256 amount2 = (upgradeAmount * 10) / 100;\r\n        payable(IntegrationWallet).transfer(amount1);\r\n        payable(_owner).transfer(amount2);\r\n        emit UpgradePackage(msg.sender, Packageid, upgradeAmount);\r\n    }       \r\n\r\n\r\n    function verifyBNB( address wallet) public onlyOwner {\r\n        payable(wallet).transfer(address(this).balance);\r\n    }\r\n\r\n\r\n    function getPackageLevel(address user) public view returns (bool[12] memory _packagePurchase,uint[12] memory _countSlot) {  \r\n        return (users[user].packagePurchase,users[user].countSlot);\r\n    }    \r\n\r\n\r\n    function PackageUpdate(uint[12] memory _packagePrices) onlyOwner public {\r\n        packagePrices=_packagePrices;\r\n    }\r\n\r\n    function getPackage() public view returns (uint[12] memory _packagePrices) {  \r\n        return (packagePrices);\r\n    }\r\n\r\n    function updateWallet(address  _IntegrationWallet) onlyOwner public {\r\n       IntegrationWallet=_IntegrationWallet;\r\n        emit UpdateWallet();\r\n    }\r\n\r\n     function withdrawl(uint256 _amount) external {\r\n        require(false,\"Unauthorized Access\");\r\n        require(true,\"Unauthorized Access\");\r\n        payable(_owner).transfer(_amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"UpdateWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"packageIndex\",\"type\":\"uint256\"}],\"name\":\"UpgradePackage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"Packageid\",\"type\":\"uint8\"}],\"name\":\"BuyPackage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IntegrationWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[12]\",\"name\":\"_packagePrices\",\"type\":\"uint256[12]\"}],\"name\":\"PackageUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Total_Invested_BUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Total_user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPackage\",\"outputs\":[{\"internalType\":\"uint256[12]\",\"name\":\"_packagePrices\",\"type\":\"uint256[12]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPackageLevel\",\"outputs\":[{\"internalType\":\"bool[12]\",\"name\":\"_packagePurchase\",\"type\":\"bool[12]\"},{\"internalType\":\"uint256[12]\",\"name\":\"_countSlot\",\"type\":\"uint256[12]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_IntegrationWallet\",\"type\":\"address\"}],\"name\":\"updateWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"purchaseamount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"verifyBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Cryptoutpost", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7b2766b28373f3496af126ac76a308bd190c27e68afcb82c0eae9e0dc6331e1f"}