{"SourceCode": "pragma solidity 0.8.7;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\ncontract UbxsStake is Ownable {\r\n    struct Action {\r\n        // 0 for invest, 1 for reinvest , 2 for withdraw\r\n        uint8 types;\r\n        uint256 amount;\r\n        uint256 date;\r\n    }\r\n\r\n    struct Plan {\r\n        uint256 investingDays;\r\n        uint256 investingNominator;\r\n    }\r\n    struct Deposit {\r\n        uint256 amount;\r\n        uint256 start;\r\n        // 0 for invest , 1 for reinvest\r\n        uint8 depositType;\r\n        Plan plan;\r\n    }\r\n\r\n    struct User {\r\n        address referer;\r\n        address[] referals;\r\n        uint256 refBonus;\r\n        uint256 totalRefBonus;\r\n        Deposit[] deposits;\r\n        uint256 checkpoint;\r\n        Action[] actions;\r\n        uint256 withdrawn;\r\n    }\r\n\r\n    IERC20 public immutable ubxs;\r\n    // ubxs inside the contract\r\n    uint256 public ubxsAmount = 0;\r\n\r\n    uint256 public minUbxsAmount = 500e6;\r\n\r\n    //total amount of invested ubxs in this contract\r\n    uint256 public totalStaked = 0;\r\n\r\n    // true = invest can be done , false = can be not done\r\n    bool private investStatus = true;\r\n\r\n    // true = reinvest can be done , false = can be not done\r\n    bool private reinvestStatus = true;\r\n\r\n    Plan public investPlan =\r\n        Plan({ investingDays: 180, investingNominator: 50 });\r\n\r\n    Plan public reinvestPlan =\r\n        Plan({ investingDays: 180, investingNominator: 75 });\r\n\r\n    uint256 public constant DENOMINATOR = 10000;\r\n\r\n    mapping(address => bool) public isBlacklist; //\u00a0no ref gain\r\n    mapping(string => address) public aliases;\r\n    mapping(address => string) public aliasAddresses;\r\n    mapping(address => User) public users;\r\n\r\n    // divide by 1000, total %30 goes to referrers\r\n    // solhint-disable-next-line\r\n    uint8[10] public REFERENCE_INCOME_PERCENTAGES = [\r\n        100,\r\n        75,\r\n        50,\r\n        25,\r\n        10,\r\n        10,\r\n        10,\r\n        10,\r\n        5,\r\n        5\r\n    ];\r\n\r\n    event Invested(\r\n        address indexed user,\r\n        address indexed referer,\r\n        uint256 amount\r\n    );\r\n\r\n    event RefGained(\r\n        address indexed user,\r\n        address indexed referral,\r\n        uint256 amount\r\n    );\r\n\r\n    event Reinvested(address indexed user, uint256 amount);\r\n\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n\r\n    error AliasTaken();\r\n    error AlreadyHaveAlias();\r\n    error InvalidReferer();\r\n    error NoRemaingUbxs();\r\n    error LessThenMinAmount();\r\n    error NoInvestment();\r\n    error InvestClosedByAdmin();\r\n    error ReinvestClosedByAdmin();\r\n\r\n    constructor(address ubxsAddress) {\r\n        ubxs = IERC20(ubxsAddress);\r\n        User storage user = users[msg.sender];\r\n        user.referer = address(this);\r\n        isBlacklist[address(this)] = true;\r\n        isBlacklist[msg.sender] = true;\r\n        aliases[\"bixos\"] = address(this);\r\n        aliases[\"ubxs\"] = address(this);\r\n        IERC20(ubxsAddress).approve(msg.sender, type(uint256).max);\r\n    }\r\n\r\n    function setAlias(string memory newAlias) external {\r\n        //check user has staked or not\r\n        if (users[msg.sender].referer == address(0)) revert NoInvestment();\r\n\r\n        //check alias is taken\r\n        if (aliases[newAlias] != address(0)) revert AliasTaken();\r\n\r\n        //check address has aliasses\r\n        if (bytes(aliasAddresses[msg.sender]).length != 0)\r\n            revert AlreadyHaveAlias();\r\n\r\n        //set aliass\r\n        aliasAddresses[msg.sender] = newAlias;\r\n        aliases[newAlias] = msg.sender;\r\n    }\r\n\r\n    function calculateReward(Deposit memory deposit)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return ((deposit.plan.investingDays *\r\n            deposit.plan.investingNominator *\r\n            deposit.amount) / DENOMINATOR);\r\n    }\r\n\r\n    // solhint-disable not-rely-on-time\r\n\r\n    function investTo(\r\n        address to,\r\n        address refererAddress,\r\n        uint256 amount\r\n    ) private {\r\n        if (!investStatus) revert InvestClosedByAdmin();\r\n\r\n        if (to == refererAddress) revert InvalidReferer();\r\n\r\n        if (amount < minUbxsAmount) revert LessThenMinAmount();\r\n\r\n        User storage user = users[to];\r\n\r\n        if (user.referer == address(0)) {\r\n            User storage referer = users[refererAddress];\r\n            if (referer.referer == address(0)) revert InvalidReferer();\r\n            else {\r\n                user.referer = refererAddress;\r\n                referer.referals.push(to);\r\n            }\r\n        }\r\n\r\n        Deposit memory deposit = Deposit({\r\n            amount: amount,\r\n            start: block.timestamp,\r\n            plan: investPlan,\r\n            depositType: 0\r\n        });\r\n\r\n        user.actions.push(Action(0, amount, block.timestamp));\r\n        user.deposits.push(deposit);\r\n        totalStaked += amount;\r\n\r\n        uint256 totalBonus = 0;\r\n        uint256 counter = 0;\r\n        address tempAddress = user.referer;\r\n        User storage ref = users[tempAddress];\r\n        do {\r\n            if (!isBlacklist[tempAddress]) {\r\n                uint8 percent = REFERENCE_INCOME_PERCENTAGES[counter++];\r\n                uint256 bonus = (amount * percent) / 1000;\r\n                ref.refBonus += bonus;\r\n                ref.totalRefBonus += bonus;\r\n                totalBonus += bonus;\r\n                emit RefGained(tempAddress, to, bonus);\r\n            }\r\n\r\n            tempAddress = ref.referer;\r\n            ref = users[tempAddress];\r\n        } while (ref.referer != address(0) && counter < 10);\r\n\r\n        uint256 amountToBeReduced = calculateReward(deposit) + totalBonus;\r\n        if (ubxsAmount < amountToBeReduced) revert NoRemaingUbxs();\r\n\r\n        ubxsAmount -= amountToBeReduced;\r\n        emit Invested(to, user.referer, amount);\r\n        bool result = ubxs.transferFrom(msg.sender, address(this), amount);\r\n        require(result, \"Tx Error\");\r\n    }\r\n\r\n    function investFor(address to, uint256 amount) external onlyOwner {\r\n        investTo(to, msg.sender, amount);\r\n    }\r\n\r\n    function invest(address refererAddress, uint256 amount) external {\r\n        investTo(msg.sender, refererAddress, amount);\r\n    }\r\n\r\n    function getUserDividends(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Deposit[] memory deposits = users[userAddress].deposits;\r\n        uint256 checkpoint = users[userAddress].checkpoint;\r\n        uint256 len = deposits.length;\r\n        uint256 totalDividen;\r\n\r\n        for (uint256 i = 0; i < len; i++) {\r\n            uint256 endTime = deposits[i].start +\r\n                deposits[i].plan.investingDays *\r\n                1 days;\r\n\r\n            if (checkpoint > endTime) continue;\r\n\r\n            uint256 withdrawTime = block.timestamp;\r\n\r\n            if (block.timestamp >= endTime) {\r\n                // if staking period is completed ,user cant get stake bonus\r\n                withdrawTime = endTime;\r\n                // add his stake to bonus ,if user has not been withdrawed stake\r\n                if (checkpoint < endTime) totalDividen += deposits[i].amount;\r\n            }\r\n            uint256 passedTime;\r\n            deposits[i].start > checkpoint\r\n                ? passedTime = withdrawTime - deposits[i].start\r\n                : passedTime = withdrawTime - checkpoint;\r\n\r\n            uint256 reward = (deposits[i].plan.investingNominator *\r\n                deposits[i].amount *\r\n                passedTime) / (DENOMINATOR * 1 days);\r\n\r\n            totalDividen += reward;\r\n        }\r\n        return totalDividen;\r\n    }\r\n\r\n    function withdraw() external {\r\n        User storage user = users[msg.sender];\r\n\r\n        uint256 dividen = getUserDividends(msg.sender);\r\n        uint256 totalWithdrawable = dividen + user.refBonus;\r\n\r\n        users[msg.sender].actions.push(\r\n            Action(2, totalWithdrawable, block.timestamp)\r\n        );\r\n        users[msg.sender].checkpoint = block.timestamp;\r\n        user.refBonus = 0;\r\n        user.withdrawn += totalWithdrawable;\r\n\r\n        emit Withdrawn(msg.sender, totalWithdrawable);\r\n        bool result = ubxs.transfer(msg.sender, totalWithdrawable);\r\n        require(result, \"Tx Error\");\r\n    }\r\n\r\n    // solhint-enable not-rely-on-time\r\n\r\n    function reinvest() external {\r\n        if (!reinvestStatus) revert ReinvestClosedByAdmin();\r\n\r\n        User storage user = users[msg.sender];\r\n\r\n        uint256 dividen = getUserDividends(msg.sender);\r\n        uint256 totalWithdrawable = dividen + user.refBonus;\r\n        user.withdrawn += totalWithdrawable;\r\n\r\n        // solhint-disable not-rely-on-time\r\n        Deposit memory deposit = Deposit({\r\n            amount: totalWithdrawable,\r\n            start: block.timestamp,\r\n            plan: reinvestPlan,\r\n            depositType: 1\r\n        });\r\n\r\n        user.actions.push(Action(1, totalWithdrawable, block.timestamp));\r\n        user.checkpoint = block.timestamp;\r\n        // solhint-enable not-rely-on-time\r\n\r\n        user.deposits.push(deposit);\r\n        totalStaked += totalWithdrawable;\r\n        user.refBonus = 0;\r\n\r\n        uint256 amountToBeReduced = calculateReward(deposit);\r\n\r\n        if (ubxsAmount < amountToBeReduced) revert NoRemaingUbxs();\r\n\r\n        ubxsAmount -= amountToBeReduced;\r\n        emit Reinvested(msg.sender, totalWithdrawable);\r\n    }\r\n\r\n    function getUserActions(address userAddress)\r\n        external\r\n        view\r\n        returns (\r\n            uint8[] memory,\r\n            uint256[] memory,\r\n            uint256[] memory\r\n        )\r\n    {\r\n        Action[] memory actions = users[userAddress].actions;\r\n        uint256 len = actions.length;\r\n        uint8[] memory types = new uint8[](len);\r\n        uint256[] memory amount = new uint256[](len);\r\n        uint256[] memory date = new uint256[](len);\r\n\r\n        for (uint256 i = 0; i < len; i++) {\r\n            types[i] = actions[i].types;\r\n            amount[i] = actions[i].amount;\r\n            date[i] = actions[i].date;\r\n        }\r\n\r\n        return (types, amount, date);\r\n    }\r\n\r\n    function getUserActionLength(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].actions.length;\r\n    }\r\n\r\n    function getUserDeposits(address userAddress)\r\n        public\r\n        view\r\n        returns (Deposit[] memory)\r\n    {\r\n        return users[userAddress].deposits;\r\n    }\r\n\r\n    function getUserReferals(address userAddress)\r\n        public\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return users[userAddress].referals;\r\n    }\r\n\r\n    function getUserAmountOfDeposits(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].deposits.length;\r\n    }\r\n\r\n    function getUserTotalDeposits(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        Deposit[] memory deposits = users[userAddress].deposits;\r\n        uint256 len = deposits.length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            amount = amount + deposits[i].amount;\r\n        }\r\n    }\r\n\r\n    function getUserReferralBonus(address userAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].refBonus;\r\n    }\r\n\r\n    function getUserTotalReferralBonus(address userAddress)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].totalRefBonus;\r\n    }\r\n\r\n    function getUserAvailable(address userAddress)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            getUserReferralBonus(userAddress) + getUserDividends(userAddress);\r\n    }\r\n\r\n    function getUserTotalWithdrawn(address userAddress)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return users[userAddress].withdrawn;\r\n    }\r\n\r\n    function getRefCount(address userAddress) external view returns (uint256) {\r\n        return users[userAddress].referals.length;\r\n    }\r\n\r\n    function addToBlacklist(address userAddress) external onlyOwner {\r\n        isBlacklist[userAddress] = true;\r\n    }\r\n\r\n    function isUserValid(address userAddress) external view returns (bool) {\r\n        return users[userAddress].referer != address(0);\r\n    }\r\n\r\n    function addUbxsToContract(uint256 amount) external onlyOwner {\r\n        ubxsAmount += amount;\r\n        bool result = ubxs.transferFrom(msg.sender, address(this), amount);\r\n        require(result, \"Tx Error\");\r\n    }\r\n\r\n    function changeInvestStatus(bool status) external onlyOwner {\r\n        investStatus = status;\r\n    }\r\n\r\n    function changeReInvestStatus(bool status) external onlyOwner {\r\n        reinvestStatus = status;\r\n    }\r\n\r\n    function changePlan(\r\n        uint256 newMinUbxsAmount,\r\n        uint256 investingDays,\r\n        uint256 reinvestingDays,\r\n        uint256 investingNominator,\r\n        uint256 reinvestingNominator\r\n    ) external onlyOwner {\r\n        minUbxsAmount = newMinUbxsAmount;\r\n        investPlan = Plan({\r\n            investingDays: investingDays,\r\n            investingNominator: investingNominator\r\n        });\r\n\r\n        reinvestPlan = Plan({\r\n            investingDays: reinvestingDays,\r\n            investingNominator: reinvestingNominator\r\n        });\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ubxsAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AliasTaken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyHaveAlias\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReferer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvestClosedByAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LessThenMinAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInvestment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRemaingUbxs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReinvestClosedByAdmin\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefGained\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reinvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"REFERENCE_INCOME_PERCENTAGES\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"addToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addUbxsToContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aliasAddresses\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"aliases\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"changeInvestStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinUbxsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investingDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestingDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investingNominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestingNominator\",\"type\":\"uint256\"}],\"name\":\"changePlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"changeReInvestStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getRefCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserActionLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserActions\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAmountOfDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"depositType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"investingDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investingNominator\",\"type\":\"uint256\"}],\"internalType\":\"struct UbxsStake.Plan\",\"name\":\"plan\",\"type\":\"tuple\"}],\"internalType\":\"struct UbxsStake.Deposit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserReferralBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalReferralBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserTotalWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"refererAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"investFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investPlan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"investingDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investingNominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"isUserValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minUbxsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestPlan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"investingDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investingNominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newAlias\",\"type\":\"string\"}],\"name\":\"setAlias\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ubxs\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ubxsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRefBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkpoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "UbxsStake", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000004f1960e29b2ca581a38c5c474e123f420f8092db", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ea3b02ea624f16b65bd7d734e1d7ba729be1a2e8ebb2be2af6b0294ab4d0fcec"}