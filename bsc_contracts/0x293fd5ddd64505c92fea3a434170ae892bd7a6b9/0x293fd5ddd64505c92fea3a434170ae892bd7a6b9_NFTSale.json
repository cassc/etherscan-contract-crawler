{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IInvitorToken {\r\n    function bindInvitor(address account, address invitor) external;\r\n}\r\n\r\ninterface INFT {\r\n    function batchMint(address to, uint256 num) external;\r\n}\r\n\r\nabstract contract AbsPreSale is Ownable {\r\n    struct SaleInfo {\r\n        uint256 priceUsdt;\r\n        uint256 qty;\r\n        uint256 saleNum;\r\n        uint256 maxBuyNum;\r\n        address nftAddress;\r\n    }\r\n\r\n    struct UserInfo {\r\n        uint256 buyAmount;\r\n        uint256 teamAmount;\r\n        uint256 inviteReward;\r\n        uint256 claimedAmount;\r\n    }\r\n\r\n    address public _cashAddress;\r\n    address private _tokenAddress;\r\n    address private _usdtAddress;\r\n\r\n    SaleInfo[] private _saleInfo;\r\n    mapping(address => UserInfo) private _userInfo;\r\n\r\n    mapping(uint256 => mapping(address => uint256)) public _teamNum;\r\n\r\n    bool private _pauseBuy = true;\r\n\r\n    uint256 public _totalAmount;\r\n    uint256 public _totalInviteAmount;\r\n\r\n    mapping(address => address) public _invitor;\r\n    mapping(address => address[]) public _binder;\r\n    uint256 public _inviteLength = 20;\r\n    uint256 public _inviteFee = 800;\r\n    uint256 public _inviteRewardUsdt;\r\n    uint256 public constant _feeDivFactor = 10000;\r\n\r\n    mapping(uint256 => mapping(address => uint256)) public _buyNum;\r\n\r\n    ISwapFactory public _factory;\r\n    address public _invitorToken;\r\n\r\n    constructor(\r\n        address RouteAddress, address TokenAddress, address USDTAddress,\r\n        address InvitorToken, address CashAddress,\r\n        address LargeNFT, address littleNFT\r\n    ){\r\n        _factory = ISwapFactory(ISwapRouter(RouteAddress).factory());\r\n\r\n        _usdtAddress = USDTAddress;\r\n        _tokenAddress = TokenAddress;\r\n        _invitorToken = InvitorToken;\r\n        _cashAddress = CashAddress;\r\n\r\n        uint256 usdtUnit = 10 ** IERC20(USDTAddress).decimals();\r\n\r\n        _saleInfo.push(SaleInfo(600 * usdtUnit, 300, 0, 1, LargeNFT));\r\n        _saleInfo.push(SaleInfo(300 * usdtUnit, 2000, 0, 1, littleNFT));\r\n\r\n        _inviteRewardUsdt = 3 * usdtUnit;\r\n    }\r\n\r\n    function buy(uint256 saleId, address invitor) external {\r\n        address account = msg.sender;\r\n        require(tx.origin == account, \"origin\");\r\n\r\n        require(!_pauseBuy || _feeWhiteList[account], \"pauseBuy\");\r\n\r\n        SaleInfo storage sale = _saleInfo[saleId];\r\n        require(sale.qty > sale.saleNum, \"qty\");\r\n\r\n        uint256 buyNum = _buyNum[saleId][account];\r\n        require(sale.maxBuyNum > buyNum, \"maxNum\");\r\n        _buyNum[saleId][account] = buyNum + 1;\r\n\r\n        sale.saleNum += 1;\r\n\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        uint256 inviteLength = _inviteLength;\r\n\r\n        if (userInfo.buyAmount == 0) {\r\n            if (_userInfo[invitor].buyAmount > 0) {\r\n                _invitor[account] = invitor;\r\n                _binder[invitor].push(account);\r\n\r\n                IInvitorToken invitorToken = IInvitorToken(_invitorToken);\r\n                invitorToken.bindInvitor(account, invitor);\r\n\r\n                for (uint256 i; i < inviteLength;) {\r\n                    if (address(0) == invitor) {\r\n                        break;\r\n                    }\r\n                    _teamNum[i][invitor] += 1;\r\n                    invitor = _invitor[invitor];\r\n                unchecked{\r\n                    ++i;\r\n                }\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 usdtAmount = sale.priceUsdt;\r\n        address tokenAddress = _tokenAddress;\r\n        uint256 tokenAmount = tokenAmountOut(usdtAmount, tokenAddress);\r\n        userInfo.buyAmount += tokenAmount;\r\n\r\n        _totalAmount += tokenAmount;\r\n\r\n        _takeToken(tokenAddress, account, address(this), tokenAmount);\r\n\r\n        uint256 cashAmount = tokenAmount;\r\n\r\n        address current = account;\r\n        uint256 inviteAmount;\r\n        for (uint256 i = 0; i < inviteLength;) {\r\n            invitor = _invitor[current];\r\n            if (address(0) == invitor) {\r\n                break;\r\n            }\r\n\r\n            if (0 == i) {\r\n                inviteAmount = tokenAmount * _inviteFee / _feeDivFactor;\r\n            } else if (1 == i) {\r\n                inviteAmount = tokenAmount * _inviteRewardUsdt / usdtAmount;\r\n            }\r\n\r\n            _totalInviteAmount += inviteAmount;\r\n            cashAmount -= inviteAmount;\r\n            UserInfo storage invitorInfo = _userInfo[invitor];\r\n            invitorInfo.teamAmount += tokenAmount;\r\n            invitorInfo.inviteReward += inviteAmount;\r\n            current = invitor;\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n\r\n        _giveToken(tokenAddress, _cashAddress, cashAmount);\r\n        INFT(sale.nftAddress).batchMint(account, 1);\r\n    }\r\n\r\n    function claimReward() external {\r\n        address account = msg.sender;\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        uint256 pendingToken = userInfo.inviteReward - userInfo.claimedAmount;\r\n        require(pendingToken > 0, \"n Reward\");\r\n        userInfo.claimedAmount += pendingToken;\r\n        _giveToken(_tokenAddress, account, pendingToken);\r\n    }\r\n\r\n    function tokenAmountOut(uint256 usdtAmount, address tokenAddress) public view returns (uint256){\r\n        address usdtAddress = _usdtAddress;\r\n        if (usdtAddress == tokenAddress) {\r\n            return usdtAmount;\r\n        }\r\n        address lpAddress = _factory.getPair(usdtAddress, tokenAddress);\r\n        uint256 tokenBalance = IERC20(tokenAddress).balanceOf(lpAddress);\r\n        uint256 usdtBalance = IERC20(usdtAddress).balanceOf(lpAddress);\r\n        require(tokenBalance > 0 && usdtBalance > 0, \"noUPool\");\r\n        return usdtAmount * tokenBalance / usdtBalance;\r\n    }\r\n\r\n    function _giveToken(address tokenAddress, address account, uint256 tokenNum) private {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        require(token.balanceOf(address(this)) >= tokenNum, \"c token n enough\");\r\n        token.transfer(account, tokenNum);\r\n    }\r\n\r\n    function _takeToken(address tokenAddress, address sender, address receiver, uint256 tokenNum) private {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        require(token.balanceOf(address(sender)) >= tokenNum, \"token n enough\");\r\n        token.transferFrom(sender, receiver, tokenNum);\r\n    }\r\n\r\n    function getAllSaleInfo() external view returns (\r\n        uint256[] memory priceUsdt, uint256[] memory tokenAmount,\r\n        uint256[] memory qty, uint256[] memory saleNum, uint256[] memory maxBuyNum,\r\n        address[] memory nft\r\n    ) {\r\n        uint256 len = _saleInfo.length;\r\n        priceUsdt = new uint256[](len);\r\n        tokenAmount = new uint256[](len);\r\n        qty = new uint256[](len);\r\n        saleNum = new uint256[](len);\r\n        maxBuyNum = new uint256[](len);\r\n        nft = new address[](len);\r\n        for (uint256 i; i < len; i++) {\r\n            SaleInfo storage sale = _saleInfo[i];\r\n            priceUsdt[i] = sale.priceUsdt;\r\n            tokenAmount[i] = tokenAmountOut(priceUsdt[i], _tokenAddress);\r\n            qty[i] = sale.qty;\r\n            saleNum[i] = sale.saleNum;\r\n            maxBuyNum[i] = sale.maxBuyNum;\r\n            nft[i] = sale.nftAddress;\r\n        }\r\n    }\r\n\r\n    function getUserAllSaleInfo(address account) external view returns (\r\n        uint256[] memory buyNum\r\n    ) {\r\n        uint256 len = _saleInfo.length;\r\n        buyNum = new uint256[](len);\r\n        for (uint256 i; i < len; i++) {\r\n            buyNum[i] = _buyNum[i][account];\r\n        }\r\n    }\r\n\r\n    function shopInfo() external view returns (\r\n        address usdtAddress, uint256 usdtDecimals, string memory usdtSymbol,\r\n        address tokenAddress, uint256 tokenDecimals, string memory tokenSymbol,\r\n        bool pauseBuy\r\n    ){\r\n        usdtAddress = _usdtAddress;\r\n        usdtDecimals = IERC20(usdtAddress).decimals();\r\n        usdtSymbol = IERC20(usdtAddress).symbol();\r\n        tokenAddress = _tokenAddress;\r\n        tokenDecimals = IERC20(tokenAddress).decimals();\r\n        tokenSymbol = IERC20(tokenAddress).symbol();\r\n        pauseBuy = _pauseBuy;\r\n    }\r\n\r\n    function getBinderLength(address account) external view returns (uint256){\r\n        return _binder[account].length;\r\n    }\r\n\r\n    function getUserInfo(address account) external view returns (\r\n        uint256 buyAmount,\r\n        uint256 teamAmount,\r\n        uint256 inviteReward,\r\n        uint256 claimedAmount,\r\n        address invitor,\r\n        uint256 binder0Length,\r\n        uint256 binder1Length,\r\n        uint256 tokenBalance,\r\n        uint256 tokenAllowance\r\n    ){\r\n        UserInfo storage userInfo = _userInfo[account];\r\n        buyAmount = userInfo.buyAmount;\r\n        teamAmount = userInfo.teamAmount;\r\n        inviteReward = userInfo.inviteReward;\r\n        claimedAmount = userInfo.claimedAmount;\r\n        invitor = _invitor[account];\r\n        binder0Length = _teamNum[0][account];\r\n        binder1Length = _teamNum[1][account];\r\n        tokenBalance = IERC20(_tokenAddress).balanceOf(account);\r\n        tokenAllowance = IERC20(_tokenAddress).allowance(account, address(this));\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setTokenAddress(address adr) external onlyOwner {\r\n        _tokenAddress = adr;\r\n    }\r\n\r\n    function setUsdtAddress(address adr) external onlyOwner {\r\n        _usdtAddress = adr;\r\n    }\r\n\r\n    function setInvitorToken(address adr) external onlyOwner {\r\n        _invitorToken = adr;\r\n    }\r\n\r\n    function setCashAddress(address adr) external onlyOwner {\r\n        _cashAddress = adr;\r\n    }\r\n\r\n    function setPauseBuy(bool pause) external onlyOwner {\r\n        _pauseBuy = pause;\r\n    }\r\n\r\n    function setInviteFee(uint256 fee) external onlyOwner {\r\n        _inviteFee = fee;\r\n    }\r\n\r\n    function setInviteRewardUsdt(uint256 amount) external onlyOwner {\r\n        _inviteRewardUsdt = amount;\r\n    }\r\n\r\n    function setInviteLength(uint256 len) external onlyOwner {\r\n        _inviteLength = len;\r\n    }\r\n\r\n    function setQty(uint256 sid, uint256 price) external onlyOwner {\r\n        _saleInfo[sid].qty = price;\r\n    }\r\n\r\n    function setPrice(uint256 sid, uint256 price) external onlyOwner {\r\n        _saleInfo[sid].priceUsdt = price;\r\n    }\r\n\r\n    function setMaxBuyNum(uint256 sid, uint256 max) external onlyOwner {\r\n        _saleInfo[sid].maxBuyNum = max;\r\n    }\r\n\r\n    function setNFT(uint256 sid, address nft) external onlyOwner {\r\n        _saleInfo[sid].nftAddress = nft;\r\n    }\r\n\r\n    function claimBalance(address to, uint256 amount) external onlyOwner {\r\n        address payable addr = payable(to);\r\n        addr.transfer(amount);\r\n    }\r\n\r\n    function claimToken(address erc20Address, address to, uint256 amount) external onlyOwner {\r\n        IERC20 erc20 = IERC20(erc20Address);\r\n        erc20.transfer(to, amount);\r\n    }\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyOwner {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(address [] memory addr, bool enable) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n}\r\n\r\ncontract NFTSale is AbsPreSale {\r\n    constructor() AbsPreSale(\r\n    //SwapRouter\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n    //Matic\r\n        address(0xCC42724C6683B7E57334c4E856f4c9965ED682bD),\r\n    //Usdt\r\n        address(0x55d398326f99059fF775485246999027B3197955),\r\n    //InvitorToken,MAM\r\n        address(0x750852eCB5d21F2684c9B10B8534857650e10aAA),\r\n    //Cash\r\n        address(0x60E5fE917211B9c498174A60e24Fe5CeA74295df),\r\n    //LargeNFT\r\n        address(0x642D6A611b4df911c5cEB2bd1dEFEcfCdD80dce0),\r\n    //littleNFT\r\n        address(0xB80F446C16F1Bd61F393AF64d6e95CE9dB3b9dA8)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_binder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_buyNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_cashAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_factory\",\"outputs\":[{\"internalType\":\"contract ISwapFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeDivFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inviteFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inviteLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inviteRewardUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_invitor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_invitorToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_teamNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalInviteAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"saleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllSaleInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"priceUsdt\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"qty\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"saleNum\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxBuyNum\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"nft\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBinderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserAllSaleInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"buyNum\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inviteReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"invitor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"binder0Length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"binder1Length\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setCashAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setInviteFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"name\":\"setInviteLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setInviteRewardUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setInvitorToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"}],\"name\":\"setNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"setPauseBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setQty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setUsdtAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shopInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"usdtAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdtDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"usdtSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"pauseBuy\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"tokenAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NFTSale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4bfa8baedaf86c25d1ce1c3bd83bc44de0c22159917f1f4073cd190b7cbccd3e"}