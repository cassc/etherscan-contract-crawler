{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract LaRace_Gaming_Token is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) public _balances;\r\n     mapping (address => uint256) public selling;\r\n     mapping (address => uint256) public buying;\r\n     mapping (address=>bool) public  blacklist;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) public _isExcluded;\r\n    // transfer conditions mapping\r\n    \r\n    mapping(address => uint256) public _firstTransfer;\r\n    mapping(address => uint256) public _totTransfers;\r\n\r\n    //pancake/uniswap/sunswap selling condition \r\n    mapping(address => uint256) public _firstSelltime;\r\n    mapping(address => uint256) public _totalAmountSell;\r\n\r\n    // pancake/uniswap/sunswap buying condition\r\n    mapping(address => uint256) public _firstBuytime;\r\n    mapping(address => uint256) public _totalAmountBuy;\r\n\r\n    // multisendtoken receiver condition\r\n    mapping(address => uint256) public _firstReceivetime;\r\n    mapping(address => uint256) public _totalAmountreceive;\r\n\r\n\r\n\r\n\r\n\r\n\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n\r\n      address public pancakePair;\r\n    \r\n       uint256 public maxsellamount=2E18;\r\n       uint256 public maxbuyamount=50E18;\r\n       uint256 public maxTrPerDay = 50E18;\r\n       uint256 public maxMultisendPday=1000E18;\r\n       address public owner;\r\n       address public multisendaccount;\r\n       uint256 public locktime= 1 days;\r\n      \r\n     \r\n\r\n\r\n\r\n    constructor ()  {\r\n        _name = 'LaRace Gaming Token';\r\n        _symbol = 'LAG';\r\n        _totalSupply = 50000000000e18;\r\n        _decimals = 18;\r\n        _isExcluded[msg.sender]=true;\r\n        _isExcluded[address(this)]==true;\r\n              \r\n          owner=msg.sender;\r\n          _balances[owner] = _totalSupply;\r\n                  _paused = false;\r\n        emit Transfer(address(0), owner, _totalSupply);\r\n        \r\n    }\r\n\r\n     modifier onlyOwner() {\r\n        require(msg.sender==owner, \"Only Call by Owner\");\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n \r\n\r\n      \r\n\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n\r\n    function pauseContract() public onlyOwner{\r\n        _pause();\r\n\r\n    }\r\n    function unpauseContract() public onlyOwner{\r\n        _unpause();\r\n\r\n    }\r\n\r\n//         \r\n    // \r\n\r\n\r\n\r\n\r\n\r\n    \r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual whenNotPaused override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address _owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[_owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public whenNotPaused virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual whenNotPaused returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual whenNotPaused returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal whenNotPaused virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(blacklist[sender]==false,\"you are blacklisted\");\r\n        require(blacklist[recipient]==false,\"you are blacklisted\");\r\n        _beforeTokenTransfer(sender, recipient, amount);  \r\n        \r\n         if(sender==owner && recipient == pancakePair  ){\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\t\r\n         selling[sender]=selling[sender].add(amount);\r\n\r\n        }    \r\n\r\n          else if(sender==owner){\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n        }\r\n////////////////////////////////////////////////////////////////////////        \r\n                    // Selling limits\r\n// ////////////////////////////////////////////////////////////////////\r\n        else if (recipient == pancakePair ){\r\n        if(_isExcluded[sender]==false ){\r\n        if(block.timestamp < _firstSelltime[sender].add(locktime)){\t\t\t \r\n\t\t\t\r\n\t\t\t\trequire(_totalAmountSell[sender]+amount <= maxsellamount, \"You can't sell more than maxsellamount 1\");\r\n\t\t\t\t_totalAmountSell[sender]= _totalAmountSell[sender].add(amount);\r\n                 _balances[sender] = _balances[sender].sub(amount, \"ERC20: sell amount exceeds balance 1\");\r\n                _balances[recipient] = _balances[recipient].add(amount);\r\n\t\t\t}  \r\n\r\n        else if(block.timestamp>_firstSelltime[sender].add(locktime)){\r\n               _totalAmountSell[sender]=0;\r\n                 require(_totalAmountSell[sender].add(amount) <= maxsellamount, \"You can't sell more than maxsellamount 2\");\r\n                  _balances[sender] = _balances[sender].sub(amount, \"ERC20: sell amount exceeds balance 2\");\r\n                _balances[recipient] = _balances[recipient].add(amount);\r\n                _totalAmountSell[sender] =_totalAmountSell[sender].add(amount);\r\n                _firstSelltime[sender]=block.timestamp;\r\n        }\r\n        }\r\n        else{\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: selling amount exceeds balance 3\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            _totalAmountSell[sender] =_totalAmountSell[sender].add(amount);\r\n        }\r\n\r\n\t\t\t}\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////// \r\n                              // Buying Condition\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n        else if(sender==pancakePair) {\r\n\r\n        if(_isExcluded[recipient]==false ){\r\n        if(block.timestamp < _firstBuytime[recipient].add(locktime)){\t\t\t \r\n\t\t\t\r\n\t\t\t\trequire(_totalAmountBuy[recipient]+amount <= maxbuyamount, \"You can't sell more than maxbuyamount 1\");\r\n\t\t\t\t_totalAmountBuy[recipient]= _totalAmountBuy[recipient].add(amount);\r\n                 _balances[sender] = _balances[sender].sub(amount, \"ERC20: buy amount exceeds balance 1\");\r\n                _balances[recipient] = _balances[recipient].add(amount);\r\n\t\t\t}  \r\n\r\n        else if(block.timestamp>_firstBuytime[recipient].add(locktime)){\r\n               _totalAmountBuy[recipient]=0;\r\n                 require(_totalAmountBuy[recipient].add(amount) <= maxbuyamount, \"You can't sell more than maxbuyamount 2\");\r\n                  _balances[sender] = _balances[sender].sub(amount, \"ERC20: buy amount exceeds balance 2\");\r\n                _balances[recipient] = _balances[recipient].add(amount);\r\n                _totalAmountBuy[recipient] =_totalAmountBuy[recipient].add(amount);\r\n                _firstBuytime[recipient]=block.timestamp;\r\n        }\r\n        }\r\n        else{\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: buy amount exceeds balance 3\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            _totalAmountBuy[recipient] =_totalAmountBuy[recipient].add(amount);\r\n        }\r\n            \r\n\r\n        }\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            // multisendaccount transfer\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n        else if(sender==multisendaccount){\r\n         if(block.timestamp < _firstReceivetime[recipient].add(locktime)){\t\t\t \r\n\t\t\t\r\n\t\t\t\trequire(_totalAmountreceive[recipient]+amount <= maxMultisendPday, \"You can't transfer more than maxMultisendPday to receiver address 1\");\r\n\t\t\t\t_totalAmountreceive[recipient]= _totalAmountreceive[recipient].add(amount);\r\n                 _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance 1\");\r\n                _balances[recipient] = _balances[recipient].add(amount);\r\n\t\t\t}  \r\n\r\n        else if(block.timestamp>_firstReceivetime[recipient].add(locktime)){\r\n               _totalAmountreceive[recipient]=0;\r\n                 require(_totalAmountreceive[recipient].add(amount) <= maxMultisendPday, \"You can't transfer more than maxMultisendPday to receiver address 2\");\r\n                  _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance 2\");\r\n                _balances[recipient] = _balances[recipient].add(amount);\r\n                _totalAmountreceive[recipient] =_totalAmountreceive[recipient].add(amount);\r\n                _firstReceivetime[recipient]=block.timestamp;\r\n        }\r\n         else{\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: multisendamount amount exceeds balance 3\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n        }    \r\n        \r\n\r\n\r\n        }\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    // exclude receiver\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////// \r\nelse if(_isExcluded[recipient]==true )\r\n       {\r\n           _balances[sender] = _balances[sender].sub(amount, \"ERC20: simple transfer amount exceeds balance 3\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n       }\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n                                // simple transfer\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n       else if(_isExcluded[sender]==false ){\r\n       if(block.timestamp < _firstTransfer[sender].add(locktime)){\t\t\t \r\n\t\t\t\r\n\t\t\t\trequire(_totTransfers[sender]+amount <= maxTrPerDay, \"You can't transfer more than maxTrPerDay 1\");\r\n\t\t\t\t_totTransfers[sender]= _totTransfers[sender].add(amount);\r\n                 _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance 1\");\r\n                _balances[recipient] = _balances[recipient].add(amount);\r\n\t\t\t}  \r\n\r\n        else if(block.timestamp>_firstTransfer[sender].add(locktime)){\r\n               _totTransfers[sender]=0;\r\n                 require(_totTransfers[sender].add(amount) <= maxTrPerDay, \"You can't transfer more than maxTrPerDay 2\");\r\n                  _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance 2\");\r\n                _balances[recipient] = _balances[recipient].add(amount);\r\n                _totTransfers[sender] =_totTransfers[sender].add(amount);\r\n                _firstTransfer[sender]=block.timestamp;\r\n        }\r\n         else{\r\n            _balances[sender] = _balances[sender].sub(amount, \"ERC20: buy amount exceeds balance 2\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n        }\r\n\r\n             \r\n       }\r\n// ///////////////////////////////////////////////////////////////////////////////////\r\n                            // tranfer for excluded accounts\r\n//////////////////////////////////////////////////////////////////////////////////////\r\n       else if(_isExcluded[sender]==true )\r\n       {\r\n           _balances[sender] = _balances[sender].sub(amount, \"ERC20: simple transfer amount exceeds balance 3\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n       }\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(address _owner, address spender, uint256 amount) internal whenNotPaused virtual {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[_owner][spender] = amount;\r\n        emit Approval(_owner, spender, amount);\r\n    }\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n      function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal whenNotPaused {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    function addpairaddress(address _pair) public onlyOwner whenNotPaused{\r\n        pancakePair=_pair;\r\n\r\n    }\r\n        \r\n    function transferownership(address _newonwer) public whenNotPaused onlyOwner{\r\n        owner=_newonwer;\r\n    }\r\n\r\n     \r\n    function setbuylimit(uint256 _amount) public onlyOwner whenNotPaused{\r\n    maxbuyamount=_amount*1E18;\r\n    }\r\n\r\n      function setmaxsell(uint256 _amount) public whenNotPaused onlyOwner{\r\n\r\n        maxsellamount=_amount*1E18;\r\n\r\n    }\r\n\r\n    function setTransferperdaylimti(uint256 _amount) public onlyOwner whenNotPaused{\r\n        maxTrPerDay=_amount*1E18;\r\n    }\r\n\r\n    function setmaxMultisendPday(uint256 _amount) public onlyOwner whenNotPaused{\r\n        maxMultisendPday=_amount*1E18;\r\n    }\r\n\r\n    function addtoblacklist(address _addr) public onlyOwner whenNotPaused{\r\n        require(blacklist[_addr]==false,\"already blacklisted\");\r\n        blacklist[_addr]=true;\r\n    }\r\n\r\n    function removefromblacklist(address _addr) public onlyOwner whenNotPaused{\r\n        require(blacklist[_addr]==true,\"already removed from blacklist\");\r\n        blacklist[_addr]=false;\r\n    }\r\n\r\n    event Multisended(uint256 total, address tokenAddress);\r\n\r\n     \r\n    function register(address _address)public pure returns(address)\r\n    {\r\n        return _address;\r\n    }\r\n    \r\n    \r\n    function multisendToken( address[] calldata _contributors, uint256[] calldata __balances) external whenNotPaused  \r\n        {\r\n            uint8 i = 0;\r\n            for (i; i < _contributors.length; i++) {\r\n            _transfer(msg.sender,_contributors[i], __balances[i]);\r\n            }\r\n        }\r\n    \r\n    \r\n  \r\n    function sendMultiBnb(address payable[]  memory  _contributors, uint256[] memory __balances) public  payable whenNotPaused\r\n    {\r\n        uint256 total = msg.value;\r\n        uint256 i = 0;\r\n        for (i; i < _contributors.length; i++) {\r\n            require(total >= __balances[i],\"Invalid Amount\");\r\n            total = total - __balances[i];\r\n            _contributors[i].transfer(__balances[i]);\r\n        }\r\n        emit Multisended(  msg.value , msg.sender);\r\n    }\r\n\r\n\r\n    function buy() external payable whenNotPaused\r\n    {\r\n        require(msg.value>0,\"Select amount first\");\r\n    }\r\n    \r\n    \r\n    function sell (uint256 _token) external whenNotPaused\r\n    {\r\n        require(_token>0,\"Select amount first\");\r\n        _transfer(msg.sender,address(this),_token);\r\n    }\r\n    \r\n    \r\n    \r\n    function withDraw (uint256 _amount) onlyOwner public whenNotPaused\r\n    {\r\n        payable(msg.sender).transfer(_amount);\r\n    }\r\n    \r\n    \r\n    \r\n    function getTokens (uint256 _amount) onlyOwner public whenNotPaused\r\n    {\r\n        _transfer(address(this),msg.sender,_amount);\r\n    }\r\n    function ExcludefromLimits(address _addr,bool _state) public onlyOwner whenNotPaused{\r\n        _isExcluded[_addr]=_state;\r\n    }\r\n\r\n    function setmultisendaccount (address _addr) public onlyOwner whenNotPaused{\r\n        multisendaccount=_addr;\r\n    }\r\n\r\n    function mint(uint256 _amount) public onlyOwner whenNotPaused{\r\n        _mint(msg.sender,_amount);\r\n    }\r\n\r\n     function burn(address _user,uint256 _amount) public onlyOwner whenNotPaused{\r\n        _burn(_user,_amount);\r\n    }\r\n\r\n\r\n  \r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"Multisended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"ExcludefromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_firstBuytime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_firstReceivetime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_firstSelltime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_firstTransfer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_totTransfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_totalAmountBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_totalAmountSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_totalAmountreceive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"addpairaddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addtoblacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locktime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMultisendPday\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTrPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxbuyamount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxsellamount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"__balances\",\"type\":\"uint256[]\"}],\"name\":\"multisendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multisendaccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"removefromblacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_token\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"selling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"_contributors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"__balances\",\"type\":\"uint256[]\"}],\"name\":\"sendMultiBnb\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTransferperdaylimti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setbuylimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setmaxMultisendPday\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setmaxsell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setmultisendaccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newonwer\",\"type\":\"address\"}],\"name\":\"transferownership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LaRace_Gaming_Token", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8c1c4a3eb24df6c699a0bf8b00ae057e4bc967027fa231ae052735019ddf7d54"}