{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;  \r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {size := extcodesize(account)}\r\n        return size > 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success,) = recipient.call{value : amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value : weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\ncontract Ownable is Context {\r\n    address internal _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n    external\r\n    returns (address pair);\r\n}\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external\r\n    returns (\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidity\r\n    );\r\n}\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\ncontract CSL is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    mapping(address => bool) public ammPairs;\r\n    address public uniswapV2Pair;\r\n    address public token;\r\n    address  holder;\r\n    \r\n    struct Interest {\r\n        IERC20 token;\r\n    }\r\n    Interest internal lpInterest;\r\n    uint public addPriceTokenAmount = 1e14;\r\n    uint256 private allrate = 1000;\r\n    address private _route;\r\n\r\n    struct user{\r\n        address referer;\r\n        address[] mysons;\r\n        uint256[] asreferaward;\r\n        uint256[] asreferawardtimes; \r\n        uint256 asreferawardtotal;\r\n    }\r\n    mapping(address=>user) private users;\r\n    address[] private userslist;\r\n    address private operation_ad;\r\n    address private LPDivvy_ad;\r\n    address private marketAward_ad;\r\n    address private leagueDivvy_ad;\r\n    address private community_ad;\r\n    address private accretion_ad;\r\n    address private baseref_ad;\r\n    address[] private leagueLeader;\r\n\r\n    bool private buylock1;\r\n    bool private buylock2;\r\n    bool private selllock;\r\n    bool private addlock;\r\n    bool private dellock;\r\n    mapping(address=>bool) private whitelist;\r\n    mapping(address=>bool) private whitelist2;\r\n    mapping(address=>uint256) private userslocknum;\r\n    constructor () public {\r\n        _decimals = 18;\r\n        _totalSupply = 21000000000000000000000000;\r\n        _name = \"CSL\";\r\n        _symbol = \"CSL\";\r\n        \r\n        //\u6b63\u5f0f\u94fe\u53d1\u5e03\r\n        token = 0x55d398326f99059fF775485246999027B3197955;\r\n        _route = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n        \r\n         // _owner = msg.sender;\r\n\r\n        _owner = 0x81e16c1788D40e630a466394367D25B4f399F0F4;\r\n        holder = 0xa57ed1e16Dc45dB1b4be2B8A8c65C7344D1DDF50;\r\n        operation_ad = 0x4431B56270F6A4Ded9acd8d2A26081e726F128b9;\r\n        LPDivvy_ad = 0x53484bEb5dcA02133C28a59909227962AF17E120;\r\n        marketAward_ad = 0xc83Ae2618018CaB17b031907BCB371C74202B46d;\r\n        leagueDivvy_ad = 0x273327975067701Ff1Bde92150D09b9c04FCAe45;\r\n        community_ad = 0x44Ca0c719f812800d9D4A0630c709941d57265E4;\r\n        accretion_ad = 0xb7000f684b9F4B2C12B45D0eC2dbe04a39bD53fA;\r\n        baseref_ad = 0x186f72b4dEB4A03609fd0d5821e04517Fbf59d6b;\r\n\r\n\r\n        uniswapV2Router = IUniswapV2Router02(_route);  \r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), token);\r\n        ammPairs[uniswapV2Pair] = true;\r\n        lpInterest.token = IERC20(uniswapV2Pair);\r\n\r\n        _balances[holder] = 20500000000000000000000000;\r\n        _balances[operation_ad] = 500000000000000000000000;\r\n        emit Transfer(address(0), holder, 20500000000000000000000000);\r\n        emit Transfer(address(0), operation_ad, 500000000000000000000000);\r\n        buylock1 = true;\r\n        buylock2 = true;\r\n        selllock = false;\r\n        addlock = true;\r\n        dellock = true;\r\n    }\r\n\r\n    function setLock(bool _buylock1,bool _buylock2,bool _selllock,bool _addlock,bool _dellock) public onlyOwner{\r\n        buylock1 = _buylock1;\r\n        buylock2 = _buylock2;\r\n        selllock = _selllock;\r\n        addlock = _addlock;\r\n        dellock = _dellock;\r\n    }\r\n    \r\n    function setwhitelist(address[] memory accounts) public onlyOwner {\r\n        for( uint i = 0; i < accounts.length; i++ ){\r\n            whitelist[accounts[i]] = true;\r\n        }\r\n    }\r\n    \r\n    function cancelwhitelist(address account) public onlyOwner {\r\n        whitelist[account] = false;\r\n    }\r\n\r\n    function getwhitelist(address account) public view returns(bool) {\r\n        return whitelist[account];\r\n    }\r\n\r\n\r\n     function setwhitelist2(address[] memory accounts) public onlyOwner {\r\n        for( uint i = 0; i < accounts.length; i++ ){\r\n            whitelist2[accounts[i]] = true;\r\n        }\r\n    }\r\n    \r\n    function cancelwhitelist2(address account) public onlyOwner {\r\n        whitelist2[account] = false;\r\n    }\r\n\r\n    function getwhitelist2(address account) public view returns(bool) {\r\n        return whitelist2[account];\r\n    }\r\n    \r\n    function invest(address irefer) public{ \r\n        require(users[msg.sender].referer==address(0),\"have user\");\r\n        require(msg.sender != irefer);\r\n        require(msg.sender!=baseref_ad);\r\n        require(referisright(irefer)==true,\"refer err!\uff01\");\r\n        \r\n        users[msg.sender].referer = irefer;\r\n        users[irefer].mysons.push(msg.sender);\r\n        userslist.push(msg.sender);\r\n    }\r\n    \r\n    function referisright(address irefer) public view returns(bool){\r\n        address upline;\r\n        if(address(irefer)==address(baseref_ad)){\r\n            return true;\r\n        }else{\r\n            upline=users[irefer].referer;\r\n            while(upline!=address(0)){\r\n                if(address(upline)==address(baseref_ad)){\r\n                    return true;\r\n                }\r\n                upline=users[upline].referer;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: mint to the zero address\");\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    function burn(uint256 amount) public returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n    receive() external payable {}\r\n    \r\n    \r\n    \r\n    function _take(uint256 tValue, address from, address to) private {\r\n        if(to==address(0)){\r\n            _balances[to] = _balances[to].add(tValue);\r\n            _totalSupply = _totalSupply.sub(tValue);\r\n            emit Transfer(from, address(0), tValue);\r\n        }else{\r\n            _balances[to] = _balances[to].add(tValue);\r\n            emit Transfer(from, to, tValue);\r\n        }\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _doTransfer(address sender, address recipient, uint256 tAmount) private {\r\n        _balances[sender] = _balances[sender].sub(tAmount);\r\n        _balances[recipient] = _balances[recipient].add(tAmount);\r\n        emit Transfer(sender, recipient, tAmount);\r\n    }\r\n    struct Param {\r\n        bool takeFee;\r\n        uint tTransferAmount;\r\n        uint8 tFlags;\r\n    }\r\n    function _initParam(uint256 tAmount, Param memory param) private view {\r\n        uint tFee = 0;\r\n        if (param.takeFee) {\r\n            uint256 rate;\r\n            rate = 70;\r\n            tFee = tAmount.mul(rate).div(allrate);\r\n        }\r\n        param.tTransferAmount = tAmount.sub(tFee);\r\n    }\r\n\r\n    event test1(address, uint, uint);\r\n    function _isLiquidity(address from, address to) internal returns (bool isAdd, bool isDel, bool isSell, bool isBuy){\r\n        address token0 = IUniswapV2Pair(address(uniswapV2Pair)).token0();\r\n        (uint r0,,) = IUniswapV2Pair(address(uniswapV2Pair)).getReserves();\r\n        uint bal0 = IERC20(token0).balanceOf(address(uniswapV2Pair));\r\n\r\n        emit test1(token0, r0, bal0);\r\n        if (ammPairs[to]) {\r\n            if (token0 != address(this) && bal0 > r0) {\r\n                isAdd = bal0 - r0 > addPriceTokenAmount;\r\n            }\r\n            if (!isAdd) {\r\n                isSell = true;\r\n            }\r\n        }\r\n        if (ammPairs[from]) {\r\n            if (token0 != address(this) && bal0 < r0) {\r\n                isDel = r0 - bal0 > 0;\r\n            }\r\n            if (!isDel) {\r\n                isBuy = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    event test(bool, bool, bool, bool);\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        bool isAdd;\r\n        bool isDel;\r\n        bool isSell;\r\n        bool isBuy;\r\n        (isAdd, isDel, isSell, isBuy) = _isLiquidity(from, to);\r\n        emit test(isAdd, isDel, isSell, isBuy);\r\n        Param memory param;\r\n        address userad = from;\r\n        \r\n        \r\n        if(isBuy){\r\n            userad = to;\r\n            if(whitelist2[userad]==false){\r\n                if(buylock1==true){\r\n                    require(whitelist[userad]==true,\"buy lock\");\r\n                }\r\n                if(buylock2==true){\r\n                    require((userslocknum[userad].add(amount))<=500000000000000000000,\"limit 500\");\r\n                }\r\n            }\r\n            \r\n            userslocknum[userad] = userslocknum[userad].add(amount);\r\n            param.tFlags = 1;\r\n            if(whitelist2[userad]){\r\n                param.takeFee = false;\r\n            }else{\r\n                param.takeFee = true;\r\n            }\r\n            if(_totalSupply<=100000000000000000000000){\r\n                param.takeFee = false;\r\n            }\r\n        }else if(isSell){\r\n            userad = from;\r\n            if(whitelist2[userad]==false){\r\n                require(selllock==false,\"sell lock\");\r\n            }\r\n            param.tFlags = 2;\r\n            if(whitelist2[userad]){\r\n                param.takeFee = false;\r\n            }else{\r\n                param.takeFee = true;\r\n            }\r\n            if(_totalSupply<=100000000000000000000000){\r\n                param.takeFee = false;\r\n            }\r\n        }else if(isDel){\r\n            require(dellock==false,\"del lock\");\r\n            userad = to;\r\n            param.tFlags = 1;\r\n            param.takeFee = true;\r\n            if(_totalSupply<=100000000000000000000000){\r\n                param.takeFee = false;\r\n            }\r\n        }else if(isAdd){\r\n            userad = from;\r\n            if(addlock==true){\r\n                require(whitelist[userad]==true,\"add lock\");\r\n            }\r\n            param.tFlags = 2;\r\n            param.takeFee = true;\r\n            if(_totalSupply<=100000000000000000000000){\r\n                param.takeFee = false;\r\n            }\r\n        }else{\r\n            userad = from;\r\n            param.tFlags = 3;\r\n            param.takeFee = false;\r\n        }\r\n        _initParam(amount, param);\r\n        _tokenTransfer(from, to, amount, param, userad);\r\n        setEst(userad);\r\n    }\r\n\r\n    function _takeFee(Param memory param, address from, uint256 tAmount, address userad) private {\r\n       if(param.tFlags==1){\r\n            _take(tAmount.mul(10).div(1000), from, address(0));\r\n            _take(tAmount.mul(20).div(1000), from, LPDivvy_ad);\r\n            \r\n            if(users[userad].referer==address(0)){\r\n                _take(tAmount.mul(20).div(1000), from, accretion_ad);\r\n            }else{\r\n                address upline;\r\n                address tmpad = userad;\r\n                for(uint i=0;i<2;i++){\r\n                    upline=users[tmpad].referer;\r\n                    tmpad = upline;\r\n                    if(upline==address(0)){\r\n                        upline=accretion_ad;\r\n                    }\r\n                    uint256 tmpamount = tAmount.mul(10).div(1000); \r\n                    _take(tmpamount, from, upline); \r\n                    users[upline].asreferaward.push(tmpamount);\r\n                    users[upline].asreferawardtimes.push(block.timestamp);\r\n                    users[upline].asreferawardtotal = users[upline].asreferawardtotal.add(tmpamount);\r\n                }\r\n            }\r\n            _take(tAmount.mul(20).div(1000), from, marketAward_ad);\r\n       }else{\r\n            _take(tAmount.mul(10).div(1000), from, address(0));\r\n            _take(tAmount.mul(10).div(1000), from, LPDivvy_ad);\r\n            _take(tAmount.mul(20).div(1000), from, leagueDivvy_ad);\r\n            _take(tAmount.mul(30).div(1000), from, community_ad);\r\n       }\r\n    }\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, Param memory param, address userad) private {\r\n        _balances[sender] = _balances[sender].sub(tAmount);\r\n        _balances[recipient] = _balances[recipient].add(param.tTransferAmount);\r\n        emit Transfer(sender, recipient, param.tTransferAmount);\r\n        if (param.takeFee) {\r\n            _takeFee(param, sender, tAmount, userad);\r\n        }\r\n    }\r\n    function setEst(address ad) private returns(bool){\r\n        if(users[ad].mysons.length>=20 && leagueLeader.length<30 && _balances[ad]>=10000000000000000000000){\r\n            for(uint z=0;z<leagueLeader.length;z++){\r\n                if(leagueLeader[z]==ad){\r\n                    return false;\r\n                }\r\n            }\r\n            uint256 tt;\r\n            address son1;\r\n            address son2;\r\n            for(uint i=0;i<users[ad].mysons.length;i++){\r\n                son1 = users[ad].mysons[i];\r\n                tt = tt.add(_balances[son1]);\r\n                for(uint j=0;j<users[son1].mysons.length;j++){\r\n                    son2 = users[son1].mysons[j];\r\n                    tt = tt.add(_balances[son2]);\r\n                }\r\n            }\r\n            if(tt>=50000000000000000000000){\r\n                leagueLeader.push(ad);\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function getUsers() public view returns(address[] memory){\r\n        return userslist; \r\n    }\r\n\r\n    function getRefer(address ad) public view returns(address){\r\n        return users[ad].referer;\r\n    }\r\n    function getSons(address ad) public view returns(address[] memory){\r\n        return users[ad].mysons;\r\n    }\r\n    function getLeagueLeader() public view returns(address[] memory){\r\n        return leagueLeader;\r\n    }\r\n    function getReferaward(address ad) public view returns(uint256[] memory,uint256[] memory,uint256){\r\n        return (users[ad].asreferawardtimes,users[ad].asreferaward,users[ad].asreferawardtotal);\r\n    }\r\n\r\n    function gettoken01() public view returns (address, address, bool){\r\n        return (IUniswapV2Pair(address(uniswapV2Pair)).token0(), address(this), IUniswapV2Pair(address(uniswapV2Pair)).token0() < address(this));\r\n    }\r\n    \r\n    function getlock() public view returns(bool,bool,bool,bool,bool){\r\n        return (buylock1, buylock2, selllock, addlock, dellock);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"test\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"test1\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addPriceTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ammPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"cancelwhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"cancelwhitelist2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLeagueLeader\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ad\",\"type\":\"address\"}],\"name\":\"getRefer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ad\",\"type\":\"address\"}],\"name\":\"getReferaward\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ad\",\"type\":\"address\"}],\"name\":\"getSons\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gettoken01\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getwhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getwhitelist2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"irefer\",\"type\":\"address\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"irefer\",\"type\":\"address\"}],\"name\":\"referisright\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_buylock1\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_buylock2\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_selllock\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_addlock\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_dellock\",\"type\":\"bool\"}],\"name\":\"setLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"setwhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"setwhitelist2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CSL", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cb6a5ca75761c72bb1c88d0a2af2927f0033bbc9781bc316d132a6159986120f"}