{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ISwapRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface ISwapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"!o\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"n0\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenDistributor {\r\n    address public _owner;\r\n    constructor (address token) {\r\n        _owner = msg.sender;\r\n        IERC20(token).approve(msg.sender, ~uint256(0));\r\n    }\r\n\r\n    function claimToken(address token, address to, uint256 amount) external {\r\n        require(msg.sender == _owner, \"!o\");\r\n        IERC20(token).transfer(to, amount);\r\n    }\r\n}\r\n\r\ninterface ISwapPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function sync() external;\r\n}\r\n\r\ninterface INFT {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function ownerOfAndBalance(uint256 tokenId) external view returns (address own, uint256 balance);\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    function addClaimableAmount(address account, uint256 amount) external;\r\n}\r\n\r\nabstract contract AbsToken is IERC20, Ownable {\r\n    struct BuyInfo {\r\n        uint256 buyToken;\r\n        uint256 buyUsdt;\r\n        uint256 sellToken;\r\n        uint256 sellUsdt;\r\n    }\r\n\r\n    struct RecordInfo {\r\n        uint256 lastRewardTime;\r\n        uint256 rewardBalance;\r\n        uint256 claimedReward;\r\n    }\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public fundAddress;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    mapping(address => bool) public _feeWhiteList;\r\n    mapping(address => bool) public _blackList;\r\n\r\n    uint256 private _tTotal;\r\n\r\n    ISwapRouter public _swapRouter;\r\n    address public _usdt;\r\n    mapping(address => bool) public _swapPairList;\r\n\r\n    bool private inSwap;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    TokenDistributor public _tokenDistributor;\r\n    TokenDistributor public _nftDistributor;\r\n\r\n    uint256 private constant _buyNFTFee = 100;\r\n    uint256 private constant _buyPartnerFee = 150;\r\n    uint256 private constant _buyLPDividendFee = 100;\r\n    uint256 private constant _buyFundFee = 50;\r\n    uint256 private constant _buyTotalFee = 400;\r\n\r\n    uint256 public startTradeBlock;\r\n    address public _mainPair;\r\n\r\n    uint256 public _sellProfitBuybackFee = 4000;\r\n    uint256 private constant _sellProfitNFTFee = 200;\r\n    uint256 private constant _sellProfitPartnerFee = 100;\r\n    uint256 private constant _sellProfitLPDividendFee = 100;\r\n    uint256 private constant _sellProfitFundFee = 100;\r\n    uint256 public _sellProfitTotalFee = 4500;\r\n    mapping(address => BuyInfo) private _buyInfo;\r\n\r\n    address public _nftAddress;\r\n    address public _buybackToken;\r\n    address public _buybackTokenLP;\r\n\r\n    mapping(address => RecordInfo[]) private _recordInfo;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (\r\n        address RouterAddress, address USDTAddress,\r\n        string memory Name, string memory Symbol, uint8 Decimals, uint256 Supply,\r\n        address ReceiveAddress, address FundAddress\r\n    ){\r\n        _name = Name;\r\n        _symbol = Symbol;\r\n        _decimals = Decimals;\r\n\r\n        ISwapRouter swapRouter = ISwapRouter(RouterAddress);\r\n\r\n        _usdt = USDTAddress;\r\n        _swapRouter = swapRouter;\r\n        _allowances[address(this)][address(swapRouter)] = MAX;\r\n        IERC20(USDTAddress).approve(RouterAddress, MAX);\r\n\r\n        ISwapFactory swapFactory = ISwapFactory(swapRouter.factory());\r\n        address mainPair = swapFactory.createPair(address(this), USDTAddress);\r\n        _swapPairList[mainPair] = true;\r\n\r\n        _mainPair = mainPair;\r\n\r\n        uint256 tokenDecimals = 10 ** Decimals;\r\n        uint256 total = Supply * tokenDecimals;\r\n        _tTotal = total;\r\n\r\n        _balances[ReceiveAddress] = total;\r\n        emit Transfer(address(0), ReceiveAddress, total);\r\n        fundAddress = FundAddress;\r\n\r\n        _feeWhiteList[ReceiveAddress] = true;\r\n        _feeWhiteList[FundAddress] = true;\r\n        _feeWhiteList[address(this)] = true;\r\n        _feeWhiteList[address(swapRouter)] = true;\r\n        _feeWhiteList[msg.sender] = true;\r\n        _feeWhiteList[address(0)] = true;\r\n        _feeWhiteList[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        _tokenDistributor = new TokenDistributor(USDTAddress);\r\n        _nftDistributor = new TokenDistributor(USDTAddress);\r\n\r\n        excludeLpProvider[address(0)] = true;\r\n        excludeLpProvider[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n        excludeLpProvider[ReceiveAddress] = true;\r\n\r\n        uint256 usdtUnit = 10 ** IERC20(USDTAddress).decimals();\r\n        lpRewardUsdtCondition = 100 * usdtUnit;\r\n        nftRewardCondition = 100 * usdtUnit;\r\n        nftHoldCondition = 10000 * tokenDecimals;\r\n\r\n        excludeNFTHolder[address(0)] = true;\r\n        excludeNFTHolder[address(0x000000000000000000000000000000000000dEaD)] = true;\r\n    }\r\n\r\n    function symbol() external view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() external view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        if (_allowances[sender][msg.sender] != MAX) {\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    address public _lastMaybeAddLPAddress;\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        require(!_blackList[from] || _feeWhiteList[from], \"bL\");\r\n\r\n        uint256 balance = balanceOf(from);\r\n        require(balance >= amount, \"BNE\");\r\n\r\n        address lastMaybeAddLPAddress = _lastMaybeAddLPAddress;\r\n        address mainPair = _mainPair;\r\n        if (lastMaybeAddLPAddress != address(0)) {\r\n            _lastMaybeAddLPAddress = address(0);\r\n            uint256 lpBalance = IERC20(mainPair).balanceOf(lastMaybeAddLPAddress);\r\n            if (lpBalance > 0) {\r\n                _addLpProvider(lastMaybeAddLPAddress);\r\n            }\r\n        }\r\n\r\n        bool takeFee;\r\n        bool isBuy;\r\n\r\n        if (_swapPairList[from] || _swapPairList[to]) {\r\n            bool isRemoveLP;\r\n            if (from == mainPair) {\r\n                isRemoveLP = _isRemoveLiquidity();\r\n                if (!isRemoveLP) {\r\n                    isBuy = true;\r\n                }\r\n            }\r\n\r\n            if (!_feeWhiteList[from] && !_feeWhiteList[to]) {\r\n                require(0 < startTradeBlock, \"!T\");\r\n                takeFee = true;\r\n                if (to == mainPair) {\r\n                    bool isAddLP = _isAddLiquidity(amount);\r\n                    if (isAddLP) {\r\n                        takeFee = false;\r\n                    }\r\n                } else {\r\n                    if (isRemoveLP) {\r\n                        takeFee = false;\r\n                    }\r\n                }\r\n\r\n                if (takeFee && block.number < startTradeBlock + 10) {\r\n                    _funTransfer(from, to, amount);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n        if (isBuy) {\r\n            INFT(_nftAddress).addClaimableAmount(to, amount);\r\n        }\r\n\r\n        if (from != address(this)) {\r\n            if (to == mainPair) {\r\n                _lastMaybeAddLPAddress = from;\r\n            }\r\n\r\n            if (startTradeBlock > 0) {\r\n                processPartnerDividend();\r\n                uint256 blockNum = block.number;\r\n                if (processPartnerBlock != blockNum) {\r\n                    uint256 rewardGas = _rewardGas;\r\n                    processLPRewardUsdt(rewardGas);\r\n                    if (progressLPRewardUsdtBlock != blockNum) {\r\n                        processNFTReward(rewardGas);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _isAddLiquidity(uint256 amount) internal view returns (bool isAdd){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0, uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        uint256 r;\r\n        uint256 rToken;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n            rToken = r1;\r\n        } else {\r\n            r = r1;\r\n            rToken = r0;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        if (rToken == 0) {\r\n            isAdd = bal > r;\r\n        } else {\r\n            isAdd = bal > r + r * amount / rToken / 2;\r\n        }\r\n    }\r\n\r\n    function _isRemoveLiquidity() internal view returns (bool isRemove){\r\n        ISwapPair mainPair = ISwapPair(_mainPair);\r\n        (uint r0,uint256 r1,) = mainPair.getReserves();\r\n\r\n        address tokenOther = _usdt;\r\n        uint256 r;\r\n        if (tokenOther < address(this)) {\r\n            r = r0;\r\n        } else {\r\n            r = r1;\r\n        }\r\n\r\n        uint bal = IERC20(tokenOther).balanceOf(address(mainPair));\r\n        isRemove = r >= bal;\r\n    }\r\n\r\n    function _funTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount = tAmount * 99 / 100;\r\n        _takeTransfer(\r\n            sender,\r\n            fundAddress,\r\n            feeAmount\r\n        );\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _tokenTransfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount,\r\n        bool takeFee\r\n    ) private {\r\n        _balances[sender] = _balances[sender] - tAmount;\r\n        uint256 feeAmount;\r\n\r\n        if (takeFee) {\r\n            if (_swapPairList[sender]) {//Buy\r\n                uint256 swapFeeAmount = tAmount * _buyTotalFee / 10000;\r\n                if (swapFeeAmount > 0) {\r\n                    feeAmount += swapFeeAmount;\r\n                    _takeTransfer(sender, address(this), swapFeeAmount);\r\n                }\r\n\r\n                //buyUsdtAmount\r\n                address[] memory path = new address[](2);\r\n                path[0] = _usdt;\r\n                path[1] = address(this);\r\n                uint[] memory amounts = _swapRouter.getAmountsIn(tAmount, path);\r\n\r\n                BuyInfo storage buyInfo = _buyInfo[recipient];\r\n                buyInfo.buyUsdt += amounts[0];\r\n                buyInfo.buyToken += tAmount - swapFeeAmount;\r\n            } else if (_swapPairList[recipient]) {//Sell\r\n                uint256 buyFeeAmount = tAmount * _buyTotalFee * 230 / 1000000;\r\n                uint256 thisTokenAmount = balanceOf(address(this));\r\n                if (buyFeeAmount > thisTokenAmount) {\r\n                    buyFeeAmount = thisTokenAmount;\r\n                }\r\n\r\n                uint256 sellProfitFeeAmount = _calProfitFeeAmount(sender, tAmount, _sellProfitTotalFee);\r\n                if (sellProfitFeeAmount > 0) {\r\n                    feeAmount += sellProfitFeeAmount;\r\n                    _takeTransfer(sender, address(this), sellProfitFeeAmount);\r\n                }\r\n\r\n                if (!inSwap) {\r\n                    swapTokenForFund(buyFeeAmount, sellProfitFeeAmount);\r\n                }\r\n            }\r\n        }\r\n\r\n        _takeTransfer(sender, recipient, tAmount - feeAmount);\r\n    }\r\n\r\n    function _calProfitFeeAmount(address sender, uint256 realSellAmount, uint256 sellProfitFee) private returns (uint256 profitFeeAmount){\r\n        BuyInfo storage buyInfo = _buyInfo[sender];\r\n        uint256 remainBuyToken = buyInfo.buyToken - buyInfo.sellToken;\r\n        if (remainBuyToken > realSellAmount) {\r\n            remainBuyToken = realSellAmount;\r\n        }\r\n        profitFeeAmount = (realSellAmount - remainBuyToken) * sellProfitFee / 10000;\r\n\r\n        if (remainBuyToken > 0) {\r\n            buyInfo.sellToken += remainBuyToken;\r\n\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = _usdt;\r\n            uint[] memory amounts = _swapRouter.getAmountsOut(remainBuyToken, path);\r\n            uint256 sellUsdtAmount = amounts[amounts.length - 1];\r\n            uint256 profitUsdt;\r\n\r\n            uint256 buyUsdt = buyInfo.buyUsdt;\r\n            uint256 sellUsdt = buyInfo.sellUsdt;\r\n            if (buyUsdt > sellUsdt) {\r\n                uint256 remainBuyUsdt = buyUsdt - sellUsdt;\r\n                if (sellUsdtAmount > remainBuyUsdt) {\r\n                    profitUsdt = sellUsdtAmount - remainBuyUsdt;\r\n                }\r\n            } else {\r\n                profitUsdt = sellUsdtAmount;\r\n            }\r\n\r\n            uint256 profitFeeUsdt = profitUsdt * sellProfitFee / 10000;\r\n\r\n            buyInfo.sellUsdt += sellUsdtAmount - profitFeeUsdt;\r\n\r\n            profitFeeAmount += remainBuyToken * profitFeeUsdt / sellUsdtAmount;\r\n        }\r\n    }\r\n\r\n    function swapTokenForFund(uint256 buyFeeAmount, uint256 profitFeeAmount) private lockTheSwap {\r\n        uint256 tokenAmount = buyFeeAmount + profitFeeAmount;\r\n        if (tokenAmount == 0) {\r\n            return;\r\n        }\r\n        address tokenDistributor = address(_tokenDistributor);\r\n        address usdt = _usdt;\r\n        IERC20 USDT = IERC20(usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(tokenDistributor);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = usdt;\r\n        _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            tokenDistributor,\r\n            block.timestamp\r\n        );\r\n\r\n        usdtBalance = USDT.balanceOf(tokenDistributor) - usdtBalance;\r\n        uint256 profitUsdt = usdtBalance * profitFeeAmount / tokenAmount;\r\n        uint256 buyFeeUsdt = usdtBalance - profitUsdt;\r\n\r\n        uint256 fundUsdt;\r\n        uint256 lpDividendUsdt;\r\n        uint256 partnerUsdt;\r\n        uint256 nftUsdt;\r\n        if (buyFeeUsdt > 0) {\r\n            fundUsdt = buyFeeUsdt * _buyFundFee / _buyTotalFee;\r\n            lpDividendUsdt = buyFeeUsdt * _buyLPDividendFee / _buyTotalFee;\r\n            partnerUsdt = buyFeeUsdt * _buyPartnerFee / _buyTotalFee;\r\n            nftUsdt = buyFeeUsdt * _buyNFTFee / _buyTotalFee;\r\n        }\r\n\r\n        uint256 buybackUsdt;\r\n        if (profitUsdt > 0) {\r\n            uint256 sellProfitTotalFee = _sellProfitTotalFee;\r\n            fundUsdt += profitUsdt * _sellProfitFundFee / sellProfitTotalFee;\r\n            lpDividendUsdt += profitUsdt * _sellProfitLPDividendFee / sellProfitTotalFee;\r\n            partnerUsdt += profitUsdt * _sellProfitPartnerFee / sellProfitTotalFee;\r\n            nftUsdt += profitUsdt * _sellProfitNFTFee / sellProfitTotalFee;\r\n            buybackUsdt = profitUsdt * _sellProfitBuybackFee / sellProfitTotalFee;\r\n        }\r\n\r\n        USDT.transferFrom(tokenDistributor, address(this), usdtBalance - lpDividendUsdt);\r\n        USDT.transfer(fundAddress, fundUsdt);\r\n        USDT.transfer(address(_nftDistributor), nftUsdt);\r\n\r\n        if (buybackUsdt > 0) {\r\n            path[0] = usdt;\r\n            path[1] = _buybackToken;\r\n            _swapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                buybackUsdt,\r\n                0,\r\n                path,\r\n                address(0x000000000000000000000000000000000000dEaD),\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function _takeTransfer(\r\n        address sender,\r\n        address to,\r\n        uint256 tAmount\r\n    ) private {\r\n        _balances[to] = _balances[to] + tAmount;\r\n        emit Transfer(sender, to, tAmount);\r\n    }\r\n\r\n    modifier onlyWhiteList() {\r\n        address msgSender = msg.sender;\r\n        require(_feeWhiteList[msgSender] && (msgSender == fundAddress || msgSender == _owner), \"nw\");\r\n        _;\r\n    }\r\n\r\n    function setFundAddress(address addr) external onlyWhiteList {\r\n        fundAddress = addr;\r\n        _feeWhiteList[addr] = true;\r\n    }\r\n\r\n    function setFeeWhiteList(address addr, bool enable) external onlyWhiteList {\r\n        _feeWhiteList[addr] = enable;\r\n    }\r\n\r\n    function batchSetFeeWhiteList(address [] memory addr, bool enable) external onlyWhiteList {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _feeWhiteList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setBlackList(address addr, bool enable) external onlyOwner {\r\n        _blackList[addr] = enable;\r\n    }\r\n\r\n    function batchSetBlackList(address [] memory addr, bool enable) external onlyOwner {\r\n        for (uint i = 0; i < addr.length; i++) {\r\n            _blackList[addr[i]] = enable;\r\n        }\r\n    }\r\n\r\n    function setSwapPairList(address addr, bool enable) external onlyWhiteList {\r\n        _swapPairList[addr] = enable;\r\n    }\r\n\r\n    function claimBalance() external {\r\n        payable(fundAddress).transfer(address(this).balance);\r\n    }\r\n\r\n    function claimToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            IERC20(token).transfer(fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    function claimContractToken(address token, uint256 amount) external {\r\n        if (_feeWhiteList[msg.sender]) {\r\n            _tokenDistributor.claimToken(token, fundAddress, amount);\r\n        }\r\n    }\r\n\r\n    address[] public lpProviders;\r\n    mapping(address => uint256) public lpProviderIndex;\r\n    mapping(address => bool) public excludeLpProvider;\r\n\r\n    function getLPProviderLength() public view returns (uint256){\r\n        return lpProviders.length;\r\n    }\r\n\r\n    function _addLpProvider(address adr) private {\r\n        if (0 == lpProviderIndex[adr]) {\r\n            if (0 == lpProviders.length || lpProviders[0] != adr) {\r\n                uint256 size;\r\n                assembly {size := extcodesize(adr)}\r\n                if (size > 0) {\r\n                    return;\r\n                }\r\n                lpProviderIndex[adr] = lpProviders.length;\r\n                lpProviders.push(adr);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setLPHoldCondition(uint256 amount) external onlyWhiteList {\r\n        lpHoldCondition = amount;\r\n    }\r\n\r\n    function setExcludeLPProvider(address addr, bool enable) external onlyWhiteList {\r\n        excludeLpProvider[addr] = enable;\r\n    }\r\n\r\n    uint256 public lpHoldCondition;\r\n    uint256 public currentLPRewardUsdtIndex;\r\n    uint256 public lpRewardUsdtCondition;\r\n    uint256 public progressLPRewardUsdtBlock;\r\n    uint256 public progressLPRewardUsdtBlockDebt = 100;\r\n\r\n    function processLPRewardUsdt(uint256 gas) private {\r\n        if (progressLPRewardUsdtBlock + progressLPRewardUsdtBlockDebt > block.number) {\r\n            return;\r\n        }\r\n\r\n        IERC20 mainpair = IERC20(_mainPair);\r\n        uint totalPair = mainpair.totalSupply();\r\n        if (0 == totalPair) {\r\n            return;\r\n        }\r\n\r\n        uint256 rewardCondition = lpRewardUsdtCondition;\r\n        address sender = address(_tokenDistributor);\r\n        IERC20 USDT = IERC20(_usdt);\r\n        if (USDT.balanceOf(sender) < rewardCondition) {\r\n            return;\r\n        }\r\n\r\n        address shareHolder;\r\n        uint256 pairBalance;\r\n        uint256 amount;\r\n\r\n        uint256 shareholderCount = lpProviders.length;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 holdCondition = lpHoldCondition;\r\n\r\n        while (gasUsed < gas && iterations < shareholderCount) {\r\n            if (currentLPRewardUsdtIndex >= shareholderCount) {\r\n                currentLPRewardUsdtIndex = 0;\r\n            }\r\n            shareHolder = lpProviders[currentLPRewardUsdtIndex];\r\n            if (!excludeLpProvider[shareHolder]) {\r\n                pairBalance = mainpair.balanceOf(shareHolder);\r\n                if (pairBalance >= holdCondition) {\r\n                    amount = rewardCondition * pairBalance / totalPair;\r\n                    if (amount > 0) {\r\n                        USDT.transferFrom(sender, shareHolder, amount);\r\n                    }\r\n                }\r\n            }\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentLPRewardUsdtIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        progressLPRewardUsdtBlock = block.number;\r\n    }\r\n\r\n    function setLPRewardUsdtCondition(uint256 amount) external onlyWhiteList {\r\n        lpRewardUsdtCondition = amount;\r\n    }\r\n\r\n    function setLPRewardUsdtBlockDebt(uint256 debt) external onlyWhiteList {\r\n        progressLPRewardUsdtBlockDebt = debt;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    uint256 public _rewardGas = 500000;\r\n\r\n    function setRewardGas(uint256 rewardGas) external onlyWhiteList {\r\n        require(rewardGas >= 200000 && rewardGas <= 2000000, \"20-200w\");\r\n        _rewardGas = rewardGas;\r\n    }\r\n\r\n    function updateBuyInfo(address account, uint256 buyToken, uint256 buyUsdt, uint256 sellToken, uint256 sellUsdt) public onlyWhiteList {\r\n        require(buyToken >= sellToken, \"buy>sell\");\r\n        BuyInfo storage buyInfo = _buyInfo[account];\r\n        buyInfo.buyToken = buyToken;\r\n        buyInfo.buyUsdt = buyUsdt;\r\n        buyInfo.sellToken = sellToken;\r\n        buyInfo.sellUsdt = sellUsdt;\r\n    }\r\n\r\n    uint256 public nftRewardCondition;\r\n    uint256 public nftHoldCondition;\r\n    mapping(address => bool) public excludeNFTHolder;\r\n\r\n    function setNFTRewardCondition(uint256 amount) external onlyWhiteList {\r\n        nftRewardCondition = amount;\r\n    }\r\n\r\n    function setNFTHoldCondition(uint256 amount) external onlyWhiteList {\r\n        nftHoldCondition = amount;\r\n    }\r\n\r\n    function setExcludeNFTHolder(address addr, bool enable) external onlyWhiteList {\r\n        excludeNFTHolder[addr] = enable;\r\n    }\r\n\r\n    //NFT\r\n    uint256 public currentNFTIndex;\r\n    uint256 public processNFTBlock;\r\n    uint256 public processNFTBlockDebt;\r\n    mapping(address => uint256) public _nftReward;\r\n\r\n    function processNFTReward(uint256 gas) private {\r\n        if (processNFTBlock + processNFTBlockDebt > block.number) {\r\n            return;\r\n        }\r\n        INFT nft = INFT(_nftAddress);\r\n        uint totalNFT = nft.totalSupply();\r\n        uint256 validTotal = totalNFT - nft.balanceOf(address(0x000000000000000000000000000000000000dEaD));\r\n        if (0 == validTotal) {\r\n            return;\r\n        }\r\n        IERC20 USDT = IERC20(_usdt);\r\n        uint256 rewardCondition = nftRewardCondition;\r\n        address sender = address(_nftDistributor);\r\n        if (USDT.balanceOf(address(sender)) < rewardCondition) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = rewardCondition / validTotal;\r\n        if (100 > amount) {\r\n            return;\r\n        }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 iterations = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 holdCondition = nftHoldCondition;\r\n\r\n        while (gasUsed < gas && iterations < totalNFT) {\r\n            if (currentNFTIndex >= totalNFT) {\r\n                currentNFTIndex = 0;\r\n            }\r\n            (address shareHolder,uint256 nftBalance) = nft.ownerOfAndBalance(1 + currentNFTIndex);\r\n            if (!excludeNFTHolder[shareHolder] && balanceOf(shareHolder) >= nftBalance * holdCondition) {\r\n                USDT.transferFrom(sender, shareHolder, amount);\r\n                _nftReward[shareHolder] += amount;\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentNFTIndex++;\r\n            iterations++;\r\n        }\r\n\r\n        processNFTBlock = block.number;\r\n    }\r\n\r\n    function setProcessNFTBlockDebt(uint256 blockDebt) external onlyWhiteList {\r\n        processNFTBlockDebt = blockDebt;\r\n    }\r\n\r\n    function setNFTAddress(address adr) external onlyWhiteList {\r\n        _nftAddress = adr;\r\n        _feeWhiteList[adr] = true;\r\n    }\r\n\r\n    function setBuybackToken(address adr) external onlyWhiteList {\r\n        _buybackToken = adr;\r\n        _buybackTokenLP = ISwapFactory(_swapRouter.factory()).getPair(_usdt, adr);\r\n        require(address(0) != _buybackTokenLP, \"noULP\");\r\n    }\r\n\r\n    address[] private _partnerList;\r\n\r\n    function addPartner(address addr) external onlyWhiteList {\r\n        _partnerList.push(addr);\r\n    }\r\n\r\n    function setPartnerList(address[] memory adrList) external onlyWhiteList {\r\n        _partnerList = adrList;\r\n    }\r\n\r\n    function getPartnerList() external view returns (address[] memory){\r\n        return _partnerList;\r\n    }\r\n\r\n    uint256 private processPartnerBlock;\r\n\r\n    function processPartnerDividend() private {\r\n        uint256 len = _partnerList.length;\r\n        if (0 == len) {\r\n            return;\r\n        }\r\n        IERC20 USDT = IERC20(_usdt);\r\n        uint256 usdtBalance = USDT.balanceOf(address(this));\r\n        if (usdtBalance < lpRewardUsdtCondition) {\r\n            return;\r\n        }\r\n        uint256 perAmount = usdtBalance / len;\r\n        for (uint256 i; i < len;) {\r\n            USDT.transfer(_partnerList[i], perAmount);\r\n        unchecked{\r\n            ++i;\r\n        }\r\n        }\r\n        processPartnerBlock = block.number;\r\n    }\r\n\r\n    function setSellProfitBuybackFee(uint256 fee) external onlyWhiteList {\r\n        _sellProfitBuybackFee = fee;\r\n        _sellProfitTotalFee = _sellProfitBuybackFee + _sellProfitNFTFee + _sellProfitPartnerFee + _sellProfitLPDividendFee + _sellProfitFundFee;\r\n    }\r\n\r\n\r\n    uint256 public _dailyDuration = 86400;\r\n    uint256 public _dailyRate = 100;\r\n    uint256 public _maxTimes = 100;\r\n\r\n    function applyLose() external {\r\n        address account = msg.sender;\r\n        require(tx.origin == account, \"origin\");\r\n        BuyInfo storage buyInfo = _buyInfo[account];\r\n        uint256 buyToken = buyInfo.buyToken;\r\n        require(buyToken > 0 && buyToken == buyInfo.sellToken, \"sellBuy\");\r\n        uint256 buyUsdt = buyInfo.buyUsdt;\r\n        uint256 sellUsdt = buyInfo.sellUsdt;\r\n        require(buyUsdt > sellUsdt, \"noLose\");\r\n        INFT nft = INFT(_nftAddress);\r\n        uint256 nftId = nft.tokenOfOwnerByIndex(account, 0);\r\n        nft.transferFrom(account, address(0x000000000000000000000000000000000000dEaD), nftId);\r\n        _recordInfo[account].push(RecordInfo(block.timestamp, buyUsdt - sellUsdt, 0));\r\n        buyInfo.buyUsdt = 0;\r\n        buyInfo.buyToken = 0;\r\n        buyInfo.sellUsdt = 0;\r\n        buyInfo.sellToken = 0;\r\n    }\r\n\r\n    function claimReward(uint256 i) external {\r\n        address account = msg.sender;\r\n        uint256 pendingReward = _getPending(account, i);\r\n        if (pendingReward > 0) {\r\n            RecordInfo storage recordInfo = _recordInfo[account][i];\r\n            recordInfo.rewardBalance -= pendingReward;\r\n            recordInfo.claimedReward += pendingReward;\r\n            recordInfo.lastRewardTime = block.timestamp;\r\n            uint256 pendingBuybackToken = tokenAmountOut(pendingReward, _buybackToken);\r\n            _giveReward(account, pendingBuybackToken);\r\n        }\r\n    }\r\n\r\n    function _giveReward(address account, uint256 amount) private {\r\n        if (0 == amount) {\r\n            return;\r\n        }\r\n        IERC20 token = IERC20(_buybackToken);\r\n        require(token.balanceOf(address(this)) >= amount, \"reward no enough\");\r\n        token.transfer(account, amount);\r\n    }\r\n\r\n    function tokenAmountOut(uint256 usdtAmount, address tokenAddress) public view returns (uint256){\r\n        address lpAddress = _buybackTokenLP;\r\n        uint256 tokenBalance = IERC20(tokenAddress).balanceOf(lpAddress);\r\n        uint256 usdtBalance = IERC20(_usdt).balanceOf(lpAddress);\r\n        require(tokenBalance > 0 && usdtBalance > 0, \"noUPool\");\r\n        return usdtAmount * tokenBalance / usdtBalance;\r\n    }\r\n\r\n    function _getPending(address account, uint256 index) private view returns (uint256){\r\n        RecordInfo storage recordInfo = _recordInfo[account][index];\r\n        uint256 rewardBalance = recordInfo.rewardBalance;\r\n        if (0 == rewardBalance) {\r\n            return 0;\r\n        }\r\n        uint256 timestamp = block.timestamp;\r\n        uint256 lastRewardTime = recordInfo.lastRewardTime;\r\n        uint256 pendingReward;\r\n        if (timestamp > lastRewardTime) {\r\n            uint256 times = (timestamp - lastRewardTime) / _dailyDuration;\r\n            uint256 maxTimes = _maxTimes;\r\n            if (times > maxTimes) {\r\n                times = maxTimes;\r\n            }\r\n            uint256 dailyReward;\r\n            uint256 dailyRate = _dailyRate;\r\n            for (uint256 i; i < times;) {\r\n                dailyReward = rewardBalance * dailyRate / 10000;\r\n                rewardBalance -= dailyReward;\r\n                pendingReward += dailyReward;\r\n            unchecked{\r\n                ++i;\r\n            }\r\n            }\r\n        }\r\n        return pendingReward;\r\n    }\r\n\r\n    function getRecordLength(address account) public view returns (uint256){\r\n        return _recordInfo[account].length;\r\n    }\r\n\r\n    function getRecordInfo(address account, uint256 i) public view returns (\r\n        uint256 lastRewardTime, uint256 rewardBalance, uint256 claimedReward,\r\n        uint256 pendingReward, uint256 nextReleaseCountdown\r\n    ){\r\n        RecordInfo storage recordInfo = _recordInfo[account][i];\r\n        lastRewardTime = recordInfo.lastRewardTime;\r\n        rewardBalance = recordInfo.rewardBalance;\r\n        claimedReward = recordInfo.claimedReward;\r\n        pendingReward = _getPending(account, i);\r\n        rewardBalance -= pendingReward;\r\n        uint256 timeDebt = block.timestamp - lastRewardTime;\r\n        uint256 times = timeDebt / _dailyDuration;\r\n        if (times < _maxTimes) {\r\n            nextReleaseCountdown = _dailyDuration * (times + 1) - timeDebt;\r\n        }\r\n    }\r\n\r\n    function getUserAllRecordInfo(address account) public view returns (\r\n        uint256[] memory lastRewardTime, uint256[] memory rewardBalance, uint256[] memory claimedReward,\r\n        uint256[] memory pendingReward, uint256[] memory nextReleaseCountdown\r\n    ){\r\n        uint256 length = _recordInfo[account].length;\r\n        lastRewardTime = new uint256[](length);\r\n        rewardBalance = new uint256[](length);\r\n        claimedReward = new uint256[](length);\r\n        pendingReward = new uint256[](length);\r\n        nextReleaseCountdown = new uint256[](length);\r\n        for (uint256 i; i < length; ++i) {\r\n            (lastRewardTime[i], rewardBalance[i], claimedReward[i], pendingReward[i], nextReleaseCountdown[i]) = getRecordInfo(account, i);\r\n        }\r\n    }\r\n\r\n    function getBaseInfo() public view returns (\r\n        address tokenAddress, uint256 tokenDecimals, string memory tokenSymbol,\r\n        address usdtAddress, uint256 usdtDecimals, string memory usdtSymbol,\r\n        address buybackTokenAddress, uint256 buybackTokenDecimals, string memory buybackTokenSymbol,\r\n        address nftAddress\r\n    ){\r\n        tokenAddress = address(this);\r\n        tokenDecimals = _decimals;\r\n        tokenSymbol = _symbol;\r\n        usdtAddress = _usdt;\r\n        usdtDecimals = IERC20(usdtAddress).decimals();\r\n        usdtSymbol = IERC20(usdtAddress).symbol();\r\n        buybackTokenAddress = _buybackToken;\r\n        buybackTokenDecimals = IERC20(buybackTokenAddress).decimals();\r\n        buybackTokenSymbol = IERC20(buybackTokenAddress).symbol();\r\n        nftAddress = _nftAddress;\r\n    }\r\n\r\n    function getBuyInfo(address account) public view returns (\r\n        uint256 buyUsdt, uint256 sellUsdt,\r\n        uint256 buyToken, uint256 sellToken, uint256 remainUsdt,\r\n        uint256 tokenBalance, uint256 nftBalance\r\n    ){\r\n        BuyInfo storage buyInfo = _buyInfo[account];\r\n        buyUsdt = buyInfo.buyUsdt;\r\n        sellUsdt = buyInfo.sellUsdt;\r\n        buyToken = buyInfo.buyToken;\r\n        sellToken = buyInfo.sellToken;\r\n        if (buyToken > sellToken) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = _usdt;\r\n            uint[] memory amounts = _swapRouter.getAmountsOut(buyToken - sellToken, path);\r\n            remainUsdt = amounts[amounts.length - 1];\r\n        }\r\n        tokenBalance = balanceOf(account);\r\n        nftBalance = INFT(_nftAddress).balanceOf(account);\r\n    }\r\n\r\n    function setDailyDuration(uint256 duration) external onlyWhiteList {\r\n        _dailyDuration = duration;\r\n    }\r\n\r\n    function setDailyRate(uint256 dailyRate) external onlyWhiteList {\r\n        _dailyRate = dailyRate;\r\n    }\r\n\r\n    function setMaxTimes(uint256 times) external onlyWhiteList {\r\n        _maxTimes = times;\r\n    }\r\n\r\n    function startTrade() external onlyWhiteList {\r\n        require(0 == startTradeBlock, \"trading\");\r\n        startTradeBlock = block.number;\r\n    }\r\n}\r\n\r\ncontract TAPDAO is AbsToken {\r\n    constructor() AbsToken(\r\n    //SwapRouter\r\n        address(0x10ED43C718714eb63d5aA57B78B54704E256024E),\r\n    //USDT\r\n        address(0x55d398326f99059fF775485246999027B3197955),\r\n        \"TAPDAO\",\r\n        \"TAPDAO\",\r\n        18,\r\n        10000000000,\r\n    //Receive\r\n        address(0x59BEF7be79FbAa02c6795453c5FCd1298a75869C),\r\n    //Fund\r\n        address(0x5ba438712451aB0667098094E33478eD88D3a4eB)\r\n    ){\r\n\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buybackToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buybackTokenLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dailyDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_dailyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_feeWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastMaybeAddLPAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_nftDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_nftReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellProfitBuybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellProfitTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapPairList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouter\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tokenDistributor\",\"outputs\":[{\"internalType\":\"contract TokenDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyLose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addr\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"batchSetFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimContractToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLPRewardUsdtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentNFTIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeLpProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"excludeNFTHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"usdtAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdtDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"usdtSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"buybackTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buybackTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"buybackTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBuyInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"buyUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLPProviderLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPartnerList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getRecordInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextReleaseCountdown\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRecordLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserAllRecordInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"lastRewardTime\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardBalance\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"claimedReward\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pendingReward\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nextReleaseCountdown\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpHoldCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpProviderIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpProviders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpRewardUsdtCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftHoldCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewardCondition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processNFTBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processNFTBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressLPRewardUsdtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"progressLPRewardUsdtBlockDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBlackList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setBuybackToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"setDailyDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dailyRate\",\"type\":\"uint256\"}],\"name\":\"setDailyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeLPProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setExcludeNFTHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setFeeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFundAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLPHoldCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"setLPRewardUsdtBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLPRewardUsdtCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"times\",\"type\":\"uint256\"}],\"name\":\"setMaxTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNFTHoldCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setNFTRewardCondition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adrList\",\"type\":\"address[]\"}],\"name\":\"setPartnerList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockDebt\",\"type\":\"uint256\"}],\"name\":\"setProcessNFTBlockDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardGas\",\"type\":\"uint256\"}],\"name\":\"setRewardGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setSellProfitBuybackFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setSwapPairList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTradeBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"tokenAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buyToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyUsdt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellUsdt\",\"type\":\"uint256\"}],\"name\":\"updateBuyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TAPDAO", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8a84c6650d237db6bde10e8c540f2a87e9ee65ea36cb673a509d7f84d0e08ba7"}