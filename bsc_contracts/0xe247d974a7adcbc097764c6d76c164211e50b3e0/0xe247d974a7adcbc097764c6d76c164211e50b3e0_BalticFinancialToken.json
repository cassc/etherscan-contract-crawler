{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IFactoryV2 {\r\n    event PairCreated(address indexed token0, address indexed token1, address lpPair, uint);\r\n    function getPair(address tokenA, address tokenB) external view returns (address lpPair);\r\n    function createPair(address tokenA, address tokenB) external returns (address lpPair);\r\n}\r\n\r\ninterface IV2Pair {\r\n    function factory() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function sync() external;\r\n}\r\n\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IRouter02 is IRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface AntiSnipe {\r\n    function checkUser(address from, address to, uint256 amt) external returns (bool);\r\n    function setLaunch(address _initialLpPair, uint32 _liqAddBlock, uint64 _liqAddStamp, uint8 dec) external;\r\n    function setLpPair(address pair, bool enabled) external;\r\n    function setProtections(bool _as, bool _ab) external;\r\n    function removeSniper(address account) external;\r\n    function removeBlacklisted(address account) external;\r\n    function transfer(address sender) external;\r\n    function withdraw() external;\r\n    function isBlacklisted(address account) external view returns (bool);\r\n    function setBlacklistEnabled(address account, bool enabled) external;\r\n    function setBlacklistEnabledMultiple(address[] memory accounts, bool enabled) external;\r\n}\r\n\r\ncontract BalticFinancialToken is IERC20 {\r\n    // Ownership moved to in-contract for customizability.\r\n    address private _owner;\r\n\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => bool) lpPairs;\r\n    uint256 private timeSinceLastPair = 0;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    mapping (address => bool) private _liquidityHolders;\r\n    mapping (address => bool) private _isExcludedFromProtection;\r\n    mapping (address => bool) private _isExcludedFromFees;\r\n    mapping (address => bool) private _isExcludedFromLimits;\r\n   \r\n    uint256 constant private startingSupply = 4_000_000_000;\r\n\r\n    string constant private _name = \"Baltic Miners Financial Token\";\r\n    string constant private _symbol = \"BMFT\";\r\n    uint8 constant private _decimals = 5;\r\n\r\n    uint256 private _tTotal = startingSupply * 10**_decimals;\r\n    uint256 constant private MAX = ~uint256(0);\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _aSupply = _rTotal / _tTotal;\r\n\r\n    struct Fees {\r\n        uint16 liquidity;\r\n        uint16 insurance;\r\n        uint16 treasury;\r\n        uint16 firePit;\r\n        uint16 total;\r\n    }\r\n\r\n    Fees public _buyTaxes = Fees({\r\n        liquidity: 1000,\r\n        insurance: 250,\r\n        treasury: 250,\r\n        firePit: 100,\r\n        total: 1600\r\n    });\r\n\r\n    Fees public _sellTaxes = Fees({\r\n        liquidity: 1400,\r\n        insurance: 250,\r\n        treasury: 250,\r\n        firePit: 100,\r\n        total: 2000\r\n    });\r\n\r\n    Fees public _transferTaxes = Fees({\r\n        liquidity: 0,\r\n        insurance: 0,\r\n        treasury: 0,\r\n        firePit: 0,\r\n        total: 0\r\n    });\r\n\r\n    uint256 constant public maxBuyTaxes = 2000;\r\n    uint256 constant public maxSellTaxes = 2000;\r\n    uint256 constant public maxTransferTaxes = 2000;\r\n    uint256 constant public maxRoundtripTax = 4000;\r\n    uint256 constant masterTaxDivisor = 10000;\r\n\r\n    IRouter02 public dexRouter;\r\n    address public lpPair;\r\n    IV2Pair v2Pair_lpPair;\r\n    address constant public DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address constant public USDT = 0x55d398326f99059fF775485246999027B3197955;\r\n    IERC20 constant public IERC20_USDT = IERC20(USDT);\r\n\r\n    struct TaxWallets {\r\n        address payable insurance;\r\n        address payable treasury;\r\n        address payable firePit;\r\n        address liquidity;\r\n    }\r\n\r\n    TaxWallets public _taxWallets = TaxWallets({\r\n        insurance: payable(0xe29A4b2dc4c32C24e9497E0C0839CA1Dd613834f),\r\n        treasury: payable(0x8Dbf6F465E67280850d7c4e936ac97426F83f985),\r\n        firePit: payable(0xF24d31eF4F2E26EfADb9E889B2DD20b30aD5f9E2),\r\n        liquidity: 0x917152Ad6Bd8527d84ad5C7289e4d2A63E04A792\r\n    });\r\n    \r\n    bool inSwap;\r\n    bool public contractSwapEnabled = false;\r\n    uint256 public swapThreshold;\r\n    uint256 public swapAmount;\r\n    bool public piContractSwapsEnabled;\r\n    uint256 public piSwapPercent;\r\n    \r\n    uint256 private _maxTxAmount = 10000;\r\n    uint256 private _maxWalletSize = 10000;\r\n\r\n    bool public tradingEnabled = false;\r\n    bool public _hasLiqBeenAdded = false;\r\n    AntiSnipe antiSnipe;\r\n\r\n    bool public autoRebaseEnabled = false;\r\n    uint256 public autoRebaseInitializationStamp;\r\n    uint256 public autoRebaseLastTriggered;\r\n    uint256 public rebaseTimeInMinutes = 480;\r\n    uint256 public rebaseRate = 11830;\r\n    uint8 constant private _rateDecimals = 7;\r\n\r\n    struct UserLimits {\r\n        uint256 totalBought;\r\n        uint256 lastSellStamp;\r\n        uint256 sellLimitPerTime;\r\n        uint256 soldDuringLimit;\r\n    }\r\n\r\n    mapping (address => bool) limitedWallet;\r\n    mapping (address => UserLimits) userLimits;\r\n    uint256 public limitTime = 4 weeks;\r\n    uint256 public limitPercent = 2000;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event ContractSwapEnabledUpdated(bool enabled);\r\n    event AutoLiquify(uint256 amountCurrency, uint256 amountTokens);\r\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\r\n    \r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Caller =/= owner.\");\r\n        _;\r\n    }\r\n    \r\n    constructor () payable {\r\n        _tOwned[msg.sender] = _rTotal;\r\n        emit Transfer(address(0), msg.sender, _tTotal);\r\n        emit OwnershipTransferred(address(0), _owner);\r\n\r\n        // Set the owner.\r\n        _owner = msg.sender;\r\n\r\n        if (block.chainid == 56) {\r\n            dexRouter = IRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        } else if (block.chainid == 97) {\r\n            dexRouter = IRouter02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1);\r\n        } else if (block.chainid == 1 || block.chainid == 4 || block.chainid == 3) {\r\n            dexRouter = IRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        } else if (block.chainid == 43114) {\r\n            dexRouter = IRouter02(0x60aE616a2155Ee3d9A68541Ba4544862310933d4);\r\n        } else if (block.chainid == 250) {\r\n            dexRouter = IRouter02(0xF491e7B69E4244ad4002BC14e878a34207E38c29);\r\n        } else {\r\n            revert();\r\n        }\r\n\r\n        lpPair = IFactoryV2(dexRouter.factory()).createPair(USDT, address(this));\r\n        address bnbPair = IFactoryV2(dexRouter.factory()).createPair(dexRouter.WETH(), address(this));\r\n        lpPairs[lpPair] = true;\r\n        lpPairs[bnbPair] = true;\r\n        v2Pair_lpPair = IV2Pair(lpPair);\r\n\r\n        _approve(_owner, address(dexRouter), type(uint256).max);\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n        IERC20_USDT.approve(address(dexRouter), type(uint256).max);\r\n\r\n        _isExcludedFromFees[_owner] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromFees[DEAD] = true;\r\n        _liquidityHolders[_owner] = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n    // Ownable removed as a lib and added here to allow for custom transfers and renouncements.\r\n    // This allows for removal of ownership privileges from the owner once renounced or transferred.\r\n    function transferOwner(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        require(newOwner != DEAD, \"Call renounceOwnership to transfer owner to the zero address.\");\r\n        setExcludedFromFees(_owner, false);\r\n        setExcludedFromFees(newOwner, true);\r\n        \r\n        if(balanceOf(_owner) > 0) {\r\n            finalizeTransfer(_owner, newOwner, balanceOf(_owner), false, false, true);\r\n        }\r\n        \r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n        \r\n    }\r\n\r\n    function renounceOwnership() external onlyOwner {\r\n        setExcludedFromFees(_owner, false);\r\n        address oldOwner = _owner;\r\n        _owner = address(0);\r\n        emit OwnershipTransferred(oldOwner, address(0));\r\n    }\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n//===============================================================================================================\r\n\r\n    function totalSupply() external view override returns (uint256) { return _tTotal; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return _owner; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tOwned[account] / _aSupply;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address sender, address spender, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: Zero Address\");\r\n        require(spender != address(0), \"ERC20: Zero Address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n        emit Approval(sender, spender, amount);\r\n    }\r\n\r\n    function approveContractContingency() external onlyOwner returns (bool) {\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function setNewRouter(address newRouter) external onlyOwner {\r\n        IRouter02 _newRouter = IRouter02(newRouter);\r\n        address get_pair = IFactoryV2(_newRouter.factory()).getPair(address(this), _newRouter.WETH());\r\n        if (get_pair == address(0)) {\r\n            lpPair = IFactoryV2(_newRouter.factory()).createPair(address(this), _newRouter.WETH());\r\n        }\r\n        else {\r\n            lpPair = get_pair;\r\n        }\r\n        dexRouter = _newRouter;\r\n        v2Pair_lpPair = IV2Pair(lpPair);\r\n        _approve(address(this), address(dexRouter), type(uint256).max);\r\n    }\r\n\r\n    function setLpPair(address pair, bool enabled) external onlyOwner {\r\n        if (!enabled) {\r\n            lpPairs[pair] = false;\r\n            antiSnipe.setLpPair(pair, false);\r\n        } else {\r\n            if (timeSinceLastPair != 0) {\r\n                require(block.timestamp - timeSinceLastPair > 3 days, \"3 Day cooldown.!\");\r\n            }\r\n            lpPairs[pair] = true;\r\n            timeSinceLastPair = block.timestamp;\r\n            antiSnipe.setLpPair(pair, true);\r\n        }\r\n    }\r\n\r\n    function setInitializer(address initializer) external onlyOwner {\r\n        require(!_hasLiqBeenAdded);\r\n        require(initializer != address(this), \"Can't be self.\");\r\n        antiSnipe = AntiSnipe(initializer);\r\n    }\r\n\r\n    function isExcludedFromLimits(address account) public view returns (bool) {\r\n        return _isExcludedFromLimits[account];\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns(bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function isExcludedFromProtection(address account) external view returns (bool) {\r\n        return _isExcludedFromProtection[account];\r\n    }\r\n\r\n    function setExcludedFromFees(address account, bool enabled) public onlyOwner {\r\n        _isExcludedFromFees[account] = enabled;\r\n    }\r\n\r\n    function setExcludedFromLimits(address account, bool enabled) external onlyOwner {\r\n        _isExcludedFromLimits[account] = enabled;\r\n    }\r\n\r\n    function setExcludedFromProtection(address account, bool enabled) external onlyOwner {\r\n        _isExcludedFromProtection[account] = enabled;\r\n    }\r\n\r\n    function removeBlacklisted(address account) external onlyOwner {\r\n        // To remove from the pre-built blacklist ONLY. Cannot add to blacklist.\r\n        antiSnipe.removeBlacklisted(account);\r\n    }\r\n\r\n    function isBlacklisted(address account) external view returns (bool) {\r\n        return antiSnipe.isBlacklisted(account);\r\n    }\r\n\r\n    function removeSniper(address account) external onlyOwner {\r\n        antiSnipe.removeSniper(account);\r\n    }\r\n\r\n    function setProtectionSettings(bool _antiSnipe, bool _antiBlock) external onlyOwner {\r\n        antiSnipe.setProtections(_antiSnipe, _antiBlock);\r\n    }\r\n\r\n    function setWallets(address payable liquidity, address payable insurance, address payable firePit, address payable treasury) external onlyOwner {\r\n        _taxWallets.liquidity = payable(liquidity);\r\n        _taxWallets.insurance = payable(insurance);\r\n        _taxWallets.firePit = payable(firePit);\r\n        _taxWallets.treasury = payable(treasury);\r\n    }\r\n\r\n    function setTaxesBuy(uint16 liquidity, uint16 insurance, uint16 treasury, uint16 firePit) external onlyOwner {\r\n        _buyTaxes.liquidity = liquidity;\r\n        _buyTaxes.insurance = insurance;\r\n        _buyTaxes.treasury = treasury;\r\n        _buyTaxes.firePit = firePit;\r\n        _buyTaxes.total = liquidity + insurance + treasury + firePit;\r\n        require(_buyTaxes.total <= maxBuyTaxes, \"Cannot exceed maximums.\");\r\n        require(_buyTaxes.total + _sellTaxes.total <= maxRoundtripTax, \"Cannot exceed roundtrip maximum.\");\r\n    }\r\n\r\n    function setTaxesSell(uint16 liquidity, uint16 insurance, uint16 treasury, uint16 firePit) external onlyOwner {\r\n        _sellTaxes.liquidity = liquidity;\r\n        _sellTaxes.insurance = insurance;\r\n        _sellTaxes.treasury = treasury;\r\n        _sellTaxes.firePit = firePit;\r\n        _sellTaxes.total = liquidity + insurance + treasury + firePit;\r\n        require(_sellTaxes.total <= maxSellTaxes, \"Cannot exceed maximums.\");\r\n        require(_sellTaxes.total + _sellTaxes.total <= maxRoundtripTax, \"Cannot exceed roundtrip maximum.\");\r\n    }\r\n\r\n    function setTaxesTransfer(uint16 liquidity, uint16 insurance, uint16 treasury, uint16 firePit) external onlyOwner {\r\n        _buyTaxes.liquidity = liquidity;\r\n        _buyTaxes.insurance = insurance;\r\n        _buyTaxes.treasury = treasury;\r\n        _buyTaxes.firePit = firePit;\r\n        _buyTaxes.total = liquidity + insurance + treasury + firePit;\r\n        require(_transferTaxes.total <= maxTransferTaxes, \"Cannot exceed maximums.\");\r\n    }\r\n\r\n    function setSwapSettings(uint256 thresholdPercent, uint256 thresholdDivisor, uint256 amountPercent, uint256 amountDivisor) external onlyOwner {\r\n        swapThreshold = (_tTotal * thresholdPercent) / thresholdDivisor;\r\n        swapAmount = (_tTotal * amountPercent) / amountDivisor;\r\n        require(swapThreshold <= swapAmount, \"Threshold cannot be above amount.\");\r\n    }\r\n\r\n    function setPriceImpactSwapAmount(uint256 priceImpactSwapPercent) external onlyOwner {\r\n        require(priceImpactSwapPercent <= 200, \"Cannot set above 2%.\");\r\n        piSwapPercent = priceImpactSwapPercent;\r\n    }\r\n\r\n    function setContractSwapEnabled(bool swapEnabled, bool priceImpactSwapEnabled) external onlyOwner {\r\n        contractSwapEnabled = swapEnabled;\r\n        piContractSwapsEnabled = priceImpactSwapEnabled;\r\n        emit ContractSwapEnabledUpdated(swapEnabled);\r\n    }\r\n\r\n    function setAutoRebaseEnabled(bool enabled) external onlyOwner {\r\n        if (enabled) {\r\n            autoRebaseLastTriggered = block.timestamp;\r\n            if(autoRebaseInitializationStamp == 0) {\r\n                autoRebaseInitializationStamp = block.timestamp;\r\n            }\r\n        }\r\n        autoRebaseEnabled = enabled;\r\n    }\r\n\r\n    function setRebaseSettings(uint256 rate, uint256 timeInMinutes) external onlyOwner {\r\n        require (rebaseTimeInMinutes >= 15, \"Must be above 15 minutes minimum.\");\r\n        rebaseRate = rate;\r\n        rebaseTimeInMinutes = timeInMinutes;\r\n        autoRebaseLastTriggered = block.timestamp;\r\n    }\r\n\r\n    function setLimitedWallet(address account, bool enabled) external onlyOwner {\r\n        require(account != address(this) && account != address(dexRouter), \"Cannot set contract or router.\");\r\n        limitedWallet[account] = enabled;\r\n        if (enabled) {\r\n            userLimits[account].totalBought = balanceOf(account);\r\n            userLimits[account].sellLimitPerTime = (userLimits[account].totalBought * limitPercent) / 10000;\r\n        }\r\n    }\r\n\r\n    function setLimitedWalletSettings(uint256 timeInMinutes, uint256 percentInHundreds) external onlyOwner {\r\n        limitTime = timeInMinutes * 1 minutes;\r\n        limitPercent = percentInHundreds;\r\n    }\r\n\r\n    function getLimitedWalletInfo(address account) external view returns (uint256 totalBought, uint256 lastSellStamp, uint256 sellLimitPerTime, uint256 soldDuringCurrentLimit) {\r\n        return(userLimits[account].totalBought / (10**_decimals),\r\n               userLimits[account].lastSellStamp, \r\n               userLimits[account].sellLimitPerTime / (10**_decimals), \r\n               userLimits[account].soldDuringLimit / (10**_decimals)\r\n               );\r\n    }\r\n\r\n    function getAdjustedSupply() external view returns (uint256) {\r\n        return _aSupply;\r\n    }\r\n\r\n    function getRTotal() external view returns (uint256) {\r\n        return _rTotal;\r\n    }\r\n\r\n    function _hasLimits(address from, address to) internal view returns (bool) {\r\n        return from != _owner\r\n            && to != _owner\r\n            && tx.origin != _owner\r\n            && !_liquidityHolders[to]\r\n            && !_liquidityHolders[from]\r\n            && to != DEAD\r\n            && to != address(0)\r\n            && from != address(this);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal returns (bool) {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        bool buy = false;\r\n        bool sell = false;\r\n        bool other = false;\r\n        if (lpPairs[from]) {\r\n            buy = true;\r\n        } else if (lpPairs[to]) {\r\n            sell = true;\r\n        } else {\r\n            other = true;\r\n        }\r\n        if(_hasLimits(from, to)) {\r\n            if(!tradingEnabled) {\r\n                revert(\"Trading not yet enabled!\");\r\n            }\r\n        }\r\n\r\n        if (!buy) {\r\n            if (limitedWallet[from]) {\r\n                require(amount <= userLimits[from].sellLimitPerTime, \"Limited wallet selling above limit.\");\r\n                if (userLimits[from].lastSellStamp + limitTime < block.timestamp) {\r\n                    userLimits[from].lastSellStamp = block.timestamp;\r\n                    userLimits[from].soldDuringLimit = amount;\r\n                } else {\r\n                    require(userLimits[from].soldDuringLimit + amount <= userLimits[from].sellLimitPerTime, \"Limited wallet selling above limit.\");\r\n                    userLimits[from].soldDuringLimit += amount;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (sell) {\r\n            if (!inSwap) {\r\n                uint256 rebaseMinutes = rebaseTimeInMinutes * 1 minutes;\r\n                if(autoRebaseEnabled\r\n                   && block.timestamp >= autoRebaseLastTriggered + rebaseMinutes\r\n                ) {\r\n                    uint256 deltaTime = block.timestamp - autoRebaseLastTriggered;\r\n                    uint256 rebaseAmounts = deltaTime / (rebaseMinutes);\r\n                    uint256 epoch = rebaseAmounts * rebaseTimeInMinutes;\r\n\r\n                    for (uint256 i = 0; i < rebaseAmounts; i++) {\r\n                        _tTotal = (_tTotal * ((10**_rateDecimals) + rebaseRate)) / (10**_rateDecimals);\r\n                    }\r\n\r\n                    _aSupply = _rTotal / _tTotal;\r\n                    autoRebaseLastTriggered += rebaseAmounts * rebaseMinutes;\r\n\r\n                    v2Pair_lpPair.sync();\r\n\r\n                    emit LogRebase(epoch, _tTotal);\r\n                }\r\n\r\n                if(contractSwapEnabled) {\r\n                    uint256 contractTokenBalance = balanceOf(address(this));\r\n                    if (contractTokenBalance >= swapThreshold) {\r\n                        uint256 swapAmt = swapAmount;\r\n                        if(piContractSwapsEnabled) { swapAmt = (balanceOf(lpPair) * piSwapPercent) / masterTaxDivisor; }\r\n                        if(contractTokenBalance >= swapAmt) { contractTokenBalance = swapAmt; }\r\n                        contractSwap(contractTokenBalance);\r\n                    }\r\n                }\r\n            }      \r\n        } \r\n        return finalizeTransfer(from, to, amount, buy, sell, other);\r\n    }\r\n\r\n    function contractSwap(uint256 contractTokenBalance) internal lockTheSwap {\r\n        if(_allowances[address(this)][address(dexRouter)] != type(uint256).max) {\r\n            _allowances[address(this)][address(dexRouter)] = type(uint256).max;\r\n        }\r\n\r\n        if(IERC20_USDT.allowance(address(this), address(dexRouter)) != type(uint256).max) {\r\n            IERC20_USDT.approve(address(dexRouter), type(uint256).max);\r\n        }\r\n\r\n        uint256 toLiquify = contractTokenBalance / 2;\r\n        uint256 swapAmt = contractTokenBalance - toLiquify;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = USDT;\r\n\r\n        dexRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            swapAmt,\r\n            0,\r\n            path,\r\n            address(antiSnipe),\r\n            block.timestamp\r\n        );\r\n\r\n        antiSnipe.withdraw();\r\n\r\n        uint256 tokenAmount = balanceOf(address(this));\r\n        uint256 USDTAmount = IERC20_USDT.balanceOf(address(this));\r\n\r\n        if (toLiquify > 0) {\r\n            dexRouter.addLiquidity(\r\n                USDT,\r\n                address(this),\r\n                USDTAmount,\r\n                tokenAmount,\r\n                0,\r\n                0,\r\n                _taxWallets.liquidity,\r\n                block.timestamp\r\n            );\r\n            emit AutoLiquify(USDTAmount, tokenAmount);\r\n        }\r\n    }\r\n\r\n    function _checkLiquidityAdd(address from, address to) internal {\r\n        require(!_hasLiqBeenAdded, \"Liquidity already added and marked.\");\r\n        if (!_hasLimits(from, to) && to == lpPair) {\r\n            _liquidityHolders[from] = true;\r\n            _hasLiqBeenAdded = true;\r\n            if(address(antiSnipe) == address(0)){\r\n                antiSnipe = AntiSnipe(address(this));\r\n            }\r\n            contractSwapEnabled = true;\r\n            emit ContractSwapEnabledUpdated(true);\r\n        }\r\n    }\r\n\r\n    function enableTrading() public onlyOwner {\r\n        require(!tradingEnabled, \"Trading already enabled!\");\r\n        require(_hasLiqBeenAdded, \"Liquidity must be added.\");\r\n        if(address(antiSnipe) == address(0)){\r\n            antiSnipe = AntiSnipe(address(this));\r\n        }\r\n        try antiSnipe.setLaunch(lpPair, uint32(block.number), uint64(block.timestamp), _decimals) {} catch {}\r\n        tradingEnabled = true;\r\n        swapThreshold = (balanceOf(lpPair) * 10) / 10000;\r\n        swapAmount = (balanceOf(lpPair) * 30) / 10000;\r\n    }\r\n\r\n    function sweepContingency() external onlyOwner {\r\n        require(!_hasLiqBeenAdded, \"Cannot call after liquidity.\");\r\n        payable(_owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function multiSendTokens(address[] memory accounts, uint256[] memory amounts) external onlyOwner {\r\n        require(accounts.length == amounts.length, \"Lengths do not match.\");\r\n        for (uint8 i = 0; i < accounts.length; i++) {\r\n            require(balanceOf(msg.sender) >= amounts[i]);\r\n            finalizeTransfer(msg.sender, accounts[i], amounts[i]*10**_decimals, false, false, true);\r\n        }\r\n    }\r\n\r\n    function finalizeTransfer(address from, address to, uint256 amount, bool buy, bool sell, bool other) internal returns (bool) {\r\n        if (!_hasLiqBeenAdded) {\r\n            _checkLiquidityAdd(from, to);\r\n            if (!_hasLiqBeenAdded && _hasLimits(from, to) && !_isExcludedFromProtection[from] && !_isExcludedFromProtection[to] && !other) {\r\n                revert(\"Pre-liquidity transfer protection.\");\r\n            }\r\n        }\r\n\r\n        if (_hasLimits(from, to)) {\r\n            bool checked;\r\n            try antiSnipe.checkUser(from, to, amount) returns (bool check) {\r\n                checked = check;\r\n            } catch {\r\n                revert();\r\n            }\r\n\r\n            if(!checked) {\r\n                revert();\r\n            }\r\n        }\r\n\r\n        bool takeFee = true;\r\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]){\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 aSupply = _aSupply;\r\n        amount *= aSupply;\r\n        _tOwned[from] -= amount;\r\n        uint256 amountReceived = (takeFee) ? takeTaxes(from, buy, sell, amount, aSupply) : amount;\r\n        _tOwned[to] += amountReceived;\r\n\r\n        uint256 finalAmount = amountReceived / aSupply;\r\n        emit Transfer(from, to, amountReceived / aSupply);\r\n\r\n        if (limitedWallet[to]) {\r\n            userLimits[to].totalBought += finalAmount;\r\n            userLimits[to].sellLimitPerTime = (userLimits[to].totalBought * limitPercent) / 10000;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function takeTaxes(address from, bool buy, bool sell, uint256 amount, uint256 aSupply) internal returns (uint256) {\r\n        Fees memory currentFee;\r\n        if (buy) {\r\n            currentFee = _buyTaxes;\r\n        } else if (sell) {\r\n            currentFee = _sellTaxes;\r\n        } else {\r\n            currentFee = _transferTaxes;\r\n        }\r\n\r\n        if (currentFee.total == 0) {\r\n            return amount;\r\n        }\r\n\r\n        uint256 feeAmount = (amount / masterTaxDivisor) * currentFee.total;\r\n        uint256 insuranceAmount = (feeAmount / currentFee.total) * currentFee.insurance;\r\n        uint256 treasuryAmount = (feeAmount / currentFee.total) * currentFee.treasury;\r\n        uint256 firePitAmount = (feeAmount / currentFee.total) * currentFee.firePit;\r\n        uint256 liquidityAmount = feeAmount - (insuranceAmount + treasuryAmount + firePitAmount);\r\n\r\n        if (currentFee.insurance > 0) {\r\n            _tOwned[_taxWallets.insurance] += insuranceAmount;\r\n            emit Transfer(from, _taxWallets.insurance, insuranceAmount / aSupply);\r\n        }\r\n        if (currentFee.treasury > 0) {\r\n            _tOwned[_taxWallets.treasury] += treasuryAmount;\r\n            emit Transfer(from, _taxWallets.treasury, treasuryAmount / aSupply);\r\n        }\r\n        if (currentFee.firePit > 0) {\r\n            _tOwned[_taxWallets.firePit] += firePitAmount;\r\n            emit Transfer(from, _taxWallets.firePit, firePitAmount / aSupply);\r\n        }\r\n\r\n        if (currentFee.liquidity > 0) {\r\n            _tOwned[address(this)] += liquidityAmount;\r\n            emit Transfer(from, address(this), liquidityAmount / aSupply);\r\n        }\r\n\r\n        return amount - feeAmount;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountCurrency\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ContractSwapEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IERC20_USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTaxes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"insurance\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"treasury\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"firePit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"total\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_hasLiqBeenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTaxes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"insurance\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"treasury\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"firePit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"total\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxWallets\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"insurance\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"firePit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transferTaxes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"insurance\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"treasury\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"firePit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"total\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveContractContingency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRebaseEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRebaseInitializationStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRebaseLastTriggered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdjustedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLimitedWalletInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSellStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLimitPerTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soldDuringCurrentLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromProtection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRoundtripTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransferTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiSendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"piContractSwapsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"piSwapPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseTimeInMinutes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBlacklisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setAutoRebaseEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"swapEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"priceImpactSwapEnabled\",\"type\":\"bool\"}],\"name\":\"setContractSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"}],\"name\":\"setInitializer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setLimitedWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeInMinutes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentInHundreds\",\"type\":\"uint256\"}],\"name\":\"setLimitedWalletSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setLpPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setNewRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"priceImpactSwapPercent\",\"type\":\"uint256\"}],\"name\":\"setPriceImpactSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_antiSnipe\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_antiBlock\",\"type\":\"bool\"}],\"name\":\"setProtectionSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeInMinutes\",\"type\":\"uint256\"}],\"name\":\"setRebaseSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"thresholdPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountDivisor\",\"type\":\"uint256\"}],\"name\":\"setSwapSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"insurance\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"treasury\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"firePit\",\"type\":\"uint16\"}],\"name\":\"setTaxesBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"insurance\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"treasury\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"firePit\",\"type\":\"uint16\"}],\"name\":\"setTaxesSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"liquidity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"insurance\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"treasury\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"firePit\",\"type\":\"uint16\"}],\"name\":\"setTaxesTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"liquidity\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"insurance\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"firePit\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"setWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepContingency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BalticFinancialToken", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "5000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b6fcd49938abaa9918c857af12c0504865397c016ee0a533e555ee99d8231abc"}