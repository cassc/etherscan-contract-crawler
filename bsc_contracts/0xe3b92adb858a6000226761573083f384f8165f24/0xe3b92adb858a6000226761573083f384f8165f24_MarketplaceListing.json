{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tatum/nft/MarketplaceListing.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../token/ERC20/IERC20.sol\\\";\\nimport \\\"../../token/ERC721/IERC721.sol\\\";\\nimport \\\"../../token/ERC1155/IERC1155.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\ncontract Tatum {\\n    function tokenCashbackValues(uint256 tokenId, uint256 tokenPrice)\\n    public\\n    view\\n    virtual\\n    returns (uint256[] memory)\\n    {}\\n\\n    function getCashbackAddress(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    returns (address)\\n    {}\\n}\\n\\ncontract MarketplaceListing is Ownable {\\n    using Address for address;\\n\\n    enum State {\\n        INITIATED,\\n        SOLD,\\n        CANCELLED\\n    }\\n\\n    struct Listing {\\n        uint256 idx;//string idx;\\n        bool isErc721;\\n        State state;\\n        address nftAddress;\\n        address seller;\\n        address erc20Address;\\n        uint256 tokenId;\\n        uint256 amount;\\n        uint256 price;\\n        address buyer;\\n    }\\n\\n    // List of all listings in the marketplace. All historical ones are here as well.\\n    mapping(uint256 => Listing) private _listings;\\n    mapping(address => mapping(uint256 => uint256)) public nftList; //  nftAddress => tokenId => idx\\n    mapping(uint256 => Listing) public nftBriefList;               // idx => tokenData\\n    uint256[] private _openListings;\\n    // uint256 private _marketplaceFee;\\n    // address private _marketplaceFeeRecipient;\\n    uint256 public nftCount; // idx \u4ece1\u5f00\u59cb\uff0c\u53ea\u52a0\u4e0d\u51cf\\n    mapping(address => bool) public whitelist; // \u53ea\u6709\u767d\u540d\u5355\u5185\u7684NFT\u5730\u5740\u53ef\u4ee5\u4e0a\u67b6\\n    address public creator;\\n    /**\\n     * @dev Emitted when new listing is created by the owner of the contract. Amount is valid only for ERC-1155 tokens\\n     */\\n    event ListingCreated(\\n        bool indexed isErc721,\\n        address indexed nftAddress,\\n        uint256 indexed tokenId,\\n        uint256 idx,\\n        uint256 amount,\\n        uint256 price,\\n        address erc20Address\\n    );\\n\\n    /**\\n     * @dev Emitted when listing assets were sold.\\n     */\\n    event ListingSold(address indexed buyer, uint256 idx);\\n\\n    /**\\n     * @dev Emitted when listing was cancelled and assets were returned to the seller.\\n     */\\n    event ListingCancelled(uint256 idx);\\n\\n    receive() external payable {}\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    constructor() {\\n        creator = msg.sender;\\n    }\\n\\n    function getListing(uint256 idx)\\n    public\\n    view\\n    virtual\\n    returns (Listing memory)\\n    {\\n        return _listings[idx];\\n    }\\n\\n    function getOpenListings()\\n    public\\n    view\\n    virtual\\n    returns (uint256[] memory)\\n    {\\n        return _openListings;\\n    }\\n\\n    /**\\n     * @dev Create new listing of the NFT token in the marketplace.\\n\\n     * @param isErc721 - whether the listing is for ERC721 or ERC1155 token\\n     * @param nftAddress - address of the NFT token\\n     * @param tokenId - ID of the NFT token\\n     * @param price - Price for the token. It could be in wei or smallest ERC20 value, if @param erc20Address is not 0x0 address\\n     * @param amount - ERC1155 only, number of tokens to sold.\\n     * @param erc20Address - address of the ERC20 token, which will be used for the payment. If native asset is used, this should be 0x0 address\\n     */\\n    function createListing(\\n        bool isErc721,\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint256 price,\\n        address seller,\\n        uint256 amount,\\n        address erc20Address\\n    ) public {\\n        require(whitelist[nftAddress] == true, 'Error: 9100');\\n        // if (\\n        //     keccak256(abi.encodePacked(_listings[idx].idx)) ==\\n        //     keccak256(abi.encodePacked(idx))\\n        // ) {\\n        //     revert(\\\"Listing already existed for current listing Id\\\");\\n        // }\\n        if (!isErc721) {\\n            require(amount > 0);\\n            require(\\n                IERC1155(nftAddress).balanceOf(seller, tokenId) >= amount,\\n                \\\"ERC1155 token balance is not sufficient for the seller..\\\"\\n            );\\n            require(nftList[nftAddress][tokenId] == 0, 'Error: 9007');\\n\\n        } else {\\n            require(\\n                IERC721(nftAddress).ownerOf(tokenId) == seller,\\n                \\\"ERC721 token does not belong to the author.\\\"\\n            );\\n            if (_isTatumNFT(nftAddress, tokenId)) {\\n                if (Tatum(nftAddress).getCashbackAddress(tokenId) == address(0)) {\\n                    uint256 cashbackSum = 0;\\n                    uint256[] memory cashback = Tatum(nftAddress)\\n                    .tokenCashbackValues(tokenId, price);\\n                    for (uint256 j = 0; j < cashback.length; j++) {\\n                        cashbackSum += cashback[j];\\n                    }\\n                }\\n            }\\n        }\\n        nftCount++;\\n        nftList[nftAddress][tokenId] = nftCount;\\n        Listing memory listing = Listing(\\n            nftCount,\\n            isErc721,\\n            State.INITIATED,\\n            nftAddress,\\n            seller,\\n            erc20Address,\\n            tokenId,\\n            amount,\\n            price,\\n            address(0)\\n        );\\n        _listings[nftCount] = listing;\\n        _openListings.push(nftCount);\\n\\n        \\n        \\n        nftBriefList[nftCount] = listing;\\n        emit ListingCreated(\\n            isErc721,\\n            nftAddress,\\n            tokenId,\\n            nftCount,\\n            amount,\\n            price,\\n            erc20Address\\n        );\\n    }\\n\\n    function _getBrief(address nftAddress, uint256 tokenId) private view returns(address seller, uint256 price, uint256 amount){\\n        uint256 idx = nftList[nftAddress][tokenId];\\n        Listing memory nftBrief = nftBriefList[idx];\\n        (seller, price, amount) = (nftBrief.seller, nftBrief.price, nftBrief.amount);\\n    }\\n\\n    function getBrief(address nftAddress, uint256 tokenId) external view returns(address seller, uint256 price, uint256 amount){\\n        return _getBrief(nftAddress, tokenId);\\n    }\\n\\n    /**\\n     * @dev Buyer wants to buy NFT from listing. All the required checks must pass.\\n     * Buyer must either send ETH with this endpoint, or ERC20 tokens will be deducted from his account to the marketplace contract.\\n     * @param idx - id of the listing to buy\\n     * @param erc20Address - optional address of the ERC20 token to pay for the assets, if listing is listed in ERC20\\n     */\\n    function buyAssetFromListing(uint idx, address erc20Address)\\n    public\\n    {\\n        Listing memory listing = _listings[idx];\\n        if (listing.state != State.INITIATED) {\\n            revert(\\\"Listing is in wrong state. Aborting.\\\");\\n        }\\n        if (listing.isErc721) {\\n            if (\\n                IERC721(listing.nftAddress).getApproved(listing.tokenId) !=\\n                address(this)\\n            ) {\\n                revert(\\n                \\\"Asset is not owned by this listing. Probably was not sent to the smart contract, or was already sold.\\\"\\n                );\\n            }\\n        } else {\\n            if (\\n                IERC1155(listing.nftAddress).balanceOf(\\n                    listing.seller,\\n                    listing.tokenId\\n                ) < listing.amount\\n            ) {\\n                revert(\\n                \\\"Insufficient balance of the asset in this listing. Probably was not sent to the smart contract, or was already sold.\\\"\\n                );\\n            }\\n        }\\n        if (listing.erc20Address != erc20Address) {\\n            revert(\\n            \\\"ERC20 token address as a payer method should be the same as in the listing. Either listing, or method call has wrong ERC20 address.\\\"\\n            );\\n        }\\n\\n        listing.state = State.SOLD;\\n        listing.buyer = msg.sender;\\n        _listings[idx] = listing;\\n        uint256 cashbackSum = 0;\\n        if (listing.isErc721) {\\n            if (_isTatumNFT(listing.nftAddress, listing.tokenId)) {\\n                if (\\n                    Tatum(listing.nftAddress).getCashbackAddress(listing.tokenId) ==\\n                    address(0)\\n                ) {\\n                    uint256[] memory cashback = Tatum(listing.nftAddress)\\n                    .tokenCashbackValues(listing.tokenId, listing.price);\\n                    for (uint256 j = 0; j < cashback.length; j++) {\\n                        cashbackSum += cashback[j];\\n                    }\\n                }\\n            }\\n        }\\n        if (listing.erc20Address == address(0)) {\\n            if (listing.isErc721) {\\n                IERC721(listing.nftAddress).safeTransferFrom{\\n                value : cashbackSum\\n                }(\\n                    listing.seller,\\n                    msg.sender,\\n                    listing.tokenId,\\n                    abi.encodePacked(\\n                        \\\"SafeTransferFrom\\\",\\n                        \\\"'''###'''\\\",\\n                        _uint2str(listing.price)\\n                    )\\n                );\\n            } else {\\n                IERC1155(listing.nftAddress).safeTransferFrom(\\n                    listing.seller,\\n                    msg.sender,\\n                    listing.tokenId,\\n                    listing.amount,\\n                    \\\"\\\"\\n                );\\n            }\\n        } else {\\n            IERC20 token = IERC20(listing.erc20Address);\\n            \\n            token.transferFrom(msg.sender, listing.seller, listing.price);\\n            if (listing.isErc721) {\\n                bytes memory bytesInput = abi.encodePacked(\\n                    \\\"CUSTOMTOKEN0x\\\",\\n                    _toAsciiString(listing.erc20Address),\\n                    \\\"'''###'''\\\",\\n                    _uint2str(listing.price)\\n                );\\n                IERC721(listing.nftAddress).safeTransferFrom{\\n                value : cashbackSum\\n                }(listing.seller, msg.sender, listing.tokenId, bytesInput);\\n            } else {\\n                IERC1155(listing.nftAddress).safeTransferFrom(\\n                    listing.seller,\\n                    msg.sender,\\n                    listing.tokenId,\\n                    listing.amount,\\n                    \\\"\\\"\\n                );\\n            }\\n        }\\n        _toRemove(idx);\\n        delete nftBriefList[idx];\\n        delete nftList[listing.nftAddress][listing.tokenId];\\n        emit ListingSold(msg.sender, idx);\\n    }\\n\\n    function buyNumAssetFromListing(uint idx, uint amount) public {\\n        Listing memory listing = _listings[idx];\\n        if (listing.state != State.INITIATED) {\\n            revert(\\\"Listing is in wrong state. Aborting.\\\");\\n        }\\n        \\n        if (\\n            IERC1155(listing.nftAddress).balanceOf(\\n                listing.seller,\\n                listing.tokenId\\n            ) < listing.amount\\n        ) {\\n            revert(\\n            \\\"Insufficient balance of the asset in this listing. Probably was not sent to the smart contract, or was already sold.\\\"\\n            );\\n        }\\n        IERC20 token = IERC20(listing.erc20Address);\\n            \\n        token.transferFrom(msg.sender, listing.seller, listing.price);\\n        IERC1155(listing.nftAddress).safeTransferFrom(\\n                listing.seller,\\n                    msg.sender,\\n                    listing.tokenId,\\n                    amount,\\n                    \\\"\\\"\\n                );\\n    }\\n\\n    function _toRemove(uint256 idx) internal {\\n        for (uint x = 0; x < _openListings.length; x++) {\\n            if (\\n                keccak256(abi.encodePacked(_openListings[x])) ==\\n                keccak256(abi.encodePacked(idx))\\n            ) {\\n                for (uint i = x; i < _openListings.length - 1; i++) {\\n                    _openListings[i] = _openListings[i + 1];\\n                }\\n                _openListings.pop();\\n            }\\n        }\\n    }\\n\\n    function _toAsciiString(address x) internal pure returns (bytes memory) {\\n        bytes memory s = new bytes(40);\\n        for (uint256 i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint256(uint160(x)) / (2 ** (8 * (19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2 * i] = _char(hi);\\n            s[2 * i + 1] = _char(lo);\\n        }\\n        return s;\\n    }\\n\\n    function _char(bytes1 b) internal pure returns (bytes1 c) {\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n        else return bytes1(uint8(b) + 0x57);\\n    }\\n\\n    function _uint2str(uint256 _i)\\n    internal\\n    pure\\n    returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /**\\n     * @dev Buyer wants to buy NFT from listing. All the required checks must pass.\\n     * Buyer must approve spending of the ERC20 tokens will be deducted from his account to the marketplace contract.\\n     * @param idx - id of the listing to buy\\n     * @param erc20Address - optional address of the ERC20 token to pay for the assets\\n     * @param buyer - buyer of the item, from which account the ERC20 assets will be debited\\n     */\\n    function buyAssetFromListingForExternalBuyer(\\n        uint256 idx,\\n        address erc20Address,\\n        address buyer\\n    ) public {\\n        Listing memory listing = _listings[idx];\\n        if (listing.state != State.INITIATED) {\\n            revert(\\\"Listing is in wrong state. Aborting.\\\");\\n        }\\n        if (listing.isErc721) {\\n            if (\\n                IERC721(listing.nftAddress).getApproved(listing.tokenId) !=\\n                address(this)\\n            ) {\\n                revert(\\n                \\\"Asset is not owned by this listing. Probably was not sent to the smart contract, or was already sold.\\\"\\n                );\\n            }\\n        } else {\\n            if (\\n                IERC1155(listing.nftAddress).balanceOf(\\n                    listing.seller,\\n                    listing.tokenId\\n                ) < listing.amount\\n            ) {\\n                revert(\\n                \\\"Insufficient balance of the asset in this listing. Probably was not sent to the smart contract, or was already sold.\\\"\\n                );\\n            }\\n        }\\n        if (listing.erc20Address != erc20Address) {\\n            revert(\\n            \\\"ERC20 token address as a payer method should be the same as in the listing. Either listing, or method call has wrong ERC20 address.\\\"\\n            );\\n        }\\n        listing.state = State.SOLD;\\n        listing.buyer = buyer;\\n        _listings[idx] = listing;\\n        IERC20 token = IERC20(listing.erc20Address);\\n        \\n        token.transferFrom(buyer, listing.seller, listing.price);\\n        if (listing.isErc721) {\\n            IERC721(listing.nftAddress).safeTransferFrom(\\n                listing.seller,\\n                buyer,\\n                listing.tokenId,\\n                abi.encodePacked(\\n                    \\\"CUSTOMTOKEN0x\\\",\\n                    _toAsciiString(listing.erc20Address),\\n                    \\\"'''###'''\\\",\\n                    _uint2str(listing.price)\\n                )\\n            );\\n        } else {\\n            IERC1155(listing.nftAddress).safeTransferFrom(\\n                listing.seller,\\n                buyer,\\n                listing.tokenId,\\n                listing.amount,\\n                \\\"\\\"\\n            );\\n        }\\n        _toRemove(idx);\\n        delete nftBriefList[idx];\\n        delete nftList[listing.nftAddress][listing.tokenId];\\n\\n        emit ListingSold(buyer, idx);\\n    }\\n\\n    /**\\n     * @dev Cancel listing - returns the NFT asset to the seller.\\n     * @param idx - id of the listing to cancel\\n     */\\n    function cancelListing(uint256 idx) public virtual {\\n        Listing memory listing = _listings[idx];\\n        require(\\n            listing.state == State.INITIATED,\\n            \\\"Listing is not in INITIATED state. Aborting.\\\"\\n        );\\n        require(\\n            listing.seller == msg.sender || msg.sender == owner(),\\n            \\\"Listing can't be cancelled from other then seller or owner. Aborting.\\\"\\n        );\\n        listing.state = State.CANCELLED;\\n        _listings[idx] = listing;\\n        if(listing.isErc721 && listing.erc20Address == address(0)){\\n            uint256 cashbackSum = 0;\\n            if (_isTatumNFT(listing.nftAddress, listing.tokenId, listing.price)) {\\n                uint256[] memory cashback = Tatum(listing.nftAddress)\\n                .tokenCashbackValues(listing.tokenId, listing.price);\\n                for (uint256 j = 0; j < cashback.length; j++) {\\n                    cashbackSum += cashback[j];\\n                }\\n            }\\n        }\\n        _toRemove(idx);\\n        emit ListingCancelled(idx);\\n    }\\n\\n    function _isTatumNFT(address addr, uint256 p1, uint256 p2) internal returns (bool){\\n        bool success;\\n        bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\\\"tokenCashbackValues(uint256,uint256)\\\")), p1, p2);\\n\\n        assembly {\\n            success := call(\\n            gas(), // gas remaining\\n            addr, // destination address\\n            0, // no ether\\n            add(data, 32), // input buffer (starts after the first 32 bytes in the `data` array)\\n            mload(data), // input length (loaded from the first 32 bytes in the `data` array)\\n            0, // output buffer\\n            0               // output length\\n            )\\n        }\\n\\n        return success;\\n    }\\n\\n    function _isTatumNFT(address addr, uint256 p1) internal returns (bool){\\n        bool success;\\n        bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\\\"getCashbackAddress(uint256)\\\")), p1);\\n\\n        assembly {\\n            success := call(\\n            gas(), // gas remaining\\n            addr, // destination address\\n            0, // no ether\\n            add(data, 32), // input buffer (starts after the first 32 bytes in the `data` array)\\n            mload(data), // input length (loaded from the first 32 bytes in the `data` array)\\n            0, // output buffer\\n            0               // output length\\n            )\\n        }\\n\\n        return success;\\n    }\\n\\n    // \u5206\u9875\u83b7\u53d6\u5728\u552e\u4f5c\u54c1\uff0c\u6bcf\u987510\u4e2a\\n    function getNftList(uint256 startIdx) external view returns (Listing[] memory) {\\n        uint256 counter = 0;\\n        for(uint256 i = 1; i <= nftCount; i++){\\n            if(nftBriefList[i].tokenId > 0){\\n                counter++;\\n            }\\n        }\\n        Listing[] memory _lists = new Listing[](counter);\\n        if (counter != 0) {\\n            uint256 itemCounter = 0;\\n            for(uint256 i = startIdx + 1; i <= nftCount; i++){\\n                if(nftBriefList[i].tokenId > 0){\\n                    _lists[itemCounter] = nftBriefList[i];\\n                    itemCounter++;\\n                    if(itemCounter >= 10){\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n        return _lists;\\n    }\\n\\n    // \u83b7\u53d6\u6307\u5b9a\u7528\u6237\u51fa\u552e\u4e2d\u7684\u4f5c\u54c1\\n    function getNftListBySeller(address seller) external view returns (Listing[] memory) {\\n        uint256 counter = 0;\\n        for(uint256 i = 1; i <= nftCount; i++){\\n            if(nftBriefList[i].seller == seller){\\n                counter++;\\n            }\\n        }\\n        Listing[] memory _lists = new Listing[](counter);\\n        if (counter != 0) {\\n            uint256 itemCounter = 0;\\n            for(uint256 i = 1; i <= nftCount; i++){\\n                if(nftBriefList[i].seller == seller){\\n                    _lists[itemCounter] = nftBriefList[i];\\n                    itemCounter++;\\n                }\\n            }\\n        }\\n        return _lists;\\n    }\\n\\n    function setNFTWhitelist(address _address, bool _status) external returns(bool){\\n        require(msg.sender == creator, 'Error: 1009');\\n        whitelist[_address] = _status;\\n        return true;\\n    }\\n}\"\r\n    },\r\n    \"contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"ListingCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isErc721\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"}],\"name\":\"ListingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"ListingSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"}],\"name\":\"buyAssetFromListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"buyAssetFromListingForExternalBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyNumAssetFromListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isErc721\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"}],\"name\":\"createListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getBrief\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isErc721\",\"type\":\"bool\"},{\"internalType\":\"enum MarketplaceListing.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"internalType\":\"struct MarketplaceListing.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIdx\",\"type\":\"uint256\"}],\"name\":\"getNftList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isErc721\",\"type\":\"bool\"},{\"internalType\":\"enum MarketplaceListing.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"internalType\":\"struct MarketplaceListing.Listing[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getNftListBySeller\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isErc721\",\"type\":\"bool\"},{\"internalType\":\"enum MarketplaceListing.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"internalType\":\"struct MarketplaceListing.Listing[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpenListings\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftBriefList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isErc721\",\"type\":\"bool\"},{\"internalType\":\"enum MarketplaceListing.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setNFTWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MarketplaceListing", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}