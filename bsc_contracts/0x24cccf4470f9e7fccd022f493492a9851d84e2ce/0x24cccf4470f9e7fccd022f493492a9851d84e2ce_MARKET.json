{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\utils\\Context.sol\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n \r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n   interface WAL {\r\n    function send(address token, uint256 amount ,  address addr, address to) external returns (bool);\r\n    function myaddr(address addr) external view returns (address);\r\n}\r\n\r\n    contract MARKET is Ownable   {\r\n    \r\n    uint256 ratebuyjbus  = 1000;\r\n    uint256 rateselljbus = 1000;\r\n    uint256 ratebuyjb    = 10000;\r\n    uint256 rateselljb   = 10000;\r\n\r\n    address WALLET = 0x8AC1901023AE794a97c100CeA39B53D651DE90Bb;\r\n    address JBUS   = 0x6863593F1BA425689F6054b81608990104260108;\r\n    address USDT   = 0x55d398326f99059fF775485246999027B3197955;\r\n    address JB     = 0x531C1149068aDc6bcf01088e4a2D082dC1351E4C;\r\n \r\n\r\n    constructor()   {\r\n    }\r\n  \r\n    function buyjbus(uint256 amount) public {\r\n        uint256 usdt1 = IERC20(USDT).balanceOf(address(this));\r\n        WAL(WALLET).send(USDT,amount,msg.sender,address(this));\r\n        uint256 usdt2 = IERC20(USDT).balanceOf(address(this));\r\n        uint256 am = ( (usdt2-usdt1) / ratebuyjbus ) * 1000 ;\r\n        address to = WAL(WALLET).myaddr(msg.sender);\r\n        IERC20(JBUS).transfer(to,am);\r\n    }\r\n     function selljbus(uint256 amount) public {\r\n        uint256 jbus1 = IERC20(JBUS).balanceOf(address(this));\r\n        WAL(WALLET).send(JBUS,amount,msg.sender,address(this));\r\n        uint256 jbus2 = IERC20(JBUS).balanceOf(address(this));\r\n        uint256 am = ( (jbus2-jbus1) * rateselljbus  ) * 1000;\r\n        address to = WAL(WALLET).myaddr(msg.sender);\r\n        IERC20(USDT).transfer(to,am);\r\n    }\r\n\r\n      function selljb(uint256 amount) public {\r\n        uint256 jb1 = IERC20(JB).balanceOf(address(this));\r\n        WAL(WALLET).send(JB,amount,msg.sender,address(this));\r\n        uint256 jb2 = IERC20(JB).balanceOf(address(this));\r\n        uint256 am = ( (jb2-jb1) * rateselljb ) / 1000 ;\r\n        address to = WAL(WALLET).myaddr(msg.sender);\r\n        IERC20(JBUS).transfer(to,am);\r\n    }\r\n\r\n     function buyjb(uint256 amount) public {\r\n        uint256 jbus1 = IERC20(JBUS).balanceOf(address(this));\r\n        WAL(WALLET).send(JBUS,amount,msg.sender,address(this));\r\n        uint256 jbus2 = IERC20(JBUS).balanceOf(address(this));\r\n        uint256 am = ( (jbus2-jbus1) / ratebuyjb  ) * 1000;\r\n        address to = WAL(WALLET).myaddr(msg.sender);\r\n        IERC20(JB).transfer(to,am);\r\n    }\r\n\r\n    function move(address token,uint256 amount) public onlyOwner {\r\n        IERC20(token).transfer(msg.sender,amount);\r\n    }\r\n\r\n     function set(uint256 ratebuyjbus_, uint256 rateselljbus_, uint256 ratebuyjb_, uint256 rateselljb_) public onlyOwner {\r\n      ratebuyjbus  = ratebuyjbus_;\r\n      rateselljbus = rateselljbus_;\r\n      ratebuyjb    = ratebuyjb_;\r\n      rateselljb   = rateselljb_;\r\n    }\r\n     \r\n }", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyjb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyjbus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"move\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"selljb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"selljbus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratebuyjbus_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateselljbus_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratebuyjb_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateselljb_\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MARKET", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6e78e798bf06cdc4fdf470b4be30dbf78f16a9bb3f275c989c0709e1910290b9"}