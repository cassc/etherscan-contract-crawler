{"SourceCode": "pragma solidity 0.7.3;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() \r\n        internal\r\n        view \r\n        virtual\r\n        returns (address payable) \r\n    {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() \r\n        internal\r\n        view \r\n        virtual \r\n        returns (bytes memory) \r\n    {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(\r\n        uint256 a, \r\n        uint256 b\r\n    ) \r\n        internal \r\n        pure \r\n        returns (uint256) \r\n    {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a, \r\n        uint256 b\r\n    ) \r\n        internal \r\n        pure \r\n        returns (uint256) \r\n    {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a, \r\n        uint256 b, \r\n        string memory errorMessage\r\n    ) \r\n        internal \r\n        pure \r\n        returns (uint256) \r\n    {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(\r\n        uint256 a, \r\n        uint256 b\r\n    ) \r\n        internal \r\n        pure \r\n        returns (uint256) \r\n    {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(\r\n        uint256 a, \r\n        uint256 b\r\n    ) \r\n        internal \r\n        pure \r\n        returns (uint256) \r\n    {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a, \r\n        uint256 b, \r\n        string memory errorMessage\r\n    ) \r\n        internal \r\n        pure \r\n        returns (uint256) \r\n    {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(\r\n        uint256 a, \r\n        uint256 b\r\n    ) \r\n        internal \r\n        pure \r\n        returns (uint256) \r\n    {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a, \r\n        uint256 b, \r\n        string memory errorMessage\r\n    ) \r\n        internal \r\n        pure \r\n        returns (uint256) \r\n    {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\nlibrary Address {\r\n    function isContract(\r\n        address account\r\n    ) \r\n        internal \r\n        view \r\n        returns (bool) \r\n    {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(\r\n        address payable recipient, \r\n        uint256 amount\r\n    ) \r\n        internal \r\n    {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target, \r\n        bytes memory data\r\n    ) \r\n        internal \r\n        returns (bytes memory) \r\n    {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n   function functionCall(\r\n       address target, \r\n       bytes memory data, \r\n       string memory errorMessage\r\n    ) \r\n        internal \r\n        returns (bytes memory) \r\n    {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target, \r\n        bytes memory data, \r\n        uint256 value\r\n    ) \r\n        internal \r\n        returns (bytes memory) \r\n    {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target, \r\n        bytes memory data, \r\n        uint256 value, \r\n        string memory errorMessage\r\n    ) \r\n        internal \r\n        returns (bytes memory) \r\n    {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target, \r\n        bytes memory data, \r\n        uint256 weiValue, \r\n        string memory errorMessage\r\n    ) \r\n        private \r\n        returns (bytes memory) \r\n    {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner, \r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(\r\n        address newOwner\r\n    ) \r\n        onlyOwner \r\n        external \r\n    {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        pendingOwner = newOwner;\r\n     }\r\n    \r\n     function claimOwnership() \r\n        external \r\n    {\r\n        require(_msgSender() == pendingOwner);\r\n        emit OwnershipTransferred(owner, pendingOwner);\r\n        owner = pendingOwner;\r\n        pendingOwner = address(0);\r\n     }\r\n}\r\n\r\n\r\nabstract contract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = true;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() \r\n        onlyOwner \r\n        whenNotPaused \r\n        external \r\n    {\r\n        paused = true;\r\n        emit Pause();\r\n    }\r\n\r\n    function unpause()\r\n        onlyOwner \r\n        whenPaused \r\n        external \r\n    {\r\n        paused = false;\r\n        emit Unpause();\r\n    }\r\n}\r\n\r\n\r\nabstract contract Whitelist is Pausable {\r\n    mapping(address => bool) public whitelist;\r\n    mapping(address => bool) public blacklist;\r\n\r\n    modifier isWhitelisted() {\r\n        require(whitelist[_msgSender()]);\r\n        _;\r\n    }\r\n  \r\n    modifier isBlacklisted() {\r\n        require(blacklist[_msgSender()]);\r\n        _;\r\n    }\r\n\r\n    function addWhitelist(\r\n        address account\r\n    ) \r\n        public \r\n        onlyOwner \r\n    {\r\n        whitelist[account] = true;\r\n    }\r\n    \r\n    function removeWhitelist(\r\n        address account\r\n    ) \r\n        public \r\n        onlyOwner \r\n    {\r\n        whitelist[account] = false;\r\n    }\r\n\r\n    function addBlacklist(\r\n        address account\r\n    ) \r\n        public \r\n        onlyOwner \r\n    {\r\n        blacklist[account] = true;\r\n    }\r\n\r\n    function removeBlacklist(\r\n        address account\r\n    ) \r\n        public \r\n        onlyOwner \r\n    {\r\n        blacklist[account] = false;\r\n    }\r\n}\r\n\r\n\r\nabstract contract ERC20 is Whitelist, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string internal _name;\r\n    string internal _symbol;\r\n    string internal _website;\r\n    uint8 private _decimals;\r\n\r\n    constructor (\r\n        string memory name, \r\n        string memory symbol\r\n    ) {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    function name() \r\n        public \r\n        view \r\n        returns (string memory)\r\n    {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() \r\n        public \r\n        view \r\n        returns (string memory) \r\n    {\r\n        return _symbol;\r\n    }\r\n    \r\n    function website() \r\n        public \r\n        view \r\n        returns (string memory) \r\n    {\r\n        return _website;\r\n    }\r\n\r\n    function decimals() \r\n        public \r\n        view \r\n        returns (uint8) \r\n    {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() \r\n        public \r\n        view \r\n        override \r\n        returns (uint256) \r\n    {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(\r\n        address account\r\n    ) \r\n        public \r\n        view \r\n        override \r\n        returns (uint256) \r\n    {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient, \r\n        uint256 amount\r\n    ) \r\n        public \r\n        virtual \r\n        override \r\n        returns (bool) \r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(\r\n        address owner, \r\n        address spender\r\n    ) \r\n        public \r\n        view \r\n        virtual \r\n        override \r\n        returns (uint256) \r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender, \r\n        uint256 amount\r\n    ) \r\n        public \r\n        virtual \r\n        override \r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender, \r\n        address recipient, \r\n        uint256 amount\r\n    ) \r\n        public \r\n        virtual \r\n        override \r\n        returns (bool) \r\n    {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender, \r\n        uint256 addedValue\r\n    ) \r\n        public \r\n        virtual \r\n        returns (bool) \r\n    {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender, \r\n        uint256 subtractedValue\r\n    ) \r\n        public \r\n        virtual \r\n        returns (bool) \r\n    {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender, \r\n        address recipient, \r\n        uint256 amount\r\n    ) \r\n        canTransfer\r\n        internal \r\n        virtual \r\n    {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(\r\n        address account, \r\n        uint256 amount\r\n    ) \r\n        internal \r\n        virtual \r\n    {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(\r\n        address account, \r\n        uint256 amount\r\n    ) \r\n        internal \r\n        virtual \r\n    {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner, \r\n        address spender, \r\n        uint256 amount\r\n    ) \r\n        internal \r\n        virtual \r\n    {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    modifier canTransfer() \r\n    {\r\n        address msgSender = _msgSender();\r\n        require(whitelist[msgSender] || !paused);\r\n        require(!blacklist[msgSender]);\r\n        _;\r\n    }\r\n\r\n    function _setupDecimals(\r\n        uint8 decimals_\r\n    ) \r\n        internal \r\n    {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from, \r\n        address to, \r\n        uint256 amount\r\n    ) \r\n        internal \r\n        virtual \r\n    { \r\n        \r\n    }\r\n}\r\n\r\n\r\ncontract HYVE is ERC20(\"HYVE\", \"HYVE\") {\r\n    function mint(\r\n        address _to, \r\n        uint256 _amount\r\n    ) \r\n        public \r\n        onlyOwner \r\n    {\r\n        _mint(_to, _amount);\r\n    }\r\n    \r\n    function burn(\r\n        address _from, \r\n        uint256 _amount\r\n    ) \r\n        public \r\n        onlyOwner \r\n    {\r\n        _burn(_from, _amount);\r\n    }\r\n    \r\n    function setName(\r\n        string memory _newName\r\n    ) \r\n        public \r\n        onlyOwner \r\n    {\r\n       _name = _newName;\r\n    } \r\n    \r\n    function setSymbol(\r\n        string memory _newSymbol\r\n    ) \r\n        public \r\n        onlyOwner \r\n    {\r\n       _symbol = _newSymbol;\r\n    } \r\n    \r\n    function setWebsite(\r\n        string memory _newWebsite\r\n    ) \r\n        public \r\n        onlyOwner \r\n    {\r\n       _website = _newWebsite;\r\n    }\r\n    \r\n    function tokenFallback(\r\n        address _from, \r\n        uint256 _value, \r\n        bytes memory _data\r\n    ) \r\n        public \r\n    {\r\n        revert();\r\n    }\r\n    \r\n    function takeOut(\r\n        IERC20 _token, \r\n        uint256 _amount\r\n    ) \r\n        external \r\n        onlyOwner \r\n    {\r\n        _token.transfer(owner, _amount);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newSymbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newWebsite\",\"type\":\"string\"}],\"name\":\"setWebsite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"takeOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"website\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HYVE", "CompilerVersion": "v0.7.3+commit.9bfce1f6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://b876e4db9bc7d2eb8e47372e923eafa298fe9be8c53c50188f314c3ce859ba56"}