{"SourceCode": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.6.11;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router {\r\n  function WETH() external pure returns (address);\r\n\r\n  function swapExactTokensForTokens(\r\n      uint amountIn,\r\n      uint amountOutMin,\r\n      address[] calldata path,\r\n      address to,\r\n      uint deadline\r\n  ) external returns (uint[] memory amounts);\r\n  \r\n  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n//interface BuybackContract {\r\n//    function depositByContract(address account, uint amount) external;\r\n//}\r\n\r\ncontract ConstantReturnStaking is Ownable {\r\n    using Address for address;\r\n    using SafeMath for uint;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using SafeERC20 for IERC20;\r\n    \r\n    event Stake(address account, uint amount);\r\n    event Unstake(address account, uint amount);\r\n    \r\n    event RewardsTransferred(address indexed holder, uint amount);\r\n    event ReferralFeeTransferred(address indexed referrer, uint amount);\r\n    event Reinvest(address indexed holder, uint amount);\r\n    \r\n    event StakingFeeChanged(uint newFee);\r\n    event UnstakingFeeChanged(uint newFee);\r\n    event ReferralFeeChanged(uint newFee);\r\n    event UniswapV2RouterChanged(address router);\r\n    event LockupTimeChanged(uint _newLockupTime);\r\n    \r\n    event TrustedDepositContractAdded(address contractAddress);\r\n    event TrustedDepositContractRemoved(address contractAddress);\r\n    //event BuybackContractChanged(address contractAddress);\r\n    event FeeRecipientAddressChanged(address newAddress);\r\n    \r\n    event EmergencyDeclared(address indexed owner);\r\n    \r\n    // ============================= CONTRACT VARIABLES ==============================\r\n    \r\n    // stake token contract address\r\n    address public TRUSTED_DEPOSIT_TOKEN_ADDRESS = 0x961C8c0B1aaD0c0b10a51FeF6a867E3091BCef17;\r\n    address public TRUSTED_REWARD_TOKEN_ADDRESS = 0xBD100d061E120b2c67A24453CF6368E63f1Be056;\r\n    //address public TRUSTED_BUYBACK_CONTRACT_ADDRESS;\r\n    \r\n    // earnings reward rate\r\n    uint public REWARD_RATE_X_100 = 2000;\r\n    uint public REWARD_INTERVAL = 365 days;\r\n    \r\n    // staking fee\r\n    uint public STAKING_FEE_RATE_X_100 = 0;\r\n    \r\n    // unstaking fee \r\n    uint public UNSTAKING_FEE_RATE_X_100 = 0;\r\n    \r\n    // this portion of earned rewards go to referrer\r\n    uint public REFERRAL_FEE_RATE_X_100 = 500;\r\n    \r\n    // unstaking possible after LOCKUP_TIME\r\n    uint public LOCKUP_TIME = 5 minutes;\r\n    \r\n    uint public constant EMERGENCY_WAIT_TIME = 3 days;\r\n\r\n    // If there are any undistributed or unclaimed tokens left in contract after this time\r\n    // Admin can claim them\r\n    uint public constant adminCanClaimAfter = 395 days;\r\n    \r\n    // Uniswap v2 Router\r\n    IUniswapV2Router public uniswapV2Router = IUniswapV2Router(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n    \r\n    // ========================= END CONTRACT VARIABLES ==============================\r\n    \r\n    address public feeRecipientAddress;\r\n    \r\n    uint public totalClaimedRewards = 0;\r\n    uint public totalClaimedReferralFee = 0;\r\n    \r\n    uint public immutable contractStartTime;\r\n    bool public isEmergency = false;\r\n    \r\n    // Contracts are not allowed to deposit, claim or withdraw\r\n    modifier noContractsAllowed() {\r\n        require(!(address(msg.sender).isContract()) && tx.origin == msg.sender, \"No Contracts Allowed!\");\r\n        _;\r\n    }\r\n    \r\n    modifier notDuringEmergency() {\r\n        require(!isEmergency, \"Cannot execute during emergency!\");\r\n        _;\r\n    }\r\n    \r\n    \r\n    EnumerableSet.AddressSet private holders;\r\n    \r\n    mapping (address => uint) public depositedTokens;\r\n    mapping (address => uint) public stakingTime;\r\n    mapping (address => uint) public lastClaimedTime;\r\n    mapping (address => uint) public totalEarnedTokens;\r\n    \r\n    mapping (address => uint) public rewardsPendingClaim;\r\n    \r\n    mapping (address => address) public referrals;\r\n    mapping (address => uint) public totalReferralFeeEarned;\r\n    \r\n    mapping (address => EnumerableSet.AddressSet) private activeReferredAddressesOfUser;\r\n    mapping (address => EnumerableSet.AddressSet) private totalReferredAddressesOfUser;\r\n    \r\n    mapping (address => bool) public isTrustedDepositContract;\r\n    \r\n    uint public adminClaimableTime;\r\n\r\n    constructor(\r\n        address _uniswapV2RouterAddress,\r\n        address _feeRecipientAddress,\r\n        \r\n        address trustedDepositTokenAddress,\r\n        address trustedRewardTokenAddress,\r\n        \r\n        uint referralFeeRateX100,\r\n        uint stakingFeeRateX100,\r\n        uint unstakingFeeRateX100,\r\n        \r\n        uint rewardRateX100,\r\n        uint rewardInterval,\r\n        \r\n        uint lockupTime\r\n\r\n        ) public {\r\n            \r\n        setUniswapV2Router(IUniswapV2Router(_uniswapV2RouterAddress));\r\n        setFeeRecipientAddress(_feeRecipientAddress);\r\n        \r\n        setStakingFeeRateX100(stakingFeeRateX100);\r\n        setUnstakingFeeRateX100(unstakingFeeRateX100);\r\n        setReferralFeeRateX100(referralFeeRateX100);\r\n        \r\n        require(trustedDepositTokenAddress != address(0), \"Invalid deposit token address!\");\r\n        require(trustedRewardTokenAddress != address(0), \"Invalid reward token address!\");\r\n        \r\n        TRUSTED_DEPOSIT_TOKEN_ADDRESS = trustedDepositTokenAddress;\r\n        TRUSTED_REWARD_TOKEN_ADDRESS = trustedRewardTokenAddress;\r\n        \r\n        REWARD_RATE_X_100 = rewardRateX100;\r\n        REWARD_INTERVAL = rewardInterval;\r\n        require(REWARD_INTERVAL <= 365 days, \"Contract must expire in less than 365 days!\");\r\n        \r\n        setLockupTime(lockupTime);\r\n        \r\n        contractStartTime = now;\r\n        \r\n        //require(adminCanClaimAfter <= 395 days, \"Admin Claimable Time should be less than 395 days!\");\r\n        adminClaimableTime = now.add(adminCanClaimAfter);\r\n        \r\n    }\r\n    function setFeeRecipientAddress(address newFeeRecipientAddress) public onlyOwner {\r\n        require(newFeeRecipientAddress != address(0), \"Invalid address!\");\r\n        feeRecipientAddress = newFeeRecipientAddress;\r\n        emit FeeRecipientAddressChanged(feeRecipientAddress);\r\n    }\r\n\r\n    //function setBuybackContractAddress(address trustedBuybackContractAddress) external onlyOwner {\r\n    //    require(trustedBuybackContractAddress != address(0), \"Invalid address!\");\r\n    //    TRUSTED_BUYBACK_CONTRACT_ADDRESS = trustedBuybackContractAddress;\r\n    //    emit BuybackContractChanged(TRUSTED_BUYBACK_CONTRACT_ADDRESS);\r\n    //}\r\n    \r\n    function setStakingFeeRateX100(uint _newStakingFeeRateX100) public onlyOwner {\r\n        require(_newStakingFeeRateX100 < 100e2, \"New Staking fee too much!\");\r\n        STAKING_FEE_RATE_X_100 = _newStakingFeeRateX100;\r\n        emit StakingFeeChanged(STAKING_FEE_RATE_X_100);\r\n    }\r\n    function setUnstakingFeeRateX100(uint _newUnstakingFeeRateX100) public onlyOwner {\r\n        require(_newUnstakingFeeRateX100 < 100e2, \"New Unstaking fee too much!\");\r\n        UNSTAKING_FEE_RATE_X_100 = _newUnstakingFeeRateX100;\r\n        emit UnstakingFeeChanged(UNSTAKING_FEE_RATE_X_100);\r\n    }\r\n    function setReferralFeeRateX100(uint _newReferralFeeRateX100) public onlyOwner {\r\n        require(_newReferralFeeRateX100 < 100e2, \"Too much referral fee!\");\r\n        REFERRAL_FEE_RATE_X_100 = _newReferralFeeRateX100;\r\n        emit ReferralFeeChanged(REFERRAL_FEE_RATE_X_100);\r\n    }\r\n    function setUniswapV2Router(IUniswapV2Router _newUniswapV2Router) public onlyOwner {\r\n        require(address(_newUniswapV2Router) != address(0), \"Invalid router!\");\r\n        uniswapV2Router = _newUniswapV2Router;\r\n        emit UniswapV2RouterChanged(address(uniswapV2Router));\r\n    }\r\n    function setLockupTime(uint _newLockupTime) public onlyOwner {\r\n        require(_newLockupTime <= 90 days, \"Lockup Time too long!\");\r\n        LOCKUP_TIME = _newLockupTime;\r\n        emit LockupTimeChanged(LOCKUP_TIME);\r\n    }\r\n    function addTrustedDepositContractAddress(address _address) external onlyOwner {\r\n        isTrustedDepositContract[_address] = true;\r\n        emit TrustedDepositContractAdded(_address);\r\n    }\r\n    function removeTrustedDepositContractAddress(address _address) external onlyOwner {\r\n        isTrustedDepositContract[_address] = false;\r\n        emit TrustedDepositContractRemoved(_address);\r\n    }\r\n    \r\n    modifier onlyTrustedDepositContract() {\r\n        require(isTrustedDepositContract[msg.sender], \"Not trusted deposit contract!\");\r\n        _;\r\n    }\r\n    \r\n    function setContractVariables(\r\n        uint lockupTime,\r\n        uint referralFeeRateX100, \r\n        uint stakingFeeRateX100, \r\n        uint unstakingFeeRateX100, \r\n        address router,\r\n        address _feeRecipientAddress\r\n    ) external onlyOwner {\r\n        setLockupTime(lockupTime);\r\n        setReferralFeeRateX100(referralFeeRateX100);\r\n        setStakingFeeRateX100(stakingFeeRateX100);\r\n        setUnstakingFeeRateX100(unstakingFeeRateX100);\r\n        setUniswapV2Router(IUniswapV2Router(router));\r\n        setFeeRecipientAddress(_feeRecipientAddress);\r\n    }\r\n    \r\n    function declareEmergency() external onlyOwner notDuringEmergency {\r\n        isEmergency = true;\r\n        adminClaimableTime = now.add(EMERGENCY_WAIT_TIME);\r\n        LOCKUP_TIME = 0;\r\n        \r\n        emit EmergencyDeclared(owner);\r\n    }\r\n    \r\n    function doSwap(address fromToken, address toToken, uint fromTokenAmount, uint amountOutMin, uint deadline) \r\n        private returns (uint _toTokenReceived) {\r\n            \r\n        if (fromToken == toToken) {\r\n            return fromTokenAmount;\r\n        }\r\n            \r\n        IERC20(fromToken).safeApprove(address(uniswapV2Router), 0);\r\n        IERC20(fromToken).safeApprove(address(uniswapV2Router), fromTokenAmount);\r\n        \r\n        uint oldToTokenBalance = IERC20(toToken).balanceOf(address(this));\r\n        \r\n        address[] memory path;\r\n        \r\n        if (fromToken == uniswapV2Router.WETH() || toToken == uniswapV2Router.WETH()) {\r\n            path = new address[](2);\r\n            path[0] = fromToken;\r\n            path[1] = toToken;\r\n        } else {\r\n            path = new address[](3);\r\n            path[0] = fromToken;\r\n            path[1] = uniswapV2Router.WETH();\r\n            path[2] = toToken;\r\n        }\r\n        \r\n        uniswapV2Router.swapExactTokensForTokens(fromTokenAmount, amountOutMin, path, address(this), deadline);\r\n        \r\n        uint newToTokenBalance = IERC20(toToken).balanceOf(address(this));\r\n        uint toTokenReceived = newToTokenBalance.sub(oldToTokenBalance);\r\n        return toTokenReceived;\r\n    }\r\n    \r\n    function updateAccount(address account, uint _amountOutMin_referralFee, uint _deadline) private {\r\n        uint pendingDivs = getPendingDivs(account);\r\n        if (pendingDivs > 0) {\r\n            uint referralFee = pendingDivs.mul(REFERRAL_FEE_RATE_X_100).div(100e2);\r\n            uint pendingDivsAfterFee = pendingDivs.sub(referralFee);\r\n            \r\n            bool success = transferReferralFeeIfPossible(referrals[account], referralFee, _amountOutMin_referralFee, _deadline);\r\n            \r\n            uint amount = pendingDivs;\r\n            if (success) {\r\n                amount = pendingDivsAfterFee;\r\n            }\r\n            \r\n            rewardsPendingClaim[account] = rewardsPendingClaim[account].add(amount);\r\n            totalEarnedTokens[account] = totalEarnedTokens[account].add(amount);\r\n            \r\n            totalClaimedRewards = totalClaimedRewards.add(amount);\r\n            \r\n        }\r\n        lastClaimedTime[account] = now;\r\n    }\r\n    \r\n    function transferReferralFeeIfPossible(address account, uint amount, uint _amountOutMin_referralFee, uint _deadline) private returns (bool) {\r\n        if (account != address(0) && amount > 0) {\r\n            \r\n            // swap to DYP here\r\n            uint platformTokenReceived = doSwap(TRUSTED_REWARD_TOKEN_ADDRESS, TRUSTED_DEPOSIT_TOKEN_ADDRESS, amount, _amountOutMin_referralFee, _deadline);\r\n            \r\n            totalReferralFeeEarned[account] = totalReferralFeeEarned[account].add(platformTokenReceived);\r\n            IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeTransfer(account, platformTokenReceived);\r\n            totalClaimedReferralFee = totalClaimedReferralFee.add(platformTokenReceived);\r\n            emit ReferralFeeTransferred(account, platformTokenReceived);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function getPendingDivs(address _holder) public view returns (uint) {\r\n        if (!holders.contains(_holder)) return 0;\r\n        if (depositedTokens[_holder] == 0) return 0;\r\n        \r\n        uint timeDiff;\r\n        uint stakingEndTime = contractStartTime.add(REWARD_INTERVAL);\r\n        uint _now = now;\r\n        if (_now > stakingEndTime) {\r\n            _now = stakingEndTime;\r\n        }\r\n        \r\n        if (lastClaimedTime[_holder] >= _now) {\r\n            timeDiff = 0;\r\n        } else {\r\n            timeDiff = _now.sub(lastClaimedTime[_holder]);\r\n        }\r\n\r\n        uint stakedAmount = depositedTokens[_holder];\r\n        \r\n        uint pendingDivs = stakedAmount\r\n                            .mul(REWARD_RATE_X_100)\r\n                            .mul(timeDiff)\r\n                            .div(REWARD_INTERVAL)\r\n                            .div(1e4);\r\n            \r\n        return pendingDivs;\r\n    }\r\n    \r\n    function getTotalPendingDivs(address _holder) external view returns (uint) {\r\n        uint pending = getPendingDivs(_holder);\r\n        uint awaitingClaim = rewardsPendingClaim[_holder];\r\n        return pending.add(awaitingClaim);\r\n    }\r\n    \r\n    function getNumberOfHolders() external view returns (uint) {\r\n        return holders.length();\r\n    }\r\n    \r\n    function getNumberOfReferredStakers(address referrer) external view returns (uint _activeStakers, uint _totalStakers) {\r\n        _activeStakers = activeReferredAddressesOfUser[referrer].length();\r\n        _totalStakers = totalReferredAddressesOfUser[referrer].length();\r\n    }\r\n    \r\n    function getReferredStaker(address account, uint i) external view returns (address _staker, uint _totalEarned) {\r\n        _staker = totalReferredAddressesOfUser[account].at(i);\r\n        _totalEarned = totalEarnedTokens[_staker];\r\n    }\r\n    function getActiveReferredStaker(address account, uint i) external view returns (address _staker, uint _totalEarned) {\r\n        _staker = activeReferredAddressesOfUser[account].at(i);\r\n        _totalEarned = totalEarnedTokens[_staker];\r\n    }\r\n    \r\n    function depositByContract(address account, uint amount, uint _amountOutMin_stakingReferralFee, uint _deadline) external onlyTrustedDepositContract {\r\n        require(amount > 0, \"Amount must not be 0!\");\r\n        require(account != address(0), \"Invalid account!\");\r\n        IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeTransferFrom(msg.sender, address(this), amount);\r\n        \r\n        updateAccount(account, _amountOutMin_stakingReferralFee, _deadline);\r\n        \r\n        depositedTokens[account] = depositedTokens[account].add(amount);\r\n        \r\n        holders.add(account);\r\n    \r\n        stakingTime[account] = now;\r\n        emit Stake(account, amount);\r\n    }\r\n    \r\n    function stake(uint amountToStake, address referrer, uint _amountOutMin_referralFee, uint _deadline) external noContractsAllowed notDuringEmergency {\r\n        require(amountToStake > 0, \"Cannot deposit 0 Tokens\");\r\n        IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeTransferFrom(msg.sender, address(this), amountToStake);\r\n        \r\n        updateAccount(msg.sender, _amountOutMin_referralFee, _deadline);\r\n        \r\n        uint fee = amountToStake.mul(STAKING_FEE_RATE_X_100).div(1e4);\r\n        uint amountAfterFee = amountToStake.sub(fee);\r\n        if (fee > 0) {\r\n            IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeTransfer(feeRecipientAddress, fee);\r\n        }\r\n        \r\n        //uint _75Percent = amountAfterFee.mul(75e2).div(100e2);\r\n\r\n        //uint contractDepositAmount = doSwap(TRUSTED_DEPOSIT_TOKEN_ADDRESS, TRUSTED_REWARD_TOKEN_ADDRESS, _75Percent, _amountOutMin_75Percent, _deadline);\r\n\r\n        //IERC20(TRUSTED_REWARD_TOKEN_ADDRESS).safeApprove(TRUSTED_BUYBACK_CONTRACT_ADDRESS, 0);\r\n        //IERC20(TRUSTED_REWARD_TOKEN_ADDRESS).safeApprove(TRUSTED_BUYBACK_CONTRACT_ADDRESS, contractDepositAmount);\r\n        //BuybackContract(TRUSTED_BUYBACK_CONTRACT_ADDRESS).depositByContract(msg.sender, contractDepositAmount);\r\n        \r\n        //uint remainingAmount = amountAfterFee.sub(_75Percent);\r\n        \r\n        depositedTokens[msg.sender] = depositedTokens[msg.sender].add(amountAfterFee);\r\n        \r\n        holders.add(msg.sender);\r\n        \r\n        if (referrals[msg.sender] == address(0)) {\r\n            referrals[msg.sender] = referrer;\r\n        }\r\n        \r\n        totalReferredAddressesOfUser[referrals[msg.sender]].add(msg.sender);\r\n        activeReferredAddressesOfUser[referrals[msg.sender]].add(msg.sender);\r\n        \r\n        stakingTime[msg.sender] = now;\r\n        emit Stake(msg.sender, amountAfterFee);\r\n    }\r\n    \r\n    function unstake(uint amountToWithdraw, uint _amountOutMin_referralFee, uint _deadline) external noContractsAllowed {\r\n        require(depositedTokens[msg.sender] >= amountToWithdraw, \"Invalid amount to withdraw\");\r\n        \r\n        require(now.sub(stakingTime[msg.sender]) > LOCKUP_TIME, \"You recently staked, please wait before withdrawing.\");\r\n        \r\n        updateAccount(msg.sender, _amountOutMin_referralFee, _deadline);\r\n        \r\n        uint fee = amountToWithdraw.mul(UNSTAKING_FEE_RATE_X_100).div(1e4);\r\n        uint amountAfterFee = amountToWithdraw.sub(fee);\r\n        if (fee > 0) {\r\n            IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeTransfer(feeRecipientAddress, fee);\r\n        }\r\n        IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeTransfer(msg.sender, amountAfterFee);\r\n        \r\n        depositedTokens[msg.sender] = depositedTokens[msg.sender].sub(amountToWithdraw);\r\n        \r\n        if (holders.contains(msg.sender) && depositedTokens[msg.sender] == 0) {\r\n            holders.remove(msg.sender);\r\n            activeReferredAddressesOfUser[referrals[msg.sender]].remove(msg.sender);\r\n        }\r\n        \r\n        emit Unstake(msg.sender, amountToWithdraw);\r\n    }\r\n    \r\n    function claim(uint _amountOutMin_referralFee, uint _amountOutMin_claim, uint _deadline) external noContractsAllowed notDuringEmergency {\r\n        updateAccount(msg.sender, _amountOutMin_referralFee, _deadline);\r\n        uint amount = rewardsPendingClaim[msg.sender];\r\n        if (amount > 0) {\r\n            rewardsPendingClaim[msg.sender] = 0;\r\n            \r\n            // swap to DYP here\r\n            uint platformTokenReceived = doSwap(TRUSTED_REWARD_TOKEN_ADDRESS, TRUSTED_DEPOSIT_TOKEN_ADDRESS, amount, _amountOutMin_claim, _deadline);\r\n            \r\n            IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeTransfer(msg.sender, platformTokenReceived);  \r\n            emit RewardsTransferred(msg.sender, platformTokenReceived);\r\n        }\r\n    }\r\n    \r\n    function reInvest(uint _amountOutMin_referralFee, uint _amountOutMin_reinvest, uint _deadline) external noContractsAllowed notDuringEmergency {\r\n        updateAccount(msg.sender, _amountOutMin_referralFee, _deadline);\r\n        uint amount = rewardsPendingClaim[msg.sender];\r\n        if (amount > 0) {\r\n            rewardsPendingClaim[msg.sender] = 0;\r\n            \r\n            // swap to DYP here\r\n            uint platformTokenReceived = doSwap(TRUSTED_REWARD_TOKEN_ADDRESS, TRUSTED_DEPOSIT_TOKEN_ADDRESS, amount, _amountOutMin_reinvest, _deadline);\r\n            \r\n            // re-invest here\r\n            depositedTokens[msg.sender] = depositedTokens[msg.sender].add(platformTokenReceived);\r\n            \r\n            // no lock time reset for reinvest\r\n            // stakingTime[msg.sender] = now;\r\n            emit Reinvest(msg.sender, platformTokenReceived);\r\n        }\r\n    }\r\n    \r\n    function getStakersList(uint startIndex, uint endIndex) \r\n        public \r\n        view \r\n        returns (address[] memory stakers, \r\n            uint[] memory stakingTimestamps, \r\n            uint[] memory lastClaimedTimeStamps,\r\n            uint[] memory stakedTokens) {\r\n        require (startIndex < endIndex);\r\n        \r\n        uint length = endIndex.sub(startIndex);\r\n        address[] memory _stakers = new address[](length);\r\n        uint[] memory _stakingTimestamps = new uint[](length);\r\n        uint[] memory _lastClaimedTimeStamps = new uint[](length);\r\n        uint[] memory _stakedTokens = new uint[](length);\r\n        \r\n        for (uint i = startIndex; i < endIndex; i = i.add(1)) {\r\n            address staker = holders.at(i);\r\n            uint listIndex = i.sub(startIndex);\r\n            _stakers[listIndex] = staker;\r\n            _stakingTimestamps[listIndex] = stakingTime[staker];\r\n            _lastClaimedTimeStamps[listIndex] = lastClaimedTime[staker];\r\n            _stakedTokens[listIndex] = depositedTokens[staker];\r\n        }\r\n        \r\n        return (_stakers, _stakingTimestamps, _lastClaimedTimeStamps, _stakedTokens);\r\n    }\r\n    \r\n    // admin can claim any tokens left in the contract after it expires or during emergency\r\n    function claimAnyToken(address token, address recipient, uint amount) external onlyOwner {\r\n        require(recipient != address(0), \"Invalid Recipient\");\r\n        require(now > adminClaimableTime, \"Contract not expired yet!\");\r\n        if (token == address(0)) {\r\n            address payable _recipient = payable(recipient);\r\n            _recipient.transfer(amount);\r\n            return;\r\n        }\r\n        IERC20(token).safeTransfer(recipient, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2RouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipientAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedDepositTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedRewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralFeeRateX100\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingFeeRateX100\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakingFeeRateX100\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRateX100\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupTime\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"EmergencyDeclared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"FeeRecipientAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLockupTime\",\"type\":\"uint256\"}],\"name\":\"LockupTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"ReferralFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferralFeeTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"StakingFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"TrustedDepositContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"TrustedDepositContractRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"UniswapV2RouterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"UnstakingFeeChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EMERGENCY_WAIT_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCKUP_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_FEE_RATE_X_100\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_RATE_X_100\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_FEE_RATE_X_100\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRUSTED_DEPOSIT_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRUSTED_REWARD_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKING_FEE_RATE_X_100\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addTrustedDepositContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminCanClaimAfter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminClaimableTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOutMin_referralFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin_claim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimAnyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"declareEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin_stakingReferralFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"depositByContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipientAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getActiveReferredStaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"getNumberOfReferredStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_activeStakers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalStakers\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getPendingDivs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getReferredStaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getStakersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"stakers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakingTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lastClaimedTimeStamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakedTokens\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getTotalPendingDivs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isEmergency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTrustedDepositContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOutMin_referralFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin_reinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"reInvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeTrustedDepositContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardsPendingClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockupTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralFeeRateX100\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingFeeRateX100\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakingFeeRateX100\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipientAddress\",\"type\":\"address\"}],\"name\":\"setContractVariables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeRecipientAddress\",\"type\":\"address\"}],\"name\":\"setFeeRecipientAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLockupTime\",\"type\":\"uint256\"}],\"name\":\"setLockupTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newReferralFeeRateX100\",\"type\":\"uint256\"}],\"name\":\"setReferralFeeRateX100\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newStakingFeeRateX100\",\"type\":\"uint256\"}],\"name\":\"setStakingFeeRateX100\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"_newUniswapV2Router\",\"type\":\"address\"}],\"name\":\"setUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newUnstakingFeeRateX100\",\"type\":\"uint256\"}],\"name\":\"setUnstakingFeeRateX100\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin_referralFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedReferralFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalEarnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalReferralFeeEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin_referralFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConstantReturnStaking", "CompilerVersion": "v0.6.11+commit.5ef660b1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000910090ea889b64b4e722ea4b8ff6d5e734dfb38f000000000000000000000000961c8c0b1aad0c0b10a51fef6a867e3091bcef17000000000000000000000000bd100d061e120b2c67a24453cf6368e63f1be05600000000000000000000000000000000000000000000000000000000000001f40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007d00000000000000000000000000000000000000000000000000000000001e13380000000000000000000000000000000000000000000000000000000000000012c", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8a63ab8c548e5a6e85082b348e63860de9eddca643c375ea83b7940b3616f47c"}