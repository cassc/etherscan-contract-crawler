{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FishingTuna.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/*********************************\\n*\\n*  https://t.me/fishing_tuna_chat\\n*\\n*  https://t.me/fishing_tuna\\n*\\n*  https://twitter.com/FishingTunaBNB\\n*\\n*  https://fishing-tuna.com \\n*\\n*********************************/\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\"; \\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\\ncontract FishingTunaContract is Ownable, ReentrancyGuard {\\n\\n    address public Tuna = address(0); // Token Contract Address\\n    address public Pair = address(0); // Token Pair Address\\n    address private priceAddress = 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE; // BNB/USD Mainnet \\n    AggregatorV3Interface internal priceFeed;\\n    IERC20 public tokenUSDT;\\n\\n    uint8 constant _decimals = 18; \\n    uint256 public MIN_DEPOSIT = 20 * 10**_decimals;\\n    uint256 public MAX_DEPOSIT = 500000 * 10**_decimals;\\n    uint256 public MIN_WITHDRAWAL = 1 * 10**_decimals;\\n    uint256 public MIN_REINVEST = 1 * 10**_decimals;\\n\\n    uint256 private PERCENT = 100;\\n    uint256[2] private AFFILIATE_PERCENTS = [60, 20];\\n    uint256[2] private AFFILIATE_PERCENTS_TOP5 = [80, 30];\\n\\n    address public defaultRef = address(0); // DEFAULT REF NULL\\n    uint256 public totalInvested;\\n    uint256 public totalInvestors;\\n    uint256 public daysWork;\\n    uint256 public startTime = 0;\\n\\n    struct User \\n    {\\n        uint256 money;\\n        uint256 tuna;\\n        uint256 deposit;\\n        uint256 earned;\\n        uint256 withdrawn;\\n        uint256 timestamp;\\n        address partner;\\n        uint256 refsTotal;\\n        uint256 refs1level;\\n        uint256 turnover;\\n        uint256 refearnUSDT;\\n        uint256 percentage;\\n        uint256 top5Earned;\\n        bool affiliateBonus;\\n    }\\n\\n    struct Top5 \\n    {\\n        address user;\\n        uint256 turnover;\\n    }\\n\\n    struct supportedTokens \\n    {\\n        address addr;\\n        uint256 decimals;\\n    }\\n\\n    mapping(address => User) public user;\\n    mapping(uint => Top5) public top5;\\n    mapping(uint => supportedTokens) public SupportedTokens;\\n\\n    constructor() \\n    {\\n        priceFeed = AggregatorV3Interface(priceAddress); \\n        SupportedTokens[0].addr = 0x55d398326f99059fF775485246999027B3197955; // USDT-BEP20\\n        //SupportedTokens[0].addr = 0x337610d27c682E347C9cD60BD4b3b107C9d34dDd; // USDT-TESTNET\\n        SupportedTokens[0].decimals = 18;\\n        tokenUSDT = IERC20(SupportedTokens[0].addr);\\n    }\\n\\n    receive() external payable onlyOwner {}\\n\\n    function Deposit(uint amount, address partner, uint tokenIndex) external nonReentrant \\n    {\\n        require(_msgSender() == tx.origin, \\\"Function can only be called by a user account\\\");\\n        require(startTime > 0, \\\"Contract not running\\\");\\n        require(amount >= MIN_DEPOSIT, \\\"Min deposit limit\\\");\\n        require(tokenIndex == 0, \\\"Parse token error\\\");\\n        require((user[_msgSender()].deposit + amount) <= MAX_DEPOSIT, \\\"Max deposit limit has been exceeded\\\");\\n\\n        if (user[_msgSender()].percentage == 0) \\n        {\\n            require(partner != _msgSender(), \\\"Cannot set your own address as partner\\\");\\n            address ref = user[partner].deposit == 0 ? defaultRef : partner;\\n            user[_msgSender()].partner = ref;\\n            user[_msgSender()].percentage = PERCENT;\\n            user[_msgSender()].timestamp = block.timestamp;\\n            user[ref].refs1level++;\\n            user[ref].refsTotal++;\\n            user[user[ref].partner].refsTotal++;\\n            totalInvestors += 1;\\n        }\\n\\n        totalInvested += amount;\\n        user[_msgSender()].deposit += amount;\\n\\n        tokenUSDT = IERC20(SupportedTokens[tokenIndex].addr);\\n        tokenUSDT.transferFrom(_msgSender(), address(this), amount);\\n\\n        // Token bonus\\n        uint256 tokenPrice = _getTokenPrice();\\n        uint256 needSend = ((amount*10**18) / tokenPrice) * 15 / 1000;\\n        if(IERC20(Tuna).balanceOf(address(this)) > needSend)\\n            IERC20(Tuna).transfer(_msgSender(), needSend);\\n\\n        _updatePercentage(_msgSender(), needSend);\\n        _updateprePayment(_msgSender());\\n        _referralAccrual(user[_msgSender()].partner, amount);\\n        \\n        // Owner-Fee\\n        uint256 feeUSDT = (amount * 4) / 100;\\n        tokenUSDT.transfer(owner(), feeUSDT);\\n    }\\n\\n    function Reinvest(uint256 amount) external nonReentrant \\n    {\\n        require(_msgSender() == tx.origin, \\\"Function can only be called by a user account\\\");\\n        require(amount >= MIN_REINVEST, \\\"Min reinvest limit\\\");\\n        _updatePercentage(_msgSender(), 0);\\n        _updateprePayment(_msgSender());\\n        require(amount <= user[_msgSender()].money, \\\"Insufficient funds\\\");\\n        user[_msgSender()].money -= amount;\\n        user[_msgSender()].deposit += amount;\\n    }\\n\\n    function Withdraw(uint256 amount, uint tokenIndex) external nonReentrant \\n    {\\n        require(_msgSender() == tx.origin, \\\"Function can only be called by a user account\\\");\\n        require(amount >= MIN_WITHDRAWAL, \\\"Min withdrawal limit\\\");\\n        require(tokenIndex == 0, \\\"Parse token error\\\");\\n        _updatePercentage(_msgSender(), 0);\\n        _updateprePayment(_msgSender());\\n        require(amount <= user[_msgSender()].money, \\\"Insufficient funds\\\");\\n        user[_msgSender()].money -= amount;\\n        user[_msgSender()].withdrawn += amount;\\n        tokenUSDT = IERC20(SupportedTokens[tokenIndex].addr);\\n        tokenUSDT.transfer(_msgSender(), amount);\\n    }\\n\\n    function ClaimRewards() external nonReentrant\\n    {\\n        require(_msgSender() == tx.origin, \\\"Function can only be called by a user account\\\");\\n        require(user[_msgSender()].deposit > 0, \\\"Insufficient deposit\\\");\\n        _updatePercentage(_msgSender(), 0);\\n        _updateprePayment(_msgSender());\\n    }\\n\\n    function ReplenishTuna(uint amount, uint tokenIndex) external nonReentrant \\n    {\\n        require(_msgSender() == tx.origin, \\\"Function can only be called by a user account\\\");\\n        require(SupportedTokens[tokenIndex].addr == Tuna, \\\"Parse token error\\\");\\n        require(amount >= 1*10**18, \\\"Min replenishment limit\\\");\\n        _updatePercentage(_msgSender(), 0);\\n        _updateprePayment(_msgSender());\\n        user[_msgSender()].tuna += amount;\\n        tokenUSDT = IERC20(SupportedTokens[tokenIndex].addr);\\n        tokenUSDT.transferFrom(_msgSender(), address(this), amount);\\n    }\\n\\n    function ReinvestTuna(uint amount) external nonReentrant\\n    {\\n        require(_msgSender() == tx.origin, \\\"Function can only be called by a user account\\\");\\n        require(amount <= user[_msgSender()].tuna, \\\"Insufficient funds\\\");\\n        uint256 decimalsToken = 10**_decimals;\\n        uint256 tokenPrice = _getTokenPrice();\\n        uint256 swapExactly = ((amount * (tokenPrice * decimalsToken)) * 90 / 100);\\n        user[_msgSender()].tuna -= amount;\\n        user[_msgSender()].deposit += swapExactly;\\n        _updatePercentage(_msgSender(), 0);\\n        _updateprePayment(_msgSender());\\n    }\\n\\n    function pendingReward(address account) public view returns(uint256) \\n    {\\n        uint256 RewardTime = (block.timestamp - user[account].timestamp) / 86400;\\n        RewardTime = (RewardTime >= 1) ? 1 : 0; \\n        return (((user[account].deposit / 100 * user[account].percentage) / 100) * RewardTime);\\n    }\\n\\n    function _updateprePayment(address account) internal \\n    {\\n        uint256 pending = pendingReward(account);\\n        user[account].timestamp = block.timestamp;\\n\\n        if(pending > 0)\\n        {\\n            user[account].money += pending;\\n            user[account].earned += pending;\\n        }\\n\\n        if(user[account].earned >= (user[account].deposit * 250 / 100))\\n        {\\n            user[account].deposit = 0;\\n            user[account].timestamp = 0;\\n        }\\n\\n        // WorkDays counter\\n        uint256 newCounter = (block.timestamp - startTime) / 86400;\\n        if(newCounter > daysWork)\\n            daysWork++;\\n    }\\n\\n    function _referralAccrual(address account, uint256 value) internal \\n    {\\n        if (value > 0 && account != address(0)) \\n        {\\n            for (uint8 i; i < 2; i++) \\n            {\\n                \\n                uint256 affPercent = (user[account].affiliateBonus == true) ? AFFILIATE_PERCENTS_TOP5[i] : AFFILIATE_PERCENTS[i];\\n                uint256 feeUSDT = ((value * affPercent) / 1000);\\n                user[account].money += feeUSDT;\\n                user[account].refearnUSDT += feeUSDT;\\n\\n                if(i == 0) \\n                { \\n                    user[account].turnover += value;\\n                    _updateTop5(account, user[account].turnover); \\n                }\\n                \\n                // next\\n                account = user[account].partner;\\n                if(account == address(0)) break;\\n            }\\n\\n            //top5 bonus\\n            for (uint8 i; i < 5; i++) \\n            {\\n                if(top5[i].user != address(0))\\n                {\\n                    uint256 bonus = value * 40 / 10000;\\n                    user[top5[i].user].money += bonus;\\n                    user[top5[i].user].top5Earned += bonus;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _updateTop5(address account, uint256 turnover) internal\\n    {\\n        bool search = false;\\n\\n        for (uint8 i; i < 5; i++) \\n        {\\n            if(top5[i].user == account)\\n            {\\n                search = true;\\n                top5[i].turnover = turnover;\\n\\n                if(i > 0)\\n                {\\n                    for(uint8 y = (i-1); top5[y].turnover < turnover && y >= 0; y--)\\n                    {\\n                        top5[y+1].user = top5[y].user;\\n                        top5[y+1].turnover = top5[y].turnover;\\n\\n                        top5[y].user = account;\\n                        top5[y].turnover = turnover;\\n\\n                        if(y == 0) break;\\n                    }\\n                }\\n                \\n                break;\\n            }\\n        }\\n\\n        if(search == false)\\n        {\\n\\n            user[account].affiliateBonus = false;\\n\\n            for (uint8 i; i < 5; i++) \\n            {\\n                if(top5[i].turnover < turnover)\\n                {\\n                    \\n\\n                    address next1 = top5[i].user;\\n                    uint256 next2 = top5[i].turnover;\\n\\n                    for (uint8 j = i; j < (4 - i); j++) \\n                    {\\n                        user[top5[j+1].user].affiliateBonus = false;\\n                        address prev1 = top5[j+1].user;\\n                        uint256 prev2 = top5[j+1].turnover;\\n\\n                        top5[j+1].user = next1;\\n                        top5[j+1].turnover = next2;\\n                        user[top5[j+1].user].affiliateBonus = true;\\n\\n                        if(prev1 == address(0)) break;\\n\\n                        next1 = prev1;\\n                        next2 = prev2;\\n\\n                    }\\n\\n                    top5[i].user = account;\\n                    top5[i].turnover = turnover;\\n                    user[account].affiliateBonus = true;\\n\\n                    break;\\n                }\\n            }\\n        }\\n        \\n    }\\n\\n    function _updatePercentage(address account, uint256 amount) internal \\n    {\\n        uint tokenBalance = IERC20(Tuna).balanceOf(account) + amount;\\n        uint updPercentage;\\n\\n        if(tokenBalance >= 100*(10**18) && tokenBalance < 200*(10**18))\\n            updPercentage = 120;\\n        else if(tokenBalance >= 200*(10**18) && tokenBalance < 500*(10**18))\\n            updPercentage = 140;\\n        else if(tokenBalance >= 500*(10**18))\\n            updPercentage = 160;\\n        else \\n            updPercentage = 100;\\n            \\n        if(user[account].percentage != updPercentage)\\n            user[account].percentage = updPercentage;\\n    }\\n\\n    function _getLatestPrice() public view returns (uint) \\n    { \\n        (,int price,,uint timeStamp,)= priceFeed.latestRoundData();\\n        require(timeStamp > 0, \\\"Round not complete\\\");\\n        return (uint)(price * 10000000000); \\n    }\\n\\n    function _getTokenPrice() public view returns(uint)\\n    {\\n        IPancakePair pair = IPancakePair(Pair);\\n        (uint Res0, uint Res1,) = pair.getReserves();\\n        uint BNBPrice = _getLatestPrice();\\n        uint divider1 = (Res0 > Res1) ? Res1 : Res0;\\n        uint divider2 = (Res0 > Res1) ? Res0 : Res1;\\n        return((divider1*(10**18) / divider2) * BNBPrice / 10**18);\\n    }\\n\\n    function runContract(uint256 time) external onlyOwner { if(startTime == 0) startTime = time; }\\n\\n    function addSupportedToken(uint tokenIndex, address addr, uint decimals) external onlyOwner \\n    {\\n        require(tokenIndex > 0, \\\"Dont change USDT token\\\");\\n        SupportedTokens[tokenIndex].addr = addr;\\n        SupportedTokens[tokenIndex].decimals = decimals;\\n    }\\n\\n    function addParams(address smartTuna, address smartPair) external onlyOwner { Tuna = smartTuna; Pair = smartPair; }\\n}\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ClaimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WITHDRAWAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReinvestTuna\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"ReplenishTuna\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SupportedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Tuna\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartTuna\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"smartPair\",\"type\":\"address\"}],\"name\":\"addParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"addSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daysWork\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"runContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenUSDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"top5\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"turnover\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvestors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"money\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tuna\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refsTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refs1level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"turnover\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refearnUSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"top5Earned\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"affiliateBonus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "FishingTunaContract", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://972552b1d549cf28caf675e451744c1a521d7c90a385184a7b87a66cb8aacc71"}