{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/introspection/IERC165.sol\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n// File: contracts/interfaces/ILinkAccessor.sol\r\n\r\ninterface ILinkAccessor {\r\n    function requestRandomness(uint256 userProvidedSeed_) external returns(bytes32);\r\n}\r\n\r\n// File: contracts/interfaces/IUniswapV2Router01.sol\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: contracts/interfaces/IUniswapV2Router02.sol\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/NFTMaster.sol\r\n\r\n// This contract is owned by Timelock.\r\ncontract NFTMaster is Ownable, IERC721Receiver {\r\n\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    event CreateCollection(address _who, uint256 _collectionId);\r\n    event PublishCollection(address _who, uint256 _collectionId);\r\n    event UnpublishCollection(address _who, uint256 _collectionId);\r\n    event NFTDeposit(address _who, address _tokenAddress, uint256 _tokenId);\r\n    event NFTWithdraw(address _who, address _tokenAddress, uint256 _tokenId);\r\n    event NFTClaim(address _who, address _tokenAddress, uint256 _tokenId);\r\n\r\n    IERC20 public wETH;\r\n    IERC20 public baseToken;\r\n    IERC20 public blesToken;\r\n    IERC20 public linkToken;\r\n\r\n    uint256 public linkCost = 1e17;  // 0.1 LINK\r\n    ILinkAccessor public linkAccessor;\r\n\r\n    bool public canDrawMultiple = true;\r\n\r\n    // Platform fee.\r\n    uint256 constant FEE_BASE = 10000;\r\n    uint256 public feeRate = 500;  // 5%\r\n\r\n    address public feeTo;\r\n\r\n    // Collection creating fee.\r\n    uint256 public creatingFee = 0;  // By default, 0\r\n\r\n    IUniswapV2Router02 public router;\r\n\r\n    uint256 public nextNFTId = 1e4;\r\n    uint256 public nextCollectionId = 1e4;\r\n\r\n    struct NFT {\r\n        address tokenAddress;\r\n        uint256 tokenId;\r\n        address owner;\r\n        uint256 price;\r\n        uint256 paid;\r\n        uint256 collectionId;\r\n        uint256 indexInCollection;\r\n    }\r\n\r\n    // nftId => NFT\r\n    mapping(uint256 => NFT) public allNFTs;\r\n\r\n    // owner => nftId[]\r\n    mapping(address => uint256[]) public nftsByOwner;\r\n\r\n    // tokenAddress => tokenId => nftId\r\n    mapping(address => mapping(uint256 => uint256)) public nftIdMap;\r\n\r\n    struct Collection {\r\n        address owner;\r\n        string name;\r\n        uint256 size;\r\n        uint256 commissionRate;  // for curator (owner)\r\n        bool willAcceptBLES;\r\n\r\n        // The following are runtime variables before publish\r\n        uint256 totalPrice;\r\n        uint256 averagePrice;\r\n        uint256 fee;\r\n        uint256 commission;\r\n\r\n        // The following are runtime variables after publish\r\n        uint256 publishedAt;  // time that published.\r\n        uint256 timesToCall;\r\n        uint256 soldCount;\r\n    }\r\n\r\n    // collectionId => Collection\r\n    mapping(uint256 => Collection) public allCollections;\r\n\r\n    // owner => collectionId[]\r\n    mapping(address => uint256[]) public collectionsByOwner;\r\n\r\n    // collectionId => who => true/false\r\n    mapping(uint256 => mapping(address => bool)) public isCollaborator;\r\n\r\n    // collectionId => collaborators\r\n    mapping(uint256 => address[]) public collaborators;\r\n\r\n    // collectionId => nftId[]\r\n    mapping(uint256 => uint256[]) public nftsByCollectionId;\r\n\r\n    struct RequestInfo {\r\n        uint256 collectionId;\r\n    }\r\n\r\n    mapping(bytes32 => RequestInfo) public requestInfoMap;\r\n\r\n    struct Slot {\r\n        address owner;\r\n        uint256 size;\r\n    }\r\n\r\n    // collectionId => Slot[]\r\n    mapping(uint256 => Slot[]) public slotMap;\r\n\r\n    // collectionId => r[]\r\n    mapping(uint256 => uint256[]) public nftMapping;\r\n\r\n    uint256 public nftPriceFloor = 1e18;  // 1 USDC\r\n    uint256 public nftPriceCeil = 1e24;  // 1M USDC\r\n    uint256 public minimumCollectionSize = 3;  // 3 blind boxes\r\n    uint256 public maximumDuration = 14 days;  // Refund if not sold out in 14 days.\r\n\r\n    constructor() public { }\r\n\r\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    function setWETH(IERC20 wETH_) external onlyOwner {\r\n        wETH = wETH_;\r\n    }\r\n\r\n    function setLinkToken(IERC20 linkToken_) external onlyOwner {\r\n        linkToken = linkToken_;\r\n    }\r\n\r\n    function setBaseToken(IERC20 baseToken_) external onlyOwner {\r\n        baseToken = baseToken_;\r\n    }\r\n\r\n    function setBlesToken(IERC20 blesToken_) external onlyOwner {\r\n        blesToken = blesToken_;\r\n    }\r\n\r\n    function setLinkAccessor(ILinkAccessor linkAccessor_) external onlyOwner {\r\n        linkAccessor = linkAccessor_;\r\n    }\r\n\r\n    function setLinkCost(uint256 linkCost_) external onlyOwner {\r\n        linkCost = linkCost_;\r\n    }\r\n\r\n    function setCanDrawMultiple(bool value_) external onlyOwner {\r\n        canDrawMultiple = value_;\r\n    }\r\n\r\n    function setFeeRate(uint256 feeRate_) external onlyOwner {\r\n        feeRate = feeRate_;\r\n    }\r\n\r\n    function setFeeTo(address feeTo_) external onlyOwner {\r\n        feeTo = feeTo_;\r\n    }\r\n\r\n    function setCreatingFee(uint256 creatingFee_) external onlyOwner {\r\n        creatingFee = creatingFee_;\r\n    }\r\n\r\n    function setUniswapV2Router(IUniswapV2Router02 router_) external onlyOwner {\r\n        router = router_;\r\n    }\r\n\r\n    function setNFTPriceFloor(uint256 value_) external onlyOwner {\r\n        require(value_ < nftPriceCeil, \"should be higher than floor\");\r\n        nftPriceFloor = value_;\r\n    }\r\n\r\n    function setNFTPriceCeil(uint256 value_) external onlyOwner {\r\n        require(value_ > nftPriceFloor, \"should be higher than floor\");\r\n        nftPriceCeil = value_;\r\n    }\r\n\r\n    function setMinimumCollectionSize(uint256 size_) external onlyOwner {\r\n        minimumCollectionSize = size_;\r\n    }\r\n\r\n    function setMaximumDuration(uint256 maximumDuration_) external onlyOwner {\r\n        maximumDuration = maximumDuration_;\r\n    }\r\n\r\n    function _generateNextNFTId() private returns(uint256) {\r\n        return ++nextNFTId;\r\n    }\r\n\r\n    function _generateNextCollectionId() private returns(uint256) {\r\n        return ++nextCollectionId;\r\n    }\r\n\r\n    function _depositNFT(address tokenAddress_, uint256 tokenId_) private returns(uint256) {\r\n        IERC721(tokenAddress_).safeTransferFrom(_msgSender(), address(this), tokenId_);\r\n\r\n        NFT memory nft;\r\n        nft.tokenAddress = tokenAddress_;\r\n        nft.tokenId = tokenId_;\r\n        nft.owner = _msgSender();\r\n        nft.collectionId = 0;\r\n        nft.indexInCollection = 0;\r\n\r\n        uint256 nftId;\r\n\r\n        if (nftIdMap[tokenAddress_][tokenId_] > 0) {\r\n            nftId = nftIdMap[tokenAddress_][tokenId_];\r\n        } else {\r\n            nftId = _generateNextNFTId();\r\n            nftIdMap[tokenAddress_][tokenId_] = nftId;\r\n        }\r\n\r\n        allNFTs[nftId] = nft;\r\n        nftsByOwner[_msgSender()].push(nftId);\r\n\r\n        emit NFTDeposit(_msgSender(), tokenAddress_, tokenId_);\r\n        return nftId;\r\n    }\r\n\r\n    function _withdrawNFT(address who_, uint256 nftId_, bool isClaim_) private {\r\n        allNFTs[nftId_].owner = address(0);\r\n        allNFTs[nftId_].collectionId = 0;\r\n\r\n        address tokenAddress = allNFTs[nftId_].tokenAddress;\r\n        uint256 tokenId = allNFTs[nftId_].tokenId;\r\n\r\n        IERC721(tokenAddress).safeTransferFrom(address(this), who_, tokenId);\r\n\r\n        if (isClaim_) {\r\n            emit NFTClaim(who_, tokenAddress, tokenId);\r\n        } else {\r\n            emit NFTWithdraw(who_, tokenAddress, tokenId);\r\n        }\r\n    }\r\n\r\n    function claimNFT(uint256 collectionId_, uint256 index_) external {\r\n        Collection storage collection = allCollections[collectionId_];\r\n\r\n        require(collection.soldCount == collection.size, \"Not finished\");\r\n\r\n        address winner = getWinner(collectionId_, index_);\r\n\r\n        require(winner == _msgSender(), \"Only winner can claim\");\r\n\r\n        uint256 nftId = nftsByCollectionId[collectionId_][index_];\r\n\r\n        require(allNFTs[nftId].collectionId == collectionId_, \"Already claimed\");\r\n\r\n        if (allNFTs[nftId].paid == 0) {\r\n            if (collection.willAcceptBLES) {\r\n                allNFTs[nftId].paid = allNFTs[nftId].price.mul(\r\n                    FEE_BASE.sub(collection.commissionRate)).div(FEE_BASE);\r\n                IERC20(blesToken).safeTransfer(allNFTs[nftId].owner, allNFTs[nftId].paid);\r\n            } else {\r\n                allNFTs[nftId].paid = allNFTs[nftId].price.mul(\r\n                    FEE_BASE.sub(feeRate).sub(collection.commissionRate)).div(FEE_BASE);\r\n                IERC20(baseToken).safeTransfer(allNFTs[nftId].owner, allNFTs[nftId].paid);\r\n            }\r\n        }\r\n\r\n        _withdrawNFT(_msgSender(), nftId, true);\r\n    }\r\n\r\n    function claimRevenue(uint256 collectionId_, uint256 index_) external {\r\n        Collection storage collection = allCollections[collectionId_];\r\n\r\n        require(collection.soldCount == collection.size, \"Not finished\");\r\n\r\n        uint256 nftId = nftsByCollectionId[collectionId_][index_];\r\n\r\n        require(allNFTs[nftId].owner == _msgSender() && allNFTs[nftId].collectionId > 0, \"NFT not claimed\");\r\n\r\n        if (allNFTs[nftId].paid == 0) {\r\n            if (collection.willAcceptBLES) {\r\n                allNFTs[nftId].paid = allNFTs[nftId].price.mul(\r\n                    FEE_BASE.sub(collection.commissionRate)).div(FEE_BASE);\r\n                IERC20(blesToken).safeTransfer(allNFTs[nftId].owner, allNFTs[nftId].paid);\r\n            } else {\r\n                allNFTs[nftId].paid = allNFTs[nftId].price.mul(\r\n                    FEE_BASE.sub(feeRate).sub(collection.commissionRate)).div(FEE_BASE);\r\n                IERC20(baseToken).safeTransfer(allNFTs[nftId].owner, allNFTs[nftId].paid);\r\n            }\r\n        }\r\n    }\r\n\r\n    function claimCommission(uint256 collectionId_) external {\r\n        Collection storage collection = allCollections[collectionId_];\r\n\r\n        require(_msgSender() == collection.owner, \"Only curator can claim\");\r\n        require(collection.soldCount == collection.size, \"Not finished\");\r\n\r\n        if (collection.willAcceptBLES) {\r\n            IERC20(blesToken).safeTransfer(collection.owner, collection.commission);\r\n        } else {\r\n            IERC20(baseToken).safeTransfer(collection.owner, collection.commission);\r\n        }\r\n\r\n        // Mark it claimed.\r\n        collection.commission = 0;\r\n    }\r\n\r\n    function claimFee(uint256 collectionId_) external {\r\n        require(feeTo != address(0), \"Please set feeTo first\");\r\n\r\n        Collection storage collection = allCollections[collectionId_];\r\n\r\n        require(collection.soldCount == collection.size, \"Not finished\");\r\n        require(!collection.willAcceptBLES, \"No fee if the curator accepts BLES\");\r\n\r\n        IERC20(baseToken).safeTransfer(feeTo, collection.fee);\r\n\r\n        // Mark it claimed.\r\n        collection.fee = 0;\r\n    }\r\n\r\n    function createCollection(\r\n        string calldata name_,\r\n        uint256 size_,\r\n        uint256 commissionRate_,\r\n        bool willAcceptBLES_,\r\n        address[] calldata collaborators_\r\n    ) external {\r\n        require(size_ >= minimumCollectionSize, \"Size too small\");\r\n        require(commissionRate_.add(feeRate) < FEE_BASE, \"Too much commission\");\r\n\r\n        if (creatingFee > 0) {\r\n            // Charges BLES for creating the collection.\r\n            IERC20(blesToken).safeTransfer(feeTo, creatingFee);\r\n        }\r\n\r\n        Collection memory collection;\r\n        collection.owner = _msgSender();\r\n        collection.name = name_;\r\n        collection.size = size_;\r\n        collection.commissionRate = commissionRate_;\r\n        collection.totalPrice = 0;\r\n        collection.averagePrice = 0;\r\n        collection.willAcceptBLES = willAcceptBLES_;\r\n        collection.publishedAt = 0;\r\n\r\n        uint256 collectionId = _generateNextCollectionId();\r\n\r\n        allCollections[collectionId] = collection;\r\n        collectionsByOwner[_msgSender()].push(collectionId);\r\n        collaborators[collectionId] = collaborators_;\r\n\r\n        for (uint256 i = 0; i < collaborators_.length; ++i) {\r\n            isCollaborator[collectionId][collaborators_[i]] = true;\r\n        }\r\n\r\n        emit CreateCollection(_msgSender(), collectionId);\r\n    }\r\n\r\n    function changeCollaborators(uint256 collectionId_, address[] calldata collaborators_) external {\r\n        Collection storage collection = allCollections[collectionId_];\r\n\r\n        require(collection.owner == _msgSender(), \"Needs collection owner\");\r\n        require(!isPublished(collectionId_), \"Collection already published\");\r\n\r\n        uint256 i;\r\n\r\n        for (i = 0; i < collaborators_.length; ++i) {\r\n            isCollaborator[collectionId_][collaborators_[i]] = true;\r\n        }\r\n\r\n        for (i = 0; i < collaborators[collectionId_].length; ++i) {\r\n            uint256 j;\r\n            for (j = 0; j < collaborators_.length; ++j) {\r\n                if (collaborators[collectionId_][i] == collaborators_[j]) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // If not found.\r\n            if (j == collaborators_.length) {\r\n                isCollaborator[collectionId_][collaborators[collectionId_][i]] = false;\r\n            }\r\n        }\r\n\r\n        collaborators[collectionId_] = collaborators_;\r\n    }\r\n\r\n    function isPublished(uint256 collectionId_) public view returns(bool) {\r\n        return allCollections[collectionId_].publishedAt > 0;\r\n    }\r\n\r\n    function _addNFTToCollection(uint256 nftId_, uint256 collectionId_, uint256 price_) private {\r\n        Collection storage collection = allCollections[collectionId_];\r\n\r\n        require(allNFTs[nftId_].owner == _msgSender(), \"Only NFT owner can add\");\r\n        require(collection.owner == _msgSender() ||\r\n                isCollaborator[collectionId_][_msgSender()], \"Needs collection owner or collaborator\");\r\n\r\n        require(price_ >= nftPriceFloor && price_ <= nftPriceCeil, \"Price not in range\");\r\n\r\n        require(allNFTs[nftId_].collectionId == 0, \"Already added\");\r\n        require(!isPublished(collectionId_), \"Collection already published\");\r\n        require(nftsByCollectionId[collectionId_].length < collection.size,\r\n                \"collection full\");\r\n\r\n        allNFTs[nftId_].price = price_;\r\n        allNFTs[nftId_].collectionId = collectionId_;\r\n        allNFTs[nftId_].indexInCollection = nftsByCollectionId[collectionId_].length;\r\n\r\n        // Push to nftsByCollectionId.\r\n        nftsByCollectionId[collectionId_].push(nftId_);\r\n\r\n        collection.totalPrice = collection.totalPrice.add(price_);\r\n\r\n        if (!collection.willAcceptBLES) {\r\n            collection.fee = collection.fee.add(price_.mul(feeRate).div(FEE_BASE));\r\n        }\r\n\r\n        collection.commission = collection.commission.add(price_.mul(collection.commissionRate).div(FEE_BASE));\r\n    }\r\n\r\n    function addNFTToCollection(address tokenAddress_, uint256 tokenId_, uint256 collectionId_, uint256 price_) external {\r\n        uint256 nftId = _depositNFT(tokenAddress_, tokenId_);\r\n        _addNFTToCollection(nftId, collectionId_, price_);\r\n    }\r\n\r\n    function editNFTInCollection(uint256 nftId_, uint256 collectionId_, uint256 price_) external {\r\n        Collection storage collection = allCollections[collectionId_];\r\n\r\n        require(collection.owner == _msgSender() ||\r\n                allNFTs[nftId_].owner == _msgSender(), \"Needs collection owner or NFT owner\");\r\n\r\n        require(price_ >= nftPriceFloor && price_ <= nftPriceCeil, \"Price not in range\");\r\n\r\n        require(allNFTs[nftId_].collectionId == collectionId_, \"NFT not in collection\");\r\n        require(!isPublished(collectionId_), \"Collection already published\");\r\n\r\n        collection.totalPrice = collection.totalPrice.add(price_).sub(allNFTs[nftId_].price);\r\n\r\n        if (!collection.willAcceptBLES) {\r\n            collection.fee = collection.fee.add(\r\n                price_.mul(feeRate).div(FEE_BASE)).sub(\r\n                    allNFTs[nftId_].price.mul(feeRate).div(FEE_BASE));\r\n        }\r\n\r\n        collection.commission = collection.commission.add(\r\n            price_.mul(collection.commissionRate).div(FEE_BASE)).sub(\r\n                allNFTs[nftId_].price.mul(collection.commissionRate).div(FEE_BASE));\r\n\r\n        allNFTs[nftId_].price = price_;  // Change price.\r\n    }\r\n\r\n    function _removeNFTFromCollection(uint256 nftId_, uint256 collectionId_) private {\r\n        Collection storage collection = allCollections[collectionId_];\r\n\r\n        require(allNFTs[nftId_].owner == _msgSender() ||\r\n                collection.owner == _msgSender(),\r\n                \"Only NFT owner or collection owner can remove\");\r\n        require(allNFTs[nftId_].collectionId == collectionId_, \"NFT not in collection\");\r\n        require(!isPublished(collectionId_), \"Collection already published\");\r\n\r\n        collection.totalPrice = collection.totalPrice.sub(allNFTs[nftId_].price);\r\n\r\n        if (!collection.willAcceptBLES) {\r\n            collection.fee = collection.fee.sub(\r\n                allNFTs[nftId_].price.mul(feeRate).div(FEE_BASE));\r\n        }\r\n\r\n        collection.commission = collection.commission.sub(\r\n            allNFTs[nftId_].price.mul(collection.commissionRate).div(FEE_BASE));\r\n\r\n\r\n        allNFTs[nftId_].collectionId = 0;\r\n\r\n        // Removes from nftsByCollectionId\r\n        uint256 index = allNFTs[nftId_].indexInCollection;\r\n        uint256 lastNFTId = nftsByCollectionId[collectionId_][nftsByCollectionId[collectionId_].length - 1];\r\n\r\n        nftsByCollectionId[collectionId_][index] = lastNFTId;\r\n        allNFTs[lastNFTId].indexInCollection = index;\r\n        nftsByCollectionId[collectionId_].pop();\r\n    }\r\n\r\n    function removeNFTFromCollection(uint256 nftId_, uint256 collectionId_) external {\r\n        address nftOwner = allNFTs[nftId_].owner;\r\n        _removeNFTFromCollection(nftId_, collectionId_);\r\n        _withdrawNFT(nftOwner, nftId_, false);\r\n    }\r\n\r\n    function randomnessCount(uint256 size_) public pure returns(uint256){\r\n        uint256 i;\r\n        for (i = 0; size_** i <= type(uint256).max / size_; i++) {}\r\n        return i;\r\n    }\r\n\r\n    function publishCollection(uint256 collectionId_, address[] calldata path, uint256 amountInMax_, uint256 deadline_) external {\r\n        Collection storage collection = allCollections[collectionId_];\r\n\r\n        require(collection.owner == _msgSender(), \"Only owner can publish\");\r\n\r\n        uint256 actualSize = nftsByCollectionId[collectionId_].length;\r\n        require(actualSize >= minimumCollectionSize, \"Not enough boxes\");\r\n\r\n        collection.size = actualSize;  // Fit the size.\r\n\r\n        // Math.ceil(totalPrice / actualSize);\r\n        collection.averagePrice = collection.totalPrice.add(actualSize.sub(1)).div(actualSize);\r\n        collection.publishedAt = now;\r\n\r\n        // Now buy LINK. Here is some math for calculating the time of calls needed from ChainLink.\r\n        uint256 count = randomnessCount(actualSize);\r\n        uint256 times = actualSize.add(count).sub(1).div(count);  // Math.ceil\r\n\r\n        if (linkCost > 0 && address(linkAccessor) != address(0)) {\r\n            buyLink(times, path, amountInMax_, deadline_);\r\n        }\r\n\r\n        collection.timesToCall = times;\r\n\r\n        emit PublishCollection(_msgSender(), collectionId_);\r\n    }\r\n\r\n    function unpublishCollection(uint256 collectionId_) external {\r\n        // Anyone can call if the collection expires and not sold out.\r\n        // Owner can unpublish a collection if nothing is sold out.\r\n\r\n        Collection storage collection = allCollections[collectionId_];\r\n\r\n        if (_msgSender() != collection.owner || collection.soldCount > 0) {\r\n            require(now > collection.publishedAt + maximumDuration, \"Not expired yet\");\r\n            require(collection.soldCount < collection.size, \"Sold out\");\r\n        }\r\n\r\n        collection.publishedAt = 0;\r\n        collection.soldCount = 0;\r\n\r\n        // Now refund to the buyers.\r\n        uint256 length = slotMap[collectionId_].length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            Slot memory slot = slotMap[collectionId_][length.sub(i + 1)];\r\n            slotMap[collectionId_].pop();\r\n\r\n            if (collection.willAcceptBLES) {\r\n                IERC20(blesToken).transfer(slot.owner, collection.averagePrice.mul(slot.size));\r\n            } else {\r\n                IERC20(baseToken).transfer(slot.owner, collection.averagePrice.mul(slot.size));\r\n            }\r\n        }\r\n\r\n        emit UnpublishCollection(_msgSender(), collectionId_);\r\n    }\r\n\r\n    function buyLink(uint256 times_, address[] calldata path, uint256 amountInMax_, uint256 deadline_) internal virtual {\r\n        require(path[path.length.sub(1)] == address(linkToken), \"Last token must be LINK\");\r\n\r\n        uint256 amountToBuy = linkCost.mul(times_);\r\n\r\n        if (path.length == 1) {\r\n            // Pay with LINK.\r\n            linkToken.transferFrom(_msgSender(), address(linkAccessor), amountToBuy);\r\n        } else {\r\n            if (IERC20(path[0]).allowance(address(this), address(router)) < amountInMax_) {\r\n                IERC20(path[0]).approve(address(router), amountInMax_);\r\n            }\r\n\r\n            uint256[] memory amounts = router.getAmountsIn(amountToBuy, path);\r\n            IERC20(path[0]).transferFrom(_msgSender(), address(this), amounts[0]);\r\n\r\n            // Pay with other token.\r\n            router.swapTokensForExactTokens(\r\n                amountToBuy,\r\n                amountInMax_,\r\n                path,\r\n                address(linkAccessor),\r\n                deadline_);\r\n        }\r\n    }\r\n\r\n    function drawBoxes(uint256 collectionId_, uint256 times_) external {\r\n        if (!canDrawMultiple) {\r\n            require(times_ == 1, \"Can draw only 1\");\r\n        }\r\n\r\n        require(isPublished(collectionId_), \"Not published\");\r\n\r\n        Collection storage collection = allCollections[collectionId_];\r\n\r\n        require(collection.soldCount.add(times_) <= collection.size, \"Not enough left\");\r\n\r\n        uint256 cost = collection.averagePrice.mul(times_);\r\n\r\n        if (collection.willAcceptBLES) {\r\n            IERC20(blesToken).safeTransferFrom(_msgSender(), address(this), cost);\r\n        } else {\r\n            IERC20(baseToken).safeTransferFrom(_msgSender(), address(this), cost);\r\n        }\r\n\r\n        Slot memory slot;\r\n        slot.owner = _msgSender();\r\n        slot.size = times_;\r\n        slotMap[collectionId_].push(slot);\r\n\r\n        uint256 startFromIndex = collection.size.sub(collection.timesToCall);\r\n        if (startFromIndex < collection.soldCount) {\r\n            startFromIndex = collection.soldCount;\r\n        }\r\n\r\n        collection.soldCount = collection.soldCount.add(times_);\r\n\r\n        for (uint256 i = startFromIndex;\r\n                 i < collection.soldCount;\r\n                 ++i) {\r\n            requestRandomNumber(collectionId_, i.sub(startFromIndex));\r\n        }\r\n    }\r\n\r\n    function getWinner(uint256 collectionId_, uint256 nftIndex_) public view returns(address) {\r\n        Collection storage collection = allCollections[collectionId_];\r\n\r\n        if (collection.soldCount < collection.size) {\r\n            // Not sold all yet.\r\n            return address(0);\r\n        }\r\n\r\n        uint256 size = collection.size;\r\n        uint256 count = randomnessCount(size);\r\n\r\n        uint256 lastRandomnessIndex = nftMapping[collectionId_].length.sub(1);\r\n        uint256 lastR = nftMapping[collectionId_][lastRandomnessIndex];\r\n\r\n        // Use lastR as an offset for rotating the sequence, to make sure that\r\n        // we need to wait for all boxes being sold.\r\n        nftIndex_ = nftIndex_.add(lastR).mod(size);\r\n\r\n        uint256 randomnessIndex = nftIndex_.div(count);\r\n\r\n        uint256 r = nftMapping[collectionId_][randomnessIndex];\r\n\r\n        uint256 i;\r\n\r\n        for (i = 0; i < nftIndex_.mod(count); ++i) {\r\n          r /= size;\r\n        }\r\n\r\n        r %= size;\r\n\r\n        // Iterate through all slots.\r\n        for (i = 0; i < slotMap[collectionId_].length; ++i) {\r\n            if (r >= slotMap[collectionId_][i].size) {\r\n                r -= slotMap[collectionId_][i].size;\r\n            } else {\r\n                return slotMap[collectionId_][i].owner;\r\n            }\r\n        }\r\n\r\n        require(false, \"r overflow\");\r\n    }\r\n\r\n    function psuedoRandomness() public view returns(uint256) {\r\n        return uint256(keccak256(abi.encodePacked(\r\n            block.timestamp + block.difficulty +\r\n            ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)) +\r\n            block.gaslimit + \r\n            ((uint256(keccak256(abi.encodePacked(_msgSender())))) / (now)) +\r\n            block.number\r\n        )));\r\n    }\r\n\r\n    function requestRandomNumber(uint256 collectionId_, uint256 index_) private {\r\n        if (address(linkAccessor) != address(0)) {\r\n            bytes32 requestId = linkAccessor.requestRandomness(index_);\r\n            requestInfoMap[requestId].collectionId = collectionId_;\r\n        } else {\r\n            // Uses psuedo random number instead, and doesn't involve request / callback.\r\n            useRandomness(collectionId_, psuedoRandomness());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback function used by VRF Coordinator\r\n     */\r\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) public {\r\n        require(_msgSender() == address(linkAccessor), \"Only linkAccessor can call\");\r\n\r\n        uint256 collectionId = requestInfoMap[requestId].collectionId;\r\n        useRandomness(collectionId, randomness);\r\n    }\r\n\r\n    function useRandomness(\r\n        uint256 collectionId_,\r\n        uint256 randomness_\r\n    ) private {\r\n        uint256 size = allCollections[collectionId_].size;\r\n        bool[] memory filled = new bool[](size);\r\n\r\n        uint256 r;\r\n        uint256 i;\r\n        uint256 j;\r\n        uint256 count = randomnessCount(size);\r\n\r\n        for (i = 0; i < nftMapping[collectionId_].length; ++i) {\r\n            r = nftMapping[collectionId_][i];\r\n            for (j = 0; j < count; ++j) {\r\n                filled[r.mod(size)] = true;\r\n                r = r.div(size);\r\n            }\r\n        }\r\n\r\n        r = 0;\r\n\r\n        uint256 t;\r\n        uint256 remaining = size.sub(count.mul(nftMapping[collectionId_].length));\r\n\r\n        for (i = 0; i < count; ++i) {\r\n            if (remaining == 0) {\r\n                break;\r\n            }\r\n\r\n            t = randomness_.mod(remaining);\r\n            randomness_ = randomness_.div(remaining);\r\n\r\n            t = t.add(1);\r\n\r\n            // Skips filled mappings.\r\n            for (j = 0; j < size; ++j) {\r\n                if (!filled[j]) {\r\n                    t = t.sub(1);\r\n                }\r\n\r\n                if (t == 0) {\r\n                  break;\r\n                }\r\n            }\r\n\r\n            filled[j] = true;\r\n            r = r.mul(size).add(j);\r\n            remaining = remaining.sub(1);\r\n        }\r\n\r\n        nftMapping[collectionId_].push(r);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"name\":\"CreateCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"name\":\"PublishCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_collectionId\",\"type\":\"uint256\"}],\"name\":\"UnpublishCollection\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"name\":\"addNFTToCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allCollections\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"willAcceptBLES\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publishedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timesToCall\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"soldCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allNFTs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indexInCollection\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blesToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canDrawMultiple\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"collaborators_\",\"type\":\"address[]\"}],\"name\":\"changeCollaborators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId_\",\"type\":\"uint256\"}],\"name\":\"claimCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId_\",\"type\":\"uint256\"}],\"name\":\"claimFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"claimNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index_\",\"type\":\"uint256\"}],\"name\":\"claimRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collaborators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collectionsByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"size_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commissionRate_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"willAcceptBLES_\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"collaborators_\",\"type\":\"address[]\"}],\"name\":\"createCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"times_\",\"type\":\"uint256\"}],\"name\":\"drawBoxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price_\",\"type\":\"uint256\"}],\"name\":\"editNFTInCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"fulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftIndex_\",\"type\":\"uint256\"}],\"name\":\"getWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCollaborator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId_\",\"type\":\"uint256\"}],\"name\":\"isPublished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkAccessor\",\"outputs\":[{\"internalType\":\"contract ILinkAccessor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumCollectionSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextCollectionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextNFTId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftIdMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftPriceCeil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftPriceFloor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftsByCollectionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftsByOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"psuedoRandomness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"}],\"name\":\"publishCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size_\",\"type\":\"uint256\"}],\"name\":\"randomnessCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collectionId_\",\"type\":\"uint256\"}],\"name\":\"removeNFTFromCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestInfoMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"baseToken_\",\"type\":\"address\"}],\"name\":\"setBaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"blesToken_\",\"type\":\"address\"}],\"name\":\"setBlesToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value_\",\"type\":\"bool\"}],\"name\":\"setCanDrawMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"creatingFee_\",\"type\":\"uint256\"}],\"name\":\"setCreatingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeRate_\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTo_\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILinkAccessor\",\"name\":\"linkAccessor_\",\"type\":\"address\"}],\"name\":\"setLinkAccessor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"linkCost_\",\"type\":\"uint256\"}],\"name\":\"setLinkCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"linkToken_\",\"type\":\"address\"}],\"name\":\"setLinkToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maximumDuration_\",\"type\":\"uint256\"}],\"name\":\"setMaximumDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size_\",\"type\":\"uint256\"}],\"name\":\"setMinimumCollectionSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"setNFTPriceCeil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"setNFTPriceFloor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"router_\",\"type\":\"address\"}],\"name\":\"setUniswapV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"wETH_\",\"type\":\"address\"}],\"name\":\"setWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slotMap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId_\",\"type\":\"uint256\"}],\"name\":\"unpublishCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wETH\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "NFTMaster", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://87fbef287a3fc9738343527dea2ec25aa28005648025b73ae583f9b7701eb185"}