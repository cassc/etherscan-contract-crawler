{"SourceCode": "/**\r\n__________________\u2584\u2584\u2584\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2584\r\n_______________\u2584\u2580\u2580____\u2580\u2580\u2580\u2580\u2584____\u2588\r\n___________\u2584\u2580\u2580__\u2580\u2580\u2580\u2580\u2580\u2580\u2584___\u2580\u2584___\u2588\r\n__________\u2588\u2584\u2584\u2584\u2584\u2584\u2584_______\u2580\u2584__\u2580\u2584__\u2588\r\n_________\u2588_________\u2580\u2584______\u2588____\u2588_\u2588\r\n______\u2584\u2588_____________\u2580\u2584_____\u2590___\u2590_\u258c\r\n______\u2588\u2588_______________\u2580\u2584___\u2590_\u2584\u2580\u2580\u2580\u2584\r\n______\u2588________\u2588\u2588_______\u258c__\u2590\u2584\u2580______\u2588\r\n______\u2588_________\u2588_______\u258c__\u2590\u2590________\u2590\r\n_____\u2590__________\u258c_____\u2584\u2580\u2580\u2580__\u258c_______\u2590_____________\u2584\u2584\u2584\u2584\u2584\u2584\r\n______\u258c__________\u2580\u2580\u2580\u2580________\u2580\u2580\u2584\u2584\u2584\u2580______\u2584\u2584\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u2584\r\n______\u258c____________________________\u2584\u2580__\u2584\u2584\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2584\r\n______\u2590__________________________\u2584\u2580_\u2584\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593_____\u2593\u2593____\u2593\u2593\u2588\u2584\r\n_______\u258c______________________\u2584\u2580_\u2584\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593____\u2593\u2593_\u2593\u2593_\u2593\u2593__\u2593\u2593\u2588\r\n_____\u2584\u2580\u2584_________________\u2584\u2580\u2580\u258c\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593__\u2593\u2593\u2593___\u2593\u2593_\u2593\u2593__\u2593\u2593\u2588\r\n____\u258c____\u2580\u2580\u2580\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2580\u2580___\u258c\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593__\u2593________\u2593\u2593___\u2593\u2593\u2593\u2588\r\n_____\u2580\u2584_________________\u2584\u2580\u2580\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2584_____\u2593\u2593__\u2593\u2593\u2593\u2588\r\n_______\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2584\u2584___\u2593\u2593\u2593\u2593\u2593\u2588\r\n_______\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2593\u2593\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2588\r\n________\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2593\u2588\u2593\u2593\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2588\r\n________\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2593\u2591\u2591\u2591\u2591\u2591\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2593\u2593\u2593\u2593\u258c\r\n________\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591____\u2591\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2593\u2593\u258c\r\n________\u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591________\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2588\u2593\u258c\r\n________\u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591___\u2593\u2593\u2593\u2593\u2593\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2588\u2593\u258c\r\n_________\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2591\u2591\u2591\u2591\u2591___\u2593\u2593\u2588\u2584\u2584\u2593\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591___\u2591\u2591\u2591\u2591\u2588\u2593\u2593\u2593\u2593\u2593\u2588\u2593\u258c\r\n_________\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2591\u2591\u2588\u2591\u2591\u2591___\u2593\u2593\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2593\u2593\u2593__\u2591\u2591\u2591\u2591\u2588\u2593\u2593\u2593\u2593\u2588\u2588\r\n_________\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2591\u2588\u2588\u2588\u2591\u2591____\u2593\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2584\u2588\u2593__\u2591\u2591\u2591\u2591\u2588\u2593\u2593\u2588\u2593\u2588\r\n_________\u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2593__\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2593\u2588\r\n__________\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2593_\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2593\u2588\r\n__________\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591_\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2593\u2588\r\n__________\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2593\u2588\r\n___________\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2591\u2588\u2588\u2591\r\n___________\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2591\u2591\u2591\u2591\u2591\u2591__\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2591\u2591\r\n___________\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2584\u2584\u2584\u2580\u2580\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2591\r\n___________\u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2584__\u2580\u2580\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\r\n___________\u2590\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2592\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2588\u2584\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591____________\u2584\u2584\u2584\r\n___________\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2592\u2592\u2592\u2592\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2593\u2593\u2593\u2593\u2593\u2588\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591______\u2584\u2584\u2584_\u2584\u2580\u2580____\u2580\u2584\r\n__________\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2592\u2592\u2592\u2592\u2588\u2593\u2593\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591____\u2584\u2580____\u2580\u2584_________\u2580\u2584\r\n_________\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2592\u2592\u2592\u2592\u2588\u2593\u2593\u2593\u2593\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591______\u2590\u2584________\u2588\u2584\u2584\u2580\u2580\u2580\u2584__\u2588\r\n________\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591____________\u2588_\u2588______\u2590_________\u2580\u2584\u258c\r\n_______\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2592\u2592\u2584___________\u2588__\u2580\u2584____\u2588____\u2584\u2584\u2584____\u2590\r\n______\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588_______\u2592\u2592\u2588\u2592\u2592\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2592\u2592\u2592\u2584_________\u2588____\u2580\u2580\u2588\u2580\u2584\u2580\u2580\u2580___\u2580\u2580\u2584\u2584\u2590\r\n_____\u2588\u2593\u2593\u2593\u2593\u2593\u2588\u2588\u2592_________\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2588\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u2593\u2588\u2592\u2592\u2592\u2588\u2588________\u2590_______\u2580\u2588_____________\u2588\r\n____\u2588\u2593\u2593\u2588\u2588\u2588\u2588\u2592\u2588\u2592_________\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2592\u2588\u2588_______\u2588_______\u2590______\u2584\u2584\u2584_____\u2588\r\n__\u2588\u2592\u2588\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2592____\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592____\u2592\u2588\u2593\u2588__\u2584\u2588__\u2588______\u2580\u2584\u2584\u2580\u2580____\u2580\u2580\u2584\u2584\u2588\r\n__\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588_______\u2588\u2593\u2593\u2588\u2593\u2593\u258c_\u2590________\u2590____________\u2590\r\n__\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592_______\u2588\u2593\u2593\u2593\u2588\u2593\u258c__\u258c_______\u2590_____\u2584\u2584____\u2590\r\n_\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2592_____\u2588\u2593\u2593\u2593\u2588\u2593\u2593\u258c__\u258c_______\u2580\u2584\u2584\u2580______\u2590\r\n_\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2593\u2588\u2593\u2593\u2593\u258c__\u2580\u2584_______________\u2584\u2580\r\n_\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588\u2593\u2593\u2593\u2593\u2593\u258c___\u2580\u2584_________\u2584\u2580\u2580\r\n\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2593\u2593\u2593\u2593\u2593\u2580\u2584__\u2580\u2584\u2584\u2588\u2580\u2580\u2580\r\n\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588\u2593\u2593\u2593\u2593\u2588\u2588\u2584\u2584\u2584\u2580\r\n\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588\u2588\u2588\r\n\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\r\n_\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2584\u2584\u2584\u2584\u2584\r\n_\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588\u2584\u2584\r\n__\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2584\r\n__\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\r\n__\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\r\n___\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u258c\r\n____\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u258c\r\n____\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2592\u258c\r\n_____\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588_______\u2590\u2592\u2592\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u258c\r\n______\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588________\u2588\u2592\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u258c\r\n_______\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588________\u2588\u2592\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u258c\r\n________\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588________\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\r\n_________\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588________\u2588\u2592\u2592\u2592\u2592\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\r\n_________\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588________\u2588\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2580\r\n__________\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588_______\u2588\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2592\u2592\u2592\u2588\u2580\u2580\u2580\r\n___________\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588_______\u2588\u2591\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2591\u2588\u2580\r\n____________\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588_______\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2580\r\n_____________\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588_______\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2580\r\n_____________\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588_______\u2580\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580\r\n______________\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\r\n_______________\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\r\n________________\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\r\n_________________\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\r\n__________________\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588\u2592\u2588\r\n___________________\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588\u2592\u2592\u2592\u2592\u2588\r\n___________________\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\r\n___________________\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\r\n____________________\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\r\n____________________\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2588\r\n_____________________\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u258c\r\n_____________________\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u258c\r\n______________________\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u258c\r\n_______________________\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2588\r\n________________________\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2588\r\n__________________________\u2588\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2591\u2591\u2591\u2588\u2580\r\n_____________________________\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2580\r\n_______________________________\u2580\u2580\u2580\u2580\r\n\r\n*/\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n * Contract Type : NFT Minting\r\n * Number of mint phases : 1\r\n * Mint Phase 1 : mint\r\n * Referral Scheme : 5, 2, 1\r\n*/\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *\t return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\n\r\n\r\ninterface IERC165 {\r\n\t/**\r\n\t * @dev Returns true if this contract implements the interface defined by\r\n\t * `interfaceId`. See the corresponding\r\n\t * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n\t * to learn more about how these ids are created.\r\n\t *\r\n\t * This function call must use less than 30 000 gas.\r\n\t */\r\n\tfunction supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n\t/**\r\n\t * @dev See {IERC165-supportsInterface}.\r\n\t */\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n\t\treturn interfaceId == type(IERC165).interfaceId;\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n\t/**\r\n\t * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n\t/**\r\n\t * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n\t */\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n\t/**\r\n\t * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n\t */\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n\t/**\r\n\t * @dev Returns the number of tokens in ``owner``'s account.\r\n\t */\r\n\tfunction balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n\t/**\r\n\t * @dev Returns the owner of the `tokenId` token.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must exist.\r\n\t */\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n\t/**\r\n\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must exist and be owned by `from`.\r\n\t * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) external;\r\n\r\n\t/**\r\n\t * @dev Transfers `tokenId` token from `from` to `to`.\r\n\t *\r\n\t * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must be owned by `from`.\r\n\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) external;\r\n\r\n\t/**\r\n\t * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n\t * The approval is cleared when the token is transferred.\r\n\t *\r\n\t * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The caller must own the token or be an approved operator.\r\n\t * - `tokenId` must exist.\r\n\t *\r\n\t * Emits an {Approval} event.\r\n\t */\r\n\tfunction approve(address to, uint256 tokenId) external;\r\n\r\n\t/**\r\n\t * @dev Returns the account approved for `tokenId` token.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must exist.\r\n\t */\r\n\tfunction getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n\t/**\r\n\t * @dev Approve or remove `operator` as an operator for the caller.\r\n\t * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - The `operator` cannot be the caller.\r\n\t *\r\n\t * Emits an {ApprovalForAll} event.\r\n\t */\r\n\tfunction setApprovalForAll(address operator, bool _approved) external;\r\n\r\n\t/**\r\n\t * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n\t *\r\n\t * See {setApprovalForAll}\r\n\t */\r\n\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n\t/**\r\n\t * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must exist and be owned by `from`.\r\n\t * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId,\r\n\t\tbytes calldata data\r\n\t) external;\r\n}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n\t/**\r\n\t * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n\t * by `operator` from `from`, this function is called.\r\n\t *\r\n\t * It must return its Solidity selector to confirm the token transfer.\r\n\t * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n\t *\r\n\t * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n\t */\r\n\tfunction onERC721Received(\r\n\t\taddress operator,\r\n\t\taddress from,\r\n\t\tuint256 tokenId,\r\n\t\tbytes calldata data\r\n\t) external returns (bytes4);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n\t/**\r\n\t * @dev Returns the token collection name.\r\n\t */\r\n\tfunction name() external view returns (string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the token collection symbol.\r\n\t */\r\n\tfunction symbol() external view returns (string memory);\r\n\r\n\t/**\r\n\t * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n\t */\r\n\tfunction tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n\t/**\r\n\t * @dev Returns true if `account` is a contract.\r\n\t *\r\n\t * [IMPORTANT]\r\n\t * ====\r\n\t * It is unsafe to assume that an address for which this function returns\r\n\t * false is an externally-owned account (EOA) and not a contract.\r\n\t *\r\n\t * Among others, `isContract` will return false for the following\r\n\t * types of addresses:\r\n\t *\r\n\t *\t- an externally-owned account\r\n\t *\t- a contract in construction\r\n\t *\t- an address where a contract will be created\r\n\t *\t- an address where a contract lived, but was destroyed\r\n\t * ====\r\n\t */\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\t// This method relies on extcodesize, which returns 0 for contracts in\r\n\t\t// construction, since the code is only stored at the end of the\r\n\t\t// constructor execution.\r\n\r\n\t\tuint256 size;\r\n\t\tassembly {\r\n\t\t\tsize := extcodesize(account)\r\n\t\t}\r\n\t\treturn size > 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n\t * `recipient`, forwarding all available gas and reverting on errors.\r\n\t *\r\n\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n\t * imposed by `transfer`, making them unable to receive funds via\r\n\t * `transfer`. {sendValue} removes this limitation.\r\n\t *\r\n\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n\t *\r\n\t * IMPORTANT: because control is transferred to `recipient`, care must be\r\n\t * taken to not create reentrancy vulnerabilities. Consider using\r\n\t * {ReentrancyGuard} or the\r\n\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n\t */\r\n\tfunction sendValue(address payable recipient, uint256 amount) internal {\r\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n\t\t(bool success, ) = recipient.call{value: amount}(\"\");\r\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Performs a Solidity function call using a low level `call`. A\r\n\t * plain `call` is an unsafe replacement for a function call: use this\r\n\t * function instead.\r\n\t *\r\n\t * If `target` reverts with a revert reason, it is bubbled up by this\r\n\t * function (like regular Solidity function calls).\r\n\t *\r\n\t * Returns the raw returned data. To convert to the expected return value,\r\n\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `target` must be a contract.\r\n\t * - calling `target` with `data` must not revert.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t\treturn functionCall(target, data, \"Address: low-level call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n\t * `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, 0, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but also transferring `value` wei to `target`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - the calling contract must have an ETH balance of at least `value`.\r\n\t * - the called Solidity function must be `payable`.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value\r\n\t) internal returns (bytes memory) {\r\n\t\treturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n\t * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n\t *\r\n\t * _Available since v3.1._\r\n\t */\r\n\tfunction functionCallWithValue(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tuint256 value,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n\t\trequire(isContract(target), \"Address: call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.call{value: value}(data);\r\n\t\treturn verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but performing a static call.\r\n\t *\r\n\t * _Available since v3.3._\r\n\t */\r\n\tfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n\t\treturn functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n\t * but performing a static call.\r\n\t *\r\n\t * _Available since v3.3._\r\n\t */\r\n\tfunction functionStaticCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal view returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: static call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.staticcall(data);\r\n\t\treturn verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n\t * but performing a delegate call.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n\t\treturn functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n\t * but performing a delegate call.\r\n\t *\r\n\t * _Available since v3.4._\r\n\t */\r\n\tfunction functionDelegateCall(\r\n\t\taddress target,\r\n\t\tbytes memory data,\r\n\t\tstring memory errorMessage\r\n\t) internal returns (bytes memory) {\r\n\t\trequire(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n\t\t(bool success, bytes memory returndata) = target.delegatecall(data);\r\n\t\treturn verifyCallResult(success, returndata, errorMessage);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n\t * revert reason using the provided one.\r\n\t *\r\n\t * _Available since v4.3._\r\n\t */\r\n\tfunction verifyCallResult(\r\n\t\tbool success,\r\n\t\tbytes memory returndata,\r\n\t\tstring memory errorMessage\r\n\t) internal pure returns (bytes memory) {\r\n\t\tif (success) {\r\n\t\t\treturn returndata;\r\n\t\t} else {\r\n\t\t\t// Look for revert reason and bubble it up if present\r\n\t\t\tif (returndata.length > 0) {\r\n\t\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n\t\t\t\tassembly {\r\n\t\t\t\t\tlet returndata_size := mload(returndata)\r\n\t\t\t\t\trevert(add(32, returndata), returndata_size)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\trevert(errorMessage);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n\tbytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n\t/**\r\n\t * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n\t */\r\n\tfunction toString(uint256 value) internal pure returns (string memory) {\r\n\t\t// Inspired by OraclizeAPI's implementation - MIT licence\r\n\t\t// https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n\t\tif (value == 0) {\r\n\t\t\treturn \"0\";\r\n\t\t}\r\n\t\tuint256 temp = value;\r\n\t\tuint256 digits;\r\n\t\twhile (temp != 0) {\r\n\t\t\tdigits++;\r\n\t\t\ttemp /= 10;\r\n\t\t}\r\n\t\tbytes memory buffer = new bytes(digits);\r\n\t\twhile (value != 0) {\r\n\t\t\tdigits -= 1;\r\n\t\t\tbuffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n\t\t\tvalue /= 10;\r\n\t\t}\r\n\t\treturn string(buffer);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n\t */\r\n\tfunction toHexString(uint256 value) internal pure returns (string memory) {\r\n\t\tif (value == 0) {\r\n\t\t\treturn \"0x00\";\r\n\t\t}\r\n\t\tuint256 temp = value;\r\n\t\tuint256 length = 0;\r\n\t\twhile (temp != 0) {\r\n\t\t\tlength++;\r\n\t\t\ttemp >>= 8;\r\n\t\t}\r\n\t\treturn toHexString(value, length);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n\t */\r\n\tfunction toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n\t\tbytes memory buffer = new bytes(2 * length + 2);\r\n\t\tbuffer[0] = \"0\";\r\n\t\tbuffer[1] = \"x\";\r\n\t\tfor (uint256 i = 2 * length + 1; i > 1; --i) {\r\n\t\t\tbuffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n\t\t\tvalue >>= 4;\r\n\t\t}\r\n\t\trequire(value == 0, \"Strings: hex length insufficient\");\r\n\t\treturn string(buffer);\r\n\t}\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n\t/**\r\n\t * @dev Returns the total amount of tokens stored by the contract.\r\n\t */\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n\t * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n\t */\r\n\tfunction tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n\t * Use along with {totalSupply} to enumerate all tokens.\r\n\t */\r\n\tfunction tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n\tusing Address for address;\r\n\tusing Strings for uint256;\r\n\r\n\t// Token name\r\n\tstring private _name;\r\n\r\n\t// Token symbol\r\n\tstring private _symbol;\r\n\r\n\t// Mapping from token ID to owner address\r\n\tmapping(uint256 => address) private _owners;\r\n\r\n\t// Mapping owner address to token count\r\n\tmapping(address => uint256) private _balances;\r\n\r\n\t// Mapping from token ID to approved address\r\n\tmapping(uint256 => address) private _tokenApprovals;\r\n\r\n\t// Mapping from owner to operator approvals\r\n\tmapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n\t/**\r\n\t * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n\t */\r\n\tconstructor(string memory name_, string memory symbol_) {\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC165-supportsInterface}.\r\n\t */\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n\t\treturn\r\n\t\t\tinterfaceId == type(IERC721).interfaceId ||\r\n\t\t\tinterfaceId == type(IERC721Metadata).interfaceId ||\r\n\t\t\tsuper.supportsInterface(interfaceId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-balanceOf}.\r\n\t */\r\n\tfunction balanceOf(address owner) public view virtual override returns (uint256) {\r\n\t\trequire(owner != address(0), \"ERC721: balance query for the zero address\");\r\n\t\treturn _balances[owner];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-ownerOf}.\r\n\t */\r\n\tfunction ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n\t\taddress owner = _owners[tokenId];\r\n\t\trequire(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n\t\treturn owner;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Metadata-name}.\r\n\t */\r\n\tfunction name() public view virtual override returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Metadata-symbol}.\r\n\t */\r\n\tfunction symbol() public view virtual override returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Metadata-tokenURI}.\r\n\t */\r\n\tfunction tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n\t\trequire(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n\t\tstring memory baseURI = _baseURI();\r\n\t\treturn bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, (tokenId).toString())) : \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n\t * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n\t * by default, can be overriden in child contracts.\r\n\t */\r\n\tfunction _baseURI() internal view virtual returns (string memory) {\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-approve}.\r\n\t */\r\n\tfunction approve(address to, uint256 tokenId) public virtual override {\r\n\t\taddress owner = ERC721.ownerOf(tokenId);\r\n\t\trequire(to != owner, \"ERC721: approval to current owner\");\r\n\r\n\t\trequire(\r\n\t\t\t_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n\t\t\t\"ERC721: approve caller is not owner nor approved for all\"\r\n\t\t);\r\n\r\n\t\t_approve(to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-getApproved}.\r\n\t */\r\n\tfunction getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n\t\trequire(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n\t\treturn _tokenApprovals[tokenId];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-setApprovalForAll}.\r\n\t */\r\n\tfunction setApprovalForAll(address operator, bool approved) public virtual override {\r\n\t\t_setApprovalForAll(_msgSender(), operator, approved);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-isApprovedForAll}.\r\n\t */\r\n\tfunction isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n\t\treturn _operatorApprovals[owner][operator];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-transferFrom}.\r\n\t */\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) public virtual override {\r\n\t\t//solhint-disable-next-line max-line-length\r\n\t\trequire(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n\t\t_transfer(from, to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-safeTransferFrom}.\r\n\t */\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) public virtual override {\r\n\t\tsafeTransferFrom(from, to, tokenId, \"\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721-safeTransferFrom}.\r\n\t */\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId,\r\n\t\tbytes memory _data\r\n\t) public virtual override {\r\n\t\trequire(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\t\t_safeTransfer(from, to, tokenId, _data);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n\t * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n\t *\r\n\t * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n\t *\r\n\t * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n\t * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must exist and be owned by `from`.\r\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction _safeTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId,\r\n\t\tbytes memory _data\r\n\t) internal virtual {\r\n\t\t_transfer(from, to, tokenId);\r\n\t\trequire(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns whether `tokenId` exists.\r\n\t *\r\n\t * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n\t *\r\n\t * Tokens start existing when they are minted (`_mint`),\r\n\t * and stop existing when they are burned (`_burn`).\r\n\t */\r\n\tfunction _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n\t\treturn _owners[tokenId] != address(0);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must exist.\r\n\t */\r\n\tfunction _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n\t\trequire(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n\t\taddress owner = ERC721.ownerOf(tokenId);\r\n\t\treturn (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Safely mints `tokenId` and transfers it to `to`.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must not exist.\r\n\t * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction _safeMint(address to, uint256 tokenId) internal virtual {\r\n\t\t_safeMint(to, tokenId, \"\");\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n\t * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n\t */\r\n\tfunction _safeMint(\r\n\t\taddress to,\r\n\t\tuint256 tokenId,\r\n\t\tbytes memory _data\r\n\t) internal virtual {\r\n\t\t_mint(to, tokenId);\r\n\t\trequire(\r\n\t\t\t_checkOnERC721Received(address(0), to, tokenId, _data),\r\n\t\t\t\"ERC721: transfer to non ERC721Receiver implementer\"\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Mints `tokenId` and transfers it to `to`.\r\n\t *\r\n\t * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must not exist.\r\n\t * - `to` cannot be the zero address.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction _mint(address to, uint256 tokenId) internal virtual {\r\n\t\trequire(to != address(0), \"ERC721: mint to the zero address\");\r\n\t\trequire(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n\t\t_beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n\t\t_balances[to] += 1;\r\n\t\t_owners[tokenId] = to;\r\n\r\n\t\temit Transfer(address(0), to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Destroys `tokenId`.\r\n\t * The approval is cleared when the token is burned.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `tokenId` must exist.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction _burn(uint256 tokenId) internal virtual {\r\n\t\taddress owner = ERC721.ownerOf(tokenId);\r\n\r\n\t\t_beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n\t\t// Clear approvals\r\n\t\t_approve(address(0), tokenId);\r\n\r\n\t\t_balances[owner] -= 1;\r\n\t\tdelete _owners[tokenId];\r\n\r\n\t\temit Transfer(owner, address(0), tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfers `tokenId` from `from` to `to`.\r\n\t *\tAs opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n\t *\r\n\t * Requirements:\r\n\t *\r\n\t * - `to` cannot be the zero address.\r\n\t * - `tokenId` token must be owned by `from`.\r\n\t *\r\n\t * Emits a {Transfer} event.\r\n\t */\r\n\tfunction _transfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) internal virtual {\r\n\t\trequire(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n\t\trequire(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(from, to, tokenId);\r\n\r\n\t\t// Clear approvals from the previous owner\r\n\t\t_approve(address(0), tokenId);\r\n\r\n\t\t_balances[from] -= 1;\r\n\t\t_balances[to] += 1;\r\n\t\t_owners[tokenId] = to;\r\n\r\n\t\temit Transfer(from, to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Approve `to` to operate on `tokenId`\r\n\t *\r\n\t * Emits a {Approval} event.\r\n\t */\r\n\tfunction _approve(address to, uint256 tokenId) internal virtual {\r\n\t\t_tokenApprovals[tokenId] = to;\r\n\t\temit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Approve `operator` to operate on all of `owner` tokens\r\n\t *\r\n\t * Emits a {ApprovalForAll} event.\r\n\t */\r\n\tfunction _setApprovalForAll(\r\n\t\taddress owner,\r\n\t\taddress operator,\r\n\t\tbool approved\r\n\t) internal virtual {\r\n\t\trequire(owner != operator, \"ERC721: approve to caller\");\r\n\t\t_operatorApprovals[owner][operator] = approved;\r\n\t\temit ApprovalForAll(owner, operator, approved);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n\t * The call is not executed if the target address is not a contract.\r\n\t *\r\n\t * @param from address representing the previous owner of the given token ID\r\n\t * @param to target address that will receive the tokens\r\n\t * @param tokenId uint256 ID of the token to be transferred\r\n\t * @param _data bytes optional data to send along with the call\r\n\t * @return bool whether the call correctly returned the expected magic value\r\n\t */\r\n\tfunction _checkOnERC721Received(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId,\r\n\t\tbytes memory _data\r\n\t) private returns (bool) {\r\n\t\tif (to.isContract()) {\r\n\t\t\ttry IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n\t\t\t\treturn retval == IERC721Receiver.onERC721Received.selector;\r\n\t\t\t} catch (bytes memory reason) {\r\n\t\t\t\tif (reason.length == 0) {\r\n\t\t\t\t\trevert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tassembly {\r\n\t\t\t\t\t\trevert(add(32, reason), mload(reason))\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Hook that is called before any token transfer. This includes minting\r\n\t * and burning.\r\n\t *\r\n\t * Calling conditions:\r\n\t *\r\n\t * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n\t * transferred to `to`.\r\n\t * - When `from` is zero, `tokenId` will be minted for `to`.\r\n\t * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n\t * - `from` and `to` are never both zero.\r\n\t *\r\n\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n\t */\r\n\tfunction _beforeTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) internal virtual {}\r\n}\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n\t// Mapping from owner to list of owned token IDs\r\n\tmapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n\t// Mapping from token ID to index of the owner tokens list\r\n\tmapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n\t// Array with all token ids, used for enumeration\r\n\tuint256[] private _allTokens;\r\n\r\n\t// Mapping from token id to position in the allTokens array\r\n\tmapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n\t/**\r\n\t * @dev See {IERC165-supportsInterface}.\r\n\t */\r\n\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n\t\treturn interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n\t */\r\n\tfunction tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n\t\trequire(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n\t\treturn _ownedTokens[owner][index];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Enumerable-totalSupply}.\r\n\t */\r\n\tfunction totalSupply() public view virtual override returns (uint256) {\r\n\t\treturn _allTokens.length;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev See {IERC721Enumerable-tokenByIndex}.\r\n\t */\r\n\tfunction tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n\t\trequire(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n\t\treturn _allTokens[index];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Hook that is called before any token transfer. This includes minting\r\n\t * and burning.\r\n\t *\r\n\t * Calling conditions:\r\n\t *\r\n\t * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n\t * transferred to `to`.\r\n\t * - When `from` is zero, `tokenId` will be minted for `to`.\r\n\t * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n\t * - `from` cannot be the zero address.\r\n\t * - `to` cannot be the zero address.\r\n\t *\r\n\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n\t */\r\n\tfunction _beforeTokenTransfer(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) internal virtual override {\r\n\t\tsuper._beforeTokenTransfer(from, to, tokenId);\r\n\r\n\t\tif (from == address(0)) {\r\n\t\t\t_addTokenToAllTokensEnumeration(tokenId);\r\n\t\t} else if (from != to) {\r\n\t\t\t_removeTokenFromOwnerEnumeration(from, tokenId);\r\n\t\t}\r\n\t\tif (to == address(0)) {\r\n\t\t\t_removeTokenFromAllTokensEnumeration(tokenId);\r\n\t\t} else if (to != from) {\r\n\t\t\t_addTokenToOwnerEnumeration(to, tokenId);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n\t * @param to address representing the new owner of the given token ID\r\n\t * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n\t */\r\n\tfunction _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n\t\tuint256 length = ERC721.balanceOf(to);\r\n\t\t_ownedTokens[to][length] = tokenId;\r\n\t\t_ownedTokensIndex[tokenId] = length;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Private function to add a token to this extension's token tracking data structures.\r\n\t * @param tokenId uint256 ID of the token to be added to the tokens list\r\n\t */\r\n\tfunction _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n\t\t_allTokensIndex[tokenId] = _allTokens.length;\r\n\t\t_allTokens.push(tokenId);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n\t * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n\t * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n\t * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n\t * @param from address representing the previous owner of the given token ID\r\n\t * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n\t */\r\n\tfunction _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n\t\t// To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n\t\t// then delete the last slot (swap and pop).\r\n\r\n\t\tuint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n\t\tuint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n\t\t// When the token to delete is the last token, the swap operation is unnecessary\r\n\t\tif (tokenIndex != lastTokenIndex) {\r\n\t\t\tuint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n\t\t\t_ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n\t\t\t_ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\t\t}\r\n\r\n\t\t// This also deletes the contents at the last position of the array\r\n\t\tdelete _ownedTokensIndex[tokenId];\r\n\t\tdelete _ownedTokens[from][lastTokenIndex];\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Private function to remove a token from this extension's token tracking data structures.\r\n\t * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n\t * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n\t */\r\n\tfunction _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n\t\t// To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n\t\t// then delete the last slot (swap and pop).\r\n\r\n\t\tuint256 lastTokenIndex = _allTokens.length - 1;\r\n\t\tuint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n\t\t// When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n\t\t// rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n\t\t// an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n\t\tuint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n\t\t_allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n\t\t_allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n\t\t// This also deletes the contents at the last position of the array\r\n\t\tdelete _allTokensIndex[tokenId];\r\n\t\t_allTokens.pop();\r\n\t}\r\n}\r\n\r\ninterface ERC20{\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract Nft_MOSS is ERC721Enumerable {\r\n\r\n\taddress owner;\r\n\tevent Mint (address indexed mintBy);\r\n\tuint256 public mintPricec6_f32f5e8a = uint256(100000000000000000000);\r\n\tevent NewPricec6_f32f5e8a (uint256 newPrice);\r\n\tstruct referralRecord { bool hasDeposited; address referringAddress; uint256 unclaimedRewards; }\r\n\tmapping(address => referralRecord) public referralRecordMap;\r\n\tuint256 public totalUnclaimedRewards = uint256(0);\r\n\tuint256 public totalClaimedRewards = uint256(0);\r\n\r\n\tconstructor() ERC721(\"MOSS Protocol-NFT\", \"MOSS-NFT\") {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\t//This function allows the owner to specify an address that will take over ownership rights instead. Please double check the address provided as once the function is executed, only the new owner will be able to change the address back.\r\n\tfunction changeOwner(address _newOwner) public onlyOwner {\r\n\t\towner = _newOwner;\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n/**\r\n * Function mint\r\n * The function takes in 0 variables. It can be called by functions both inside and outside of this contract. It does the following :\r\n * checks that ((totalSupply) + (1)) is less than or equals to 10000\r\n * checks that ((balanceOf with variable owner as (the address that called this function)) + (1)) is less than or equals to 9\r\n * calls ERC20's transferFrom function  with variable sender as the address that called this function, variable recipient as the address of this contract, variable amount as (mintPricec6_f32f5e8a) / (10 raised to the power of 0)\r\n * calls addReferral with variable _amt as (mintPricec6_f32f5e8a) / (10 raised to the power of 0)\r\n * repeat 1 time with loop variable i0 :  (creates an internal variable supply with initial value super.totalSupply; and then calls super._safeMint with variable account as the address that called this function, variable tokenId as supply)\r\n * emits event Mint with inputs the address that called this function\r\n*/\r\n\tfunction mint() public {\r\n\t\trequire(((totalSupply() + uint256(1)) <= uint256(10000)), \"Exceeded Total Supply\");\r\n\t\trequire(((balanceOf(msg.sender) + uint256(1)) <= uint256(9)), \"Exceeded Individual Supply Constraints\");\r\n\t\tERC20(0xD0e477451BCc5fD132f877F965958c4bC581fbd1).transferFrom(msg.sender, address(this), (mintPricec6_f32f5e8a / (uint256(10) ** uint256(0))));\r\n\t\taddReferral((mintPricec6_f32f5e8a / (uint256(10) ** uint256(0))));\r\n\t\tfor (uint i0 = 0; i0 < uint256(1); i0++){\r\n\t\t\tuint256 supply = super.totalSupply();\r\n\t\t\tsuper._safeMint(msg.sender, supply);\r\n\t\t}\r\n\t\temit Mint(msg.sender);\r\n\t}\r\n\r\n/**\r\n * Function changeMintPricec6_f32f5e8a\r\n * The function takes in 1 variable, (zero or a positive integer) _newMintPrice. It can be called by functions both inside and outside of this contract. It does the following :\r\n * checks that the function is called by the owner of the contract\r\n * updates mintPricec6_f32f5e8a as _newMintPrice\r\n * emits event NewPricec6_f32f5e8a with inputs _newMintPrice\r\n*/\r\n\tfunction changeMintPricec6_f32f5e8a(uint256 _newMintPrice) public onlyOwner {\r\n\t\tmintPricec6_f32f5e8a  = _newMintPrice;\r\n\t\temit NewPricec6_f32f5e8a(_newMintPrice);\r\n\t}\r\n\r\n/**\r\n * Function withdrawReferral\r\n * The function takes in 1 variable, (zero or a positive integer) _amt. It can be called by functions both inside and outside of this contract. It does the following :\r\n * checks that (referralRecordMap with element the address that called this function with element unclaimedRewards) is greater than or equals to _amt\r\n * checks that (ERC20's balanceOf function  with variable recipient as the address of this contract) is greater than or equals to _amt\r\n * calls ERC20's transfer function  with variable recipient as the address that called this function, variable amount as _amt\r\n * updates referralRecordMap (Element the address that called this function) (Entity unclaimedRewards) as (referralRecordMap with element the address that called this function with element unclaimedRewards) - (_amt)\r\n * updates totalUnclaimedRewards as (totalUnclaimedRewards) - (_amt)\r\n * updates totalClaimedRewards as (totalClaimedRewards) + (_amt)\r\n*/\r\n\tfunction withdrawReferral(uint256 _amt) public {\r\n\t\trequire((referralRecordMap[msg.sender].unclaimedRewards >= _amt), \"Insufficient referral rewards to withdraw\");\r\n\t\trequire((ERC20(0xD0e477451BCc5fD132f877F965958c4bC581fbd1).balanceOf(address(this)) >= _amt), \"Insufficient amount of the token in this contract to transfer out. Please contact the contract owner to top up the token.\");\r\n\t\tERC20(0xD0e477451BCc5fD132f877F965958c4bC581fbd1).transfer(msg.sender, _amt);\r\n\t\treferralRecordMap[msg.sender].unclaimedRewards  = (referralRecordMap[msg.sender].unclaimedRewards - _amt);\r\n\t\ttotalUnclaimedRewards  = (totalUnclaimedRewards - _amt);\r\n\t\ttotalClaimedRewards  = (totalClaimedRewards + _amt);\r\n\t}\r\n\r\n/**\r\n * Function addReferral\r\n * The function takes in 1 variable, (zero or a positive integer) _amt. It can only be called by other functions in this contract. It does the following :\r\n * creates an internal variable referringAddress with initial value referralRecordMap with element the address that called this function with element referringAddress\r\n * if not referralRecordMap with element the address that called this function with element hasDeposited then (updates referralRecordMap (Element the address that called this function) (Entity hasDeposited) as true)\r\n * if referringAddress is equals to Address 0 then ()\r\n * updates referralRecordMap (Element referringAddress) (Entity unclaimedRewards) as (referralRecordMap with element referringAddress with element unclaimedRewards) + (((5) * (_amt)) / (100))\r\n * updates referringAddress as referralRecordMap with element referringAddress with element referringAddress\r\n * updates totalUnclaimedRewards as (totalUnclaimedRewards) + (((5) * (_amt)) / (100))\r\n * if referringAddress is equals to Address 0 then ()\r\n * updates referralRecordMap (Element referringAddress) (Entity unclaimedRewards) as (referralRecordMap with element referringAddress with element unclaimedRewards) + (((2) * (_amt)) / (100))\r\n * updates referringAddress as referralRecordMap with element referringAddress with element referringAddress\r\n * updates totalUnclaimedRewards as (totalUnclaimedRewards) + (((2) * (_amt)) / (100))\r\n * if referringAddress is equals to Address 0 then ()\r\n * updates referralRecordMap (Element referringAddress) (Entity unclaimedRewards) as (referralRecordMap with element referringAddress with element unclaimedRewards) + ((_amt) / (100))\r\n * updates referringAddress as referralRecordMap with element referringAddress with element referringAddress\r\n * updates totalUnclaimedRewards as (totalUnclaimedRewards) + ((_amt) / (100))\r\n*/\r\n\tfunction addReferral(uint256 _amt) internal {\r\n\t\taddress referringAddress = referralRecordMap[msg.sender].referringAddress;\r\n\t\tif (!(referralRecordMap[msg.sender].hasDeposited)){\r\n\t\t\treferralRecordMap[msg.sender].hasDeposited  = true;\r\n\t\t}\r\n\t\tif ((referringAddress == address(0))){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treferralRecordMap[referringAddress].unclaimedRewards  = (referralRecordMap[referringAddress].unclaimedRewards + ((uint256(5) * _amt) / uint256(100)));\r\n\t\treferringAddress  = referralRecordMap[referringAddress].referringAddress;\r\n\t\ttotalUnclaimedRewards  = (totalUnclaimedRewards + ((uint256(5) * _amt) / uint256(100)));\r\n\t\tif ((referringAddress == address(0))){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treferralRecordMap[referringAddress].unclaimedRewards  = (referralRecordMap[referringAddress].unclaimedRewards + ((uint256(2) * _amt) / uint256(100)));\r\n\t\treferringAddress  = referralRecordMap[referringAddress].referringAddress;\r\n\t\ttotalUnclaimedRewards  = (totalUnclaimedRewards + ((uint256(2) * _amt) / uint256(100)));\r\n\t\tif ((referringAddress == address(0))){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treferralRecordMap[referringAddress].unclaimedRewards  = (referralRecordMap[referringAddress].unclaimedRewards + (_amt / uint256(100)));\r\n\t\treferringAddress  = referralRecordMap[referringAddress].referringAddress;\r\n\t\ttotalUnclaimedRewards  = (totalUnclaimedRewards + (_amt / uint256(100)));\r\n\t}\r\n\r\n/**\r\n * Function withdraw_coin_TokenERC20\r\n * The function takes in 1 variable, (zero or a positive integer) _amount. It can be called by functions both inside and outside of this contract. It does the following :\r\n * checks that the function is called by the owner of the contract\r\n * checks that (ERC20's balanceOf function  with variable recipient as the address of this contract) is greater than or equals to _amount\r\n * calls ERC20's transfer function  with variable recipient as the address that called this function, variable amount as _amount\r\n*/\r\n\tfunction withdraw_coin_TokenERC20(uint256 _amount) public onlyOwner {\r\n\t\trequire((ERC20(0xD0e477451BCc5fD132f877F965958c4bC581fbd1).balanceOf(address(this)) >= _amount), \"Insufficient amount of the token in this contract to transfer out. Please contact the contract owner to top up the token.\");\r\n\t\tERC20(0xD0e477451BCc5fD132f877F965958c4bC581fbd1).transfer(msg.sender, _amount);\r\n\t}\r\n\r\n/**\r\n * Function ownerMint\r\n * The function takes in 1 variable, (zero or a positive integer) _amount. It can be called by functions both inside and outside of this contract. It does the following :\r\n * checks that the function is called by the owner of the contract\r\n * repeat _amount times with loop variable i0 :  (creates an internal variable supply with initial value super.totalSupply; and then calls super._safeMint with variable account as the address that called this function, variable tokenId as supply)\r\n*/\r\n\tfunction ownerMint(uint256 _amount) public onlyOwner {\r\n\t\tfor (uint i0 = 0; i0 < _amount; i0++){\r\n\t\t\tuint256 supply = super.totalSupply();\r\n\t\t\tsuper._safeMint(msg.sender, supply);\r\n\t\t}\r\n\t}\r\n\r\n/**\r\n * Function addReferralAddress\r\n * The function takes in 1 variable, (an address) _referringAddress. It can only be called by functions outside of this contract. It does the following :\r\n * checks that referralRecordMap with element _referringAddress with element hasDeposited\r\n * checks that not _referringAddress is equals to (the address that called this function)\r\n * checks that (referralRecordMap with element the address that called this function with element referringAddress) is equals to Address 0\r\n * updates referralRecordMap (Element the address that called this function) (Entity referringAddress) as _referringAddress\r\n*/\r\n\tfunction addReferralAddress(address _referringAddress) external {\r\n\t\trequire(referralRecordMap[_referringAddress].hasDeposited, \"Referring Address has not made a deposit\");\r\n\t\trequire(!((_referringAddress == msg.sender)), \"Self-referrals are not allowed\");\r\n\t\trequire((referralRecordMap[msg.sender].referringAddress == address(0)), \"User has previously indicated a referral address\");\r\n\t\treferralRecordMap[msg.sender].referringAddress  = _referringAddress;\r\n\t}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mintBy\",\"type\":\"address\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"NewPricec6_f32f5e8a\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referringAddress\",\"type\":\"address\"}],\"name\":\"addReferralAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMintPrice\",\"type\":\"uint256\"}],\"name\":\"changeMintPricec6_f32f5e8a\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPricec6_f32f5e8a\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ownerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralRecordMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasDeposited\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"referringAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unclaimedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"withdrawReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw_coin_TokenERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Nft_MOSS", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bf462b3bf4093ceb686fe2403d449b01e05776e29aa8ded3fbea3511899a7073"}