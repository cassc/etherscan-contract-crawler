{"SourceCode": "{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length \\u003e 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"},\"BIRDFEEDERNFTV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC721.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./Counters.sol\\\";\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\nimport \\\"./Pausable.sol\\\";\\r\\nimport \\\"./Strings.sol\\\";\\r\\nimport \\\"./ECDSA.sol\\\";\\r\\nimport \\\"./IERC2981.sol\\\";\\r\\nimport \\\"./ReferralCode.sol\\\";\\r\\nimport \\\"./FeatureKeys.sol\\\";\\r\\n\\r\\ncontract OwnableDelegateProxy {}\\r\\n\\r\\ncontract ProxyRegistry {\\r\\n    mapping(address =\\u003e OwnableDelegateProxy) public proxies;\\r\\n}\\r\\n\\r\\ncontract BirdFeederNFT is\\r\\n    Ownable,\\r\\n    ERC721,\\r\\n    FeatureKeys,\\r\\n    ReentrancyGuard,\\r\\n    IERC2981,\\r\\n    Pausable\\r\\n{\\r\\n    using Counters for Counters.Counter;\\r\\n    using Strings for uint256;\\r\\n    Counters.Counter private _tokenIds;\\r\\n    address proxyRegistryAddress;\\r\\n    address public treasury;\\r\\n    uint256 public creatorRoyalty = 2;\\r\\n    uint256 public discountRate = 10;\\r\\n    uint256 public referralRewardPercentage = 50;\\r\\n    uint256 public basicReferralRewardPercentage = 25;\\r\\n    uint256 public minimumMintPrice = 2 ether;\\r\\n    uint256 public lockDuration = 1 days;\\r\\n    uint256 public maxMintable = 9000;\\r\\n    string private _contractURIMeta;\\r\\n    string private baseURI = \\\"https://ivory-grateful-partridge-659.mypinata.cloud/ipfs/\\\";\\r\\n    bool public isVIP = false;\\r\\n    ReferralCode private referralContract;\\r\\n\\r\\n    mapping(address =\\u003e uint256) public discounts;\\r\\n    mapping(uint256 =\\u003e address) public creators;\\r\\n    mapping(uint256 =\\u003e uint256) public unlockTimestamps;\\r\\n    mapping(uint256 =\\u003e bool) public mintedTokens;\\r\\n    mapping(uint256 =\\u003e string) private tokenIdToCID;\\r\\n    mapping(uint256 =\\u003e uint256) public tokenSupply;\\r\\n\\r\\n    event NFTMinted(\\r\\n        address indexed to,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 amount\\r\\n    );\\r\\n    event ReferralCodeGenerated(\\r\\n        address indexed user,\\r\\n        uint256 indexed tokenId,\\r\\n        string referralCode\\r\\n    );\\r\\n    event DiscountApplied(\\r\\n        address indexed user,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 discountAmount\\r\\n    );\\r\\n\\r\\n    event ReferralRewardSent(\\r\\n        address indexed user,\\r\\n        address indexed referrer,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    event NFTLocked(uint256 indexed tokenId, uint256 unlockTimestamp);\\r\\n    event NFTUnlocked(uint256 indexed tokenId);\\r\\n\\r\\n    event ReferralRewardPaid(\\r\\n        address indexed referrer,\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 referralReward\\r\\n    );\\r\\n\\r\\n    modifier creatorOnly(uint256 _id) {\\r\\n        require(\\r\\n            creators[_id] == msg.sender,\\r\\n            \\\"ERC721Tradable#creatorOnly: ONLY_CREATOR_ALLOWED\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _treasury,\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        address _proxyRegistryAddress,\\r\\n        address _referralContractAddress,\\r\\n        bool _isVIP\\r\\n    ) ERC721(_name, _symbol) {\\r\\n        isVIP = _isVIP;\\r\\n        treasury = _treasury;\\r\\n        proxyRegistryAddress = _proxyRegistryAddress;\\r\\n        referralContract = ReferralCode(_referralContractAddress);\\r\\n        _contractURIMeta = \\u0027{\\\"name\\\": \\\"BirdFeeder NFTs\\\", \\\"description\\\": \\\"BirdFeeder NFTs Adopt one today to try out all the OpenSea buying, selling, and bidding feature set.\\\",\\\"image\\\": \\\"http://167.71.176.114:8080/ipfs/Qmcc8NEqGVCzzYobfriiHoW1qoMLY4mFxcdZ7Z9LssVozb\\\",\\\"external_link\\\": \\\"www.birdfeeder.xyz\\\"}\\u0027;\\r\\n    }\\r\\n\\r\\n    // Set Referral Code Contract\\r\\n    function setReferralContract(address _referralContract) external onlyOwner {\\r\\n        referralContract = ReferralCode(_referralContract);\\r\\n    }\\r\\n\\r\\n    function _setBaseURI(string memory _uri) internal virtual {\\r\\n        baseURI = _uri;\\r\\n    }\\r\\n\\r\\n    function uri(uint256 _id) public view returns (string memory) {\\r\\n        require(_exists(_id), \\\"ERC721Tradable#uri: NONEXISTENT_TOKEN\\\");\\r\\n        string memory data = tokenIdToCID[_id];\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    baseURI,\\r\\n                    data\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function tokenURI(\\r\\n        uint256 tokenId\\r\\n    ) public view override returns (string memory) {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        string memory data = tokenIdToCID[tokenId];\\r\\n\\r\\n        // If there is no base URI, return the empty string\\r\\n        if (bytes(baseURI).length == 0) {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n        // If the token\\u0027s data is not set, return the default tokenURI\\r\\n        if (bytes(data).length == 0) {\\r\\n            return\\r\\n                string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\"));\\r\\n        }\\r\\n        // If both are set, concatenate the baseURI and data\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    baseURI,\\r\\n                    data\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _setTokenCID(\\r\\n        uint256 tokenId,\\r\\n        string memory _cid\\r\\n    ) internal virtual {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI set of nonexistent token\\\"\\r\\n        );\\r\\n        tokenIdToCID[tokenId] = _cid;\\r\\n    }\\r\\n\\r\\n    function _exists(uint256 tokenId) internal view override returns (bool) {\\r\\n        return mintedTokens[tokenId];\\r\\n    }\\r\\n\\r\\n    function _lazyMintExists(uint256 tokenId) internal view returns (bool) {\\r\\n        for (uint256 i = 0; i \\u003c lazyMintCounter; i++) {\\r\\n            if (lazyMints[i].tokenId == tokenId) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    // function to return the total supply of the all tokens\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _tokenIds.current();\\r\\n    }\\r\\n\\r\\n    function totalRemainingSupply() public view returns (uint256) {\\r\\n        return maxMintable - totalSupply();\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return balanceOf(account);\\r\\n    }\\r\\n\\r\\n    function totalMinted() public view returns (uint256) {\\r\\n        return balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getRemainingMintable() public view returns (uint256) {\\r\\n        return maxMintable - getMintedTokensCount();\\r\\n    }\\r\\n\\r\\n    function getTokensOfOwner(\\r\\n        address _owner\\r\\n    ) public view returns (uint256[] memory) {\\r\\n        uint256 totalTokens = totalSupply();\\r\\n        uint256[] memory result = new uint256[](totalTokens);\\r\\n        uint256 resultIndex = 0;\\r\\n\\r\\n        uint256 tokenId;\\r\\n\\r\\n        for (tokenId = 1; tokenId \\u003c= totalTokens; tokenId++) {\\r\\n            if (creators[tokenId] == _owner) {\\r\\n                // Check if the token belongs to the owner\\r\\n                result[resultIndex] = tokenId;\\r\\n                resultIndex++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256[] memory finalResult = new uint256[](resultIndex);\\r\\n        for (uint256 i = 0; i \\u003c resultIndex; i++) {\\r\\n            finalResult[i] = result[i];\\r\\n        }\\r\\n\\r\\n        return finalResult;\\r\\n    }\\r\\n\\r\\n    function getMintedTokens() public view returns (uint256[] memory) {\\r\\n        uint256 _currentTokenId = _tokenIds.current();\\r\\n        uint256[] memory mintedTokensArray = new uint256[](_currentTokenId);\\r\\n        uint256 counter = 0;\\r\\n\\r\\n        for (uint256 i = 1; i \\u003c= _currentTokenId; i++) {\\r\\n            if (mintedTokens[i]) {\\r\\n                mintedTokensArray[counter] = i;\\r\\n                counter++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Resize the array to exclude empty elements\\r\\n        uint256[] memory resizedArray = new uint256[](counter);\\r\\n        for (uint256 i = 0; i \\u003c counter; i++) {\\r\\n            resizedArray[i] = mintedTokensArray[i];\\r\\n        }\\r\\n\\r\\n        return resizedArray;\\r\\n    }\\r\\n\\r\\n    function getLazyMintTokenURI(\\r\\n        uint256 tokenId\\r\\n    ) public view returns (string memory) {\\r\\n        require(\\r\\n            _lazyMintExists(tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        LazyMint storage lazyM;\\r\\n        string memory data;\\r\\n\\r\\n        // loop through lazyMints to find the tokenId\\r\\n        for (uint256 i = 0; i \\u003c lazyMintCounter; i++) {\\r\\n            if (lazyMints[i].tokenId == tokenId) {\\r\\n                lazyM = lazyMints[i];\\r\\n                data = lazyM.data;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (bytes(baseURI).length == 0) {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n        if (bytes(data).length == 0) {\\r\\n            return\\r\\n                string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\"));\\r\\n        }\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    baseURI,\\r\\n                    data\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function setTokenData(\\r\\n        uint256 tokenId,\\r\\n        string memory data\\r\\n    ) external onlyOwner {\\r\\n        require(\\r\\n            _exists(tokenId),\\r\\n            \\\"ERC721Metadata: URI set of nonexistent token\\\"\\r\\n        );\\r\\n        tokenIdToCID[tokenId] = data;\\r\\n    }\\r\\n\\r\\n    function setLazyMintTokenData(\\r\\n        uint256 tokenId,\\r\\n        string memory data\\r\\n    ) external onlyOwner {\\r\\n        require(\\r\\n            _lazyMintExists(tokenId),\\r\\n            \\\"ERC721Metadata: URI set of nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        // loop through lazyMints to find the tokenId\\r\\n        for (uint256 i = 0; i \\u003c lazyMintCounter; i++) {\\r\\n            if (lazyMints[i].tokenId == tokenId) {\\r\\n                lazyMints[i].data = data;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getMintedTokensCount() public view returns (uint256) {\\r\\n        uint256[] memory mintedTokensArray = getMintedTokens();\\r\\n        return mintedTokensArray.length;\\r\\n    }\\r\\n\\r\\n    function lazyBatchMint(\\r\\n        string[] memory data\\r\\n    ) external payable whenNotPaused returns (uint256[] memory) {\\r\\n        uint256[] memory tokenIds = new uint256[](data.length);\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c data.length; i++) {\\r\\n            _tokenIds.increment();\\r\\n            uint256 tokenId = _tokenIds.current();\\r\\n            tokenIds[i] = tokenId;\\r\\n\\r\\n            lazyMints[lazyMintCounter] = LazyMint({\\r\\n                tokenId: tokenId,\\r\\n                amount: 1,\\r\\n                minter: msg.sender,\\r\\n                executed: false,\\r\\n                data: data[i],\\r\\n                referralCode: \\\"\\\"\\r\\n            });\\r\\n\\r\\n            lazyMintCounter++;\\r\\n        }\\r\\n\\r\\n        return tokenIds;\\r\\n    }\\r\\n\\r\\n    function setMaxMintable(uint256 newMaxMintable) external onlyOwner {\\r\\n        maxMintable = newMaxMintable;\\r\\n    }\\r\\n\\r\\n    function setMintPrice(uint256 newMintPrice) external onlyOwner {\\r\\n        minimumMintPrice = newMintPrice;\\r\\n    }\\r\\n\\r\\n    function setLockDuration(uint256 newLockDuration) external onlyOwner {\\r\\n        lockDuration = newLockDuration;\\r\\n    }\\r\\n\\r\\n    function _lockNFT(uint256 tokenId) internal {\\r\\n        uint256 unlockTimestamp = block.timestamp + lockDuration;\\r\\n        unlockTimestamps[tokenId] = unlockTimestamp;\\r\\n        emit NFTLocked(tokenId, unlockTimestamp);\\r\\n    }\\r\\n\\r\\n    function _unlockNFT(uint256 tokenId) internal {\\r\\n        unlockTimestamps[tokenId] = 0;\\r\\n        emit NFTUnlocked(tokenId);\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return baseURI;\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        uint256 batchSize\\r\\n    ) internal virtual override whenNotPaused {\\r\\n        // Ensure the NFT is unlocked before transferring\\r\\n        require(\\r\\n            block.timestamp \\u003e= unlockTimestamps[tokenId],\\r\\n            \\\"Token is locked\\\"\\r\\n        );\\r\\n\\r\\n        if ((from == address(0) || to == address(0)) \\u0026\\u0026 batchSize == 0) {\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function contractURI() public view returns (string memory) {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"data:application/json;utf8,\\\",\\r\\n                    _contractURIMeta\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function setContractURIMeta(\\r\\n        string memory newContractURIMeta\\r\\n    ) external onlyOwner {\\r\\n        _contractURIMeta = newContractURIMeta;\\r\\n    }\\r\\n\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    // Implement lazy minting feature\\r\\n    struct LazyMint {\\r\\n        uint256 tokenId;\\r\\n        uint256 amount;\\r\\n        address minter;\\r\\n        bool executed;\\r\\n        string data;\\r\\n        string referralCode; // Add this line\\r\\n    }\\r\\n\\r\\n    mapping(uint256 =\\u003e LazyMint) public lazyMints;\\r\\n    uint256 private lazyMintCounter = 0;\\r\\n\\r\\n    function lazyMint(\\r\\n        string memory data,\\r\\n        string memory referralCode // Add this parameter\\r\\n    ) external whenNotPaused returns (uint256) {\\r\\n        _tokenIds.increment();\\r\\n        uint256 tokenId = _tokenIds.current();\\r\\n\\r\\n        lazyMints[lazyMintCounter] = LazyMint({\\r\\n            tokenId: tokenId,\\r\\n            amount: 1,\\r\\n            minter: msg.sender,\\r\\n            executed: false,\\r\\n            data: data,\\r\\n            referralCode: referralCode // Add this line\\r\\n        });\\r\\n\\r\\n        tokenIdToCID[tokenId] = data;\\r\\n\\r\\n        lazyMintCounter++;\\r\\n\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    function getLazyMintedTokens() external view returns (uint256[] memory) {\\r\\n        uint256[] memory tokenIds = new uint256[](lazyMintCounter);\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c lazyMintCounter; i++) {\\r\\n            tokenIds[i] = lazyMints[i].tokenId;\\r\\n        }\\r\\n\\r\\n        return tokenIds;\\r\\n    }\\r\\n\\r\\n    function getExecutedLazyMintedTokens() external view returns (uint256) {\\r\\n        for (uint256 i = 0; i \\u003c lazyMintCounter; i++) {\\r\\n            if (lazyMints[i].executed) {\\r\\n                return lazyMints[i].tokenId;\\r\\n            }\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    // create function to return all non-executed lazy mints in an array\\r\\n    function getAvailableLazyMintedTokens() public view returns (uint256) {\\r\\n        uint256 counter = 0;\\r\\n        for (uint256 i = 0; i \\u003c lazyMintCounter; i++) {\\r\\n            if (!lazyMints[i].executed) {\\r\\n                counter++;\\r\\n            }\\r\\n        }\\r\\n        return counter;\\r\\n    }\\r\\n\\r\\n    // create function to return all non-executed lazy mints in an array\\r\\n    function getAvailableLazyMintedTokenList()\\r\\n        public\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        uint256[] memory tokenIds = new uint256[](lazyMintCounter);\\r\\n\\r\\n        uint256 counter = 0;\\r\\n        for (uint256 i = 0; i \\u003c lazyMintCounter; i++) {\\r\\n            if (!lazyMints[i].executed) {\\r\\n                tokenIds[counter] = lazyMints[i].tokenId;\\r\\n                counter++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256[] memory availableTokenIds = new uint256[](counter);\\r\\n        for (uint256 i = 0; i \\u003c counter; i++) {\\r\\n            availableTokenIds[i] = tokenIds[i];\\r\\n        }\\r\\n\\r\\n        return availableTokenIds;\\r\\n    }\\r\\n\\r\\n    // create a function to return the next non-executed lazy mint\\r\\n    function getNextLazyMintedToken() external view returns (uint256) {\\r\\n        for (uint256 i = 0; i \\u003c lazyMintCounter; i++) {\\r\\n            if (!lazyMints[i].executed) {\\r\\n                return lazyMints[i].tokenId;\\r\\n            }\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function executeLazyMint(\\r\\n        uint256 lazyMintId,\\r\\n        address to,\\r\\n        string memory referralCode\\r\\n    ) external payable nonReentrant whenNotPaused {\\r\\n        LazyMint storage _lazyMint = lazyMints[lazyMintId];\\r\\n        require(!_lazyMint.executed, \\\"Lazy mint already executed\\\");\\r\\n\\r\\n        uint256 finalMintPrice = minimumMintPrice;\\r\\n        string memory _referralCode = \\\"\\\";\\r\\n        uint256 netAmount = minimumMintPrice;\\r\\n\\r\\n        // Use referralCode contract to check if the code is used\\r\\n        if (\\r\\n            bytes(_lazyMint.referralCode).length \\u003e 2 \\u0026\\u0026\\r\\n            referralContract.isValidCode(_lazyMint.referralCode)\\r\\n        ) {\\r\\n            _referralCode = _lazyMint.referralCode;\\r\\n        } else if (\\r\\n            bytes(referralCode).length \\u003e 2 \\u0026\\u0026\\r\\n            referralContract.isValidCode(referralCode)\\r\\n        ) {\\r\\n            _referralCode = referralCode;\\r\\n        }\\r\\n\\r\\n        // Apply referral code discount if provided\\r\\n        if (bytes(_referralCode).length \\u003e 0) {\\r\\n            finalMintPrice =\\r\\n                minimumMintPrice -\\r\\n                ((minimumMintPrice * discountRate) /\\r\\n                100);\\r\\n            require(msg.value \\u003e= finalMintPrice, \\\"Insufficient payment\\\");\\r\\n            netAmount = applyDiscount(_referralCode, _lazyMint.tokenId);\\r\\n        }\\r\\n\\r\\n        require(msg.value \\u003e= finalMintPrice, \\\"Insufficient payment\\\");\\r\\n\\r\\n        // Refund excess payment\\r\\n        if (msg.value \\u003e finalMintPrice) {\\r\\n             (bool _success, ) = payable(msg.sender).call{value: msg.value - finalMintPrice, gas: 23000}(\\\"\\\");\\r\\n             require(_success, \\\"Refund Transfer failed\\\");\\r\\n        }\\r\\n        if (isVIP) {\\r\\n            referralContract.upgradeReferrer(msg.sender);\\r\\n        }\\r\\n        // Mint the NFT\\r\\n        _safeMint(to, _lazyMint.tokenId, bytes(_lazyMint.data));\\r\\n        creators[_lazyMint.tokenId] = msg.sender;\\r\\n        _lazyMint.minter = msg.sender;\\r\\n        // Set token URI using CID\\r\\n\\r\\n        mintedTokens[_lazyMint.tokenId] = true;\\r\\n        _setTokenCID(_lazyMint.tokenId, _lazyMint.data);\\r\\n        tokenSupply[_lazyMint.tokenId] = _lazyMint.amount;\\r\\n        // Emit event\\r\\n        emit NFTMinted(to, _lazyMint.tokenId, 1);\\r\\n\\r\\n        // Lock the NFT\\r\\n        _lockNFT(_lazyMint.tokenId);\\r\\n\\r\\n        // Mark the lazy mint as executed\\r\\n        _lazyMint.executed = true;\\r\\n\\r\\n        (bool success, ) = payable(treasury).call{value: netAmount, gas: 23000}(\\\"\\\");\\r\\n        require(success, \\\"Treasury Transfer failed\\\");\\r\\n\\r\\n    }\\r\\n\\r\\n    function setCreatorRoyalty(uint256 newCreatorRoyalty) external onlyOwner {\\r\\n        creatorRoyalty = newCreatorRoyalty;\\r\\n    }\\r\\n\\r\\n    function setDiscountRate(uint256 newDiscountRate) external onlyOwner {\\r\\n        discountRate = newDiscountRate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change the creator address for given token\\r\\n     * @param _to   Address of the new creator\\r\\n     * @param _id  Token IDs to change creator of\\r\\n     */\\r\\n    function _setCreator(address _to, uint256 _id) internal creatorOnly(_id) {\\r\\n        creators[_id] = _to;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change the creator address for given tokens\\r\\n     * @param _to   Address of the new creator\\r\\n     * @param _ids  Array of Token IDs to change creator\\r\\n     */\\r\\n    function setCreator(address _to, uint256[] memory _ids) public {\\r\\n        require(\\r\\n            _to != address(0),\\r\\n            \\\"ERC721Tradable#setCreator: INVALID_ADDRESS.\\\"\\r\\n        );\\r\\n        for (uint256 i = 0; i \\u003c _ids.length; i++) {\\r\\n            uint256 id = _ids[i];\\r\\n            _setCreator(_to, id);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setProxyRegistryAddress(\\r\\n        address _proxyRegistryAddress\\r\\n    ) external onlyOwner {\\r\\n        proxyRegistryAddress = _proxyRegistryAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Override isApprovedForAll to whitelist user\\u0027s OpenSea proxy accounts to enable gas-free listings.\\r\\n     */\\r\\n    function isApprovedForAll(\\r\\n        address _owner,\\r\\n        address _operator\\r\\n    ) public view override returns (bool isOperator) {\\r\\n        // Whitelist OpenSea proxy contract for easy trading.\\r\\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\r\\n        if (address(proxyRegistry.proxies(_owner)) == _operator) {\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        return ERC721.isApprovedForAll(_owner, _operator);\\r\\n    }\\r\\n\\r\\n    function royaltyInfo(\\r\\n        uint256 tokenId,\\r\\n        uint256 salePrice\\r\\n    ) external view override returns (address receiver, uint256 royaltyAmount) {\\r\\n        receiver = creators[tokenId];\\r\\n        royaltyAmount = (salePrice * creatorRoyalty) / 100;\\r\\n    }\\r\\n\\r\\n    function setReferralRewardPercentage(\\r\\n        uint256 newReferralRewardPercentage\\r\\n    ) external onlyOwner {\\r\\n        referralRewardPercentage = newReferralRewardPercentage;\\r\\n    }\\r\\n\\r\\n    function setBasicReferralRewardPercentage(\\r\\n        uint256 newBasicReferralRewardPercentage\\r\\n    ) external onlyOwner {\\r\\n        basicReferralRewardPercentage = newBasicReferralRewardPercentage;\\r\\n    }\\r\\n\\r\\n    function generateReferralCode(\\r\\n        uint256 _tokenId,\\r\\n        string memory _code\\r\\n    ) external returns (string memory) {\\r\\n        //require the user is the owner of the token\\r\\n        require(\\r\\n            _ownerOf(_tokenId) == msg.sender,\\r\\n            \\\"Only the owner of the token can generate a referral code\\\"\\r\\n        );\\r\\n        require(\\r\\n            bytes(_code).length \\u003c= 15,\\r\\n            \\\"Code length cannot exceed 15 characters\\\"\\r\\n        );\\r\\n        require(\\r\\n            !referralContract.isValidCode(_code),\\r\\n            \\\"The provided code is already in use\\\"\\r\\n        );\\r\\n\\r\\n        return\\r\\n            referralContract.generateReferralCode(\\r\\n                msg.sender,\\r\\n                _tokenId,\\r\\n                address(this),\\r\\n                _code\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function getMyReferralCode(\\r\\n        address holder\\r\\n    ) external view returns (string memory) {\\r\\n        return referralContract.getReferralCodeByCreator(holder);\\r\\n    }\\r\\n\\r\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\r\\n        return _ownerOf(tokenId);\\r\\n    }\\r\\n\\r\\n    // check if referral code is valid\\r\\n    function isValidReferralCode(\\r\\n        string memory referralCode\\r\\n    ) external view returns (bool) {\\r\\n        ReferralCode.Referrer memory referrer = referralContract\\r\\n            .getReferrerByCode(referralCode);\\r\\n        return referrer.creator != address(0);\\r\\n    }\\r\\n\\r\\n    function applyDiscount(\\r\\n        string memory referralCode,\\r\\n        uint256 tokenId\\r\\n    ) internal returns (uint256) {\\r\\n        ReferralCode.Referrer memory referrer = referralContract\\r\\n            .getReferrerByCode(referralCode);\\r\\n        require(referrer.creator != address(0), \\\"Invalid referral code\\\");\\r\\n        require(referrer.creator != msg.sender, \\\"Cannot refer yourself\\\");\\r\\n        // require(discounts[msg.sender] == 0, \\\"Discount already applied\\\");\\r\\n        uint256 discountAmount = (minimumMintPrice * discountRate) / 100;\\r\\n        uint256 netPrice = minimumMintPrice - discountAmount;\\r\\n\\r\\n        require(msg.value \\u003e= netPrice, \\\"Insufficient funds\\\");\\r\\n\\r\\n        emit DiscountApplied(msg.sender, tokenId, discountAmount);\\r\\n\\r\\n        // Transfer the referral reward to the referrer\\r\\n        uint256 _referralRewardPercentage;\\r\\n        if (isVIP \\u0026\\u0026 !referrer.isVIP) {\\r\\n            _referralRewardPercentage = basicReferralRewardPercentage;\\r\\n        } else {\\r\\n            _referralRewardPercentage = referralRewardPercentage;\\r\\n        }\\r\\n\\r\\n        uint256 referralReward = (netPrice * _referralRewardPercentage) / 100;\\r\\n        (bool _success, ) = payable(referrer.creator).call{value:referralReward, gas: 23000}(\\\"\\\");\\r\\n        require(_success, \\\"Reward Transfer failed\\\");\\r\\n\\r\\n        // Update the total discounts and applied referral codes in the ReferralCode contract\\r\\n        referralContract.redeemCode(\\r\\n            referralCode,\\r\\n            msg.sender,\\r\\n            discountAmount,\\r\\n            referralReward,\\r\\n            \\\"GENESIS\\\"\\r\\n        );\\r\\n\\r\\n        emit ReferralRewardSent(msg.sender, referrer.creator, referralReward);\\r\\n        return netPrice - referralReward;\\r\\n    }\\r\\n\\r\\n    function getAppliedReferralCode(\\r\\n        string memory referralCode\\r\\n    ) public view returns (uint256) {\\r\\n        ReferralCode.Referrer memory referrer = referralContract\\r\\n            .getReferrerByCode(referralCode);\\r\\n        require(referrer.creator != address(0), \\\"Invalid referral code\\\");\\r\\n        // check if referrer has any applied codes\\r\\n        return referralContract.getTotalAppliedReferralCodes(referrer.creator);\\r\\n    }\\r\\n\\r\\n    function getTotalRewards(address _wallet) public view returns (uint256) {\\r\\n        return referralContract.totalReferralRewards(_wallet);\\r\\n    }\\r\\n\\r\\n    function getMyDiscounts() public view returns (uint256) {\\r\\n        return referralContract.totalDiscountsByMinter(msg.sender);\\r\\n    }\\r\\n\\r\\n    function getAllAppliedReferralCodes()\\r\\n        public\\r\\n        view\\r\\n        returns (address[] memory, uint256[] memory)\\r\\n    {\\r\\n        uint256 length = _tokenIds.current();\\r\\n        address[] memory creatorsArray = new address[](length);\\r\\n        uint256[] memory counts = new uint256[](length);\\r\\n        for (uint256 i = 0; i \\u003c length; i++) {\\r\\n            address creator = creators[i + 1]; // assuming token IDs start from 1\\r\\n            creatorsArray[i] = creator;\\r\\n            counts[i] = referralContract.getTotalAppliedReferralCodes(creator);\\r\\n        }\\r\\n        return (creatorsArray, counts);\\r\\n    }\\r\\n\\r\\n    function setTreasury(address newTreasury) external onlyOwner {\\r\\n        treasury = newTreasury;\\r\\n    }\\r\\n\\r\\n    function withdrawETH() external onlyOwner {\\r\\n        (bool success, ) = payable(treasury).call{value: address(this).balance, gas: 50000}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    function withdrawERC20(address token) external onlyOwner {\\r\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\r\\n        IERC20(token).transfer(treasury, balance);\\r\\n    }\\r\\n}\\r\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"},\"Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library\\u0027s function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value \\u003e 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"},\"ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature \\u0027s\\u0027 value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs \\u0026\\n            bytes32(\\n                0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n            );\\n        uint8 v = uint8((uint256(vs) \\u003e\\u003e 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 \\u003c s \\u003c secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (\\n            uint256(s) \\u003e\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\\n        ) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(\\n        bytes32 hash\\n    ) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(\\n        bytes memory s\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n\\\",\\n                    Strings.toString(s.length),\\n                    s\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(\\n        bytes32 domainSeparator,\\n        bytes32 structHash\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\n            );\\n    }\\n}\\n\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"},\"ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./Address.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport \\\"./Strings.sol\\\";\\nimport \\\"./ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 =\\u003e address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address =\\u003e uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 =\\u003e address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(\\n        address owner\\n    ) public view virtual override returns (uint256) {\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: address zero is not a valid owner\\\"\\n        );\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(\\n        uint256 tokenId\\n    ) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length \\u003e 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(\\n        address operator,\\n        bool approved\\n    ) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: caller is not token owner or approved\\\"\\n        );\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721: caller is not token owner or approved\\\"\\n        );\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn\\u0027t exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(\\n        address spender,\\n        uint256 tokenId\\n    ) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner ||\\n            isApprovedForAll(owner, spender) ||\\n            getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(\\n            ERC721.ownerOf(tokenId) == from,\\n            \\\"ERC721: transfer from incorrect owner\\\"\\n        );\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(\\n            ERC721.ownerOf(tokenId) == from,\\n            \\\"ERC721: transfer from incorrect owner\\\"\\n        );\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`\\u0027s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``\\u0027s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``\\u0027s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``\\u0027s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(\\n        address account,\\n        uint256 amount\\n    ) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\"},\"FeatureKeys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract FeatureKeys is Ownable {\\r\\n    struct FeatureKey {\\r\\n        string featureName;\\r\\n        string userApiKey;\\r\\n        string secretKey;\\r\\n        uint256 expiresAt; // Unix timestamp\\r\\n        bool active;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 =\\u003e FeatureKey[]) private _featureKeys;\\r\\n\\r\\n    function addFeatureKey(\\r\\n        uint256 tokenId,\\r\\n        string memory featureName,\\r\\n        string memory userApiKey,\\r\\n        string memory secretKey,\\r\\n        uint256 expiresAt\\r\\n    ) public onlyOwner {\\r\\n        _featureKeys[tokenId].push(\\r\\n            FeatureKey(featureName, userApiKey, secretKey, expiresAt, true)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getFeatureKey(\\r\\n        uint256 tokenId,\\r\\n        uint256 index\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            string memory featureName,\\r\\n            string memory userApiKey,\\r\\n            string memory secretKey,\\r\\n            uint256 expiresAt,\\r\\n            bool active\\r\\n        )\\r\\n    {\\r\\n        require(\\r\\n            _featureKeys[tokenId].length \\u003e index,\\r\\n            \\\"No feature key set for this token at the given index\\\"\\r\\n        );\\r\\n        return (\\r\\n            _featureKeys[tokenId][index].featureName,\\r\\n            _featureKeys[tokenId][index].userApiKey,\\r\\n            _featureKeys[tokenId][index].secretKey,\\r\\n            _featureKeys[tokenId][index].expiresAt,\\r\\n            _featureKeys[tokenId][index].active\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getTokenFeatureKeys(\\r\\n        uint256 tokenId\\r\\n    ) public view returns (FeatureKey[] memory) {\\r\\n        return _featureKeys[tokenId];\\r\\n    }\\r\\n\\r\\n    function deleteFeatureKey(uint256 tokenId, uint256 index) public onlyOwner {\\r\\n        require(\\r\\n            _featureKeys[tokenId].length \\u003e index,\\r\\n            \\\"No feature key set for this token at the given index\\\"\\r\\n        );\\r\\n        delete _featureKeys[tokenId][index];\\r\\n    }\\r\\n\\r\\n    function updateFeatureKey(\\r\\n        uint256 tokenId,\\r\\n        uint256 index,\\r\\n        string memory featureName,\\r\\n        string memory userApiKey,\\r\\n        string memory secretKey,\\r\\n        uint256 expiresAt,\\r\\n        bool active\\r\\n    ) public onlyOwner {\\r\\n        require(\\r\\n            _featureKeys[tokenId].length \\u003e index,\\r\\n            \\\"No feature key set for this token at the given index\\\"\\r\\n        );\\r\\n        _featureKeys[tokenId][index] = FeatureKey(\\r\\n            featureName,\\r\\n            userApiKey,\\r\\n            secretKey,\\r\\n            expiresAt,\\r\\n            active\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"},\"IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\"},\"IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"},\"IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"},\"Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003e b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003c b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a \\u0026 b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator \\u003e prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always \\u003e= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator \\u0026 (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel\\u0027s lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don\\u0027t need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up \\u0026\\u0026 mulmod(x, y, denominator) \\u003e 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.\\u0027s \\\"Hacker\\u0027s Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) \\u003c= a \\u003c 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) \\u003c= a \\u003c 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) \\u003c= sqrt(a) \\u003c sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) \\u003c= sqrt(a) \\u003c 2**((k+1)/2) \\u003c= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 \\u003c\\u003c (log2(a) \\u003e\\u003e 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton\\u0027s method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            result = (result + a / result) \\u003e\\u003e 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up \\u0026\\u0026 result * result \\u003c a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value \\u003e\\u003e 128 \\u003e 0) {\\n                value \\u003e\\u003e= 128;\\n                result += 128;\\n            }\\n            if (value \\u003e\\u003e 64 \\u003e 0) {\\n                value \\u003e\\u003e= 64;\\n                result += 64;\\n            }\\n            if (value \\u003e\\u003e 32 \\u003e 0) {\\n                value \\u003e\\u003e= 32;\\n                result += 32;\\n            }\\n            if (value \\u003e\\u003e 16 \\u003e 0) {\\n                value \\u003e\\u003e= 16;\\n                result += 16;\\n            }\\n            if (value \\u003e\\u003e 8 \\u003e 0) {\\n                value \\u003e\\u003e= 8;\\n                result += 8;\\n            }\\n            if (value \\u003e\\u003e 4 \\u003e 0) {\\n                value \\u003e\\u003e= 4;\\n                result += 4;\\n            }\\n            if (value \\u003e\\u003e 2 \\u003e 0) {\\n                value \\u003e\\u003e= 2;\\n                result += 2;\\n            }\\n            if (value \\u003e\\u003e 1 \\u003e 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up \\u0026\\u0026 1 \\u003c\\u003c result \\u003c value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value \\u003e= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value \\u003e= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value \\u003e= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value \\u003e= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value \\u003e= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value \\u003e= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value \\u003e= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up \\u0026\\u0026 10**result \\u003c value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value \\u003e\\u003e 128 \\u003e 0) {\\n                value \\u003e\\u003e= 128;\\n                result += 16;\\n            }\\n            if (value \\u003e\\u003e 64 \\u003e 0) {\\n                value \\u003e\\u003e= 64;\\n                result += 8;\\n            }\\n            if (value \\u003e\\u003e 32 \\u003e 0) {\\n                value \\u003e\\u003e= 32;\\n                result += 4;\\n            }\\n            if (value \\u003e\\u003e 16 \\u003e 0) {\\n                value \\u003e\\u003e= 16;\\n                result += 2;\\n            }\\n            if (value \\u003e\\u003e 8 \\u003e 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up \\u0026\\u0026 1 \\u003c\\u003c (result * 8) \\u003c value ? 1 : 0);\\n        }\\n    }\\n}\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"ReferralCode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract ReferralCode is Ownable {\\r\\n    struct Referrer {\\r\\n        string code;\\r\\n        address creator;\\r\\n        uint256 tokenId;\\r\\n        address tokenAddress;\\r\\n        uint256 totalAppliedCodes;\\r\\n        uint256 totalRewards;\\r\\n        bool isVIP;\\r\\n    }\\r\\n\\r\\n    event ReferralCodeGenerated(string code, address creator);\\r\\n    event ReferralCodeRedeemed(string code, address minter);\\r\\n    event ReferrerUpgraded(string code, address creator);\\r\\n\\r\\n    mapping(string =\\u003e Referrer) public referralCodes;\\r\\n    mapping(string =\\u003e bool) public referralCodesVIP;\\r\\n    mapping(address =\\u003e string) public referralCodesByCreator;\\r\\n    string[] public referralCodeKeys;\\r\\n    mapping(address =\\u003e uint256) public totalReferralRewards;\\r\\n    mapping(address =\\u003e uint256) public totalAppliedReferralCodes;\\r\\n    mapping(address =\\u003e uint256) public totalDiscountsByMinter;\\r\\n    mapping(address =\\u003e address) public nftContracts;\\r\\n    mapping(address =\\u003e bool) public nftContractVIP;\\r\\n    mapping(string =\\u003e RedemptionDetail[]) public redemptions;\\r\\n    uint256 public totalDiscounts;\\r\\n    uint256 public totalReferralCount;\\r\\n    uint256 public totalRewards;\\r\\n\\r\\n    struct RedemptionDetail {\\r\\n        address redeemer;        \\r\\n        string tokenType;\\r\\n        uint256 redeemDate;\\r\\n        uint256 reward;\\r\\n        bool vipReferrer;\\r\\n    }\\r\\n\\r\\n    modifier onlyNFTContract() {\\r\\n        require(\\r\\n            nftContracts[msg.sender] == msg.sender,\\r\\n            \\\"Only NFT contract can call this function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function addNFTContract(\\r\\n        address _nftContract,\\r\\n        bool isVIP\\r\\n    ) external onlyOwner {\\r\\n        nftContracts[_nftContract] = _nftContract;\\r\\n        nftContractVIP[_nftContract] = isVIP;\\r\\n    }\\r\\n\\r\\n    function removeNFTContract(address _nftContract) external onlyOwner {\\r\\n        delete nftContracts[_nftContract];\\r\\n        delete nftContractVIP[_nftContract];\\r\\n    }\\r\\n\\r\\n    function generateReferralCode(\\r\\n        address _creator,\\r\\n        uint256 _tokenId,\\r\\n        address _tokenAddress,\\r\\n        string memory _code\\r\\n    ) external onlyNFTContract returns (string memory) {\\r\\n        require(_creator != address(0), \\\"Creator address cannot be 0\\\");\\r\\n        string memory code;\\r\\n        if (bytes(_code).length \\u003e 0) {\\r\\n            require(\\r\\n                _isValidCode(_code),\\r\\n                \\\"The provided code contains invalid characters\\\"\\r\\n            );\\r\\n            require(!isValidCode(_code), \\\"The provided code is already in use\\\");\\r\\n            code = _code;\\r\\n        } else {\\r\\n            code = generateUniqueReferralCode();\\r\\n        }\\r\\n        bool _vip = nftContractVIP[_tokenAddress];\\r\\n        referralCodes[code] = Referrer(\\r\\n            code,\\r\\n            _creator,\\r\\n            _tokenId,\\r\\n            _tokenAddress,\\r\\n            0,\\r\\n            0,\\r\\n            _vip\\r\\n        );\\r\\n        referralCodesVIP[code] = _vip;\\r\\n        referralCodeKeys.push(code);\\r\\n        referralCodesByCreator[_creator] = code;\\r\\n        emit ReferralCodeGenerated(code, _creator);\\r\\n        return code;\\r\\n    }\\r\\n\\r\\n    function isValidCode(string memory _code) public view returns (bool) {\\r\\n        return referralCodes[_code].creator != address(0);\\r\\n    }\\r\\n\\r\\n    function upgradeReferrer(\\r\\n        address _referrer\\r\\n    ) external onlyNFTContract returns (Referrer memory) {\\r\\n        require(_referrer != address(0), \\\"Referrer address cannot be 0\\\");\\r\\n        string memory _code = referralCodesByCreator[_referrer];\\r\\n        Referrer storage referrer = referralCodes[_code];\\r\\n        if (bytes(_code).length \\u003e 0) {\\r\\n            if (referrer.isVIP) {\\r\\n                return referrer;\\r\\n            } else {\\r\\n                referrer.isVIP = true;\\r\\n                emit ReferrerUpgraded(_code, _referrer);\\r\\n            }\\r\\n            return referrer;\\r\\n        } else {\\r\\n            return referrer;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function redeemCode(\\r\\n        string memory _code,\\r\\n        address _minter,\\r\\n        uint256 _discount,\\r\\n        uint256 _reward,\\r\\n        string memory _tokenType\\r\\n    ) external onlyNFTContract returns (Referrer memory) {\\r\\n        Referrer storage referrer = referralCodes[_code];\\r\\n        require(referrer.creator != address(0), \\\"Invalid referral code\\\");\\r\\n        require(referrer.creator != _minter, \\\"Cannot refer yourself\\\");\\r\\n        referrer.totalAppliedCodes++;\\r\\n        referrer.totalRewards += _reward;\\r\\n\\r\\n        RedemptionDetail memory detail = RedemptionDetail({\\r\\n            redeemer: _minter,\\r\\n            tokenType: _tokenType,\\r\\n            redeemDate: block.timestamp,\\r\\n            reward: _reward,\\r\\n            vipReferrer: referrer.isVIP\\r\\n        });\\r\\n        redemptions[_code].push(detail);\\r\\n\\r\\n        totalDiscounts += _discount;\\r\\n        totalReferralCount++;\\r\\n        totalRewards += _reward;\\r\\n\\r\\n        totalReferralRewards[referrer.creator] += _reward;\\r\\n        totalAppliedReferralCodes[referrer.creator]++;\\r\\n        totalDiscountsByMinter[_minter] += _discount;\\r\\n\\r\\n        emit ReferralCodeRedeemed(_code, _minter);\\r\\n\\r\\n        return referrer;\\r\\n    }\\r\\n\\r\\n    function getRedemptionCountByCode(string memory _code) external view returns (uint256) {\\r\\n        return redemptions[_code].length;\\r\\n    }\\r\\n\\r\\n    function getRedemptionByCodeAndIndex(string memory _code, uint256 index) external view returns (address, string memory, uint256, uint256) {\\r\\n        require(index \\u003c redemptions[_code].length, \\\"Index out of bounds\\\");\\r\\n        RedemptionDetail memory redemption = redemptions[_code][index];\\r\\n        return (redemption.redeemer, redemption.tokenType, redemption.redeemDate, redemption.reward);\\r\\n    }\\r\\n\\r\\n    function getReferralCodeByCreator(\\r\\n        address creator\\r\\n    ) external view returns (string memory) {\\r\\n        return referralCodesByCreator[creator];\\r\\n    }\\r\\n\\r\\n    function getReferrerByCode(\\r\\n        string memory _code\\r\\n    ) external view returns (Referrer memory) {\\r\\n        Referrer storage referrerStorage = referralCodes[_code];\\r\\n        require(referrerStorage.creator != address(0), \\\"Invalid referral code\\\");\\r\\n\\r\\n        Referrer memory referrerMemory = Referrer({\\r\\n            code: referrerStorage.code,\\r\\n            creator: referrerStorage.creator,\\r\\n            tokenId: referrerStorage.tokenId,\\r\\n            tokenAddress: referrerStorage.tokenAddress,\\r\\n            totalAppliedCodes: referrerStorage.totalAppliedCodes,\\r\\n            totalRewards: referrerStorage.totalRewards,\\r\\n            isVIP: referrerStorage.isVIP\\r\\n        });\\r\\n\\r\\n        return referrerMemory;\\r\\n    }\\r\\n\\r\\n    function getTotalAppliedReferralCodes(\\r\\n        address creator\\r\\n    ) external view returns (uint256) {\\r\\n        return totalAppliedReferralCodes[creator];\\r\\n    }\\r\\n\\r\\n    function generateUniqueReferralCode()\\r\\n        internal\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        string memory code;\\r\\n        do {\\r\\n            code = randomString(8);\\r\\n        } while (isValidCode(code));\\r\\n        return code;\\r\\n    }\\r\\n\\r\\n    function _isValidCode(string memory _code) internal pure returns (bool) {\\r\\n        bytes memory b = bytes(_code);\\r\\n        for (uint i; i \\u003c b.length; i++) {\\r\\n            bytes1 char = b[i];\\r\\n            if (\\r\\n                !((char \\u003e= bytes1(\\\"0\\\") \\u0026\\u0026 char \\u003c= bytes1(\\\"9\\\")) ||\\r\\n                    (char \\u003e= bytes1(\\\"A\\\") \\u0026\\u0026 char \\u003c= bytes1(\\\"Z\\\")) ||\\r\\n                    (char \\u003e= bytes1(\\\"a\\\") \\u0026\\u0026 char \\u003c= bytes1(\\\"z\\\")))\\r\\n            ) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function randomString(uint256 length) public view returns (string memory) {\\r\\n        string memory chars = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\";\\r\\n        bytes memory charsBytes = bytes(chars);\\r\\n        bytes memory str = new bytes(length);\\r\\n        for (uint256 i = 0; i \\u003c length; ++i) {\\r\\n            uint256 rand = uint256(\\r\\n                keccak256(\\r\\n                    abi.encodePacked(\\r\\n                        block.timestamp,\\r\\n                        blockhash(block.number - 1),\\r\\n                        i\\r\\n                    )\\r\\n                )\\r\\n            ) % charsBytes.length;\\r\\n            str[i] = charsBytes[rand];\\r\\n        }\\r\\n        return string(str);\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referralContractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isVIP\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discountAmount\",\"type\":\"uint256\"}],\"name\":\"DiscountApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTimestamp\",\"type\":\"uint256\"}],\"name\":\"NFTLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NFTMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"}],\"name\":\"ReferralCodeGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referralReward\",\"type\":\"uint256\"}],\"name\":\"ReferralRewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReferralRewardSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"featureName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"userApiKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"secretKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"addFeatureKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basicReferralRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorRoyalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"deleteFeatureKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"discountRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"discounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lazyMintId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"}],\"name\":\"executeLazyMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"generateReferralCode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAppliedReferralCodes\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"}],\"name\":\"getAppliedReferralCode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableLazyMintedTokenList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableLazyMintedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExecutedLazyMintedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFeatureKey\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"featureName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"userApiKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"secretKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLazyMintTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLazyMintedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintedTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMintedTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyDiscounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getMyReferralCode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextLazyMintedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingMintable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenFeatureKeys\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"featureName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"userApiKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"secretKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct FeatureKeys.FeatureKey[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getTokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVIP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"}],\"name\":\"isValidReferralCode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"data\",\"type\":\"string[]\"}],\"name\":\"lazyBatchMint\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"}],\"name\":\"lazyMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lazyMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBasicReferralRewardPercentage\",\"type\":\"uint256\"}],\"name\":\"setBasicReferralRewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newContractURIMeta\",\"type\":\"string\"}],\"name\":\"setContractURIMeta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"setCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCreatorRoyalty\",\"type\":\"uint256\"}],\"name\":\"setCreatorRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDiscountRate\",\"type\":\"uint256\"}],\"name\":\"setDiscountRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"setLazyMintTokenData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLockDuration\",\"type\":\"uint256\"}],\"name\":\"setLockDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxMintable\",\"type\":\"uint256\"}],\"name\":\"setMaxMintable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMintPrice\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"}],\"name\":\"setProxyRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralContract\",\"type\":\"address\"}],\"name\":\"setReferralContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReferralRewardPercentage\",\"type\":\"uint256\"}],\"name\":\"setReferralRewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"data\",\"type\":\"string\"}],\"name\":\"setTokenData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRemainingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"featureName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"userApiKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"secretKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"updateFeatureKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BirdFeederNFT", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000080b5e5e0b8a418dfb08bc9c7addbd959520634a00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000080b5e5e0b8a418dfb08bc9c7addbd959520634a0000000000000000000000008182bf8206a0fc495f9e06b363f2800572a6b73e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e476c6f77204265617273204e4654000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000547424e4654000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cc63f8ccbdd77776fde2c64350d42bbde059ff29d6ff6929ba3e0b8e866f4506"}