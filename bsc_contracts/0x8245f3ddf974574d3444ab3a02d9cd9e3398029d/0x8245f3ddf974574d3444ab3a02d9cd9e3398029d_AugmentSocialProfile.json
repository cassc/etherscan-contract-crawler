{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AugmentSocialProfile.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\nimport './libraries/Ownable.sol';\\n\\ncontract AugmentSocialProfile is Ownable {\\n    address public companyFeeDestination;\\n    address public communityFeeDestination;\\n\\n    // Only when there is unclaimed referral fees.\\n    address public referralFeeDestination;\\n\\n    uint256 public companyFeePercent;\\n    uint256 public subjectFeePercent;\\n    uint256 public communityFeePercent;\\n\\n    /// @notice This is a subset of Company fee, and paid from Company wallet\\n    uint256 public referralFeePercent;\\n\\n    event ReferralPaid(\\n        address indexed referrer,\\n        address indexed referree,\\n        uint256 amount,\\n        address indexed destinationAddress\\n    );\\n\\n    event Trade(\\n        address trader,\\n        address subject,\\n        bool isBuy,\\n        uint256 ethAmount,\\n        uint256 companyEthAmount,\\n        uint256 subjectEthAmount,\\n        uint256 communityFeeAmount,\\n        uint256 supply\\n    );\\n\\n    // SharesSubject => (Holder => Balance)\\n    mapping(address => mapping(address => uint256)) public sharesBalance;\\n\\n    // SharesSubject => Supply\\n    mapping(address => uint256) public sharesSupply;\\n\\n    // Maps the referee to referrer\\n    mapping(address => address) public referralData;\\n\\n    constructor() Ownable() {\\n        subjectFeePercent = 50000000000000000; // 5% for share owner\\n        referralFeePercent = 30000000000000000; // 3% for referral pool\\n        communityFeePercent = 10000000000000000; // 1% for community pool\\n        companyFeePercent = 10000000000000000; // 1% for procotol\\n    }\\n\\n    function setReferralData(\\n        address _referee,\\n        address _referrer\\n    ) external onlyOwner {\\n        require(\\n            referralData[_referee] == address(0),\\n            'referrer already have referrer'\\n        );\\n\\n        referralData[_referee] = _referrer;\\n    }\\n\\n    function setCompanyFeeDestination(\\n        address _feeDestination\\n    ) public onlyOwner {\\n        companyFeeDestination = _feeDestination;\\n    }\\n\\n    function setCommunityFeeDestination(\\n        address _feeDestination\\n    ) public onlyOwner {\\n        communityFeeDestination = _feeDestination;\\n    }\\n\\n    function setReferralFeeDestination(\\n        address _feeDestination\\n    ) public onlyOwner {\\n        referralFeeDestination = _feeDestination;\\n    }\\n\\n    function setCompantFeePercent(uint256 _feePercent) public onlyOwner {\\n        companyFeePercent = _feePercent;\\n    }\\n\\n    function setSubjectFeePercent(uint256 _feePercent) public onlyOwner {\\n        subjectFeePercent = _feePercent;\\n    }\\n\\n    function setCommunityFeePercent(uint256 _feePercent) public onlyOwner {\\n        communityFeePercent = _feePercent;\\n    }\\n\\n    function sethReferralFeePercent(uint256 _feePercent) public onlyOwner {\\n        referralFeePercent = _feePercent;\\n    }\\n\\n    function getPrice(\\n        uint256 supply,\\n        uint256 amount\\n    ) public pure returns (uint256) {\\n        uint256 calculationSupply = (supply + amount);\\n\\n        return ((calculationSupply ** 2) * 1 ether) / 43370;\\n    }\\n\\n    function getBuyPrice(address sharesSubject) public view returns (uint256) {\\n        return getPrice(sharesSupply[sharesSubject], 1);\\n    }\\n\\n    function getSellPrice(address sharesSubject) public view returns (uint256) {\\n        return getPrice(sharesSupply[sharesSubject], 0);\\n    }\\n\\n    function getBuyPriceAfterFee(\\n        address sharesSubject\\n    ) public view returns (uint256) {\\n        uint256 price = getBuyPrice(sharesSubject);\\n        uint256 referralFee = (price * referralFeePercent) / 1 ether;\\n        uint256 companyFee = (price * companyFeePercent) / 1 ether;\\n        uint256 subjectFee = (price * subjectFeePercent) / 1 ether;\\n        uint256 communityFee = (price * communityFeePercent) / 1 ether;\\n        return price + companyFee + subjectFee + communityFee + referralFee;\\n    }\\n\\n    function getSellPriceAfterFee(\\n        address sharesSubject\\n    ) public view returns (uint256) {\\n        uint256 price = getSellPrice(sharesSubject);\\n        uint256 referralFee = (price * referralFeePercent) / 1 ether;\\n        uint256 companyFee = (price * companyFeePercent) / 1 ether;\\n        uint256 subjectFee = (price * subjectFeePercent) / 1 ether;\\n        uint256 communityFee = (price * communityFeePercent) / 1 ether;\\n        return price - companyFee - subjectFee - communityFee - referralFee;\\n    }\\n\\n    function buyShare(address sharesSubject) public payable {\\n        uint256 supply = sharesSupply[sharesSubject];\\n\\n        uint256 price = getBuyPrice(sharesSubject);\\n        uint256 referralFee = (price * referralFeePercent) / 1 ether;\\n        uint256 companyFee = (price * companyFeePercent) / 1 ether;\\n        uint256 subjectFee = (price * subjectFeePercent) / 1 ether;\\n        uint256 communityFee = (price * communityFeePercent) / 1 ether;\\n\\n        require(\\n            msg.value >=\\n                price + companyFee + subjectFee + communityFee + referralFee,\\n            'Insufficient payment'\\n        );\\n\\n        sharesBalance[sharesSubject][msg.sender] =\\n            sharesBalance[sharesSubject][msg.sender] +\\n            1;\\n\\n        sharesSupply[sharesSubject] = supply + 1;\\n        emit Trade(\\n            msg.sender,\\n            sharesSubject,\\n            true,\\n            price,\\n            companyFee,\\n            subjectFee,\\n            communityFee,\\n            supply + 1\\n        );\\n\\n        // Protocol without referral fee fee (referral is paid from company wallet)\\n        (bool success1, ) = companyFeeDestination.call{value: companyFee}('');\\n\\n        // Share owner fee\\n        (bool success2, ) = sharesSubject.call{value: subjectFee}('');\\n\\n        // For the community\\n        (bool success3, ) = communityFeeDestination.call{value: communityFee}(\\n            ''\\n        );\\n\\n        // Transfer referral fee to referer, or to the pool if not found referrer.\\n        address referralDestination = referralData[msg.sender] != address(0)\\n            ? referralData[msg.sender]\\n            : referralFeeDestination;\\n\\n        (bool success4, ) = referralDestination.call{value: referralFee}('');\\n\\n        require(\\n            success1 && success2 && success3 && success4,\\n            'Unable to send funds'\\n        );\\n\\n        emit ReferralPaid(\\n            referralData[msg.sender],\\n            msg.sender,\\n            referralFee,\\n            referralDestination\\n        );\\n    }\\n\\n    function sellShare(address sharesSubject) public payable {\\n        uint256 supply = sharesSupply[sharesSubject];\\n        require(supply >= 1, 'bad supply');\\n\\n        uint256 price = getSellPrice(sharesSubject);\\n        uint256 communityFee = (price * communityFeePercent) / 1 ether;\\n        uint256 referralFee = (price * referralFeePercent) / 1 ether;\\n        uint256 companyFee = (price * companyFeePercent) / 1 ether;\\n        uint256 subjectFee = (price * subjectFeePercent) / 1 ether;\\n\\n        require(\\n            sharesBalance[sharesSubject][msg.sender] >= 1,\\n            'Insufficient shares'\\n        );\\n\\n        sharesBalance[sharesSubject][msg.sender] =\\n            sharesBalance[sharesSubject][msg.sender] -\\n            1;\\n\\n        sharesSupply[sharesSubject] = supply - 1;\\n        emit Trade(\\n            msg.sender,\\n            sharesSubject,\\n            false,\\n            price,\\n            companyFee,\\n            subjectFee,\\n            communityFee,\\n            supply - 1\\n        );\\n\\n        // Pay the seller the amount after fees\\n        (bool success1, ) = msg.sender.call{\\n            value: price - companyFee - referralFee - communityFee - subjectFee\\n        }('');\\n\\n        // Pay the company fee\\n        (bool success2, ) = companyFeeDestination.call{value: companyFee}('');\\n\\n        // Pay the share owner\\n        (bool success3, ) = sharesSubject.call{value: subjectFee}('');\\n\\n        // Pay the community fee\\n        (bool success4, ) = communityFeeDestination.call{value: communityFee}(\\n            ''\\n        );\\n\\n        // Transfer referral fee to referer, or to the pool if not found referrer.\\n        address referralDestination = referralData[msg.sender] != address(0)\\n            ? referralData[msg.sender]\\n            : referralFeeDestination;\\n\\n        (bool success5, ) = referralDestination.call{value: referralFee}('');\\n\\n        require(\\n            success1 && success2 && success3 && success4 && success5,\\n            'Unable to send funds'\\n        );\\n\\n        emit ReferralPaid(\\n            referralData[msg.sender],\\n            msg.sender,\\n            referralFee,\\n            referralDestination\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport './Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), 'Ownable: caller is not the owner');\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            'Ownable: new owner is the zero address'\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 600\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referree\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"}],\"name\":\"ReferralPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"companyEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subjectEthAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"communityFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sharesSubject\",\"type\":\"address\"}],\"name\":\"buyShare\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityFeeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"companyFeeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"companyFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sharesSubject\",\"type\":\"address\"}],\"name\":\"getBuyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sharesSubject\",\"type\":\"address\"}],\"name\":\"getBuyPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sharesSubject\",\"type\":\"address\"}],\"name\":\"getSellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sharesSubject\",\"type\":\"address\"}],\"name\":\"getSellPriceAfterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralFeeDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sharesSubject\",\"type\":\"address\"}],\"name\":\"sellShare\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDestination\",\"type\":\"address\"}],\"name\":\"setCommunityFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setCommunityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setCompantFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDestination\",\"type\":\"address\"}],\"name\":\"setCompanyFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"setReferralData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDestination\",\"type\":\"address\"}],\"name\":\"setReferralFeeDestination\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setSubjectFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"sethReferralFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sharesBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sharesSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subjectFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AugmentSocialProfile", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "600", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}