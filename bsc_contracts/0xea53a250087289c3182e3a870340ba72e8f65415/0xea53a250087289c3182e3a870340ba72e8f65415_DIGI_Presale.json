{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DIGI_Presale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// Import necessary libraries and interfaces\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract DIGI_Presale is Ownable, ReentrancyGuard, Pausable {\\r\\n    using SafeMath for uint256;\\r\\n    AggregatorV3Interface internal priceFeed;\\r\\n\\r\\n    uint256 public tokenPrice = 25;\\r\\n    uint256 public minPurchase = 100;\\r\\n    uint256 public vestingCliff = 2592000;\\r\\n    uint256 public startTime = 1702166460;\\r\\n    uint256 public endTime = 1704067199;\\r\\n    uint256 public raisedAmount;\\r\\n    uint256 public startVestingTime = 1705190460;\\r\\n    mapping(address => bool) public calculate_pop_token;\\r\\n    mapping(address => uint256) public balances;\\r\\n    mapping(address => uint256[]) public releases;\\r\\n    mapping(address => uint256[]) public releases_pop;\\r\\n    mapping(address => bool) public whitelist;\\r\\n\\r\\n    IERC20 public token;\\r\\n    IERC20 public pop_token;\\r\\n    IERC20 public USDT;\\r\\n    address public DIGI_Addr = 0x9a5F46D8aCCeA41Bec1762D79a15dB7cBbFe7CaE;\\r\\n    address public DIGI_POP_Addr = 0x1649bDD6bBbF62937EFeE78b8E8b3Fe696996633;\\r\\n    address public USDT_Addr = 0x55d398326f99059fF775485246999027B3197955;\\r\\n\\r\\n    address public POP_Burn_Addr = 0xd3D59d09402A3A3C926361635D80e8E8fA103beE;\\r\\n    address private priceAddress = 0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE; // BNB/USD Mainnet\\r\\n    // address private priceAddress = 0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526; // BNB/USD Testnet\\r\\n\\r\\n    event TokensPurchased(address indexed buyer, uint256 amount);\\r\\n    event TokensClaimed(address indexed holder, uint256 amount);\\r\\n\\r\\n    constructor() {\\r\\n        token = IERC20(DIGI_Addr);\\r\\n        pop_token = IERC20(DIGI_POP_Addr);\\r\\n        USDT = IERC20(USDT_Addr);\\r\\n        priceFeed = AggregatorV3Interface(priceAddress);\\r\\n    }\\r\\n\\r\\n    function buyTokens(\\r\\n        address _refAddr\\r\\n    ) external payable nonReentrant whenNotPaused {\\r\\n        require(startTime <= block.timestamp, \\\"Presale: SALE_NOT_STARTED\\\");\\r\\n        require(block.timestamp <= endTime, \\\"Presale: SALE_ENDED\\\");\\r\\n        require(whitelist[msg.sender], \\\"Only whitelisted users can buy tokens\\\");\\r\\n        require(\\r\\n            (msg.value.mul(getLatestPrice())).div(1e8) >= (minPurchase.mul(1e18)),\\r\\n            \\\"Minimum purchase amount not met\\\"\\r\\n        );\\r\\n\\r\\n        uint256 tokenAmount = (msg.value.mul(getLatestPrice())).div(\\r\\n            tokenPrice.mul(1e5)\\r\\n        );\\r\\n        // uint256 tokenAmount = (msg.value.mul(bnbprice)).div(tokenPrice.mul(1e5));\\r\\n\\r\\n        if (_refAddr != address(0) && _refAddr != msg.sender) {\\r\\n            balances[msg.sender] = balances[msg.sender].add(\\r\\n                tokenAmount.mul(25).div(1000)\\r\\n            );\\r\\n            balances[_refAddr] = balances[_refAddr].add(\\r\\n                tokenAmount.mul(25).div(1000)\\r\\n            );\\r\\n\\r\\n            uint totalTokens1 = balances[_refAddr];\\r\\n            // update release schedule for the buyer\\r\\n            uint256 releasePercentage1 = 5;\\r\\n            if (releases[_refAddr].length == 0) {\\r\\n                releases[_refAddr] = new uint[](14);\\r\\n            }\\r\\n            for (uint256 i = 1; i <= 13; i++) {\\r\\n                if (i == 7) {\\r\\n                    releasePercentage1 = 10;\\r\\n                }\\r\\n                releases[_refAddr][i] = totalTokens1\\r\\n                    .mul(releasePercentage1)\\r\\n                    .div(100);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        balances[msg.sender] = balances[msg.sender].add(tokenAmount);\\r\\n\\r\\n        uint totalTokens = balances[msg.sender];\\r\\n        // update release schedule for the buyer\\r\\n        uint256 releasePercentage = 5;\\r\\n        if (releases[msg.sender].length == 0) {\\r\\n            releases[msg.sender] = new uint[](14);\\r\\n        }\\r\\n        for (uint256 i = 1; i <= 13; i++) {\\r\\n            if (i == 7) {\\r\\n                releasePercentage = 10;\\r\\n            }\\r\\n            releases[msg.sender][i] = totalTokens.mul(releasePercentage).div(\\r\\n                100\\r\\n            );\\r\\n        }\\r\\n\\r\\n        raisedAmount = raisedAmount.add(tokenAmount);\\r\\n\\r\\n        emit TokensPurchased(msg.sender, tokenAmount);\\r\\n    }\\r\\n\\r\\n    function buyTokensWithUSDT(\\r\\n        address _refAddr,\\r\\n        uint256 _amount\\r\\n    ) external nonReentrant whenNotPaused {\\r\\n        require(startTime <= block.timestamp, \\\"Presale: SALE_NOT_STARTED\\\");\\r\\n        require(block.timestamp <= endTime, \\\"Presale: SALE_ENDED\\\");\\r\\n        require(whitelist[msg.sender], \\\"Only whitelisted users can buy tokens\\\");\\r\\n        require(_amount >= (minPurchase.mul(1e18)), \\\"Minimum purchase amount not met\\\");\\r\\n\\r\\n        uint256 tokenAmount = _amount.mul(1e3).div(tokenPrice);\\r\\n\\r\\n        USDT.transferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n        if (_refAddr != address(0) && _refAddr != msg.sender) {\\r\\n            balances[msg.sender] = balances[msg.sender].add(\\r\\n                tokenAmount.mul(25).div(1000)\\r\\n            );\\r\\n            balances[_refAddr] = balances[_refAddr].add(\\r\\n                tokenAmount.mul(25).div(1000)\\r\\n            );\\r\\n\\r\\n            uint totalTokens1 = balances[_refAddr];\\r\\n            // update release schedule for the buyer\\r\\n            uint256 releasePercentage1 = 5;\\r\\n            if (releases[_refAddr].length == 0) {\\r\\n                releases[_refAddr] = new uint[](14);\\r\\n            }\\r\\n            for (uint256 i = 1; i <= 13; i++) {\\r\\n                if (i == 7) {\\r\\n                    releasePercentage1 = 10;\\r\\n                }\\r\\n                releases[_refAddr][i] = totalTokens1\\r\\n                    .mul(releasePercentage1)\\r\\n                    .div(100);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        balances[msg.sender] = balances[msg.sender].add(tokenAmount);\\r\\n\\r\\n        uint totalTokens = balances[msg.sender];\\r\\n        // update release schedule for the buyer\\r\\n        uint256 releasePercentage = 5;\\r\\n        if (releases[msg.sender].length == 0) {\\r\\n            releases[msg.sender] = new uint[](14);\\r\\n        }\\r\\n        for (uint256 i = 1; i <= 13; i++) {\\r\\n            if (i == 7) {\\r\\n                releasePercentage = 10;\\r\\n            }\\r\\n            releases[msg.sender][i] = totalTokens.mul(releasePercentage).div(\\r\\n                100\\r\\n            );\\r\\n        }\\r\\n\\r\\n        raisedAmount = raisedAmount.add(tokenAmount);\\r\\n\\r\\n        emit TokensPurchased(msg.sender, tokenAmount);\\r\\n    }\\r\\n\\r\\n    function claimTokens() external nonReentrant {\\r\\n        require(balances[msg.sender] > 0, \\\"No tokens to claim\\\");\\r\\n\\r\\n        uint256 tokensToClaim = calculateClaimableAmount(msg.sender);\\r\\n        require(tokensToClaim > 0, \\\"No tokens to claim at the moment\\\");\\r\\n\\r\\n        balances[msg.sender] = balances[msg.sender].sub(tokensToClaim);\\r\\n        token.transfer(msg.sender, tokensToClaim);\\r\\n\\r\\n        emit TokensClaimed(msg.sender, tokensToClaim);\\r\\n    }\\r\\n\\r\\n    function claimTokensWithPop() external nonReentrant {\\r\\n        require(\\r\\n            block.timestamp > startVestingTime + vestingCliff,\\r\\n            \\\"No tokens to claim\\\"\\r\\n        );\\r\\n        require(\\r\\n            IERC20(DIGI_POP_Addr).balanceOf(address(msg.sender)) > 0,\\r\\n            \\\"No tokens to claim\\\"\\r\\n        );\\r\\n\\r\\n        if (calculate_pop_token[msg.sender] == false) {\\r\\n            uint totalTokens = IERC20(DIGI_POP_Addr).balanceOf(\\r\\n                address(msg.sender)\\r\\n            );\\r\\n            // update release schedule for the buyer\\r\\n            uint256 releasePercentage = 5;\\r\\n            if (releases_pop[msg.sender].length == 0) {\\r\\n                releases_pop[msg.sender] = new uint[](14);\\r\\n            }\\r\\n            for (uint256 i = 1; i <= 13; i++) {\\r\\n                if (i == 7) {\\r\\n                    releasePercentage = 10;\\r\\n                }\\r\\n                releases_pop[msg.sender][i] = totalTokens\\r\\n                    .mul(releasePercentage)\\r\\n                    .div(100);\\r\\n            }\\r\\n\\r\\n            calculate_pop_token[msg.sender] = true;\\r\\n        }\\r\\n\\r\\n        uint256 tokensToClaim = calculateClaimablePopAmount(msg.sender);\\r\\n        require(tokensToClaim > 0, \\\"No tokens to claim at the moment\\\");\\r\\n\\r\\n        IERC20(DIGI_POP_Addr).transferFrom(\\r\\n            msg.sender,\\r\\n            POP_Burn_Addr,\\r\\n            tokensToClaim\\r\\n        );\\r\\n        token.transfer(msg.sender, tokensToClaim);\\r\\n\\r\\n        emit TokensClaimed(msg.sender, tokensToClaim);\\r\\n    }\\r\\n\\r\\n    function calculateClaimableAmount(address holder) public returns (uint256) {\\r\\n        if (block.timestamp < startVestingTime + vestingCliff) return 0;\\r\\n        else {\\r\\n            uint256 elapsedMonths = (block.timestamp -\\r\\n                (startVestingTime + vestingCliff)) /\\r\\n                2592000 +\\r\\n                1;\\r\\n            uint256 claimableAmount = 0;\\r\\n            if (elapsedMonths > 13) elapsedMonths = 13;\\r\\n            for (uint i = 1; i <= elapsedMonths; i++) {\\r\\n                claimableAmount += releases[holder][i];\\r\\n                releases[holder][i] = 0;\\r\\n            }\\r\\n            return claimableAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculateClaimablePopAmount(\\r\\n        address holder\\r\\n    ) public returns (uint256) {\\r\\n        if (block.timestamp < startVestingTime + vestingCliff) return 0;\\r\\n        else {\\r\\n            uint256 elapsedMonths = (block.timestamp -\\r\\n                (startVestingTime + vestingCliff)) /\\r\\n                2592000 +\\r\\n                1;\\r\\n            uint256 claimableAmount = 0;\\r\\n            if (elapsedMonths > 13) elapsedMonths = 13;\\r\\n            for (uint i = 1; i <= elapsedMonths; i++) {\\r\\n                claimableAmount += releases_pop[holder][i];\\r\\n                releases_pop[holder][i] = 0;\\r\\n            }\\r\\n            return claimableAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* Admin Functions */\\r\\n\\r\\n    function setStartVesting(uint256 _startVestingTime) external onlyOwner {\\r\\n        startVestingTime = _startVestingTime;\\r\\n    }\\r\\n\\r\\n    function setVestingCliff(uint256 _vestingCliff) external onlyOwner {\\r\\n        vestingCliff = _vestingCliff;\\r\\n    }\\r\\n\\r\\n    function addToWhitelist(address _address) external {\\r\\n        whitelist[_address] = true;\\r\\n    }\\r\\n\\r\\n    function removeFromWhitelist(address _address) external {\\r\\n        whitelist[_address] = false;\\r\\n    }\\r\\n\\r\\n    function withdrawBNB() external onlyOwner {\\r\\n        payable(msg.sender).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function withdrawToken(address _tokenAddr) external onlyOwner {\\r\\n        require(\\r\\n            IERC20(_tokenAddr).balanceOf(address(this)) > 0,\\r\\n            \\\"Insufficient Token balance\\\"\\r\\n        );\\r\\n\\r\\n        IERC20(_tokenAddr).transfer(\\r\\n            msg.sender,\\r\\n            IERC20(_tokenAddr).balanceOf(address(this))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setStartTime(uint256 _startTime) external onlyOwner {\\r\\n        startTime = _startTime;\\r\\n    }\\r\\n\\r\\n    function setEndTime(uint256 _endTime) external onlyOwner {\\r\\n        endTime = _endTime;\\r\\n    }\\r\\n\\r\\n    function setTokenPrice(uint256 _tokenPrice) external onlyOwner {\\r\\n        tokenPrice = _tokenPrice;\\r\\n    }\\r\\n\\r\\n    function setMinPurchaseAmount(uint256 _minPurchase) external onlyOwner {\\r\\n        minPurchase = _minPurchase;\\r\\n    }\\r\\n\\r\\n    /* Functions */\\r\\n    function getLatestPrice() public view returns (uint) {\\r\\n        (\\r\\n            ,\\r\\n            /*uint80 roundID*/ int price /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/,\\r\\n            ,\\r\\n            ,\\r\\n\\r\\n        ) = priceFeed.latestRoundData();\\r\\n        return (uint)(price);\\r\\n    }\\r\\n\\r\\n    function getClaimableAmount(address holder) public view returns (uint256) {\\r\\n        if (block.timestamp < startVestingTime + vestingCliff) return 0;\\r\\n        else {\\r\\n            uint256 elapsedMonths = (block.timestamp -\\r\\n                (startVestingTime + vestingCliff)) /\\r\\n                2592000 +\\r\\n                1;\\r\\n            uint256 claimableAmount = 0;\\r\\n            if (elapsedMonths > 13) elapsedMonths = 13;\\r\\n            for (uint i = 1; i <= elapsedMonths; i++) {\\r\\n                claimableAmount += releases[holder][i];\\r\\n            }\\r\\n            return claimableAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getClaimablePopAmount(\\r\\n        address holder\\r\\n    ) public view returns (uint256) {\\r\\n        if (block.timestamp < startVestingTime + vestingCliff) return 0;\\r\\n        else {\\r\\n            uint256 elapsedMonths = (block.timestamp -\\r\\n                (startVestingTime + vestingCliff)) /\\r\\n                2592000 +\\r\\n                1;\\r\\n            uint256 claimableAmount = 0;\\r\\n            if (elapsedMonths > 13) elapsedMonths = 13;\\r\\n            for (uint i = 1; i <= elapsedMonths; i++) {\\r\\n                claimableAmount += releases_pop[holder][i];\\r\\n            }\\r\\n            return claimableAmount;\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DIGI_Addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DIGI_POP_Addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POP_Burn_Addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_Addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refAddr\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyTokensWithUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"calculateClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"calculateClaimablePopAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"calculate_pop_token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokensWithPop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getClaimablePopAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pop_token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"raisedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"releases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"releases_pop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minPurchase\",\"type\":\"uint256\"}],\"name\":\"setMinPurchaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startVestingTime\",\"type\":\"uint256\"}],\"name\":\"setStartVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vestingCliff\",\"type\":\"uint256\"}],\"name\":\"setVestingCliff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startVestingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingCliff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DIGI_Presale", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}