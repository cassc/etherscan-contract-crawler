{"SourceCode": "// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IERC20Burnable.sol\r\n\r\n\r\npragma solidity ^0.6.8;\r\n\r\n\r\ninterface IERC20Burnable is IERC20 {\r\n  function burn(uint256 amount) external;\r\n  function burnFrom(address account, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/libraries/FixedPointMath.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\nlibrary FixedPointMath {\r\n  uint256 public constant DECIMALS = 18;\r\n  uint256 public constant SCALAR = 10**DECIMALS;\r\n\r\n  struct uq192x64 {\r\n    uint256 x;\r\n  }\r\n\r\n  function fromU256(uint256 value) internal pure returns (uq192x64 memory) {\r\n    uint256 x;\r\n    require(value == 0 || (x = value * SCALAR) / SCALAR == value);\r\n    return uq192x64(x);\r\n  }\r\n\r\n  function maximumValue() internal pure returns (uq192x64 memory) {\r\n    return uq192x64(uint256(-1));\r\n  }\r\n\r\n  function add(uq192x64 memory self, uq192x64 memory value) internal pure returns (uq192x64 memory) {\r\n    uint256 x;\r\n    require((x = self.x + value.x) >= self.x);\r\n    return uq192x64(x);\r\n  }\r\n\r\n  function add(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\r\n    return add(self, fromU256(value));\r\n  }\r\n\r\n  function sub(uq192x64 memory self, uq192x64 memory value) internal pure returns (uq192x64 memory) {\r\n    uint256 x;\r\n    require((x = self.x - value.x) <= self.x);\r\n    return uq192x64(x);\r\n  }\r\n\r\n  function sub(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\r\n    return sub(self, fromU256(value));\r\n  }\r\n\r\n  function mul(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\r\n    uint256 x;\r\n    require(value == 0 || (x = self.x * value) / value == self.x);\r\n    return uq192x64(x);\r\n  }\r\n\r\n  function div(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\r\n    require(value != 0);\r\n    return uq192x64(self.x / value);\r\n  }\r\n\r\n  function cmp(uq192x64 memory self, uq192x64 memory value) internal pure returns (int256) {\r\n    if (self.x < value.x) {\r\n      return -1;\r\n    }\r\n\r\n    if (self.x > value.x) {\r\n      return 1;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  function decode(uq192x64 memory self) internal pure returns (uint256) {\r\n    return self.x / SCALAR;\r\n  }\r\n}\r\n\r\n// File: contracts/interfaces/IDetailedERC20.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\ninterface IDetailedERC20 is IERC20 {\r\n  function name() external returns (string memory);\r\n  function symbol() external returns (string memory);\r\n  function decimals() external returns (uint8);\r\n}\r\n\r\n// File: contracts/interfaces/IVaultAdapter.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n/// Interface for all Vault Adapter implementations.\r\ninterface IVaultAdapter {\r\n\r\n  /// @dev Gets the token that the adapter accepts.\r\n  function token() external view returns (IDetailedERC20);\r\n\r\n  /// @dev The total value of the assets deposited into the vault.\r\n  function totalValue() external view returns (uint256);\r\n\r\n  /// @dev Deposits funds into the vault.\r\n  ///\r\n  /// @param _amount  the amount of funds to deposit.\r\n  function deposit(uint256 _amount) external;\r\n\r\n  /// @dev Attempts to withdraw funds from the wrapped vault.\r\n  ///\r\n  /// The amount withdrawn to the recipient may be less than the amount requested.\r\n  ///\r\n  /// @param _recipient the recipient of the funds.\r\n  /// @param _amount    the amount of funds to withdraw.\r\n  function withdraw(address _recipient, uint256 _amount) external;\r\n}\r\n\r\n// File: contracts/interfaces/IyVaultV2.sol\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n// interface IyVaultV2 is IERC20 {\r\n//     function token() external view returns (address);\r\n//     function deposit() external returns (uint);\r\n//     function deposit(uint) external returns (uint);\r\n//     function deposit(uint, address) external returns (uint);\r\n//     function withdraw() external returns (uint);\r\n//     function withdraw(uint) external returns (uint);\r\n//     function withdraw(uint, address) external returns (uint);\r\n//     function withdraw(uint, address, uint) external returns (uint);\r\n//     function permit(address, address, uint, uint, bytes32) external view returns (bool);\r\n//     function pricePerShare() external view returns (uint);\r\n\r\n//     function apiVersion() external view returns (string memory);\r\n//     function totalAssets() external view returns (uint);\r\n//     function maxAvailableShares() external view returns (uint);\r\n//     function debtOutstanding() external view returns (uint);\r\n//     function debtOutstanding(address strategy) external view returns (uint);\r\n//     function creditAvailable() external view returns (uint);\r\n//     function creditAvailable(address strategy) external view returns (uint);\r\n//     function availableDepositLimit() external view returns (uint);\r\n//     function expectedReturn() external view returns (uint);\r\n//     function expectedReturn(address strategy) external view returns (uint);\r\n//     function name() external view returns (string memory);\r\n//     function symbol() external view returns (string memory);\r\n//     function decimals() external view returns (uint);\r\n//     function balanceOf(address owner) external view override returns (uint);\r\n//     function totalSupply() external view override returns (uint);\r\n//     function governance() external view returns (address);\r\n//     function management() external view returns (address);\r\n//     function guardian() external view returns (address);\r\n//     function guestList() external view returns (address);\r\n//     function strategies(address) external view returns (uint, uint, uint, uint, uint, uint, uint, uint);\r\n//     function withdrawalQueue(uint) external view returns (address);\r\n//     function emergencyShutdown() external view returns (bool);\r\n//     function depositLimit() external view returns (uint);\r\n//     function debtRatio() external view returns (uint);\r\n//     function totalDebt() external view returns (uint);\r\n//     function lastReport() external view returns (uint);\r\n//     function activation() external view returns (uint);\r\n//     function rewards() external view returns (address);\r\n//     function managementFee() external view returns (uint);\r\n//     function performanceFee() external view returns (uint);\r\n// }\r\n\r\n// Only difference is that decimals() returns uint8 instead of uint256.\r\ninterface IyVaultV2Simple is IERC20 {\r\n    function token() external view returns (address);\r\n    function deposit(uint) external returns (uint);\r\n    function withdraw(uint) external returns (uint);\r\n    function withdraw(uint, address) external returns (uint);\r\n    function pricePerShare() external view returns (uint);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts/adapters/YearnVaultAdapter.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title YearnVaultAdapter\r\n///\r\n/// @dev A vault adapter implementation which wraps a yEarn vault.\r\ncontract YearnVaultAdapter is IVaultAdapter {\r\n  using FixedPointMath for FixedPointMath.uq192x64;\r\n  using SafeERC20 for IDetailedERC20;\r\n  using SafeMath for uint256;\r\n\r\n  /// @dev The vault that the adapter is wrapping.\r\n  IyVaultV2Simple public vault;\r\n\r\n  /// @dev The address which has admin control over this contract.\r\n  address public admin;\r\n\r\n  /// @dev The decimals of the token.\r\n  uint256 public decimals;\r\n\r\n  constructor(IyVaultV2Simple _vault, address _admin) public {\r\n    vault = _vault;\r\n    admin = _admin;\r\n    updateApproval();\r\n    decimals = _vault.decimals();\r\n  }\r\n\r\n  /// @dev A modifier which reverts if the caller is not the admin.\r\n  modifier onlyAdmin() {\r\n    require(admin == msg.sender, \"YearnVaultAdapter: only admin\");\r\n    _;\r\n  }\r\n\r\n  /// @dev Gets the token that the vault accepts.\r\n  ///\r\n  /// @return the accepted token.\r\n  function token() external view override returns (IDetailedERC20) {\r\n    return IDetailedERC20(vault.token());\r\n  }\r\n\r\n  /// @dev Gets the total value of the assets that the adapter holds in the vault.\r\n  ///\r\n  /// @return the total assets.\r\n  function totalValue() external view override returns (uint256) {\r\n    return _sharesToTokens(vault.balanceOf(address(this)));\r\n  }\r\n\r\n  /// @dev Deposits tokens into the vault.\r\n  ///\r\n  /// @param _amount the amount of tokens to deposit into the vault.\r\n  function deposit(uint256 _amount) external override {\r\n    vault.deposit(_amount);\r\n  }\r\n\r\n  /// @dev Withdraws tokens from the vault to the recipient.\r\n  ///\r\n  /// This function reverts if the caller is not the admin.\r\n  ///\r\n  /// @param _recipient the account to withdraw the tokes to.\r\n  /// @param _amount    the amount of tokens to withdraw.\r\n  function withdraw(address _recipient, uint256 _amount) external override onlyAdmin {\r\n    vault.withdraw(_tokensToShares(_amount),_recipient);\r\n  }\r\n\r\n  /// @dev Updates the vaults approval of the token to be the maximum value.\r\n  function updateApproval() public {\r\n    address _token = vault.token();\r\n    IDetailedERC20(_token).safeApprove(address(vault), uint256(-1));\r\n  }\r\n\r\n  /// @dev Computes the number of tokens an amount of shares is worth.\r\n  ///\r\n  /// @param _sharesAmount the amount of shares.\r\n  ///\r\n  /// @return the number of tokens the shares are worth.\r\n  \r\n  function _sharesToTokens(uint256 _sharesAmount) internal view returns (uint256) {\r\n    return _sharesAmount.mul(vault.pricePerShare()).div(10**decimals);\r\n  }\r\n\r\n  /// @dev Computes the number of shares an amount of tokens is worth.\r\n  ///\r\n  /// @param _tokensAmount the amount of shares.\r\n  ///\r\n  /// @return the number of shares the tokens are worth.\r\n  function _tokensToShares(uint256 _tokensAmount) internal view returns (uint256) {\r\n    return _tokensAmount.mul(10**decimals).div(vault.pricePerShare());\r\n  }\r\n}\r\n\r\n// File: contracts/adapters/YearnVaultAdapterWithIndirection.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title YearnVaultAdapter\r\n///\r\n/// @dev A vault adapter implementation which wraps a yEarn vault.\r\ncontract YearnVaultAdapterWithIndirection is YearnVaultAdapter {\r\n    using FixedPointMath for FixedPointMath.uq192x64;\r\n    using SafeERC20 for IDetailedERC20;\r\n    using SafeERC20 for IyVaultV2Simple;\r\n    using SafeMath for uint256;\r\n\r\n    constructor(IyVaultV2Simple _vault, address _admin) YearnVaultAdapter(_vault, _admin) public {\r\n    }\r\n\r\n    /// @dev Sends vault tokens to the recipient\r\n    ///\r\n    /// This function reverts if the caller is not the admin.\r\n    ///\r\n    /// @param _recipient the account to send the tokens to.\r\n    /// @param _amount    the amount of tokens to send.\r\n    function indirectWithdraw(address _recipient, uint256 _amount) external onlyAdmin {\r\n        vault.safeTransfer(_recipient, _tokensToShares(_amount));\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/Math.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/scientist/VaultWithIndirection.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Pool\r\n///\r\n/// @dev A library which provides the Vault data struct and associated functions.\r\nlibrary VaultWithIndirection {\r\n  using VaultWithIndirection for Data;\r\n  using VaultWithIndirection for List;\r\n  using SafeERC20 for IDetailedERC20;\r\n  using SafeMath for uint256;\r\n\r\n  struct Data {\r\n    YearnVaultAdapterWithIndirection adapter;\r\n    uint256 totalDeposited;\r\n  }\r\n\r\n  struct List {\r\n    Data[] elements;\r\n  }\r\n\r\n  /// @dev Gets the total amount of assets deposited in the vault.\r\n  ///\r\n  /// @return the total assets.\r\n  function totalValue(Data storage _self) internal view returns (uint256) {\r\n    return _self.adapter.totalValue();\r\n  }\r\n\r\n  /// @dev Gets the token that the vault accepts.\r\n  ///\r\n  /// @return the accepted token.\r\n  function token(Data storage _self) internal view returns (IDetailedERC20) {\r\n    return IDetailedERC20(_self.adapter.token());\r\n  }\r\n\r\n  /// @dev Deposits funds from the caller into the vault.\r\n  ///\r\n  /// @param _amount the amount of funds to deposit.\r\n  function deposit(Data storage _self, uint256 _amount) internal returns (uint256) {\r\n    // Push the token that the vault accepts onto the stack to save gas.\r\n    IDetailedERC20 _token = _self.token();\r\n\r\n    _token.safeTransfer(address(_self.adapter), _amount);\r\n    _self.adapter.deposit(_amount);\r\n    _self.totalDeposited = _self.totalDeposited.add(_amount);\r\n\r\n    return _amount;\r\n  }\r\n\r\n  /// @dev Deposits the entire token balance of the caller into the vault.\r\n  function depositAll(Data storage _self) internal returns (uint256) {\r\n    IDetailedERC20 _token = _self.token();\r\n    return _self.deposit(_token.balanceOf(address(this)));\r\n  }\r\n\r\n  /// @dev Withdraw deposited funds from the vault.\r\n  ///\r\n  /// @param _recipient the account to withdraw the tokens to.\r\n  /// @param _amount    the amount of tokens to withdraw.\r\n  function withdraw(Data storage _self, address _recipient, uint256 _amount) internal returns (uint256, uint256) {\r\n    (uint256 _withdrawnAmount, uint256 _decreasedValue) = _self.directWithdraw(_recipient, _amount);\r\n    _self.totalDeposited = _self.totalDeposited.sub(_decreasedValue);\r\n    return (_withdrawnAmount, _decreasedValue);\r\n  }\r\n\r\n  /// @dev Directly withdraw deposited funds from the vault.\r\n  ///\r\n  /// @param _recipient the account to withdraw the tokens to.\r\n  /// @param _amount    the amount of tokens to withdraw.\r\n  function directWithdraw(Data storage _self, address _recipient, uint256 _amount) internal returns (uint256, uint256) {\r\n    IDetailedERC20 _token = _self.token();\r\n\r\n    uint256 _startingBalance = _token.balanceOf(_recipient);\r\n    uint256 _startingTotalValue = _self.totalValue();\r\n\r\n    _self.adapter.withdraw(_recipient, _amount);\r\n\r\n    uint256 _endingBalance = _token.balanceOf(_recipient);\r\n    uint256 _withdrawnAmount = _endingBalance.sub(_startingBalance);\r\n\r\n    uint256 _endingTotalValue = _self.totalValue();\r\n    uint256 _decreasedValue = _startingTotalValue.sub(_endingTotalValue);\r\n\r\n    return (_withdrawnAmount, _decreasedValue);\r\n  }\r\n\r\n  /// @dev Directly withdraw deposited funds from the vault.\r\n  ///\r\n  /// @param _recipient the account to withdraw the tokens to.\r\n  /// @param _amount    the amount of tokens to withdraw.\r\n  function indirectWithdraw(Data storage _self, address _recipient, uint256 _amount) internal returns (uint256, uint256) {\r\n    IDetailedERC20 _token = _self.token();\r\n\r\n    uint256 _startingBalance = _token.balanceOf(_recipient);\r\n    uint256 _startingTotalValue = _self.totalValue();\r\n\r\n    _self.adapter.indirectWithdraw(_recipient, _amount);\r\n\r\n    uint256 _endingBalance = _token.balanceOf(_recipient);\r\n    uint256 _withdrawnAmount = _endingBalance.sub(_startingBalance);\r\n\r\n    uint256 _endingTotalValue = _self.totalValue();\r\n    uint256 _decreasedValue = _startingTotalValue.sub(_endingTotalValue);\r\n\r\n    return (_withdrawnAmount, _decreasedValue);\r\n  }\r\n\r\n  /// @dev Withdraw all the deposited funds from the vault.\r\n  ///\r\n  /// @param _recipient the account to withdraw the tokens to.\r\n  function withdrawAll(Data storage _self, address _recipient) internal returns (uint256, uint256) {\r\n    return _self.withdraw(_recipient, _self.totalDeposited);\r\n  }\r\n\r\n  /// @dev Harvests yield from the vault.\r\n  ///\r\n  /// @param _recipient the account to withdraw the harvested yield to.\r\n  function harvest(Data storage _self, address _recipient) internal returns (uint256, uint256) {\r\n    if (_self.totalValue() <= _self.totalDeposited) {\r\n      return (0, 0);\r\n    }\r\n    uint256 _withdrawAmount = _self.totalValue().sub(_self.totalDeposited);\r\n    return _self.indirectWithdraw(_recipient, _withdrawAmount);\r\n  }\r\n\r\n  /// @dev Adds a element to the list.\r\n  ///\r\n  /// @param _element the element to add.\r\n  function push(List storage _self, Data memory _element) internal {\r\n    _self.elements.push(_element);\r\n  }\r\n\r\n  /// @dev Gets a element from the list.\r\n  ///\r\n  /// @param _index the index in the list.\r\n  ///\r\n  /// @return the element at the specified index.\r\n  function get(List storage _self, uint256 _index) internal view returns (Data storage) {\r\n    return _self.elements[_index];\r\n  }\r\n\r\n  /// @dev Gets the last element in the list.\r\n  ///\r\n  /// This function will revert if there are no elements in the list.\r\n  ///\r\n  /// @return the last element in the list.\r\n  function last(List storage _self) internal view returns (Data storage) {\r\n    return _self.elements[_self.lastIndex()];\r\n  }\r\n\r\n  /// @dev Gets the index of the last element in the list.\r\n  ///\r\n  /// This function will revert if there are no elements in the list.\r\n  ///\r\n  /// @return the index of the last element.\r\n  function lastIndex(List storage _self) internal view returns (uint256) {\r\n    uint256 _length = _self.length();\r\n    return _length.sub(1, \"Vault.List: empty\");\r\n  }\r\n\r\n  /// @dev Gets the number of elements in the list.\r\n  ///\r\n  /// @return the number of elements.\r\n  function length(List storage _self) internal view returns (uint256) {\r\n    return _self.elements.length;\r\n  }\r\n}\r\n\r\n// File: contracts/interfaces/ITransmuter.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface ITransmuter  {\r\n  function distribute (address origin, uint256 amount) external;\r\n}\r\n\r\n// File: contracts/TransmuterB.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//    ___    __        __                _               ___                              __         _\r\n//   / _ |  / / ____  / /  ___   __ _   (_) __ __       / _ \\  ____ ___   ___ ___   ___  / /_  ___  (_)\r\n//  / __ | / / / __/ / _ \\/ -_) /  ' \\ / /  \\ \\ /      / ___/ / __// -_) (_-</ -_) / _ \\/ __/ (_-< _\r\n// /_/ |_|/_/  \\__/ /_//_/\\__/ /_/_/_//_/  /_\\_\\      /_/    /_/   \\__/ /___/\\__/ /_//_/\\__/ /___/(_)\r\n//\r\n// .___________..______           ___      .__   __.      _______..___  ___.  __    __  .___________. _______ .______\r\n// |           ||   _  \\         /   \\     |  \\ |  |     /       ||   \\/   | |  |  |  | |           ||   ____||   _  \\\r\n// `---|  |----`|  |_)  |       /  ^  \\    |   \\|  |    |   (----`|  \\  /  | |  |  |  | `---|  |----`|  |__   |  |_)  |\r\n//     |  |     |      /       /  /_\\  \\   |  . `  |     \\   \\    |  |\\/|  | |  |  |  |     |  |     |   __|  |      /\r\n//     |  |     |  |\\  \\----. /  _____  \\  |  |\\   | .----)   |   |  |  |  | |  `--'  |     |  |     |  |____ |  |\\  \\----.\r\n//     |__|     | _| `._____|/__/     \\__\\ |__| \\__| |_______/    |__|  |__|  \\______/      |__|     |_______|| _| `._____|\r\n/**\r\n * @dev Implementation of the {IERC20Burnable} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20Burnable-approve}.\r\n */\r\ncontract TransmuterB is Context {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20Burnable;\r\n    using Address for address;\r\n    using VaultWithIndirection for VaultWithIndirection.Data;\r\n    using VaultWithIndirection for VaultWithIndirection.List;\r\n\r\n    address public constant ZERO_ADDRESS = address(0);\r\n    uint256 public TRANSMUTATION_PERIOD;\r\n\r\n    address public ScToken;\r\n    address public Token;\r\n\r\n    mapping(address => uint256) public depositedScTokens;\r\n    mapping(address => uint256) public tokensInBucket;\r\n    mapping(address => uint256) public realisedTokens;\r\n    mapping(address => uint256) public lastDividendPoints;\r\n\r\n    mapping(address => bool) public userIsKnown;\r\n    mapping(uint256 => address) public userList;\r\n    uint256 public nextUser;\r\n\r\n    uint256 public totalSupplyScTokens;\r\n    uint256 public buffer;\r\n    uint256 public lastDepositBlock;\r\n\r\n    ///@dev values needed to calculate the distribution of base asset in proportion for scTokens staked\r\n    uint256 public pointMultiplier = 10e18;\r\n\r\n    uint256 public totalDividendPoints;\r\n    uint256 public unclaimedDividends;\r\n\r\n    /// @dev scientist addresses whitelisted\r\n    mapping (address => bool) public whiteList;\r\n\r\n    /// @dev addresses whitelisted to run keepr jobs (harvest)\t\r\n    mapping (address => bool) public keepers;\r\n\r\n    /// @dev The threshold above which excess funds will be deployed to yield farming activities\r\n    uint256 public plantableThreshold = 5000000000000000000000000; // 5mm\r\n\r\n    /// @dev The % margin to trigger planting or recalling of funds\r\n    uint256 public plantableMargin = 5;\r\n\r\n    /// @dev The address of the account which currently has administrative capabilities over this contract.\r\n    address public governance;\r\n\r\n    /// @dev The address of the pending governance.\r\n    address public pendingGovernance;\r\n\r\n    /// @dev The address of the account which can perform emergency activities\r\n    address public sentinel;\r\n\r\n    /// @dev A flag indicating if deposits and flushes should be halted and if all parties should be able to recall\r\n    /// from the active vault.\r\n    bool public pause;\r\n\r\n    /// @dev The address of the contract which will receive fees.\r\n    address public rewards;\r\n\r\n\t/// @dev A mapping of adapter addresses to keep track of vault adapters that have already been added\t\r\n    mapping(YearnVaultAdapterWithIndirection => bool) public adapters;\r\n\r\n    /// @dev A list of all of the vaults. The last element of the list is the vault that is currently being used for\r\n    /// deposits and withdraws. VaultWithIndirections before the last element are considered inactive and are expected to be cleared.\r\n    VaultWithIndirection.List private _vaults;\r\n\r\n    /// @dev make sure the contract is only initialized once.\t\r\n    bool public initialized;\r\n\r\n    /// @dev mapping of user account to the last block they acted\t\r\n    mapping(address => uint256) public lastUserAction;\r\n\r\n    /// @dev number of blocks to delay between allowed user actions\t\r\n    uint256 public minUserActionDelay;\r\n\r\n    event GovernanceUpdated(\r\n        address governance\r\n    );\r\n\r\n    event PendingGovernanceUpdated(\r\n        address pendingGovernance\r\n    );\r\n\r\n    event SentinelUpdated(\r\n        address sentinel\r\n    );\r\n\r\n    event TransmuterPeriodUpdated(\r\n        uint256 newTransmutationPeriod\r\n    );\r\n\r\n    event TokenClaimed(\r\n        address claimant,\r\n        address token,\r\n        uint256 amountClaimed\r\n    );\r\n\r\n    event ScUsdStaked(\r\n        address staker,\r\n        uint256 amountStaked\r\n    );\r\n\r\n    event ScUsdUnstaked(\r\n        address staker,\r\n        uint256 amountUnstaked\r\n    );\r\n\r\n    event Transmutation(\r\n        address transmutedTo,\r\n        uint256 amountTransmuted\r\n    );\r\n\r\n    event ForcedTransmutation(\r\n        address transmutedBy,\r\n        address transmutedTo,\r\n        uint256 amountTransmuted\r\n    );\r\n\r\n    event Distribution(\r\n        address origin,\r\n        uint256 amount\r\n    );\r\n\r\n    event WhitelistSet(\r\n        address whitelisted,\r\n        bool state\r\n    );\r\n\r\n    event KeepersSet(\r\n        address[] keepers,\r\n        bool[] states\r\n    );\r\n\r\n    event PlantableThresholdUpdated(\r\n        uint256 plantableThreshold\r\n    );\r\n\r\n    event PlantableMarginUpdated(\r\n        uint256 plantableMargin\r\n    );\r\n\r\n    event MinUserActionDelayUpdated(\r\n        uint256 minUserActionDelay\r\n    );\r\n\r\n    event ActiveVaultUpdated(\r\n        YearnVaultAdapterWithIndirection indexed adapter\r\n    );\r\n\r\n    event PauseUpdated(\r\n        bool status\r\n    );\r\n\r\n    event FundsRecalled(\r\n        uint256 indexed vaultId,\r\n        uint256 withdrawnAmount,\r\n        uint256 decreasedValue\r\n    );\r\n\r\n    event FundsHarvested(\r\n        uint256 withdrawnAmount,\r\n        uint256 decreasedValue\r\n    );\r\n\r\n    event RewardsUpdated(\r\n        address treasury\r\n    );\r\n\r\n    event MigrationComplete(\r\n        address migrateTo,\r\n        uint256 fundsMigrated\r\n    );\r\n\r\n    constructor(address _ScToken, address _Token, address _governance) public {\r\n        require(_governance != ZERO_ADDRESS, \"Transmuter: 0 gov\");\r\n        governance = _governance;\r\n        ScToken = _ScToken;\r\n        Token = _Token;\r\n        TRANSMUTATION_PERIOD = 50;\r\n        minUserActionDelay = 1;\r\n        pause = true;\r\n    }\r\n\r\n    ///@return displays the user's share of the pooled scTokens.\r\n    function dividendsOwing(address account) public view returns (uint256) {\r\n        uint256 newDividendPoints = totalDividendPoints.sub(lastDividendPoints[account]);\r\n        return depositedScTokens[account].mul(newDividendPoints).div(pointMultiplier);\r\n    }\r\n\r\n    /// @dev Checks that caller is not a eoa.\r\n    ///\r\n    /// This is used to prevent contracts from interacting.\r\n    modifier noContractAllowed() {\r\n        require(!address(msg.sender).isContract() && msg.sender == tx.origin, \"no contract calls\");\r\n        _;\r\n    }\r\n\r\n    ///@dev modifier to fill the bucket and keep bookkeeping correct incase of increase/decrease in shares\r\n    modifier updateAccount(address account) {\r\n        uint256 owing = dividendsOwing(account);\r\n        if (owing > 0) {\r\n            unclaimedDividends = unclaimedDividends.sub(owing);\r\n            tokensInBucket[account] = tokensInBucket[account].add(owing);\r\n        }\r\n        lastDividendPoints[account] = totalDividendPoints;\r\n        _;\r\n    }\r\n    ///@dev modifier add users to userlist. Users are indexed in order to keep track of when a bond has been filled\r\n    modifier checkIfNewUser() {\r\n        if (!userIsKnown[msg.sender]) {\r\n            userList[nextUser] = msg.sender;\r\n            userIsKnown[msg.sender] = true;\r\n            nextUser++;\r\n        }\r\n        _;\r\n    }\r\n\r\n    ///@dev run the phased distribution of the buffered funds\r\n    modifier runPhasedDistribution() {\r\n        uint256 _lastDepositBlock = lastDepositBlock;\r\n        uint256 _currentBlock = block.number;\r\n        uint256 _toDistribute = 0;\r\n        uint256 _buffer = buffer;\r\n\r\n        // check if there is something in bufffer\r\n        if (_buffer > 0) {\r\n            // NOTE: if last deposit was updated in the same block as the current call\r\n            // then the below logic gates will fail\r\n\r\n            //calculate diffrence in time\r\n            uint256 deltaTime = _currentBlock.sub(_lastDepositBlock);\r\n\r\n            // distribute all if bigger than timeframe\r\n            if(deltaTime >= TRANSMUTATION_PERIOD) {\r\n                _toDistribute = _buffer;\r\n            } else {\r\n\r\n                //needs to be bigger than 0 cuzz solidity no decimals\r\n                if(_buffer.mul(deltaTime) > TRANSMUTATION_PERIOD)\r\n                {\r\n                    _toDistribute = _buffer.mul(deltaTime).div(TRANSMUTATION_PERIOD);\r\n                }\r\n            }\r\n\r\n            // factually allocate if any needs distribution\r\n            if(_toDistribute > 0){\r\n\r\n                // remove from buffer\r\n                buffer = _buffer.sub(_toDistribute);\r\n\r\n                // increase the allocation\r\n                increaseAllocations(_toDistribute);\r\n            }\r\n        }\r\n\r\n        // current timeframe is now the last\r\n        lastDepositBlock = _currentBlock;\r\n        _;\r\n    }\r\n\r\n    /// @dev A modifier which checks if whitelisted for minting.\r\n    modifier onlyWhitelisted() {\r\n        require(whiteList[msg.sender], \"Transmuter: !whitelisted\");\r\n        _;\r\n    }\r\n\r\n    /// @dev A modifier which checks if caller is a keepr.\r\n    modifier onlyKeeper() {\r\n        require(keepers[msg.sender], \"Transmuter: !keeper\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Checks that the current message sender or caller is the governance address.\r\n    ///\r\n    ///\r\n    modifier onlyGov() {\r\n        require(msg.sender == governance, \"Transmuter: !governance\");\r\n        _;\r\n    }\r\n\r\n    /// @dev checks that the block delay since a user's last action is longer than the minium delay\r\n    ///\r\n    modifier ensureUserActionDelay() {\r\n        require(block.number.sub(lastUserAction[msg.sender]) >= minUserActionDelay, \"action delay not met\");\r\n        lastUserAction[msg.sender] = block.number;\r\n        _;\r\n    }\r\n\r\n    ///@dev set the TRANSMUTATION_PERIOD variable\r\n    ///\r\n    /// sets the length (in blocks) of one full distribution phase\r\n    function setTransmutationPeriod(uint256 newTransmutationPeriod) public onlyGov() {\r\n        TRANSMUTATION_PERIOD = newTransmutationPeriod;\r\n        emit TransmuterPeriodUpdated(TRANSMUTATION_PERIOD);\r\n    }\r\n\r\n    ///@dev claims the base token after it has been transmuted\r\n    ///\r\n    ///This function reverts if there is no realisedToken balance\r\n    function claim()\r\n        public\r\n        noContractAllowed()\r\n    {\r\n        address sender = msg.sender;\r\n        require(realisedTokens[sender] > 0);\r\n        uint256 value = realisedTokens[sender];\r\n        realisedTokens[sender] = 0;\r\n        ensureSufficientFundsExistLocally(value);\r\n        IERC20Burnable(Token).safeTransfer(sender, value);\r\n        emit TokenClaimed(sender, Token, value);\r\n    }\r\n\r\n    ///@dev Withdraws staked scTokens from the transmuter\r\n    ///\r\n    /// This function reverts if you try to draw more tokens than you deposited\r\n    ///\r\n    ///@param amount the amount of scTokens to unstake\r\n    function unstake(uint256 amount)\r\n\t    public\r\n        noContractAllowed()\r\n        updateAccount(msg.sender)\r\n    {\r\n        // by calling this function before transmuting you forfeit your gained allocation\r\n        address sender = msg.sender;\r\n        require(depositedScTokens[sender] >= amount,\"Transmuter: unstake amount exceeds deposited amount\");\r\n        depositedScTokens[sender] = depositedScTokens[sender].sub(amount);\r\n        totalSupplyScTokens = totalSupplyScTokens.sub(amount);\r\n        IERC20Burnable(ScToken).safeTransfer(sender, amount);\r\n        emit ScUsdUnstaked(sender, amount);\r\n    }\r\n    ///@dev Deposits scTokens into the transmuter\r\n    ///\r\n    ///@param amount the amount of scTokens to stake\r\n    function stake(uint256 amount)\r\n        public\r\n        noContractAllowed()\r\n        ensureUserActionDelay()\r\n        runPhasedDistribution()\r\n        updateAccount(msg.sender)\r\n        checkIfNewUser()\r\n    {\r\n        require(!pause, \"emergency pause enabled\");\r\n\r\n        // requires approval of ScToken first\r\n        address sender = msg.sender;\r\n        //require tokens transferred in;\r\n        IERC20Burnable(ScToken).safeTransferFrom(sender, address(this), amount);\r\n        totalSupplyScTokens = totalSupplyScTokens.add(amount);\r\n        depositedScTokens[sender] = depositedScTokens[sender].add(amount);\r\n        emit ScUsdStaked(sender, amount);\r\n    }\r\n    /// @dev Converts the staked scTokens to the base tokens in amount of the sum of pendingdivs and tokensInBucket\r\n    ///\r\n    /// once the scToken has been converted, it is burned, and the base token becomes realisedTokens which can be recieved using claim()\r\n    ///\r\n    /// reverts if there are no pendingdivs or tokensInBucket\r\n    function transmute()\r\n        public\r\n        noContractAllowed()\r\n        ensureUserActionDelay()\r\n        runPhasedDistribution()\r\n        updateAccount(msg.sender)\r\n    {\r\n        address sender = msg.sender;\r\n        uint256 pendingz = tokensInBucket[sender];\r\n        uint256 diff;\r\n\r\n        require(pendingz > 0, \"need to have pending in bucket\");\r\n\r\n        tokensInBucket[sender] = 0;\r\n\r\n        // check bucket overflow\r\n        if (pendingz > depositedScTokens[sender]) {\r\n            diff = pendingz.sub(depositedScTokens[sender]);\r\n\r\n            // remove overflow\r\n            pendingz = depositedScTokens[sender];\r\n        }\r\n\r\n        // decrease scTokens\r\n        depositedScTokens[sender] = depositedScTokens[sender].sub(pendingz);\r\n\r\n        // BURN SCTokenS\r\n        IERC20Burnable(ScToken).burn(pendingz);\r\n\r\n        // adjust total\r\n        totalSupplyScTokens = totalSupplyScTokens.sub(pendingz);\r\n\r\n        // reallocate overflow\r\n        increaseAllocations(diff);\r\n\r\n        // add payout\r\n        realisedTokens[sender] = realisedTokens[sender].add(pendingz);\r\n\r\n        emit Transmutation(sender, pendingz);\r\n    }\r\n\r\n    /// @dev Executes transmute() on another account that has had more base tokens allocated to it than scTokens staked.\r\n    ///\r\n    /// The caller of this function will have the surlus base tokens credited to their tokensInBucket balance, rewarding them for performing this action\r\n    ///\r\n    /// This function reverts if the address to transmute is not over-filled.\r\n    ///\r\n    /// @param toTransmute address of the account you will force transmute.\r\n    function forceTransmute(address toTransmute)\r\n        public\r\n        noContractAllowed()\r\n        ensureUserActionDelay()\r\n        runPhasedDistribution()\r\n        updateAccount(msg.sender)\r\n        updateAccount(toTransmute)\r\n        checkIfNewUser()\r\n    {\r\n        //load into memory\r\n        address sender = msg.sender;\r\n        uint256 pendingz = tokensInBucket[toTransmute];\r\n        // check restrictions\r\n        require(\r\n            pendingz > depositedScTokens[toTransmute],\r\n            \"Transmuter: !overflow\"\r\n        );\r\n\r\n        // empty bucket\r\n        tokensInBucket[toTransmute] = 0;\r\n\r\n        // calculaate diffrence\r\n        uint256 diff = pendingz.sub(depositedScTokens[toTransmute]);\r\n\r\n        // remove overflow\r\n        pendingz = depositedScTokens[toTransmute];\r\n\r\n        // decrease scTokens\r\n        depositedScTokens[toTransmute] = 0;\r\n\r\n        // BURN SCTokenS\r\n        IERC20Burnable(ScToken).burn(pendingz);\r\n        // adjust total\r\n        totalSupplyScTokens = totalSupplyScTokens.sub(pendingz);\r\n\r\n        // reallocate overflow\r\n        tokensInBucket[sender] = tokensInBucket[sender].add(diff);\r\n\r\n        // add payout\r\n        realisedTokens[toTransmute] = realisedTokens[toTransmute].add(pendingz);\r\n\r\n        uint256 value = realisedTokens[toTransmute];\r\n\r\n        ensureSufficientFundsExistLocally(value);\r\n\r\n        // force payout of realised tokens of the toTransmute address\r\n        realisedTokens[toTransmute] = 0;\r\n        IERC20Burnable(Token).safeTransfer(toTransmute, value);\r\n        emit ForcedTransmutation(sender, toTransmute, value);\r\n    }\r\n\r\n    /// @dev Transmutes and unstakes all scTokens\r\n    ///\r\n    /// This function combines the transmute and unstake functions for ease of use\r\n    function exit() public noContractAllowed() {\r\n        transmute();\r\n        uint256 toWithdraw = depositedScTokens[msg.sender];\r\n        unstake(toWithdraw);\r\n    }\r\n\r\n    /// @dev Transmutes and claims all converted base tokens.\r\n    ///\r\n    /// This function combines the transmute and claim functions while leaving your remaining scTokens staked.\r\n    function transmuteAndClaim() public noContractAllowed() {\r\n        transmute();\r\n        claim();\r\n    }\r\n\r\n    /// @dev Transmutes, claims base tokens, and withdraws scTokens.\r\n    ///\r\n    /// This function helps users to exit the transmuter contract completely after converting their scTokens to the base pair.\r\n    function transmuteClaimAndWithdraw() public noContractAllowed() {\r\n        transmute();\r\n        claim();\r\n        uint256 toWithdraw = depositedScTokens[msg.sender];\r\n        unstake(toWithdraw);\r\n    }\r\n\r\n    /// @dev Distributes the base token proportionally to all scToken stakers.\r\n    ///\r\n    /// This function is meant to be called by the Scientist contract for when it is sending yield to the transmuter.\r\n    /// Anyone can call this and add funds, idk why they would do that though...\r\n    ///\r\n    /// @param origin the account that is sending the tokens to be distributed.\r\n    /// @param amount the amount of base tokens to be distributed to the transmuter.\r\n    function distribute(address origin, uint256 amount) public onlyWhitelisted() runPhasedDistribution() {\r\n        require(!pause, \"emergency pause enabled\");\r\n        IERC20Burnable(Token).safeTransferFrom(origin, address(this), amount);\r\n        buffer = buffer.add(amount);\r\n        _plantOrRecallExcessFunds();\r\n        emit Distribution(origin, amount);\r\n    }\r\n\r\n    /// @dev Allocates the incoming yield proportionally to all scToken stakers.\r\n    ///\r\n    /// @param amount the amount of base tokens to be distributed in the transmuter.\r\n    function increaseAllocations(uint256 amount) internal {\r\n        if(totalSupplyScTokens > 0 && amount > 0) {\r\n            totalDividendPoints = totalDividendPoints.add(\r\n                amount.mul(pointMultiplier).div(totalSupplyScTokens)\r\n            );\r\n            unclaimedDividends = unclaimedDividends.add(amount);\r\n        } else {\r\n            buffer = buffer.add(amount);\r\n        }\r\n    }\r\n\r\n    /// @dev Gets the status of a user's staking position.\r\n    ///\r\n    /// The total amount allocated to a user is the sum of pendingdivs and inbucket.\r\n    ///\r\n    /// @param user the address of the user you wish to query.\r\n    ///\r\n    /// returns user status\r\n\r\n    function userInfo(address user)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 depositedAl,\r\n            uint256 pendingdivs,\r\n            uint256 inbucket,\r\n            uint256 realised\r\n        )\r\n    {\r\n        uint256 _depositedAl = depositedScTokens[user];\r\n        uint256 _toDistribute = buffer.mul(block.number.sub(lastDepositBlock)).div(TRANSMUTATION_PERIOD);\r\n        if(block.number.sub(lastDepositBlock) > TRANSMUTATION_PERIOD){\r\n            _toDistribute = buffer;\r\n        }\r\n        uint256 _pendingdivs = _toDistribute.mul(depositedScTokens[user]).div(totalSupplyScTokens);\r\n        uint256 _inbucket = tokensInBucket[user].add(dividendsOwing(user));\r\n        uint256 _realised = realisedTokens[user];\r\n        return (_depositedAl, _pendingdivs, _inbucket, _realised);\r\n    }\r\n\r\n    /// @dev Gets the status of multiple users in one call\r\n    ///\r\n    /// This function is used to query the contract to check for\r\n    /// accounts that have overfilled positions in order to check\r\n    /// who can be force transmuted.\r\n    ///\r\n    /// @param from the first index of the userList\r\n    /// @param to the last index of the userList\r\n    ///\r\n    /// returns the userList with their staking status in paginated form.\r\n    function getMultipleUserInfo(uint256 from, uint256 to)\r\n        public\r\n        view\r\n        returns (address[] memory theUserList, uint256[] memory theUserData)\r\n    {\r\n        uint256 i = from;\r\n        uint256 delta = to - from;\r\n        address[] memory _theUserList = new address[](delta); //user\r\n        uint256[] memory _theUserData = new uint256[](delta * 2); //deposited-bucket\r\n        uint256 y = 0;\r\n        uint256 _toDistribute = buffer.mul(block.number.sub(lastDepositBlock)).div(TRANSMUTATION_PERIOD);\r\n        if(block.number.sub(lastDepositBlock) > TRANSMUTATION_PERIOD){\r\n            _toDistribute = buffer;\r\n        }\r\n        for (uint256 x = 0; x < delta; x += 1) {\r\n            _theUserList[x] = userList[i];\r\n            _theUserData[y] = depositedScTokens[userList[i]];\r\n            _theUserData[y + 1] = dividendsOwing(userList[i]).add(tokensInBucket[userList[i]]).add(_toDistribute.mul(depositedScTokens[userList[i]]).div(totalSupplyScTokens));\r\n            y += 2;\r\n            i += 1;\r\n        }\r\n        return (_theUserList, _theUserData);\r\n    }\r\n\r\n    /// @dev Gets info on the buffer\r\n    ///\r\n    /// This function is used to query the contract to get the\r\n    /// latest state of the buffer\r\n    ///\r\n    /// @return _toDistribute the amount ready to be distributed\r\n    /// @return _deltaBlocks the amount of time since the last phased distribution\r\n    /// @return _buffer the amount in the buffer\r\n    function bufferInfo() public view returns (uint256 _toDistribute, uint256 _deltaBlocks, uint256 _buffer){\r\n        _deltaBlocks = block.number.sub(lastDepositBlock);\r\n        _buffer = buffer;\r\n        _toDistribute = _buffer.mul(_deltaBlocks).div(TRANSMUTATION_PERIOD);\r\n    }\r\n\r\n    /// @dev Sets the pending governance.\r\n    ///\r\n    /// This function reverts if the new pending governance is the zero address or the caller is not the current\r\n    /// governance. This is to prevent the contract governance being set to the zero address which would deadlock\r\n    /// privileged contract functionality.\r\n    ///\r\n    /// @param _pendingGovernance the new pending governance.\r\n    function setPendingGovernance(address _pendingGovernance) external onlyGov() {\r\n        require(_pendingGovernance != ZERO_ADDRESS, \"Transmuter: 0 gov\");\r\n\r\n        pendingGovernance = _pendingGovernance;\r\n\r\n        emit PendingGovernanceUpdated(_pendingGovernance);\r\n    }\r\n\r\n    /// @dev Accepts the role as governance.\r\n    ///\r\n    /// This function reverts if the caller is not the new pending governance.\r\n    function acceptGovernance() external  {\r\n        require(msg.sender == pendingGovernance,\"!pendingGovernance\");\r\n        address _pendingGovernance = pendingGovernance;\r\n        governance = _pendingGovernance;\r\n\r\n        emit GovernanceUpdated(_pendingGovernance);\r\n    }\r\n\r\n    /// @dev Sets the whitelist\r\n    ///\r\n    /// This function reverts if the caller is not governance\r\n    ///\r\n    /// @param _toWhitelist the account to mint tokens to.\r\n    /// @param _state the whitelist state.\r\n    function setWhitelist(address _toWhitelist, bool _state) external onlyGov() {\r\n        whiteList[_toWhitelist] = _state;\r\n        emit WhitelistSet(_toWhitelist, _state);\r\n    }\r\n\r\n    /// @dev Sets the keeper list\r\n    ///\r\n    /// This function reverts if the caller is not governance\r\n    ///\r\n    /// @param _keepers the accounts to set states for.\r\n    /// @param _states the accounts states.\r\n    function setKeepers(address[] calldata _keepers, bool[] calldata _states) external onlyGov() {\r\n        uint256 n = _keepers.length;\r\n        for(uint256 i = 0; i < n; i++) {\r\n            keepers[_keepers[i]] = _states[i];\r\n        }\r\n        emit KeepersSet(_keepers, _states);\r\n    }\r\n    /// @dev Initializes the contract.\r\n    ///\r\n    /// This function checks that the transmuter and rewards have been set and sets up the active vault.\r\n    ///\r\n    /// @param _adapter the vault adapter of the active vault.\r\n    function initialize(YearnVaultAdapterWithIndirection _adapter) external onlyGov {\r\n        require(!initialized, \"Transmuter: already initialized\");\r\n        require(rewards != ZERO_ADDRESS, \"Transmuter: cannot initialize rewards address to 0x0\");\r\n        _updateActiveVault(_adapter);\r\n        initialized = true;\r\n    }\r\n    function migrate(YearnVaultAdapterWithIndirection _adapter) external onlyGov() {\r\n        _updateActiveVault(_adapter);\r\n    }\r\n\r\n    /// @dev Updates the active vault.\r\n    ///\r\n    /// This function reverts if the vault adapter is the zero address, if the token that the vault adapter accepts\r\n    /// is not the token that this contract defines as the parent asset, or if the contract has not yet been initialized.\r\n    ///\r\n    /// @param _adapter the adapter for the new active vault.\r\n    function _updateActiveVault(YearnVaultAdapterWithIndirection _adapter) internal {\r\n        require(_adapter != YearnVaultAdapterWithIndirection(ZERO_ADDRESS), \"Transmuter: active vault address cannot be 0x0.\");\r\n        require(address(_adapter.token()) == Token, \"Transmuter.vault: token mismatch.\");\r\n        require(!adapters[_adapter], \"Adapter already in use\");\r\n        adapters[_adapter] = true;\r\n        _vaults.push(VaultWithIndirection.Data({\r\n            adapter: _adapter,\r\n            totalDeposited: 0\r\n        }));\r\n\r\n        emit ActiveVaultUpdated(_adapter);\r\n    }\r\n\r\n    /// @dev Gets the number of vaults in the vault list.\r\n    ///\r\n    /// @return the vault count.\r\n    function vaultCount() external view returns (uint256) {\r\n        return _vaults.length();\r\n    }\r\n    /// @dev Get the adapter of a vault.\r\n    ///\r\n    /// @param _vaultId the identifier of the vault.\r\n    ///\r\n    /// @return the vault adapter.\r\n    function getVaultAdapter(uint256 _vaultId) external view returns (address) {\r\n        VaultWithIndirection.Data storage _vault = _vaults.get(_vaultId);\r\n        return address(_vault.adapter);\r\n    }\r\n    /// @dev Get the total amount of the parent asset that has been deposited into a vault.\r\n    ///\r\n    /// @param _vaultId the identifier of the vault.\r\n    ///\r\n    /// @return the total amount of deposited tokens.\r\n    function getVaultTotalDeposited(uint256 _vaultId) external view returns (uint256) {\r\n        VaultWithIndirection.Data storage _vault = _vaults.get(_vaultId);\r\n        return _vault.totalDeposited;\r\n    }\r\n\r\n    /// @dev Recalls funds from active vault if less than amt exist locally\r\n    ///\r\n    /// @param amt amount of funds that need to exist locally to fulfill pending request\r\n    function ensureSufficientFundsExistLocally(uint256 amt) internal {\r\n        uint256 currentBal = IERC20Burnable(Token).balanceOf(address(this));\r\n        if (currentBal < amt) {\r\n            uint256 diff = amt - currentBal;\r\n            // get enough funds from active vault to replenish local holdings & fulfill claim request\r\n            _recallExcessFundsFromActiveVault(plantableThreshold.add(diff));\r\n        }\r\n    }\r\n\r\n    /// @dev Recalls all planted funds from a target vault\r\n    ///\r\n    /// @param _vaultId the id of the vault from which to recall funds\r\n    function recallAllFundsFromVault(uint256 _vaultId) external {\r\n        require(pause && (msg.sender == governance || msg.sender == sentinel), \"Transmuter: not paused, or not governance or sentinel\");\r\n        _recallAllFundsFromVault(_vaultId);\r\n    }\r\n\r\n    /// @dev Recalls all planted funds from a target vault\r\n    ///\r\n    /// @param _vaultId the id of the vault from which to recall funds\r\n    function _recallAllFundsFromVault(uint256 _vaultId) internal {\r\n        VaultWithIndirection.Data storage _vault = _vaults.get(_vaultId);\r\n        (uint256 _withdrawnAmount, uint256 _decreasedValue) = _vault.withdrawAll(address(this));\r\n        emit FundsRecalled(_vaultId, _withdrawnAmount, _decreasedValue);\r\n    }\r\n\r\n    /// @dev Recalls planted funds from a target vault\r\n    ///\r\n    /// @param _vaultId the id of the vault from which to recall funds\r\n    /// @param _amount the amount of funds to recall\r\n    function recallFundsFromVault(uint256 _vaultId, uint256 _amount) external {\r\n        require(pause && (msg.sender == governance || msg.sender == sentinel), \"Transmuter: not paused, or not governance or sentinel\");\r\n        _recallFundsFromVault(_vaultId, _amount);\r\n    }\r\n\r\n    /// @dev Recalls planted funds from a target vault\r\n    ///\r\n    /// @param _vaultId the id of the vault from which to recall funds\r\n    /// @param _amount the amount of funds to recall\r\n    function _recallFundsFromVault(uint256 _vaultId, uint256 _amount) internal {\r\n        VaultWithIndirection.Data storage _vault = _vaults.get(_vaultId);\r\n        (uint256 _withdrawnAmount, uint256 _decreasedValue) = _vault.withdraw(address(this), _amount);\r\n        emit FundsRecalled(_vaultId, _withdrawnAmount, _decreasedValue);\r\n    }\r\n\r\n    /// @dev Recalls planted funds from the active vault\r\n    ///\r\n    /// @param _amount the amount of funds to recall\r\n    function _recallFundsFromActiveVault(uint256 _amount) internal {\r\n        _recallFundsFromVault(_vaults.lastIndex(), _amount);\r\n    }\r\n\r\n    /// @dev Plants or recalls funds from the active vault\r\n    ///\r\n    /// This function plants excess funds in an external vault, or recalls them from the external vault\r\n    /// Should only be called as part of distribute()\r\n    function _plantOrRecallExcessFunds() internal {\r\n        // check if the transmuter holds more funds than plantableThreshold\r\n        uint256 bal = IERC20Burnable(Token).balanceOf(address(this));\r\n        uint256 marginVal = plantableThreshold.mul(plantableMargin).div(100);\r\n        if (bal > plantableThreshold.add(marginVal)) {\r\n            uint256 plantAmt = bal - plantableThreshold;\r\n            // if total funds above threshold, send funds to vault\r\n            VaultWithIndirection.Data storage _activeVault = _vaults.last();\r\n            _activeVault.deposit(plantAmt);\r\n        } else if (bal < plantableThreshold.sub(marginVal)) {\r\n            // if total funds below threshold, recall funds from vault\r\n            // first check that there are enough funds in vault\r\n            uint256 harvestAmt = plantableThreshold - bal;\r\n            _recallExcessFundsFromActiveVault(harvestAmt);\r\n        }\r\n    }\r\n\r\n    /// @dev Recalls up to the harvestAmt from the active vault\r\n    ///\r\n    /// This function will recall less than harvestAmt if only less is available\r\n    ///\r\n    /// @param _recallAmt the amount to harvest from the active vault\r\n    function _recallExcessFundsFromActiveVault(uint256 _recallAmt) internal {\r\n        VaultWithIndirection.Data storage _activeVault = _vaults.last();\r\n        uint256 activeVaultVal = _activeVault.totalValue();\r\n        if (activeVaultVal < _recallAmt) {\r\n            _recallAmt = activeVaultVal;\r\n        }\r\n        if (_recallAmt > 0) {\r\n            _recallFundsFromActiveVault(_recallAmt);\r\n        }\r\n    }\r\n\r\n    /// @dev Sets the address of the sentinel\r\n    ///\r\n    /// @param _sentinel address of the new sentinel\r\n    function setSentinel(address _sentinel) external onlyGov() {\r\n        require(_sentinel != ZERO_ADDRESS, \"Transmuter: sentinel address cannot be 0x0.\");\r\n        sentinel = _sentinel;\r\n        emit SentinelUpdated(_sentinel);\r\n    }\r\n\r\n    /// @dev Sets the threshold of total held funds above which excess funds will be planted in yield farms.\r\n    ///\r\n    /// This function reverts if the caller is not the current governance.\r\n    ///\r\n    /// @param _plantableThreshold the new plantable threshold.\r\n    function setPlantableThreshold(uint256 _plantableThreshold) external onlyGov() {\r\n        plantableThreshold = _plantableThreshold;\r\n        emit PlantableThresholdUpdated(_plantableThreshold);\r\n    }\r\n\r\n    /// @dev Sets the plantableThreshold margin for triggering the planting or recalling of funds on harvest\r\n    ///\r\n    /// This function reverts if the caller is not the current governance.\r\n    ///\r\n    /// @param _plantableMargin the new plantable margin.\r\n    function setPlantableMargin(uint256 _plantableMargin) external onlyGov() {\r\n        plantableMargin = _plantableMargin;\r\n        emit PlantableMarginUpdated(_plantableMargin);\r\n    }\r\n\r\n    /// @dev Sets the minUserActionDelay\r\n    ///\r\n    /// This function reverts if the caller is not the current governance.\r\n    ///\r\n    /// @param _minUserActionDelay the new min user action delay.\r\n    function setMinUserActionDelay(uint256 _minUserActionDelay) external onlyGov() {\r\n        minUserActionDelay = _minUserActionDelay;\r\n        emit MinUserActionDelayUpdated(_minUserActionDelay);\r\n    }\r\n\r\n    /// @dev Sets if the contract should enter emergency exit mode.\r\n    ///\r\n    /// There are 2 main reasons to pause:\r\n    ///     1. Need to shut down deposits in case of an emergency in one of the vaults\r\n    ///     2. Need to migrate to a new transmuter\r\n    ///\r\n    /// While the transmuter is paused, deposit() and distribute() are disabled\r\n    ///\r\n    /// @param _pause if the contract should enter emergency exit mode.\r\n    function setPause(bool _pause) external {\r\n        require(msg.sender == governance || msg.sender == sentinel, \"!(gov || sentinel)\");\r\n        pause = _pause;\r\n        emit PauseUpdated(_pause);\r\n    }\r\n\r\n    /// @dev Harvests yield from a vault.\r\n    ///\r\n    /// @param _vaultId the identifier of the vault to harvest from.\r\n    ///\r\n    /// @return the amount of funds that were harvested from the vault.\r\n    function harvest(uint256 _vaultId) external onlyKeeper() returns (uint256, uint256) {\r\n\r\n        VaultWithIndirection.Data storage _vault = _vaults.get(_vaultId);\r\n\r\n        (uint256 _harvestedAmount, uint256 _decreasedValue) = _vault.harvest(rewards);\r\n\r\n        emit FundsHarvested(_harvestedAmount, _decreasedValue);\r\n\r\n        return (_harvestedAmount, _decreasedValue);\r\n    }\r\n\r\n    /// @dev Sets the rewards contract.\r\n    ///\r\n    /// This function reverts if the new rewards contract is the zero address or the caller is not the current governance.\r\n    ///\r\n    /// @param _rewards the new rewards contract.\r\n    function setRewards(address _rewards) external onlyGov() {\r\n        // Check that the rewards address is not the zero address. Setting the rewards to the zero address would break\r\n        // transfers to the address because of `safeTransfer` checks.\r\n        require(_rewards != ZERO_ADDRESS, \"Transmuter: rewards address cannot be 0x0.\");\r\n\r\n        rewards = _rewards;\r\n\r\n        emit RewardsUpdated(_rewards);\r\n    }\r\n\r\n    /// @dev Migrates transmuter funds to a new transmuter\r\n    ///\r\n    /// @param migrateTo address of the new transmuter\r\n    function migrateFunds(address migrateTo) external onlyGov() {\r\n        require(migrateTo != address(0), \"cannot migrate to 0x0\");\r\n        require(pause, \"migrate: set emergency exit first\");\r\n\r\n        // leave enough funds to service any pending transmutations\r\n        uint256 totalFunds = IERC20Burnable(Token).balanceOf(address(this));\r\n        uint256 migratableFunds = totalFunds.sub(totalSupplyScTokens, \"not enough funds to service stakes\");\r\n        IERC20Burnable(Token).approve(migrateTo, migratableFunds);\r\n        ITransmuter(migrateTo).distribute(address(this), migratableFunds);\r\n        emit MigrationComplete(migrateTo, migratableFunds);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ScToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract YearnVaultAdapterWithIndirection\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"ActiveVaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transmutedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transmutedTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTransmuted\",\"type\":\"uint256\"}],\"name\":\"ForcedTransmutation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreasedValue\",\"type\":\"uint256\"}],\"name\":\"FundsHarvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreasedValue\",\"type\":\"uint256\"}],\"name\":\"FundsRecalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"GovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"keepers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"states\",\"type\":\"bool[]\"}],\"name\":\"KeepersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"migrateTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundsMigrated\",\"type\":\"uint256\"}],\"name\":\"MigrationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minUserActionDelay\",\"type\":\"uint256\"}],\"name\":\"MinUserActionDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"PauseUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernance\",\"type\":\"address\"}],\"name\":\"PendingGovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"plantableMargin\",\"type\":\"uint256\"}],\"name\":\"PlantableMarginUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"plantableThreshold\",\"type\":\"uint256\"}],\"name\":\"PlantableThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"RewardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"name\":\"ScUsdStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnstaked\",\"type\":\"uint256\"}],\"name\":\"ScUsdUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sentinel\",\"type\":\"address\"}],\"name\":\"SentinelUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"TokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transmutedTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTransmuted\",\"type\":\"uint256\"}],\"name\":\"Transmutation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTransmutationPeriod\",\"type\":\"uint256\"}],\"name\":\"TransmuterPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"whitelisted\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"WhitelistSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ScToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSMUTATION_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract YearnVaultAdapterWithIndirection\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adapters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bufferInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_toDistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deltaBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buffer\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedScTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendsOwing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTransmute\",\"type\":\"address\"}],\"name\":\"forceTransmute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"getMultipleUserInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"theUserList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"theUserData\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getVaultAdapter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getVaultTotalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract YearnVaultAdapterWithIndirection\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDepositBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDividendPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUserAction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract YearnVaultAdapterWithIndirection\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"migrateTo\",\"type\":\"address\"}],\"name\":\"migrateFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minUserActionDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plantableMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plantableThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pointMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"realisedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"recallAllFundsFromVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recallFundsFromVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sentinel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_keepers\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_states\",\"type\":\"bool[]\"}],\"name\":\"setKeepers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minUserActionDelay\",\"type\":\"uint256\"}],\"name\":\"setMinUserActionDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernance\",\"type\":\"address\"}],\"name\":\"setPendingGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plantableMargin\",\"type\":\"uint256\"}],\"name\":\"setPlantableMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plantableThreshold\",\"type\":\"uint256\"}],\"name\":\"setPlantableThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sentinel\",\"type\":\"address\"}],\"name\":\"setSentinel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTransmutationPeriod\",\"type\":\"uint256\"}],\"name\":\"setTransmutationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toWhitelist\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensInBucket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividendPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyScTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmuteAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmuteClaimAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositedAl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingdivs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inbucket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realised\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIsKnown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TransmuterB", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000e5c2b15666eee4b66788e45cf4da0392c070fa7000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d5600000000000000000000000047a14a6f2a5979570a395725f16ec2c61be026f0", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://54c9e9daea24b7269e426f6822060385db2613cc19fdc882044d561e89941ac8"}