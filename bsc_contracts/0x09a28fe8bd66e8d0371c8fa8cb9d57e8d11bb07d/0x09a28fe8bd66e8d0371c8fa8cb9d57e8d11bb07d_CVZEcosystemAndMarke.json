{"SourceCode": "// Sources flattened with hardhat v2.6.3 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.3.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.3.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.3.1\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/MultiLinearVesting.sol\r\n\r\ncontract MultiLinearVesting is Ownable {\r\n    address public immutable token;\r\n    IERC20 private tokenContract;\r\n\r\n    uint256 public constant interval = 1 * 30 days;  // Delays between each unlock\r\n    uint256 public cliff;\r\n    uint256 public cycles;\r\n    uint256 public tgePercent;\r\n    uint256 public vestingStartTime;\r\n    uint256 public unlockEnd;\r\n    uint256 PERCENTAGE_FACTOR = 1000;\r\n\r\n    uint256 [] public distributionPerMonthPercentage;\r\n    mapping (address => VestingTerms) public vestingData;\r\n\r\n    event Distribute(address to, uint256 amount);\r\n\r\n    struct InitialVestingData {\r\n        address beneficiary;\r\n        uint256 totalVestedTokens;\r\n    }\r\n\r\n    struct VestingTerms {\r\n        uint256 totalVestedTokens;\r\n        uint256 totalClaimed;\r\n        uint256 monthlyRelease;\r\n        uint256 amountOnTGE;\r\n    }\r\n\r\n    modifier isValid {\r\n        require(msg.sender == tx.origin);\r\n        require(vestingStartTime > 0, \"Vesting start time not set yet\");\r\n        require(block.timestamp > vestingStartTime, \"Vesting not started yet\");\r\n        require(vestingData[msg.sender].totalVestedTokens > 0, \"The account does not have any vested tokens.\");\r\n        require(vestingData[msg.sender].totalVestedTokens > vestingData[msg.sender].totalClaimed, \"Already claimed all tokens\");\r\n        _;\r\n        require(vestingData[msg.sender].totalVestedTokens >= vestingData[msg.sender].totalClaimed, \"Claim more tokens than vested\");\r\n    }\r\n    /* tgePercent_ - the amount % to be released on TGE */\r\n    /* cliff_ - the number of intervals before linear / non-linear vesting starts */\r\n    /* tgePercent_ value between 0-1000 */\r\n    /* cycles_ - amount of linear cycles after TGE + cliff */\r\n    constructor(\r\n        address token_,\r\n        uint256 cliff_,\r\n        uint256 cycles_,\r\n        uint256 tgePercent_) {\r\n        token = token_;\r\n        cycles = cycles_;\r\n        tgePercent = tgePercent_;\r\n        tokenContract = IERC20(token_);\r\n        cliff = cliff_;\r\n        vestingStartTime = 0;\r\n        unlockEnd = vestingStartTime + cliff * interval + cycles * interval;\r\n    }\r\n\r\n    function addVestingPolicy(InitialVestingData [] memory initialVestingData_) internal {\r\n        for (uint i = 0; i < initialVestingData_.length; i++){\r\n            uint256 amountOnTGE = (initialVestingData_[i].totalVestedTokens * tgePercent) / PERCENTAGE_FACTOR;\r\n            uint256 remainingAmount = initialVestingData_[i].totalVestedTokens - amountOnTGE;\r\n            uint256 monthlyRelease = remainingAmount / cycles;\r\n            vestingData[initialVestingData_[i].beneficiary] = VestingTerms(\r\n                initialVestingData_[i].totalVestedTokens,\r\n                0,\r\n                monthlyRelease,\r\n                amountOnTGE\r\n            );\r\n        }\r\n    }\r\n\r\n    // Claims all available tokens up to now\r\n    function claim() public isValid {\r\n        uint256 amountToSend = getClaimableTokens(msg.sender, block.timestamp);\r\n        require(amountToSend > 0, \"No tokens to claim\");\r\n        vestingData[msg.sender].totalClaimed += amountToSend;\r\n\r\n        safeWithdraw(msg.sender, amountToSend);\r\n    }\r\n\r\n    // Safety function to recover any leftover tokens that may be left in the contract (e.g because of rounding errors).\r\n    // @note this function can only be called after the entire vesting period has ended\r\n    function recoverLeftOvers() external isValid {\r\n        require(block.timestamp > unlockEnd, \"Unlock end have not reached yet\");\r\n\r\n        uint256 amountToSend = vestingData[msg.sender].totalVestedTokens - vestingData[msg.sender].totalClaimed;\r\n        // effect\r\n        vestingData[msg.sender].totalClaimed = vestingData[msg.sender].totalVestedTokens;\r\n\r\n        // interact\r\n        safeWithdraw(msg.sender, amountToSend);\r\n\r\n    }\r\n\r\n    function getTotalAllocation(address investor) public view returns(uint256){\r\n        return vestingData[investor].totalVestedTokens;\r\n    }\r\n\r\n    function getAmountOfClaimedTokens(address investor) public view returns(uint256){\r\n        return vestingData[investor].totalClaimed;\r\n    }\r\n\r\n    // Returns the number of tokens that the investor is able to claim at the given date\r\n    function getUnlockedTokens(address investor, uint256 blockTimestamp) public view returns(uint256) {\r\n\r\n        if(blockTimestamp < vestingStartTime || vestingStartTime == 0){\r\n            return 0;\r\n        }\r\n        if (vestingData[investor].totalVestedTokens == 0){\r\n            return 0;\r\n        }\r\n\r\n        uint256 unlocksSinceTGE = (blockTimestamp - vestingStartTime) / interval;\r\n        uint256 amount = 0;\r\n\r\n        if (unlocksSinceTGE <= cliff) {\r\n            amount = vestingData[investor].amountOnTGE;\r\n        }\r\n        else {\r\n            amount = vestingData[investor].monthlyRelease * (unlocksSinceTGE - cliff) + vestingData[investor].amountOnTGE;\r\n        }\r\n\r\n        if (amount > vestingData[investor].totalVestedTokens) {\r\n            amount = vestingData[investor].totalVestedTokens;\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    function getClaimableTokens(address investor, uint256 blockTimestamp) public view returns(uint256) {\r\n        return getUnlockedTokens(investor, blockTimestamp) - vestingData[investor].totalClaimed;\r\n    }\r\n\r\n    function getAmountOfTokensOnTGE(address investor) external view returns(uint256){\r\n        return vestingData[investor].amountOnTGE;\r\n    }\r\n\r\n    // After this date, all tokens should be unlocked\r\n    function getVestingEndTimestamp() external view returns(uint256){\r\n        return unlockEnd;\r\n    }\r\n\r\n    // TGE date\r\n    function getVestingStartTimestamp() external view returns(uint256){\r\n        return vestingStartTime;\r\n    }\r\n\r\n    // Number of tokens that are released each month for the investor\r\n    function getMonthlyRelease(address investor) external view returns(uint256){\r\n        return vestingData[investor].monthlyRelease;\r\n    }\r\n\r\n    function setVestingStartTime(uint256 timestamp) external onlyOwner {\r\n        require(vestingStartTime == 0, \"Vesting start time is already set\");\r\n        vestingStartTime = timestamp;\r\n        unlockEnd = vestingStartTime + cliff * interval + cycles * interval;\r\n    }\r\n\r\n    function safeWithdraw(address to, uint256 amount) internal {\r\n        uint256 initialTokenBalance = tokenContract.balanceOf(to);\r\n        tokenContract.transfer(to, amount);\r\n        uint256 afterTokenBalance = tokenContract.balanceOf(to);\r\n        require(afterTokenBalance - initialTokenBalance > 0, \"failed to send tokens\");\r\n    }\r\n\r\n}\r\n\r\n\r\n// File contracts/For Client/CVZ/CVZEcosystemAndMarketingVestingProd.sol\r\n\r\ncontract CVZEcosystemAndMarketingVestingProd is MultiLinearVesting{\r\n    /* This array is the amount of % of the total allocation to be released in the month */\r\n    uint256 cliff_ = 0; // cliff_ since the first distribution is 1 month after TGE\r\n    uint256 tgePercent_ = 0; // 0% on TGE\r\n    uint256 cycles_ = 36; // liner vesting over 36 months after unlock ends.\r\n    InitialVestingData [] initialVestingData_;\r\n\r\n    constructor(address tokenAddress) MultiLinearVesting(tokenAddress, cliff_, cycles_,  tgePercent_){\r\n        InitialVestingData [1] memory tmp = [\r\n            InitialVestingData(0x5c3EDAE589f8D166E1f97B0bAd0F8c2A5607FFf8, 455_000_000 ether)\r\n        ];\r\n\r\n        for (uint i = 0; i < tmp.length; i++) {\r\n            initialVestingData_.push(tmp[i]);\r\n        }\r\n        addVestingPolicy(initialVestingData_);\r\n\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cycles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributionPerMonthPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getAmountOfClaimedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getAmountOfTokensOnTGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"getClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getMonthlyRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"}],\"name\":\"getTotalAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"getUnlockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverLeftOvers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setVestingStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalVestedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monthlyRelease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOnTGE\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CVZEcosystemAndMarketingVestingProd", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006fbb278c4eaa5218495a1858447b26d905ac0010", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7f711086f3d708f043002d3e6f8b9ae13736c9e271a38db011c216531448cdf3"}