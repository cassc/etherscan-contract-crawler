{"SourceCode": "// File: contracts/utils/Address.sol\r\n \r\n \r\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\r\n \r\npragma solidity ^0.8.1;\r\n \r\n/**\r\n* @dev Collection of functions related to the address type\r\n*/\r\nlibrary Address {\r\n   /**\r\n    * @dev Returns true if `account` is a contract.\r\n    *\r\n    * [IMPORTANT]\r\n    * ====\r\n    * It is unsafe to assume that an address for which this function returns\r\n    * false is an externally-owned account (EOA) and not a contract.\r\n    *\r\n    * Among others, `isContract` will return false for the following\r\n    * types of addresses:\r\n    *\r\n    *  - an externally-owned account\r\n    *  - a contract in construction\r\n    *  - an address where a contract will be created\r\n    *  - an address where a contract lived, but was destroyed\r\n    * ====\r\n    *\r\n    * [IMPORTANT]\r\n    * ====\r\n    * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n    *\r\n    * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n    * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n    * constructor.\r\n    * ====\r\n    */\r\n   function isContract(address account) internal view returns (bool) {\r\n       // This method relies on extcodesize/address.code.length, which returns 0\r\n       // for contracts in construction, since the code is only stored at the end\r\n       // of the constructor execution.\r\n \r\n       return account.code.length > 0;\r\n   }\r\n \r\n   /**\r\n    * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n    * `recipient`, forwarding all available gas and reverting on errors.\r\n    *\r\n    * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n    * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n    * imposed by `transfer`, making them unable to receive funds via\r\n    * `transfer`. {sendValue} removes this limitation.\r\n    *\r\n    * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n    *\r\n    * IMPORTANT: because control is transferred to `recipient`, care must be\r\n    * taken to not create reentrancy vulnerabilities. Consider using\r\n    * {ReentrancyGuard} or the\r\n    * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n    */\r\n   function sendValue(address payable recipient, uint256 amount) internal {\r\n       require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n \r\n       (bool success, ) = recipient.call{value: amount}(\"\");\r\n       require(success, \"Address: unable to send value, recipient may have reverted\");\r\n   }\r\n \r\n   /**\r\n    * @dev Performs a Solidity function call using a low level `call`. A\r\n    * plain `call` is an unsafe replacement for a function call: use this\r\n    * function instead.\r\n    *\r\n    * If `target` reverts with a revert reason, it is bubbled up by this\r\n    * function (like regular Solidity function calls).\r\n    *\r\n    * Returns the raw returned data. To convert to the expected return value,\r\n    * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `target` must be a contract.\r\n    * - calling `target` with `data` must not revert.\r\n    *\r\n    * _Available since v3.1._\r\n    */\r\n   function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n       return functionCall(target, data, \"Address: low-level call failed\");\r\n   }\r\n \r\n   /**\r\n    * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n    * `errorMessage` as a fallback revert reason when `target` reverts.\r\n    *\r\n    * _Available since v3.1._\r\n    */\r\n   function functionCall(\r\n       address target,\r\n       bytes memory data,\r\n       string memory errorMessage\r\n   ) internal returns (bytes memory) {\r\n       return functionCallWithValue(target, data, 0, errorMessage);\r\n   }\r\n \r\n   /**\r\n    * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n    * but also transferring `value` wei to `target`.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - the calling contract must have an ETH balance of at least `value`.\r\n    * - the called Solidity function must be `payable`.\r\n    *\r\n    * _Available since v3.1._\r\n    */\r\n   function functionCallWithValue(\r\n       address target,\r\n       bytes memory data,\r\n       uint256 value\r\n   ) internal returns (bytes memory) {\r\n       return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n   }\r\n \r\n   /**\r\n    * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n    * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n    *\r\n    * _Available since v3.1._\r\n    */\r\n   function functionCallWithValue(\r\n       address target,\r\n       bytes memory data,\r\n       uint256 value,\r\n       string memory errorMessage\r\n   ) internal returns (bytes memory) {\r\n       require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n       require(isContract(target), \"Address: call to non-contract\");\r\n \r\n       (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n       return verifyCallResult(success, returndata, errorMessage);\r\n   }\r\n \r\n   /**\r\n    * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n    * but performing a static call.\r\n    *\r\n    * _Available since v3.3._\r\n    */\r\n   function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n       return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n   }\r\n \r\n   /**\r\n    * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n    * but performing a static call.\r\n    *\r\n    * _Available since v3.3._\r\n    */\r\n   function functionStaticCall(\r\n       address target,\r\n       bytes memory data,\r\n       string memory errorMessage\r\n   ) internal view returns (bytes memory) {\r\n       require(isContract(target), \"Address: static call to non-contract\");\r\n \r\n       (bool success, bytes memory returndata) = target.staticcall(data);\r\n       return verifyCallResult(success, returndata, errorMessage);\r\n   }\r\n \r\n   /**\r\n    * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n    * but performing a delegate call.\r\n    *\r\n    * _Available since v3.4._\r\n    */\r\n   function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n       return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n   }\r\n \r\n   /**\r\n    * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n    * but performing a delegate call.\r\n    *\r\n    * _Available since v3.4._\r\n    */\r\n   function functionDelegateCall(\r\n       address target,\r\n       bytes memory data,\r\n       string memory errorMessage\r\n   ) internal returns (bytes memory) {\r\n       require(isContract(target), \"Address: delegate call to non-contract\");\r\n \r\n       (bool success, bytes memory returndata) = target.delegatecall(data);\r\n       return verifyCallResult(success, returndata, errorMessage);\r\n   }\r\n \r\n   /**\r\n    * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n    * revert reason using the provided one.\r\n    *\r\n    * _Available since v4.3._\r\n    */\r\n   function verifyCallResult(\r\n       bool success,\r\n       bytes memory returndata,\r\n       string memory errorMessage\r\n   ) internal pure returns (bytes memory) {\r\n       if (success) {\r\n           return returndata;\r\n       } else {\r\n           // Look for revert reason and bubble it up if present\r\n           if (returndata.length > 0) {\r\n               // The easiest way to bubble the revert reason is using memory via assembly\r\n \r\n               assembly {\r\n                   let returndata_size := mload(returndata)\r\n                   revert(add(32, returndata), returndata_size)\r\n               }\r\n           } else {\r\n               revert(errorMessage);\r\n           }\r\n       }\r\n   }\r\n}\r\n \r\n// File: contracts/utils/math/SafeMath.sol\r\n \r\n \r\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\r\n \r\npragma solidity ^0.8.0;\r\n \r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n \r\n/**\r\n* @dev Wrappers over Solidity's arithmetic operations.\r\n*\r\n* NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n* now has built in overflow checking.\r\n*/\r\nlibrary SafeMath {\r\n   /**\r\n    * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n    *\r\n    * _Available since v3.4._\r\n    */\r\n   function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n       unchecked {\r\n           uint256 c = a + b;\r\n           if (c < a) return (false, 0);\r\n           return (true, c);\r\n       }\r\n   }\r\n \r\n   /**\r\n    * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n    *\r\n    * _Available since v3.4._\r\n    */\r\n   function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n       unchecked {\r\n           if (b > a) return (false, 0);\r\n           return (true, a - b);\r\n       }\r\n   }\r\n \r\n   /**\r\n    * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n    *\r\n    * _Available since v3.4._\r\n    */\r\n   function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n       unchecked {\r\n           // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n           // benefit is lost if 'b' is also tested.\r\n           // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n           if (a == 0) return (true, 0);\r\n           uint256 c = a * b;\r\n           if (c / a != b) return (false, 0);\r\n           return (true, c);\r\n       }\r\n   }\r\n \r\n   /**\r\n    * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n    *\r\n    * _Available since v3.4._\r\n    */\r\n   function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n       unchecked {\r\n           if (b == 0) return (false, 0);\r\n           return (true, a / b);\r\n       }\r\n   }\r\n \r\n   /**\r\n    * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n    *\r\n    * _Available since v3.4._\r\n    */\r\n   function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n       unchecked {\r\n           if (b == 0) return (false, 0);\r\n           return (true, a % b);\r\n       }\r\n   }\r\n \r\n   /**\r\n    * @dev Returns the addition of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `+` operator.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - Addition cannot overflow.\r\n    */\r\n   function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       return a + b;\r\n   }\r\n \r\n   /**\r\n    * @dev Returns the subtraction of two unsigned integers, reverting on\r\n    * overflow (when the result is negative).\r\n    *\r\n    * Counterpart to Solidity's `-` operator.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - Subtraction cannot overflow.\r\n    */\r\n   function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       return a - b;\r\n   }\r\n \r\n   /**\r\n    * @dev Returns the multiplication of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `*` operator.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - Multiplication cannot overflow.\r\n    */\r\n   function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       return a * b;\r\n   }\r\n \r\n   /**\r\n    * @dev Returns the integer division of two unsigned integers, reverting on\r\n    * division by zero. The result is rounded towards zero.\r\n    *\r\n    * Counterpart to Solidity's `/` operator.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The divisor cannot be zero.\r\n    */\r\n   function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       return a / b;\r\n   }\r\n \r\n   /**\r\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n    * reverting when dividing by zero.\r\n    *\r\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n    * invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The divisor cannot be zero.\r\n    */\r\n   function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       return a % b;\r\n   }\r\n \r\n   /**\r\n    * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n    * overflow (when the result is negative).\r\n    *\r\n    * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n    * message unnecessarily. For custom revert reasons use {trySub}.\r\n    *\r\n    * Counterpart to Solidity's `-` operator.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - Subtraction cannot overflow.\r\n    */\r\n   function sub(\r\n       uint256 a,\r\n       uint256 b,\r\n       string memory errorMessage\r\n   ) internal pure returns (uint256) {\r\n       unchecked {\r\n           require(b <= a, errorMessage);\r\n           return a - b;\r\n       }\r\n   }\r\n \r\n   /**\r\n    * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n    * division by zero. The result is rounded towards zero.\r\n    *\r\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n    * uses an invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The divisor cannot be zero.\r\n    */\r\n   function div(\r\n       uint256 a,\r\n       uint256 b,\r\n       string memory errorMessage\r\n   ) internal pure returns (uint256) {\r\n       unchecked {\r\n           require(b > 0, errorMessage);\r\n           return a / b;\r\n       }\r\n   }\r\n \r\n   /**\r\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n    * reverting with custom message when dividing by zero.\r\n    *\r\n    * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n    * message unnecessarily. For custom revert reasons use {tryMod}.\r\n    *\r\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n    * invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The divisor cannot be zero.\r\n    */\r\n   function mod(\r\n       uint256 a,\r\n       uint256 b,\r\n       string memory errorMessage\r\n   ) internal pure returns (uint256) {\r\n       unchecked {\r\n           require(b > 0, errorMessage);\r\n           return a % b;\r\n       }\r\n   }\r\n}\r\n \r\n// File: contracts/utils/Context.sol\r\n \r\n \r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n \r\npragma solidity ^0.8.0;\r\n \r\n/**\r\n* @dev Provides information about the current execution context, including the\r\n* sender of the transaction and its data. While these are generally available\r\n* via msg.sender and msg.data, they should not be accessed in such a direct\r\n* manner, since when dealing with meta-transactions the account sending and\r\n* paying for execution may not be the actual sender (as far as an application\r\n* is concerned).\r\n*\r\n* This contract is only required for intermediate, library-like contracts.\r\n*/\r\nabstract contract Context {\r\n   function _msgSender() internal view virtual returns (address) {\r\n       return msg.sender;\r\n   }\r\n \r\n   function _msgData() internal view virtual returns (bytes calldata) {\r\n       return msg.data;\r\n   }\r\n}\r\n \r\n// File: contracts/access/Ownable.sol\r\n \r\n \r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n \r\npragma solidity ^0.8.0;\r\n \r\n \r\n/**\r\n* @dev Contract module which provides a basic access control mechanism, where\r\n* there is an account (an owner) that can be granted exclusive access to\r\n* specific functions.\r\n*\r\n* By default, the owner account will be the one that deploys the contract. This\r\n* can later be changed with {transferOwnership}.\r\n*\r\n* This module is used through inheritance. It will make available the modifier\r\n* `onlyOwner`, which can be applied to your functions to restrict their use to\r\n* the owner.\r\n*/\r\nabstract contract Ownable is Context {\r\n   address private _owner;\r\n \r\n   event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n \r\n   /**\r\n    * @dev Initializes the contract setting the deployer as the initial owner.\r\n    */\r\n   constructor() {\r\n       _transferOwnership(_msgSender());\r\n   }\r\n \r\n   /**\r\n    * @dev Returns the address of the current owner.\r\n    */\r\n   function owner() public view virtual returns (address) {\r\n       return _owner;\r\n   }\r\n \r\n   /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n   modifier onlyOwner() {\r\n       require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n       _;\r\n   }\r\n \r\n   /**\r\n    * @dev Leaves the contract without owner. It will not be possible to call\r\n    * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n    *\r\n    * NOTE: Renouncing ownership will leave the contract without an owner,\r\n    * thereby removing any functionality that is only available to the owner.\r\n    */\r\n   function renounceOwnership() public virtual onlyOwner {\r\n       _transferOwnership(address(0));\r\n   }\r\n \r\n   /**\r\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n    * Can only be called by the current owner.\r\n    */\r\n   function transferOwnership(address newOwner) public virtual onlyOwner {\r\n       require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n       _transferOwnership(newOwner);\r\n   }\r\n \r\n   /**\r\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n    * Internal function without access restriction.\r\n    */\r\n   function _transferOwnership(address newOwner) internal virtual {\r\n       address oldOwner = _owner;\r\n       _owner = newOwner;\r\n       emit OwnershipTransferred(oldOwner, newOwner);\r\n   }\r\n}\r\n \r\n// File: contracts/token/ERC20/IERC20.sol\r\n \r\n \r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n \r\npragma solidity ^0.8.0;\r\n \r\n/**\r\n* @dev Interface of the ERC20 standard as defined in the EIP.\r\n*/\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n   event Transfer(address indexed from, address indexed to, uint256 value);\r\n \r\n   /**\r\n    * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n    * a call to {approve}. `value` is the new allowance.\r\n    */\r\n   event Approval(address indexed owner, address indexed spender, uint256 value);\r\n   \r\n   /**\r\n    * @dev Returns the amount of tokens in existence.\r\n    */\r\n   function totalSupply() external view returns (uint256);\r\n \r\n   /**\r\n    * @dev Returns the amount of tokens owned by `account`.\r\n    */\r\n   function balanceOf(address account) external view returns (uint256);\r\n \r\n   /**\r\n    * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    */\r\n   function transfer(address recipient, uint256 amount) external returns (bool);\r\n \r\n   /**\r\n    * @dev Returns the remaining number of tokens that `spender` will be\r\n    * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n    * zero by default.\r\n    *\r\n    * This value changes when {approve} or {transferFrom} are called.\r\n    */\r\n   function allowance(address owner, address spender) external view returns (uint256);\r\n \r\n   /**\r\n    * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n    * that someone may use both the old and the new allowance by unfortunate\r\n    * transaction ordering. One possible solution to mitigate this race\r\n    * condition is to first reduce the spender's allowance to 0 and set the\r\n    * desired value afterwards:\r\n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    *\r\n    * Emits an {Approval} event.\r\n    */\r\n   function approve(address spender, uint256 amount) external returns (bool);\r\n \r\n   /**\r\n    * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n    * allowance mechanism. `amount` is then deducted from the caller's\r\n    * allowance.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * Emits a {Transfer} event.\r\n    */\r\n   function transferFrom(\r\n       address sender, //changed \"from\" to \"sender\" for easier code reading/editing\r\n       address recipient, // changed \"to\" to \"recipient\" for easier code reading/editing\r\n       uint256 amount\r\n   ) external returns (bool);\r\n}\r\n \r\n// File: contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n \r\n \r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n \r\npragma solidity ^0.8.0;\r\n \r\n \r\n/**\r\n* @dev Interface for the optional metadata functions from the ERC20 standard.\r\n*\r\n* _Available since v4.1._\r\n*/\r\ninterface IERC20Metadata is IERC20 {\r\n   /**\r\n    * @dev Returns the name of the token.\r\n    */\r\n   function name() external view returns (string memory);\r\n \r\n   /**\r\n    * @dev Returns the symbol of the token.\r\n    */\r\n   function symbol() external view returns (string memory);\r\n \r\n   /**\r\n    * @dev Returns the decimals places of the token.\r\n    */\r\n   function decimals() external view returns (uint8);\r\n}\r\n \r\n// Router\r\npragma solidity ^0.8.4;\r\ninterface IUniswapV2Factory {\r\n   event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n   function feeTo() external view returns (address);\r\n   function feeToSetter() external view returns (address);\r\n   function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n   function allPairs(uint) external view returns (address pair);\r\n   function allPairsLength() external view returns (uint);\r\n   function createPair(address tokenA, address tokenB) external returns (address pair);\r\n   function setFeeTo(address) external;\r\n   function setFeeToSetter(address) external;\r\n}\r\n \r\ninterface IUniswapV2Router01 {\r\n   function factory() external pure returns (address);\r\n   function WETH() external pure returns (address);\r\n   function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline\r\n   ) external returns (uint amountA, uint amountB, uint liquidity);\r\n   function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline\r\n   ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n   function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline\r\n   ) external returns (uint amountA, uint amountB);\r\n   function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline\r\n   ) external returns (uint amountToken, uint amountETH);\r\n   function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n   ) external returns (uint amountA, uint amountB);\r\n   function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n   ) external returns (uint amountToken, uint amountETH);\r\n   function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline\r\n   ) external returns (uint[] memory amounts);\r\n   function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline\r\n   ) external returns (uint[] memory amounts);\r\n   function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n   function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n   function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n   function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\r\n   function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n   function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n   function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n   function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n   function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n \r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n   function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline\r\n   ) external returns (uint amountETH);\r\n   function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n   ) external returns (uint amountETH);\r\n   function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline\r\n   ) external;\r\n   function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline\r\n   ) external payable;\r\n   function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline\r\n   ) external;\r\n}\r\n \r\n \r\n// Main Contract\r\ncontract Bear is IERC20Metadata, Ownable {\r\n   using SafeMath for uint256;\r\n   using Address for address;\r\n \r\n   mapping (address => uint256) private _walletBalance;\r\n   mapping (address => mapping (address => uint256)) private _allowances;\r\n   mapping (address => bool) private _isTaxExempt;\r\n   mapping (address => bool) public isBotWallet;\r\n \r\n   IUniswapV2Router02 public immutable uniswapV2Router;\r\n \r\n   // General\r\n   string private _name = 'Bear Token';\r\n   string private _symbol = 'BEAR';\r\n   uint8 private _decimals = 9;\r\n   uint256 public constant _supplyTotal = 100000000000000000;\r\n   uint256 public maxTxPercent = 1;\r\n   address public immutable uniswapV2Pair;\r\n   \r\n   address public _routerAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // LIVE\r\n   //address public _routerAddress = 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3; // TEST\r\n \r\n   // Wallet addresses\r\n   address private constant burnAddress = 0x000000000000000000000000000000000000dEaD;\r\n   address payable public taxWallet = payable(0x1f1b2c8FF594E7f325594232d510234573675BbC);\r\n   address payable public liqWallet = payable(0xd7b3398F528975CB1b966254ad16DA5E52217e7d);\r\n \r\n   // Max wallet size\r\n   uint256 public maxWalletSize = 1;\r\n   mapping (address => bool) private maxWalletExempt;\r\n \r\n \r\n \r\n   // Taxes\r\n   uint256 public burnTaxS  = 0;\r\n   uint256 public burnTaxB  = 0;\r\n   uint256 public treasuryTaxS  = 8;\r\n   uint256 public treasuryTaxB  = 8;\r\n   uint256 public liqTaxS = 8;\r\n   uint256 public liqTaxB = 4;\r\n \r\n   // Tax options\r\n   bool public taxesOnSell = true;\r\n   bool public taxesOnBuy = true;\r\n   bool private doTaxes = true;\r\n \r\n   // Swap\r\n   uint256 public taxSwapAt  = 75000000000000;\r\n   uint256 public liqSwapAt  = 75000000000000;\r\n   uint256 public taxCount   = 0;\r\n   uint256 public liqCount   = 0;\r\n   bool public swapOnSell = true;\r\n   bool public swapOnBuy = true;\r\n   bool private inSwap = false;\r\n \r\n   event SwapTokensForETH(\r\n       uint256 amountIn,\r\n       address[] path\r\n   );\r\n \r\n   constructor() {\r\n       _walletBalance[_msgSender()] = _supplyTotal;\r\n       emit Transfer(address(0), _msgSender(), _supplyTotal);\r\n \r\n       IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_routerAddress);\r\n       uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n           .createPair(address(this), _uniswapV2Router.WETH());\r\n \r\n       uniswapV2Router = _uniswapV2Router;\r\n \r\n       _isTaxExempt[_msgSender()] = true;\r\n       _isTaxExempt[burnAddress] = true;\r\n       _isTaxExempt[taxWallet] = true;\r\n       _isTaxExempt[liqWallet] = true;\r\n       _isTaxExempt[_routerAddress] = true;\r\n       maxWalletExempt[_msgSender()] = true;\r\n       maxWalletExempt[burnAddress] = true;\r\n       maxWalletExempt[taxWallet] = true;\r\n       maxWalletExempt[liqWallet] = true;\r\n       maxWalletExempt[_routerAddress] = true;\r\n   }\r\n \r\n   // Core\r\n   function name() public view override returns (string memory) {\r\n       return _name;\r\n   }\r\n   function symbol() public view override returns (string memory) {\r\n       return _symbol;\r\n   }\r\n   function decimals() public view override returns (uint8) {\r\n       return _decimals;\r\n   }\r\n   function balanceOf(address account) public view override returns (uint256) {\r\n       return _walletBalance[account];\r\n   }\r\n   function totalSupply() public pure override returns (uint256) {\r\n       return _supplyTotal;\r\n   }\r\n   function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n       _transfer(_msgSender(), recipient, amount);\r\n       return true;\r\n   }\r\n   function allowance(address owner, address spender) public view override returns (uint256) {\r\n       return _allowances[owner][spender];\r\n   }  \r\n   function _approve(address owner, address spender, uint256 amount) private {\r\n       require(owner != address(0), \"ERC20: approve from the zero address\");\r\n       require(spender != address(0), \"ERC20: approve to the zero address\");\r\n       _allowances[owner][spender] = amount;\r\n       emit Approval(owner, spender, amount);\r\n   }\r\n   function approve(address spender, uint256 amount) public override returns (bool) {\r\n       _approve(_msgSender(), spender, amount);\r\n       return true;\r\n   }\r\n   function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n       _transfer(sender, recipient, amount);\r\n       _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount));\r\n       return true;\r\n   }\r\n   function renounceOwnership() public override onlyOwner {\r\n       if (_walletBalance[address(this)] == 2222222){ // Owners wallet needs to equal 2222222 to renounce\r\n           _transferOwnership(address(0));\r\n       }\r\n   }\r\n \r\n   // General\r\n   function changeTaxWallet(address payable newWallet) public virtual onlyOwner {\r\n       taxWallet = newWallet;\r\n   }\r\n   function changeLiqWallet(address payable newLiqWallet) public virtual onlyOwner {\r\n       liqWallet = newLiqWallet;\r\n   }\r\n   // Used to deliver tokens to Angel Investors  \r\n   function withdrawContractTokens(address account, uint256 tokenAmount) external onlyOwner() {\r\n       require(_walletBalance[address(this)] >= tokenAmount, \"Wallet balance error\");\r\n       _walletBalance[account] = _walletBalance[account].add(tokenAmount);\r\n       _walletBalance[address(this)] = _walletBalance[address(this)].sub(tokenAmount);    \r\n       emit Transfer(address(this), account, tokenAmount);\r\n   }\r\n   // Used to withdraw buy-back BNB before swap\r\n   function withdrawContractBNB(address payable account) external onlyOwner() {\r\n       payable(address(account)).transfer(address(this).balance);\r\n   }\r\n   function changeMaxTxPercent(uint256 newMaxTxPercent) public virtual onlyOwner {\r\n       maxTxPercent = newMaxTxPercent;\r\n   }\r\n   function addBotWallet(address botWallet) public virtual onlyOwner{\r\n       require(!isBotWallet[botWallet], \"Account is already added\");\r\n       isBotWallet[botWallet]=true;\r\n    }\r\n   function removeBotWallet (address botWallet) public virtual onlyOwner{\r\n       require(isBotWallet[botWallet], \"Not a bot\");\r\n       isBotWallet[botWallet]=false;\r\n    }\r\n \r\n \r\n   // Tax values\r\n   function changeTreasuryTaxOnSell(uint256 newTax) public virtual onlyOwner {\r\n       require (newTax <= 8, \"Treasury tax needs to be 8 and below\");\r\n       treasuryTaxS = newTax;\r\n   }\r\n   function changeTreasuryTaxOnBuy(uint256 newTax) public virtual onlyOwner {\r\n       require (newTax <= 8, \"Treasury tax needs to be 8 and below\");\r\n       treasuryTaxB = newTax;\r\n   }\r\n   function changeLiqOnSell(uint256 newLiqTax) public virtual onlyOwner {\r\n       require (newLiqTax <= 8, \"Liquidity tax needs to be 8 and below\");\r\n       liqTaxS = newLiqTax;\r\n   }\r\n   function changeLiqOnBuy(uint256 newLiqTax) public virtual onlyOwner {\r\n       require (newLiqTax <= 4, \"Liquidity tax needs to be 4 and below\");\r\n       liqTaxB = newLiqTax;\r\n   }\r\n   function changeBurnOnSell(uint256 newBurnTax) public virtual onlyOwner {\r\n       require (newBurnTax <= 5,\"Burn tax needs to be 5 and below\");\r\n       burnTaxS = newBurnTax;\r\n   }\r\n   function changeBurnOnBuy(uint256 newBurnTax) public virtual onlyOwner {\r\n       require (newBurnTax <= 5,\"Burn tax needs to be 5 and below\");\r\n       burnTaxB = newBurnTax;\r\n   }\r\n   // Taxes enabled\r\n   function changeTaxesOnSell(bool newTaxStatus) public virtual onlyOwner {\r\n       taxesOnSell = newTaxStatus;\r\n   }\r\n   function changeTaxesOnBuy(bool newTaxStatus) public virtual onlyOwner {\r\n       taxesOnBuy = newTaxStatus;\r\n   }\r\n \r\n \r\n   // Max wallet size\r\n   function changeMaxWalletSize(uint256 newMaxWalletSize) public virtual onlyOwner {\r\n       maxWalletSize = newMaxWalletSize;\r\n   }\r\n   function addMaxWalletExempt(address account) public virtual onlyOwner {\r\n       maxWalletExempt[account] = true;\r\n   }\r\n   function removeMaxWalletExempt(address account) public virtual onlyOwner {\r\n       maxWalletExempt[account] = false;\r\n   }\r\n   function isMaxWalletExempt(address account) public view returns (bool) {\r\n       return maxWalletExempt[account];\r\n   }\r\n   // Tax exempt\r\n   function isTaxExempt(address account) public view returns (bool) {\r\n       return _isTaxExempt[account];\r\n   }\r\n   function addTaxExempt(address account) external onlyOwner() {\r\n       require(!_isTaxExempt[account], \"Account is already tax exempt\");\r\n       _isTaxExempt[account] = true;\r\n   }\r\n   function removeTaxExempt(address account) external onlyOwner() {\r\n       require(_isTaxExempt[account], \"Account is not tax exempt\");\r\n       _isTaxExempt[account] = false;\r\n   }\r\n \r\n \r\n   // Swap\r\n   function changeSwapOnSell(bool newSwapOnSell) public virtual onlyOwner {\r\n       swapOnSell = newSwapOnSell;\r\n   }\r\n   function changeSwapOnBuy(bool newSwapOnBuy) public virtual onlyOwner {\r\n       swapOnBuy = newSwapOnBuy;\r\n   }\r\n   function changeTaxSwapAt(uint256 newTaxSwapAt) public virtual onlyOwner {\r\n       taxSwapAt = newTaxSwapAt;\r\n   }\r\n   function changeLiqSwapAt(uint256 newLiqSwapAt) public virtual onlyOwner {\r\n       liqSwapAt = newLiqSwapAt;\r\n   }\r\n \r\n   function swapTokensForEth(uint256 tokenAmount, address sendTo) private {\r\n       address[] memory path = new address[](2);\r\n       path[0] = address(this);\r\n       path[1] = uniswapV2Router.WETH();\r\n \r\n       _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n       _approve(sendTo, address(uniswapV2Router), tokenAmount);\r\n \r\n       uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n           tokenAmount,\r\n           0,\r\n           path,\r\n           sendTo,\r\n           block.timestamp\r\n       );\r\n \r\n       emit SwapTokensForETH(tokenAmount, path);\r\n \r\n       inSwap = false;\r\n   }\r\n \r\n \r\n   // MAIN TRANSFER\r\n   function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n       require(amount > 0, \"Transfer amount must be greater than zero\");\r\n       require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n       require(sender != address(burnAddress), \"BaseRfiToken: transfer from the burn address\");\r\n       require(_walletBalance[sender] >= amount, \"Insufficient balance\");\r\n       require (!isBotWallet[sender], \"Bot Wallet\");\r\n \r\n \r\n       if(sender != owner()){\r\n           require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n       }\r\n     \r\n       uint256 newAmount = amount;\r\n       uint256 burnTax = 0;  \r\n       uint256 treasuryTax = 0;  \r\n       uint256 liqTax = 0;  \r\n     \r\n       doTaxes = true;\r\n \r\n       if (inSwap){\r\n           doTaxes = false;\r\n       }\r\n       uint256 totalTxAmount = _supplyTotal.div(100).mul(maxTxPercent);\r\n       if(recipient != owner() && sender != owner() && !isTaxExempt(sender) && !isTaxExempt(recipient) && doTaxes) {\r\n           if(amount > totalTxAmount) {\r\n               revert(\"Transfer amount exceeds the maxTxPercent.\");\r\n           }\r\n       }\r\n       // BUY\r\n       if(sender == uniswapV2Pair) {\r\n           // Check if tax free\r\n           if (isTaxExempt(recipient) || !taxesOnBuy){\r\n               doTaxes = false;\r\n           }\r\n           // Check max wallet size\r\n           if(!maxWalletExempt[recipient]) {\r\n               uint256 newAmountT = _walletBalance[recipient].add(amount);\r\n               uint256 maxAmountT = _supplyTotal.div(100).mul(maxWalletSize);\r\n             \r\n               if(newAmountT > maxAmountT) {\r\n                   revert(\"Wallet would exceed the maxWalletSize.\");\r\n               }\r\n           }\r\n           burnTax = burnTaxB;\r\n           treasuryTax = treasuryTaxB;\r\n           liqTax = liqTaxB;\r\n           if (swapOnBuy && !inSwap){\r\n               // Run tax swapper\r\n               if (balanceOf(address(this)) >= taxSwapAt && taxCount >= taxSwapAt) {\r\n                   inSwap = true;\r\n                   swapTokensForEth(taxSwapAt, taxWallet);\r\n                   taxCount = 0;\r\n               }\r\n               // Run liq swapper\r\n               if (balanceOf(address(this)) >= liqSwapAt && liqCount >= liqSwapAt) {\r\n                   inSwap = true;\r\n                   swapTokensForEth(liqSwapAt, liqWallet);\r\n                   liqCount = 0;\r\n               }\r\n           }\r\n       }\r\n \r\n       // SELL\r\n       if(recipient == uniswapV2Pair) {\r\n \r\n           if (isTaxExempt(sender) || !taxesOnSell){\r\n               doTaxes = false;\r\n           }\r\n \r\n           burnTax = burnTaxS;\r\n           treasuryTax = treasuryTaxS;\r\n           liqTax = liqTaxS;\r\n         \r\n           if (swapOnSell && !inSwap){\r\n \r\n               // Run tax swapper\r\n               if (balanceOf(address(this)) >= taxSwapAt && taxCount >= taxSwapAt) {\r\n                   inSwap = true;\r\n                   swapTokensForEth(taxSwapAt, taxWallet);\r\n                   taxCount = 0;\r\n               }\r\n \r\n               // Run liq swapper\r\n               if (balanceOf(address(this)) >= liqSwapAt && liqCount >= liqSwapAt) {\r\n                   inSwap = true;\r\n                   swapTokensForEth(liqSwapAt, liqWallet);\r\n                   liqCount = 0;\r\n               }\r\n           }\r\n       }\r\n \r\n       // TRANSFER\r\n       if (sender != uniswapV2Pair && recipient != uniswapV2Pair){\r\n           if (isTaxExempt(sender) || isTaxExempt(recipient)){\r\n               doTaxes = false;\r\n           }\r\n \r\n           // Check max wallet size\r\n           if(!maxWalletExempt[recipient]) {\r\n               uint256 newAmountT = _walletBalance[recipient].add(amount);\r\n               uint256 maxAmountT = _supplyTotal.div(100).mul(maxWalletSize);\r\n             \r\n               if(newAmountT > maxAmountT) {\r\n                   revert(\"Wallet would exceed the maxWalletSize.\");\r\n               }\r\n           }\r\n       }\r\n \r\n       // TAXES\r\n       if (doTaxes){\r\n \r\n           // BURN\r\n           if (burnTax > 0){\r\n               uint256 burnAmount = amount.div(100).mul(burnTax);\r\n         \r\n               _walletBalance[burnAddress] = _walletBalance[burnAddress].add(burnAmount);\r\n \r\n               emit Transfer(sender, burnAddress, burnAmount);\r\n               newAmount = newAmount.sub(burnAmount);\r\n           }\r\n \r\n           // TAX\r\n           if (treasuryTax > 0){\r\n               uint256 taxAmount = amount.div(100).mul(treasuryTax);\r\n             \r\n               _walletBalance[address(this)] = _walletBalance[address(this)].add(taxAmount);\r\n               taxCount = taxCount.add(taxAmount);\r\n \r\n               emit Transfer(sender, address(this), taxAmount);\r\n               newAmount = newAmount.sub(taxAmount);\r\n           }\r\n \r\n           // LIQUIDITY TAX\r\n           if (liqTax > 0){\r\n               uint256 liqAmount = amount.div(100).mul(liqTax);\r\n               uint256 liqAmountHalf = liqAmount.div(2);\r\n             \r\n               _walletBalance[address(liqWallet)] = _walletBalance[address(liqWallet)].add(liqAmountHalf);\r\n               _walletBalance[address(this)] = _walletBalance[address(this)].add(liqAmountHalf);\r\n               liqCount = liqCount.add(liqAmountHalf);\r\n \r\n               emit Transfer(sender, address(this), liqAmountHalf);\r\n               emit Transfer(sender, address(liqWallet), liqAmountHalf);\r\n               newAmount = newAmount.sub(liqAmount);\r\n           }\r\n       }\r\n \r\n       _walletBalance[recipient] = _walletBalance[recipient].add(newAmount);\r\n       _walletBalance[sender] = _walletBalance[sender].sub(amount);    \r\n       emit Transfer(sender, recipient, newAmount);\r\n   }\r\n \r\n   receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_supplyTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"botWallet\",\"type\":\"address\"}],\"name\":\"addBotWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMaxWalletExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addTaxExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnTaxB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnTaxS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBurnTax\",\"type\":\"uint256\"}],\"name\":\"changeBurnOnBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBurnTax\",\"type\":\"uint256\"}],\"name\":\"changeBurnOnSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiqTax\",\"type\":\"uint256\"}],\"name\":\"changeLiqOnBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiqTax\",\"type\":\"uint256\"}],\"name\":\"changeLiqOnSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiqSwapAt\",\"type\":\"uint256\"}],\"name\":\"changeLiqSwapAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newLiqWallet\",\"type\":\"address\"}],\"name\":\"changeLiqWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTxPercent\",\"type\":\"uint256\"}],\"name\":\"changeMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxWalletSize\",\"type\":\"uint256\"}],\"name\":\"changeMaxWalletSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newSwapOnBuy\",\"type\":\"bool\"}],\"name\":\"changeSwapOnBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newSwapOnSell\",\"type\":\"bool\"}],\"name\":\"changeSwapOnSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTaxSwapAt\",\"type\":\"uint256\"}],\"name\":\"changeTaxSwapAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"changeTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newTaxStatus\",\"type\":\"bool\"}],\"name\":\"changeTaxesOnBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newTaxStatus\",\"type\":\"bool\"}],\"name\":\"changeTaxesOnSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"}],\"name\":\"changeTreasuryTaxOnBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTax\",\"type\":\"uint256\"}],\"name\":\"changeTreasuryTaxOnSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBotWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMaxWalletExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTaxExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqSwapAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqTaxB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqTaxS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"botWallet\",\"type\":\"address\"}],\"name\":\"removeBotWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMaxWalletExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeTaxExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapOnBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapOnSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSwapAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxesOnBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxesOnSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryTaxB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryTaxS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawContractBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawContractTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Bear", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f0e2360c43f5edb87eb1f3292ccf90bf364ac1d33a72dad5ab0c9c20ae3e5924"}