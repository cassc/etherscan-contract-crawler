{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.13;\r\n\r\ninterface IBEP20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface Rewards {\r\n    function setDistributionCriteria(uint256 _minPeriod, uint256 _minDistribution) external;\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit() external payable;\r\n    function process(uint256 gas) external;\r\n    function myRewards(address shareholder) external;\r\n}\r\n\r\ncontract ClownRewarder is Rewards {\r\n\r\n    address _token;\r\n    address private rewardToken;\r\n    string private rewardTicker;\r\n    uint8 private rewardDecimals;\r\n\r\n    IDEXRouter router;\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    address[] shareholders;\r\n    mapping (address => uint256) shareholderIndexes;\r\n    mapping (address => uint256) shareholderClaims;\r\n    mapping (address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalRewards;\r\n    uint256 public totalDistributed;\r\n    uint256 public rewardsPerShare;\r\n    uint256 public rewardsPerShareAccuracyFactor = 10 ** 36;\r\n\r\n    uint256 public minPeriod = 30 minutes;\r\n    uint256 public minDistribution = 0 * (10 ** 9);\r\n\r\n    uint256 public currentIndex;\r\n    bool initialized;\r\n\r\n    modifier initialization() {\r\n        require(!initialized);\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token); _;\r\n    }\r\n\r\n    constructor () {\r\n        _token = msg.sender;\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        rewardToken = 0x55d398326f99059fF775485246999027B3197955;\r\n    \trewardTicker = \"BUSD-T\";\r\n        rewardDecimals = 18;\r\n    }\r\n    \r\n    receive() external payable {\r\n        deposit();\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 newMinPeriod, uint256 newMinDistribution) external override onlyToken {\r\n        minPeriod = newMinPeriod;\r\n        minDistribution = newMinDistribution;\r\n    } \r\n\r\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n\r\n        if(shares[shareholder].amount > 0){\r\n            distributeReward(shareholder);\r\n        }\r\n\r\n        if(amount > 0 && shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n        }else if(amount == 0 && shares[shareholder].amount > 0){\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares - (shares[shareholder].amount) + amount;\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeRewards(shares[shareholder].amount);\r\n    }\r\n\r\n    function deposit() public payable override {\r\n\r\n        uint256 balanceBefore = IBEP20(rewardToken).balanceOf(address(this));\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(rewardToken);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 amount = IBEP20(rewardToken).balanceOf(address(this)) - balanceBefore;\r\n        totalRewards = totalRewards + amount;\r\n        rewardsPerShare = rewardsPerShare + (rewardsPerShareAccuracyFactor * amount / totalShares);\r\n    }\r\n    \r\n    function process(uint256 gas) external override {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if(shareholderCount == 0) { return; }\r\n\r\n        uint256 iterations = 0;\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n\r\n            if(currentIndex >= shareholderCount){ currentIndex = 0; }\r\n\r\n            if(shouldDistribute(shareholders[currentIndex])){\r\n                distributeReward(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n    \r\n    function shouldDistribute(address shareholder) public view returns (bool) {\r\n        return shareholderClaims[shareholder] + minPeriod < block.timestamp\r\n                && getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function distributeReward(address shareholder) internal {\r\n        if(shares[shareholder].amount == 0){ return; }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        if(amount > 0){\r\n            totalDistributed = totalDistributed + amount;\r\n            IBEP20(rewardToken).transfer(shareholder, amount);\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised + amount;\r\n            shares[shareholder].totalExcluded = getCumulativeRewards(shares[shareholder].amount);\r\n        }\r\n    }\r\n    \r\n    function myRewards(address shareholder) external override onlyToken {\r\n        distributeReward(shareholder);\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n\r\n        uint256 shareholderTotalRewards = getCumulativeRewards(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if(shareholderTotalRewards <= shareholderTotalExcluded){ return 0; }\r\n\r\n        return shareholderTotalRewards - shareholderTotalExcluded;\r\n    }\r\n\r\n    function getCumulativeRewards(uint256 share) internal view returns (uint256) {\r\n        return share * rewardsPerShare / rewardsPerShareAccuracyFactor;\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n\r\n}\r\n\r\ncontract KrustyTheClown is IBEP20, Ownable {\r\n\r\n    address private WETH;\r\n    address private rewardToken = 0x55d398326f99059fF775485246999027B3197955;\r\n    string private rewardTicker = \"BUSD-T\";\r\n    uint8 private rewardDecimals = 18;\r\n\r\n    string private constant _name = \"Krusty The Clown\";\r\n    string private constant _symbol = \"KRUSTY\";\r\n    uint8 private constant _decimals = 18;\r\n    \r\n    uint256 _totalSupply = 1 * 10**12 * (10 ** _decimals);\r\n    uint256 maxTx = 1 * 10**10 * (10 ** _decimals);\r\n    uint256 maxWallet = 3 * 10**10 * (10 ** _decimals);\r\n\r\n    uint256 public swapThreshold = 25 * 10**8 * (10 ** _decimals);\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => uint256) private cooldown;\r\n\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    uint[3] taxesCollected = [0, 0, 0];\r\n\r\n    mapping (address => bool) public isFeeExempt;\r\n    mapping (address => bool) public isTxLimitExempt;\r\n    mapping (address => bool) public isDividendExempt;\r\n    mapping (address => bool) public isWltExempt;\r\n\r\n    uint256 public launchedAt;\r\n\r\n    // All fees are in basis points (100 = 1%)\r\n    uint256 private buyMkt = 800;\r\n    uint256 private sellMkt = 800;\r\n    uint256 private buyLP = 200;\r\n    uint256 private sellLP = 200;\r\n    uint256 private buyRewards = 0;\r\n    uint256 private sellRewards = 0;\r\n\r\n    uint256 _baseBuyFee = buyMkt + buyLP + buyRewards;\r\n    uint256 _baseSellFee = sellMkt + sellLP + sellRewards;\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n    address public factory;\r\n    address public liquidityPool = DEAD;\r\n    address public developmentWallet = payable(0x3447EF4cB027b0bBe775e56Da61cf5Dc0522ecE2);\r\n\r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public tradingOpen = false;\r\n    \r\n    ClownRewarder public clownRewarder;\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    constructor ()  {\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n            \r\n        WETH = router.WETH();\r\n        \r\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\r\n        \r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n\r\n        clownRewarder = new ClownRewarder();\r\n        \r\n        isFeeExempt[owner()] = true;\r\n        isFeeExempt[developmentWallet] = true;          \r\n\r\n        isDividendExempt[pair] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[developmentWallet] = true;\r\n        isDividendExempt[DEAD] = true;\r\n        isDividendExempt[ZERO] = true;\r\n\r\n        isTxLimitExempt[owner()] = true;\r\n        isTxLimitExempt[pair] = true;\r\n        isTxLimitExempt[DEAD] = true;\r\n        isTxLimitExempt[ZERO] = true;\r\n        isTxLimitExempt[developmentWallet] = true;   \r\n\r\n    \tisWltExempt[owner()] = true;\r\n    \tisWltExempt[DEAD] = true;\r\n    \tisWltExempt[ZERO] = true;\r\n    \tisWltExempt[developmentWallet] = true;\r\n\r\n        _balances[owner()] = _totalSupply;\r\n    \r\n        emit Transfer(address(0), owner(), _totalSupply);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function _setIsDividendExempt(address holder, bool exempt) internal {\r\n        require(holder != address(this) && holder != pair, \"Pair or Contract must be Exempt\");\r\n        isDividendExempt[holder] = exempt;\r\n        if(exempt){\r\n            clownRewarder.setShare(holder, 0);\r\n        }else{\r\n            clownRewarder.setShare(holder, _balances[holder]);\r\n        }\r\n    }\r\n\r\n    function changeIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n    \r\n    function changeIsWltExempt(address holder, bool exempt) external onlyOwner {\r\n        isWltExempt[holder] = exempt;\r\n    }\r\n\r\n    function changeIsTxLimitExempt(address holder, bool exempt) external onlyOwner {      \r\n        isTxLimitExempt[holder] = exempt;\r\n    }\r\n\r\n    function fullLaunch() external onlyOwner {\r\n        launchedAt = block.number;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    function updateBuyFees(uint256 newBuyMktFee, uint256 newBuyLpFee, uint256 newBuyRewardFee) public onlyOwner {\r\n\t    require((newBuyMktFee + newBuyLpFee + newBuyRewardFee) <= 1000, \"Total fees cannot be more than 10%\");\r\n\t    buyMkt = newBuyMktFee;\r\n\t    buyLP = newBuyLpFee;\r\n\t    buyRewards = newBuyRewardFee;\r\n    }\r\n\r\n    function updateSellFees(uint256 newSellMktFee, uint256 newSellLpFee, uint256 newSellRewardFee) public onlyOwner {\r\n\t    require((newSellMktFee + newSellLpFee + newSellRewardFee) <= 1000, \"Total fees cannot be more than 10%\");\r\n\t    sellMkt = newSellMktFee;\r\n\t    sellLP = newSellLpFee;\r\n\t    sellRewards = newSellRewardFee;\r\n    }\r\n\r\n    function changeTxLimit(uint256 newLimit) external onlyOwner {\r\n\trequire(newLimit >= 10000 * _decimals, \"Limit too Low\");\r\n        maxTx = newLimit;\r\n    }\r\n\r\n    function changeWalletLimit(uint256 newLimit) external onlyOwner {\r\n\trequire(newLimit >= 10000 * _decimals, \"Limit too Low\");\r\n        maxWallet  = newLimit;\r\n    }\r\n\r\n    function setDevelopmentWallet(address payable newDevelopmentWallet) external onlyOwner {\r\n        developmentWallet = payable(newDevelopmentWallet);\r\n    }  \r\n\r\n    function setLiquidityPool(address newLiquidityPool) external onlyOwner {\r\n        require(newLiquidityPool != address(0));\r\n        liquidityPool = newLiquidityPool;\r\n    }\r\n\r\n    function changeSwapBackSettings(bool enableSwapBack, uint256 newSwapBackLimit) external onlyOwner {\r\n        swapAndLiquifyEnabled  = enableSwapBack;\r\n        swapThreshold = newSwapBackLimit;\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 newMinPeriod, uint256 newMinDistribution) external onlyOwner {\r\n        clownRewarder.setDistributionCriteria(newMinPeriod, newMinDistribution);        \r\n    }\r\n\r\n    function setIsDividendExempt(address holder, bool exempt) external onlyOwner {\r\n        _setIsDividendExempt(holder, exempt);\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply - balanceOf(DEAD) - balanceOf(ZERO);\r\n    }\r\n\r\n    function rewardTokenInfo() external view returns (address, string memory, uint8) \r\n        {return (rewardToken, rewardTicker, rewardDecimals);}\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner(); }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    function maxTransaction() external view returns (uint256) {return maxTx; }\r\n    function maxWalletAmt() external view returns (uint256) {return maxWallet; }\r\n\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transfer(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if (sender != owner() && recipient != owner()) require(tradingOpen, \"Trading not active\");\r\n        if(inSwapAndLiquify){ return _basicTransfer(sender, recipient, amount); }\r\n        require(amount <= maxTx || isTxLimitExempt[sender], \"Exceeds Tx Limit\");\r\n        if(!isTxLimitExempt[recipient])\r\n        {\r\n            require(_balances[recipient] + amount <= maxWallet || isWltExempt[sender], \"Exceeds Max Wallet\");\r\n        }\r\n        if(msg.sender != pair && !inSwapAndLiquify && swapAndLiquifyEnabled && _balances[address(this)] >= swapThreshold){ swapBack(); }\r\n\t    if(sender != pair && recipient != pair) { return _basicTransfer(sender, recipient, amount); }\r\n\r\n        _balances[sender] = _balances[sender] - amount;\r\n        \r\n        uint256 finalAmount = !isFeeExempt[sender] && !isFeeExempt[recipient] ? takeFee(sender, recipient, amount) : amount;\r\n        _balances[recipient] = _balances[recipient] + finalAmount;\r\n\r\n        // Dividend tracker\r\n        if(!isDividendExempt[sender]) {\r\n            try clownRewarder.setShare(sender, _balances[sender]) {} catch {}\r\n        }\r\n\r\n        if(!isDividendExempt[recipient]) {\r\n            try clownRewarder.setShare(recipient, _balances[recipient]) {} catch {} \r\n        }\r\n\r\n        emit Transfer(sender, recipient, finalAmount);\r\n        return true;\r\n    }    \r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender] - amount;\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }  \r\n    \r\n    function addTaxCollected(uint mkt, uint lp, uint rewards) internal {\r\n        taxesCollected[0] += mkt;\r\n        taxesCollected[1] += lp;\r\n\t    taxesCollected[2] += rewards;\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        \r\n        uint256 mktTaxB = amount * buyMkt / 10000;\r\n\t    uint256 mktTaxS = amount * sellMkt / 10000;\r\n        uint256 lpTaxB = amount * buyLP / 10000;\r\n\t    uint256 lpTaxS = amount * sellLP / 10000;\r\n\t    uint256 rewardB = amount * buyRewards / 10000;\r\n\t    uint256 rewardS = amount * sellRewards / 10000;\r\n        uint256 taxToGet;\r\n\r\n\t    if(sender == pair && recipient != address(pair) && !isFeeExempt[recipient]) {\r\n            taxToGet = mktTaxB + lpTaxB + rewardB;\r\n\t        addTaxCollected(mktTaxB, lpTaxB, rewardB);\r\n\t    }\r\n\r\n\t    if(!inSwapAndLiquify && sender != pair && tradingOpen) {\r\n\t        taxToGet = mktTaxS + lpTaxS + rewardS;\r\n\t        addTaxCollected(mktTaxS, lpTaxS, rewardS);\r\n\t    }\r\n\r\n        _balances[address(this)] = _balances[address(this)] + taxToGet;\r\n        emit Transfer(sender, address(this), taxToGet);\r\n\r\n        return amount - taxToGet;\r\n    }\r\n    \r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        approve(address(this), tokenAmount);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\r\n        router.addLiquidityETH{value: ETHAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            liquidityPool,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack() internal lockTheSwap {\r\n    \r\n        uint256 tokenBalance = _balances[address(this)];\r\n        uint256 _totalCollected = taxesCollected[0] + taxesCollected[1] + taxesCollected[2];\r\n        uint256 mktShare = taxesCollected[0];\r\n        uint256 lpShare = taxesCollected[1];\r\n\t    uint256 rewardShare = taxesCollected[2];\r\n        uint256 tokensForLiquidity = lpShare / 2;  \r\n        uint256 amountToSwap = tokenBalance - tokensForLiquidity;\r\n\r\n        swapTokensForETH(amountToSwap);\r\n\r\n        uint256 totalBNBBalance = address(this).balance;\r\n        uint256 BNBForDevelopment = totalBNBBalance * mktShare / _totalCollected;\r\n        uint256 BNBForLiquidity = totalBNBBalance * lpShare / _totalCollected / 2;\r\n\t    uint256 BNBForRewards = totalBNBBalance * rewardShare/ _totalCollected;\r\n      \r\n        if (totalBNBBalance > 0){\r\n            payable(developmentWallet).transfer(BNBForDevelopment);\r\n        }\r\n        \r\n        try clownRewarder.deposit{value: BNBForRewards}() {} catch {}\r\n        \r\n        if (tokensForLiquidity > 0){\r\n            addLiquidity(tokensForLiquidity, BNBForLiquidity);\r\n        }\r\n    }\r\n\r\n    function manualSwapBack() external onlyOwner {\r\n        swapBack();\r\n    }\r\n\r\n    function clearStuckBNB() external onlyOwner {\r\n        uint256 contractBNBBalance = address(this).balance;\r\n        if(contractBNBBalance > 0){          \r\n            payable(developmentWallet).transfer(contractBNBBalance);\r\n        }\r\n    }\r\n\r\n    function manualProcessGas(uint256 manualGas) external onlyOwner {\r\n\trequire(manualGas >= 200000, \"Gas too low\");\r\n        clownRewarder.process(manualGas);\r\n    }\r\n\r\n    function checkPendingReflections(address shareholder) external view returns (uint256) {\r\n        return clownRewarder.getUnpaidEarnings(shareholder);\r\n    }\r\n\r\n    function getRewards() external {\r\n        clownRewarder.myRewards(msg.sender);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"changeIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"changeIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"changeIsWltExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enableSwapBack\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newSwapBackLimit\",\"type\":\"uint256\"}],\"name\":\"changeSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"changeTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"changeWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"checkPendingReflections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clownRewarder\",\"outputs\":[{\"internalType\":\"contract ClownRewarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fullLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDividendExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWltExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"manualGas\",\"type\":\"uint256\"}],\"name\":\"manualProcessGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newDevelopmentWallet\",\"type\":\"address\"}],\"name\":\"setDevelopmentWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMinDistribution\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityPool\",\"type\":\"address\"}],\"name\":\"setLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyMktFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBuyLpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBuyRewardFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSellMktFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellLpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellRewardFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "KrustyTheClown", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9991a07ffc7b57c3e8b16208ed11e2a09bf69a1603ef8ad8a7124cab37c446cd"}