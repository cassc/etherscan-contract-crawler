{"SourceCode": "pragma solidity 0.5.10; \r\n\r\ncontract owned\r\n{\r\n    address public owner;\r\n    address internal newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    //the reason for this flow is to protect owners from sending ownership to unintended address due to human error\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n//*******************************************************************//\r\n//------------------         token interface        -------------------//\r\n//*******************************************************************//\r\n\r\n\r\ninterface ERC20In {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the token decimals.\r\n   */\r\n  function decimals() external view returns (uint8);\r\n\r\n  /**\r\n   * @dev Returns the token symbol.\r\n   */\r\n  function symbol() external view returns (string memory);\r\n\r\n  /**\r\n  * @dev Returns the token name.\r\n  */\r\n  function name() external view returns (string memory);\r\n\r\n  /**\r\n   * @dev Returns the bep token owner.\r\n   */\r\n  function getOwner() external view returns (address);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n \r\n\r\ncontract sevenFx is owned {\r\n\r\n\r\n    struct verFiedUser {\r\n\r\n        uint verfiedAmount;\r\n        uint8 userStatus;      // it will indicate the state of users || 0 =  inactive || 1= deposited || 2 = claim || 3 = expire \r\n        bool isLocked;\r\n        uint rewardFund;\r\n        uint userPayValidity;\r\n        bool isUserConnect;\r\n        uint payPercent;\r\n\r\n    }\r\n\r\n\r\n    address public tokenAddress;\r\n\r\n\r\n    mapping(address=>verFiedUser) public sevenFxUsers;\r\n\r\n    uint claimPeriod = 45 days;\r\n\r\n\r\n    constructor() public {\r\n\r\n\r\n    }\r\n\r\n    function addSevenFxWallet (address _wallet, uint _verfiedAmount, uint _payPercent) external onlyOwner returns(bool) {\r\n\r\n        require(_wallet!=address(0) && _verfiedAmount!=0 && sevenFxUsers[_wallet].verfiedAmount==0,\"invalid Input or you may have already entry in wallet\");\r\n        require(_payPercent>0 && _payPercent<100,\"Invalid Percent rate\");\r\n        sevenFxUsers[_wallet].verfiedAmount=_verfiedAmount;\r\n        sevenFxUsers[_wallet].payPercent=_payPercent;\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    function addTokenAddress(address _wallet) onlyOwner external {\r\n\r\n        require(_wallet!=address(0),\"invalid address\");\r\n\r\n        tokenAddress = _wallet;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    function connectUser() external {\r\n\r\n        \r\n        require(sevenFxUsers[msg.sender].isUserConnect==false,\"invalid address\");\r\n\r\n        require(sevenFxUsers[msg.sender].verfiedAmount!=0,\"user is not registered\");\r\n\r\n\r\n\r\n        sevenFxUsers[msg.sender].isUserConnect=true;\r\n\r\n        sevenFxUsers[msg.sender].userPayValidity=now+claimPeriod;  \r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    function depositFund() external returns(bool) {\r\n\r\n        uint deposAmount = sevenFxUsers[msg.sender].verfiedAmount*sevenFxUsers[msg.sender].payPercent/100;\r\n\r\n        require(deposAmount>0 ,\"invalid value\");\r\n\r\n        require(sevenFxUsers[msg.sender].userPayValidity>now,\"Deposit period expire\");\r\n\r\n          require(sevenFxUsers[msg.sender].isUserConnect==true ,\"Please connect user First\");\r\n\r\n        require(sevenFxUsers[msg.sender].verfiedAmount!=0  && sevenFxUsers[msg.sender].userStatus==0,\"user is not connected/unregistered\");\r\n\r\n\r\n             sevenFxUsers[msg.sender].userStatus=1; // deposited\r\n    \r\n             sevenFxUsers[msg.sender].rewardFund = deposAmount*10/100;\r\n\r\n\r\n        ERC20In(tokenAddress).transferFrom(msg.sender,address(this),deposAmount);   \r\n\r\n    }\r\n\r\n\r\n\r\n    // function claim \r\n\r\n\r\n    function claimFund() external {\r\n\r\n        require(sevenFxUsers[msg.sender].userStatus==1,\"Invalid user\");\r\n\r\n        require(sevenFxUsers[msg.sender].isLocked==false && sevenFxUsers[msg.sender].userPayValidity<now,\"You can't withdraw now\");\r\n        \r\n\r\n        uint growth = sevenFxUsers[msg.sender].verfiedAmount;\r\n     \r\n\r\n        sevenFxUsers[msg.sender].userStatus=2; // claimed\r\n        ERC20In(tokenAddress).transfer(msg.sender,growth);   \r\n\r\n    }\r\n\r\n\r\n    function claimReward() external {\r\n\r\n        require(sevenFxUsers[msg.sender].userStatus!=0 ,\"Invalid user\");\r\n        require(sevenFxUsers[msg.sender].rewardFund>0,\"invalid fund\");\r\n\r\n        require(sevenFxUsers[msg.sender].isLocked==false,\"You can't withdraw now\");\r\n        \r\n        uint reward = sevenFxUsers[msg.sender].rewardFund;\r\n\r\n        sevenFxUsers[msg.sender].rewardFund=0;\r\n\r\n        ERC20In(tokenAddress).transfer(msg.sender,reward);   \r\n\r\n    }\r\n\r\n\r\n    function reFillContract(uint _amount) onlyOwner external {\r\n\r\n        require(_amount>0,\"invalid amount\");\r\n\r\n        ERC20In(tokenAddress).transferFrom(msg.sender,address(this),_amount);   \r\n\r\n    }\r\n\r\n\r\n    function ownerClaim(uint _amount) onlyOwner external{\r\n\r\n            require(_amount>0,\"invalid amount\");\r\n\r\n          ERC20In(tokenAddress).transfer(msg.sender,_amount);  \r\n\r\n    }\r\n\r\n\r\n    function lockUserWallet(address user) onlyOwner external {\r\n\r\n        require(sevenFxUsers[user].isLocked==false,\"invalid amount\");\r\n\r\n        sevenFxUsers[user].isLocked=true; \r\n\r\n    }\r\n\r\n    function unlockUserWallet(address user) onlyOwner external {\r\n\r\n        require(sevenFxUsers[user].isLocked==true,\"invalid amount\");\r\n\r\n        sevenFxUsers[user].isLocked=false; \r\n\r\n    }\r\n\r\n\r\n    function setClaimPeriod(uint _time) onlyOwner external {\r\n\r\n        claimPeriod= _time;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_verfiedAmount\",\"type\":\"uint256\"},{\"name\":\"_payPercent\",\"type\":\"uint256\"}],\"name\":\"addSevenFxWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockUserWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ownerClaim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimFund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"addTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"reFillContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"depositFund\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"unlockUserWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"connectUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setClaimPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"sevenFxUsers\",\"outputs\":[{\"name\":\"verfiedAmount\",\"type\":\"uint256\"},{\"name\":\"userStatus\",\"type\":\"uint8\"},{\"name\":\"isLocked\",\"type\":\"bool\"},{\"name\":\"rewardFund\",\"type\":\"uint256\"},{\"name\":\"userPayValidity\",\"type\":\"uint256\"},{\"name\":\"isUserConnect\",\"type\":\"bool\"},{\"name\":\"payPercent\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]", "ContractName": "sevenFx", "CompilerVersion": "v0.5.10+commit.5a6ea5b1", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://927678ea68348935dacbe5ff745feed81cf1e26e4fd369c6b9d9ea4523009b12"}