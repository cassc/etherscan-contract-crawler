{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-08-24\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2021-07-16\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2021-03-11\r\n */\r\n\r\n\r\npragma solidity >=0.4.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity >=0.4.0;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n    \r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash =\r\n            0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n    \r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n    \r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n    \r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n    \r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) =\r\n            target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title SafeBEP20\r\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IBEP20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IBEP20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IBEP20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).sub(\r\n                value,\r\n                \"SafeBEP20: decreased allowance below zero\"\r\n            );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata =\r\n            address(token).functionCall(\r\n                data,\r\n                \"SafeBEP20: low-level call failed\"\r\n            );\r\n        if (returndata.length > 0) {\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeBEP20: BEP20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity >=0.4.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n    \r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity >=0.4.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\n/**\r\n * @dev Implementation of the {IBEP20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {BEP20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of BEP20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IBEP20-approve}.\r\n */\r\ncontract BEP20 is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view override returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {BEP20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"BEP20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"BEP20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\r\n     * the total supply.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `msg.sender` must be the token owner\r\n     */\r\n    function mint(uint256 amount) public onlyOwner returns (bool) {\r\n        _mint(msg.sender, amount);\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 amount) public onlyOwner  returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(\r\n            amount,\r\n            \"BEP20: transfer amount exceeds balance\"\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) public onlyOwner {\r\n        require(account != address(0), \"BEP20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"BEP20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(\r\n            amount,\r\n            \"BEP20: burn amount exceeds balance\"\r\n        );\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(\r\n            account,\r\n            _msgSender(),\r\n            _allowances[account][_msgSender()].sub(\r\n                amount,\r\n                \"BEP20: burn amount exceeds allowance\"\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\npragma solidity >=0.4.0;\r\n\r\nabstract contract ReentrancyGuard {\r\n\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ncontract AcetToken  is BEP20(\"Acet Token\", \"ACT\") {\r\n    // Success is inescapable\r\n}\r\n\r\n\r\ncontract AcetAdaptor is Ownable {\r\n    mapping (uint => Pool) public peoples;\r\n    event votedEvent(uint indexed _candidateId);\r\n    uint public candidateCount;\r\n    IBEP20 actToken;\r\n    struct Pool {\r\n        uint id;\r\n        address addr;\r\n        uint poolStatusFlag;\r\n    }\r\n    constructor(\r\n        IBEP20 _token\r\n        ) public {\r\n        candidateCount = 0;\r\n        actToken = _token;\r\n        act = AcetToken(address(_token));\r\n    }\r\n    \r\n    AcetToken act;\r\n    \r\n    function increasePool(\r\n            address _address\r\n    ) public onlyOwner{\r\n        uint checkAddress = 0;\r\n        \r\n         for (uint i = 0; i < candidateCount; i++) {\r\n              Pool storage people = peoples[i];\r\n                if (people.addr == _address) {\r\n                    checkAddress = 1;  \r\n                }\r\n        }\r\n        require(checkAddress == 0, \"Pool already exist\");\r\n        peoples[candidateCount] = Pool(candidateCount, _address, 0);\r\n        candidateCount++;\r\n    }\r\n      function get(uint _candidateId) public view returns(Pool memory) {\r\n        return peoples[_candidateId];\r\n      }\r\n      function getPeople() public view returns ( address[] memory){\r\n          address[] memory addr = new address[](candidateCount);\r\n          for (uint i = 0; i < candidateCount; i++) {\r\n              Pool storage people = peoples[i];\r\n              addr[i] = people.addr;\r\n          }\r\n          return (addr);\r\n      }\r\n      \r\n      function getPeoples(address _address) public view returns (Pool[] memory){\r\n          Pool[]    memory id = new Pool[](candidateCount);\r\n          for (uint i = 0; i < candidateCount; i++) {\r\n              Pool storage people = peoples[i];\r\n                if (people.addr == address(_address)) {\r\n                    id[i] = people;\r\n                }\r\n          }\r\n          return id;\r\n      }\r\n    \r\n    function toPool(uint _amount, uint _funtion) public {\r\n        uint checkAddress = 0;\r\n        uint checkFlagEnable = 0;\r\n         for (uint i = 0; i < candidateCount; i++) {\r\n              Pool storage people = peoples[i];\r\n                if (people.addr == msg.sender) {\r\n                    checkAddress = 1;  \r\n                    checkFlagEnable = people.poolStatusFlag;\r\n                }\r\n        }\r\n        require(checkAddress == 1, \"Pool doesn't exist\");\r\n        if (checkFlagEnable == 1) {\r\n            if (_funtion == 1) {\r\n                revert(\"Pool has been limit\");\r\n            }\r\n        }\r\n        act._mint(address(msg.sender), _amount);\r\n    }\r\n    \r\n    function toDev(uint _amount, address _address, uint _funtion) public {\r\n        uint checkAddress = 0;\r\n        uint checkFlagEnable = 0;\r\n         for (uint i = 0; i < candidateCount; i++) {\r\n              Pool storage people = peoples[i];\r\n                if (people.addr == msg.sender) {\r\n                    checkAddress = 1;\r\n                    checkFlagEnable = people.poolStatusFlag;\r\n  \r\n                }\r\n         }\r\n        require(checkAddress == 1, \"Pool doesn't exist\");\r\n        if (checkFlagEnable == 1) {\r\n            if (_funtion == 1) {\r\n                revert(\"Pool has been limit\");\r\n            }\r\n        } \r\n        act._mint(address(_address), _amount);\r\n    }\r\n    \r\n    function toBurn(uint _amount) public {\r\n         uint checkAddress = 0;\r\n         uint checkFlagEnable = 0;\r\n         for (uint i = 0; i < candidateCount; i++) {\r\n              Pool storage people = peoples[i];\r\n                if (people.addr == msg.sender) {\r\n                    checkAddress = 1;\r\n                    checkFlagEnable = people.poolStatusFlag;\r\n\r\n                }\r\n         }\r\n        require(checkAddress == 1, \"Pool doesn't exist\");\r\n        act.burn(_amount);\r\n  \r\n    }\r\n    \r\n    function updateSpecificPool(uint id, uint  status) public onlyOwner{\r\n        uint checkID = 0;\r\n        for (uint i = 0; i < candidateCount; i++) {\r\n              Pool storage people = peoples[i];\r\n                if (people.id == id) {\r\n                    checkID = 1;  \r\n                }\r\n        }\r\n        require(checkID == 1, \"ID doesn exist\");\r\n        require(status == 0 || status == 1, \"Error: The command was not found in the system\");\r\n        if (status == 1) {\r\n            peoples[id].poolStatusFlag = 1;\r\n        }else {\r\n            peoples[id].poolStatusFlag = 0;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract Pool is Ownable, ReentrancyGuard {\r\n    \r\n    using SafeMath for uint256;\r\n    using SafeBEP20 for IBEP20;\r\n    \r\n    struct Pool {\r\n        uint id;\r\n        int256 contractID;\r\n        uint256 blockStart;\r\n        uint256 blockEnd;\r\n        uint256 depositAmount;\r\n        uint256 balanceAmount;\r\n        uint256 havestBalance;\r\n        uint256 currentExtraReward;\r\n        uint256 packagePercent;\r\n        address addr;\r\n        uint256 extraRewards;\r\n        uint256 prepareRewards;\r\n        uint256 rewardPerBlock;\r\n    }\r\n    \r\n    uint256 public rewardPerBlock;\r\n    address[] accountList;\r\n    uint256 public extraRewards;\r\n    uint256 public unHarvest;\r\n    mapping(address => Pool) public poolbusd;\r\n    address[] public poolBusdList;\r\n    mapping (uint => Pool) public peoples;\r\n    event votedEvent(uint indexed _candidateId);\r\n    uint public candidateCount;\r\n    string public poolName;\r\n    IBEP20 public mainRewardsToken;\r\n    IBEP20 public mainSyrupToken;\r\n    uint public Contract1D; \r\n    uint public Contract7D;\r\n    uint public Contract30D;\r\n    uint public Contract90D;\r\n    uint public Contract180D;\r\n    uint public Contract360D;\r\n    uint public TotalBlock1D; \r\n    uint public TotalBlock7D;\r\n    uint public TotalBlock30D;\r\n    uint public TotalBlock90D;\r\n    uint public TotalBlock180D;\r\n    uint public TotalBlock360D;\r\n    address public DeployerWalletAsdress;\r\n    uint public AtLeastAmount;\r\n    uint public StakeFees;\r\n    uint public PenaltyFees;\r\n    uint public AdditionalDeployerToken;\r\n    uint public HarvestFees;\r\n    address adaptorAddress;\r\n \r\n      constructor(\r\n        IBEP20 _rewardToken,\r\n        IBEP20 _syrupToken,\r\n        address _adaptorAddress,\r\n        string memory _poolName)\r\n        public {\r\n        candidateCount = 0;\r\n        mainSyrupToken = _syrupToken;\r\n        mainRewardsToken = _rewardToken;\r\n        Contract1D = 285;\r\n        Contract7D = 2364;\r\n        Contract30D = 11450;\r\n        Contract90D = 36868;\r\n        Contract180D = 83160;\r\n        Contract360D = 207900;\r\n        TotalBlock1D = 28800;\r\n        TotalBlock7D = 201600;\r\n        TotalBlock30D = 864000;\r\n        TotalBlock90D = 2592000;\r\n        TotalBlock180D = 5184000;\r\n        TotalBlock360D = 10368000;\r\n        AtLeastAmount = 100000000000000000000;\r\n        DeployerWalletAsdress = 0xcFe0B919c10b1ABaF68E2b99B296939198bc0358;\r\n        poolName = _poolName;\r\n        StakeFees = 370;\r\n        PenaltyFees = 770;\r\n        HarvestFees = 250;\r\n        AdditionalDeployerToken = 700;\r\n        adaptorAddress = _adaptorAddress;\r\n        ad = AcetAdaptor(adaptorAddress);\r\n    }\r\n    AcetAdaptor ad;\r\n    function addHolder(\r\n        int256  _contract, \r\n        uint256  _blockStart,\r\n        uint256  _blockEnd,\r\n        uint256  _depositAmount,\r\n        uint256  _balanceAmount,\r\n        uint256  _havestBalance,\r\n        uint256  _currentExtraReward,\r\n        uint256  _packagePercent,\r\n        address  _address,\r\n        uint256  _extraRewards,\r\n        uint256  _prepareReward,\r\n        uint256 _rewardPerBlock\r\n    ) private {\r\n        peoples[candidateCount] = Pool(candidateCount, _contract, _blockStart, _blockEnd, _depositAmount, _balanceAmount, _havestBalance, _currentExtraReward, _packagePercent, _address, _extraRewards, _prepareReward, _rewardPerBlock);\r\n        candidateCount++;\r\n    }\r\n  function get(uint _candidateId) public view returns(Pool memory) {\r\n    return peoples[_candidateId];\r\n  }\r\n  function getPeople() public view returns ( address[] memory){\r\n      address[] memory addr = new address[](candidateCount);\r\n      for (uint i = 0; i < candidateCount; i++) {\r\n          Pool storage people = peoples[i];\r\n          addr[i] = people.addr;\r\n      }\r\n      return (addr);\r\n  }\r\n  \r\n  function getPeoples(address _address) public view returns (Pool[] memory){\r\n      Pool[]    memory id = new Pool[](candidateCount);\r\n      for (uint i = 0; i < candidateCount; i++) {\r\n          \r\n          Pool storage people = peoples[i];\r\n            if (people.addr == address(_address)) {\r\n                id[i] = people;\r\n            }\r\n      }\r\n      return id;\r\n  }\r\n    \r\n\r\n    function _deposit(\r\n        uint256 _packagePercent,\r\n        address _address,\r\n        uint256 blockEstimated,\r\n        uint256 _amount,\r\n        IBEP20 syrupToken,\r\n        int256 _contract\r\n    ) private {\r\n        uint256 fee = _amount.mul(StakeFees).div(100).div(100);\r\n        syrupToken.safeTransferFrom(\r\n            address(msg.sender),\r\n            DeployerWalletAsdress,\r\n            fee\r\n        );\r\n        ad.toPool(_amount.mul(_packagePercent).div(100).div(100), 1);\r\n        uint256 toDev = _amount.mul(_packagePercent).div(100).div(100);\r\n        ad.toDev(toDev.mul(AdditionalDeployerToken).div(100).div(100), DeployerWalletAsdress, 1);\r\n        syrupToken.safeTransferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            _amount - fee\r\n        );\r\n        uint256 percent = _packagePercent;\r\n        uint256 totalRewardsPrepare = _amount.mul(_packagePercent).div(100).div(100);\r\n        uint256 rewardPerBlock =\r\n        (_amount.mul(percent).div(100).div(100)).div(blockEstimated);\r\n        addHolder(\r\n            _contract, \r\n            block.number, \r\n            block.number.add(blockEstimated), \r\n            _amount, \r\n            _amount - fee, \r\n            0, \r\n            0, \r\n            percent, \r\n            address(msg.sender), \r\n            0, \r\n            totalRewardsPrepare, \r\n            rewardPerBlock);\r\n      \r\n    }\r\n\r\n    function deposit(\r\n        int256 _contract,\r\n        uint256 _amount\r\n    ) public nonReentrant {\r\n        require(_contract == 1 || _contract == 2 || _contract == 3 || _contract == 4 || _contract == 5 || _contract == 6, \"contract doesn exits\");\r\n        require(_amount >= AtLeastAmount, \"Amount inceed minimum\");\r\n        if (_contract == 1) {\r\n            _deposit(\r\n                Contract1D,\r\n                address(msg.sender),\r\n                TotalBlock1D,\r\n                _amount,\r\n                mainSyrupToken,\r\n                _contract\r\n            );\r\n        } else if (_contract == 2) {\r\n            _deposit(\r\n                Contract7D,\r\n                address(msg.sender),\r\n                TotalBlock7D,\r\n                _amount,\r\n                mainSyrupToken,\r\n                _contract\r\n            );\r\n        } else if (_contract == 3) {\r\n            _deposit(\r\n                Contract30D,\r\n                address(msg.sender),\r\n                TotalBlock30D,\r\n                _amount,\r\n                mainSyrupToken,\r\n                _contract\r\n                \r\n            );\r\n        } else if (_contract == 4) {\r\n            _deposit(\r\n                Contract90D,\r\n                address(msg.sender),\r\n                TotalBlock90D,\r\n                _amount,\r\n                mainSyrupToken,\r\n                _contract\r\n            );\r\n        } else if (_contract == 5) {\r\n            _deposit(\r\n                Contract180D,\r\n                address(msg.sender),\r\n                TotalBlock180D,\r\n                _amount,\r\n                mainSyrupToken,\r\n                _contract\r\n\r\n            );\r\n        } else {\r\n            _deposit(\r\n                Contract360D,\r\n                address(msg.sender),\r\n                TotalBlock360D,\r\n                _amount,\r\n                mainSyrupToken,\r\n                _contract\r\n            );\r\n        }\r\n    }\r\n\r\n    function _withdraw(\r\n        IBEP20 fromRewardToken,\r\n        IBEP20 syrupToken,\r\n        uint256 packagePercent,\r\n        uint256 _id\r\n    ) private {\r\n        \r\n        if (peoples[_id].blockEnd > block.number) {\r\n            uint256 penaltyAmount = peoples[_id].balanceAmount.mul(PenaltyFees).div(100).div(100);\r\n            syrupToken.safeTransfer(\r\n                DeployerWalletAsdress,\r\n                penaltyAmount\r\n            );\r\n            peoples[_id].balanceAmount = peoples[_id].balanceAmount.sub(penaltyAmount);\r\n            syrupToken.safeTransfer(address(msg.sender),  peoples[_id].balanceAmount);\r\n            uint256 rewardCalc = block.number.sub(peoples[_id].blockStart).mul(peoples[_id].rewardPerBlock);\r\n            uint256 totalReveiveReward = peoples[_id].prepareRewards.sub(peoples[_id].havestBalance).sub(rewardCalc);\r\n            fromRewardToken.safeTransfer(DeployerWalletAsdress, rewardCalc.mul(HarvestFees).div(100).div(100));\r\n            fromRewardToken.safeTransfer(address(msg.sender), rewardCalc.sub(rewardCalc.mul(HarvestFees).div(100).div(100)));\r\n            peoples[_id].blockStart = block.number;\r\n            fromRewardToken.safeTransfer(adaptorAddress, totalReveiveReward);\r\n            ad.toBurn(totalReveiveReward);\r\n                \r\n            peoples[_id].balanceAmount = 0;\r\n        }else {\r\n            syrupToken.safeTransfer(address(msg.sender), peoples[_id].balanceAmount);\r\n            peoples[_id].balanceAmount = peoples[_id].balanceAmount.sub(peoples[_id].balanceAmount);\r\n            uint256 rewardReceive;\r\n            if ( peoples[_id].blockEnd ==  peoples[_id].blockStart) {\r\n                rewardReceive = 0;\r\n            }else {\r\n                rewardReceive = peoples[_id].prepareRewards.sub(peoples[_id].havestBalance);\r\n            }\r\n            fromRewardToken.safeTransfer(DeployerWalletAsdress, rewardReceive.mul(HarvestFees).div(100).div(100));\r\n            fromRewardToken.safeTransfer(address(msg.sender), rewardReceive.sub(rewardReceive.mul(HarvestFees).div(100).div(100)));\r\n            peoples[_id].balanceAmount = 0;\r\n            if (peoples[_id].blockStart == peoples[_id].blockEnd) {\r\n                fromRewardToken.safeTransfer(adaptorAddress, peoples[_id].prepareRewards.sub(peoples[_id].havestBalance));\r\n                ad.toBurn(peoples[_id].prepareRewards.sub(peoples[_id].havestBalance));\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    function withdraw(\r\n        uint256 _id\r\n    ) public nonReentrant {\r\n        require(peoples[_id].addr == msg.sender, \"You do not own this id\");\r\n        require(peoples[_id].balanceAmount > 0, \"Not allow to transfer zero balance\");\r\n        if (peoples[_id].contractID == 1) {\r\n            _withdraw(\r\n                mainRewardsToken,\r\n                mainSyrupToken,\r\n                Contract1D,\r\n               _id\r\n            );\r\n        } else if (peoples[_id].contractID == 2) {\r\n            _withdraw(\r\n                mainRewardsToken,\r\n                mainSyrupToken,\r\n                Contract7D,\r\n                _id\r\n            );\r\n        } else if (peoples[_id].contractID == 3) {\r\n            _withdraw(\r\n                mainRewardsToken,\r\n                mainSyrupToken,\r\n                Contract30D,\r\n                _id\r\n            );\r\n        } else if (peoples[_id].contractID == 4) {\r\n            _withdraw(\r\n                mainRewardsToken,\r\n                mainSyrupToken,\r\n                Contract90D,\r\n                _id\r\n            );\r\n        } else if (peoples[_id].contractID == 5) {\r\n            _withdraw(\r\n                mainRewardsToken,\r\n                mainSyrupToken,\r\n                Contract180D,\r\n                _id\r\n            );\r\n        } else {\r\n            _withdraw(\r\n                mainRewardsToken,\r\n                mainSyrupToken,\r\n                Contract360D,\r\n                _id\r\n            );\r\n        }\r\n        \r\n        peoples[_id].balanceAmount = 0;\r\n    }\r\n\r\n    function _harvestRewards(\r\n        IBEP20 fromRewardToken,\r\n        uint256 _rewardAmount,\r\n        uint _id\r\n    ) private {\r\n        uint256 feeAmount = _rewardAmount.mul(HarvestFees).div(100).div(100);\r\n        fromRewardToken.safeTransfer(DeployerWalletAsdress, feeAmount);\r\n        fromRewardToken.safeTransfer(address(msg.sender), _rewardAmount.sub(feeAmount));\r\n        peoples[_id].havestBalance = peoples[_id].havestBalance.add(_rewardAmount);\r\n    }\r\n\r\n    function harvestRewards(uint _id) public nonReentrant {\r\n        require(peoples[_id].addr == msg.sender, \"You do not own this id\");\r\n        require(peoples[_id].balanceAmount > 0, \"Already withdraw token\");\r\n        uint256 rewards;\r\n        if (peoples[_id].blockEnd > block.number) {\r\n            rewards =\r\n            (block.number.sub(peoples[_id].blockStart)).mul(peoples[_id].rewardPerBlock);\r\n        } else {\r\n            rewards =\r\n            peoples[_id].blockEnd.sub(peoples[_id].blockStart).mul(peoples[_id].rewardPerBlock);\r\n        }\r\n        _harvestRewards(mainRewardsToken, rewards, _id);\r\n        if (block.number > peoples[_id].blockEnd) {\r\n          peoples[_id].blockStart =  peoples[_id].blockEnd;\r\n        } else {\r\n          peoples[_id].blockStart = block.number;\r\n        }\r\n    }\r\n\r\n    function currentExtraRewardSum() external view returns (uint256) {\r\n        uint256 sumExtra;\r\n        for (uint i = 0; i < candidateCount; i++) {\r\n              Pool storage people = peoples[i];\r\n                if (people.addr == msg.sender) {\r\n                    sumExtra = sumExtra.add(people.extraRewards);\r\n                }\r\n         }\r\n        return sumExtra;\r\n    }\r\n\r\n    function currentRewardByID(uint256 _id) external view returns (uint256) {\r\n        uint256 rewardAmount;\r\n        if (peoples[_id].balanceAmount == 0) {\r\n            return 0;\r\n        }\r\n        if (peoples[_id].blockEnd > block.number) {\r\n            rewardAmount = (block.number.sub(peoples[_id].blockStart)).mul(peoples[_id].rewardPerBlock);\r\n        }else {\r\n            rewardAmount = (peoples[_id].blockEnd.sub(peoples[_id].blockStart)).mul(peoples[_id].rewardPerBlock);\r\n        }\r\n        return rewardAmount;\r\n    }\r\n    \r\n    function currentExtraRewardByID(uint256 _id) external view returns (uint256) {\r\n        return peoples[_id].extraRewards;\r\n    }\r\n    \r\n    function emergencyUpdatePoolPackagePercent(\r\n        uint _Contract1D, \r\n        uint _Contract7D,\r\n        uint _Contract30D,\r\n        uint _Contract90D,\r\n        uint _Contract180D,\r\n        uint _Contract360D\r\n    ) public onlyOwner{\r\n        Contract1D = _Contract1D;\r\n        Contract7D = _Contract7D;\r\n        Contract30D = _Contract30D;\r\n        Contract90D = _Contract90D;\r\n        Contract180D = _Contract180D;\r\n        Contract360D = _Contract360D;\r\n    }\r\n    \r\n    function emergencyUpdatePoolEstimateTotalBlock(\r\n        uint _TotalBlock1D, \r\n        uint _TotalBlock7D,\r\n        uint _TotalBlock30D,\r\n        uint _TotalBlock90D,\r\n        uint _TotalBlock180D,\r\n        uint _TotalBlock360D\r\n    ) public onlyOwner{\r\n         TotalBlock1D = _TotalBlock1D;\r\n         TotalBlock7D = _TotalBlock7D;\r\n         TotalBlock30D = _TotalBlock30D;\r\n         TotalBlock90D = _TotalBlock90D;\r\n         TotalBlock180D = _TotalBlock180D;\r\n         TotalBlock360D = _TotalBlock360D;\r\n    }\r\n    \r\n    function emergencyUpdatePoolMinimumAmount(\r\n         uint _minimumAmount\r\n    ) public onlyOwner{\r\n        AtLeastAmount = _minimumAmount;\r\n    }\r\n    \r\n    function emergencyUpdatePoolDevAddress(\r\n         address _developerAddress\r\n    ) public onlyOwner{\r\n        DeployerWalletAsdress = _developerAddress;\r\n    }\r\n    \r\n    function emergencyUpdatePoolAPR(\r\n        uint _Contract1D,\r\n        uint _Contract7D,\r\n        uint _Contract30D,\r\n        uint _Contract90D,\r\n        uint _Contract180D,\r\n        uint _Contract360D,\r\n        uint _TotalBlock1D,\r\n        uint _TotalBlock7D,\r\n        uint _TotalBlock30D,\r\n        uint _TotalBlock90D,\r\n        uint _TotalBlock180D,\r\n        uint _TotalBlock360D \r\n        ) public onlyOwner {\r\n            Contract1D = _Contract1D;\r\n            Contract7D = _Contract7D;\r\n            Contract30D = _Contract30D;\r\n            Contract90D = _Contract90D;\r\n            Contract180D = _Contract180D;\r\n            Contract360D = _Contract360D;\r\n            TotalBlock1D = _TotalBlock1D;\r\n            TotalBlock7D = _TotalBlock7D;\r\n            TotalBlock30D = _TotalBlock30D;\r\n            TotalBlock90D = _TotalBlock90D;\r\n            TotalBlock180D = _TotalBlock180D;\r\n            TotalBlock360D = _TotalBlock360D;\r\n    }\r\n    \r\n    function emergencyUpdatePoolFee(\r\n        uint _StakeFees,\r\n        uint _PenaltyFees,\r\n        uint _AdditionalDeployerToken,\r\n        uint _HarvestFees\r\n        ) public onlyOwner {\r\n         StakeFees =  _StakeFees;\r\n         PenaltyFees =  _PenaltyFees;\r\n         AdditionalDeployerToken  = _AdditionalDeployerToken;\r\n         HarvestFees =  _HarvestFees;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_syrupToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_adaptorAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_poolName\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_candidateId\",\"type\":\"uint256\"}],\"name\":\"votedEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AdditionalDeployerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AtLeastAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Contract180D\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Contract1D\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Contract30D\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Contract360D\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Contract7D\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Contract90D\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DeployerWalletAsdress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HarvestFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PenaltyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StakeFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalBlock180D\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalBlock1D\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalBlock30D\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalBlock360D\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalBlock7D\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TotalBlock90D\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"candidateCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentExtraRewardByID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentExtraRewardSum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentRewardByID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_contract\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_Contract1D\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Contract7D\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Contract30D\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Contract90D\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Contract180D\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Contract360D\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TotalBlock1D\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TotalBlock7D\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TotalBlock30D\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TotalBlock90D\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TotalBlock180D\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TotalBlock360D\",\"type\":\"uint256\"}],\"name\":\"emergencyUpdatePoolAPR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_developerAddress\",\"type\":\"address\"}],\"name\":\"emergencyUpdatePoolDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_TotalBlock1D\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TotalBlock7D\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TotalBlock30D\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TotalBlock90D\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TotalBlock180D\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_TotalBlock360D\",\"type\":\"uint256\"}],\"name\":\"emergencyUpdatePoolEstimateTotalBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_StakeFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PenaltyFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_AdditionalDeployerToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_HarvestFees\",\"type\":\"uint256\"}],\"name\":\"emergencyUpdatePoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumAmount\",\"type\":\"uint256\"}],\"name\":\"emergencyUpdatePoolMinimumAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_Contract1D\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Contract7D\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Contract30D\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Contract90D\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Contract180D\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_Contract360D\",\"type\":\"uint256\"}],\"name\":\"emergencyUpdatePoolPackagePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_candidateId\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"contractID\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"blockStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"havestBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentExtraReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"packagePercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"extraRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prepareRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct Pool.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPeople\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getPeoples\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"contractID\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"blockStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"havestBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentExtraReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"packagePercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"extraRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prepareRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct Pool.Pool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"harvestRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainRewardsToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainSyrupToken\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"peoples\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"contractID\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"blockStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"havestBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentExtraReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"packagePercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"extraRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prepareRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolBusdList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolbusd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"contractID\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"blockStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"havestBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentExtraReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"packagePercent\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"extraRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prepareRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Pool", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009f3bcbe48e8b754f331dfc694a894e8e686ac31d000000000000000000000000a5cf212d889dc9c05d47924cf2e909fb50df928f00000000000000000000000026304442cd46cb3cee1a83a48f400ef43a3d0b5c000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000084143542d42555344000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ef23d9b159b5069cf3412186c748cfe2059807362d7066c0911b78cf6d0691cc"}