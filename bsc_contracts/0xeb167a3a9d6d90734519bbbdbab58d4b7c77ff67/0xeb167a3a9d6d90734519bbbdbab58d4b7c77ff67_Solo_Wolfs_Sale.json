{"SourceCode": "//SPDX-License-Identifier: MIT Licensed\r\npragma solidity ^0.8.10;\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external;\r\n\r\n    function transfer(address to, uint256 value) external;\r\n\r\n    function transferFrom(address from, address to, uint256 value) external;\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(\r\n        uint80 _roundId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\ncontract Solo_Wolfs_Sale {\r\n    IERC20 public Token;\r\n    IERC20 public USDT = IERC20(0x73445033cEA2d4b74c1c6119E1514da7B6a28739);\r\n    IERC20 public BUSD = IERC20(0x73445033cEA2d4b74c1c6119E1514da7B6a28739);\r\n\r\n    AggregatorV3Interface public priceFeeD;\r\n\r\n    address payable public owner;\r\n\r\n    uint256 public tokenPerUsd = 100 ether; \r\n    uint256 public soldToken;\r\n    uint256 public totalSupply = 1_200_000_000 ether;  \r\n    uint256 public amountRaised;\r\n    uint256 public amountRaisedUSDT;\r\n    uint256 public amountRaisedBUSD;\r\n    address payable public fundReceiver;\r\n\r\n    uint256 public constant divider = 100;\r\n\r\n    bool public presaleStatus;\r\n    bool public enableClaim;\r\n\r\n    struct user {\r\n        uint256 native_balance;\r\n        uint256 usdt_balance;\r\n        uint256 busd_balance;\r\n        uint256 token_balance;\r\n        uint256 claimed_token;\r\n    }\r\n\r\n    mapping(address => user) public users; \r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"PRESALE: Not an owner\");\r\n        _;\r\n    }\r\n\r\n    event BuyToken(address indexed _user, uint256 indexed _amount);\r\n    event ClaimToken(address indexed _user, uint256 indexed _amount);\r\n    event UpdatePrice(uint256 _oldPrice, uint256 _newPrice);\r\n    event UpdateMinPurchase(\r\n        uint256 _oldMinNative,\r\n        uint256 _newMinNative,\r\n        uint256 _oldMinUsdt,\r\n        uint256 _newMinUsdt\r\n    );\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        fundReceiver = payable(0x01d3C1172379F5217Ec8A306769e17c630B1BfCa);\r\n        Token = IERC20(0x03804187A9E535EE760D3d83D35EDE8c73572AC2);\r\n        owner = payable(0x01d3C1172379F5217Ec8A306769e17c630B1BfCa);\r\n        priceFeeD = AggregatorV3Interface(\r\n            0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE\r\n        );\r\n        presaleStatus = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    // to get real time price of Eth\r\n    function getLatestPrice() public view returns (uint256) {\r\n        (, int256 price, , , ) = priceFeeD.latestRoundData();\r\n        return uint256(price);\r\n    }\r\n\r\n    // to buy token during preSale time with Eth => for web3 use\r\n\r\n    function buyToken() public payable {\r\n        require(presaleStatus == true, \" Presale is Paused, check back later\");\r\n\r\n        uint256 numberOfTokens;\r\n        numberOfTokens = NativeToToken(msg.value);\r\n        soldToken = soldToken + (numberOfTokens);\r\n        require(\r\n            soldToken <= totalSupply,\r\n            \"Low  Token in pool, Try less amount or wait for next stage\"\r\n        );\r\n        amountRaised = amountRaised + (msg.value);\r\n\r\n        users[msg.sender].native_balance =\r\n            users[msg.sender].native_balance +\r\n            (msg.value);\r\n        users[msg.sender].token_balance =\r\n            users[msg.sender].token_balance +\r\n            (numberOfTokens);\r\n    }\r\n\r\n    // to buy token during preSale time with USDT => for web3 use\r\n    function buyTokenUSDT(uint256 amount) public {\r\n        require(presaleStatus == true, \"Presale is Paused, check back later\");\r\n        USDT.transferFrom(msg.sender, fundReceiver, amount);\r\n\r\n        uint256 numberOfTokens;\r\n        numberOfTokens = usdtToToken(amount);\r\n\r\n        soldToken = soldToken + (numberOfTokens);\r\n        require(\r\n            soldToken <= totalSupply,\r\n            \"Low Tokens in pool, Try less amount or wait for next stage\"\r\n        );\r\n        amountRaisedUSDT = amountRaisedUSDT + (amount);\r\n\r\n        users[msg.sender].usdt_balance += amount;\r\n\r\n        users[msg.sender].token_balance =\r\n            users[msg.sender].token_balance +\r\n            (numberOfTokens);\r\n    }\r\n    //buy with busd\r\n    function buyTokenBUSD(uint256 amount) public {\r\n        require(presaleStatus == true, \"Presale is Paused, check back later\");\r\n        USDT.transferFrom(msg.sender, fundReceiver, amount);\r\n\r\n        uint256 numberOfTokens;\r\n        numberOfTokens = usdtToToken(amount);\r\n\r\n        soldToken = soldToken + (numberOfTokens);\r\n        require(\r\n            soldToken <= totalSupply,\r\n            \"Low Tokens in pool, Try less amount or wait for next stage\"\r\n        );\r\n        amountRaisedBUSD = amountRaisedBUSD + (amount);\r\n\r\n        users[msg.sender].busd_balance += amount;\r\n\r\n        users[msg.sender].token_balance =\r\n            users[msg.sender].token_balance +\r\n            (numberOfTokens);\r\n    }\r\n\r\n    // Claim bought tokens\r\n    function claimTokens() external {\r\n        require(enableClaim == true, \"Presale : Claim not active yet\");\r\n        require(users[msg.sender].token_balance != 0, \"Presale: 0 to claim\");\r\n\r\n        user storage _usr = users[msg.sender];\r\n\r\n        Token.transferFrom(owner, msg.sender, _usr.token_balance);\r\n        _usr.claimed_token += _usr.token_balance;\r\n        _usr.token_balance -= _usr.token_balance;\r\n\r\n        emit ClaimToken(msg.sender, _usr.token_balance);\r\n    }\r\n\r\n    function EnableClaim(bool _state) external onlyOwner {\r\n        enableClaim = _state;\r\n    }\r\n\r\n    function PresaleStatus(bool _off) external onlyOwner {\r\n        presaleStatus = _off;\r\n    }\r\n\r\n    // to check number of token for given Eth\r\n    function NativeToToken(uint256 _amount) public view returns (uint256) {\r\n        uint256 EthToUsd = (_amount * (getLatestPrice())) / (1 ether);\r\n        uint256 numberOfTokens = (EthToUsd * (tokenPerUsd)) / (1e8);\r\n        return numberOfTokens;\r\n    }\r\n\r\n    // to check number of token for given usdt\r\n    function usdtToToken(uint256 _amount) public view returns (uint256) {\r\n        uint256 numberOfTokens = (_amount * (tokenPerUsd)) / (1e18);\r\n        return numberOfTokens;\r\n    }\r\n\r\n    // to change Price of the token\r\n    function changePrice(\r\n        uint256 _price, \r\n        uint256 _totalSupply \r\n    ) external onlyOwner {\r\n        uint256 oldPrice = tokenPerUsd;\r\n        tokenPerUsd = _price; \r\n        totalSupply =  _totalSupply; \r\n\r\n        emit UpdatePrice(oldPrice, _price);\r\n    } \r\n\r\n    // transfer ownership\r\n    function changeOwner(address payable _newOwner) external onlyOwner {\r\n        require(\r\n            _newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        address _oldOwner = owner;\r\n        owner = _newOwner;\r\n\r\n        emit OwnershipTransferred(_oldOwner, _newOwner);\r\n    }\r\n\r\n    // change tokens\r\n    function changeToken(address _token) external onlyOwner {\r\n        Token = IERC20(_token);\r\n    }\r\n\r\n    //change USDT\r\n    function changeUSDT(address _USDT) external onlyOwner {\r\n        USDT = IERC20(_USDT);\r\n    }\r\n      //change BUSD\r\n    function changeBUSD(address _BUSD) external onlyOwner {\r\n        BUSD = IERC20(_BUSD);\r\n    }\r\n\r\n\r\n    // to draw funds for liquidity\r\n    function initiateTransfer(uint256 _value) external onlyOwner {\r\n        fundReceiver.transfer(_value);\r\n    }\r\n\r\n    // to draw funds for liquidity\r\n    function changeFundReciever(address _addr) external onlyOwner {\r\n        fundReceiver = payable(_addr);\r\n    }\r\n\r\n    // to draw out tokens\r\n    function transferTokens(IERC20 token, uint256 _value) external onlyOwner {\r\n        token.transfer(msg.sender, _value);\r\n    }\r\n \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldMinNative\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMinNative\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldMinUsdt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMinUsdt\",\"type\":\"uint256\"}],\"name\":\"UpdateMinPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"UpdatePrice\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUSD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"EnableClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"NativeToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_off\",\"type\":\"bool\"}],\"name\":\"PresaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountRaisedBUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountRaisedUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyTokenBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyTokenUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BUSD\",\"type\":\"address\"}],\"name\":\"changeBUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeFundReciever\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"changeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_USDT\",\"type\":\"address\"}],\"name\":\"changeUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"initiateTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeeD\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPerUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"usdtToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"native_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdt_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"busd_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed_token\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Solo_Wolfs_Sale", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5c11bb5751782bd1239e095519562fa67e9eb1f59a40062e4c59338e0520c87d"}