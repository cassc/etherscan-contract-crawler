{"SourceCode": "/*\r\n\r\nBear Country Token\r\n\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Factory.sol\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Pair.sol\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract BCT is Context, IERC20, Ownable {\r\n\r\n\tusing SafeMath for uint256;\r\n\tusing Address for address;\r\n\r\n\tmapping (address => uint256) private _rOwned;\r\n\tmapping (address => uint256) private _tOwned;\r\n\tmapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n\tmapping (address => bool) private _isExcludedFromFee;\r\n\r\n\tmapping (address => bool) private _isExcludedFromReward;\r\n\taddress[] private _excludedFromReward;\r\n\r\n\tmapping (address => bool) private _isExcludedFromTransactionLock;\r\n\r\n\tmapping (address => bool) private _isAllowList;\r\n\taddress[] private _allowList;\r\n\r\n\tmapping (address => bool) private _isBlockList;\r\n\taddress[] private _blockList;\r\n\r\n\tmapping (address => uint256) private _transactionLockTimestamp;\r\n\r\n\tuint256 private constant MAX = ~uint256(0);\r\n\tuint256 private _tTotal = 100000000 * 10**9;\r\n\tuint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\tuint256 private _tFeeTotal;\r\n\r\n\tstring private _name = \"Bear Country Token\";\r\n\tstring private _symbol = \"BCT\";\r\n\r\n// >> Symbols after dot (.) in token:\r\n\tuint8 private _decimals = 9;\r\n\r\n// >> Redistribution fee of any transaction: 3%\r\n\tuint256 public _taxFee = 3;\r\n\tuint256 private _previousTaxFee = _taxFee;\r\n\r\n// >> Liquidity fee of any transaction: 3%\r\n\tuint256 public _liquidityFee = 3;\r\n\tuint256 private _previousLiquidityFee = _liquidityFee;\r\n\r\n// >> Burning fee of any transaction: 1%\r\n\tuint256 public _burnFee = 1;\r\n\tuint256 private _previousBurnFee = _burnFee;\r\n\taddress public constant _burnAddress = 0x0000000000000000000000000000000000000000;\r\n\r\n// >> Maximum amount of any wallet/address (of total supply): 5%\r\n\tuint256 public _maxWalletAmount = 5000000 * 10**9;\r\n\r\n// >> Maximum amount of any transaction (of total supply): 1%\r\n\tuint256 public _maxTxAmount = 1000000 * 10**9;\r\n\r\n// >> Minimum amount of tokens in balance from wich calculated liquidity fee: 0.003%\r\n\tuint256 private _numTokensSellToAddToLiquidity = 300000 * 10**9;\r\n\r\n// >> Lock transaction from last one for some time: 60 seconds\r\n\tuint256 public _transactionLockTime = 60;\r\n\r\n// >> Pancake v2 router address:\r\n\taddress public constant _swapRouterAddress = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\r\n\r\n// >> Liquidity:\r\n\tbool public _swapAndLiquifyEnabled = true;\r\n\tbool private _inSwapAndLiquify;\r\n\r\n\tIUniswapV2Router02 public _uniswapV2Router;\r\n\taddress public _uniswapV2Pair;\r\n\tevent MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n\tevent SwapAndLiquifyEnabledUpdated(bool enabled);\r\n\tevent SwapAndLiquify(\r\n\t\tuint256 tokensSwapped,\r\n\t\tuint256 bnbReceived,\r\n\t\tuint256 tokensIntoLiqudity\r\n\t);\r\n\r\n\tmodifier transactionLock(){\r\n\t\trequire(block.timestamp - _transactionLockTimestamp[_msgSender()] >= _transactionLockTime || _isExcludedFromTransactionLock[_msgSender()] || _isAllowList[_msgSender()], \"ERROR: Sender address is not allowed to make transaction at this time. Plaese wait some time before make another transaction.\");\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier lockTheSwap {\r\n\t\t_inSwapAndLiquify = true;\r\n\t\t_;\r\n\t\t_inSwapAndLiquify = false;\r\n\t}\r\n\r\n\tconstructor () {\r\n\t\t_rOwned[_msgSender()] = _rTotal;\r\n\t\tIUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(_swapRouterAddress);\r\n// Create a uniswap pair for this new token:\r\n\t\t_uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n// Set the rest of the contract variables:\r\n\t\t_uniswapV2Router = uniswapV2Router;\r\n// Exclude owner, this contract and burn address from fee:\r\n\t\t_isExcludedFromFee[owner()] = true;\r\n\t\t_isExcludedFromFee[address(this)] = true;\r\n\t\t_isExcludedFromFee[_burnAddress] = true;\r\n// Exclude addreses from transaction lock time:\r\n\t\t_isExcludedFromTransactionLock[owner()] = true;\r\n\t\t_isExcludedFromTransactionLock[address(this)] = true;\r\n\t\t_isExcludedFromTransactionLock[_burnAddress] = true;\r\n\t\t_isExcludedFromTransactionLock[_uniswapV2Pair] = true;\r\n\t\t_isExcludedFromTransactionLock[address(_uniswapV2Router)] = true;\r\n\t\temit Transfer(address(0), _msgSender(), _tTotal);\r\n\t}\r\n\r\n\tfunction name() public view returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public view returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public view returns (uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n\r\n\tfunction totalSupply() public view override returns (uint256) {\r\n\t\treturn _tTotal;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view override returns (uint256) {\r\n\t\tif (_isExcludedFromReward[account]) return _tOwned[account];\r\n\t\treturn tokenFromReflection(_rOwned[account]);\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\r\n\t\t_transfer(_msgSender(), recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner, address spender) public view override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public override returns (bool) {\r\n\t\t_approve(_msgSender(), spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance.\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero.\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction isExcludedFromFee(address account) public view returns(bool) {\r\n\t\treturn _isExcludedFromFee[account];\r\n\t}\r\n\r\n\tfunction isExcludedFromReward(address account) public view returns (bool) {\r\n\t\treturn _isExcludedFromReward[account];\r\n\t}\r\n\r\n\tfunction isAllowList(address account) public view returns (bool) {\r\n\t\treturn _isAllowList[account];\r\n\t}\r\n\r\n\tfunction isBlockList(address account) public view returns (bool) {\r\n\t\treturn _isBlockList[account];\r\n\t}\r\n\r\n\tfunction totalFees() public view returns (uint256) {\r\n\t\treturn _tFeeTotal;\r\n\t}\r\n\r\n\tfunction deliver(uint256 tAmount) public {\r\n\t\taddress sender = _msgSender();\r\n\t\trequire(!_isExcludedFromReward[sender], \"ERROR: Excluded addresses cannot call this function.\");\r\n\t\t(uint256 rAmount,,,,,) = _getValues(tAmount);\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t_rTotal = _rTotal.sub(rAmount);\r\n\t\t_tFeeTotal = _tFeeTotal.add(tAmount);\r\n\t}\r\n\r\n\tfunction reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\r\n\t\trequire(tAmount <= _tTotal, \"ERROR: Amount must be less than supply.\");\r\n\t\tif (!deductTransferFee) {\r\n\t\t\t(uint256 rAmount,,,,,) = _getValues(tAmount);\r\n\t\t\treturn rAmount;\r\n\t\t} else {\r\n\t\t\t(,uint256 rTransferAmount,,,,) = _getValues(tAmount);\r\n\t\t\treturn rTransferAmount;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction tokenFromReflection(uint256 rAmount) public view returns(uint256) {\r\n\t\trequire(rAmount <= _rTotal, \"ERROR: Amount must be less than total reflections.\");\r\n\t\tuint256 currentRate = _getRate();\r\n\t\treturn rAmount.div(currentRate);\r\n\t}\r\n\r\n\tfunction includeInFee(address account) public onlyOwner {\r\n\t\t_isExcludedFromFee[account] = false;\r\n\t}\r\n\r\n\tfunction excludeFromFee(address account) public onlyOwner {\r\n\t\t_isExcludedFromFee[account] = true;\r\n\t}\r\n\r\n\tfunction includeInReward(address account) public onlyOwner() {\r\n\t\trequire(_isExcludedFromReward[account], \"ERROR: Account is not excluded from rewards.\");\r\n\t\tfor (uint256 i = 0; i < _excludedFromReward.length; i++) {\r\n\t\t\tif (_excludedFromReward[i] == account) {\r\n\t\t\t\t_excludedFromReward[i] = _excludedFromReward[_excludedFromReward.length - 1];\r\n\t\t\t\t_tOwned[account] = 0;\r\n\t\t\t\t_isExcludedFromReward[account] = false;\r\n\t\t\t\t_excludedFromReward.pop();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction excludeFromReward(address account) public onlyOwner() {\r\n\t\trequire(account != _swapRouterAddress, \"ERROR: We can not exclude from rewards address of swap router.\");\r\n\t\trequire(!_isExcludedFromReward[account], \"ERROR: Account is already excluded from rewards.\");\r\n\t\tif (_rOwned[account] > 0) {\r\n\t\t\t_tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n\t\t}\r\n\t\t_isExcludedFromReward[account] = true;\r\n\t\t_excludedFromReward.push(account);\r\n\t}\r\n\r\n\tfunction includeInAllowList(address account) public onlyOwner() {\r\n\t\trequire(!_isAllowList[account], \"ERROR: Account is already in AllowList.\");\r\n\t\t_isAllowList[account] = true;\r\n\t\t_allowList.push(account);\r\n\t}\r\n\r\n\tfunction excludeFromAllowList(address account) public onlyOwner() {\r\n\t\trequire(_isAllowList[account], \"ERROR: Account is not in AllowList.\");\r\n\t\tfor (uint256 i = 0; i < _allowList.length; i++) {\r\n\t\t\tif (_allowList[i] == account) {\r\n\t\t\t\t_allowList[i] = _allowList[_allowList.length - 1];\r\n\t\t\t\t_isAllowList[account] = false;\r\n\t\t\t\t_allowList.pop();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction includeInBlockList(address account) public onlyOwner() {\r\n\t\trequire(account != _swapRouterAddress, \"ERROR: We can not add to BlockList address of swap router.\");\r\n\t\trequire(account != _burnAddress, \"ERROR: We can not add to BlockList address of burn.\");\r\n\t\trequire(!_isBlockList[account], \"ERROR: Account is already in BlockList.\");\r\n\t\t_isBlockList[account] = true;\r\n\t\t_blockList.push(account);\r\n\t}\r\n\r\n\tfunction excludeFromBlockList(address account) public onlyOwner() {\r\n\t\trequire(_isBlockList[account], \"ERROR: Account is not in BlockList.\");\r\n\t\tfor (uint256 i = 0; i < _blockList.length; i++) {\r\n\t\t\tif (_blockList[i] == account) {\r\n\t\t\t\t_blockList[i] = _blockList[_blockList.length - 1];\r\n\t\t\t\t_isBlockList[account] = false;\r\n\t\t\t\t_blockList.pop();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setTaxFeePercent(uint256 taxFee) external onlyOwner() {\r\n\t\t_taxFee = taxFee;\r\n\t}\r\n\r\n\tfunction setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {\r\n\t\t_liquidityFee = liquidityFee;\r\n\t}\r\n\r\n\tfunction setBurnFeePercent(uint256 burnFee) external onlyOwner() {\r\n\t\t_burnFee = burnFee;\r\n\t}\r\n\r\n\tfunction setMaxWalletPercent(uint256 maxWalletPercent) external onlyOwner() {\r\n\t\t_maxWalletAmount = _tTotal.mul(maxWalletPercent).div(\r\n\t\t\t10**2\r\n\t\t);\r\n\t}\r\n\r\n\tfunction setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r\n\t\t_maxTxAmount = _tTotal.mul(maxTxPercent).div(\r\n\t\t\t10**2\r\n\t\t);\r\n\t}\r\n\r\n\tfunction setTransactionLockTime(uint256 transactionLockTime) external onlyOwner() {\r\n\t\t_transactionLockTime = transactionLockTime;\r\n\t}\r\n\r\n\tfunction setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n\t\t_swapAndLiquifyEnabled = _enabled;\r\n\t\temit SwapAndLiquifyEnabledUpdated(_enabled);\r\n\t}\r\n\r\n// To recieve BNB from uniswapV2Router when swaping:\r\n\treceive() external payable {}\r\n\r\n\tfunction _reflectFee(uint256 rFee, uint256 tFee) private {\r\n\t\t_rTotal = _rTotal.sub(rFee);\r\n\t\t_tFeeTotal = _tFeeTotal.add(tFee);\r\n\t}\r\n\r\n\tfunction _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n\t\t(uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount);\r\n\t\t(uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, _getRate());\r\n\t\treturn (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\r\n\t}\r\n\r\n\tfunction _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\r\n\t\tuint256 tFee = calculateTaxFee(tAmount);\r\n\t\tuint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n\t\tuint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\r\n\t\treturn (tTransferAmount, tFee, tLiquidity);\r\n\t}\r\n\r\n\tfunction _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n\t\tuint256 rAmount = tAmount.mul(currentRate);\r\n\t\tuint256 rFee = tFee.mul(currentRate);\r\n\t\tuint256 rLiquidity = tLiquidity.mul(currentRate);\r\n\t\tuint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\r\n\t\treturn (rAmount, rTransferAmount, rFee);\r\n\t}\r\n\r\n\tfunction _getRate() private view returns(uint256) {\r\n\t\t(uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n\t\treturn rSupply.div(tSupply);\r\n\t}\r\n\r\n\tfunction _getCurrentSupply() private view returns(uint256, uint256) {\r\n\t\tuint256 rSupply = _rTotal;\r\n\t\tuint256 tSupply = _tTotal;\t\t\r\n\t\tfor (uint256 i = 0; i < _excludedFromReward.length; i++) {\r\n\t\t\tif (_rOwned[_excludedFromReward[i]] > rSupply || _tOwned[_excludedFromReward[i]] > tSupply) return (_rTotal, _tTotal);\r\n\t\t\trSupply = rSupply.sub(_rOwned[_excludedFromReward[i]]);\r\n\t\t\ttSupply = tSupply.sub(_tOwned[_excludedFromReward[i]]);\r\n\t\t}\r\n\t\tif (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n\t\treturn (rSupply, tSupply);\r\n\t}\r\n\r\n\tfunction _takeLiquidity(uint256 tLiquidity) private {\r\n\t\tuint256 currentRate =  _getRate();\r\n\t\tuint256 rLiquidity = tLiquidity.mul(currentRate);\r\n\t\t_rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n\t\tif (_isExcludedFromReward[address(this)]) {\r\n\t\t\t_tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction calculateTaxFee(uint256 _amount) private view returns (uint256) {\r\n\t\treturn _amount.mul(_taxFee).div(\r\n\t\t\t10**2\r\n\t\t);\r\n\t}\r\n\r\n\tfunction calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n\t\treturn _amount.mul(_liquidityFee).div(\r\n\t\t\t10**2\r\n\t\t);\r\n\t}\r\n\r\n\tfunction calculateBurnFee(uint256 _amount) private view returns (uint256) {\r\n\t\treturn _amount.mul(_burnFee).div(\r\n\t\t\t10**2\r\n\t\t);\r\n\t}\r\n\r\n\tfunction removeAllFee() private {\r\n\t\tif (_taxFee == 0 && _liquidityFee == 0 && _burnFee == 0) return;\r\n\t\t_previousTaxFee = _taxFee;\r\n\t\t_previousLiquidityFee = _liquidityFee;\r\n\t\t_previousBurnFee = _burnFee;\r\n\t\t_taxFee = 0;\r\n\t\t_liquidityFee = 0;\r\n\t\t_burnFee = 0;\r\n\t}\r\n\r\n\tfunction restoreAllFee() private {\r\n\t\t_taxFee = _previousTaxFee;\r\n\t\t_liquidityFee = _previousLiquidityFee;\r\n\t\t_burnFee = _previousBurnFee;\r\n\t}\r\n\r\n\tfunction _approve(address owner, address spender, uint256 amount) private {\r\n\t\trequire(owner != address(0), \"BEP20: approve from the zero address.\");\r\n\t\trequire(spender != address(0), \"BEP20: approve to the zero address.\");\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction _transfer(\r\n\t\taddress sender,\r\n\t\taddress recipient,\r\n\t\tuint256 amount\r\n\t) private transactionLock {\r\n\t\trequire(sender != address(0), \"BEP20: transfer from the zero address.\");\r\n\t\trequire(recipient != address(0), \"BEP20: transfer to the zero address.\");\r\n\t\trequire(amount > 0, \"ERROR: Transfer amount must be greater than zero.\");\r\n\t\tif (recipient == _burnAddress) {\r\n\t\t\tremoveAllFee();\r\n\t\t\t_transferBurn(sender, amount);\r\n\t\t\trestoreAllFee();\r\n\t\t\treturn;\r\n\t\t}\r\n// Is the token balance of this contract address over the min number of tokens that we need to initiate a swap + liquidity lock? also, don't get caught in a circular liquidity event. also, don't swap & liquify if sender is uniswap pair.\r\n\t\tuint256 contractTokenBalance = balanceOf(address(this));\r\n// If sender or recipient not exists in a AllowList, make additional check (for BlockList, _maxWalletAmount and _maxTxAmount):\r\n\t\tif (!_isAllowList[sender] && !_isAllowList[recipient]) {\r\n\t\t\trequire(!_isBlockList[sender], \"ERROR: Sender address is in BlockList.\");\r\n\t\t\trequire(!_isBlockList[recipient], \"ERROR: Recipient address is in BlockList.\");\r\n\t\t\trequire(!_isBlockList[tx.origin], \"ERROR: Source address of transactions chain is in BlockList.\");\r\n\t\t\tif (sender != owner() && recipient != owner()) {\r\n\t\t\t\tif (recipient != _uniswapV2Pair && recipient != address(_uniswapV2Router)) {\r\n\t\t\t\t\trequire(balanceOf(recipient) < _maxWalletAmount, \"ERROR: Recipient address is already bought the maximum allowed amount.\");\r\n\t\t\t\t\trequire(balanceOf(recipient).add(amount) <= _maxWalletAmount, \"ERROR: Transfer amount exceeds the maximum allowable value for storing in recipient address.\");\r\n\t\t\t\t}\r\n\t\t\t\trequire(amount <= _maxTxAmount, \"ERROR: Transfer amount exceeds the maximum allowable value.\");\r\n\t\t\t}\r\n\t\t\tif (contractTokenBalance >= _maxTxAmount) {\r\n\t\t\t\tcontractTokenBalance = _maxTxAmount;\r\n\t\t\t}\r\n\t\t}\r\n\t\tbool isOverMinTokenBalance = contractTokenBalance >= _numTokensSellToAddToLiquidity;\r\n\t\tif (\r\n\t\t\tisOverMinTokenBalance &&\r\n\t\t\t!_inSwapAndLiquify &&\r\n\t\t\tsender != _uniswapV2Pair &&\r\n\t\t\tsender != address(_uniswapV2Router) &&\r\n\t\t\t_swapAndLiquifyEnabled\r\n\t\t) {\r\n\t\t\tcontractTokenBalance = _numTokensSellToAddToLiquidity;\r\n// Add liquidity:\r\n\t\t\tswapAndLiquify(contractTokenBalance);\r\n\t\t}\r\n// Indicates if fee should be deducted from transfer:\r\n\t\tbool takeFee = true;\r\n// If any account belongs to _isExcludedFromFee account then remove the fee:\r\n\t\tif (_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {\r\n\t\t\ttakeFee = false;\r\n\t\t}\r\n// Add a timestamp value to array of address transaction lock time:\r\n\t\t_transactionLockTimestamp[_msgSender()] = block.timestamp;\r\n// Transfer amount, it will take tax, burn, liquidity fee:\r\n\t\t_tokenTransfer(sender, recipient, amount, takeFee);\r\n\t}\r\n\r\n\tfunction swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\r\n// Split the contract balance into halves:\r\n\t\tuint256 firstHalf = contractTokenBalance.div(2);\r\n\t\tuint256 secondHalf = contractTokenBalance.sub(firstHalf);\r\n// Capture the contract's current BNB balance. this is so that we can capture exactly the amount of BNB that the swap creates, and not make the liquidity event include any BNB that has been manually sent to the contract:\r\n\t\tuint256 initialBalance = address(this).balance;\r\n// Swap tokens for BNB:\r\n\t\tswapTokensForBnb(firstHalf); // <- this breaks the BNB -> HATE swap when swap+liquify is triggered\r\n// This is the amount of BNB that we just swap into:\r\n\t\tuint256 newBalance = address(this).balance.sub(initialBalance);\r\n// Add liquidity to uniswap:\r\n\t\taddLiquidity(secondHalf, newBalance);\r\n\t\temit SwapAndLiquify(firstHalf, newBalance, secondHalf);\r\n\t}\r\n\r\n\tfunction swapTokensForBnb(uint256 tokenAmount) private {\r\n// Generate the uniswap pair path of token -> weth:\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tpath[1] = _uniswapV2Router.WETH();\r\n\t\t_approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n// Make the swap:\r\n\t\t_uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\ttokenAmount,\r\n// Accept any amount of BNB:\r\n\t\t\t0,\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\tfunction addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n// Approve token transfer to cover all possible scenarios:\r\n\t\t_approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n// Add the liquidity:\r\n\t\t_uniswapV2Router.addLiquidityETH{value: bnbAmount}(\r\n\t\t\taddress(this),\r\n\t\t\ttokenAmount,\r\n// Slippage is unavoidable:\r\n\t\t\t0,\r\n// Slippage is unavoidable:\r\n\t\t\t0,\r\n\t\t\towner(),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n// This method is responsible for taking all fee, if takeFee is true:\r\n\tfunction _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\r\n\t\tif (!takeFee) removeAllFee();\r\n// Calculate burn amount:\r\n\t\tuint256 burnAmt = calculateBurnFee(amount);\r\n\t\tif (_isExcludedFromReward[sender] && !_isExcludedFromReward[recipient]) {\r\n\t\t\t_transferFromExcluded(sender, recipient, (amount.sub(burnAmt)));\r\n\t\t} else if (!_isExcludedFromReward[sender] && _isExcludedFromReward[recipient]) {\r\n\t\t\t_transferToExcluded(sender, recipient, (amount.sub(burnAmt)));\r\n\t\t} else if (!_isExcludedFromReward[sender] && !_isExcludedFromReward[recipient]) {\r\n\t\t\t_transferStandard(sender, recipient, (amount.sub(burnAmt)));\r\n\t\t} else if (_isExcludedFromReward[sender] && _isExcludedFromReward[recipient]) {\r\n\t\t\t_transferBothExcluded(sender, recipient, (amount.sub(burnAmt)));\r\n\t\t} else {\r\n\t\t\t_transferStandard(sender, recipient, (amount.sub(burnAmt)));\r\n\t\t}\r\n\t\tif (!takeFee) restoreAllFee();\r\n// Temporarily remove fees to transfer to burn address:\r\n\t\tremoveAllFee();\r\n\t\t_transferBurn(sender, burnAmt);\r\n// Restore tax and liquidity fees:\r\n\t\trestoreAllFee();\r\n\t}\r\n\r\n\tfunction _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n\t\t(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n\t\t_takeLiquidity(tLiquidity);\r\n\t\t_reflectFee(rFee, tFee);\r\n\t\temit Transfer(sender, recipient, tTransferAmount);\r\n\t}\r\n\r\n\tfunction _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n\t\t(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n\t\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\t\t\t\r\n\t\t_takeLiquidity(tLiquidity);\r\n\t\t_reflectFee(rFee, tFee);\r\n\t\temit Transfer(sender, recipient, tTransferAmount);\r\n\t}\r\n\r\n\tfunction _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n\t\t(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n\t\t_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\t\r\n\t\t_takeLiquidity(tLiquidity);\r\n\t\t_reflectFee(rFee, tFee);\r\n\t\temit Transfer(sender, recipient, tTransferAmount);\r\n\t}\r\n\r\n\tfunction _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n\t\t(uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n\t\t_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n\t\t_rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n\t\t_tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n\t\t_rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\t\t\r\n\t\t_takeLiquidity(tLiquidity);\r\n\t\t_reflectFee(rFee, tFee);\r\n\t\temit Transfer(sender, recipient, tTransferAmount);\r\n\t}\r\n\r\n\tfunction _transferBurn(address sender, uint256 rAmount) private {\r\n\t\tuint256 rAccountBalance = _rOwned[sender];\r\n\t\tuint256 tAccountBalance = _tOwned[sender];\r\n\t\tuint256 tAmount = tAccountBalance.mul(rAmount).div(rAccountBalance);\r\n\t\trequire(rAccountBalance >= rAmount, \"BEP20: burn amount exceeds balance.\");\r\n\t\t_rOwned[sender] = rAccountBalance.sub(rAmount);\r\n\t\t_tOwned[sender] = tAccountBalance.sub(tAmount);\r\n// Take tokens out of circulation:\r\n\t\t_tTotal = _tTotal.sub(tAmount);\r\n\t\t_rTotal = _rTotal.sub(rAmount);\r\n\t\temit Transfer(sender, _burnAddress, rAmount);\r\n\t}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transactionLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromAllowList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromBlockList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInAllowList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInBlockList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAllowList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isBlockList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"}],\"name\":\"setBurnFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWalletPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionLockTime\",\"type\":\"uint256\"}],\"name\":\"setTransactionLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BCT", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9bd5cece74e6f77bfa884bba8d789ff00af0b46e26549592fde80966520cd23f"}