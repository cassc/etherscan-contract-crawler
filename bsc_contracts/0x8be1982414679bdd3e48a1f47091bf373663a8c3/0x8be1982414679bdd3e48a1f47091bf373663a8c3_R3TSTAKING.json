{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Stake/R3TSTAKING.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract R3TSTAKING is Ownable, ReentrancyGuard, Pausable {\\r\\n    struct StakeParams {\\r\\n        bool active;\\r\\n        uint8 plan;\\r\\n        uint256 stakingOrder;\\r\\n        uint256 start;\\r\\n        uint256 amount;\\r\\n        uint256 lastRewardTS;\\r\\n        uint256 percentIndex;\\r\\n    }\\r\\n\\r\\n    struct RewardParams {\\r\\n        uint256 rewardOrder;\\r\\n        uint256 stakingOrder;\\r\\n        uint256 amount;\\r\\n    }\\r\\n\\r\\n    address[] private stakers;\\r\\n    IERC20 public token;\\r\\n\\r\\n    uint256 public constant MONTH = 30 days;\\r\\n    uint256 constant PLAN90 = 3 * MONTH;\\r\\n    uint256 constant PLAN180 = 6 * MONTH;\\r\\n    uint256 constant PLAN360 = 12 * MONTH;\\r\\n    uint256 constant DENOMINATOR = 10000;\\r\\n\\r\\n    uint256 private totalStakingBalance;\\r\\n    uint256 private totalRewards;\\r\\n\\r\\n    mapping(address => StakeParams[]) private stakingBalances;\\r\\n    mapping(address => RewardParams[]) private rewards;\\r\\n    mapping(uint8 => uint256[]) private percentForPlan;\\r\\n    mapping(uint8 => uint256[]) private percentIndexTimestamp;\\r\\n\\r\\n    constructor(\\r\\n        address _token,\\r\\n        uint256 _percentFor90,\\r\\n        uint256 _percentFor180,\\r\\n        uint256 _percentFor360\\r\\n    ) {\\r\\n        token = IERC20(_token);\\r\\n        setpercentForPlan(1, _percentFor90);\\r\\n        setpercentForPlan(2, _percentFor180);\\r\\n        setpercentForPlan(3, _percentFor360);\\r\\n    }\\r\\n\\r\\n    function totalSupply() external view returns (uint256) {\\r\\n        return token.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getTotalStakingBalance() external view returns (uint256) {\\r\\n        return totalStakingBalance;\\r\\n    }\\r\\n\\r\\n    function getTotalStakedTokens(\\r\\n        address _account\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 total;\\r\\n        for (uint256 i = 0; i < stakingBalances[_account].length; i++) {\\r\\n            if (stakingBalances[_account][i].active) {\\r\\n                total += stakingBalances[_account][i].amount;\\r\\n            }\\r\\n        }\\r\\n        return total;\\r\\n    }\\r\\n\\r\\n    function getStakes(\\r\\n        address _account\\r\\n    ) public view returns (StakeParams[] memory) {\\r\\n        return stakingBalances[_account];\\r\\n    }\\r\\n\\r\\n    function getRewards(\\r\\n        address _account\\r\\n    ) public view returns (RewardParams[] memory) {\\r\\n        return rewards[_account];\\r\\n    }\\r\\n\\r\\n    function getTotalRewards() external view returns (uint256) {\\r\\n        return totalRewards;\\r\\n    }\\r\\n\\r\\n    function getTotalEarnedTokens(\\r\\n        address _account\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 total;\\r\\n        for (uint256 i = 0; i < rewards[_account].length; i++) {\\r\\n            total += rewards[_account][i].amount;\\r\\n        }\\r\\n        return total;\\r\\n    }\\r\\n\\r\\n    function getStakingPercent(uint8 _plan) public view returns (uint256) {\\r\\n        require(\\r\\n            _plan > 0 && _plan < 4,\\r\\n            \\\"R3TSTAKING: Please set one of the following plans: 1, 2, 3\\\"\\r\\n        );\\r\\n        return percentForPlan[_plan][percentForPlan[_plan].length - 1];\\r\\n    }\\r\\n\\r\\n    function stake(\\r\\n        uint256 _amount,\\r\\n        uint8 _plan\\r\\n    ) public nonReentrant whenNotPaused {\\r\\n        require(\\r\\n            _plan > 0 && _plan < 4,\\r\\n            \\\"R3TSTAKING: Please set one of the following plans: 1, 2, 3\\\"\\r\\n        );\\r\\n        require(_amount > 0, \\\"Amount must be more than 0\\\");\\r\\n\\r\\n        totalStakingBalance += _amount;\\r\\n        createNewStakingSession(_amount, _plan);\\r\\n        token.transferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n        emit Staked(msg.sender, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function getPlanDuration(uint8 _plan) public pure returns (uint256) {\\r\\n        if (_plan == 1) return PLAN90;\\r\\n        if (_plan == 2) return PLAN180;\\r\\n        if (_plan == 3) return PLAN360;\\r\\n        revert(\\\"R3TSTAKING: Please set one of the following plans: 1, 2, 3\\\");\\r\\n    }\\r\\n\\r\\n    function remainLatestRewardTimes(\\r\\n        StakeParams memory oneStake\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 timeForCount = (oneStake.start +\\r\\n            getPlanDuration(oneStake.plan)) < block.timestamp\\r\\n            ? oneStake.start + getPlanDuration(oneStake.plan)\\r\\n            : block.timestamp;\\r\\n        return (timeForCount - oneStake.lastRewardTS) / MONTH;\\r\\n    }\\r\\n\\r\\n    function findPercentIndex(\\r\\n        uint256 countDateStart,\\r\\n        uint8 plan,\\r\\n        uint256 index\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 percentIndex;\\r\\n        while (\\r\\n            index < percentForPlan[plan].length &&\\r\\n            percentIndexTimestamp[plan][index] < countDateStart\\r\\n        ) {\\r\\n            percentIndex = index;\\r\\n            index++;\\r\\n        }\\r\\n        return percentIndex;\\r\\n    }\\r\\n\\r\\n    function estimateReward(\\r\\n        address account,\\r\\n        uint256 stakingOrder\\r\\n    ) public view returns (uint256) {\\r\\n        StakeParams storage oneStake = stakingBalances[account][stakingOrder];\\r\\n        uint8 plan = oneStake.plan;\\r\\n        uint256 stakeEndTS = oneStake.start + getPlanDuration(plan);\\r\\n        uint256 countDateStart = oneStake.lastRewardTS;\\r\\n        uint256 countDateEnd = stakeEndTS < block.timestamp\\r\\n            ? stakeEndTS\\r\\n            : block.timestamp;\\r\\n        uint256 reward;\\r\\n        uint256 percentIndex = oneStake.percentIndex;\\r\\n        while (countDateStart + MONTH <= countDateEnd) {\\r\\n            reward +=\\r\\n                (oneStake.amount *\\r\\n                    percentForPlan[plan][\\r\\n                        findPercentIndex(countDateStart, plan, percentIndex)\\r\\n                    ]) /\\r\\n                DENOMINATOR;\\r\\n            countDateStart += MONTH;\\r\\n        }\\r\\n        return reward;\\r\\n    }\\r\\n\\r\\n    function getReward(uint256 stakingOrder) public nonReentrant whenNotPaused {\\r\\n        uint256 reward;\\r\\n        StakeParams storage _stakeParams = stakingBalances[msg.sender][\\r\\n            stakingOrder\\r\\n        ];\\r\\n        require(\\r\\n            stakingOrder < stakingBalances[msg.sender].length,\\r\\n            \\\"Wrong stakingOrder!\\\"\\r\\n        );\\r\\n        require(_stakeParams.active, \\\"Stake has already been unstaked.\\\");\\r\\n        reward = estimateReward(msg.sender, stakingOrder);\\r\\n        uint256 onlyReward = reward;\\r\\n        _stakeParams.lastRewardTS +=\\r\\n            remainLatestRewardTimes(_stakeParams) *\\r\\n            MONTH;\\r\\n        _stakeParams.percentIndex = findPercentIndex(\\r\\n            _stakeParams.lastRewardTS,\\r\\n            _stakeParams.plan,\\r\\n            _stakeParams.percentIndex\\r\\n        );\\r\\n\\r\\n        if (\\r\\n            _stakeParams.start + getPlanDuration(_stakeParams.plan) <\\r\\n            block.timestamp\\r\\n        ) {\\r\\n            reward += _stakeParams.amount;\\r\\n            totalStakingBalance -= _stakeParams.amount;\\r\\n            _stakeParams.active = false;\\r\\n        }\\r\\n        require(reward > 0, \\\"Insufficient reward\\\");\\r\\n        // Add token fee compensation\\r\\n        uint256 toTransfer = (reward * 100) / 95;\\r\\n        if ((reward * 100) % 95 > 0) {\\r\\n            toTransfer += 1;\\r\\n        }\\r\\n\\r\\n        require(\\r\\n            toTransfer <= token.balanceOf(address(this)),\\r\\n            \\\"Insufficient contract balance\\\"\\r\\n        );\\r\\n\\r\\n        token.transfer(msg.sender, toTransfer);\\r\\n\\r\\n        RewardParams memory params = RewardParams(\\r\\n            rewards[msg.sender].length,\\r\\n            stakingOrder,\\r\\n            onlyReward\\r\\n        );\\r\\n        rewards[msg.sender].push(params);\\r\\n        totalRewards += reward;\\r\\n\\r\\n        emit RewardPaid(\\r\\n            msg.sender,\\r\\n            reward,\\r\\n            rewards[msg.sender].length - 1,\\r\\n            stakingOrder,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function setpercentForPlan(uint8 _plan, uint256 _percent) public onlyOwner {\\r\\n        require(\\r\\n            _plan > 0 && _plan < 4,\\r\\n            \\\"R3TSTAKING: Please set one of the following plans: 1, 2, 3\\\"\\r\\n        );\\r\\n        percentForPlan[_plan].push(_percent);\\r\\n        percentIndexTimestamp[_plan].push(block.timestamp);\\r\\n    }\\r\\n\\r\\n    function fundContractBalance(uint256 _amount) external onlyOwner {\\r\\n        require(_amount > 0, \\\"Invalid fund\\\");\\r\\n        token.transferFrom(msg.sender, address(this), _amount);\\r\\n    }\\r\\n\\r\\n    function createNewStakingSession(uint256 _amount, uint8 _plan) internal {\\r\\n        StakeParams memory params = StakeParams(\\r\\n            true,\\r\\n            _plan,\\r\\n            stakingBalances[msg.sender].length,\\r\\n            block.timestamp,\\r\\n            _amount,\\r\\n            block.timestamp,\\r\\n            percentForPlan[_plan].length - 1\\r\\n        );\\r\\n        stakingBalances[msg.sender].push(params);\\r\\n\\r\\n        bool existingStaker = checkExistingStaker(msg.sender);\\r\\n\\r\\n        if (!existingStaker) stakers.push(msg.sender);\\r\\n    }\\r\\n\\r\\n    function checkExistingStaker(\\r\\n        address _account\\r\\n    ) internal view returns (bool) {\\r\\n        for (uint256 index = 0; index < stakers.length; index++) {\\r\\n            if (stakers[index] == _account) return true;\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function withdrawBNB() external onlyOwner {\\r\\n        uint256 amount = address(this).balance;\\r\\n        require(amount > 0, \\\"Insufficient balance\\\");\\r\\n        payable(msg.sender).transfer(amount);\\r\\n    }\\r\\n\\r\\n    function withdrawToken(\\r\\n        address tokenAddress,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        IERC20 _token = IERC20(tokenAddress);\\r\\n        require(\\r\\n            _token.balanceOf(address(this)) >= amount,\\r\\n            \\\"Insufficient balance\\\"\\r\\n        );\\r\\n        _token.transfer(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n    event Staked(address indexed user, uint256 amount, uint256 blockTime);\\r\\n    event RewardPaid(\\r\\n        address indexed user,\\r\\n        uint256 rewardAmount,\\r\\n        uint256 rewardorder,\\r\\n        uint256 stakingOrder,\\r\\n        uint256 blockTime\\r\\n    );\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentFor90\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentFor180\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentFor360\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardorder\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakingOrder\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingOrder\",\"type\":\"uint256\"}],\"name\":\"estimateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundContractBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_plan\",\"type\":\"uint8\"}],\"name\":\"getPlanDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakingOrder\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardOrder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingOrder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct R3TSTAKING.RewardParams[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getStakes\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"stakingOrder\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct R3TSTAKING.StakeParams[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_plan\",\"type\":\"uint8\"}],\"name\":\"getStakingPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTotalEarnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTotalStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_plan\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setpercentForPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_plan\",\"type\":\"uint8\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "R3TSTAKING", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f97c30f0b31aee9b1ab087f8ccf5b14bf354d29f0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000004b0000000000000000000000000000000000000000000000000000000000000064", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}