{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/BrewlabsNftStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @author Brewlabs\\r\\n * This contract has been developed by brewlabs.info\\r\\n */\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport {IERC20, IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\n\\r\\ninterface IBrewlabsMirrorNft is IERC721 {\\r\\n    function rarityOf(uint256 tokenId) external view returns (uint256);\\r\\n    function mint(address to, uint256 tokenId) external;\\r\\n    function burn(uint256 tokenId) external;\\r\\n    function setNftStakingContract(address staking) external;\\r\\n}\\r\\n\\r\\ncontract BrewlabsNftStaking is Ownable, IERC721Receiver, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\r\\n    uint256 private constant BLOCKS_PER_DAY = 28800;\\r\\n    uint256 private PRECISION_FACTOR;\\r\\n\\r\\n    // Whether it is initialized\\r\\n    bool public isInitialized;\\r\\n    uint256 public duration = 270; // 270 days\\r\\n\\r\\n    // The block number when staking starts.\\r\\n    uint256 public startBlock;\\r\\n    // The block number when staking ends.\\r\\n    uint256 public bonusEndBlock;\\r\\n    // tokens created per block.\\r\\n    uint256 public rewardPerBlock;\\r\\n    // The block number of the last pool update\\r\\n    uint256 public lastRewardBlock;\\r\\n\\r\\n    address public admin;\\r\\n    address public treasury = 0x5Ac58191F3BBDF6D037C6C6201aDC9F99c93C53A;\\r\\n    uint256 public performanceFee = 0.0035 ether;\\r\\n\\r\\n    // The staked token\\r\\n    IERC721 public stakingNft;\\r\\n    IBrewlabsMirrorNft public mirrorNft;\\r\\n    // The earned token\\r\\n    address public earnedToken;\\r\\n    // Accrued token per share\\r\\n    uint256 public accTokenPerShare;\\r\\n    uint256 public oneTimeLimit = 40;\\r\\n    bool public autoAdjustableForRewardRate = true;\\r\\n\\r\\n    uint256 public totalStaked;\\r\\n    uint256 private totalEarned;\\r\\n    uint256 private paidRewards;\\r\\n    uint256 private shouldTotalPaid;\\r\\n\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // number of staked NFTs\\r\\n        uint256[] tokenIds; // staked tokenIds\\r\\n        uint256 rewardDebt; // Reward debt\\r\\n    }\\r\\n    // Info of each user that stakes tokenIds\\r\\n\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n\\r\\n    event Deposit(address indexed user, uint256[] tokenIds);\\r\\n    event Withdraw(address indexed user, uint256[] tokenIds);\\r\\n    event Claim(address indexed user, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256[] tokenIds);\\r\\n    event AdminTokenRecovered(address tokenRecovered, uint256 amount);\\r\\n\\r\\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\\r\\n    event NewRewardPerBlock(uint256 rewardPerBlock);\\r\\n    event RewardsStop(uint256 blockNumber);\\r\\n    event EndBlockUpdated(uint256 blockNumber);\\r\\n\\r\\n    event ServiceInfoUpadted(address _addr, uint256 _fee);\\r\\n    event DurationUpdated(uint256 _duration);\\r\\n    event SetAutoAdjustableForRewardRate(bool status);\\r\\n    event SetOneTimeLimit(uint256 limit);\\r\\n    event SetAdmin(address addr);\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(msg.sender == owner() || msg.sender == admin, \\\"Caller is not owner or operator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {}\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize the contract\\r\\n     * @param _stakingNft: nft address to stake\\r\\n     * @param _earnedToken: earned token address\\r\\n     * @param _rewardPerBlock: reward per block (in earnedToken)\\r\\n     */\\r\\n    function initialize(\\r\\n        IERC721 _stakingNft,\\r\\n        IBrewlabsMirrorNft _mirrorNft,\\r\\n        address _earnedToken,\\r\\n        uint256 _rewardPerBlock\\r\\n    ) external onlyOwner {\\r\\n        require(!isInitialized, \\\"Already initialized\\\");\\r\\n\\r\\n        // Make this contract initialized\\r\\n        isInitialized = true;\\r\\n\\r\\n        stakingNft = _stakingNft;\\r\\n        mirrorNft = _mirrorNft;\\r\\n        earnedToken = _earnedToken;\\r\\n        rewardPerBlock = _rewardPerBlock;\\r\\n\\r\\n        uint256 decimalsRewardToken = 18;\\r\\n        if (earnedToken != address(0x0)) {\\r\\n            decimalsRewardToken = uint256(IERC20Metadata(earnedToken).decimals());\\r\\n        }\\r\\n        require(decimalsRewardToken < 30, \\\"Must be inferior to 30\\\");\\r\\n        PRECISION_FACTOR = uint256(10 ** (40 - decimalsRewardToken));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit NFTs and collect reward tokens (if any)\\r\\n     * @param _tokenIds: tokenIds to stake\\r\\n     */\\r\\n    function deposit(uint256[] memory _tokenIds) external payable nonReentrant {\\r\\n        require(startBlock > 0 && startBlock < block.number, \\\"Staking hasn't started yet\\\");\\r\\n        require(_tokenIds.length > 0, \\\"must add at least one tokenId\\\");\\r\\n        require(_tokenIds.length <= oneTimeLimit, \\\"cannot exceed one-time limit\\\");\\r\\n\\r\\n        _transferPerformanceFee();\\r\\n        _updatePool();\\r\\n\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        if (user.amount > 0) {\\r\\n            uint256 pending = (user.amount * accTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\\r\\n            if (pending > 0) {\\r\\n                require(availableRewardTokens() >= pending, \\\"Insufficient reward tokens\\\");\\r\\n                _transferToken(earnedToken, msg.sender, pending);\\r\\n                paidRewards += pending;\\r\\n                emit Claim(msg.sender, pending);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\r\\n            uint256 tokenId = _tokenIds[i];\\r\\n            require(IBrewlabsMirrorNft(address(stakingNft)).rarityOf(tokenId) > 2, \\\"Cannot stake common or uncommon\\\");\\r\\n\\r\\n            stakingNft.safeTransferFrom(msg.sender, address(this), tokenId);\\r\\n            mirrorNft.mint(msg.sender, tokenId);\\r\\n            user.tokenIds.push(tokenId);\\r\\n        }\\r\\n        user.amount = user.amount + _tokenIds.length;\\r\\n        user.rewardDebt = (user.amount * accTokenPerShare) / PRECISION_FACTOR;\\r\\n\\r\\n        totalStaked = totalStaked + _tokenIds.length;\\r\\n        emit Deposit(msg.sender, _tokenIds);\\r\\n\\r\\n        if (autoAdjustableForRewardRate) _updateRewardRate();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw staked tokenIds and collect reward tokens\\r\\n     * @param _amount: number of tokenIds to unstake\\r\\n     */\\r\\n    function withdraw(uint256 _amount) external payable nonReentrant {\\r\\n        require(_amount > 0, \\\"Amount should be greator than 0\\\");\\r\\n        require(_amount <= oneTimeLimit, \\\"cannot exceed one-time limit\\\");\\r\\n\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        require(user.amount >= _amount, \\\"Amount to withdraw too high\\\");\\r\\n\\r\\n        _transferPerformanceFee();\\r\\n        _updatePool();\\r\\n\\r\\n        if (user.amount > 0) {\\r\\n            uint256 pending = (user.amount * accTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\\r\\n            if (pending > 0) {\\r\\n                require(availableRewardTokens() >= pending, \\\"Insufficient reward tokens\\\");\\r\\n                _transferToken(earnedToken, msg.sender, pending);\\r\\n                paidRewards += pending;\\r\\n                emit Claim(msg.sender, pending);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256[] memory _tokenIds = new uint256[](_amount);\\r\\n        for (uint256 i = 0; i < _amount; i++) {\\r\\n            uint256 tokenId = user.tokenIds[user.tokenIds.length - 1];\\r\\n            user.tokenIds.pop();\\r\\n\\r\\n            _tokenIds[i] = tokenId;\\r\\n            mirrorNft.burn(tokenId);\\r\\n            stakingNft.safeTransferFrom(address(this), msg.sender, tokenId);\\r\\n        }\\r\\n        user.amount = user.amount - _amount;\\r\\n        user.rewardDebt = (user.amount * accTokenPerShare) / PRECISION_FACTOR;\\r\\n\\r\\n        totalStaked = totalStaked - _amount;\\r\\n        emit Withdraw(msg.sender, _tokenIds);\\r\\n\\r\\n        if (autoAdjustableForRewardRate) _updateRewardRate();\\r\\n    }\\r\\n\\r\\n    function withdrawNft(uint256 tokenId) external payable nonReentrant {\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        require(user.amount > 0, \\\"No Staked\\\");\\r\\n\\r\\n        _transferPerformanceFee();\\r\\n        _updatePool();\\r\\n\\r\\n        if (user.amount > 0) {\\r\\n            uint256 pending = (user.amount * accTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\\r\\n            if (pending > 0) {\\r\\n                require(availableRewardTokens() >= pending, \\\"Insufficient reward tokens\\\");\\r\\n                _transferToken(earnedToken, msg.sender, pending);\\r\\n                paidRewards += pending;\\r\\n                emit Claim(msg.sender, pending);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 idx = 0;\\r\\n        for (uint256 i = 0; i < user.tokenIds.length; i++) {\\r\\n            if (user.tokenIds[i] == tokenId) {\\r\\n                idx = i + 1;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(idx > 0, \\\"Did not stake this NFT\\\");\\r\\n\\r\\n        user.tokenIds[idx - 1] = user.tokenIds[user.tokenIds.length - 1];\\r\\n        user.tokenIds.pop();\\r\\n\\r\\n        mirrorNft.burn(tokenId);\\r\\n        stakingNft.safeTransferFrom(address(this), msg.sender, tokenId);\\r\\n\\r\\n        uint256[] memory _tokenIds = new uint256[](1);\\r\\n        _tokenIds[0] = tokenId;\\r\\n\\r\\n        user.amount = user.amount - 1;\\r\\n        totalStaked = totalStaked - 1;\\r\\n        emit Withdraw(msg.sender, _tokenIds);\\r\\n\\r\\n        if (autoAdjustableForRewardRate) _updateRewardRate();\\r\\n    }\\r\\n\\r\\n    function forceUnstake(address from, uint256 tokenId) external onlyAdmin nonReentrant {\\r\\n        UserInfo storage user = userInfo[from];\\r\\n        if (user.amount == 0) return;\\r\\n\\r\\n        _updatePool();\\r\\n\\r\\n        if (user.amount > 0) {\\r\\n            uint256 pending = (user.amount * accTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\\r\\n            if (pending > 0) {\\r\\n                if (availableRewardTokens() >= pending) {\\r\\n                    _transferToken(earnedToken, from, pending);\\r\\n                    emit Claim(from, pending);\\r\\n                }\\r\\n                paidRewards += pending;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 idx = 0;\\r\\n        for (uint256 i = 0; i < user.tokenIds.length; i++) {\\r\\n            if (user.tokenIds[i] == tokenId) {\\r\\n                idx = i + 1;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (idx > 0) {\\r\\n            user.tokenIds[idx - 1] = user.tokenIds[user.tokenIds.length - 1];\\r\\n            user.tokenIds.pop();\\r\\n\\r\\n            mirrorNft.burn(tokenId);\\r\\n            stakingNft.safeTransferFrom(address(this), from, tokenId);\\r\\n\\r\\n            uint256[] memory _tokenIds = new uint256[](1);\\r\\n            _tokenIds[0] = tokenId;\\r\\n\\r\\n            user.amount = user.amount - 1;\\r\\n            totalStaked = totalStaked - 1;\\r\\n            emit Withdraw(from, _tokenIds);\\r\\n        }\\r\\n        user.rewardDebt = (user.amount * accTokenPerShare) / PRECISION_FACTOR;\\r\\n    }\\r\\n\\r\\n    function claimReward() external payable nonReentrant {\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n\\r\\n        _transferPerformanceFee();\\r\\n        _updatePool();\\r\\n\\r\\n        if (user.amount == 0) return;\\r\\n\\r\\n        uint256 pending = (user.amount * accTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\\r\\n        if (pending > 0) {\\r\\n            require(availableRewardTokens() >= pending, \\\"Insufficient reward tokens\\\");\\r\\n            _transferToken(earnedToken, msg.sender, pending);\\r\\n            paidRewards += pending;\\r\\n        }\\r\\n\\r\\n        user.rewardDebt = (user.amount * accTokenPerShare) / PRECISION_FACTOR;\\r\\n        emit Claim(msg.sender, pending);\\r\\n\\r\\n        if (autoAdjustableForRewardRate) _updateRewardRate();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw staked NFTs without caring about rewards\\r\\n     * @dev Needs to be for emergency.\\r\\n     */\\r\\n    function emergencyWithdraw() external nonReentrant {\\r\\n        UserInfo storage user = userInfo[msg.sender];\\r\\n        uint256 _amount = user.amount;\\r\\n        if (_amount > oneTimeLimit) _amount = oneTimeLimit;\\r\\n\\r\\n        uint256 pending = (user.amount * accTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\\r\\n        if (shouldTotalPaid >= pending) shouldTotalPaid -= pending;\\r\\n\\r\\n        uint256[] memory _tokenIds = new uint256[](_amount);\\r\\n        for (uint256 i = 0; i < _amount; i++) {\\r\\n            uint256 tokenId = user.tokenIds[user.tokenIds.length - 1];\\r\\n            user.tokenIds.pop();\\r\\n\\r\\n            _tokenIds[i] = tokenId;\\r\\n            mirrorNft.burn(tokenId);\\r\\n            stakingNft.safeTransferFrom(address(this), msg.sender, tokenId);\\r\\n        }\\r\\n        user.amount = user.amount - _amount;\\r\\n        user.rewardDebt = (user.amount * accTokenPerShare) / PRECISION_FACTOR;\\r\\n        totalStaked = totalStaked - _amount;\\r\\n\\r\\n        emit EmergencyWithdraw(msg.sender, _tokenIds);\\r\\n    }\\r\\n\\r\\n    function stakedInfo(address _user) external view returns (uint256, uint256[] memory) {\\r\\n        return (userInfo[_user].amount, userInfo[_user].tokenIds);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Available amount of reward token\\r\\n     */\\r\\n    function availableRewardTokens() public view returns (uint256) {\\r\\n        if (earnedToken == address(0x0)) return address(this).balance;\\r\\n        return IERC20(earnedToken).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function insufficientRewards() external view returns (uint256) {\\r\\n        uint256 adjustedShouldTotalPaid = shouldTotalPaid;\\r\\n        uint256 remainRewards = availableRewardTokens() + paidRewards;\\r\\n\\r\\n        if (startBlock == 0) {\\r\\n            adjustedShouldTotalPaid += rewardPerBlock * duration * BLOCKS_PER_DAY;\\r\\n        } else {\\r\\n            uint256 remainBlocks = _getMultiplier(lastRewardBlock, bonusEndBlock);\\r\\n            adjustedShouldTotalPaid += rewardPerBlock * remainBlocks;\\r\\n        }\\r\\n\\r\\n        if (remainRewards >= adjustedShouldTotalPaid) return 0;\\r\\n        return adjustedShouldTotalPaid - remainRewards;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice View function to see pending reward on frontend.\\r\\n     * @param _user: user address\\r\\n     * @return Pending reward for a given user\\r\\n     */\\r\\n    function pendingReward(address _user) external view returns (uint256) {\\r\\n        UserInfo storage user = userInfo[_user];\\r\\n\\r\\n        uint256 adjustedTokenPerShare = accTokenPerShare;\\r\\n        if (block.number > lastRewardBlock && totalStaked > 0 && lastRewardBlock > 0) {\\r\\n            uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\\r\\n            uint256 rewards = multiplier * rewardPerBlock;\\r\\n\\r\\n            adjustedTokenPerShare += (rewards * PRECISION_FACTOR) / totalStaked;\\r\\n        }\\r\\n\\r\\n        return (user.amount * adjustedTokenPerShare) / PRECISION_FACTOR - user.rewardDebt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Admin Methods\\r\\n     */\\r\\n    function increaseEmissionRate(uint256 _amount) external onlyOwner {\\r\\n        require(startBlock > 0, \\\"pool is not started\\\");\\r\\n        require(bonusEndBlock > block.number, \\\"pool was already finished\\\");\\r\\n        require(_amount > 0, \\\"invalid amount\\\");\\r\\n\\r\\n        _updatePool();\\r\\n\\r\\n        if (earnedToken == address(0x0)) return;\\r\\n        IERC20(earnedToken).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n\\r\\n        uint256 remainRewards = availableRewardTokens() + paidRewards;\\r\\n        if (remainRewards > shouldTotalPaid) {\\r\\n            remainRewards = remainRewards - shouldTotalPaid;\\r\\n\\r\\n            uint256 remainBlocks = bonusEndBlock - block.number;\\r\\n            rewardPerBlock = remainRewards / remainBlocks;\\r\\n            emit NewRewardPerBlock(rewardPerBlock);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _updateRewardRate() internal {\\r\\n        if (bonusEndBlock <= block.number) return;\\r\\n\\r\\n        uint256 remainRewards = availableRewardTokens() + paidRewards;\\r\\n        if (remainRewards > shouldTotalPaid) {\\r\\n            remainRewards = remainRewards - shouldTotalPaid;\\r\\n\\r\\n            uint256 remainBlocks = bonusEndBlock - block.number;\\r\\n            rewardPerBlock = remainRewards / remainBlocks;\\r\\n            emit NewRewardPerBlock(rewardPerBlock);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw reward token\\r\\n     * @dev Only callable by owner. Needs to be for emergency.\\r\\n     */\\r\\n    function emergencyRewardWithdraw(uint256 _amount) external onlyOwner {\\r\\n        require(block.number > bonusEndBlock, \\\"Pool is running\\\");\\r\\n        require(availableRewardTokens() >= _amount, \\\"Insufficient reward tokens\\\");\\r\\n\\r\\n        if (_amount == 0) _amount = availableRewardTokens();\\r\\n        _transferToken(earnedToken, msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function startReward() external onlyOwner {\\r\\n        require(startBlock == 0, \\\"Pool was already started\\\");\\r\\n\\r\\n        startBlock = block.number + 100;\\r\\n        bonusEndBlock = startBlock + duration * BLOCKS_PER_DAY;\\r\\n        lastRewardBlock = startBlock;\\r\\n\\r\\n        emit NewStartAndEndBlocks(startBlock, bonusEndBlock);\\r\\n    }\\r\\n\\r\\n    function stopReward() external onlyOwner {\\r\\n        _updatePool();\\r\\n\\r\\n        uint256 remainRewards = availableRewardTokens() + paidRewards;\\r\\n        if (remainRewards > shouldTotalPaid) {\\r\\n            remainRewards = remainRewards - shouldTotalPaid;\\r\\n            _transferToken(earnedToken, msg.sender, remainRewards);\\r\\n        }\\r\\n\\r\\n        bonusEndBlock = block.number;\\r\\n        emit RewardsStop(bonusEndBlock);\\r\\n    }\\r\\n\\r\\n    function updateEndBlock(uint256 _endBlock) external onlyOwner {\\r\\n        require(startBlock > 0, \\\"Pool is not started\\\");\\r\\n        require(bonusEndBlock > block.number, \\\"Pool was already finished\\\");\\r\\n        require(_endBlock > block.number && _endBlock > startBlock, \\\"Invalid end block\\\");\\r\\n\\r\\n        bonusEndBlock = _endBlock;\\r\\n        emit EndBlockUpdated(_endBlock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update reward per block\\r\\n     * @dev Only callable by owner.\\r\\n     * @param _rewardPerBlock: the reward per block\\r\\n     */\\r\\n    function updateRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\\r\\n        _updatePool();\\r\\n\\r\\n        rewardPerBlock = _rewardPerBlock;\\r\\n        emit NewRewardPerBlock(_rewardPerBlock);\\r\\n    }\\r\\n\\r\\n    function setDuration(uint256 _duration) external onlyOwner {\\r\\n        require(_duration >= 30, \\\"lower limit reached\\\");\\r\\n\\r\\n        duration = _duration;\\r\\n        if (startBlock > 0) {\\r\\n            bonusEndBlock = startBlock + duration * BLOCKS_PER_DAY;\\r\\n            require(bonusEndBlock > block.number, \\\"invalid duration\\\");\\r\\n        }\\r\\n        emit DurationUpdated(_duration);\\r\\n    }\\r\\n\\r\\n    function setOneTimeLimit(uint256 _limit) external onlyOwner {\\r\\n        require(_limit < 200, \\\"too many\\\");\\r\\n        oneTimeLimit = _limit;\\r\\n        emit SetOneTimeLimit(_limit);\\r\\n    }\\r\\n\\r\\n    function setAutoAdjustableForRewardRate(bool _status) external onlyOwner {\\r\\n        autoAdjustableForRewardRate = _status;\\r\\n        emit SetAutoAdjustableForRewardRate(_status);\\r\\n    }\\r\\n\\r\\n    function setAdmin(address _addr) external onlyOwner {\\r\\n        admin = _addr;\\r\\n        emit SetAdmin(_addr);\\r\\n    }\\r\\n\\r\\n    function setServiceInfo(address _treasury, uint256 _fee) external {\\r\\n        require(msg.sender == treasury, \\\"setServiceInfo: FORBIDDEN\\\");\\r\\n        require(_treasury != address(0x0), \\\"Invalid address\\\");\\r\\n\\r\\n        treasury = _treasury;\\r\\n        performanceFee = _fee;\\r\\n        emit ServiceInfoUpadted(_treasury, _fee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice It allows the admin to recover wrong tokens sent to the contract\\r\\n     * @param _token: the address of the token to withdraw\\r\\n     * @dev This function is only callable by admin.\\r\\n     */\\r\\n    function rescueTokens(address _token) external onlyOwner {\\r\\n        require(_token != address(earnedToken), \\\"Cannot be reward token\\\");\\r\\n\\r\\n        uint256 amount = address(this).balance;\\r\\n        if (_token == address(0x0)) {\\r\\n            payable(msg.sender).transfer(amount);\\r\\n        } else {\\r\\n            amount = IERC20(_token).balanceOf(address(this));\\r\\n            IERC20(_token).safeTransfer(address(msg.sender), amount);\\r\\n        }\\r\\n\\r\\n        emit AdminTokenRecovered(_token, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update reward variables of the given pool to be up-to-date.\\r\\n     */\\r\\n    function _updatePool() internal {\\r\\n        if (block.number <= lastRewardBlock || lastRewardBlock == 0) return;\\r\\n        if (totalStaked == 0) {\\r\\n            lastRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 multiplier = _getMultiplier(lastRewardBlock, block.number);\\r\\n        uint256 _reward = multiplier * rewardPerBlock;\\r\\n        accTokenPerShare += (_reward * PRECISION_FACTOR) / totalStaked;\\r\\n        lastRewardBlock = block.number;\\r\\n\\r\\n        shouldTotalPaid += _reward;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return reward multiplier over the given _from to _to block.\\r\\n     * @param _from: block to start\\r\\n     * @param _to: block to finish\\r\\n     */\\r\\n    function _getMultiplier(uint256 _from, uint256 _to) internal view returns (uint256) {\\r\\n        if (_to <= bonusEndBlock) {\\r\\n            return _to - _from;\\r\\n        } else if (_from >= bonusEndBlock) {\\r\\n            return 0;\\r\\n        } else {\\r\\n            return bonusEndBlock - _from;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _transferToken(address _token, address _to, uint256 _amount) internal {\\r\\n        if (_token == address(0x0)) {\\r\\n            payable(_to).transfer(_amount);\\r\\n        } else {\\r\\n            IERC20(_token).safeTransfer(_to, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _transferPerformanceFee() internal {\\r\\n        require(msg.value >= performanceFee, \\\"should pay small gas to compound or harvest\\\");\\r\\n\\r\\n        payable(treasury).transfer(performanceFee);\\r\\n        if (msg.value > performanceFee) {\\r\\n            payable(msg.sender).transfer(msg.value - performanceFee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * onERC721Received(address operator, address from, uint256 tokenId, bytes data) \u2192 bytes4\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     */\\r\\n    function onERC721Received(address, address, uint256, bytes calldata) external view override returns (bytes4) {\\r\\n        require(msg.sender == address(stakingNft), \\\"not enabled NFT\\\");\\r\\n        return _ERC721_RECEIVED;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenRecovered\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"DurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"EndBlockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"NewRewardPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"NewStartAndEndBlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RewardsStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"ServiceInfoUpadted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetAutoAdjustableForRewardRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"SetOneTimeLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accTokenPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAdjustableForRewardRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableRewardTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRewardWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"forceUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_stakingNft\",\"type\":\"address\"},{\"internalType\":\"contract IBrewlabsMirrorNft\",\"name\":\"_mirrorNft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_earnedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insufficientRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mirrorNft\",\"outputs\":[{\"internalType\":\"contract IBrewlabsMirrorNft\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneTimeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAutoAdjustableForRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setOneTimeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setServiceInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"stakedInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingNft\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"}],\"name\":\"updateEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawNft\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BrewlabsNftStaking", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}