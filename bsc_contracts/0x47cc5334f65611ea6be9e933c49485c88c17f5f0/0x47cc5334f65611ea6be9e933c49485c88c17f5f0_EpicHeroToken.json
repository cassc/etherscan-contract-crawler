{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = address(0);\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"zero address\");\r\n        require(recipient != address(0), \"zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"zero address\");\r\n        require(spender != address(0), \"zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\ninterface IDividendPayingToken {\r\n    function dividendOf(address _owner) external view returns(uint256);\r\n    function withdrawDividend() external;\r\n    function withdrawableDividendOf(address _owner) external view returns(uint256);\r\n    function withdrawnDividendOf(address _owner) external view returns(uint256);\r\n    function accumulativeDividendOf(address _owner) external view returns(uint256);\r\n    event DividendsDistributed(address indexed from, uint256 weiAmount);\r\n    event DividendWithdrawn(address indexed to, uint256 weiAmount);\r\n}\r\n\r\ncontract DividendPayingToken is ERC20, IDividendPayingToken {\r\n    using SafeMath for uint256;\r\n    using SafeMathUint for uint256;\r\n    using SafeMathInt for int256;\r\n\r\n    uint256 constant internal magnitude = 2**128;\r\n\r\n    uint256 internal magnifiedDividendPerShare;\r\n    uint256 internal lastAmount;\r\n\r\n    address public adminAddress = 0x8E377Cc27aBfB273313791097bcCe590a84F1F97;\r\n    address internal onlyCaller;\r\n\r\n    address public dividendToken;\r\n    uint256 public minTokenBeforeSendDividend = 0;\r\n\r\n    mapping(address => int256) internal magnifiedDividendCorrections;\r\n    mapping(address => uint256) internal withdrawnDividends;\r\n\r\n    uint256 public totalDividendsDistributed;\r\n\r\n    constructor(string memory _name, string memory _symbol, address _token) ERC20(_name, _symbol) {\r\n        dividendToken = _token;\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    function distributeDividends(uint256 amount) public {\r\n        require(msg.sender == onlyCaller, \"Only caller\");\r\n        require(totalSupply() > 0);\r\n\r\n        if (amount > 0) {\r\n            magnifiedDividendPerShare = magnifiedDividendPerShare.add(\r\n                (amount).mul(magnitude) / totalSupply()\r\n            );\r\n            emit DividendsDistributed(msg.sender, amount);\r\n\r\n            totalDividendsDistributed = totalDividendsDistributed.add(amount);\r\n        }\r\n    }\r\n\r\n    function withdrawDividend() public virtual override {\r\n        _withdrawDividendOfUser(payable(msg.sender));\r\n    }\r\n\r\n    function setOnlyCaller(address _newCaller) external virtual {\r\n        require(tx.origin == adminAddress, \"Only admin\");\r\n        onlyCaller = _newCaller;\r\n    }\r\n\r\n    function setDividendTokenAddress(address newToken) external virtual {\r\n        require(tx.origin == adminAddress, \"Only admin\");\r\n        dividendToken = newToken;\r\n    }\r\n\r\n    function setMinTokenBeforeSendDividend(uint256 newAmount) external virtual {\r\n        require(tx.origin == adminAddress, \"Only admin\");\r\n        minTokenBeforeSendDividend = newAmount;\r\n    }\r\n\r\n    function retrieveTokens(address token, uint amount) external virtual {\r\n        require(tx.origin == adminAddress, \"Only admin\");\r\n        require(IERC20(token).transfer(msg.sender, amount), \"Transfer failed\");\r\n    }\r\n\r\n    function retrieveBNB(uint amount) external virtual {\r\n        require(tx.origin == adminAddress, \"Only admin\");\r\n        (bool success,) = payable(msg.sender).call{ value: amount }(\"\");\r\n        require(success, \"Failed to retrieve BNB\");\r\n    }\r\n\r\n    function _withdrawDividendOfUser(address payable user) internal returns (uint256) {\r\n        uint256 _withdrawableDividend = withdrawableDividendOf(user);\r\n        if (_withdrawableDividend > minTokenBeforeSendDividend) {\r\n            withdrawnDividends[user] = withdrawnDividends[user].add(_withdrawableDividend);\r\n            emit DividendWithdrawn(user, _withdrawableDividend);\r\n            bool success = IERC20(dividendToken).transfer(user, _withdrawableDividend);\r\n\r\n            if(!success) {\r\n                withdrawnDividends[user] = withdrawnDividends[user].sub(_withdrawableDividend);\r\n                return 0;\r\n            }\r\n\r\n            return _withdrawableDividend;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function dividendOf(address _owner) public view override returns(uint256) {\r\n        return withdrawableDividendOf(_owner);\r\n    }\r\n\r\n    function withdrawableDividendOf(address _owner) public view override returns(uint256) {\r\n        return accumulativeDividendOf(_owner).sub(withdrawnDividends[_owner]);\r\n    }\r\n\r\n    function withdrawnDividendOf(address _owner) public view override returns(uint256) {\r\n        return withdrawnDividends[_owner];\r\n    }\r\n\r\n    function accumulativeDividendOf(address _owner) public view override returns(uint256) {\r\n        return magnifiedDividendPerShare.mul(balanceOf(_owner)).toInt256Safe()\r\n        .add(magnifiedDividendCorrections[_owner]).toUint256Safe() / magnitude;\r\n    }\r\n\r\n    function _transfer(address, address, uint256) internal virtual override {\r\n        require(false, \"No allowed\");\r\n    }\r\n\r\n    function _mint(address account, uint256 value) internal override {\r\n        super._mint(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n        .sub( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal override {\r\n        super._burn(account, value);\r\n\r\n        magnifiedDividendCorrections[account] = magnifiedDividendCorrections[account]\r\n        .add( (magnifiedDividendPerShare.mul(value)).toInt256Safe() );\r\n    }\r\n\r\n    function _setBalance(address account, uint256 newBalance) internal {\r\n        uint256 currentBalance = balanceOf(account);\r\n\r\n        if(newBalance > currentBalance) {\r\n            uint256 mintAmount = newBalance.sub(currentBalance);\r\n            _mint(account, mintAmount);\r\n        } else if(newBalance < currentBalance) {\r\n            uint256 burnAmount = currentBalance.sub(newBalance);\r\n            _burn(account, burnAmount);\r\n        }\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\nlibrary IterableMapping {\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => uint) values;\r\n        mapping(address => uint) indexOf;\r\n        mapping(address => bool) inserted;\r\n    }\r\n\r\n    function get(Map storage map, address key) public view returns (uint) {\r\n        return map.values[key];\r\n    }\r\n\r\n    function getIndexOfKey(Map storage map, address key) public view returns (int) {\r\n        if(!map.inserted[key]) {\r\n            return -1;\r\n        }\r\n        return int(map.indexOf[key]);\r\n    }\r\n\r\n    function getKeyAtIndex(Map storage map, uint index) public view returns (address) {\r\n        return map.keys[index];\r\n    }\r\n\r\n    function size(Map storage map) public view returns (uint) {\r\n        return map.keys.length;\r\n    }\r\n\r\n    function set(Map storage map, address key, uint val) public {\r\n        if (map.inserted[key]) {\r\n            map.values[key] = val;\r\n        } else {\r\n            map.inserted[key] = true;\r\n            map.values[key] = val;\r\n            map.indexOf[key] = map.keys.length;\r\n            map.keys.push(key);\r\n        }\r\n    }\r\n\r\n    function remove(Map storage map, address key) public {\r\n        if (!map.inserted[key]) {\r\n            return;\r\n        }\r\n\r\n        delete map.inserted[key];\r\n        delete map.values[key];\r\n\r\n        uint index = map.indexOf[key];\r\n        uint lastIndex = map.keys.length - 1;\r\n        address lastKey = map.keys[lastIndex];\r\n\r\n        map.indexOf[lastKey] = index;\r\n        delete map.indexOf[key];\r\n\r\n        map.keys[index] = lastKey;\r\n        map.keys.pop();\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary SafeMathInt {\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when multiplying INT256_MIN with -1\r\n        // https://github.com/RequestNetwork/requestNetwork/issues/43\r\n        require(!(a == - 2**255 && b == -1) && !(b == - 2**255 && a == -1));\r\n\r\n        int256 c = a * b;\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing INT256_MIN by -1\r\n        // https://github.com/RequestNetwork/requestNetwork/issues/43\r\n        require(!(a == - 2**255 && b == -1) && (b > 0));\r\n\r\n        return a / b;\r\n    }\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        require((b >= 0 && a - b <= a) || (b < 0 && a - b > a));\r\n\r\n        return a - b;\r\n    }\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0);\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n        int256 b = int256(a);\r\n        require(b >= 0);\r\n        return b;\r\n    }\r\n}\r\n\r\ncontract ThoreumDividendTracker is DividendPayingToken, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    using IterableMapping for IterableMapping.Map;\r\n\r\n    IterableMapping.Map private tokenHoldersMap;\r\n    uint256 public lastProcessedIndex;\r\n\r\n    uint256 public claimWait;\r\n    uint256 public minimumTokenBalanceForDividends;\r\n\r\n    mapping (address => bool) public excludedFromDividends;\r\n    mapping (address => uint256) public lastClaimTimes;\r\n\r\n    constructor() DividendPayingToken(\"EPICHERO_THOREUM_Dividend_Tracker\", \"EPICHERO_THOREUM_Dividend_Tracker\", 0x580dE58c1BD593A43DaDcF0A739d504621817c05) {\r\n        claimWait = 3600;\r\n        minimumTokenBalanceForDividends = 200000 * (10**18); //must hold 10000+ tokens\r\n    }\r\n\r\n    function setDividendTokenAddress(address newToken) external override onlyOwner {\r\n        dividendToken = newToken;\r\n    }\r\n\r\n    function updateMinimumTokenBalanceForDividends(uint256 _newMinimumBalance) external onlyOwner {\r\n        minimumTokenBalanceForDividends = _newMinimumBalance;\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n        excludedFromDividends[account] = true;\r\n\r\n        _setBalance(account, 0);\r\n        tokenHoldersMap.remove(account);\r\n\r\n        emit ExcludeFromDividends(account);\r\n    }\r\n\r\n    function updateClaimWait(uint256 newClaimWait) external onlyOwner {\r\n        require(newClaimWait >= 60 && newClaimWait <= 86400, \"wrong\");\r\n        claimWait = newClaimWait;\r\n    }\r\n\r\n    function setBalance(address payable account, uint256 newBalance, bool isProcess) external onlyOwner {\r\n        if(excludedFromDividends[account]) {\r\n            return;\r\n        }\r\n\r\n        if(newBalance >= minimumTokenBalanceForDividends) {\r\n            _setBalance(account, newBalance);\r\n            tokenHoldersMap.set(account, newBalance);\r\n        }\r\n        else {\r\n            _setBalance(account, 0);\r\n            tokenHoldersMap.remove(account);\r\n        }\r\n\r\n        if(isProcess){\r\n            processAccount(account, true);\r\n        }\r\n    }\r\n\r\n    function processAccount(address payable account, bool automatic) public onlyOwner returns (bool) {\r\n        uint256 amount = _withdrawDividendOfUser(account);\r\n\r\n        if(amount > 0) {\r\n            lastClaimTimes[account] = block.timestamp;\r\n            emit Claim(account, amount, automatic);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function process(uint256 gas) public returns (uint256, uint256, uint256) {\r\n        uint256 numberOfTokenHolders = tokenHoldersMap.keys.length;\r\n\r\n        if(numberOfTokenHolders == 0) {\r\n            return (0, 0, lastProcessedIndex);\r\n        }\r\n\r\n        uint256 _lastProcessedIndex = lastProcessedIndex;\r\n\r\n        uint256 gasUsed = 0;\r\n\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n        uint256 claims = 0;\r\n\r\n        while(gasUsed < gas && iterations < numberOfTokenHolders) {\r\n            _lastProcessedIndex++;\r\n\r\n            if(_lastProcessedIndex >= tokenHoldersMap.keys.length) {\r\n                _lastProcessedIndex = 0;\r\n            }\r\n\r\n            address account = tokenHoldersMap.keys[_lastProcessedIndex];\r\n\r\n            if(_canAutoClaim(lastClaimTimes[account])) {\r\n                if(processAccount(payable(account), true)) {\r\n                    claims++;\r\n                }\r\n            }\r\n\r\n            iterations++;\r\n\r\n            uint256 newGasLeft = gasleft();\r\n\r\n            if(gasLeft > newGasLeft) {\r\n                gasUsed = gasUsed.add(gasLeft.sub(newGasLeft));\r\n            }\r\n\r\n            gasLeft = newGasLeft;\r\n        }\r\n\r\n        lastProcessedIndex = _lastProcessedIndex;\r\n\r\n        return (iterations, claims, lastProcessedIndex);\r\n    }\r\n\r\n    function _transfer(address, address, uint256) pure internal override {\r\n        require(false, \"No allowed\");\r\n    }\r\n\r\n    function withdrawDividend() pure public override {\r\n        require(false, \"disabled\");\r\n    }\r\n\r\n    function getNumberOfTokenHolders() external view returns(uint256) {\r\n        return tokenHoldersMap.keys.length;\r\n    }\r\n\r\n    function getAccount(address _account)\r\n    public view returns (\r\n        address account,\r\n        int256 index,\r\n        int256 iterationsUntilProcessed,\r\n        uint256 withdrawableDividends,\r\n        uint256 totalDividends,\r\n        uint256 lastClaimTime,\r\n        uint256 nextClaimTime,\r\n        uint256 secondsUntilAutoClaimAvailable) {\r\n        account = _account;\r\n\r\n        index = tokenHoldersMap.getIndexOfKey(account);\r\n\r\n        iterationsUntilProcessed = -1;\r\n\r\n        if(index >= 0) {\r\n            if(uint256(index) > lastProcessedIndex) {\r\n                iterationsUntilProcessed = index.sub(int256(lastProcessedIndex));\r\n            }\r\n            else {\r\n                uint256 processesUntilEndOfArray = tokenHoldersMap.keys.length > lastProcessedIndex ?\r\n                tokenHoldersMap.keys.length.sub(lastProcessedIndex) :\r\n                0;\r\n\r\n\r\n                iterationsUntilProcessed = index.add(int256(processesUntilEndOfArray));\r\n            }\r\n        }\r\n\r\n\r\n        withdrawableDividends = withdrawableDividendOf(account);\r\n        totalDividends = accumulativeDividendOf(account);\r\n\r\n        lastClaimTime = lastClaimTimes[account];\r\n\r\n        nextClaimTime = lastClaimTime > 0 ?\r\n        lastClaimTime.add(claimWait) :\r\n        0;\r\n\r\n        secondsUntilAutoClaimAvailable = nextClaimTime > block.timestamp ?\r\n        nextClaimTime.sub(block.timestamp) :\r\n        0;\r\n    }\r\n\r\n    function getAccountAtIndex(uint256 index)\r\n    public view returns (\r\n        address,\r\n        int256,\r\n        int256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        uint256) {\r\n        if(index >= tokenHoldersMap.size()) {\r\n            return (0x0000000000000000000000000000000000000000, -1, -1, 0, 0, 0, 0, 0);\r\n        }\r\n\r\n        address account = tokenHoldersMap.getKeyAtIndex(index);\r\n\r\n        return getAccount(account);\r\n    }\r\n\r\n    function _canAutoClaim(uint256 lastClaimTime) private view returns (bool) {\r\n        if(lastClaimTime > block.timestamp)  {\r\n            return false;\r\n        }\r\n\r\n        return block.timestamp.sub(lastClaimTime) >= claimWait;\r\n    }\r\n\r\n    event ExcludeFromDividends(address indexed account);\r\n    event Claim(address indexed account, uint256 amount, bool indexed automatic);\r\n}\r\n\r\ncontract EpicHeroToken is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant MAX_FEE_RATE = 2500;\r\n\r\n    bool private swapping;\r\n    bool public tradingIsEnabled = false;\r\n\r\n    bool public sendThoreumInTx = false;\r\n    bool public feesOnNormalTransfers = false;\r\n\r\n    IDEXRouter public dexRouter;\r\n    address dexPair;\r\n\r\n    address deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address public teamWallet = 0x9bf2891Fa94F6d9954d6EAfA89C759b3C9dDc05A;\r\n    address public marketingWallet = 0x02Ad160Cb2e10984Ad492Df2AcE18ad725b8A70C;\r\n\r\n    address public thoreumDividendToken = 0x580dE58c1BD593A43DaDcF0A739d504621817c05;\r\n    ThoreumDividendTracker public thoreumDividendTracker;\r\n\r\n    address public wbnbReflectToken = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\r\n    address public wbnbReflectTracker = 0x4FBEe542a42216e5aBf8b361D975d8f55c4D01A9;\r\n    address public toBurnAllianceToken = 0x580dE58c1BD593A43DaDcF0A739d504621817c05;\r\n    address public gameTreasury = 0xb7497Bb4dEC6b4Be62f77dBdEb90F4E179d8fcFe;\r\n\r\n    uint256 public buyBackFee = 0;\r\n    uint256 public liquidityFee = 0;\r\n    uint256 public toBurnAllianceFee = 0;\r\n\r\n    uint256 public toBurnTokenFee = 25;\r\n    uint256 public wbnbReflectRewardsFee = 125;\r\n    uint256 public thoreumDividendRewardsFee = 75;\r\n    uint256 public marketingFee = 250;\r\n    uint256 public gameTreasuryFee = 25;\r\n\r\n    uint256 public sellFeeIncreaseFactor = 300;\r\n    uint256 public gasForProcessing = 1000000;\r\n\r\n    uint256 public totalFees;\r\n\r\n    uint256 public maxBuyTransactionAmount = 1000000 * 10 ** 18;\r\n    uint256 public maxSellTransactionAmount = 100000 * 10 ** 18;\r\n    uint256 public swapTokensAtAmount = 50000 * 10 ** 18;\r\n    uint256 public maxWalletToken = 1000000000 * 10 ** 18;\r\n\r\n    uint256 public minBNBAfterBuyback = 1 * 10 ** 18;   //1 BNB\r\n    uint256 public minSellToTriggerBuyback = 1000 * 10 ** 18;\r\n    uint256 public buybackUpperLimitBNB = 1 * 10 ** 18;        //1 BNB\r\n\r\n    mapping (address => bool) public isExcludedFromFees;\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n    mapping (address => bool) isBlacklisted;\r\n\r\n    constructor() ERC20(\"EpicHero.io 3D NFT\", \"EPICHERO\") {\r\n        thoreumDividendTracker = new ThoreumDividendTracker();\r\n\r\n        IDEXRouter _dexRouter = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n        address _dexPair = IDEXFactory(_dexRouter.factory()).createPair(address(this), _dexRouter.WETH());\r\n\r\n        dexRouter = _dexRouter;\r\n        dexPair = _dexPair;\r\n\r\n        _setAutomatedMarketMakerPair(_dexPair, true);\r\n\r\n        excludeFromDividend(address(thoreumDividendTracker));\r\n        excludeFromDividend(address(this));\r\n        excludeFromDividend(address(_dexRouter));\r\n        excludeFromDividend(deadAddress);\r\n\r\n        excludeFromFees(marketingWallet, true);\r\n        excludeFromFees(teamWallet, true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(owner(), true);\r\n\r\n        _mint(owner(), 1000000000 * (10**18));\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    function afterPreSale() external onlyOwner {\r\n        _updateTotalFee();\r\n        tradingIsEnabled = true;\r\n    }\r\n\r\n    function prepareForPartner(address _partnerOrExchangeAddress) external onlyOwner {\r\n        thoreumDividendTracker.excludeFromDividends(_partnerOrExchangeAddress);\r\n        excludeFromFees(_partnerOrExchangeAddress, true);\r\n    }\r\n\r\n    function setMaxBuyTransaction(uint256 _maxTxn) external onlyOwner {\r\n        maxBuyTransactionAmount = _maxTxn;\r\n    }\r\n\r\n    function setMaxSellTransaction(uint256 _maxTxn) external onlyOwner {\r\n        maxSellTransactionAmount = _maxTxn;\r\n    }\r\n\r\n    function setThoreumDividendToken(address _newContract) external onlyOwner {\r\n        thoreumDividendToken = _newContract;\r\n        thoreumDividendTracker.setDividendTokenAddress(_newContract);\r\n    }\r\n\r\n    function setMinThoreumBeforeSendDividend(uint256 _newAmount) external onlyOwner {\r\n        thoreumDividendTracker.setMinTokenBeforeSendDividend(_newAmount);\r\n    }\r\n\r\n    function setSendThoreumInTx(bool _newStatus) external onlyOwner {\r\n        sendThoreumInTx = _newStatus;\r\n    }\r\n\r\n    function setWbnbReflectToken(address _newContract) external onlyOwner {\r\n        wbnbReflectToken = _newContract;\r\n    }\r\n\r\n    function setWbnbReflectTracker(address _newContract) external onlyOwner {\r\n        wbnbReflectTracker = _newContract;\r\n    }\r\n\r\n    function setTeamWallet(address _newWallet) external onlyOwner {\r\n        excludeFromFees(_newWallet, true);\r\n        teamWallet = _newWallet;\r\n    }\r\n\r\n    function setMarketingWallet(address _newWallet) external onlyOwner {\r\n        excludeFromFees(_newWallet, true);\r\n        marketingWallet = _newWallet;\r\n    }\r\n\r\n    function setBurnAllianceToken(address _newAddress) external onlyOwner {\r\n        toBurnAllianceToken = _newAddress;\r\n    }\r\n\r\n    function setToBurnAllianceFee(uint256 newFee) external onlyOwner {\r\n        require(newFee <= MAX_FEE_RATE, \"wrong\");\r\n        toBurnAllianceFee = newFee;\r\n        _updateTotalFee();\r\n    }\r\n\r\n    function setToBurnTokenFee(uint256 newFee) external onlyOwner {\r\n        require(newFee <= MAX_FEE_RATE, \"wrong\");\r\n        toBurnTokenFee = newFee;\r\n        _updateTotalFee();\r\n    }\r\n\r\n    function setGameTreasuryFee(uint256 newFee) external onlyOwner {\r\n        require(newFee <= MAX_FEE_RATE, \"wrong\");\r\n        gameTreasuryFee = newFee;\r\n        _updateTotalFee();\r\n    }\r\n\r\n    function setMaxWalletToken(uint256 _maxToken) external onlyOwner {\r\n        maxWalletToken = _maxToken;\r\n    }\r\n\r\n    function setSwapTokensAtAmount(uint256 _swapAmount) external onlyOwner {\r\n        swapTokensAtAmount = _swapAmount;\r\n    }\r\n\r\n    function setSellTransactionMultiplier(uint256 _multiplier) external onlyOwner {\r\n        sellFeeIncreaseFactor = _multiplier;\r\n    }\r\n\r\n    function setTradingIsEnabled(bool _enabled) external onlyOwner {\r\n        tradingIsEnabled = _enabled;\r\n    }\r\n\r\n    function setMinBNBAfterBuyback(uint256 _newAmount) public onlyOwner {\r\n        require(_newAmount >= 0, \"newAmount error\");\r\n        minBNBAfterBuyback = _newAmount;\r\n    }\r\n\r\n    function setMinSellToTriggerBuyback(uint256 _newAmount) public onlyOwner {\r\n        require(_newAmount > 0, \"newAmount error\");\r\n        minSellToTriggerBuyback = _newAmount;\r\n    }\r\n\r\n    function setBuyBackUpperLimitBNB(uint256 buyBackLimit) external onlyOwner() {\r\n        require(buyBackLimit > 0, \"buyBackLimit error\");\r\n        buybackUpperLimitBNB = buyBackLimit;\r\n    }\r\n\r\n    function setThoreumDividendTracker(address newAddress) external onlyOwner {\r\n        ThoreumDividendTracker newThoreumDividendTracker = ThoreumDividendTracker(payable(newAddress));\r\n\r\n        require(newThoreumDividendTracker.owner() == address(this), \"must be owned by EpicHero\");\r\n\r\n        newThoreumDividendTracker.excludeFromDividends(address(newThoreumDividendTracker));\r\n        newThoreumDividendTracker.excludeFromDividends(address(this));\r\n        newThoreumDividendTracker.excludeFromDividends(address(dexRouter));\r\n        newThoreumDividendTracker.excludeFromDividends(address(deadAddress));\r\n\r\n        thoreumDividendTracker = newThoreumDividendTracker;\r\n    }\r\n\r\n    function setThoreumDividendRewardFee(uint8 newFee) external onlyOwner {\r\n        require(newFee <= MAX_FEE_RATE, \"wrong\");\r\n        thoreumDividendRewardsFee = newFee;\r\n        _updateTotalFee();\r\n    }\r\n\r\n    function setWbnbReflectRewardFee(uint8 newFee) external onlyOwner {\r\n        require(newFee <= MAX_FEE_RATE, \"wrong\");\r\n        wbnbReflectRewardsFee = newFee;\r\n        _updateTotalFee();\r\n    }\r\n\r\n    function setMarketingFee(uint8 newFee) external onlyOwner {\r\n        require(newFee <= MAX_FEE_RATE, \"wrong\");\r\n        marketingFee = newFee;\r\n        _updateTotalFee();\r\n    }\r\n\r\n    function setBuyBackFee(uint8 newFee) external onlyOwner {\r\n        require(newFee <= MAX_FEE_RATE, \"wrong\");\r\n        buyBackFee = newFee;\r\n        _updateTotalFee();\r\n    }\r\n\r\n    function setLiquidityFee(uint8 newFee) external onlyOwner {\r\n        require(newFee <= MAX_FEE_RATE, \"wrong\");\r\n        liquidityFee = newFee;\r\n        _updateTotalFee();\r\n    }\r\n\r\n    function setDexRouter(address newAddress) external onlyOwner {\r\n        dexRouter = IDEXRouter(newAddress);\r\n    }\r\n\r\n    function setIsBlacklisted(address adr, bool blacklisted) external onlyOwner {\r\n        isBlacklisted[adr] = blacklisted;\r\n    }\r\n\r\n    function setFeesOnNormalTransfers(bool _enabled) external onlyOwner {\r\n        feesOnNormalTransfers = _enabled;\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\r\n        require(pair != dexPair, \"cannot be removed\");\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private onlyOwner {\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        if(value) {\r\n            thoreumDividendTracker.excludeFromDividends(pair);\r\n        }\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function setGasForProcessing(uint256 newValue) external onlyOwner {\r\n        gasForProcessing = newValue;\r\n    }\r\n\r\n    function setMinimumBalanceForDividends(uint256 newMinimumBalance) external onlyOwner {\r\n        thoreumDividendTracker.updateMinimumTokenBalanceForDividends(newMinimumBalance);\r\n    }\r\n\r\n    function setClaimWait(uint256 claimWait) external onlyOwner {\r\n        thoreumDividendTracker.updateClaimWait(claimWait);\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        require(isExcludedFromFees[account] != excluded, \"Already excluded\");\r\n        isExcludedFromFees[account] = excluded;\r\n\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function excludeFromDividend(address account) public onlyOwner {\r\n        thoreumDividendTracker.excludeFromDividends(address(account));\r\n    }\r\n\r\n    function processDividendTracker(uint256 gas) external onlyOwner {\r\n        (uint256 aIterations, uint256 aClaims, uint256 aLastProcessedIndex) = thoreumDividendTracker.process(gas);\r\n        emit ProcessedThoreumDividendTracker(aIterations, aClaims, aLastProcessedIndex, false, gas, tx.origin);\r\n    }\r\n\r\n    function manualBuyBackAndBurn(uint256 _amount) public onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance >= minBNBAfterBuyback.add(_amount), \"amount is too big\");\r\n\r\n        if (!swapping) {\r\n            _buyBackAndBurn(_amount);\r\n        }\r\n    }\r\n\r\n    function retrieveTokens(address token, uint amount) external onlyOwner {\r\n        require(IERC20(token).transfer(msg.sender, amount), \"Transfer failed\");\r\n    }\r\n\r\n    function retrieveBNB(uint amount) external onlyOwner {\r\n        (bool success,) = payable(msg.sender).call{ value: amount }(\"\");\r\n        require(success, \"Failed to retrieve BNB\");\r\n    }\r\n\r\n    function claim() external {\r\n        thoreumDividendTracker.processAccount(payable(msg.sender), false);\r\n    }\r\n\r\n    function _updateTotalFee() internal {\r\n        totalFees = buyBackFee\r\n        .add(liquidityFee)\r\n        .add(marketingFee)\r\n        .add(thoreumDividendRewardsFee)\r\n        .add(wbnbReflectRewardsFee)\r\n        .add(toBurnAllianceFee)\r\n        .add(toBurnTokenFee)\r\n        .add(gameTreasuryFee);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal override {\r\n        require(from != address(0), \"zero address\");\r\n        require(to != address(0), \"zero address\");\r\n        require(!isBlacklisted[from], \"Address is blacklisted\");\r\n\r\n        require(tradingIsEnabled || (isExcludedFromFees[from] || isExcludedFromFees[to]), \"Trading not started\");\r\n\r\n        bool excludedAccount = isExcludedFromFees[from] || isExcludedFromFees[to];\r\n\r\n        if (\r\n            tradingIsEnabled &&\r\n            automatedMarketMakerPairs[from] &&\r\n            !excludedAccount\r\n        ) {\r\n            require(amount <= maxBuyTransactionAmount, \"Error amount\");\r\n\r\n            uint256 contractBalanceRecipient = balanceOf(to);\r\n            require(contractBalanceRecipient + amount <= maxWalletToken, \"Error amount\");\r\n        } else if (\r\n            tradingIsEnabled &&\r\n            automatedMarketMakerPairs[to] &&\r\n            !excludedAccount\r\n        ) {\r\n            require(amount <= maxSellTransactionAmount, \"Error amount\");\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n            if (!swapping && contractTokenBalance >= swapTokensAtAmount) {\r\n                swapping = true;\r\n\r\n                if (marketingFee > 0) {\r\n                    uint256 swapTokens = contractTokenBalance.mul(marketingFee).div(totalFees);\r\n\r\n                    uint256 beforeAmount = address(this).balance;\r\n                    _swapTokensForBNB(swapTokens);\r\n                    uint256 increaseAmount = address(this).balance.sub(beforeAmount);\r\n\r\n                    if(increaseAmount > 0){\r\n                        uint256 teamPortion = increaseAmount.mul(66).div(10**2);\r\n                        uint256 marketingPortion = increaseAmount.sub(teamPortion);\r\n                        _transferToWallet(payable(marketingWallet), marketingPortion);\r\n                        _transferToWallet(payable(teamWallet), teamPortion);\r\n                    }\r\n                }\r\n\r\n                if(buyBackFee > 0){\r\n                    _swapTokensForBNB(contractTokenBalance.mul(buyBackFee).div(totalFees));\r\n                }\r\n\r\n                if(liquidityFee > 0){\r\n                    _swapAndLiquify(contractTokenBalance.mul(liquidityFee).div(totalFees));\r\n                }\r\n\r\n                if(toBurnAllianceFee > 0){\r\n                    uint256 swapTokensToBurnAlliance = contractTokenBalance.mul(toBurnAllianceFee).div(totalFees);\r\n                    _buyBackAllianceTokenAndBurn(swapTokensToBurnAlliance);\r\n                }\r\n\r\n                if(toBurnTokenFee > 0){\r\n                    uint256 tokensToBurn = contractTokenBalance.mul(toBurnTokenFee).div(totalFees);\r\n                    super._transfer(address(this), deadAddress, tokensToBurn);\r\n                }\r\n\r\n                if(gameTreasuryFee > 0){\r\n                    uint256 tokensToTreasury = contractTokenBalance.mul(gameTreasuryFee).div(totalFees);\r\n                    super._transfer(address(this), gameTreasury, tokensToTreasury);\r\n                }\r\n\r\n                if (thoreumDividendRewardsFee > 0) {\r\n                    uint256 sellTokens = contractTokenBalance.mul(thoreumDividendRewardsFee).div(totalFees);\r\n                    _swapAndSendThoreumDividends(sellTokens.sub(1300));\r\n                }\r\n\r\n                if (wbnbReflectRewardsFee > 0) {\r\n                    uint256 sellTokens = contractTokenBalance.mul(wbnbReflectRewardsFee).div(totalFees);\r\n                    _swapAndSendWbnbReflects(sellTokens.sub(1300));\r\n                }\r\n\r\n                swapping = false;\r\n            }\r\n\r\n            if (!swapping && buyBackFee > 0) {\r\n                uint256 buyBackBalanceBNB = address(this).balance;\r\n                if (buyBackBalanceBNB >= minBNBAfterBuyback && amount >= minSellToTriggerBuyback) {\r\n                    swapping = true;\r\n\r\n                    if (buyBackBalanceBNB > buybackUpperLimitBNB) {\r\n                        buyBackBalanceBNB = buybackUpperLimitBNB;\r\n                    }\r\n\r\n                    _buyBackAndBurn(buyBackBalanceBNB.div(10**2));\r\n\r\n                    swapping = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(tradingIsEnabled && !swapping && !excludedAccount) {\r\n            uint256 fees = amount.mul(totalFees).div(10000);\r\n\r\n            // if sell, multiply by sellFeeIncreaseFactor\r\n            if(automatedMarketMakerPairs[to]) {\r\n                fees = fees.mul(sellFeeIncreaseFactor).div(100);\r\n            }else if(!automatedMarketMakerPairs[from] && !feesOnNormalTransfers){\r\n                fees = 0;\r\n            }\r\n\r\n            if(fees > 0){\r\n                amount = amount.sub(fees);\r\n                super._transfer(from, address(this), fees);\r\n            }\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n\r\n        try thoreumDividendTracker.setBalance(payable(from), balanceOf(from), sendThoreumInTx) {} catch {}\r\n        try thoreumDividendTracker.setBalance(payable(to), balanceOf(to), sendThoreumInTx) {} catch {}\r\n\r\n        if(!swapping && to != deadAddress && sendThoreumInTx && thoreumDividendRewardsFee > 0){\r\n                uint256 gas = gasForProcessing;\r\n\r\n                try thoreumDividendTracker.process(gas) returns (uint256 iterations, uint256 claims, uint256 lastProcessedIndex) {\r\n                    emit ProcessedThoreumDividendTracker(iterations, claims, lastProcessedIndex, true, gas, tx.origin);\r\n                }\r\n                catch {\r\n\r\n                }\r\n        }\r\n    }\r\n\r\n    function _swapAndLiquify(uint256 contractTokenBalance) private {\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        _swapTokensForBNB(half);\r\n\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        _addLiquidity(otherHalf, newBalance);\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function _addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n        _approve(address(this), address(dexRouter), tokenAmount);\r\n\r\n        dexRouter.addLiquidityETH{value: bnbAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            address(this),\r\n            block.timestamp.add(300)\r\n        );\r\n    }\r\n\r\n    function _buyBackAllianceTokenAndBurn(uint256 amount) private {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n        path[2] = toBurnAllianceToken;\r\n\r\n        _approve(address(this), address(dexRouter), amount);\r\n\r\n        dexRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            amount,\r\n            0,\r\n            path,\r\n            deadAddress,\r\n            block.timestamp.add(300)\r\n        );\r\n    }\r\n\r\n    function _buyBackAndBurn(uint256 amount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = dexRouter.WETH();\r\n        path[1] = address(this);\r\n\r\n        dexRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amount}(\r\n            0,\r\n            path,\r\n            deadAddress,\r\n            block.timestamp.add(300)\r\n        );\r\n    }\r\n\r\n    function _swapTokensForBNB(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = dexRouter.WETH();\r\n\r\n        _approve(address(this), address(dexRouter), tokenAmount);\r\n\r\n        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp.add(300)\r\n        );\r\n    }\r\n\r\n    function _swapTokensForDividendToken(uint256 _tokenAmount, address _recipient, address _dividendAddress) private {\r\n        address[] memory path;\r\n\r\n        if(dexRouter.WETH() == _dividendAddress){\r\n            path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = _dividendAddress;\r\n        }else{\r\n            path = new address[](3);\r\n            path[0] = address(this);\r\n            path[1] = dexRouter.WETH();\r\n            path[2] = _dividendAddress;\r\n        }\r\n\r\n        _approve(address(this), address(dexRouter), _tokenAmount);\r\n\r\n        dexRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            _tokenAmount,\r\n            0,\r\n            path,\r\n            _recipient,\r\n            block.timestamp.add(300)\r\n        );\r\n    }\r\n\r\n    function _swapAndSendThoreumDividends(uint256 tokens) private {\r\n        uint256 beforeAmount = IERC20(thoreumDividendToken).balanceOf(address(thoreumDividendTracker));\r\n\r\n        _swapTokensForDividendToken(tokens, address(thoreumDividendTracker), thoreumDividendToken);\r\n\r\n        uint256 thoreumDividends = IERC20(thoreumDividendToken).balanceOf(address(thoreumDividendTracker)).sub(beforeAmount);\r\n\r\n        if(thoreumDividends > 0){\r\n            thoreumDividendTracker.distributeDividends(thoreumDividends);\r\n            emit SendThoreumDividends(thoreumDividends);\r\n        }\r\n    }\r\n\r\n    function _swapAndSendWbnbReflects(uint256 tokens) private {\r\n        uint256 beforeAmount = IERC20(wbnbReflectToken).balanceOf(address(wbnbReflectTracker));\r\n\r\n        _swapTokensForDividendToken(tokens, address(wbnbReflectTracker), wbnbReflectToken);\r\n\r\n        uint256 wbnbDividends = IERC20(wbnbReflectToken).balanceOf(address(wbnbReflectTracker)).sub(beforeAmount);\r\n\r\n        if(wbnbDividends > 0){\r\n            emit SendWbnbDividends(wbnbDividends);\r\n        }\r\n    }\r\n\r\n    function _transferToWallet(address payable recipient, uint256 amount) private {\r\n        recipient.transfer(amount);\r\n    }\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 bnbReceived, uint256 tokensIntoLiqudity);\r\n    event SendThoreumDividends(uint256 amount);\r\n    event SendWbnbDividends(uint256 amount);\r\n    event ProcessedThoreumDividendTracker(uint256 iterations, uint256 claims, uint256 lastProcessedIndex, bool indexed automatic, uint256 gas, address indexed processor);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedThoreumDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendThoreumDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendWbnbDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"afterPreSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackUpperLimitBNB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexRouter\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesOnNormalTransfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"manualBuyBackAndBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBNBAfterBuyback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSellToTriggerBuyback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partnerOrExchangeAddress\",\"type\":\"address\"}],\"name\":\"prepareForPartner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"retrieveBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeIncreaseFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendThoreumInTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"setBurnAllianceToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newFee\",\"type\":\"uint8\"}],\"name\":\"setBuyBackFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyBackLimit\",\"type\":\"uint256\"}],\"name\":\"setBuyBackUpperLimitBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"setClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setDexRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setFeesOnNormalTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setGameTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"blacklisted\",\"type\":\"bool\"}],\"name\":\"setIsBlacklisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newFee\",\"type\":\"uint8\"}],\"name\":\"setLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newFee\",\"type\":\"uint8\"}],\"name\":\"setMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxn\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxn\",\"type\":\"uint256\"}],\"name\":\"setMaxSellTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxToken\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"setMinBNBAfterBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"setMinSellToTriggerBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"setMinThoreumBeforeSendDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinimumBalance\",\"type\":\"uint256\"}],\"name\":\"setMinimumBalanceForDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"setSellTransactionMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newStatus\",\"type\":\"bool\"}],\"name\":\"setSendThoreumInTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newFee\",\"type\":\"uint8\"}],\"name\":\"setThoreumDividendRewardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"setThoreumDividendToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setThoreumDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setToBurnAllianceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setToBurnTokenFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setTradingIsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newFee\",\"type\":\"uint8\"}],\"name\":\"setWbnbReflectRewardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"setWbnbReflectToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContract\",\"type\":\"address\"}],\"name\":\"setWbnbReflectTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thoreumDividendRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thoreumDividendToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thoreumDividendTracker\",\"outputs\":[{\"internalType\":\"contract ThoreumDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toBurnAllianceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toBurnAllianceToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toBurnTokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnbReflectRewardsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnbReflectToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbnbReflectTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EpicHeroToken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "IterableMapping:acb8b3d78cad79154940b98e24dfc095556067e7", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://30fb03ccb49f1696ce62b9f43ab656693428a5d18addd2fe5fea635e978cca5a"}