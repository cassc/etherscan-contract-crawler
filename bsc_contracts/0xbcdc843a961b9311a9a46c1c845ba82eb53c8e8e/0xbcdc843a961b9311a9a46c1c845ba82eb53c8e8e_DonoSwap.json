{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable  {\r\n    address payable public _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        _owner = payable(msg.sender);\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ninterface Token {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n}\r\n\r\n\r\ncontract DonoSwap is Ownable{\r\n    \r\n    using SafeMath for uint;\r\n\r\n    struct User {\r\n        uint256 bnb_paid;\r\n        uint40 deposit_time;\r\n        uint256 total_deposits;\r\n    }\r\n    \r\n    uint8[] public ref_bonuses;\r\n\r\n    address public tokenAddr;\r\n    uint256 private bnbAmount; \r\n    uint256 public tokenPriceBnb = 65000000000000; \r\n    uint256 public tokenPriceBnbSell = 65000000000000;\r\n    uint256 public minBuy = 4.2e15;  //5e16; // 0.0042 BNB Min Buy\r\n    uint256 public tokenDecimal = 18;\r\n    uint256 public bnbDecimal = 18;\r\n\r\n    mapping(address => User) public users;\r\n\r\n    event TokenTransfer(address beneficiary, uint amount);\r\n    event BnbTransfer(address beneficiary, uint amount);\r\n    event Upline(address indexed addr, address indexed upline);\r\n    \r\n    mapping (address => uint256) public balances;\r\n    mapping(address => uint256) public tokenExchanged;\r\n\r\n    constructor(address _tokenAddr) {\r\n        tokenAddr = _tokenAddr;\r\n\r\n    }\r\n    \r\n\r\n    \r\n    \r\n    receive() payable external {\r\n\r\n    }\r\n\r\n    \r\n    function ExchangeBNBforTokenMannual() public payable {\r\n        uint256 amount = msg.value;\r\n        address userAdd = msg.sender;\r\n        require(amount >= minBuy,\"Minimum Buy Price is 0.0042 BNB\");\r\n\r\n        \r\n        bnbAmount = ((amount.mul(10 ** uint256(tokenDecimal)).div(tokenPriceBnb)).mul(10 ** uint256(tokenDecimal))).div(10 ** uint256(tokenDecimal));\r\n        require(Token(tokenAddr).balanceOf(address(this)) >= bnbAmount, \"There is low token balance in contract\");\r\n        \r\n        require(Token(tokenAddr).transfer(userAdd, bnbAmount));\r\n        users[userAdd].deposit_time = uint40(block.timestamp);\r\n\r\n        users[msg.sender].total_deposits += msg.value;\r\n        balances[msg.sender] = balances[msg.sender].add(msg.value);\r\n        emit TokenTransfer(userAdd, bnbAmount);\r\n        users[msg.sender].total_deposits += bnbAmount;\r\n        users[msg.sender].deposit_time = uint40(block.timestamp);\r\n        tokenExchanged[msg.sender] = tokenExchanged[msg.sender].add(bnbAmount);\r\n        \r\n    }\r\n    \r\n    function ExchangeTokenforBNBMannual(uint256 _amount) public {\r\n        uint256 amount = _amount;\r\n        address payable userAdd = payable(msg.sender);\r\n        require(Token(tokenAddr).transferFrom(userAdd,address(this), _amount),\"Transfers Token From User Address to Contract\");\r\n        \r\n        bnbAmount = (((amount.mul(10 ** uint256(bnbDecimal)).mul(tokenPriceBnbSell)).mul(10 ** uint256(bnbDecimal))).div(10 ** uint256(bnbDecimal))).div(10 ** uint256(bnbDecimal*2));\r\n        require(Token(tokenAddr).balanceOf(userAdd) >= _amount, \"User Dont have Balance\");\r\n        \r\n        userAdd.transfer(bnbAmount);\r\n        users[msg.sender].bnb_paid += bnbAmount;\r\n        emit BnbTransfer(userAdd, bnbAmount);\r\n    }\r\n    \r\n    function updateTokenPrice(uint256 newTokenValue) public onlyOwner {\r\n        tokenPriceBnb = newTokenValue;\r\n    }\r\n    \r\n    function updateTokenPriceSell(uint256 newTokenValue) public onlyOwner {\r\n        tokenPriceBnbSell = newTokenValue;\r\n    }\r\n    \r\n    function updateTokenDecimal(uint256 newDecimal) public onlyOwner {\r\n        tokenDecimal = newDecimal;\r\n    }\r\n    \r\n    \r\n    function updateTokenAddress(address newTokenAddr) public onlyOwner {\r\n        tokenAddr = newTokenAddr;\r\n    }\r\n    \r\n    function depositCrypto() public payable {\r\n        \r\n    }\r\n\r\n\r\n\r\n    function withdrawTokens(address beneficiary) public onlyOwner {\r\n        require(Token(tokenAddr).transfer(beneficiary, Token(tokenAddr).balanceOf(address(this))));\r\n    }\r\n\r\n    function withdrawCrypto(address payable beneficiary) public onlyOwner {\r\n        beneficiary.transfer(address(this).balance);\r\n    }\r\n    function tokenBalance() public view returns (uint256){\r\n        return Token(tokenAddr).balanceOf(address(this));\r\n    }\r\n    function bnbBalance() public view returns (uint256){\r\n        return address(this).balance;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BnbTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"upline\",\"type\":\"address\"}],\"name\":\"Upline\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ExchangeBNBforTokenMannual\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ExchangeTokenforBNBMannual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bnbDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCrypto\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ref_bonuses\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenExchanged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceBnb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceBnbSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenAddr\",\"type\":\"address\"}],\"name\":\"updateTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDecimal\",\"type\":\"uint256\"}],\"name\":\"updateTokenDecimal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTokenValue\",\"type\":\"uint256\"}],\"name\":\"updateTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTokenValue\",\"type\":\"uint256\"}],\"name\":\"updateTokenPriceSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bnb_paid\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"deposit_time\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"total_deposits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawCrypto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DonoSwap", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000a7070cdbd701940e5240a88113f505763b831022", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4d17ff9a7c3cf9e26ad8799329684e8f119095cb25d3fd2680bd16449ae1cea2"}