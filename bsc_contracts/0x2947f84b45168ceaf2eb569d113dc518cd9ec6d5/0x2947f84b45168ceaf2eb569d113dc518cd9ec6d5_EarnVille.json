{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/EarnVille.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\npragma solidity 0.7.4;\\n\\nimport \\\"./library/SafeMath.sol\\\";\\nimport \\\"./library/SafeMathInt.sol\\\";\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./interface/IPancakeSwapFactory.sol\\\";\\nimport \\\"./interface/IPancakeSwapRouter.sol\\\";\\nimport \\\"./interface/IPancakeSwapPair.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./ERC20Detailed.sol\\\";\\n\\ncontract EarnVille is ERC20Detailed, Ownable {\\n    using SafeMath for uint256;\\n    using SafeMathInt for int256;\\n\\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\\n    event JackpotAwarded(address indexed receiver, uint256 amount);\\n    event BigBang(uint256 cashedOut, uint256 tokensOut);\\n\\n    string public constant _name = \\\"Earn Ville\\\";\\n    string public constant _symbol = \\\"EARN\\\";\\n    uint8 public constant _decimals = 5;\\n\\n    IPancakeSwapPair public pairContract;\\n    mapping(address => bool) _isFeeExempt;\\n\\n    modifier validRecipient(address to) {\\n        require(to != address(0x0));\\n        _;\\n    }\\n\\n    uint256 public constant DECIMALS = 5;\\n    uint256 public constant MAX_UINT256 = ~uint256(0);\\n    uint8 public constant RATE_DECIMALS = 7;\\n    // At any given time, buy and sell fees can NOT exceed 25% each\\n    uint256 private constant TOTAL_FEES_LIMIT = 250;\\n\\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 10**6 * 10**DECIMALS;\\n    uint256 private constant BNB_DECIMALS = 18;\\n    uint256 private constant BUSD_DECIMALS = 18;\\n\\n    uint256 public liquidityFee = 40;\\n    uint256 public earnVilleInsuranceFundFee = 25;\\n    uint256 public treasuryFee = 60;\\n    uint256 public jackpotFee = 25;\\n\\n    uint256 public jackpotSellFee = 25;\\n    uint256 public sellFee = 15;\\n\\n    uint256 public totalFee =\\n        liquidityFee.add(treasuryFee).add(earnVilleInsuranceFundFee).add(\\n            jackpotFee\\n        );\\n    uint256 public constant feeDenominator = 1000;\\n\\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\\n    address constant BUSD = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // mainnet\\n    // address constant BUSD = 0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7; // testnet\\n    uint256 private constant MAX_PCT = 10000;\\n    // PCS takes 0.25% fee on all txs\\n    uint256 private constant ROUTER_FEE = 25;\\n\\n    address public autoLiquidityReceiver;\\n    address public treasuryReceiver;\\n    address public earnVilleInsuranceFundReceiver;\\n    address public pairAddress;\\n    address public buybackWallet;\\n    bool public constant swapEnabled = true;\\n    IPancakeSwapRouter public router;\\n    address public pair;\\n    bool inSwap = false;\\n    modifier swapping() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    uint256 private constant TOTAL_GONS =\\n        MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\\n\\n    uint256 private constant MAX_SUPPLY = 100 * 1e9 * 10**DECIMALS;\\n\\n    bool public _autoRebase;\\n    bool public _autoAddLiquidity;\\n    uint256 public _initRebaseStartTime;\\n    uint256 public _lastRebasedTime;\\n    uint256 public _lastAddLiquidityTime;\\n    uint256 public _totalSupply;\\n    uint256 private _gonsPerFragment;\\n    bool public _isRebaseStarted;\\n\\n    // 55.55% jackpot cashout to last buyer\\n    uint256 public jackpotCashout = 5555;\\n    // 90% of jackpot cashout to last buyer\\n    uint256 public jackpotBuyerShare = 9000;\\n    // Buys > 0.1 BNB will be eligible for the jackpot\\n    uint256 public jackpotMinBuy = 1 * 10**(BNB_DECIMALS - 1);\\n    // Jackpot time span is initially set to 10 mins\\n    uint256 public jackpotTimespan = 10 * 60;\\n    // Jackpot hard limit, BUSD value\\n    uint256 public jackpotHardLimit = 50000 * 10**(BUSD_DECIMALS);\\n    // Jackpot hard limit buyback share\\n    uint256 public jackpotHardBuyback = 5000;\\n\\n    uint256 public _jackpotGonsTokens = 0;\\n\\n    address private _lastBuyer = address(this);\\n    uint256 private _lastBuyTimestamp = 0;\\n\\n    address private _lastAwarded = address(0);\\n    uint256 private _lastAwardedCash = 0;\\n    uint256 private _lastAwardedTokens = 0;\\n    uint256 private _lastAwardedTimestamp = 0;\\n\\n    uint256 private _lastBigBangCash = 0;\\n    uint256 private _lastBigBangTokens = 0;\\n    uint256 private _lastBigBangTimestamp = 0;\\n\\n    uint256 private _totalJackpotCashedOut = 0;\\n    uint256 private _totalJackpotTokensOut = 0;\\n    uint256 private _totalJackpotBuyer = 0;\\n    uint256 private _totalJackpotBuyback = 0;\\n    uint256 private _totalJackpotBuyerTokens = 0;\\n    uint256 private _totalJackpotBuybackTokens = 0;\\n\\n    bool public isTakeFeeOnNormalTransfer = true;\\n\\n    // Token distribution held by the contract\\n    uint256 public _pendingJackpotBalance = 0;\\n\\n    mapping(address => uint256) private _gonBalances;\\n    mapping(address => mapping(address => uint256)) private _allowedFragments;\\n    mapping(address => bool) public blacklist;\\n\\n    struct user {\\n        uint256 firstBuy;\\n        uint256 lastSellTime;\\n        uint256 sellAmount;\\n        uint256 lastBuyTime;\\n        uint256 buyAmount;\\n    }\\n\\n    uint256 public TwentyFourhours = 86400;\\n\\n    mapping(address => user) public tradeData;\\n    uint256 public maxSellTransactionAmount = 1000 * 10**DECIMALS;\\n    uint256 public sellLimitPercent = 1;\\n    uint256 public buyLimitPercent = 1;\\n\\n    constructor()\\n        ERC20Detailed(\\\"Earn Ville\\\", \\\"EARN\\\", uint8(DECIMALS))\\n        Ownable()\\n    {\\n        router = IPancakeSwapRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E); // mainnet\\n        // router = IPancakeSwapRouter(0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3); // testnet\\n        pair = IPancakeSwapFactory(router.factory()).createPair(\\n            router.WETH(),\\n            address(this)\\n        );\\n\\n        autoLiquidityReceiver = 0x9f7A6F35603E49ab53e94c3E618E3deDd04BB81D;\\n        treasuryReceiver = 0x3A456bDA98eC7cEcd7A0e224cDbdFb59F4EE1d30;\\n        // treasuryReceiver = msg.sender;\\n        earnVilleInsuranceFundReceiver = 0xDC317F72B4445d569538d847466F42FBdd88F691;\\n        buybackWallet = 0xB967dac5cB1DBa1245Bf6e09e3CFf195b753779F;\\n\\n        _allowedFragments[address(this)][address(router)] = uint256(-1);\\n        pairAddress = pair;\\n        pairContract = IPancakeSwapPair(pair);\\n\\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\\n        _gonBalances[treasuryReceiver] = TOTAL_GONS;\\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\n        _initRebaseStartTime = block.timestamp;\\n        _lastRebasedTime = block.timestamp;\\n        _autoRebase = false;\\n        _isRebaseStarted = false;\\n        _autoAddLiquidity = true;\\n        _isFeeExempt[autoLiquidityReceiver] = true;\\n        _isFeeExempt[treasuryReceiver] = true;\\n        _isFeeExempt[earnVilleInsuranceFundReceiver] = true;\\n        _isFeeExempt[buybackWallet] = true;\\n        _isFeeExempt[msg.sender] = true;\\n        _isFeeExempt[address(this)] = true;\\n\\n        _transferOwnership(treasuryReceiver);\\n        emit Transfer(address(0x0), treasuryReceiver, _totalSupply);\\n    }\\n\\n    function getLastBuy()\\n        external\\n        view\\n        returns (address lastBuyer, uint256 lastBuyTimestamp)\\n    {\\n        return (_lastBuyer, _lastBuyTimestamp);\\n    }\\n\\n    function getLastAwardedJackpot()\\n        external\\n        view\\n        returns (\\n            address lastAwarded,\\n            uint256 lastAwardedCash,\\n            uint256 lastAwardedTokens,\\n            uint256 lastAwardedTimestamp\\n        )\\n    {\\n        return (\\n            _lastAwarded,\\n            _lastAwardedCash,\\n            _lastAwardedTokens,\\n            _lastAwardedTimestamp\\n        );\\n    }\\n\\n    function getPendingJackpotBalance()\\n        external\\n        view\\n        returns (uint256 pendingJackpotBalance)\\n    {\\n        return (_pendingJackpotBalance);\\n    }\\n\\n    function getPendingJackpotTokens()\\n        external\\n        view\\n        returns (uint256 pendingJackpotTokens)\\n    {\\n        return (_jackpotGonsTokens.div(_gonsPerFragment));\\n    }\\n\\n    function getLastBigBang()\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (_lastBigBangCash, _lastBigBangTokens, _lastBigBangTimestamp);\\n    }\\n\\n    function getJackpot()\\n        public\\n        view\\n        returns (uint256 jackpotTokens, uint256 pendingJackpotAmount)\\n    {\\n        return (\\n            _jackpotGonsTokens.div(_gonsPerFragment),\\n            _pendingJackpotBalance\\n        );\\n    }\\n\\n    function getLiquidityBacking(uint256 accuracy)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 liquidityBalance = _gonBalances[pair].div(_gonsPerFragment);\\n        return\\n            accuracy.mul(liquidityBalance.mul(2)).div(getCirculatingSupply());\\n    }\\n\\n    function getCirculatingSupply() public view returns (uint256) {\\n        return\\n            (TOTAL_GONS.sub(_gonBalances[DEAD]).sub(_gonBalances[ZERO])).div(\\n                _gonsPerFragment\\n            );\\n    }\\n\\n    function totalJackpotOut() external view returns (uint256, uint256) {\\n        return (_totalJackpotCashedOut, _totalJackpotTokensOut);\\n    }\\n\\n    function totalJackpotBuyer() external view returns (uint256, uint256) {\\n        return (_totalJackpotBuyer, _totalJackpotBuyerTokens);\\n    }\\n\\n    function totalJackpotBuyback() external view returns (uint256, uint256) {\\n        return (_totalJackpotBuyback, _totalJackpotBuybackTokens);\\n    }\\n\\n    function startRebase() external onlyOwner {\\n        // execute only once\\n        require(!_isRebaseStarted, \\\"Rebase already started\\\");\\n        if (_isRebaseStarted) return;\\n        _initRebaseStartTime = block.timestamp;\\n        _lastRebasedTime = block.timestamp;\\n        _autoRebase = true;\\n        _isRebaseStarted = true;\\n    }\\n\\n    function rebase() internal {\\n        if (inSwap) return;\\n        uint256 rebaseRate;\\n        uint256 deltaTimeFromInit = block.timestamp - _initRebaseStartTime;\\n        uint256 deltaTime = block.timestamp - _lastRebasedTime;\\n        uint256 times = deltaTime.div(15 minutes);\\n        uint256 epoch = times.mul(15);\\n\\n        if (deltaTimeFromInit <= 365 days) {\\n            rebaseRate = 3080;\\n        } else {\\n            rebaseRate = 250;\\n        }\\n\\n        for (uint256 i = 0; i < times; i++) {\\n            _totalSupply = _totalSupply\\n                .mul((10**RATE_DECIMALS).add(rebaseRate))\\n                .div(10**RATE_DECIMALS);\\n        }\\n\\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\\n        _lastRebasedTime = _lastRebasedTime.add(times.mul(15 minutes));\\n\\n        pairContract.sync();\\n\\n        emit LogRebase(epoch, _totalSupply);\\n    }\\n\\n    function transfer(address to, uint256 value)\\n        external\\n        override\\n        validRecipient(to)\\n        returns (bool)\\n    {\\n        _transferFrom(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external override validRecipient(to) returns (bool) {\\n        if (_allowedFragments[from][msg.sender] != uint256(-1)) {\\n            _allowedFragments[from][msg.sender] = _allowedFragments[from][\\n                msg.sender\\n            ].sub(value, \\\"Insufficient Allowance\\\");\\n        }\\n        _transferFrom(from, to, value);\\n        return true;\\n    }\\n\\n    function _basicTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\\n        _gonBalances[from] = _gonBalances[from].sub(gonAmount);\\n        _gonBalances[to] = _gonBalances[to].add(gonAmount);\\n        return true;\\n    }\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        require(!blacklist[sender] && !blacklist[recipient], \\\"in_blacklist\\\");\\n\\n        bool excludedAccount = _isFeeExempt[sender] || _isFeeExempt[recipient];\\n\\n        if (recipient == pair && !excludedAccount) {\\n            require(amount <= maxSellTransactionAmount, \\\"Error amount\\\");\\n\\n            uint256 blkTime = block.timestamp;\\n\\n            uint256 onePercent = balanceOf(sender).mul(sellLimitPercent).div(\\n                100\\n            ); //Should use variable\\n            require(amount <= onePercent, \\\"ERR: Can't sell more than 1%\\\");\\n\\n            if (blkTime > tradeData[sender].lastSellTime + TwentyFourhours) {\\n                tradeData[sender].lastSellTime = blkTime;\\n                tradeData[sender].sellAmount = amount;\\n            } else if (\\n                (blkTime < tradeData[sender].lastSellTime + TwentyFourhours) &&\\n                ((blkTime > tradeData[sender].lastSellTime))\\n            ) {\\n                require(\\n                    tradeData[sender].sellAmount + amount <= onePercent,\\n                    \\\"ERR: Can't sell more than 1% in One day\\\"\\n                );\\n                tradeData[sender].sellAmount =\\n                    tradeData[sender].sellAmount +\\n                    amount;\\n            }\\n        }\\n\\n        if (sender == pair && !excludedAccount) {\\n            uint256 blkTime = block.timestamp;\\n\\n            uint256 onePercent = _totalSupply.mul(buyLimitPercent).div(100); //Should use variable\\n            require(amount <= onePercent, \\\"ERR: Can't buy more than 1%\\\");\\n\\n            if (blkTime > tradeData[recipient].lastBuyTime + TwentyFourhours) {\\n                tradeData[recipient].lastBuyTime = blkTime;\\n                tradeData[recipient].buyAmount = amount;\\n            } else if (\\n                (blkTime < tradeData[recipient].lastBuyTime + TwentyFourhours) &&\\n                ((blkTime > tradeData[recipient].lastBuyTime))\\n            ) {\\n                require(\\n                    tradeData[recipient].buyAmount + amount <= onePercent,\\n                    \\\"ERR: Can't buy more than 1% in One day\\\"\\n                );\\n                tradeData[recipient].buyAmount =\\n                    tradeData[recipient].buyAmount +\\n                    amount;\\n            }\\n        }\\n\\n        if (inSwap) {\\n            return _basicTransfer(sender, recipient, amount);\\n        }\\n        if (shouldRebase()) {\\n            rebase();\\n        }\\n\\n        if (shouldAddLiquidity()) {\\n            addLiquidity();\\n        }\\n\\n        if (shouldSwapBack()) {\\n            swapBack();\\n        }\\n\\n        if (_pendingJackpotBalance >= jackpotHardLimit) {\\n            processBigBang();\\n        } else if (shouldAwardJackpot()) {\\n            awardJackpot();\\n        }\\n\\n        if (sender == pair && isJackpotEligible(amount)) {\\n            _lastBuyTimestamp = block.timestamp;\\n            _lastBuyer = recipient;\\n        }\\n\\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\\n        _gonBalances[sender] = _gonBalances[sender].sub(gonAmount);\\n        uint256 gonAmountReceived = shouldTakeFee(sender, recipient)\\n            ? takeFee(sender, recipient, gonAmount)\\n            : gonAmount;\\n        _gonBalances[recipient] = _gonBalances[recipient].add(\\n            gonAmountReceived\\n        );\\n\\n        emit Transfer(\\n            sender,\\n            recipient,\\n            gonAmountReceived.div(_gonsPerFragment)\\n        );\\n        return true;\\n    }\\n\\n    function shouldAwardJackpot() public view returns (bool) {\\n        return\\n            _lastBuyer != address(0) &&\\n            _lastBuyer != address(this) &&\\n            block.timestamp.sub(_lastBuyTimestamp) >= jackpotTimespan;\\n    }\\n\\n    function isJackpotEligible(uint256 tokenAmount) public view returns (bool) {\\n        if (jackpotMinBuy == 0) {\\n            return true;\\n        }\\n        address[] memory path = new address[](2);\\n        path[0] = router.WETH();\\n        path[1] = address(this);\\n\\n        uint256 tokensOut = router\\n        .getAmountsOut(jackpotMinBuy, path)[1].mul(MAX_PCT.sub(ROUTER_FEE)).div(\\n                // We don't subtract the buy fee since the tokenAmount is pre-tax\\n                MAX_PCT\\n            );\\n        return tokenAmount >= tokensOut;\\n    }\\n\\n    function processBigBang() internal swapping {\\n        uint256 cashedOut = _pendingJackpotBalance.mul(jackpotHardBuyback).div(\\n            MAX_PCT\\n        );\\n        uint256 tokensGonsOut = _jackpotGonsTokens.mul(jackpotHardBuyback).div(\\n            MAX_PCT\\n        );\\n        _lastBigBangTokens = tokensGonsOut.div(_gonsPerFragment);\\n\\n        IERC20(BUSD).transfer(buybackWallet, cashedOut);\\n        _basicTransfer(\\n            address(this),\\n            buybackWallet,\\n            tokensGonsOut.div(_gonsPerFragment)\\n        );\\n\\n        emit BigBang(cashedOut, tokensGonsOut.div(_gonsPerFragment));\\n\\n        _lastBigBangCash = cashedOut;\\n        _lastBigBangTimestamp = block.timestamp;\\n\\n        _pendingJackpotBalance = _pendingJackpotBalance.sub(cashedOut);\\n        _jackpotGonsTokens = _jackpotGonsTokens.sub(tokensGonsOut);\\n\\n        _totalJackpotCashedOut = _totalJackpotCashedOut.add(cashedOut);\\n        _totalJackpotBuyback = _totalJackpotBuyback.add(cashedOut);\\n        _totalJackpotTokensOut = _totalJackpotTokensOut.add(\\n            tokensGonsOut.div(_gonsPerFragment)\\n        );\\n        _totalJackpotBuybackTokens = _totalJackpotBuybackTokens.add(\\n            tokensGonsOut.div(_gonsPerFragment)\\n        );\\n    }\\n\\n    function awardJackpot() internal swapping {\\n        require(\\n            _lastBuyer != address(0) && _lastBuyer != address(this),\\n            \\\"No last buyer detected\\\"\\n        );\\n        uint256 cashedOut = _pendingJackpotBalance.mul(jackpotCashout).div(\\n            MAX_PCT\\n        );\\n        uint256 tokensGonsOut = _jackpotGonsTokens.mul(jackpotCashout).div(\\n            MAX_PCT\\n        );\\n        uint256 tokensOut = tokensGonsOut.div(_gonsPerFragment);\\n        uint256 buyerShare = cashedOut.mul(jackpotBuyerShare).div(MAX_PCT);\\n        uint256 tokensToBuyer = tokensOut.mul(jackpotBuyerShare).div(MAX_PCT);\\n        uint256 toBuyback = cashedOut - buyerShare;\\n        uint256 tokensToBuyback = tokensOut - tokensToBuyer;\\n\\n        IERC20(BUSD).transfer(_lastBuyer, buyerShare);\\n        _basicTransfer(address(this), _lastBuyer, tokensToBuyer);\\n        IERC20(BUSD).transfer(buybackWallet, toBuyback);\\n        _basicTransfer(address(this), buybackWallet, tokensToBuyback);\\n\\n        _pendingJackpotBalance = _pendingJackpotBalance.sub(cashedOut);\\n        _jackpotGonsTokens = _jackpotGonsTokens.sub(tokensGonsOut);\\n\\n        _lastAwarded = _lastBuyer;\\n        _lastAwardedCash = cashedOut;\\n        _lastAwardedTimestamp = block.timestamp;\\n        _lastAwardedTokens = tokensToBuyer;\\n\\n        emit JackpotAwarded(_lastBuyer, cashedOut);\\n\\n        _lastBuyer = payable(address(this));\\n        _lastBuyTimestamp = 0;\\n\\n        _totalJackpotCashedOut = _totalJackpotCashedOut.add(cashedOut);\\n        _totalJackpotTokensOut = _totalJackpotTokensOut.add(tokensOut);\\n        _totalJackpotBuyer = _totalJackpotBuyer.add(buyerShare);\\n        _totalJackpotBuyerTokens = _totalJackpotBuyerTokens.add(tokensToBuyer);\\n        _totalJackpotBuyback = _totalJackpotBuyback.add(toBuyback);\\n        _totalJackpotBuybackTokens = _totalJackpotBuybackTokens.add(\\n            tokensToBuyback\\n        );\\n    }\\n\\n    function takeFee(\\n        address sender,\\n        address recipient,\\n        uint256 gonAmount\\n    ) internal returns (uint256) {\\n        uint256 _totalFee = totalFee;\\n        uint256 _treasuryFee = treasuryFee;\\n        uint256 _jackpotFee = jackpotFee;\\n\\n        if (recipient == pair) {\\n            _totalFee = totalFee.add(sellFee).add(jackpotSellFee);\\n            _treasuryFee = treasuryFee.add(sellFee);\\n            _jackpotFee = jackpotFee.add(jackpotSellFee);\\n        }\\n\\n        uint256 feeAmount = gonAmount.mul(_totalFee).div(feeDenominator);\\n\\n        _gonBalances[address(this)] = _gonBalances[address(this)].add(\\n            gonAmount\\n                .mul(\\n                    _treasuryFee.add(earnVilleInsuranceFundFee).add(jackpotFee)\\n                )\\n                .div(feeDenominator)\\n        );\\n        _gonBalances[autoLiquidityReceiver] = _gonBalances[\\n            autoLiquidityReceiver\\n        ].add(gonAmount.mul(liquidityFee).div(feeDenominator));\\n\\n        _jackpotGonsTokens = _jackpotGonsTokens.add(\\n            gonAmount.mul(_jackpotFee).div(feeDenominator)\\n        );\\n\\n        emit Transfer(sender, address(this), feeAmount.div(_gonsPerFragment));\\n        return gonAmount.sub(feeAmount);\\n    }\\n\\n    function addLiquidity() internal swapping {\\n        uint256 autoLiquidityAmount = _gonBalances[autoLiquidityReceiver].div(\\n            _gonsPerFragment\\n        );\\n        _gonBalances[address(this)] = _gonBalances[address(this)].add(\\n            _gonBalances[autoLiquidityReceiver]\\n        );\\n        _gonBalances[autoLiquidityReceiver] = 0;\\n        uint256 amountToLiquify = autoLiquidityAmount.div(2);\\n        uint256 amountToSwap = autoLiquidityAmount.sub(amountToLiquify);\\n\\n        if (amountToSwap == 0) {\\n            return;\\n        }\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n\\n        uint256 balanceBefore = address(this).balance;\\n\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountToSwap,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 amountETHLiquidity = address(this).balance.sub(balanceBefore);\\n\\n        if (amountToLiquify > 0 && amountETHLiquidity > 0) {\\n            router.addLiquidityETH{value: amountETHLiquidity}(\\n                address(this),\\n                amountToLiquify,\\n                0,\\n                0,\\n                autoLiquidityReceiver,\\n                block.timestamp\\n            );\\n        }\\n        _lastAddLiquidityTime = block.timestamp;\\n    }\\n\\n    function swapBack() internal swapping {\\n        uint256 amountToSwap = _gonBalances[address(this)].div(\\n            _gonsPerFragment\\n        );\\n\\n        if (amountToSwap == 0) {\\n            return;\\n        }\\n\\n        uint256 balanceBefore = IERC20(BUSD).balanceOf(address(this));\\n        address[] memory path = new address[](3);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n        path[2] = BUSD;\\n\\n        router.swapExactTokensForTokens(\\n            amountToSwap,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        uint256 amountBUSDToSend = IERC20(BUSD).balanceOf(address(this)).sub(\\n            balanceBefore\\n        );\\n\\n        _jackpotGonsTokens = 0;\\n\\n        /// Send BUSD to treasury\\n        IERC20(BUSD).transfer(\\n            treasuryReceiver,\\n            amountBUSDToSend.mul(treasuryFee).div(\\n                treasuryFee.add(earnVilleInsuranceFundFee).add(jackpotFee)\\n            )\\n        );\\n\\n        /// Send BUSD to insurance fund\\n        IERC20(BUSD).transfer(\\n            earnVilleInsuranceFundReceiver,\\n            amountBUSDToSend.mul(earnVilleInsuranceFundFee).div(\\n                treasuryFee.add(earnVilleInsuranceFundFee).add(jackpotFee)\\n            )\\n        );\\n        /// The remaining BUSD goes to jackpot\\n        _pendingJackpotBalance = _pendingJackpotBalance.add(\\n            amountBUSDToSend.mul(jackpotFee).div(\\n                treasuryFee.add(earnVilleInsuranceFundFee).add(jackpotFee)\\n            )\\n        );\\n    }\\n\\n    function withdrawAllToTreasury() external swapping onlyOwner {\\n        uint256 amountToSwap = _gonBalances[address(this)].div(\\n            _gonsPerFragment\\n        );\\n        require(\\n            amountToSwap > 0,\\n            \\\"There is no EARN token deposited in token contract\\\"\\n        );\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amountToSwap,\\n            0,\\n            path,\\n            treasuryReceiver,\\n            block.timestamp\\n        );\\n    }\\n\\n    function shouldTakeFee(address from, address to)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if(isTakeFeeOnNormalTransfer) {\\n            return !_isFeeExempt[from];\\n        }\\n        return (pair == from || pair == to) && !_isFeeExempt[from];\\n    }\\n\\n    function shouldRebase() internal view returns (bool) {\\n        return\\n            _autoRebase &&\\n            (_totalSupply < MAX_SUPPLY) &&\\n            msg.sender != pair &&\\n            !inSwap &&\\n            block.timestamp >= (_lastRebasedTime + 15 minutes);\\n    }\\n\\n    function shouldAddLiquidity() internal view returns (bool) {\\n        return\\n            _autoAddLiquidity &&\\n            !inSwap &&\\n            msg.sender != pair &&\\n            block.timestamp >= (_lastAddLiquidityTime + 2 days);\\n    }\\n\\n    function shouldSwapBack() internal view returns (bool) {\\n        return !inSwap && msg.sender != pair;\\n    }\\n\\n    function setTwentyFourHour(uint256 _twentyFourHour) external onlyOwner {\\n        require(\\n            _twentyFourHour <= 86400 && _twentyFourHour >= 60,\\n            \\\"Twenty four hour must be between 60 and 86400 seconds\\\"\\n        );\\n        TwentyFourhours = _twentyFourHour;\\n    }\\n\\n    function setIsTakeFeeOnNormalTransfer(bool _isTakeFeeOnNormalTransfer)\\n        external\\n        onlyOwner {\\n        isTakeFeeOnNormalTransfer = _isTakeFeeOnNormalTransfer;\\n    }\\n\\n    function setMaxSellTransaction(uint256 _maxTxn) external onlyOwner {\\n        require(_maxTxn >= 1000 * 10**DECIMALS, \\\"Max transaction must be greater than 1000\\\");\\n        maxSellTransactionAmount = _maxTxn;\\n    }\\n\\n    function setSellLimitPercent(uint256 _percent) external onlyOwner {\\n        require(_percent <= 100 && _percent >= 1, \\\"Percentage must be less than 100 and greater than 1\\\");\\n        sellLimitPercent = _percent;\\n    }\\n\\n    function setBuyLimitPercent(uint256 _percent) external onlyOwner {\\n        require(_percent <= 100 && _percent >= 1, \\\"Percentage must be less than 100 and greater than 1\\\");\\n        buyLimitPercent = _percent;\\n    }\\n\\n    function setBuyFees(\\n        uint256 _liquidityFee,\\n        uint256 _earnVilleInsuranceFundFee,\\n        uint256 _treasuryFee,\\n        uint256 _jackpotFee,\\n        uint256 _jackpotSellFee,\\n        uint256 _sellFee\\n    ) external onlyOwner {\\n        uint256 totalBuyFee = _liquidityFee\\n            .add(_earnVilleInsuranceFundFee)\\n            .add(_treasuryFee)\\n            .add(_jackpotFee);\\n        uint256 totalSellFee = totalBuyFee.add(_jackpotSellFee).add(_sellFee);\\n        require(\\n            totalSellFee <= TOTAL_FEES_LIMIT,\\n            \\\"Total fees can not exceed 25%\\\"\\n        );\\n        liquidityFee = _liquidityFee;\\n        earnVilleInsuranceFundFee = _earnVilleInsuranceFundFee;\\n        treasuryFee = _treasuryFee;\\n        jackpotFee = _jackpotFee;\\n        jackpotSellFee = _jackpotSellFee;\\n        sellFee = _sellFee;\\n    }\\n\\n    function setJackpotCashout(uint256 _jackpotCashout) external onlyOwner {\\n        jackpotCashout = _jackpotCashout;\\n    }\\n\\n    function setAutoRebase(bool _flag) external onlyOwner {\\n        if (_flag) {\\n            _autoRebase = _flag;\\n            _lastRebasedTime = block.timestamp;\\n        } else {\\n            _autoRebase = _flag;\\n        }\\n    }\\n\\n    function setJackpotHardBuyback(uint256 _hardBuyback) external onlyOwner {\\n        jackpotHardBuyback = _hardBuyback;\\n    }\\n\\n    function setBuyBackWallet(address _wallet) external onlyOwner {\\n        buybackWallet = _wallet;\\n    }\\n\\n    function setJackpotMinBuy(uint256 _minBuy) external onlyOwner {\\n        jackpotMinBuy = _minBuy;\\n    }\\n\\n    function setJackpotTimespan(uint256 _timespan) external onlyOwner {\\n        jackpotTimespan = _timespan;\\n    }\\n\\n    function setJackpotHardLimit(uint256 _hardlimit) external onlyOwner {\\n        jackpotHardLimit = _hardlimit;\\n    }\\n\\n    function setAutoAddLiquidity(bool _flag) external onlyOwner {\\n        if (_flag) {\\n            _autoAddLiquidity = _flag;\\n            _lastAddLiquidityTime = block.timestamp;\\n        } else {\\n            _autoAddLiquidity = _flag;\\n        }\\n    }\\n\\n    function allowance(address owner_, address spender)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowedFragments[owner_][spender];\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        external\\n        returns (bool)\\n    {\\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\\n        if (subtractedValue >= oldValue) {\\n            _allowedFragments[msg.sender][spender] = 0;\\n        } else {\\n            _allowedFragments[msg.sender][spender] = oldValue.sub(\\n                subtractedValue\\n            );\\n        }\\n        emit Approval(\\n            msg.sender,\\n            spender,\\n            _allowedFragments[msg.sender][spender]\\n        );\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        external\\n        returns (bool)\\n    {\\n        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][\\n            spender\\n        ].add(addedValue);\\n        emit Approval(\\n            msg.sender,\\n            spender,\\n            _allowedFragments[msg.sender][spender]\\n        );\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 value)\\n        external\\n        override\\n        returns (bool)\\n    {\\n        _allowedFragments[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function checkFeeExempt(address _addr) external view returns (bool) {\\n        return _isFeeExempt[_addr];\\n    }\\n\\n    function isNotInSwap() external view returns (bool) {\\n        return !inSwap;\\n    }\\n\\n    function manualSync() external {\\n        IPancakeSwapPair(pair).sync();\\n    }\\n\\n    function setFeeReceivers(\\n        address _autoLiquidityReceiver,\\n        address _treasuryReceiver,\\n        address _earnVilleInsuranceFundReceiver\\n    ) external onlyOwner {\\n        autoLiquidityReceiver = _autoLiquidityReceiver;\\n        treasuryReceiver = _treasuryReceiver;\\n        earnVilleInsuranceFundReceiver = _earnVilleInsuranceFundReceiver;\\n    }\\n\\n    function setWhitelist(address _addr, bool _isWhitelisted) external onlyOwner {\\n        _isFeeExempt[_addr] = _isWhitelisted;\\n    }\\n\\n    function setBotBlacklist(address _botAddress, bool _flag)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            isContract(_botAddress),\\n            \\\"only contract address, not allowed exteranlly owned account\\\"\\n        );\\n        blacklist[_botAddress] = _flag;\\n    }\\n\\n    function setPairAddress(address _pairAddress) external onlyOwner {\\n        pairAddress = _pairAddress;\\n    }\\n\\n    function setLP(address _address) external onlyOwner {\\n        pairContract = IPancakeSwapPair(_address);\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address who) public view override returns (uint256) {\\n        return _gonBalances[who].div(_gonsPerFragment);\\n    }\\n\\n    function isContract(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size > 0;\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    },\r\n    \"contracts/library/SafeMath.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\npragma solidity 0.7.4;\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\"\r\n    },\r\n    \"contracts/library/SafeMathInt.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\npragma solidity 0.7.4;\\n\\nlibrary SafeMathInt {\\n    int256 private constant MIN_INT256 = int256(1) << 255;\\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\\n\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a * b;\\n\\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\\n        require((b == 0) || (c / b == a));\\n        return c;\\n    }\\n\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != -1 || a != MIN_INT256);\\n\\n        return a / b;\\n    }\\n\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\\n        return c;\\n    }\\n\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\\n        return c;\\n    }\\n\\n    function abs(int256 a) internal pure returns (int256) {\\n        require(a != MIN_INT256);\\n        return a < 0 ? -a : a;\\n    }\\n}\"\r\n    },\r\n    \"contracts/interface/IERC20.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\npragma solidity 0.7.4;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\"\r\n    },\r\n    \"contracts/interface/IPancakeSwapFactory.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\npragma solidity 0.7.4;\\n\\ninterface IPancakeSwapFactory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\"\r\n    },\r\n    \"contracts/interface/IPancakeSwapRouter.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\npragma solidity 0.7.4;\\n\\ninterface IPancakeSwapRouter {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IPancakeSwapPair.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\npragma solidity 0.7.4;\\n\\ninterface IPancakeSwapPair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Ownable.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\npragma solidity 0.7.4;\\n\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipRenounced(address indexed previousOwner);\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor() {\\n        _owner = msg.sender;\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(isOwner());\\n        _;\\n    }\\n\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipRenounced(_owner);\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"contracts/ERC20Detailed.sol\": {\r\n      \"content\": \"/// SPDX-License-Identifier: MIT\\npragma solidity 0.7.4;\\nimport \\\"./interface/IERC20.sol\\\";\\n\\nabstract contract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashedOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensOut\",\"type\":\"uint256\"}],\"name\":\"BigBang\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"JackpotAwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TwentyFourhours\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoAddLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_initRebaseStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_isRebaseStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_jackpotGonsTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastAddLiquidityTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lastRebasedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pendingJackpotBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLimitPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnVilleInsuranceFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earnVilleInsuranceFundReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJackpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"jackpotTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingJackpotAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastAwardedJackpot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lastAwarded\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastAwardedCash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAwardedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAwardedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBigBang\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBuy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lastBuyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastBuyTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingJackpotBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingJackpotBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingJackpotTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingJackpotTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"isJackpotEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNotInSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTakeFeeOnNormalTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotBuyerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotCashout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotHardBuyback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotHardLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotMinBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotTimespan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairContract\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IPancakeSwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimitPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoAddLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setAutoRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_botAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setBotBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"setBuyBackWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earnVilleInsuranceFundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jackpotFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_jackpotSellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setBuyLimitPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autoLiquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_earnVilleInsuranceFundReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isTakeFeeOnNormalTransfer\",\"type\":\"bool\"}],\"name\":\"setIsTakeFeeOnNormalTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_jackpotCashout\",\"type\":\"uint256\"}],\"name\":\"setJackpotCashout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hardBuyback\",\"type\":\"uint256\"}],\"name\":\"setJackpotHardBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hardlimit\",\"type\":\"uint256\"}],\"name\":\"setJackpotHardLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBuy\",\"type\":\"uint256\"}],\"name\":\"setJackpotMinBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timespan\",\"type\":\"uint256\"}],\"name\":\"setJackpotTimespan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxn\",\"type\":\"uint256\"}],\"name\":\"setMaxSellTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"}],\"name\":\"setPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setSellLimitPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_twentyFourHour\",\"type\":\"uint256\"}],\"name\":\"setTwentyFourHour\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldAwardJackpot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalJackpotBuyback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalJackpotBuyer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalJackpotOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tradeData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"firstBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSellTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBuyTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllToTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EarnVille", "CompilerVersion": "v0.7.4+commit.3f05b770", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}