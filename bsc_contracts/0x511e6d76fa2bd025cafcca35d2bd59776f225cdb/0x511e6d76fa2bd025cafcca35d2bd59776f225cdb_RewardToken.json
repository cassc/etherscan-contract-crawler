{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BSC/PWA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"./PWFactory.sol\\\";\\nimport \\\"./RewardToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract PWA is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    string public appName;\\n\\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    // Project Vars\\n    ////////////////////////////////////////////////\\n    struct PWProject {\\n        uint256 id;\\n        address projectToken;\\n        bool isListed;\\n        string logoURI;\\n        string sparklineURI;\\n        uint256 totalPumps;\\n        uint256 totalActivePumps;\\n        uint256 totalContributions;\\n    }\\n    PWProject[] private projects;\\n    mapping(address => uint256) private projectsIds;\\n\\n    PWFactory private pumpFactory;\\n\\n    uint256 public projectCount;\\n\\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    // Rewards Vars\\n    ////////////////////////////////////////////////\\n    RewardToken private rewardToken;\\n\\n    mapping(address => uint256) private contributions;\\n    mapping(address => uint256) private totalRewardTokensDispencedToUser;\\n\\n    uint256 private totalContributions;\\n    uint256 private totalRewards;\\n    uint256 private burnPercent = 25;\\n\\n    uint16 private BURN_MULTIPLIER = 2;\\n\\n    constructor (\\n        string memory _appName\\n    ) {\\n        appName = _appName;\\n        PWFactory fact = new PWFactory(owner());\\n        pumpFactory = fact;\\n    }\\n\\n    receive() external payable {}\\n\\n    /////////////////////////////////////////////////////////////////////////////////////\\n    // Events\\n    ///////////////////////////////////////////////////////\\n\\n    event ContributionReceived(address indexed contributor, uint256 value);\\n    event RewardDispensed(address indexed recipient, uint256 rewardAmount);\\n    event RewardTokenSet(address indexed newRewardToken);\\n    event ProjectListed(\\n        address indexed sender,\\n        address indexed projectTokenAddress\\n    );\\n    event ProjectDelisted(\\n        address indexed sender,\\n        address indexed projectTokenAddress\\n    );\\n    event ProjectRelisted(\\n        address indexed sender,\\n        address indexed projectTokenAddress\\n    );\\n\\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    /// Projects functionality\\n    //////////////////////////////////\\n    function listProject(\\n        address _address,\\n        string memory _logoURI,\\n        string memory _sparklineURI\\n    ) public onlyOwner {\\n\\n        PWProject memory tolist = PWProject(\\n            projectCount + 1,\\n            _address,\\n            true,\\n            _logoURI,\\n            _sparklineURI,\\n            0,\\n            0,\\n            0\\n        );\\n\\n        projects.push(tolist);\\n        projectsIds[_address] = projectCount;\\n        projectCount++;\\n\\n        emit ProjectListed(msg.sender, _address);\\n    }\\n\\n    function delistProject(address _address) public onlyOwner {\\n        projects[projectsIds[_address]].isListed = false;\\n        projectCount--;\\n        emit ProjectDelisted(msg.sender, _address);\\n    }\\n\\n    function relistProject(address _address) public onlyOwner {\\n        projects[projectsIds[_address]].isListed = true;\\n        projectCount++;\\n        emit ProjectRelisted(msg.sender, _address);\\n    }\\n\\n    function returnProjectAtId(\\n        uint256 _id\\n    ) public view returns (PWProject memory) {\\n        return projects[_id];\\n    }\\n\\n    function returnAllProjectAddresses()\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        address[] memory allProjectAddresses = new address[](projectCount);\\n        for (uint256 i = 0; i < projectCount; i++) {\\n            allProjectAddresses[i] = address(projects[i].projectToken);\\n        }\\n        return allProjectAddresses;\\n    }\\n\\n    function getActiveProjectAddresses()\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        address[] memory activeAddresses = new address[](projectCount);\\n        uint256 activeIndex = 0;\\n        for (uint256 i = 0; i < projectCount; i++) {\\n            PWProject storage c = projects[i];\\n            if (c.isListed) {\\n                activeAddresses[activeIndex] = address(c.projectToken);\\n                activeIndex++;\\n            }\\n        }\\n        address[] memory trimmed = new address[](activeIndex);\\n        for (uint256 i = 0; i < activeIndex; i++) {\\n            trimmed[i] = activeAddresses[i];\\n        }\\n        return trimmed;\\n    }\\n\\n    function getActiveProjectsData() public view returns (PWProject[] memory) {\\n        address[] memory activeAddresses = new address[](projectCount);\\n        uint256 activeIndex = 0;\\n        for (uint256 i = 0; i < projectCount; i++) {\\n            PWProject storage c = projects[i];\\n            if (c.isListed) {\\n                activeAddresses[activeIndex] = address(c.projectToken);\\n                activeIndex++;\\n            }\\n        }\\n        address[] memory trimmed = new address[](activeIndex);\\n        for (uint256 i = 0; i < activeIndex; i++) {\\n            trimmed[i] = activeAddresses[i];\\n        }\\n\\n        PWProject[] memory allProjectsData = new PWProject[](activeIndex);\\n        for (uint256 i = 0; i < activeIndex; i++) {\\n            uint256 ind = projectsIds[activeAddresses[i]];\\n            allProjectsData[i] = projects[ind];\\n        }\\n        return allProjectsData;\\n    }\\n\\n    function getAllProjectsData() public view returns (PWProject[] memory) {\\n        return projects;\\n    }\\n\\n    function getAllProjectData(\\n        address _address\\n    )\\n        public\\n        view\\n        returns (\\n            PWProject memory,\\n            address,\\n            string memory,\\n            string memory,\\n            uint8,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 totalCreated = returnAllPumpsforProject(_address).length;\\n        uint256 totalActive = pumpFactory.returnActivePumpsForProjectCount(\\n            _address\\n        );\\n        uint256 totalRaised = pumpFactory.returnTotalRaisedForProject(_address);\\n        uint256 id = projectsIds[_address];\\n        PWProject memory pwp = projects[id];\\n        ERC20 token = ERC20(pwp.projectToken);\\n        return (\\n            pwp,\\n            owner(),\\n            token.name(),\\n            token.symbol(),\\n            token.decimals(),\\n            totalCreated,\\n            totalActive,\\n            totalRaised\\n        );\\n    }\\n\\n    function getProjectData(\\n        address _address\\n    ) public view returns (PWProject memory) {\\n        uint256 id = projectsIds[_address];\\n        return projects[id];\\n    }\\n\\n    function getProjectTokenData(\\n        address _address\\n    )\\n        public\\n        view\\n        returns (\\n            string memory,\\n            string memory,\\n            uint8\\n        )\\n    {\\n        uint256 id = projectsIds[_address];\\n        PWProject memory pwp = projects[id];\\n        ERC20 token = ERC20(pwp.projectToken);\\n        return (token.name(), token.symbol(), token.decimals());\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    /// Pumps functionality\\n    //////////////////////////////////\\n\\n    function returnAllPumps() external view returns (PW[] memory) {\\n        return pumpFactory.returnAllPumps();\\n    }\\n\\n    function returnAllPumpsforProject(\\n        address _addr\\n    ) public view returns (PW[] memory) {\\n        return pumpFactory.returnAllPumpsForProject(_addr);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    /// Contribution and Rewards functionality\\n    //////////////////////////////////\\n    function contribute(address _pwaddr) public payable {\\n\\n        require(msg.value > 0, \\\"Contribution value must be greater than zero\\\");\\n\\n        PW pump = PW(payable(_pwaddr));\\n\\n        (bool success) = pump.contribute{value: msg.value}(msg.sender);\\n        require(success, \\\"Contribution to PumpWallet child failed\\\");\\n\\n        uint256 contributionValue = msg.value;\\n        contributions[msg.sender] += contributionValue;\\n        totalContributions += contributionValue;\\n\\n        uint256 rewardAmount = (contributionValue * rewardToken.getRewardPercent()) / 100;\\n        totalRewardTokensDispencedToUser[msg.sender] += rewardAmount;\\n        totalRewards += rewardAmount;\\n\\n        rewardToken.rewardUser(msg.sender, contributionValue, rewardAmount);\\n        emit RewardDispensed(msg.sender, contributionValue);\\n\\n        uint32 burnRate = rewardToken.getBurnPercent();\\n        uint256 burnAmount = ((contributionValue * (burnRate * BURN_MULTIPLIER)) / 100);\\n\\n        rewardToken.burnFromTokenContract(burnAmount);\\n\\n        emit ContributionReceived(msg.sender, contributionValue);\\n    }\\n\\n    function getPumpFactory() public view returns (address) {\\n        return address(pumpFactory);\\n    }\\n\\n    function getTotalContributions() public view returns (uint256) {\\n        return totalContributions;\\n    }\\n\\n    function getTotalRewards() public view returns (uint256) {\\n        return totalRewards;\\n    }\\n\\n    function getUserRewardBalance(address user) public view returns (uint256) {\\n        return totalRewardTokensDispencedToUser[user];\\n    }\\n\\n    function transferOwnership(address newOwner) public override onlyOwner {\\n        require(\\n            newOwner != address(rewardToken),\\n            \\\"Cannot transfer ownership to the reward token contract\\\"\\n        );\\n        super.transferOwnership(newOwner);\\n    }\\n\\n    function setRewardTokenAddress(address _rewardToken) external onlyOwner {\\n        require(_rewardToken != address(0), \\\"Invalid rewardToken address\\\");\\n        rewardToken = RewardToken(payable(_rewardToken));\\n        emit RewardTokenSet(_rewardToken);\\n    }\\n\\n    function setBurnPercent(uint256 percent) external onlyOwner {\\n        require(\\n            percent <= 100,\\n            \\\"Burn percentage should be less than or equal to 100\\\"\\n        );\\n        burnPercent = percent;\\n    }\\n\\n    function setBurnMultiplier(uint16 _Multiplier) external onlyOwner {\\n        BURN_MULTIPLIER = _Multiplier;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"contracts/BSC/RewardToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\n/**\\n * @title RewardToken\\n * @dev A contract for managing a custom ERC20 token with additional features.\\n */\\ncontract RewardToken is ERC20, Ownable, Pausable, ERC20Burnable {\\n    uint256 private constant TOTAL_SUPPLY = 120000000000001000000000000000000;\\n    uint16 private REWARD_PERCENT = 10;\\n    uint16 private BURN_PERCENT = 2;\\n    address private contributionContract;\\n\\n    bool private isRewardEnabled;\\n    bool private isBurnEnabled;\\n\\n    uint256 private totalBurnedTokens;\\n\\n    bool private disableBurnDuringRewardTransfer;\\n\\n    modifier onlyContributionContract() {\\n        require(\\n            msg.sender == contributionContract,\\n            \\\"Caller is not the contribution contract\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _contributionContract) ERC20(\\\"Krypto Inu\\\", \\\"Krypto\\\") {\\n        _mint(_contributionContract, TOTAL_SUPPLY / 4);\\n        _mint(address(this), TOTAL_SUPPLY / 4);\\n        _mint(msg.sender, TOTAL_SUPPLY / 2);\\n\\n        contributionContract = _contributionContract;\\n        isRewardEnabled = true;\\n        isBurnEnabled = true;\\n    }\\n\\n    receive() external payable {}\\n\\n    function burnFromTokenContract(uint256 amount) external {\\n        if (msg.sender != contributionContract) {\\n            require(\\n                msg.sender == address(this),\\n                \\\"Only the contribution contract or the contract itself can call this function\\\"\\n            );\\n        }\\n\\n        if (isBurnEnabled && balanceOf(address(this)) >= amount) {\\n            _burn(address(this), amount);\\n            totalBurnedTokens += amount;\\n        }\\n    }\\n\\n    function transfer(address to, uint256 amount)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        if (!disableBurnDuringRewardTransfer) {\\n            uint256 burnAmount = (amount * BURN_PERCENT) / 100;\\n\\n            if (isBurnEnabled && balanceOf(address(this)) >= amount) {\\n                _burn(address(this), burnAmount);\\n                totalBurnedTokens += burnAmount;\\n            }\\n        }\\n\\n        return super.transfer(to, amount);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        uint256 burnAmount = (amount * BURN_PERCENT) / 100;\\n\\n        if (isBurnEnabled && balanceOf(address(this)) >= amount) {\\n            _burn(address(this), burnAmount);\\n            totalBurnedTokens += burnAmount;\\n        }\\n\\n        return super.transferFrom(from, to, amount);\\n    }\\n\\n    function rewardUser(\\n        address recipient,\\n        uint256 contributionValue,\\n        uint256 rewardAmount\\n    ) external onlyContributionContract {\\n        require(\\n            contributionValue > 0,\\n            \\\"Contribution value must be greater than zero\\\"\\n        );\\n\\n        if (\\n            isRewardEnabled && rewardAmount <= balanceOf(contributionContract)\\n        ) {\\n            disableBurnDuringRewardTransfer = true;\\n            _transfer(contributionContract, recipient, rewardAmount);\\n            disableBurnDuringRewardTransfer = false;\\n        }\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function getRewardPercent() external view returns (uint256) {\\n        return REWARD_PERCENT;\\n    }\\n\\n    function getTotalSupply() external pure returns (uint256) {\\n        return TOTAL_SUPPLY;\\n    }\\n\\n    function getBurnedTokens() external view returns (uint256) {\\n        return totalBurnedTokens;\\n    }\\n\\n    function getBurnPercent() external view returns (uint16) {\\n        return BURN_PERCENT;\\n    }\\n\\n    function setRewardPercent(uint16 _percent) external onlyOwner {\\n        REWARD_PERCENT = _percent;\\n    }\\n\\n    function setBurnPercent(uint16 _percent) external onlyOwner {\\n        BURN_PERCENT = _percent;\\n    }\\n\\n    function setIsRewardEnabled(bool _isEnabled) external onlyOwner {\\n        isRewardEnabled = _isEnabled;\\n    }\\n\\n    function setIsBurnEnabled(bool _isEnabled) external onlyOwner {\\n        isBurnEnabled = _isEnabled;\\n    }\\n\\n    function setContributionContract(address _newContrContract) external onlyOwner {\\n        contributionContract = _newContrContract;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BSC/PWFactory.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.18;\\n//SPDX-License-Identifier: MIT\\n\\nimport \\\"./PW.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract PWFactory is Ownable {\\n    using SafeMath for uint256;\\n\\n    address private PWAContract;\\n\\n    PW[] private allPWs;\\n\\n    struct PWData {\\n        PW.PumpDataStrings PumpDataStrings;\\n        PW.PumpDataInts PumpDataInts;\\n        PW.Weight Weight;\\n        PW.WalletType WalletType;\\n        uint256 myStake;\\n        bool inKind;\\n        PW.State state;\\n        address pwAddress;\\n        uint256 pwBalance;\\n        uint256 pwcompletionOrExpirationDateTime;\\n        address[] winners;\\n    }\\n\\n    mapping(address => uint256) private pwIndex;\\n    mapping(address => PW[]) private mappedPumps;\\n    address private randomNumContract;\\n\\n    constructor(\\n        address _owner\\n    ){\\n        transferOwnership(_owner);\\n        PWAContract = address(msg.sender);\\n    }\\n\\n    //////////////////////////////////////////////////////////////////////////////////////////////////\\n    // PumpFactory Logic\\n    //////////////////////////////////////////////////////////////////\\n    function createPW(\\n        address _address,\\n        bool _inKind,\\n        string[6] memory _stringsIn,\\n        uint256[8] memory _uintsIn\\n    ) public {\\n        PW newWallet = new PW({\\n            _tokenAddress: _address,\\n            _inKind: _inKind,\\n            _stringsIn: _stringsIn,\\n            _uintsIn: _uintsIn,\\n            _PWAContract: PWAContract,\\n            _PumpFactoryAddress: address(this),\\n            _randomNumContract: randomNumContract\\n        });\\n\\n        allPWs.push(newWallet);\\n        mappedPumps[_address].push(newWallet);\\n        pwIndex[address(newWallet)] = allPWs.length - 1;\\n    }\\n\\n    function returnAllPumps() external view returns (PW[] memory) {\\n        return allPWs;\\n    }\\n\\n    function getPWDs(address _addr, address useraddress)\\n        public\\n        view\\n        returns (PWData[] memory)\\n    {\\n        PW[] memory projectPumps = mappedPumps[_addr];\\n        PWData[] memory pwds = new PWData[](projectPumps.length);\\n        for (uint256 i = 0; i < projectPumps.length; i++) {\\n            PW pw = projectPumps[i];\\n\\n            address pwAddress = address(pw);\\n            PW.PumpDataStrings memory pws = pw.getpws();\\n            PW.PumpDataInts memory pwi = pw.getpwi();\\n            PW.Weight weight = pw.weightType();\\n            PW.WalletType walletType = pw.walletType();\\n            uint256 myStake = pw.getContribution(useraddress);\\n            bool ik = pw.inKind();\\n            PW.State state = pw.state();\\n            uint256 pwBal = address(pw).balance;\\n            uint256 pwExp = pw.completionOrExpirationDateTime();\\n            address[] memory winners = pw.getWinners();\\n\\n            PWData memory pd = PWData(\\n                pws,\\n                pwi,\\n                weight,\\n                walletType,\\n                myStake,\\n                ik,\\n                state,\\n                pwAddress,\\n                pwBal,\\n                pwExp,\\n                winners\\n            );\\n            pwds[i] = pd;\\n        }\\n        return pwds;\\n    }\\n\\n    function returnAllPumpsForProject(address _addr)\\n        external\\n        view\\n        returns (PW[] memory)\\n    {\\n        return mappedPumps[_addr];\\n    }\\n\\n    function returnActivePumpsForProjectCount(address _addr)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 count = 0;\\n        PW[] memory activePumps = mappedPumps[_addr];\\n        for (uint256 i = 0; i < activePumps.length; i++) {\\n            if (activePumps[i].completionOrExpirationDateTime() == 0) {\\n                count++;\\n            }\\n        }\\n        return count;\\n    }\\n\\n    function returnTotalRaisedForProject(address _addr)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalRaised = 0;\\n        PW[] memory pumps = mappedPumps[_addr];\\n        for (uint256 i = 0; i < pumps.length; i++) {\\n            PW.PumpDataInts memory pwi = pumps[i].getpwi();\\n            totalRaised += pwi.totalContributions;\\n        }\\n        return totalRaised;\\n    }\\n\\n    function setRNContract(address _addr) external onlyOwner{\\n        randomNumContract = _addr;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BSC/PW.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./PWFactory.sol\\\";\\nimport \\\"./_VRFv2Consumer.sol\\\";\\n\\n///Interfaces\\ninterface IUniswapV2Router01 {\\n    function WETH() external pure returns (address);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {}\\n\\ninterface IUniswapRouter is IUniswapV2Router02 {}\\n\\nabstract contract IERC20Extented is IERC20 {\\n    function decimals() public view virtual returns (uint8);\\n}\\n\\n/**\\n * PumpWallet Contract v0.2\\n * Operates in Blockchain native token and autobuys/burns $Krypto tokens at token redistibution.\\n */\\ncontract PW is ReentrancyGuard, Ownable {\\n    using SafeMath for uint256;\\n\\n    PWFactory public pumpFactory;\\n\\n    IUniswapRouter public ROUTER; // BSCMainnet\\n    address private constant ROUTER_ADDRESS = 0x10ED43C718714eb63d5aA57B78B54704E256024E; // PancakeV2 Router Address\\n\\n    IERC20 public immutable pumptoken;\\n    uint256 private DEV_FEE = 5;\\n\\n    uint8 private constant MIN_CHARITY_PERCENTAGE = 10;\\n    bool public inKind = false;\\n    mapping(address => uint256) public contributionsNative;\\n    mapping(address => uint256) public contributionsInToken;\\n    address[] private contributors;\\n    uint256[] private winnerIndexes;\\n    address[] private winnerAddresses;\\n    address[] private availableContributors;\\n\\n    ///////////////////\\n    // Contract Protection\\n    ////////////\\n    // address private deployerAddress;\\n\\n    enum State {\\n        InProgress,\\n        Expired,\\n        Completed,\\n        AwaitingRandom\\n    }\\n    State public state = State.InProgress;\\n\\n    enum Weight {\\n        equalShare,\\n        weightedShare\\n    }\\n    Weight public weightType;\\n\\n    enum WalletType {\\n        PumpWallet,\\n        CrowdFund,\\n        Charity\\n    }\\n    WalletType public walletType;\\n    uint256 public completionOrExpirationDateTime;\\n\\n    struct PumpDataStrings {\\n        string title;\\n        string description;\\n        address creator;\\n        address charityAddress;\\n        address beneficiaryAddress;\\n        address projectAddress;\\n        address liquidityAddress;\\n    }\\n    PumpDataStrings public pumpWalletStrings;\\n\\n    struct PumpDataInts {\\n        uint256 launchDateTime;\\n        uint256 endDateTime;\\n        uint256 goal;\\n        uint256 minContribution;\\n        uint32 winnerNum; // needs to be 32 as this is used for random generation?\\n        uint8 charityPercent;\\n        uint256 totalContributions;\\n        uint256 liquidityPercent;\\n        uint64 contributionCount;\\n    }\\n    PumpDataInts public pumpWalletInts;\\n    address private PWAContract;\\n\\n    ///////////////////\\n    // VRF\\n    ////////////\\n    VRFv2Consumer public randomNumContract;\\n\\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    // Events\\n    //////////////////////////////////////////////////////////\\n    event TargetAchieved(\\n        address indexed pumpWalletAddress,\\n        string title,\\n        uint256 balance,\\n        uint256 indexed goal\\n    );\\n    event ContributionRecieved(address indexed sender, uint256 indexed amount);\\n    event BeneficiaryOrWinnerPaid(\\n        address indexed beneficiaryWalletAddress,\\n        uint256 balance\\n    );\\n    event OverheadFeesRecieved(address indexed receiver, uint256 payAmount);\\n    event Refund(address indexed caller, uint256 amount);\\n\\n    constructor(\\n        address _tokenAddress,\\n        bool _inKind,\\n        string[6] memory _stringsIn,\\n        uint256[8] memory _uintsIn,\\n        address _PWAContract,\\n        address _PumpFactoryAddress,\\n        address _randomNumContract\\n    ) {\\n        randomNumContract = VRFv2Consumer(_randomNumContract);\\n\\n        pumptoken = IERC20(_tokenAddress);\\n        inKind = _inKind;\\n        PWAContract = _PWAContract;\\n        pumpFactory = PWFactory(payable(_PumpFactoryAddress));\\n\\n        // stringsIn\\n        pumpWalletStrings.title = _stringsIn[0];\\n        pumpWalletStrings.description = _stringsIn[1];\\n        pumpWalletStrings.creator = msg.sender;\\n        pumpWalletStrings.charityAddress = parseAddr(_stringsIn[2]);\\n        pumpWalletStrings.beneficiaryAddress = parseAddr(_stringsIn[3]);\\n        pumpWalletStrings.projectAddress = parseAddr(_stringsIn[4]);\\n        pumpWalletStrings.liquidityAddress = parseAddr(_stringsIn[5]);\\n\\n        // uintsIn\\n        pumpWalletInts.launchDateTime = block.timestamp;\\n        pumpWalletInts.endDateTime = _uintsIn[0];\\n        pumpWalletInts.goal = _uintsIn[1] + ((_uintsIn[1] / 100) * DEV_FEE);\\n        pumpWalletInts.minContribution = _uintsIn[2]; // removed Fuck up!\\n        pumpWalletInts.winnerNum = uint8(_uintsIn[3]);\\n        weightType = Weight(_uintsIn[4]);\\n        walletType = WalletType(_uintsIn[5]);\\n        pumpWalletInts.charityPercent = uint8(_uintsIn[6]);\\n        pumpWalletInts.liquidityPercent = _uintsIn[7];\\n\\n        ROUTER = IUniswapRouter(ROUTER_ADDRESS);\\n        winnerIndexes = new uint256[](pumpWalletInts.winnerNum);\\n\\n        // We need to make sure the fee amounts a no larger than 80% (very unlikely)\\n        // so that at least 20% \\n        require(\\n            (pumpWalletInts.charityPercent + DEV_FEE + pumpWalletInts.liquidityPercent) < 80,\\n            \\\"Fees to high, alltogether fees must be less than < 80\\\"\\n        );\\n\\n        // Only move forward if charity is above min and below max\\n        if (walletType != WalletType.Charity) {\\n            require(\\n                pumpWalletInts.charityPercent <= (100 - DEV_FEE - pumpWalletInts.liquidityPercent),\\n                \\\"Charity% too high needs to be < 100-DEVFEE-LQFEE%\\\"\\n            );\\n            require(\\n                pumpWalletInts.charityPercent >= MIN_CHARITY_PERCENTAGE,\\n                \\\"Charity% too Low needs to be >= 10%\\\"\\n            );\\n        }\\n\\n        transferOwnership(tx.origin);\\n    }\\n\\n    receive() external payable {}\\n\\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    // Modifiers\\n    //////////////////////////////////////////////////////////\\n\\n    modifier inState(State _state) {\\n        require(state == _state, \\\"State Error!\\\");\\n        _;\\n    }\\n\\n    modifier onlyAuthorized() {\\n        require(\\n            msg.sender == owner() ||\\n            msg.sender == address(this) ||\\n            msg.sender == PWAContract,\\n            \\\"Unauthorized caller\\\"\\n        );\\n        _;\\n    }\\n\\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    // VRF - Chainlink\\n    //////////////////////////////////////////////////////////\\n\\n    function requestRanNum(uint32 _numWords) internal {\\n        // Request random words first\\n        randomNumContract.requestRandomWords(_numWords);\\n    }\\n\\n    function getRandomValues()\\n        public\\n        view\\n        returns (bool fulfilled, uint256[] memory randomWords)\\n    {\\n        uint256 requestID = randomNumContract.getLastRequestId();\\n        (fulfilled, randomWords) = randomNumContract.getRequestStatus(\\n            requestID\\n        );\\n\\n        return (fulfilled, randomWords);\\n    }\\n\\n    function getRandoms() internal view returns (uint256[] memory) {\\n\\n        uint256 requestID = randomNumContract.getLastRequestId();\\n\\n        (, uint256[] memory randomWords) = randomNumContract.getRequestStatus(\\n            requestID\\n        );\\n\\n        return randomWords;\\n    }\\n\\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    // Contributions\\n    //////////////////////////////////////////////////////////\\n\\n    function contribute(address _sender)\\n        public\\n        payable\\n        inState(State.InProgress)\\n        returns (bool success)\\n    {\\n        success = false;\\n\\n        require(msg.value > 0, \\\"Contribution amount must be greater than zero\\\");\\n\\n        bool goalReached = false;\\n\\n        if (contributionsNative[_sender] == 0) {\\n            contributors.push(_sender);\\n        }\\n        contributionsNative[_sender] += msg.value;\\n        pumpWalletInts.totalContributions += msg.value;\\n        pumpWalletInts.contributionCount++;\\n\\n        if (pumpWalletInts.totalContributions >= pumpWalletInts.goal) {\\n            goalReached = true;\\n            emit TargetAchieved(address(this), pumpWalletStrings.title, pumpWalletInts.totalContributions, pumpWalletInts.goal);\\n\\n            state = State.AwaitingRandom;\\n\\n            if (walletType == WalletType.PumpWallet) {\\n                requestRanNum(pumpWalletInts.winnerNum);\\n            } \\n\\n            payout();\\n\\n        } else if (block.timestamp > pumpWalletInts.endDateTime) {\\n            state = State.Expired;\\n        }\\n\\n        if (goalReached) {\\n            completionOrExpirationDateTime = block.timestamp;\\n        }\\n\\n        if (inKind && !goalReached) {\\n            uint256 devFee = (msg.value * DEV_FEE) / 100;\\n            uint256 liquidityFee = (msg.value * pumpWalletInts.liquidityPercent) / 100;\\n            payDevFee(devFee);\\n            payLiquidityFee(liquidityFee);\\n\\n            uint256 convertedAmount = address(this).balance;\\n\\n            if (address(pumptoken) != ROUTER.WETH()) {\\n                convertedAmount = convertEthToToken(\\n                    convertedAmount,\\n                    address(pumptoken)\\n                );\\n                // When inKind we need to change contributions[msg.snder] to the newly converted amount here so they can refund later\\n            }\\n\\n            // Update contributionsInToken with the converted amount\\n            contributionsInToken[_sender] += convertedAmount;\\n        }\\n\\n        success = true;\\n\\n        emit ContributionRecieved(tx.origin, msg.value);\\n\\n        return success;\\n    }\\n\\n    function payout() public onlyAuthorized {\\n        if (!inKind) {\\n            payDevTeamEth();\\n            payToLiquidity();\\n        }\\n\\n        convertTokens();\\n\\n        payCharity();\\n\\n        if (walletType == WalletType.CrowdFund) {\\n            payBeneficiary();\\n        }\\n    }\\n\\n    /*\\n     * Token conversion\\n     */\\n    function convertTokens() internal {\\n        uint256 convertedAmount = address(this).balance;\\n        if (address(pumptoken) != ROUTER.WETH()) {\\n            if (convertedAmount > 0) {\\n                convertedAmount = convertEthToToken(\\n                    convertedAmount,\\n                    address(pumptoken)\\n                );\\n            }\\n        }\\n    }\\n\\n    function convertEthToToken(uint256 amount, address _tokenaddress)\\n        internal\\n        returns (uint256)\\n    {\\n        // Set the deadline for the transaction (15 minutes)\\n        uint256 deadline = block.timestamp + 900;\\n\\n        // Approve Router to spend native balance from this contract\\n        IERC20(ROUTER.WETH()).approve(address(ROUTER), amount);\\n\\n        // Swap native for pump token\\n        uint256[] memory amounts = ROUTER.swapExactETHForTokens{value: amount}(\\n            0,\\n            getPathForETHtoToken(_tokenaddress),\\n            address(this),\\n            deadline\\n        );\\n\\n        return amounts[1];\\n    }\\n\\n    function getPathForETHtoToken(address _tokenaddress)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        address[] memory path = new address[](2);\\n        path[0] = ROUTER.WETH();\\n        path[1] = address(_tokenaddress);\\n\\n        return path;\\n    }\\n\\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    // Payment and Transfers\\n    //////////////////////////////////////////////////////////\\n\\n    function payDevTeamTokens()\\n        internal\\n    {\\n        address payable devTeam = payable(owner());\\n        uint256 tokenBalance = pumptoken.balanceOf(address(this));\\n        uint256 payAmount = ((tokenBalance / 100) * DEV_FEE);\\n        pumptoken.transfer(devTeam, payAmount);\\n        emit OverheadFeesRecieved(devTeam, payAmount);\\n    }\\n\\n\\n    function payDevFee(uint256 _amount)\\n        internal\\n    {\\n        address payable devTeam = payable(owner());\\n        uint256 payAmount = ((_amount / 100) * DEV_FEE);\\n        devTeam.transfer(payAmount);\\n        emit OverheadFeesRecieved(devTeam, payAmount);\\n    }\\n\\n    /*  \\n        Pay dev fees in Eth\\n    */\\n    function payDevTeamEth()\\n        public onlyAuthorized\\n    {\\n        address payable devTeam = payable(owner());\\n        uint256 contractBalance = address(this).balance;\\n        uint256 payAmount = ((contractBalance / 100) * DEV_FEE);\\n        devTeam.transfer(payAmount);\\n        emit OverheadFeesRecieved(devTeam, payAmount);\\n    }\\n\\n    /*  \\n        Pay fee to liquidity Contract if pump is inKind\\n    */\\n    function payLiquidityFee(uint256 _amount)\\n        public onlyAuthorized\\n    {\\n        address payable lc = payable(pumpWalletStrings.liquidityAddress);\\n        uint256 payAmount = ((_amount / 100) * pumpWalletInts.liquidityPercent);\\n        lc.transfer(payAmount);\\n        emit OverheadFeesRecieved(lc, payAmount);\\n    }\\n\\n    /*  \\n        Pay to liquidity Contract upon pump completion\\n    */\\n    function payToLiquidity() public {\\n        require(pumpWalletStrings.liquidityAddress != address(0), \\\"Invalid liquidity address\\\");\\n        address payable lc = payable(pumpWalletStrings.liquidityAddress);\\n        uint256 contractBalance = address(this).balance;\\n        uint256 payAmount = contractBalance.mul(pumpWalletInts.liquidityPercent).div(100);\\n        require(address(this).balance >= payAmount, \\\"Insufficient balance\\\");\\n\\n        lc.transfer(payAmount);\\n\\n        emit OverheadFeesRecieved(lc, payAmount);\\n    }\\n\\n    /**\\n     * Beneficiary Payment function\\n     */\\n    function payBeneficiary()\\n        internal\\n    {\\n        uint256 tokenBalance = pumptoken.balanceOf(address(this));\\n        address payable beneficiary = payable(\\n            pumpWalletStrings.beneficiaryAddress\\n        );\\n\\n        if (address(pumptoken) != ROUTER.WETH()) {\\n            pumptoken.transfer(beneficiary, tokenBalance);\\n        } else {\\n            beneficiary.transfer(address(this).balance);\\n        }\\n\\n        emit BeneficiaryOrWinnerPaid(beneficiary, tokenBalance);\\n    }\\n\\n    /**\\n     * Charity Payment function\\n     */\\n    function payCharity()\\n        internal\\n    {\\n        uint256 tokenBalance = pumptoken.balanceOf(address(this));\\n        address payable charity = payable(pumpWalletStrings.charityAddress);\\n\\n        if (address(pumptoken) != ROUTER.WETH()) {\\n            // Non-native token (transfer tokens)\\n            uint256 charityPayAmount;\\n            if (walletType == WalletType.Charity) {\\n                charityPayAmount = tokenBalance;\\n            } else {\\n                charityPayAmount =\\n                    (tokenBalance * pumpWalletInts.charityPercent) /\\n                    100;\\n            }\\n            pumptoken.transfer(charity, charityPayAmount);\\n        } else {\\n            // Native token (transfer native or wrapped balance)\\n            uint256 nativeBalance = address(this).balance;\\n            uint256 charityPayAmount;\\n            if (walletType == WalletType.Charity) {\\n                charityPayAmount = nativeBalance;\\n            } else {\\n                charityPayAmount =\\n                    (nativeBalance * pumpWalletInts.charityPercent) /\\n                    100;\\n            }\\n            charity.transfer(charityPayAmount);\\n        }\\n\\n        emit BeneficiaryOrWinnerPaid(charity, tokenBalance);\\n    }\\n\\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    // Winner Selection (Chainlink VRF) and token redistribution\\n    //////////////////////////////////////////////////////////\\n\\n    function selectWinnersAndSendRewards() public onlyAuthorized {\\n        // We need to populate another array of contributors as to not get duplicate winers\\n        // and remove them from the new array and leave the other intact to view later\\n        availableContributors = new address[](contributors.length);\\n        for (uint256 i = 0; i < contributors.length; i++) {\\n            availableContributors[i] = contributors[i];\\n        }\\n\\n        if (weightType == Weight.equalShare) {\\n            selectWinnersEqualShare();\\n        } else {\\n            selectWinnersWeightedShare();\\n        }\\n\\n        distributeRewards();\\n    }\\n\\n    function selectWinnersEqualShare() private onlyAuthorized \\n    {\\n        // Grab the randoms\\n        uint256[] memory randoms = getRandoms();\\n\\n        //then polulate the winners array\\n        for (uint256 i = 0; i < pumpWalletInts.winnerNum; i++) {\\n            uint256 randomIndex = randoms[i] % availableContributors.length;\\n\\n            address winnerAddress = availableContributors[randomIndex];\\n            winnerIndexes[i] = randomIndex;\\n\\n            // Remove the chosen winner from the available candidates array\\n            availableContributors[randomIndex] = availableContributors[\\n                availableContributors.length - 1\\n            ];\\n            availableContributors.pop();\\n\\n            winnerAddresses.push(winnerAddress);\\n        }\\n    }\\n\\n    function selectWinnersWeightedShare() private onlyAuthorized {\\n        uint256[] memory randoms = getRandoms();\\n\\n        for (uint256 i = 0; i < pumpWalletInts.winnerNum; i++) {\\n            uint256 randomValue = randoms[i] % pumpWalletInts.totalContributions;\\n            uint256 cumulativeWeight = 0;\\n\\n            uint256 winnerIndex = 0;\\n\\n            for (uint256 j = 0; j < availableContributors.length; j++) {\\n                cumulativeWeight += contributionsNative[availableContributors[j]];\\n\\n                if (randomValue < cumulativeWeight) {\\n                    winnerIndex = j;\\n                    break;\\n                }\\n            }\\n\\n            address winnerAddress = availableContributors[winnerIndex];\\n            winnerIndexes[i] = winnerIndex;\\n\\n            availableContributors[winnerIndex] = availableContributors[availableContributors.length - 1];\\n\\n            winnerAddresses.push(winnerAddress);\\n        }\\n\\n        for (uint256 i = 0; i < pumpWalletInts.winnerNum; i++) {\\n            availableContributors.pop();\\n        }\\n    }\\n\\n\\n    /**\\n     * Token redistribution to selected contributors\\n     */\\n    function distributeRewards()\\n        internal\\n        nonReentrant\\n    {\\n        require(\\n            winnerAddresses.length > 0,\\n            \\\"Winners have not been selected yet\\\"\\n        );\\n        uint256 tokenBalance = pumptoken.balanceOf(address(this));\\n\\n        uint256 rewardAmount = tokenBalance / pumpWalletInts.winnerNum;\\n\\n        for (uint256 i = 0; i < pumpWalletInts.winnerNum; i++) {\\n            address winner = winnerAddresses[i];\\n            pumptoken.transfer(winner, rewardAmount);\\n            emit BeneficiaryOrWinnerPaid(winner, rewardAmount);\\n        }\\n\\n        state = State.Completed;\\n    }\\n\\n    /**\\n     * Refund contribution\\n     */\\n    function refund() public nonReentrant {\\n        uint256 bal = contributionsNative[msg.sender];\\n        require(bal > 0, \\\"Nill Balance, not a contributor or already refunded\\\");\\n        contributionsNative[msg.sender] = 0;\\n        if (inKind) {\\n            bal = contributionsInToken[msg.sender];\\n            pumptoken.transfer(msg.sender, bal);\\n        } else {\\n            payable(address(msg.sender)).transfer(bal);\\n        }\\n        emit Refund(msg.sender, bal);\\n    }\\n\\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    // Failsafes\\n    //////////////////////////////////////////////////////////\\n\\n    function refundAmount(\\n        uint256 amount,\\n        address recipient,\\n        bool _transferNative\\n    ) external onlyOwner nonReentrant {\\n        if (_transferNative) {\\n            payable(address(recipient)).transfer(amount);\\n        } else {\\n            pumptoken.transfer(recipient, amount);\\n        }\\n    }\\n\\n    /**\\n     * Failsafe to refund tokens to all contributors\\n     */\\n    function refundAllContributors() external onlyOwner {\\n        for(uint i = 0; i < contributors.length; i++){\\n            address recipient = contributors[i];\\n            uint256 amount = 0;\\n            if (inKind) {\\n                amount = contributionsInToken[recipient];\\n                pumptoken.transfer(recipient, amount);\\n            } else {\\n                amount = contributionsNative[recipient];\\n                payable(address(recipient)).transfer(amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Failsafe to set state if some kind of issue arises\\n     */\\n    function setState(uint256 stateEnum) public onlyOwner {\\n        if (stateEnum == 0) {\\n            state = State.InProgress;\\n            completionOrExpirationDateTime = 0;\\n        }\\n        if (stateEnum == 1) {\\n            state = State.Expired;\\n            completionOrExpirationDateTime = block.timestamp;\\n        }\\n        if (stateEnum == 2) {\\n            state = State.Completed;\\n            completionOrExpirationDateTime = block.timestamp;\\n        }\\n        if (stateEnum == 3) {\\n            state = State.AwaitingRandom;\\n            completionOrExpirationDateTime = block.timestamp;\\n        }\\n    }\\n\\n    /**\\n     * Failsafe to set PWA contract if some kind of issue arises or we need to transfer the PW to another PWA\\n     */\\n    function setPWAContract(address _address) public onlyOwner {\\n        PWAContract = _address;\\n    }\\n\\n    /**\\n     * Failsafe to set Deployer address - if it changes in the future\\n     */\\n    // function setDevAddress(address _address) public onlyDeployer {\\n    //     deployerAddress = _address;\\n    // }\\n\\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    // Data Retreival\\n    //////////////////////////////////////////////////////////\\n\\n    function getUserTokenBalance() public view returns (uint256) {\\n        return pumptoken.balanceOf(msg.sender);\\n    }\\n\\n    function getInKindTokenBalance() public view returns (uint256) {\\n        return pumptoken.balanceOf(address(this));\\n    }\\n\\n    function getContractBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function getpws() public view returns (PumpDataStrings memory) {\\n        return pumpWalletStrings;\\n    }\\n\\n    function getpwi() public view returns (PumpDataInts memory) {\\n        return pumpWalletInts;\\n    }\\n\\n    function getPWAContract() public view returns (address) {\\n        return PWAContract;\\n    }\\n\\n    function getPWData()\\n        public\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            address,\\n            uint256,\\n            uint32,\\n            uint256,\\n            uint256,\\n            uint64\\n        )\\n    {\\n        return (\\n            pumpWalletStrings.creator,\\n            pumpWalletInts.goal,\\n            pumpWalletStrings.beneficiaryAddress,\\n            pumpWalletInts.endDateTime,\\n            pumpWalletInts.winnerNum,\\n            pumpWalletInts.minContribution,\\n            pumpWalletInts.totalContributions,\\n            pumpWalletInts.contributionCount\\n        );\\n    }\\n\\n    function getNumContributors() public view returns (uint256) {\\n        return contributors.length;\\n    }\\n\\n    function getContributors() public view returns (address[] memory) {\\n        return contributors;\\n    }\\n\\n    function getContribution(address contributor)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return contributionsNative[contributor];\\n    }\\n\\n    function getWinners() public view returns (address[] memory) {\\n        return winnerAddresses;\\n    }\\n\\n    //////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    // Helper\\n    //////////////////////////////////////////////////////////\\n\\n    // Converts string to address (used when passing in address string, inside an array, to constructor)\\n    function parseAddr(string memory _a)\\n        private\\n        pure\\n        returns (address _parsedAddress)\\n    {\\n        bytes memory tmp = bytes(_a);\\n        uint160 iaddr = 0;\\n        uint160 b1;\\n        uint160 b2;\\n        for (uint256 i = 2; i < 2 + 2 * 20; i += 2) {\\n            iaddr *= 256;\\n            b1 = uint160(uint8(tmp[i]));\\n            b2 = uint160(uint8(tmp[i + 1]));\\n            if ((b1 >= 97) && (b1 <= 102)) {\\n                b1 -= 87;\\n            } else if ((b1 >= 65) && (b1 <= 70)) {\\n                b1 -= 55;\\n            } else if ((b1 >= 48) && (b1 <= 57)) {\\n                b1 -= 48;\\n            }\\n            if ((b2 >= 97) && (b2 <= 102)) {\\n                b2 -= 87;\\n            } else if ((b2 >= 65) && (b2 <= 70)) {\\n                b2 -= 55;\\n            } else if ((b2 >= 48) && (b2 <= 57)) {\\n                b2 -= 48;\\n            }\\n            iaddr += (b1 * 16 + b2);\\n        }\\n        return address(iaddr);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/BSC/_VRFv2Consumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\\\";\\r\\nimport \\\"./PW.sol\\\";\\r\\n\\r\\ncontract VRFv2Consumer is VRFConsumerBaseV2, ConfirmedOwner {\\r\\n    event RequestSent(uint256 requestId, uint32 numWords);\\r\\n    event RequestFulfilled(uint256 requestId, uint256[] randomWords);\\r\\n\\r\\n    struct RequestStatus {\\r\\n        bool fulfilled;\\r\\n        bool exists;\\r\\n        uint256[] randomWords;\\r\\n    }\\r\\n    mapping(uint256 => RequestStatus) private s_requests;\\r\\n    VRFCoordinatorV2Interface private COORDINATOR;\\r\\n\\r\\n    uint64 private s_subscriptionId;\\r\\n\\r\\n    uint256[] private requestIds;\\r\\n    uint256 private lastRequestId;\\r\\n    mapping(address => uint256) pumpRequestId;\\r\\n\\r\\n    uint32 private callbackGasLimit = 2500000;\\r\\n\\r\\n    uint16 private requestConfirmations = 3;\\r\\n\\r\\n    bytes32 keyHash = 0x17cd473250a9a479dc7f234c64332ed4bc8af9e8ded7556aa6e66d83da49f470;\\r\\n\\r\\n    constructor(\\r\\n        uint64 subscriptionId\\r\\n    )\\r\\n        VRFConsumerBaseV2(0xc587d9053cd1118f25F645F9E08BB98c9712A4EE)\\r\\n        ConfirmedOwner(msg.sender)\\r\\n    {\\r\\n        COORDINATOR = VRFCoordinatorV2Interface(0xc587d9053cd1118f25F645F9E08BB98c9712A4EE);\\r\\n        s_subscriptionId = subscriptionId;\\r\\n    }\\r\\n\\r\\n    function requestRandomWords(uint32 _numWords)\\r\\n        external\\r\\n        returns (uint256 requestId)\\r\\n    {\\r\\n        PW pw = PW(payable(msg.sender));\\r\\n        address callerOwner = pw.owner();\\r\\n        require(callerOwner == owner(), \\\"Not authorized!\\\");\\r\\n\\r\\n        requestId = COORDINATOR.requestRandomWords(\\r\\n            keyHash,\\r\\n            s_subscriptionId,\\r\\n            requestConfirmations,\\r\\n            callbackGasLimit,\\r\\n            _numWords\\r\\n        );\\r\\n        s_requests[requestId] = RequestStatus({\\r\\n            randomWords: new uint256[](0),\\r\\n            exists: true,\\r\\n            fulfilled: false\\r\\n        });\\r\\n        requestIds.push(requestId);\\r\\n        lastRequestId = requestId;\\r\\n        pumpRequestId[msg.sender] = requestId;\\r\\n        emit RequestSent(requestId, _numWords);\\r\\n        return requestId;\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256 _requestId,\\r\\n        uint256[] memory _randomWords\\r\\n    ) internal override {\\r\\n        require(s_requests[_requestId].exists, \\\"Request not found\\\");\\r\\n        s_requests[_requestId].fulfilled = true;\\r\\n        s_requests[_requestId].randomWords = _randomWords;\\r\\n        emit RequestFulfilled(_requestId, _randomWords);\\r\\n    }\\r\\n\\r\\n    function getRequestStatus(\\r\\n        uint256 _requestId\\r\\n    ) external view returns (bool fulfilled, uint256[] memory randomWords) {\\r\\n        require(s_requests[_requestId].exists, \\\"Request not found\\\");\\r\\n        RequestStatus memory request = s_requests[_requestId];\\r\\n        return (request.fulfilled, request.randomWords);\\r\\n    }\\r\\n\\r\\n    function getPumpRequestId(address _address) external view returns (uint256) {\\r\\n        return pumpRequestId[_address];\\r\\n    }\\r\\n\\r\\n    function getLastRequestId() external view returns (uint256) {\\r\\n        return lastRequestId;\\r\\n    }\\r\\n\\r\\n    function getRequestIdsLength() external view returns (uint256) {\\r\\n        return requestIds.length;\\r\\n    }\\r\\n\\r\\n    function getRequestIds(uint256 index) external view returns (uint256) {\\r\\n        require(index < requestIds.length, \\\"Index out of bounds\\\");\\r\\n        return requestIds[index];\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contributionContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFromTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnPercent\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contributionValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"rewardUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_percent\",\"type\":\"uint16\"}],\"name\":\"setBurnPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newContrContract\",\"type\":\"address\"}],\"name\":\"setContributionContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isEnabled\",\"type\":\"bool\"}],\"name\":\"setIsBurnEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isEnabled\",\"type\":\"bool\"}],\"name\":\"setIsRewardEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_percent\",\"type\":\"uint16\"}],\"name\":\"setRewardPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RewardToken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000373e70d305d3c7ffdc60b1c5daa0eb81318e3879", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}