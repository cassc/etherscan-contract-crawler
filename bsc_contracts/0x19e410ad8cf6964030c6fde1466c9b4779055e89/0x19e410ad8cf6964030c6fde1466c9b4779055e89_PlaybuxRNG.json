{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PlaybuxRNG.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.14;\\n\\n// import hardhat console\\n\\n\\ncontract PlaybuxRNG {\\n    // The address of the Owner\\n    address public s_owner;\\n\\n    // Map of random numbers generated string => Array of random numbers generated\\n    mapping(string => uint256[]) public s_randomNumbersMap;\\n\\n    // Event to log the generated random number\\n    event RandomNumberGenerated(string pool, uint256[] randomNumber);\\n\\n    constructor() {\\n        s_owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == s_owner, \\\"Only owner can call this function.\\\");\\n        _;\\n    }\\n\\n    // Function to generate multiple random numbers without duplication\\n    function generateSeveralRandomNumbers(\\n        uint256 salt,\\n        uint256 n,\\n        uint256 count,\\n        string memory pool\\n    ) external onlyOwner {\\n        require(s_randomNumbersMap[pool].length == 0, \\\"Random numbers already generated for this pool.\\\");\\n\\n        // Combine the block hash and timestamp to create the seed\\n        // Unique seed for each call within the same block\\n        bytes32 seed = keccak256(\\n            abi.encodePacked(\\n                blockhash(block.number - 1), // Get the previous block hash\\n                block.timestamp, // Current block timestamp\\n                salt, // Salt provided by the owenr\\n                block.difficulty, // Difficulty of the current block\\n                block.coinbase // Current block miner's address\\n            )\\n        );\\n\\n        // Generate count random numbers from the seed\\n        uint256 randomNumber;\\n        uint256 generatedCount = 0;\\n        uint256[] memory randomNumbers = new uint256[](count);\\n        while (generatedCount < count) {\\n            randomNumber = (uint256(seed) % n) + 1; // Generate a random number between 1 and n\\n            bool duplicate = false;\\n            for (uint256 i = 0; i < generatedCount; i++) {\\n                if (randomNumber == randomNumbers[i]) {\\n                    duplicate = true;\\n                    break;\\n                }\\n            }\\n            if (!duplicate) {\\n                randomNumbers[generatedCount] = randomNumber;\\n                generatedCount++;\\n            }\\n            seed = keccak256(abi.encodePacked(seed, randomNumber));\\n        }\\n\\n        // Store the random numbers in the array\\n        s_randomNumbersMap[pool] = randomNumbers;\\n\\n        // Emit the event\\n        emit RandomNumberGenerated(pool, randomNumbers);\\n    }\\n\\n    function getRandomNumbersByPool(string memory pool) external view returns (uint256[] memory) {\\n        return s_randomNumbersMap[pool];\\n    }\\n\\n    function setOwner(address owner) external onlyOwner {\\n        s_owner = owner;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"pool\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomNumber\",\"type\":\"uint256[]\"}],\"name\":\"RandomNumberGenerated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"pool\",\"type\":\"string\"}],\"name\":\"generateSeveralRandomNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"pool\",\"type\":\"string\"}],\"name\":\"getRandomNumbersByPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_randomNumbersMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PlaybuxRNG", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}