{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract PKNVesting is Ownable {\r\n\r\n    uint256 private constant ONE_MONTH = 30 days;\r\n    uint256 public immutable START_TIME;\r\n    uint256 public immutable DURATION_MONTHS;\r\n    uint256 public totalAllocations;\r\n\r\n    IERC20 public PKN;\r\n\r\n    struct Allocation {\r\n        uint256 amount;\r\n        uint256 amountClaimed;\r\n        uint256 monthsClaimed;\r\n    }\r\n\r\n    mapping (address => Allocation) public PKNAllocations;\r\n\r\n    constructor(address _PKN, uint256 _startTime, uint256 _numOfMonths) {\r\n        PKN = IERC20(_PKN);\r\n        START_TIME = _startTime;\r\n        DURATION_MONTHS = _numOfMonths;\r\n    }\r\n\r\n    function getVestedAmount(address _recipient) public view returns(uint256 monthsVested, uint256 amountVested) {\r\n        Allocation storage PKNAllocation = PKNAllocations[_recipient];\r\n\r\n        require(PKNAllocation.amountClaimed < PKNAllocation.amount, \"Allocation fully claimed\");\r\n\r\n        if (_currentTime() < START_TIME) {\r\n            return (0, 0);\r\n        }\r\n\r\n        uint256 elapsedMonths = 1 + (_currentTime() - START_TIME) / ONE_MONTH;\r\n\r\n        if(elapsedMonths >= DURATION_MONTHS) {\r\n            uint256 remainingAllocation = PKNAllocation.amount - PKNAllocation.amountClaimed;\r\n            return (DURATION_MONTHS, remainingAllocation);\r\n        }\r\n\r\n        monthsVested = elapsedMonths - PKNAllocation.monthsClaimed;\r\n        amountVested = monthsVested * (PKNAllocation.amount / DURATION_MONTHS);\r\n    }\r\n\r\n    function getAllocationDetails(address _recipient) external view returns(Allocation memory) {\r\n        return PKNAllocations[_recipient];\r\n    }\r\n\r\n    function addAllocation(address[] calldata _recipients, uint256[] calldata _amounts) external onlyOwner {\r\n        require(_recipients.length == _amounts.length, \"Invalid input lengths\");\r\n        uint256 totalAmount = 0;\r\n        for (uint256 i = 0; i < _recipients.length; i++) {\r\n            totalAmount += _amounts[i];\r\n            _addAllocation(_recipients[i], _amounts[i]);\r\n        }\r\n        totalAllocations += _recipients.length;\r\n        require(_receivePKN(msg.sender, totalAmount) == totalAmount, \"Recieved less PKN than transferred\");\r\n    }\r\n\r\n    function releaseVestedTokens() external {\r\n        _releaseVestedTokens(msg.sender);\r\n    }\r\n\r\n    function batchReleaseVestedTokens(address[] calldata _recipients) external {\r\n        for (uint256 i = 0; i < _recipients.length; i++) {\r\n            _releaseVestedTokens(_recipients[i]);\r\n        }\r\n    }\r\n\r\n    // DOES NOT transfer PKN to the contract. Needs to be handled by the caller.\r\n    function _addAllocation(address _recipient, uint256 _amount) internal {\r\n        require(PKNAllocations[_recipient].amount == 0, \"Allocation already exists\");\r\n        require(_amount >= DURATION_MONTHS, \"Amount too low\");\r\n\r\n        Allocation memory allocation = Allocation({\r\n            amount: _amount,\r\n            amountClaimed: 0,\r\n            monthsClaimed: 0\r\n        });\r\n        PKNAllocations[_recipient] = allocation;\r\n    }\r\n\r\n    function _releaseVestedTokens(address _recipient) internal {\r\n        (uint256 monthsVested, uint256 amountVested) = getVestedAmount(_recipient);\r\n        require(amountVested > 0, \"Vested amount is 0\");\r\n\r\n        Allocation storage PKNAllocation = PKNAllocations[_recipient];\r\n        PKNAllocation.monthsClaimed = PKNAllocation.monthsClaimed + monthsVested;\r\n        PKNAllocation.amountClaimed = PKNAllocation.amountClaimed + amountVested;\r\n\r\n        PKN.transfer(_recipient, amountVested);\r\n    }\r\n\r\n    function _receivePKN(address from, uint256 amount) internal returns(uint256) {\r\n        uint256 balanceBefore = PKN.balanceOf(address(this));\r\n        PKN.transferFrom(from, address(this), amount);\r\n        uint256 balanceAfter = PKN.balanceOf(address(this));\r\n        return balanceAfter - balanceBefore;\r\n    }\r\n\r\n    function _currentTime() internal view returns(uint256) {\r\n        return block.timestamp;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_PKN\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numOfMonths\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DURATION_MONTHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PKN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"PKNAllocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monthsClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"START_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"addAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"}],\"name\":\"batchReleaseVestedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getAllocationDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"monthsClaimed\",\"type\":\"uint256\"}],\"internalType\":\"struct PKNVesting.Allocation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getVestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"monthsVested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountVested\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseVestedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PKNVesting", "CompilerVersion": "v0.8.7+commit.e28d00a7", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004b5decb9327b4d511a58137a1ade61434aacdd430000000000000000000000000000000000000000000000000000000061714128000000000000000000000000000000000000000000000000000000000000000a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dfe88e39b38c23b69aa8beb59d23ebb768e235534ca0658af3446f9897acafac"}