{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-0.8/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.8/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BoosterEarmark.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"./Interfaces.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts-0.8/access/Ownable.sol\\\";\\n\\ncontract BoosterEarmark is Ownable {\\n    uint256 public constant MAX_DISTRIBUTION = 2500;\\n    uint256 public constant DENOMINATOR = 10000;\\n\\n    IBooster public booster;\\n    address public voterProxy;\\n    address public depositor;\\n    address public mainRewardToken;\\n    address public weth;\\n\\n    uint256 public earmarkIncentive;\\n\\n    mapping(address => TokenDistro[]) public distributionByTokens;\\n    mapping(uint256 => mapping(address => TokenDistro[])) public customDistributionByTokens;\\n\\n    struct TokenDistro {\\n        address distro;\\n        uint256 share;\\n        bool callQueue;\\n    }\\n    address[] distributionTokens;\\n\\n    uint256 public earmarkPeriod;\\n    mapping(uint256 => uint256) public lastEarmarkAt;\\n\\n    struct EarmarkState {\\n        IERC20 token;\\n        uint256 balance;\\n        uint256 dLen;\\n        uint256 earmarkIncentiveAmount;\\n        uint256 sentSum;\\n        uint256 totalDLen;\\n    }\\n\\n    event TokenDistributionUpdate(address indexed token, address indexed distro, uint256 share, bool callQueue);\\n    event DistributionUpdate(address indexed token, uint256 distrosLength, uint256 sharesLength, uint256 callQueueLength, uint256 totalShares);\\n    event CustomDistributionUpdate(uint256 indexed pid, address indexed token, uint256 distrosLength, uint256 sharesLength, uint256 callQueueLength, uint256 totalShares);\\n    event ClearDistributionApproval(address indexed distro, address[] tokens);\\n\\n    event SetPoolManager(address poolManager);\\n\\n    event SetEarmarkConfig(uint256 earmarkIncentive, uint256 earmarkPeriod);\\n    event EarmarkRewards(uint256 indexed pid, address indexed lpToken, address indexed rewardToken, uint256 amount);\\n    event EarmarkRewardsTransfer(uint256 indexed pid, address indexed lpToken, address indexed rewardToken, uint256 amount, address distro, bool queue);\\n    event EarmarkRewardsDiff(address indexed rewardToken, uint256 diffAmount, uint256 pendingAmount, uint256 currentBal);\\n\\n    event ReleaseToken(address indexed token, uint256 amount, address indexed recipient);\\n\\n    constructor(address _booster, address _weth) {\\n        booster = IBooster(_booster);\\n        mainRewardToken = booster.crv();\\n        voterProxy = IBooster(_booster).voterProxy();\\n        depositor = IStaker(voterProxy).depositor();\\n        weth = _weth;\\n    }\\n\\n    function updateBoosterAndDepositor() external onlyOwner {\\n        booster = IBooster(IStaker(voterProxy).operator());\\n        depositor = IStaker(voterProxy).depositor();\\n    }\\n\\n    /**\\n     * @notice Fee manager can set all the relevant fees\\n     * @param _earmarkIncentive   % for whoever calls the claim where 1% == 100\\n     */\\n    function setEarmarkConfig(uint256 _earmarkIncentive, uint256 _earmarkPeriod) external onlyOwner {\\n        require(_earmarkIncentive <= 100, \\\">max\\\");\\n        earmarkIncentive = _earmarkIncentive;\\n        earmarkPeriod = _earmarkPeriod;\\n        emit SetEarmarkConfig(_earmarkIncentive, _earmarkPeriod);\\n    }\\n\\n    /**\\n     * @notice Call setPoolManager on booster\\n     */\\n    function setBoosterPoolManager(address _poolManager) external onlyOwner {\\n        require(_poolManager != address(0), \\\"zero\\\");\\n        booster.setPoolManager(_poolManager);\\n        emit SetPoolManager(_poolManager);\\n    }\\n\\n    /**\\n     * @notice Call addPool on booster\\n     */\\n    function addPool(address _lptoken, address _gauge) external onlyOwner returns (uint256) {\\n        uint256 pid = booster.addPool(_lptoken, _gauge);\\n        approvePoolDistributionTokens(pid);\\n        return pid;\\n    }\\n\\n    /**\\n     * @notice Call addCreatedPool on booster\\n     */\\n    function addCreatedPool(address _lptoken, address _gauge, address _token, address _crvRewards) external onlyOwner returns (uint256) {\\n        require(_lptoken != address(0) && _gauge != address(0) && _token != address(0) && _crvRewards != address(0), \\\"zero\\\");\\n        uint256 pid = booster.addCreatedPool(_lptoken, _gauge, _token, _crvRewards);\\n        approvePoolDistributionTokens(pid);\\n        return pid;\\n    }\\n\\n    function shutdownPool(uint256 _pid) external onlyOwner returns (bool) {\\n        return booster.shutdownPool(_pid);\\n    }\\n\\n    function forceShutdownPool(uint256 _pid) external onlyOwner returns (bool) {\\n        return booster.forceShutdownPool(_pid);\\n    }\\n\\n    /**\\n     * @notice Call approveDistributionTokens on booster\\n     */\\n    function approvePoolDistributionTokens(uint256 _pid) public onlyOwner {\\n        IBooster.PoolInfo memory p = booster.poolInfo(_pid);\\n        booster.approveDistribution(p.crvRewards, distributionTokens, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Allows turning off or on for fee distro\\n     */\\n    function clearDistroApprovals(address distro) external onlyOwner {\\n        booster.approveDistribution(distro, distributionTokens, 0);\\n\\n        emit ClearDistributionApproval(distro, distributionTokens);\\n    }\\n\\n    /**\\n     * @notice Allows turning off or on for fee distro\\n     */\\n    function updateDistributionByTokens(\\n        address _token,\\n        address[] memory _distros,\\n        uint256[] memory _shares,\\n        bool[] memory _callQueue\\n    ) public onlyOwner {\\n        require(_distros.length > 0, \\\"zero\\\");\\n\\n        if (distributionByTokens[_token].length == 0) {\\n            distributionTokens.push(_token);\\n        }\\n\\n        uint256 totalShares = _updateDistributionByTokens(_token, distributionByTokens[_token], _distros, _shares, _callQueue);\\n\\n        booster.approvePoolsCrvRewardsDistribution(_token);\\n\\n        emit DistributionUpdate(_token, _distros.length, _shares.length, _callQueue.length, totalShares);\\n    }\\n\\n    function migrateDistribution(BoosterEarmark _oldBoosterEarmark) external {\\n        address[] memory tokenList = _oldBoosterEarmark.distributionTokenList();\\n        for (uint256 i = 0; i < tokenList.length; i++) {\\n            uint256 distroLen = _oldBoosterEarmark.distributionByTokenLength(tokenList[i]);\\n            address[] memory _distros = new address[](distroLen);\\n            uint256[] memory _shares = new uint256[](distroLen);\\n            bool[] memory _callQueue = new bool[](distroLen);\\n\\n            for (uint256 j = 0; j < distroLen; j++) {\\n                (_distros[j], _shares[j], _callQueue[j]) = _oldBoosterEarmark.distributionByTokens(tokenList[i], j);\\n            }\\n            updateDistributionByTokens(tokenList[i], _distros, _shares, _callQueue);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows turning off or on for fee distro\\n     */\\n    function updateCustomDistributionByTokens(\\n        uint256 _pid,\\n        address _token,\\n        address[] memory _distros,\\n        uint256[] memory _shares,\\n        bool[] memory _callQueue\\n    ) external onlyOwner {\\n        uint256 totalShares = _updateDistributionByTokens(_token, customDistributionByTokens[_pid][_token], _distros, _shares, _callQueue);\\n\\n        IBooster.PoolInfo memory p = booster.poolInfo(_pid);\\n\\n        address[] memory tokens = new address[](1);\\n        tokens[0] = _token;\\n\\n        booster.approveDistribution(p.crvRewards, tokens, type(uint256).max);\\n\\n        emit CustomDistributionUpdate(_pid, _token, _distros.length, _shares.length, _callQueue.length, totalShares);\\n    }\\n\\n    function _updateDistributionByTokens(\\n        address _token,\\n        TokenDistro[] storage _tds,\\n        address[] memory _distros,\\n        uint256[] memory _shares,\\n        bool[] memory _callQueue\\n    ) internal returns(uint256) {\\n        uint256 curLen = _tds.length;\\n        for (uint256 i = 0; i < curLen; ) {\\n            _tds.pop();\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint256 totalShares = 0;\\n\\n        uint256 len = _distros.length;\\n        require(len > 0 && len == _shares.length && len == _callQueue.length, \\\"!length\\\");\\n\\n        for (uint256 i = 0; i < len; ) {\\n            require(_distros[i] != address(0), \\\"!distro\\\");\\n            totalShares = totalShares + _shares[i];\\n            _tds.push(TokenDistro(_distros[i], _shares[i], _callQueue[i]));\\n            emit TokenDistributionUpdate(_token, _distros[i], _shares[i], _callQueue[i]);\\n\\n            if (_callQueue[i]) {\\n                address[] memory tokens = new address[](1);\\n                tokens[0] = _token;\\n                booster.approveDistribution(_distros[i], tokens, type(uint256).max);\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        require(totalShares <= MAX_DISTRIBUTION, \\\">max\\\");\\n        return totalShares;\\n    }\\n\\n    function _rewardTokenBalances(uint256 _pid, address[] memory _tokens) internal returns (uint256[] memory balances) {\\n        uint256 tLen = _tokens.length;\\n\\n        uint256[] memory balancesBefore = new uint256[](tLen);\\n        for (uint256 i = 0; i < tLen; ) {\\n            balancesBefore[i] = IERC20(_tokens[i]).balanceOf(address(booster)) + IERC20(_tokens[i]).balanceOf(voterProxy);\\n            if (_tokens[i] == weth) {\\n                balancesBefore[i] = balancesBefore[i] + voterProxy.balance;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint256[] memory pendingRewards = booster.voterProxyClaimRewards(_pid, _tokens);\\n\\n        balances = new uint256[](tLen);\\n        for (uint256 i = 0; i < tLen; ) {\\n            uint256 currentBal = IERC20(_tokens[i]).balanceOf(address(booster));\\n            balances[i] = currentBal - balancesBefore[i];\\n            if(balances[i] + pendingRewards[i] > currentBal) {\\n                emit EarmarkRewardsDiff(_tokens[i], (balances[i] + pendingRewards[i]) - currentBal, pendingRewards[i], currentBal);\\n                balances[i] = currentBal;\\n            } else {\\n                balances[i] += pendingRewards[i];\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function earmarkRewards(uint256 _pid) public {\\n        IBooster.PoolInfo memory p = booster.poolInfo(_pid);\\n        require(isEarmarkPoolAvailable(_pid, p), \\\"!available\\\");\\n\\n        //claim crv/wom and bonus tokens\\n        address[] memory tokens = IStaker(voterProxy).getGaugeRewardTokens(p.lptoken, p.gauge);\\n        uint256[] memory balances = _rewardTokenBalances(_pid, tokens);\\n\\n        for (uint256 i = 0; i < tokens.length; ) {\\n            if (i != 0 && tokens[i] == mainRewardToken) {\\n                unchecked {\\n                    ++i;\\n                }\\n                continue;\\n            }\\n            EarmarkState memory s;\\n            s.token = IERC20(tokens[i]);\\n            s.balance = balances[i];\\n\\n            emit EarmarkRewards(_pid, p.lptoken, address(s.token), s.balance);\\n\\n            if (s.balance == 0) {\\n                unchecked {\\n                    ++i;\\n                }\\n                continue;\\n            }\\n            TokenDistro[] storage tDistros = _getDistributionByTokens(_pid, address(s.token));\\n            s.dLen = tDistros.length;\\n            require(s.dLen > 0, \\\"!dLen\\\");\\n\\n            s.earmarkIncentiveAmount = s.balance * earmarkIncentive / DENOMINATOR;\\n            s.sentSum = s.earmarkIncentiveAmount;\\n\\n            s.totalDLen = s.dLen + 1 + (s.earmarkIncentiveAmount > 0 ? 1 : 0);\\n            address[] memory _transferTo = new address[](s.totalDLen);\\n            uint256[] memory _transferAmount = new uint256[](s.totalDLen);\\n            bool[] memory _callQueue = new bool[](s.totalDLen);\\n\\n            for (uint256 j = 0; j < s.dLen; ) {\\n                TokenDistro memory tDistro = tDistros[j];\\n                if (tDistro.share == 0) {\\n                    unchecked {\\n                        ++j;\\n                    }\\n                    continue;\\n                }\\n                uint256 amount = s.balance * tDistro.share / DENOMINATOR;\\n                s.sentSum += amount;\\n\\n                _transferAmount[j] = amount;\\n                _transferTo[j] = tDistro.distro;\\n                _callQueue[j] = tDistro.callQueue;\\n\\n                emit EarmarkRewardsTransfer(_pid, p.lptoken, address(s.token), amount, tDistro.distro, tDistro.callQueue);\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n            if (s.earmarkIncentiveAmount > 0) {\\n                _transferAmount[s.totalDLen - 2] = s.earmarkIncentiveAmount;\\n                _transferTo[s.totalDLen - 2] = msg.sender;\\n                _callQueue[s.totalDLen - 2] = false;\\n\\n                emit EarmarkRewardsTransfer(_pid, p.lptoken, address(s.token), s.earmarkIncentiveAmount, msg.sender, false);\\n            }\\n\\n            _transferAmount[s.totalDLen - 1] = s.balance - s.sentSum;\\n            _transferTo[s.totalDLen - 1] = p.crvRewards;\\n            _callQueue[s.totalDLen - 1] = true;\\n\\n            booster.distributeRewards(_pid, p.lptoken, tokens[i], _transferTo, _transferAmount, _callQueue);\\n\\n            emit EarmarkRewardsTransfer(_pid, p.lptoken, address(s.token), _transferAmount[s.totalDLen - 1], p.crvRewards, true);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        lastEarmarkAt[_pid] = block.timestamp;\\n    }\\n\\n    function earmarkRewardsIfAvailable(uint256 _pid) external {\\n        if (!isEarmarkAvailable(_pid)) {\\n           return;\\n        }\\n        earmarkRewards(_pid);\\n    }\\n\\n    function earmarkRewards(uint256[] memory _pids) external {\\n        uint256 len = _pids.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            earmarkRewards(_pids[i]);\\n        }\\n    }\\n\\n    function isEarmarkAvailable(uint256 _pid) public view returns (bool) {\\n        return isEarmarkPoolAvailable(_pid, booster.poolInfo(_pid));\\n    }\\n\\n    function isEarmarkPoolAvailable(uint256 _pid, IBooster.PoolInfo memory _pool) public view returns (bool) {\\n        if (msg.sender == depositor && !_pool.shutdown) {\\n            return true;\\n        }\\n        return getEarmarkPoolExecuteOn(_pid, _pool) < block.timestamp;\\n    }\\n\\n    function getEarmarkPoolExecuteOn(uint256 _pid) public view returns (uint256) {\\n        return getEarmarkPoolExecuteOn(_pid, booster.poolInfo(_pid));\\n    }\\n\\n    function getEarmarkPoolExecuteOn(uint256 _pid, IBooster.PoolInfo memory _pool) public view returns (uint256 executeOn) {\\n        if (_pool.shutdown) {\\n            return type(uint256).max;\\n        }\\n        executeOn = lastEarmarkAt[_pid] + earmarkPeriod;\\n        if (block.timestamp > executeOn) {\\n            return executeOn;\\n        }\\n        ( , uint256 periodFinish, , , , , , , bool paused) = IRewards(_pool.crvRewards).tokenRewards(mainRewardToken);\\n        if (!paused && periodFinish < executeOn) {\\n            executeOn = periodFinish;\\n        }\\n    }\\n\\n    function _getDistributionByTokens(uint256 _pid, address _rewardToken) internal view returns(TokenDistro[] storage) {\\n        if (customDistributionByTokens[_pid][_rewardToken].length > 0) {\\n            return customDistributionByTokens[_pid][_rewardToken];\\n        }\\n        return distributionByTokens[_rewardToken];\\n    }\\n\\n    function releaseToken(address _token, address _recipient) external onlyOwner {\\n        uint256 totalPendingRewards;\\n        uint256 poolLen = booster.poolLength();\\n        for (uint256 i = 0; i < poolLen; ) {\\n            IBooster.PoolInfo memory p = booster.poolInfo(i);\\n            if (p.shutdown) {\\n                if (_token == p.lptoken) {\\n                    totalPendingRewards = totalPendingRewards + IERC20(p.token).totalSupply();\\n                }\\n            } else {\\n                totalPendingRewards = totalPendingRewards + booster.lpPendingRewards(p.lptoken, _token);\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint256 amountToWithdraw = IERC20(_token).balanceOf(address(booster)) - totalPendingRewards;\\n\\n        address[] memory transferTo = new address[](1);\\n        transferTo[0] = _token;\\n\\n        uint256[] memory transferAmount = new uint256[](1);\\n        transferAmount[0] = amountToWithdraw;\\n\\n        bool[] memory callQueue = new bool[](1);\\n        callQueue[0] = false;\\n\\n        booster.distributeRewards(type(uint256).max, address(0), _token, transferTo, transferAmount, callQueue);\\n        emit ReleaseToken(_token, amountToWithdraw, _recipient);\\n    }\\n\\n    function distributionByTokenLength(address _token) external view returns (uint256) {\\n        return distributionByTokens[_token].length;\\n    }\\n\\n    function customDistributionByTokenLength(uint256 _pid, address _token) external view returns (uint256) {\\n        return customDistributionByTokens[_pid][_token].length;\\n    }\\n\\n    function distributionTokenList() external view returns (address[] memory) {\\n        return distributionTokens;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-0.8/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWomDepositor {\\n    function deposit(uint256 _amount, address _stakeAddress) external returns (bool);\\n}\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function withdraw(uint wad) external;\\n}\\n\\ninterface IAsset is IERC20 {\\n    function underlyingToken() external view returns (address);\\n\\n    function pool() external view returns (address);\\n\\n    function cash() external view returns (uint120);\\n\\n    function liability() external view returns (uint120);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function underlyingTokenDecimals() external view returns (uint8);\\n\\n    function setPool(address pool_) external;\\n\\n    function underlyingTokenBalance() external view returns (uint256);\\n\\n    function transferUnderlyingToken(address to, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address to, uint256 amount) external;\\n\\n    function addCash(uint256 amount) external;\\n\\n    function removeCash(uint256 amount) external;\\n\\n    function addLiability(uint256 amount) external;\\n\\n    function removeLiability(uint256 amount) external;\\n}\\n\\ninterface IWmxLocker {\\n    struct EarnedData {\\n        address token;\\n        uint256 amount;\\n    }\\n    struct LockedBalance {\\n        uint112 amount;\\n        uint32 unlockTime;\\n    }\\n\\n    function lock(address _account, uint256 _amount) external;\\n\\n    function checkpointEpoch() external;\\n\\n    function epochCount() external view returns (uint256);\\n\\n    function balanceAtEpochOf(uint256 _epoch, address _user) external view returns (uint256 amount);\\n\\n    function totalSupplyAtEpoch(uint256 _epoch) external view returns (uint256 supply);\\n\\n    function queueNewRewards(address _rewardsToken, uint256 reward) external;\\n\\n    function getReward(address _account, bool _stake) external;\\n\\n    function getReward(address _account) external;\\n\\n    function balanceOf(address _account) external view returns (uint256 amount);\\n\\n    function balances(address _account) external view returns (uint112 locked, uint32 nextUnlockIndex);\\n\\n    function claimableRewards(address _account) external view returns (EarnedData[] memory userRewards);\\n\\n    function getVotes(address account) external view returns (uint256);\\n\\n    function getPastVotes(address account, uint256 timestamp) external view returns (uint256 votes);\\n\\n    function lockedBalances(address _user) external view returns (\\n        uint256 total,\\n        uint256 unlockable,\\n        uint256 locked,\\n        LockedBalance[] memory lockData\\n    );\\n}\\n\\ninterface IBribeVoter {\\n    function vote(IERC20[] calldata _lpVote, int256[] calldata _deltas) external returns (uint256[][] memory bribeRewards);\\n    function votes(address _user, address _lpToken) external view returns (uint256);\\n    function infos(address _lpToken) external view returns (uint104 supplyBaseIndex, uint104 supplyVoteIndex, uint40 nextEpochStartTime, uint128 claimable, bool whitelist, address gaugeManager, address bribe);\\n    function weights(address _lpToken) external view returns (uint128 allocPoint, uint128 voteWeight);\\n    function getUserVotes(address _user, address _lpToken) external view returns (uint256);\\n}\\n\\ninterface IMasterWombatRewarder {\\n    function rewardTokens() external view returns (address[] memory tokens);\\n}\\n\\ninterface IExtraRewardsDistributor {\\n    function addReward(address _token, uint256 _amount) external;\\n}\\n\\ninterface IWomDepositorWrapper {\\n    function getMinOut(uint256, uint256) external view returns (uint256);\\n\\n    function deposit(\\n        uint256,\\n        uint256,\\n        bool,\\n        address _stakeAddress\\n    ) external;\\n}\\n\\ninterface ITokenFactory{\\n    function CreateDepositToken(address) external returns(address);\\n    function CreateBribesVotingToken() external returns(address);\\n}\\n\\ninterface IBribesRewardFactory {\\n    function CreateBribesRewards(address _stakingToken, address _lptoken, bool _callOperatorOnGetReward) external returns (address);\\n}\\n\\ninterface IRewards{\\n    function asset() external returns(address);\\n    function stake(address, uint256) external;\\n    function stakeFor(address, uint256) external;\\n    function withdraw(address, uint256) external;\\n    function withdraw(uint256 assets, address receiver, address owner) external;\\n    function exit(address) external;\\n    function getReward(address) external;\\n    function queueNewRewards(address, uint256) external;\\n    function notifyRewardAmount(uint256) external;\\n    function addExtraReward(address) external;\\n    function extraRewardsLength() external view returns (uint256);\\n    function stakingToken() external view returns (address);\\n    function rewardToken() external view returns(address);\\n    function earned(address _token, address _account) external view returns (uint256);\\n    function updateOperatorData(address operator_, uint256 pid_) external;\\n    function setRewardTokenPaused(address token_, bool paused_) external;\\n    function balanceOf(address _account) external view returns (uint256 amount);\\n    function rewardTokensList() external view returns (address[] memory);\\n    function tokenRewards(address _token) external view returns (address token, uint256 periodFinish, uint256 rewardRate, uint256 lastUpdateTime, uint256 rewardPerTokenStored, uint256 queuedRewards, uint256 currentRewards, uint256 historicalRewards, bool paused);\\n}\\n\\ninterface IGauge {\\n    function notifyRewardAmount(IERC20 token, uint256 amount) external;\\n}\\n\\ninterface IBribe {\\n    function onVote(\\n        address user,\\n        uint256 newVote,\\n        uint256 originalTotalVotes\\n    ) external returns (uint256[] memory rewards);\\n\\n    function pendingTokens(address _user) external view returns (uint256[] memory rewards);\\n\\n    function rewardTokens() external view returns (IERC20[] memory tokens);\\n\\n    function rewardLength() external view returns (uint256);\\n\\n    function rewardInfo(uint256 i) external view returns (IERC20 rewardToken, uint96 tokenPerSec, uint128 accTokenPerShare, uint128 distributedAmount);\\n}\\n\\ninterface IVe {\\n    function vote(address user, int256 voteDelta) external;\\n}\\n\\ninterface INftLocker {\\n    function voteBoost(address _account) external view returns (uint256);\\n}\\n\\ninterface IBribeRewardsPool is IRewards {\\n    function withdrawAndUnwrapFrom(address _from, uint256 _amount, address _claimRecipient) external returns(bool);\\n    function updateBribesConfig(bool _callOperatorOnGetReward) external;\\n    function updateRatioConfig(uint256 _duration, uint256 _maxRewardRatio) external;\\n}\\n\\ninterface ITokenMinter is IERC20 {\\n    function mint(address,uint256) external;\\n    function burn(address,uint256) external;\\n    function setOperator(address) external;\\n    function updateOperator(address) external;\\n    function getFactAmounMint(uint256 _amount) external view returns(uint256 amount);\\n}\\n\\ninterface IStaker{\\n    function deposit(address, address) external returns (bool);\\n    function withdraw(address) external returns (uint256);\\n    function withdrawLp(address, address, uint256) external returns (bool);\\n    function withdrawAllLp(address, address) external returns (bool);\\n    function lock(uint256 _lockDays) external;\\n    function releaseLock(uint256 _slot) external returns(uint256);\\n    function getGaugeRewardTokens(address _lptoken, address _gauge) external returns (address[] memory tokens);\\n    function claimCrv(address, uint256) external returns (address[] memory tokens, uint256[] memory balances);\\n    function balanceOfPool(address, address) external view returns (uint256);\\n    function lpTokenToPid(address, address) external view returns (uint256);\\n    function operator() external view returns (address);\\n    function depositor() external view returns (address);\\n    function veWom() external view returns (address);\\n    function execute(address _to, uint256 _value, bytes calldata _data) external returns (bool, bytes memory);\\n    function setVote(bytes32 hash, bool valid) external;\\n    function setDepositor(address _depositor) external;\\n    function setOwner(address _owner) external;\\n}\\n\\ninterface IPool {\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external returns (uint256);\\n\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address toToken,\\n        int256 fromAmount\\n    ) external view returns (uint256 potentialOutcome, uint256 haircut);\\n\\n    function quotePotentialDeposit(\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256 liquidity, uint256 reward);\\n\\n    function quotePotentialWithdraw(\\n        address token,\\n        uint256 liquidity\\n    ) external view returns (uint256 amount, uint256 fee);\\n\\n    function withdrawFromOtherAsset(\\n        address fromToken,\\n        address toToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 actualToAmount, uint256 haircut);\\n\\n    function quoteAmountIn(\\n        address fromToken,\\n        address toToken,\\n        int256 toAmount\\n    ) external view returns (uint256 amountIn, uint256 haircut);\\n\\n    function addressOfAsset(address token) external view returns (address);\\n}\\n\\ninterface IWombatRouter {\\n    function getAmountOut(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        int256 amountIn\\n    ) external view returns (uint256 amountOut, uint256[] memory haircuts);\\n\\n    /**\\n     * @notice Returns the minimum input asset amount required to buy the given output asset amount\\n     * (accounting for fees and slippage)\\n     * Note: This function should be used as estimation only. The actual swap amount might\\n     * be different due to precision error (the error is typically under 1e-6)\\n     */\\n    function getAmountIn(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountOut\\n    ) external view returns (uint256 amountIn, uint256[] memory haircuts);\\n\\n    function swapExactTokensForTokens(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 fromAmount,\\n        uint256 minimumToAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactNativeForTokens(\\n        address[] calldata tokenPath, // the first address should be WBNB\\n        address[] calldata poolPath,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function swapExactTokensForNative(\\n        address[] calldata tokenPath, // the last address should be WBNB\\n        address[] calldata poolPath,\\n        uint256 amountIn,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function addLiquidityNative(\\n        IPool pool,\\n        uint256 minimumLiquidity,\\n        address to,\\n        uint256 deadline,\\n        bool shouldStake\\n    ) external payable returns (uint256 liquidity);\\n\\n    function removeLiquidityNative(\\n        IPool pool,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n\\n    function removeLiquidityFromOtherAssetAsNative(\\n        IPool pool,\\n        address fromToken,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amount);\\n}\\n\\ninterface IBooster {\\n    struct PoolInfo {\\n        address lptoken;\\n        address token;\\n        address gauge;\\n        address crvRewards;\\n        bool shutdown;\\n    }\\n\\n    function crv() external view returns (address);\\n    function owner() external view returns (address);\\n    function voterProxy() external view returns (address);\\n    function earmarkDelegate() external view returns (address);\\n    function poolLength() external view returns (uint256);\\n    function poolInfo(uint256 _pid) external view returns (PoolInfo memory);\\n    function depositFor(uint256 _pid, uint256 _amount, bool _stake, address _receiver) external returns (bool);\\n    function setOwner(address _owner) external;\\n    function setPoolManager(address _poolManager) external;\\n    function voterProxyClaimRewards(uint256 _pid, address[] memory pendingTokens) external returns (uint256[] memory pendingRewards);\\n    function addPool(address _lptoken, address _gauge) external returns (uint256);\\n    function addCreatedPool(address _lptoken, address _gauge, address _token, address _crvRewards) external returns (uint256);\\n    function approveDistribution(address _distro, address[] memory _distributionTokens, uint256 _amount) external;\\n    function approvePoolsCrvRewardsDistribution(address _token) external;\\n    function distributeRewards(uint256 _pid, address _lpToken, address _rewardToken, address[] memory _transferTo, uint256[] memory _transferAmount, bool[] memory _callQueue) external;\\n    function lpPendingRewards(address _lptoken, address _token) external view returns (uint256);\\n    function earmarkRewards(uint256 _pid) external;\\n    function earmarkRewardsIfAvailable(uint256 _pid) external;\\n    function shutdownPool(uint256 _pid) external returns (bool);\\n    function forceShutdownPool(uint256 _pid) external returns (bool);\\n    function gaugeMigrate(address _newGauge, uint256[] memory migratePids) external;\\n    function voteExecute(address _voting, uint256 _value, bytes calldata _data) external returns (bytes memory);\\n    function setVotingValid(address _voting, bool _value) external;\\n    function mintRatio() external view returns (uint256);\\n    function customMintRatio(uint256 _pid) external view returns (uint256);\\n    function crvLockRewards() external view returns (address);\\n    function cvxLocker() external view returns (address);\\n}\\n\\ninterface IBoosterEarmark {\\n    function earmarkIncentive() external view returns (uint256);\\n    function distributionByTokenLength(address _token) external view returns (uint256);\\n    function distributionByTokens(address, uint256) external view returns (address, uint256, bool);\\n    function distributionTokenList() external view returns (address[] memory);\\n    function addPool(address _lptoken, address _gauge) external returns (uint256);\\n    function addCreatedPool(address _lptoken, address _gauge, address _token, address _crvRewards) external returns (uint256);\\n    function isEarmarkAvailable(uint256 _pid) external view returns(bool);\\n    function isEarmarkPoolAvailable(uint256 _pid, IBooster.PoolInfo memory _pool) external view returns (bool);\\n    function earmarkRewards(uint256[] memory _pids) external;\\n    function earmarkPeriod() external view returns (uint256);\\n    function lastEarmarkAt(uint256 pid) external view returns (uint256);\\n    function getEarmarkPoolExecuteOn(uint256 pid) external view returns (uint256);\\n}\\n\\ninterface ISwapRouter {\\n    function swapExactTokensForTokens(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        uint256 amountIn,\\n        uint256 minimumamountOut,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function getAmountOut(\\n        address[] calldata tokenPath,\\n        address[] calldata poolPath,\\n        int256 amountIn\\n    ) external view returns (uint256 amountOut, uint256[] memory haircuts);\\n}\\n\\ninterface IWomSwapDepositor {\\n    function pool() external view returns (address);\\n    function deposit(uint256 _amount, address _stakeAddress, uint256 _minAmountOut, uint256 _deadline) external returns (bool);\\n}\\n\\n/**\\n * @dev Interface of the MasterWombatV2\\n */\\ninterface IMasterWombatV2 {\\n    function getAssetPid(address asset) external view returns (uint256 pid);\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(uint256 _pid, address _user)\\n    external\\n    view\\n    returns (\\n        uint256 pendingRewards,\\n        IERC20[] memory bonusTokenAddresses,\\n        string[] memory bonusTokenSymbols,\\n        uint256[] memory pendingBonusRewards\\n    );\\n\\n    function rewarderBonusTokenInfo(uint256 _pid)\\n    external\\n    view\\n    returns (IERC20[] memory bonusTokenAddresses, string[] memory bonusTokenSymbols);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\\n\\n    function multiClaim(uint256[] memory _pids)\\n    external\\n    returns (\\n        uint256 transfered,\\n        uint256[] memory rewards,\\n        uint256[][] memory additionalRewards\\n    );\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256[] memory);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function updateFactor(address _user, uint256 _newVeWomBalance) external;\\n\\n    function poolInfo(uint256 _pid) external view returns (address lpToken, uint96 allocPoint, IMasterWombatRewarder rewarder, uint256 sumOfFactors, uint104 accWomPerShare, uint104 accWomPerFactorShare, uint40 lastRewardTimestamp);\\n}\\n\\ninterface IMasterWombatV3 {\\n    struct PoolInfoV3 {\\n        address lpToken; // Address of LP token contract.\\n        ////\\n        address rewarder;\\n        uint40 periodFinish;\\n        ////\\n        uint128 sumOfFactors; // 20.18 fixed point. the sum of all boosted factors by all of the users in the pool\\n        uint128 rewardRate; // 20.18 fixed point.\\n        ////\\n        uint104 accWomPerShare; // 19.12 fixed point. Accumulated WOM per share, times 1e12.\\n        uint104 accWomPerFactorShare; // 19.12 fixed point. Accumulated WOM per factor share\\n        uint40 lastRewardTimestamp;\\n    }\\n\\n    function poolInfoV3(uint256 _index) external view returns (PoolInfoV3 memory);\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        // storage slot 1\\n        uint128 amount; // 20.18 fixed point. How many LP tokens the user has provided.\\n        uint128 factor; // 20.18 fixed point. boosted factor = sqrt (lpAmount * veWom.balanceOf())\\n        // storage slot 2\\n        uint128 rewardDebt; // 20.18 fixed point. Reward debt. See explanation below.\\n        uint128 pendingWom; // 20.18 fixed point. Amount of pending wom\\n    }\\n    function userInfo(uint256 _pid, address _user) external view returns (UserInfo memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_booster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"distro\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"ClearDistributionApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distrosLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callQueueLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"CustomDistributionUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distrosLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callQueueLength\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"DistributionUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EarmarkRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"diffAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBal\",\"type\":\"uint256\"}],\"name\":\"EarmarkRewardsDiff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"distro\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"queue\",\"type\":\"bool\"}],\"name\":\"EarmarkRewardsTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"ReleaseToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earmarkIncentive\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earmarkPeriod\",\"type\":\"uint256\"}],\"name\":\"SetEarmarkConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolManager\",\"type\":\"address\"}],\"name\":\"SetPoolManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"distro\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"callQueue\",\"type\":\"bool\"}],\"name\":\"TokenDistributionUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DISTRIBUTION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lptoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crvRewards\",\"type\":\"address\"}],\"name\":\"addCreatedPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lptoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"approvePoolDistributionTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"booster\",\"outputs\":[{\"internalType\":\"contract IBooster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distro\",\"type\":\"address\"}],\"name\":\"clearDistroApprovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"customDistributionByTokenLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"customDistributionByTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"distro\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"callQueue\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"distributionByTokenLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"distributionByTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"distro\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"callQueue\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earmarkIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earmarkPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"earmarkRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"earmarkRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"earmarkRewardsIfAvailable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"forceShutdownPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getEarmarkPoolExecuteOn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lptoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crvRewards\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shutdown\",\"type\":\"bool\"}],\"internalType\":\"struct IBooster.PoolInfo\",\"name\":\"_pool\",\"type\":\"tuple\"}],\"name\":\"getEarmarkPoolExecuteOn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"executeOn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"isEarmarkAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"lptoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crvRewards\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shutdown\",\"type\":\"bool\"}],\"internalType\":\"struct IBooster.PoolInfo\",\"name\":\"_pool\",\"type\":\"tuple\"}],\"name\":\"isEarmarkPoolAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastEarmarkAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainRewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract BoosterEarmark\",\"name\":\"_oldBoosterEarmark\",\"type\":\"address\"}],\"name\":\"migrateDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"releaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolManager\",\"type\":\"address\"}],\"name\":\"setBoosterPoolManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_earmarkIncentive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earmarkPeriod\",\"type\":\"uint256\"}],\"name\":\"setEarmarkConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"shutdownPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateBoosterAndDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_distros\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_callQueue\",\"type\":\"bool[]\"}],\"name\":\"updateCustomDistributionByTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_distros\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_shares\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_callQueue\",\"type\":\"bool[]\"}],\"name\":\"updateDistributionByTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voterProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BoosterEarmark", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "800", "ConstructorArguments": "000000000000000000000000561050ffb188420d2605714f84eda714da58da69000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}