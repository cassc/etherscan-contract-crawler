{"SourceCode": "pragma solidity ^0.7.6;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n// Philosoraptor Finance\r\n// Contract using solidity 7 for Philosoraptor\r\n// \r\n//\r\n// ----------------------------------------------------------------------------\r\n// 'Philosoraptor' token contract\r\n//\r\n// Symbol      : RAPTR\r\n// Name        : Philosoraptor Token\r\n// Premine     : 150000000\r\n// Decimals    : 18\r\n//\r\n// ----------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n// ----------------------------------------------------------------------------\r\ninterface ERC20Interface {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address tokenOwner) external view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function approve(address spender, uint tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n// ----------------------------------------------------------------------------\r\ninterface ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes calldata data) external;\r\n\tfunction onTransferReceived(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\tmapping (address => bool) public minterAccesses;\r\n\tmapping (address => bool) public chainSwappers;\r\n\tevent AllowedMinter(address indexed _newMinter);\r\n\tevent RevokedMinter(address indexed _revoked);\r\n\r\n\tevent AllowedSwapper(address indexed _newSwapper);\r\n\tevent RevokedSwapper(address indexed _revoked);\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\tmodifier onlyMinter {\r\n\t\trequire((minterAccesses[msg.sender]) || (chainSwappers[msg.sender]) || (msg.sender == owner));\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyChainSwapper {\r\n\t\trequire((chainSwappers[msg.sender]) || (msg.sender == owner));\r\n\t\t_;\r\n\t}\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n\tfunction allowMinter(address _newMinter) public onlyOwner {\r\n\t\tminterAccesses[_newMinter] = true;\r\n\t\temit AllowedMinter(_newMinter);\r\n\t}\r\n\tfunction revokeMinter(address _revoked) public onlyOwner {\r\n\t\tminterAccesses[_revoked] = false;\r\n\t\temit RevokedMinter(_revoked);\r\n\t}\r\n\r\n\tfunction allowSwapper(address _newSwapper) public onlyOwner {\r\n\t\tchainSwappers[_newSwapper] = true;\r\n\t\temit AllowedSwapper(_newSwapper);\r\n\t}\r\n\r\n\tfunction revokeSwapper(address _revoked) public onlyOwner {\r\n\t\tchainSwappers[_revoked] = false;\r\n\t\temit RevokedSwapper(_revoked);\r\n\t}\r\n\r\n\tfunction isMinter(address _guy) public view returns (bool) {\r\n\t\treturn minterAccesses[_guy];\r\n\t}\r\n\tfunction isSwapper(address _guy) public view returns (bool) {\r\n\t\treturn chainSwappers[_guy];\r\n\t}\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\r\n// token transfers\r\n// ----------------------------------------------------------------------------\r\ncontract Philosoraptor is Owned {\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint256 public _totalSupply;\r\n\tuint256 burnRatio = 3;\r\n\tuint256 feeRatio = 4;\r\n\tuint256 pendingFees;\r\n\tuint256 keepRatio = 93;\r\n\tuint256 apr;\r\n\tuint256 stakeDelay;\r\n\tuint256 stakingRewards;\r\n\tmapping(address => bool) private _hasStaked;\r\n\tmapping(address => uint256) private lastClaim;\r\n\tmapping(address => uint256) private userApr;\r\n\tmapping(address => uint256) private lockedSwaps;\r\n\tmapping(uint256 => bool) private isSameAddress;\r\n\tmapping(address => bool) private bypassfees;\r\n\tuint256 lastNonce;\r\n\r\n\r\n\r\n\tuint256 toBurn; // amount to burn on transfer\r\n\tuint256 toKeep; // amount to send to final recipient\r\n\tuint256 fee; // fee given to previous sender\r\n\tuint256 totalStakedAmount;\r\n\r\n\r\n\r\n\tuint public timeOfLastProof;\r\n\tuint256 public _MINIMUM_TARGET = 2**16;\r\n\tuint256 public _MAXIMUM_TARGET = 2**240;\r\n\tuint256 public miningTarget = _MAXIMUM_TARGET;\r\n\tuint256 public timeOfLastReadjust;\r\n\tuint public epochCount = 1;\r\n\tbytes32 public currentChallenge;\r\n\tuint public epochLenght = 600; // epoch lenght in seconds\r\n\tmapping (uint256 => bytes32) epochs;\r\n\tevent Mint(address indexed from, uint rewardAmount, uint epochCount, bytes32 newChallengeNumber);\r\n\r\n\r\n\taddress public PancakeSwapPool;\r\n\r\n    mapping(address => uint) public balances;\r\n    mapping(address => mapping(address => uint)) public allowed;\r\n\r\n\tevent lockedForSwap(address indexed from, address indexed to, uint256 indexed amount);\r\n\tevent swapWasConfirmed(address indexed _address, uint256 indexed amount);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Constructor\r\n    // ------------------------------------------------------------------------\r\n    constructor() {\r\n        symbol = \"RAPTR\";\r\n        name = \"Philosoraptor\";\r\n        decimals = 9;\r\n        _totalSupply = 1000000000000000*(10**9);\r\n        balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(this), msg.sender, _totalSupply);\r\n\t\tapr = 5;\r\n\t\ttimeOfLastProof = block.timestamp;\r\n\t\tcurrentChallenge = keccak256(\"Philosoraptr is king\");\r\n    }\r\n\r\n\tfunction changeBurnRatio(uint256 _newPercentage) public onlyOwner {\r\n\t\trequire(_newPercentage + feeRatio <= 100);\r\n\t\tburnRatio = _newPercentage;\r\n\t\tkeepRatio = 100 - feeRatio + burnRatio;\r\n\t}\r\n\r\n\tfunction changeFeeRatio(uint256 _newPercentage) public onlyOwner {\r\n\t\trequire(_newPercentage + burnRatio <= 100);\r\n\t\tfeeRatio = _newPercentage;\r\n\t\tkeepRatio = 100 - feeRatio + burnRatio;\r\n\t}\r\n\t\r\n\tfunction setDecimals(uint8 _decimals) public onlyOwner {\r\n\t\tdecimals = _decimals;\r\n\t}\r\n\t\r\n\tfunction setName(string memory newName) public onlyOwner {\r\n\t\tname = newName;\r\n\t}\r\n\t\r\n\tfunction setTicket(string memory newTicker) public onlyOwner {\r\n\t\tsymbol = newTicker;\r\n\t}\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Total supply\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Deflationnary stonks\r\n    // ------------------------------------------------------------------------\r\n\r\n\tfunction burnFromLP() internal {\r\n\t\tif ((PancakeSwapPool != address(0))&&(balances[PancakeSwapPool] > 0))\r\n\t\t_burnFrom(PancakeSwapPool,(balances[PancakeSwapPool]*1)/50);\r\n\t}\r\n\tfunction setPancakeSwap(address pool) public onlyOwner {\r\n\t\tPancakeSwapPool = pool;\r\n\t}\r\n\t\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the token balance for account tokenOwner\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n\t\tif (tokenOwner == address(0)) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn balances[tokenOwner];\r\n\t\t}\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer the balance from token owner's account to to account\r\n    // - Owner's account must have sufficient balance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n\t\t_transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for spender to transferFrom(...) tokens\r\n    // from the token owner's account\r\n    //\r\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n    // recommends that there are no checks for the approval double-spend attack\r\n    // as this should be implemented in user interfaces\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Transfer tokens from the from account to the to account\r\n    //\r\n    // The calling account must already have sufficient tokens approve(...)-d\r\n    // for spending from the from account and\r\n    // - From account must have sufficient balance to transfer\r\n    // - Spender must have sufficient allowance to transfer\r\n    // - 0 value transfers are allowed\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n\t\tif(from == msg.sender) {\r\n\t\t\t_transfer(msg.sender, to, tokens);\r\n\t\t}\r\n\t\telse {\r\n\t\t\trequire(allowed[from][msg.sender] >= tokens, \"You are not allowed to spend this amount... too bad\");\r\n\t\t\tif (from != address(this)) {\r\n\t\t\t\tallowed[from][msg.sender] -= tokens;\r\n\t\t\t}\r\n\t\t\t_transfer(from, to, tokens);\r\n\t\t}\r\n        return true;\r\n    }\r\n\r\n\tfunction _transfer(address from, address to, uint tokens) internal {\r\n\t\tif ((from != PancakeSwapPool)&&(to != PancakeSwapPool)) {\r\n\t\t\tburnFromLP();\r\n\t\t}\r\n\t\tif (_hasStaked[msg.sender]) {\r\n\t\t\t_claimEarnings(msg.sender);\r\n\t\t}\r\n\t\trequire(balances[from] >= tokens, \"Unsufficient balance... buy more !\");\r\n\t\trequire(tokens >= 0, \"Hmmm, amount seems to be negative... sorry, but we are out of antimatter\");\r\n\t\tif ((to == address(this))&&(tokens > 0)) {\r\n\t\t\tstakeIn(tokens);\r\n\t\t}\r\n\t\telse if (from == address(this)) {\r\n\t\t\twithdrawStake(tokens);\r\n\t\t}\r\n\t\telse if ((bypassfees[from])|| bypassfees[to]) {\r\n\t\t\tbalances[from] -= tokens;\r\n\t\t\tbalances[to] += tokens;\r\n\t\t\temit Transfer(from, to, tokens);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tbalances[from] -= tokens;\r\n\t\t\tbalances[to] += (tokens*keepRatio)/100;\r\n\t\t\tbalances[address(this)] += (tokens*feeRatio)/100;\r\n\t\t\tpendingFees += (tokens*feeRatio)/100;\r\n\t\t\t_totalSupply -= (tokens*burnRatio)/100;\r\n\t\t\temit Transfer(from, to, (tokens*keepRatio)/100);\r\n\t\t\temit Transfer(from, address(this),(tokens*(burnRatio+feeRatio))/100);\r\n\t\t}\r\n\t}\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Returns the amount of tokens approved by the owner that can be\r\n    // transferred to the spender's account\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n\t\treturn allowed[tokenOwner][spender];\r\n    }\r\n\t// ------------------------------------------------------------------------\r\n\t// mints token\r\n    // ------------------------------------------------------------------------\r\n\tfunction mintTo(address _to, uint256 _amount) public onlyMinter {\r\n\t\trequire(_amount > 0);\r\n\t\tbalances[_to] += _amount;\r\n\t\t_totalSupply += _amount;\r\n\t\temit Transfer(address(this), _to, _amount);\r\n\t}\r\n\r\n\tfunction _burnFrom(address _guy, uint256 _amount) internal {\r\n\t\trequire((_amount > 0)||_amount <= balances[_guy]);\r\n\t\tbalances[_guy] -= _amount;\r\n\t\t_totalSupply -= _amount;\r\n\t\temit Transfer(_guy, address(this), _amount);\r\n\t}\r\n\r\n\tfunction burnFrom(address _guy, uint256 _amount) public onlyOwner {\r\n\t\t_burnFrom(_guy, _amount);\r\n\t}\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Token owner can approve for spender to transferFrom(...) tokens\r\n    // from the token owner's account. The spender contract function\r\n    // receiveApproval(...) is then executed\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n\t\r\n\t\r\n\tfunction transferAndCall(address to, uint256 tokens, bytes memory data) public returns (bool success) {\r\n\t\ttransfer(to, tokens);\r\n\t\tApproveAndCallFallBack(to).onTransferReceived(address(this),msg.sender,tokens,data);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction totalFeeRatio() public view returns (uint256) {\r\n\t\treturn feeRatio + burnRatio;\r\n\t}\r\n\r\n\tfunction allowBypassFees(address _guy) public onlyOwner {\r\n\t\tbypassfees[_guy] = true;\r\n\t}\r\n\r\n\tfunction disallowBypassFees(address _guy) public onlyOwner {\r\n\t\tbypassfees[_guy] = false;\r\n\t}\r\n\r\n\tfunction getFeeRatio() public view returns (uint256) {\r\n\t\treturn feeRatio;\r\n\t}\r\n\r\n\tfunction getBurnRatio() public view returns (uint256) {\r\n\t\treturn burnRatio;\r\n\t}\r\n\r\n\tfunction stakedBalanceOf(address _guy) public view returns (uint256) {\r\n\t\treturn allowed[address(this)][_guy];\r\n\t}\r\n\r\n\tfunction changeAPR(uint256 _apr) public onlyOwner {\r\n\t\trequire(_apr>=0);\r\n\t\tapr = _apr;\r\n\t}\r\n\r\n\tfunction stakeIn(uint256 _amount) public {\r\n\t\tif(_hasStaked[msg.sender]) {\r\n\t\t\t_claimEarnings(msg.sender);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlastClaim[msg.sender] = block.timestamp;\r\n\t\t\t_hasStaked[msg.sender] = true;\r\n\t\t}\r\n\t\trequire(_amount <= balances[msg.sender], \"Whoops, you do not have enough tokens !\");\r\n\t\trequire(_amount > 0, \"Amount shall be positive... who wants negative interests ?\");\r\n\t\tuserApr[msg.sender] = apr;\r\n\t\tbalances[msg.sender] -= _amount;\r\n\t\tallowed[address(this)][msg.sender] += _amount;\r\n\t\tbalances[address(this)] += _amount;\r\n\t\ttotalStakedAmount += _amount;\r\n\t\temit Transfer(msg.sender,address(this), _amount);\r\n\t}\r\n\r\n\tfunction withdrawStake(uint256 amount) public {\r\n\t\trequire(_hasStaked[msg.sender]);\r\n\t\trequire(allowed[address(this)][msg.sender] >= amount, \"You do not have enought... try a lower amount !\");\r\n\t\trequire(amount > 0, \"Hmmm, stop thinking negative... and USE A POSITIVE AMOUNT\");\r\n\t\t_claimEarnings(msg.sender);\r\n\t\tallowed[address(this)][msg.sender] -= amount;\r\n\t\tbalances[msg.sender] += amount;\r\n\t\tbalances[address(this)] -= amount;\r\n\t\tuserApr[msg.sender] = apr;\r\n\t\temit Transfer(address(this), msg.sender, amount);\r\n\t\ttotalStakedAmount -= amount;\r\n\r\n\t}\r\n\r\n\tfunction _claimEarnings(address _guy) internal {\r\n\t\trequire(_hasStaked[_guy], \"Hmm... empty. Normal, you shall stake-in first !\");\r\n\t\tbalances[_guy] += pendingRewards(_guy);\r\n\t\t_totalSupply += pendingRewards(_guy);\r\n\t\temit Transfer(address(this),_guy,pendingRewards(_guy));\r\n\t\tlastClaim[_guy] = block.timestamp;\r\n\t}\r\n\r\n\tfunction pendingRewards(address _guy) public view returns (uint256) {\r\n\t\treturn (allowed[address(this)][_guy]*userApr[_guy]*(block.timestamp - lastClaim[_guy]))/3153600000;\r\n\t}\r\n\r\n\tfunction claimStakingRewards() public {\r\n\t\t_claimEarnings(msg.sender);\r\n\t}\r\n\r\n\tfunction getCurrentAPR() public view returns (uint256) {\r\n\t\treturn apr;\r\n\t}\r\n\r\n\tfunction getUserAPR(address _guy) public view returns (uint256) {\r\n\t\tif(_hasStaked[_guy]) {\r\n\t\t\treturn userApr[_guy];\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn apr;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction lockForSwap(uint256 _amount) public {\r\n\t\trequire(_amount <= balances[msg.sender]);\r\n\t\trequire(_amount > 0);\r\n\t\tbalances[msg.sender] -= _amount;\r\n\t\tlockedSwaps[msg.sender] += _amount;\r\n\t\tbalances[address(this)] += _amount;\r\n\t\temit Transfer(msg.sender, address(this),_amount);\r\n\t\temit lockedForSwap(msg.sender, msg.sender, _amount);\r\n\t}\r\n\r\n\tfunction lockForSwapTo(address _to,uint256 _amount) public {\r\n\t\trequire(_amount <= balances[msg.sender], \"Insufficient balance\");\r\n\t\trequire(_amount > 0, \"Amount should be positive\");\r\n\t\tbalances[msg.sender] -= _amount;\r\n\t\tlockedSwaps[_to] += _amount;\r\n\t\tbalances[address(this)] += _amount;\r\n\t\temit Transfer(msg.sender, address(this),_amount);\r\n\t\temit lockedForSwap(msg.sender, _to, _amount);\r\n\t}\r\n\r\n\tfunction cancelSwaps() public {\r\n\t\trequire(lockedSwaps[msg.sender] > 0);\r\n\t\tbalances[msg.sender] += lockedSwaps[msg.sender];\r\n\t\tbalances[address(this)] -= lockedSwaps[msg.sender];\r\n\t\temit Transfer(address(this),msg.sender,lockedSwaps[msg.sender]);\r\n\t\tlockedSwaps[msg.sender] = 0;\r\n\t}\r\n\r\n\tfunction cancelSwapsOf(address _guy) public onlyChainSwapper {\r\n\t\trequire(lockedSwaps[_guy] > 0);\r\n\t\tbalances[_guy] += lockedSwaps[_guy];\r\n\t\tbalances[address(this)] -= lockedSwaps[msg.sender];\r\n\t\temit Transfer(address(this),msg.sender,lockedSwaps[msg.sender]);\r\n\t\tlockedSwaps[msg.sender] = 0;\r\n\t}\r\n\r\n\tfunction swapConfirmed(address _guy, uint256 _amount) public onlyChainSwapper {\r\n\t\trequire((_amount <= lockedSwaps[_guy])&&(_amount > 0));\r\n\t\tbalances[address(this)] -= _amount;\r\n\t\t_totalSupply += _amount;\r\n\t\tlockedSwaps[_guy] -= _amount;\r\n\t\temit swapWasConfirmed(_guy, _amount);\r\n\t}\r\n\r\n\tfunction pendingSwapsOf(address _guy) public view returns (uint256) {\r\n\t\treturn lockedSwaps[_guy];\r\n\t}\r\n\r\n\tfunction totalStaked() public view returns (uint256) {\r\n\t\treturn totalStakedAmount;\r\n\t}\r\n\r\n\r\n\tfunction getMiningDifficulty() public view returns (uint) {\r\n\t\treturn _MAXIMUM_TARGET/miningTarget;\r\n\t}\r\n\r\n\tfunction getChallengeNumber() public view returns (bytes32) {\r\n\t\treturn currentChallenge;\r\n\t}\r\n\r\n\tfunction getMiningReward() public view returns (uint256) {\r\n\t\treturn pendingFees;\r\n\t}\r\n\r\n\tfunction calcMiningTarget() public view returns (uint256) {\r\n\t\treturn miningTargetForDelay(block.timestamp - timeOfLastReadjust);\r\n\t}\r\n\r\n\tfunction miningTargetForDelay(uint256 blockdelay) public view returns (uint256) {\r\n\t\t\tif (netTargetForDelay(blockdelay) >= _MAXIMUM_TARGET) {\r\n\t\t\t\treturn _MAXIMUM_TARGET;\r\n\t\t\t} else if (netTargetForDelay(blockdelay) < _MINIMUM_TARGET) {\r\n\t\t\t\treturn _MINIMUM_TARGET;\r\n\t\t\t} else {\r\n\t\t\t\treturn netTargetForDelay(blockdelay);\r\n\t\t\t}\r\n\t}\r\n\r\n\tfunction netTargetForDelay(uint256 blockdelay) public view returns (uint256) {\r\n\t\treturn (miningTarget*(blockdelay))/1000;\r\n\t}\r\n\r\n\tfunction _newEpoch(uint256 _nonce) internal {\r\n\t\tcurrentChallenge = bytes32(keccak256(abi.encodePacked(_nonce, currentChallenge, blockhash(block.number - 1), \"Hello world\")));\r\n\t\tif ((epochCount%100) == 0) {\r\n\t\t\tminingTarget = calcMiningTarget();\r\n\t\t\ttimeOfLastReadjust = block.timestamp;\r\n\t\t}\r\n\t\ttimeOfLastProof = block.timestamp;\r\n\t\tepochCount += 1;\r\n\t}\r\n\r\n\tfunction getMiningTarget() public view returns (uint256) {\r\n\t\treturn miningTarget;\r\n\t}\r\n\r\n\tfunction changeDifficulty(uint256 _difficulty) public onlyOwner {\r\n\t\trequire(_difficulty > 0);\r\n\t\tminingTarget = _MAXIMUM_TARGET/_difficulty;\r\n\t}\r\n\r\n\tfunction mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\r\n\t\trequire((block.timestamp - timeOfLastProof) >= 5);\r\n\t\tbytes32 n = keccak256(abi.encodePacked(currentChallenge, msg.sender, nonce));\r\n\t\trequire(challenge_digest == n);\r\n\t\trequire(n <= bytes32(miningTarget));\r\n\t\tbalances[address(this)] -= pendingFees;\r\n\t\tbalances[msg.sender] += pendingFees;\r\n\t\temit Mint(msg.sender, pendingFees, epochCount, currentChallenge);\r\n\t\temit Transfer(address(this), msg.sender, pendingFees);\r\n\t\tpendingFees = 0;\r\n\t\t_newEpoch(nonce);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Don't accept ETH\r\n    // ------------------------------------------------------------------------\r\n    fallback() external {\r\n        revert();\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newMinter\",\"type\":\"address\"}],\"name\":\"AllowedMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newSwapper\",\"type\":\"address\"}],\"name\":\"AllowedSwapper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newChallengeNumber\",\"type\":\"bytes32\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_revoked\",\"type\":\"address\"}],\"name\":\"RevokedMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_revoked\",\"type\":\"address\"}],\"name\":\"RevokedSwapper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockedForSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapWasConfirmed\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"PancakeSwapPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MAXIMUM_TARGET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_MINIMUM_TARGET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guy\",\"type\":\"address\"}],\"name\":\"allowBypassFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMinter\",\"type\":\"address\"}],\"name\":\"allowMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSwapper\",\"type\":\"address\"}],\"name\":\"allowSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcMiningTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelSwaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guy\",\"type\":\"address\"}],\"name\":\"cancelSwapsOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"chainSwappers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"}],\"name\":\"changeAPR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPercentage\",\"type\":\"uint256\"}],\"name\":\"changeBurnRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_difficulty\",\"type\":\"uint256\"}],\"name\":\"changeDifficulty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPercentage\",\"type\":\"uint256\"}],\"name\":\"changeFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStakingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentChallenge\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guy\",\"type\":\"address\"}],\"name\":\"disallowBypassFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochLenght\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChallengeNumber\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMiningDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMiningReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMiningTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guy\",\"type\":\"address\"}],\"name\":\"getUserAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guy\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guy\",\"type\":\"address\"}],\"name\":\"isSwapper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lockForSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lockForSwapTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockdelay\",\"type\":\"uint256\"}],\"name\":\"miningTargetForDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"challenge_digest\",\"type\":\"bytes32\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minterAccesses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockdelay\",\"type\":\"uint256\"}],\"name\":\"netTargetForDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guy\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guy\",\"type\":\"address\"}],\"name\":\"pendingSwapsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_revoked\",\"type\":\"address\"}],\"name\":\"revokeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_revoked\",\"type\":\"address\"}],\"name\":\"revokeSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"setDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"setPancakeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newTicker\",\"type\":\"string\"}],\"name\":\"setTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guy\",\"type\":\"address\"}],\"name\":\"stakedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swapConfirmed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeOfLastProof\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeOfLastReadjust\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Philosoraptor", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7d1bc13d09020d8c6304ac455274faf2e45c5216977bce58639b82f9905be5b7"}