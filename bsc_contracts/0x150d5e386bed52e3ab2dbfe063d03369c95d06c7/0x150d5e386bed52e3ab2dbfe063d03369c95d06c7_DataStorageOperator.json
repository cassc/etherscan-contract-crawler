{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DataStorageOperator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport './interfaces/IAlgebraFactory.sol';\\nimport './interfaces/IDataStorageOperator.sol';\\n\\nimport './libraries/DataStorage.sol';\\nimport './libraries/Sqrt.sol';\\nimport './libraries/AdaptiveFee.sol';\\n\\nimport './libraries/Constants.sol';\\n\\ncontract DataStorageOperator is IDataStorageOperator {\\n  uint256 constant UINT16_MODULO = 65536;\\n  uint128 constant MAX_VOLUME_PER_LIQUIDITY = 100000 << 64; // maximum meaningful ratio of volume to liquidity\\n\\n  using DataStorage for DataStorage.Timepoint[UINT16_MODULO];\\n\\n  DataStorage.Timepoint[UINT16_MODULO] public override timepoints;\\n  AdaptiveFee.Configuration public feeConfig;\\n\\n  address private immutable pool;\\n  address private immutable factory;\\n\\n  modifier onlyPool() {\\n    require(msg.sender == pool, 'only pool can call this');\\n    _;\\n  }\\n\\n  constructor(address _pool) {\\n    factory = msg.sender;\\n    pool = _pool;\\n  }\\n\\n  /// @inheritdoc IDataStorageOperator\\n  function initialize(uint32 time, int24 tick) external override onlyPool {\\n    return timepoints.initialize(time, tick);\\n  }\\n\\n  /// @inheritdoc IDataStorageOperator\\n  function changeFeeConfiguration(AdaptiveFee.Configuration calldata _feeConfig) external override {\\n    require(msg.sender == factory || msg.sender == IAlgebraFactory(factory).owner());\\n\\n    require(uint256(_feeConfig.alpha1) + uint256(_feeConfig.alpha2) + uint256(_feeConfig.baseFee) <= type(uint16).max, 'Max fee exceeded');\\n    require(_feeConfig.gamma1 != 0 && _feeConfig.gamma2 != 0 && _feeConfig.volumeGamma != 0, 'Gammas must be > 0');\\n\\n    feeConfig = _feeConfig;\\n    emit FeeConfiguration(_feeConfig);\\n  }\\n\\n  /// @inheritdoc IDataStorageOperator\\n  function getSingleTimepoint(\\n    uint32 time,\\n    uint32 secondsAgo,\\n    int24 tick,\\n    uint16 index,\\n    uint128 liquidity\\n  )\\n    external\\n    view\\n    override\\n    onlyPool\\n    returns (\\n      int56 tickCumulative,\\n      uint160 secondsPerLiquidityCumulative,\\n      uint112 volatilityCumulative,\\n      uint256 volumePerAvgLiquidity\\n    )\\n  {\\n    uint16 oldestIndex;\\n    // check if we have overflow in the past\\n    uint16 nextIndex = index + 1; // considering overflow\\n    if (timepoints[nextIndex].initialized) {\\n      oldestIndex = nextIndex;\\n    }\\n\\n    DataStorage.Timepoint memory result = timepoints.getSingleTimepoint(time, secondsAgo, tick, index, oldestIndex, liquidity);\\n    (tickCumulative, secondsPerLiquidityCumulative, volatilityCumulative, volumePerAvgLiquidity) = (\\n      result.tickCumulative,\\n      result.secondsPerLiquidityCumulative,\\n      result.volatilityCumulative,\\n      result.volumePerLiquidityCumulative\\n    );\\n  }\\n\\n  /// @inheritdoc IDataStorageOperator\\n  function getTimepoints(\\n    uint32 time,\\n    uint32[] memory secondsAgos,\\n    int24 tick,\\n    uint16 index,\\n    uint128 liquidity\\n  )\\n    external\\n    view\\n    override\\n    onlyPool\\n    returns (\\n      int56[] memory tickCumulatives,\\n      uint160[] memory secondsPerLiquidityCumulatives,\\n      uint112[] memory volatilityCumulatives,\\n      uint256[] memory volumePerAvgLiquiditys\\n    )\\n  {\\n    return timepoints.getTimepoints(time, secondsAgos, tick, index, liquidity);\\n  }\\n\\n  /// @inheritdoc IDataStorageOperator\\n  function getAverages(\\n    uint32 time,\\n    int24 tick,\\n    uint16 index,\\n    uint128 liquidity\\n  ) external view override onlyPool returns (uint112 TWVolatilityAverage, uint256 TWVolumePerLiqAverage) {\\n    return timepoints.getAverages(time, tick, index, liquidity);\\n  }\\n\\n  /// @inheritdoc IDataStorageOperator\\n  function write(\\n    uint16 index,\\n    uint32 blockTimestamp,\\n    int24 tick,\\n    uint128 liquidity,\\n    uint128 volumePerLiquidity\\n  ) external override onlyPool returns (uint16 indexUpdated) {\\n    return timepoints.write(index, blockTimestamp, tick, liquidity, volumePerLiquidity);\\n  }\\n\\n  /// @inheritdoc IDataStorageOperator\\n  function calculateVolumePerLiquidity(\\n    uint128 liquidity,\\n    int256 amount0,\\n    int256 amount1\\n  ) external pure override returns (uint128 volumePerLiquidity) {\\n    uint256 volume = Sqrt.sqrtAbs(amount0) * Sqrt.sqrtAbs(amount1);\\n    uint256 volumeShifted;\\n    if (volume >= 2**192) volumeShifted = (type(uint256).max) / (liquidity > 0 ? liquidity : 1);\\n    else volumeShifted = (volume << 64) / (liquidity > 0 ? liquidity : 1);\\n    if (volumeShifted >= MAX_VOLUME_PER_LIQUIDITY) return MAX_VOLUME_PER_LIQUIDITY;\\n    else return uint128(volumeShifted);\\n  }\\n\\n  /// @inheritdoc IDataStorageOperator\\n  function window() external pure override returns (uint32) {\\n    return DataStorage.WINDOW;\\n  }\\n\\n  /// @inheritdoc IDataStorageOperator\\n  function getFee(\\n    uint32 _time,\\n    int24 _tick,\\n    uint16 _index,\\n    uint128 _liquidity\\n  ) external view override onlyPool returns (uint16 fee) {\\n    (uint88 volatilityAverage, uint256 volumePerLiqAverage) = timepoints.getAverages(_time, _tick, _index, _liquidity);\\n\\n    return AdaptiveFee.getFee(volatilityAverage / 15, volumePerLiqAverage, feeConfig);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAlgebraFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/**\\n * @title The interface for the Algebra Factory\\n * @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\n * https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\n */\\ninterface IAlgebraFactory {\\n  /**\\n   *  @notice Emitted when the owner of the factory is changed\\n   *  @param newOwner The owner after the owner was changed\\n   */\\n  event Owner(address indexed newOwner);\\n\\n  /**\\n   *  @notice Emitted when the vault address is changed\\n   *  @param newVaultAddress The vault address after the address was changed\\n   */\\n  event VaultAddress(address indexed newVaultAddress);\\n\\n  /**\\n   *  @notice Emitted when a pool is created\\n   *  @param token0 The first token of the pool by address sort order\\n   *  @param token1 The second token of the pool by address sort order\\n   *  @param pool The address of the created pool\\n   */\\n  event Pool(address indexed token0, address indexed token1, address pool);\\n\\n  /**\\n   *  @notice Emitted when the farming address is changed\\n   *  @param newFarmingAddress The farming address after the address was changed\\n   */\\n  event FarmingAddress(address indexed newFarmingAddress);\\n\\n  event FeeConfiguration(\\n    uint16 alpha1,\\n    uint16 alpha2,\\n    uint32 beta1,\\n    uint32 beta2,\\n    uint16 gamma1,\\n    uint16 gamma2,\\n    uint32 volumeBeta,\\n    uint16 volumeGamma,\\n    uint16 baseFee\\n  );\\n\\n  /**\\n   *  @notice Returns the current owner of the factory\\n   *  @dev Can be changed by the current owner via setOwner\\n   *  @return The address of the factory owner\\n   */\\n  function owner() external view returns (address);\\n\\n  /**\\n   *  @notice Returns the current poolDeployerAddress\\n   *  @return The address of the poolDeployer\\n   */\\n  function poolDeployer() external view returns (address);\\n\\n  /**\\n   * @dev Is retrieved from the pools to restrict calling\\n   * certain functions not by a tokenomics contract\\n   * @return The tokenomics contract address\\n   */\\n  function farmingAddress() external view returns (address);\\n\\n  function vaultAddress() external view returns (address);\\n\\n  /**\\n   *  @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n   *  @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n   *  @param tokenA The contract address of either token0 or token1\\n   *  @param tokenB The contract address of the other token\\n   *  @return pool The pool address\\n   */\\n  function poolByPair(address tokenA, address tokenB) external view returns (address pool);\\n\\n  /**\\n   *  @notice Creates a pool for the given two tokens and fee\\n   *  @param tokenA One of the two tokens in the desired pool\\n   *  @param tokenB The other of the two tokens in the desired pool\\n   *  @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n   *  from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n   *  are invalid.\\n   *  @return pool The address of the newly created pool\\n   */\\n  function createPool(address tokenA, address tokenB) external returns (address pool);\\n\\n  /**\\n   *  @notice Updates the owner of the factory\\n   *  @dev Must be called by the current owner\\n   *  @param _owner The new owner of the factory\\n   */\\n  function setOwner(address _owner) external;\\n\\n  /**\\n   * @dev updates tokenomics address on the factory\\n   * @param _farmingAddress The new tokenomics contract address\\n   */\\n  function setFarmingAddress(address _farmingAddress) external;\\n\\n  /**\\n   * @dev updates vault address on the factory\\n   * @param _vaultAddress The new vault contract address\\n   */\\n  function setVaultAddress(address _vaultAddress) external;\\n\\n  /**\\n   * @notice Changes initial fee configuration for new pools\\n   * @dev changes coefficients for sigmoids: \u03b1 / (1 + e^( (\u03b2-x) / \u03b3))\\n   * alpha1 + alpha2 + baseFee (max possible fee) must be <= type(uint16).max\\n   * gammas must be > 0\\n   * @param alpha1 max value of the first sigmoid\\n   * @param alpha2 max value of the second sigmoid\\n   * @param beta1 shift along the x-axis for the first sigmoid\\n   * @param beta2 shift along the x-axis for the second sigmoid\\n   * @param gamma1 horizontal stretch factor for the first sigmoid\\n   * @param gamma2 horizontal stretch factor for the second sigmoid\\n   * @param volumeBeta shift along the x-axis for the outer volume-sigmoid\\n   * @param volumeGamma horizontal stretch factor the outer volume-sigmoid\\n   * @param baseFee minimum possible fee\\n   */\\n  function setBaseFeeConfiguration(\\n    uint16 alpha1,\\n    uint16 alpha2,\\n    uint32 beta1,\\n    uint32 beta2,\\n    uint16 gamma1,\\n    uint16 gamma2,\\n    uint32 volumeBeta,\\n    uint16 volumeGamma,\\n    uint16 baseFee\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDataStorageOperator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\npragma abicoder v2;\\n\\nimport '../libraries/AdaptiveFee.sol';\\n\\ninterface IDataStorageOperator {\\n  event FeeConfiguration(AdaptiveFee.Configuration feeConfig);\\n\\n  /**\\n   * @notice Returns data belonging to a certain timepoint\\n   * @param index The index of timepoint in the array\\n   * @dev There is more convenient function to fetch a timepoint: getTimepoints(). Which requires not an index but seconds\\n   * @return initialized Whether the timepoint has been initialized and the values are safe to use,\\n   * blockTimestamp The timestamp of the observation,\\n   * tickCumulative The tick multiplied by seconds elapsed for the life of the pool as of the timepoint timestamp,\\n   * secondsPerLiquidityCumulative The seconds per in range liquidity for the life of the pool as of the timepoint timestamp,\\n   * volatilityCumulative Cumulative standard deviation for the life of the pool as of the timepoint timestamp,\\n   * averageTick Time-weighted average tick,\\n   * volumePerLiquidityCumulative Cumulative swap volume per liquidity for the life of the pool as of the timepoint timestamp\\n   */\\n  function timepoints(uint256 index)\\n    external\\n    view\\n    returns (\\n      bool initialized,\\n      uint32 blockTimestamp,\\n      int56 tickCumulative,\\n      uint160 secondsPerLiquidityCumulative,\\n      uint88 volatilityCumulative,\\n      int24 averageTick,\\n      uint144 volumePerLiquidityCumulative\\n    );\\n\\n  /// @notice Initialize the dataStorage array by writing the first slot. Called once for the lifecycle of the timepoints array\\n  /// @param time The time of the dataStorage initialization, via block.timestamp truncated to uint32\\n  /// @param tick Initial tick\\n  function initialize(uint32 time, int24 tick) external;\\n\\n  /// @dev Reverts if an timepoint at or before the desired timepoint timestamp does not exist.\\n  /// 0 may be passed as `secondsAgo' to return the current cumulative values.\\n  /// If called with a timestamp falling between two timepoints, returns the counterfactual accumulator values\\n  /// at exactly the timestamp between the two timepoints.\\n  /// @param time The current block timestamp\\n  /// @param secondsAgo The amount of time to look back, in seconds, at which point to return an timepoint\\n  /// @param tick The current tick\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\n  /// @param liquidity The current in-range pool liquidity\\n  /// @return tickCumulative The cumulative tick since the pool was first initialized, as of `secondsAgo`\\n  /// @return secondsPerLiquidityCumulative The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of `secondsAgo`\\n  /// @return volatilityCumulative The cumulative volatility value since the pool was first initialized, as of `secondsAgo`\\n  /// @return volumePerAvgLiquidity The cumulative volume per liquidity value since the pool was first initialized, as of `secondsAgo`\\n  function getSingleTimepoint(\\n    uint32 time,\\n    uint32 secondsAgo,\\n    int24 tick,\\n    uint16 index,\\n    uint128 liquidity\\n  )\\n    external\\n    view\\n    returns (\\n      int56 tickCumulative,\\n      uint160 secondsPerLiquidityCumulative,\\n      uint112 volatilityCumulative,\\n      uint256 volumePerAvgLiquidity\\n    );\\n\\n  /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\\n  /// @dev Reverts if `secondsAgos` > oldest timepoint\\n  /// @param time The current block.timestamp\\n  /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return an timepoint\\n  /// @param tick The current tick\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\n  /// @param liquidity The current in-range pool liquidity\\n  /// @return tickCumulatives The cumulative tick since the pool was first initialized, as of each `secondsAgo`\\n  /// @return secondsPerLiquidityCumulatives The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of each `secondsAgo`\\n  /// @return volatilityCumulatives The cumulative volatility values since the pool was first initialized, as of each `secondsAgo`\\n  /// @return volumePerAvgLiquiditys The cumulative volume per liquidity values since the pool was first initialized, as of each `secondsAgo`\\n  function getTimepoints(\\n    uint32 time,\\n    uint32[] memory secondsAgos,\\n    int24 tick,\\n    uint16 index,\\n    uint128 liquidity\\n  )\\n    external\\n    view\\n    returns (\\n      int56[] memory tickCumulatives,\\n      uint160[] memory secondsPerLiquidityCumulatives,\\n      uint112[] memory volatilityCumulatives,\\n      uint256[] memory volumePerAvgLiquiditys\\n    );\\n\\n  /// @notice Returns average volatility in the range from time-WINDOW to time\\n  /// @param time The current block.timestamp\\n  /// @param tick The current tick\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\n  /// @param liquidity The current in-range pool liquidity\\n  /// @return TWVolatilityAverage The average volatility in the recent range\\n  /// @return TWVolumePerLiqAverage The average volume per liquidity in the recent range\\n  function getAverages(\\n    uint32 time,\\n    int24 tick,\\n    uint16 index,\\n    uint128 liquidity\\n  ) external view returns (uint112 TWVolatilityAverage, uint256 TWVolumePerLiqAverage);\\n\\n  /// @notice Writes an dataStorage timepoint to the array\\n  /// @dev Writable at most once per block. Index represents the most recently written element. index must be tracked externally.\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\n  /// @param blockTimestamp The timestamp of the new timepoint\\n  /// @param tick The active tick at the time of the new timepoint\\n  /// @param liquidity The total in-range liquidity at the time of the new timepoint\\n  /// @param volumePerLiquidity The gmean(volumes)/liquidity at the time of the new timepoint\\n  /// @return indexUpdated The new index of the most recently written element in the dataStorage array\\n  function write(\\n    uint16 index,\\n    uint32 blockTimestamp,\\n    int24 tick,\\n    uint128 liquidity,\\n    uint128 volumePerLiquidity\\n  ) external returns (uint16 indexUpdated);\\n\\n  /// @notice Changes fee configuration for the pool\\n  function changeFeeConfiguration(AdaptiveFee.Configuration calldata feeConfig) external;\\n\\n  /// @notice Calculates gmean(volume/liquidity) for block\\n  /// @param liquidity The current in-range pool liquidity\\n  /// @param amount0 Total amount of swapped token0\\n  /// @param amount1 Total amount of swapped token1\\n  /// @return volumePerLiquidity gmean(volume/liquidity) capped by 100000 << 64\\n  function calculateVolumePerLiquidity(\\n    uint128 liquidity,\\n    int256 amount0,\\n    int256 amount1\\n  ) external pure returns (uint128 volumePerLiquidity);\\n\\n  /// @return windowLength Length of window used to calculate averages\\n  function window() external view returns (uint32 windowLength);\\n\\n  /// @notice Calculates fee based on combination of sigmoids\\n  /// @param time The current block.timestamp\\n  /// @param tick The current tick\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\n  /// @param liquidity The current in-range pool liquidity\\n  /// @return fee The fee in hundredths of a bip, i.e. 1e-6\\n  function getFee(\\n    uint32 time,\\n    int24 tick,\\n    uint16 index,\\n    uint128 liquidity\\n  ) external view returns (uint16 fee);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/AdaptiveFee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.7.6;\\n\\nimport './Constants.sol';\\n\\n/// @title AdaptiveFee\\n/// @notice Calculates fee based on combination of sigmoids\\nlibrary AdaptiveFee {\\n  // alpha1 + alpha2 + baseFee must be <= type(uint16).max\\n  struct Configuration {\\n    uint16 alpha1; // max value of the first sigmoid\\n    uint16 alpha2; // max value of the second sigmoid\\n    uint32 beta1; // shift along the x-axis for the first sigmoid\\n    uint32 beta2; // shift along the x-axis for the second sigmoid\\n    uint16 gamma1; // horizontal stretch factor for the first sigmoid\\n    uint16 gamma2; // horizontal stretch factor for the second sigmoid\\n    uint32 volumeBeta; // shift along the x-axis for the outer volume-sigmoid\\n    uint16 volumeGamma; // horizontal stretch factor the outer volume-sigmoid\\n    uint16 baseFee; // minimum possible fee\\n  }\\n\\n  /// @notice Calculates fee based on formula:\\n  /// baseFee + sigmoidVolume(sigmoid1(volatility, volumePerLiquidity) + sigmoid2(volatility, volumePerLiquidity))\\n  /// maximum value capped by baseFee + alpha1 + alpha2\\n  function getFee(\\n    uint88 volatility,\\n    uint256 volumePerLiquidity,\\n    Configuration memory config\\n  ) internal pure returns (uint16 fee) {\\n    uint256 sumOfSigmoids = sigmoid(volatility, config.gamma1, config.alpha1, config.beta1) +\\n      sigmoid(volatility, config.gamma2, config.alpha2, config.beta2);\\n\\n    if (sumOfSigmoids > type(uint16).max) {\\n      // should be impossible, just in case\\n      sumOfSigmoids = type(uint16).max;\\n    }\\n\\n    return uint16(config.baseFee + sigmoid(volumePerLiquidity, config.volumeGamma, uint16(sumOfSigmoids), config.volumeBeta)); // safe since alpha1 + alpha2 + baseFee _must_ be <= type(uint16).max\\n  }\\n\\n  /// @notice calculates \u03b1 / (1 + e^( (\u03b2-x) / \u03b3))\\n  /// that is a sigmoid with a maximum value of \u03b1, x-shifted by \u03b2, and stretched by \u03b3\\n  /// @dev returns uint256 for fuzzy testing. Guaranteed that the result is not greater than alpha\\n  function sigmoid(\\n    uint256 x,\\n    uint16 g,\\n    uint16 alpha,\\n    uint256 beta\\n  ) internal pure returns (uint256 res) {\\n    if (x > beta) {\\n      x = x - beta;\\n      if (x >= 6 * uint256(g)) return alpha; // so x < 19 bits\\n      uint256 g8 = uint256(g)**8; // < 128 bits (8*16)\\n      uint256 ex = exp(x, g, g8); // < 155 bits\\n      res = (alpha * ex) / (g8 + ex); // in worst case: (16 + 155 bits) / 155 bits\\n      // so res <= alpha\\n    } else {\\n      x = beta - x;\\n      if (x >= 6 * uint256(g)) return 0; // so x < 19 bits\\n      uint256 g8 = uint256(g)**8; // < 128 bits (8*16)\\n      uint256 ex = g8 + exp(x, g, g8); // < 156 bits\\n      res = (alpha * g8) / ex; // in worst case: (16 + 128 bits) / 156 bits\\n      // g8 <= ex, so res <= alpha\\n    }\\n  }\\n\\n  /// @notice calculates e^(x/g) * g^8 in a series, since (around zero):\\n  /// e^x = 1 + x + x^2/2 + ... + x^n/n! + ...\\n  /// e^(x/g) = 1 + x/g + x^2/(2*g^2) + ... + x^(n)/(g^n * n!) + ...\\n  function exp(\\n    uint256 x,\\n    uint16 g,\\n    uint256 gHighestDegree\\n  ) internal pure returns (uint256 res) {\\n    // calculating:\\n    // g**8 + x * g**7 + (x**2 * g**6) / 2 + (x**3 * g**5) / 6 + (x**4 * g**4) / 24 + (x**5 * g**3) / 120 + (x**6 * g^2) / 720 + x**7 * g / 5040 + x**8 / 40320\\n\\n    // x**8 < 152 bits (19*8) and g**8 < 128 bits (8*16)\\n    // so each summand < 152 bits and res < 155 bits\\n    uint256 xLowestDegree = x;\\n    res = gHighestDegree; // g**8\\n\\n    gHighestDegree /= g; // g**7\\n    res += xLowestDegree * gHighestDegree;\\n\\n    gHighestDegree /= g; // g**6\\n    xLowestDegree *= x; // x**2\\n    res += (xLowestDegree * gHighestDegree) / 2;\\n\\n    gHighestDegree /= g; // g**5\\n    xLowestDegree *= x; // x**3\\n    res += (xLowestDegree * gHighestDegree) / 6;\\n\\n    gHighestDegree /= g; // g**4\\n    xLowestDegree *= x; // x**4\\n    res += (xLowestDegree * gHighestDegree) / 24;\\n\\n    gHighestDegree /= g; // g**3\\n    xLowestDegree *= x; // x**5\\n    res += (xLowestDegree * gHighestDegree) / 120;\\n\\n    gHighestDegree /= g; // g**2\\n    xLowestDegree *= x; // x**6\\n    res += (xLowestDegree * gHighestDegree) / 720;\\n\\n    xLowestDegree *= x; // x**7\\n    res += (xLowestDegree * g) / 5040 + (xLowestDegree * x) / (40320);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity =0.7.6;\\n\\nlibrary Constants {\\n  uint8 internal constant RESOLUTION = 96;\\n  uint256 internal constant Q96 = 0x1000000000000000000000000;\\n  uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n  // fee value in hundredths of a bip, i.e. 1e-6\\n  uint16 internal constant BASE_FEE = 500;\\n  int24 internal constant TICK_SPACING = 60;\\n\\n  // max(uint128) / ( (MAX_TICK - MIN_TICK) / TICK_SPACING )\\n  uint128 internal constant MAX_LIQUIDITY_PER_TICK = 11505743598341114571880798222544994;\\n\\n  uint32 internal constant MAX_LIQUIDITY_COOLDOWN = 1 days;\\n  uint8 internal constant MAX_COMMUNITY_FEE = 250;\\n  uint256 internal constant COMMUNITY_FEE_DENOMINATOR = 1000;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/DataStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.7.6;\\n\\nimport './FullMath.sol';\\n\\n/// @title DataStorage\\n/// @notice Provides price, liquidity, volatility data useful for a wide variety of system designs\\n/// @dev Instances of stored dataStorage data, \\\"timepoints\\\", are collected in the dataStorage array\\n/// Timepoints are overwritten when the full length of the dataStorage array is populated.\\n/// The most recent timepoint is available by passing 0 to getSingleTimepoint()\\nlibrary DataStorage {\\n  uint32 public constant WINDOW = 1 days;\\n  uint256 private constant UINT16_MODULO = 65536;\\n  struct Timepoint {\\n    bool initialized; // whether or not the timepoint is initialized\\n    uint32 blockTimestamp; // the block timestamp of the timepoint\\n    int56 tickCumulative; // the tick accumulator, i.e. tick * time elapsed since the pool was first initialized\\n    uint160 secondsPerLiquidityCumulative; // the seconds per liquidity since the pool was first initialized\\n    uint88 volatilityCumulative; // the volatility accumulator; overflow after ~34800 years is desired :)\\n    int24 averageTick; // average tick at this blockTimestamp\\n    uint144 volumePerLiquidityCumulative; // the gmean(volumes)/liquidity accumulator\\n  }\\n\\n  /// @notice Calculates volatility between two sequential timepoints with resampling to 1 sec frequency\\n  /// @param dt Timedelta between timepoints, must be within uint32 range\\n  /// @param tick0 The tick at the left timepoint, must be within int24 range\\n  /// @param tick1 The tick at the right timepoint, must be within int24 range\\n  /// @param avgTick0 The average tick at the left timepoint, must be within int24 range\\n  /// @param avgTick1 The average tick at the right timepoint, must be within int24 range\\n  /// @return volatility The volatility between two sequential timepoints\\n  /// If the requirements for the parameters are met, it always fits 88 bits\\n  function _volatilityOnRange(\\n    int256 dt,\\n    int256 tick0,\\n    int256 tick1,\\n    int256 avgTick0,\\n    int256 avgTick1\\n  ) internal pure returns (uint256 volatility) {\\n    // On the time interval from the previous timepoint to the current\\n    // we can represent tick and average tick change as two straight lines:\\n    // tick = k*t + b, where k and b are some constants\\n    // avgTick = p*t + q, where p and q are some constants\\n    // we want to get sum of (tick(t) - avgTick(t))^2 for every t in the interval (0; dt]\\n    // so: (tick(t) - avgTick(t))^2 = ((k*t + b) - (p*t + q))^2 = (k-p)^2 * t^2 + 2(k-p)(b-q)t + (b-q)^2\\n    // since everything except t is a constant, we need to use progressions for t and t^2:\\n    // sum(t) for t from 1 to dt = dt*(dt + 1)/2 = sumOfSequence\\n    // sum(t^2) for t from 1 to dt = dt*(dt+1)*(2dt + 1)/6 = sumOfSquares\\n    // so result will be: (k-p)^2 * sumOfSquares + 2(k-p)(b-q)*sumOfSequence + dt*(b-q)^2\\n    int256 K = (tick1 - tick0) - (avgTick1 - avgTick0); // (k - p)*dt\\n    int256 B = (tick0 - avgTick0) * dt; // (b - q)*dt\\n    int256 sumOfSquares = (dt * (dt + 1) * (2 * dt + 1)); // sumOfSquares * 6\\n    int256 sumOfSequence = (dt * (dt + 1)); // sumOfSequence * 2\\n    volatility = uint256((K**2 * sumOfSquares + 6 * B * K * sumOfSequence + 6 * dt * B**2) / (6 * dt**2));\\n  }\\n\\n  /// @notice Transforms a previous timepoint into a new timepoint, given the passage of time and the current tick and liquidity values\\n  /// @dev blockTimestamp _must_ be chronologically equal to or greater than last.blockTimestamp, safe for 0 or 1 overflows\\n  /// @param last The specified timepoint to be used in creation of new timepoint\\n  /// @param blockTimestamp The timestamp of the new timepoint\\n  /// @param tick The active tick at the time of the new timepoint\\n  /// @param prevTick The active tick at the time of the last timepoint\\n  /// @param liquidity The total in-range liquidity at the time of the new timepoint\\n  /// @param averageTick The average tick at the time of the new timepoint\\n  /// @param volumePerLiquidity The gmean(volumes)/liquidity at the time of the new timepoint\\n  /// @return Timepoint The newly populated timepoint\\n  function createNewTimepoint(\\n    Timepoint memory last,\\n    uint32 blockTimestamp,\\n    int24 tick,\\n    int24 prevTick,\\n    uint128 liquidity,\\n    int24 averageTick,\\n    uint128 volumePerLiquidity\\n  ) private pure returns (Timepoint memory) {\\n    uint32 delta = blockTimestamp - last.blockTimestamp;\\n\\n    last.initialized = true;\\n    last.blockTimestamp = blockTimestamp;\\n    last.tickCumulative += int56(tick) * delta;\\n    last.secondsPerLiquidityCumulative += ((uint160(delta) << 128) / (liquidity > 0 ? liquidity : 1)); // just timedelta if liquidity == 0\\n    last.volatilityCumulative += uint88(_volatilityOnRange(delta, prevTick, tick, last.averageTick, averageTick)); // always fits 88 bits\\n    last.averageTick = averageTick;\\n    last.volumePerLiquidityCumulative += volumePerLiquidity;\\n\\n    return last;\\n  }\\n\\n  /// @notice comparator for 32-bit timestamps\\n  /// @dev safe for 0 or 1 overflows, a and b _must_ be chronologically before or equal to currentTime\\n  /// @param a A comparison timestamp from which to determine the relative position of `currentTime`\\n  /// @param b From which to determine the relative position of `currentTime`\\n  /// @param currentTime A timestamp truncated to 32 bits\\n  /// @return res Whether `a` is chronologically <= `b`\\n  function lteConsideringOverflow(\\n    uint32 a,\\n    uint32 b,\\n    uint32 currentTime\\n  ) private pure returns (bool res) {\\n    res = a > currentTime;\\n    if (res == b > currentTime) res = a <= b; // if both are on the same side\\n  }\\n\\n  /// @dev guaranteed that the result is within the bounds of int24\\n  /// returns int256 for fuzzy tests\\n  function _getAverageTick(\\n    Timepoint[UINT16_MODULO] storage self,\\n    uint32 time,\\n    int24 tick,\\n    uint16 index,\\n    uint16 oldestIndex,\\n    uint32 lastTimestamp,\\n    int56 lastTickCumulative\\n  ) internal view returns (int256 avgTick) {\\n    uint32 oldestTimestamp = self[oldestIndex].blockTimestamp;\\n    int56 oldestTickCumulative = self[oldestIndex].tickCumulative;\\n\\n    if (lteConsideringOverflow(oldestTimestamp, time - WINDOW, time)) {\\n      if (lteConsideringOverflow(lastTimestamp, time - WINDOW, time)) {\\n        index -= 1; // considering underflow\\n        Timepoint storage startTimepoint = self[index];\\n        avgTick = startTimepoint.initialized\\n          ? (lastTickCumulative - startTimepoint.tickCumulative) / (lastTimestamp - startTimepoint.blockTimestamp)\\n          : tick;\\n      } else {\\n        Timepoint memory startOfWindow = getSingleTimepoint(self, time, WINDOW, tick, index, oldestIndex, 0);\\n\\n        //    current-WINDOW  last   current\\n        // _________*____________*_______*_\\n        //           ||||||||||||\\n        avgTick = (lastTickCumulative - startOfWindow.tickCumulative) / (lastTimestamp - time + WINDOW);\\n      }\\n    } else {\\n      avgTick = (lastTimestamp == oldestTimestamp) ? tick : (lastTickCumulative - oldestTickCumulative) / (lastTimestamp - oldestTimestamp);\\n    }\\n  }\\n\\n  /// @notice Fetches the timepoints beforeOrAt and atOrAfter a target, i.e. where [beforeOrAt, atOrAfter] is satisfied.\\n  /// The result may be the same timepoint, or adjacent timepoints.\\n  /// @dev The answer must be contained in the array, used when the target is located within the stored timepoint\\n  /// boundaries: older than the most recent timepoint and younger, or the same age as, the oldest timepoint\\n  /// @param self The stored dataStorage array\\n  /// @param time The current block.timestamp\\n  /// @param target The timestamp at which the reserved timepoint should be for\\n  /// @param lastIndex The index of the timepoint that was most recently written to the timepoints array\\n  /// @param oldestIndex The index of the oldest timepoint in the timepoints array\\n  /// @return beforeOrAt The timepoint recorded before, or at, the target\\n  /// @return atOrAfter The timepoint recorded at, or after, the target\\n  function binarySearch(\\n    Timepoint[UINT16_MODULO] storage self,\\n    uint32 time,\\n    uint32 target,\\n    uint16 lastIndex,\\n    uint16 oldestIndex\\n  ) private view returns (Timepoint storage beforeOrAt, Timepoint storage atOrAfter) {\\n    uint256 left = oldestIndex; // oldest timepoint\\n    uint256 right = lastIndex >= oldestIndex ? lastIndex : lastIndex + UINT16_MODULO; // newest timepoint considering one index overflow\\n    uint256 current = (left + right) >> 1; // \\\"middle\\\" point between the boundaries\\n\\n    do {\\n      beforeOrAt = self[uint16(current)]; // checking the \\\"middle\\\" point between the boundaries\\n      (bool initializedBefore, uint32 timestampBefore) = (beforeOrAt.initialized, beforeOrAt.blockTimestamp);\\n      if (initializedBefore) {\\n        if (lteConsideringOverflow(timestampBefore, target, time)) {\\n          // is current point before or at `target`?\\n          atOrAfter = self[uint16(current + 1)]; // checking the next point after \\\"middle\\\"\\n          (bool initializedAfter, uint32 timestampAfter) = (atOrAfter.initialized, atOrAfter.blockTimestamp);\\n          if (initializedAfter) {\\n            if (lteConsideringOverflow(target, timestampAfter, time)) {\\n              // is the \\\"next\\\" point after or at `target`?\\n              return (beforeOrAt, atOrAfter); // the only fully correct way to finish\\n            }\\n            left = current + 1; // \\\"next\\\" point is before the `target`, so looking in the right half\\n          } else {\\n            // beforeOrAt is initialized and <= target, and next timepoint is uninitialized\\n            // should be impossible if initial boundaries and `target` are correct\\n            return (beforeOrAt, beforeOrAt);\\n          }\\n        } else {\\n          right = current - 1; // current point is after the `target`, so looking in the left half\\n        }\\n      } else {\\n        // we've landed on an uninitialized timepoint, keep searching higher\\n        // should be impossible if initial boundaries and `target` are correct\\n        left = current + 1;\\n      }\\n      current = (left + right) >> 1; // calculating the new \\\"middle\\\" point index after updating the bounds\\n    } while (true);\\n\\n    atOrAfter = beforeOrAt; // code is unreachable, to suppress compiler warning\\n    assert(false);\\n  }\\n\\n  /// @dev Reverts if an timepoint at or before the desired timepoint timestamp does not exist.\\n  /// 0 may be passed as `secondsAgo' to return the current cumulative values.\\n  /// If called with a timestamp falling between two timepoints, returns the counterfactual accumulator values\\n  /// at exactly the timestamp between the two timepoints.\\n  /// @param self The stored dataStorage array\\n  /// @param time The current block timestamp\\n  /// @param secondsAgo The amount of time to look back, in seconds, at which point to return an timepoint\\n  /// @param tick The current tick\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\n  /// @param oldestIndex The index of the oldest timepoint\\n  /// @param liquidity The current in-range pool liquidity\\n  /// @return targetTimepoint desired timepoint or it's approximation\\n  function getSingleTimepoint(\\n    Timepoint[UINT16_MODULO] storage self,\\n    uint32 time,\\n    uint32 secondsAgo,\\n    int24 tick,\\n    uint16 index,\\n    uint16 oldestIndex,\\n    uint128 liquidity\\n  ) internal view returns (Timepoint memory targetTimepoint) {\\n    uint32 target = time - secondsAgo;\\n\\n    // if target is newer than last timepoint\\n    if (secondsAgo == 0 || lteConsideringOverflow(self[index].blockTimestamp, target, time)) {\\n      Timepoint memory last = self[index];\\n      if (last.blockTimestamp == target) {\\n        return last;\\n      } else {\\n        // otherwise, we need to add new timepoint\\n        int24 avgTick = int24(_getAverageTick(self, time, tick, index, oldestIndex, last.blockTimestamp, last.tickCumulative));\\n        int24 prevTick = tick;\\n        {\\n          if (index != oldestIndex) {\\n            Timepoint memory prevLast;\\n            Timepoint storage _prevLast = self[index - 1]; // considering index underflow\\n            prevLast.blockTimestamp = _prevLast.blockTimestamp;\\n            prevLast.tickCumulative = _prevLast.tickCumulative;\\n            prevTick = int24((last.tickCumulative - prevLast.tickCumulative) / (last.blockTimestamp - prevLast.blockTimestamp));\\n          }\\n        }\\n        return createNewTimepoint(last, target, tick, prevTick, liquidity, avgTick, 0);\\n      }\\n    }\\n\\n    require(lteConsideringOverflow(self[oldestIndex].blockTimestamp, target, time), 'OLD');\\n    (Timepoint memory beforeOrAt, Timepoint memory atOrAfter) = binarySearch(self, time, target, index, oldestIndex);\\n\\n    if (target == atOrAfter.blockTimestamp) {\\n      return atOrAfter; // we're at the right boundary\\n    }\\n\\n    if (target != beforeOrAt.blockTimestamp) {\\n      // we're in the middle\\n      uint32 timepointTimeDelta = atOrAfter.blockTimestamp - beforeOrAt.blockTimestamp;\\n      uint32 targetDelta = target - beforeOrAt.blockTimestamp;\\n\\n      // For gas savings the resulting point is written to beforeAt\\n      beforeOrAt.tickCumulative += ((atOrAfter.tickCumulative - beforeOrAt.tickCumulative) / timepointTimeDelta) * targetDelta;\\n      beforeOrAt.secondsPerLiquidityCumulative += uint160(\\n        (uint256(atOrAfter.secondsPerLiquidityCumulative - beforeOrAt.secondsPerLiquidityCumulative) * targetDelta) / timepointTimeDelta\\n      );\\n      beforeOrAt.volatilityCumulative += ((atOrAfter.volatilityCumulative - beforeOrAt.volatilityCumulative) / timepointTimeDelta) * targetDelta;\\n      beforeOrAt.volumePerLiquidityCumulative +=\\n        ((atOrAfter.volumePerLiquidityCumulative - beforeOrAt.volumePerLiquidityCumulative) / timepointTimeDelta) *\\n        targetDelta;\\n    }\\n\\n    // we're at the left boundary or at the middle\\n    return beforeOrAt;\\n  }\\n\\n  /// @notice Returns the accumulator values as of each time seconds ago from the given time in the array of `secondsAgos`\\n  /// @dev Reverts if `secondsAgos` > oldest timepoint\\n  /// @param self The stored dataStorage array\\n  /// @param time The current block.timestamp\\n  /// @param secondsAgos Each amount of time to look back, in seconds, at which point to return an timepoint\\n  /// @param tick The current tick\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\n  /// @param liquidity The current in-range pool liquidity\\n  /// @return tickCumulatives The tick * time elapsed since the pool was first initialized, as of each `secondsAgo`\\n  /// @return secondsPerLiquidityCumulatives The cumulative seconds / max(1, liquidity) since the pool was first initialized, as of each `secondsAgo`\\n  /// @return volatilityCumulatives The cumulative volatility values since the pool was first initialized, as of each `secondsAgo`\\n  /// @return volumePerAvgLiquiditys The cumulative volume per liquidity values since the pool was first initialized, as of each `secondsAgo`\\n  function getTimepoints(\\n    Timepoint[UINT16_MODULO] storage self,\\n    uint32 time,\\n    uint32[] memory secondsAgos,\\n    int24 tick,\\n    uint16 index,\\n    uint128 liquidity\\n  )\\n    internal\\n    view\\n    returns (\\n      int56[] memory tickCumulatives,\\n      uint160[] memory secondsPerLiquidityCumulatives,\\n      uint112[] memory volatilityCumulatives,\\n      uint256[] memory volumePerAvgLiquiditys\\n    )\\n  {\\n    tickCumulatives = new int56[](secondsAgos.length);\\n    secondsPerLiquidityCumulatives = new uint160[](secondsAgos.length);\\n    volatilityCumulatives = new uint112[](secondsAgos.length);\\n    volumePerAvgLiquiditys = new uint256[](secondsAgos.length);\\n\\n    uint16 oldestIndex;\\n    // check if we have overflow in the past\\n    uint16 nextIndex = index + 1; // considering overflow\\n    if (self[nextIndex].initialized) {\\n      oldestIndex = nextIndex;\\n    }\\n\\n    Timepoint memory current;\\n    for (uint256 i = 0; i < secondsAgos.length; i++) {\\n      current = getSingleTimepoint(self, time, secondsAgos[i], tick, index, oldestIndex, liquidity);\\n      (tickCumulatives[i], secondsPerLiquidityCumulatives[i], volatilityCumulatives[i], volumePerAvgLiquiditys[i]) = (\\n        current.tickCumulative,\\n        current.secondsPerLiquidityCumulative,\\n        current.volatilityCumulative,\\n        current.volumePerLiquidityCumulative\\n      );\\n    }\\n  }\\n\\n  /// @notice Returns average volatility in the range from time-WINDOW to time\\n  /// @param self The stored dataStorage array\\n  /// @param time The current block.timestamp\\n  /// @param tick The current tick\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\n  /// @param liquidity The current in-range pool liquidity\\n  /// @return volatilityAverage The average volatility in the recent range\\n  /// @return volumePerLiqAverage The average volume per liquidity in the recent range\\n  function getAverages(\\n    Timepoint[UINT16_MODULO] storage self,\\n    uint32 time,\\n    int24 tick,\\n    uint16 index,\\n    uint128 liquidity\\n  ) internal view returns (uint88 volatilityAverage, uint256 volumePerLiqAverage) {\\n    uint16 oldestIndex;\\n    Timepoint storage oldest = self[0];\\n    uint16 nextIndex = index + 1; // considering overflow\\n    if (self[nextIndex].initialized) {\\n      oldest = self[nextIndex];\\n      oldestIndex = nextIndex;\\n    }\\n\\n    Timepoint memory endOfWindow = getSingleTimepoint(self, time, 0, tick, index, oldestIndex, liquidity);\\n\\n    uint32 oldestTimestamp = oldest.blockTimestamp;\\n    if (lteConsideringOverflow(oldestTimestamp, time - WINDOW, time)) {\\n      Timepoint memory startOfWindow = getSingleTimepoint(self, time, WINDOW, tick, index, oldestIndex, liquidity);\\n      return (\\n        (endOfWindow.volatilityCumulative - startOfWindow.volatilityCumulative) / WINDOW,\\n        uint256(endOfWindow.volumePerLiquidityCumulative - startOfWindow.volumePerLiquidityCumulative) >> 57\\n      );\\n    } else if (time != oldestTimestamp) {\\n      uint88 _oldestVolatilityCumulative = oldest.volatilityCumulative;\\n      uint144 _oldestVolumePerLiquidityCumulative = oldest.volumePerLiquidityCumulative;\\n      return (\\n        (endOfWindow.volatilityCumulative - _oldestVolatilityCumulative) / (time - oldestTimestamp),\\n        uint256(endOfWindow.volumePerLiquidityCumulative - _oldestVolumePerLiquidityCumulative) >> 57\\n      );\\n    }\\n  }\\n\\n  /// @notice Initialize the dataStorage array by writing the first slot. Called once for the lifecycle of the timepoints array\\n  /// @param self The stored dataStorage array\\n  /// @param time The time of the dataStorage initialization, via block.timestamp truncated to uint32\\n  /// @param tick Initial tick\\n  function initialize(\\n    Timepoint[UINT16_MODULO] storage self,\\n    uint32 time,\\n    int24 tick\\n  ) internal {\\n    require(!self[0].initialized);\\n    self[0].initialized = true;\\n    self[0].blockTimestamp = time;\\n    self[0].averageTick = tick;\\n  }\\n\\n  /// @notice Writes an dataStorage timepoint to the array\\n  /// @dev Writable at most once per block. Index represents the most recently written element. index must be tracked externally.\\n  /// @param self The stored dataStorage array\\n  /// @param index The index of the timepoint that was most recently written to the timepoints array\\n  /// @param blockTimestamp The timestamp of the new timepoint\\n  /// @param tick The active tick at the time of the new timepoint\\n  /// @param liquidity The total in-range liquidity at the time of the new timepoint\\n  /// @param volumePerLiquidity The gmean(volumes)/liquidity at the time of the new timepoint\\n  /// @return indexUpdated The new index of the most recently written element in the dataStorage array\\n  function write(\\n    Timepoint[UINT16_MODULO] storage self,\\n    uint16 index,\\n    uint32 blockTimestamp,\\n    int24 tick,\\n    uint128 liquidity,\\n    uint128 volumePerLiquidity\\n  ) internal returns (uint16 indexUpdated) {\\n    Timepoint storage _last = self[index];\\n    // early return if we've already written an timepoint this block\\n    if (_last.blockTimestamp == blockTimestamp) {\\n      return index;\\n    }\\n    Timepoint memory last = _last;\\n\\n    // get next index considering overflow\\n    indexUpdated = index + 1;\\n\\n    uint16 oldestIndex;\\n    // check if we have overflow in the past\\n    if (self[indexUpdated].initialized) {\\n      oldestIndex = indexUpdated;\\n    }\\n\\n    int24 avgTick = int24(_getAverageTick(self, blockTimestamp, tick, index, oldestIndex, last.blockTimestamp, last.tickCumulative));\\n    int24 prevTick = tick;\\n    if (index != oldestIndex) {\\n      Timepoint storage _prevLast = self[index - 1]; // considering index underflow\\n      uint32 _prevLastBlockTimestamp = _prevLast.blockTimestamp;\\n      int56 _prevLastTickCumulative = _prevLast.tickCumulative;\\n      prevTick = int24((last.tickCumulative - _prevLastTickCumulative) / (last.blockTimestamp - _prevLastBlockTimestamp));\\n    }\\n\\n    self[indexUpdated] = createNewTimepoint(last, blockTimestamp, tick, prevTick, liquidity, avgTick, volumePerLiquidity);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.4.0 || ^0.5.0 || ^0.6.0 || ^0.7.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n  /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n  /// @param a The multiplicand\\n  /// @param b The multiplier\\n  /// @param denominator The divisor\\n  /// @return result The 256-bit result\\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n  function mulDiv(\\n    uint256 a,\\n    uint256 b,\\n    uint256 denominator\\n  ) internal pure returns (uint256 result) {\\n    // 512-bit multiply [prod1 prod0] = a * b\\n    // Compute the product mod 2**256 and mod 2**256 - 1\\n    // then use the Chinese Remainder Theorem to reconstruct\\n    // the 512 bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2**256 + prod0\\n    uint256 prod0 = a * b; // Least significant 256 bits of the product\\n    uint256 prod1; // Most significant 256 bits of the product\\n    assembly {\\n      let mm := mulmod(a, b, not(0))\\n      prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    // Make sure the result is less than 2**256.\\n    // Also prevents denominator == 0\\n    require(denominator > prod1);\\n\\n    // Handle non-overflow cases, 256 by 256 division\\n    if (prod1 == 0) {\\n      assembly {\\n        result := div(prod0, denominator)\\n      }\\n      return result;\\n    }\\n\\n    ///////////////////////////////////////////////\\n    // 512 by 256 division.\\n    ///////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0]\\n    // Compute remainder using mulmod\\n    // Subtract 256 bit remainder from 512 bit number\\n    assembly {\\n      let remainder := mulmod(a, b, denominator)\\n      prod1 := sub(prod1, gt(remainder, prod0))\\n      prod0 := sub(prod0, remainder)\\n    }\\n\\n    // Factor powers of two out of denominator\\n    // Compute largest power of two divisor of denominator.\\n    // Always >= 1.\\n    uint256 twos = -denominator & denominator;\\n    // Divide denominator by power of two\\n    assembly {\\n      denominator := div(denominator, twos)\\n    }\\n\\n    // Divide [prod1 prod0] by the factors of two\\n    assembly {\\n      prod0 := div(prod0, twos)\\n    }\\n    // Shift in bits from prod1 into prod0. For this we need\\n    // to flip `twos` such that it is 2**256 / twos.\\n    // If twos is zero, then it becomes one\\n    assembly {\\n      twos := add(div(sub(0, twos), twos), 1)\\n    }\\n    prod0 |= prod1 * twos;\\n\\n    // Invert denominator mod 2**256\\n    // Now that denominator is an odd number, it has an inverse\\n    // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n    // Compute the inverse by starting with a seed that is correct\\n    // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n    uint256 inv = (3 * denominator) ^ 2;\\n    // Now use Newton-Raphson iteration to improve the precision.\\n    // Thanks to Hensel's lifting lemma, this also works in modular\\n    // arithmetic, doubling the correct bits in each step.\\n    inv *= 2 - denominator * inv; // inverse mod 2**8\\n    inv *= 2 - denominator * inv; // inverse mod 2**16\\n    inv *= 2 - denominator * inv; // inverse mod 2**32\\n    inv *= 2 - denominator * inv; // inverse mod 2**64\\n    inv *= 2 - denominator * inv; // inverse mod 2**128\\n    inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n    // Because the division is now exact we can divide by multiplying\\n    // with the modular inverse of denominator. This will give us the\\n    // correct result modulo 2**256. Since the preconditions guarantee\\n    // that the outcome is less than 2**256, this is the final result.\\n    // We don't need to compute the high bits of the result and prod1\\n    // is no longer required.\\n    result = prod0 * inv;\\n    return result;\\n  }\\n\\n  /// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n  /// @param a The multiplicand\\n  /// @param b The multiplier\\n  /// @param denominator The divisor\\n  /// @return result The 256-bit result\\n  function mulDivRoundingUp(\\n    uint256 a,\\n    uint256 b,\\n    uint256 denominator\\n  ) internal pure returns (uint256 result) {\\n    if (a == 0 || ((result = a * b) / a == b)) {\\n      require(denominator > 0);\\n      assembly {\\n        result := add(div(result, denominator), gt(mod(result, denominator), 0))\\n      }\\n    } else {\\n      result = mulDiv(a, b, denominator);\\n      if (mulmod(a, b, denominator) > 0) {\\n        require(result < type(uint256).max);\\n        result++;\\n      }\\n    }\\n  }\\n\\n  /// @notice Returns ceil(x / y)\\n  /// @dev division by 0 has unspecified behavior, and must be checked externally\\n  /// @param x The dividend\\n  /// @param y The divisor\\n  /// @return z The quotient, ceil(x / y)\\n  function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n    assembly {\\n      z := add(div(x, y), gt(mod(x, y), 0))\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Sqrt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.5.0 || ^0.6.0 || ^0.7.0 || ^0.8.0;\\n\\nlibrary Sqrt {\\n  /// @notice Gets the square root of the absolute value of the parameter\\n  function sqrtAbs(int256 _x) internal pure returns (uint256 result) {\\n    // get abs value\\n    int256 mask = _x >> (256 - 1);\\n    uint256 x = uint256((_x ^ mask) - mask);\\n    if (x == 0) result = 0;\\n    else {\\n      uint256 xx = x;\\n      uint256 r = 1;\\n      if (xx >= 0x100000000000000000000000000000000) {\\n        xx >>= 128;\\n        r <<= 64;\\n      }\\n      if (xx >= 0x10000000000000000) {\\n        xx >>= 64;\\n        r <<= 32;\\n      }\\n      if (xx >= 0x100000000) {\\n        xx >>= 32;\\n        r <<= 16;\\n      }\\n      if (xx >= 0x10000) {\\n        xx >>= 16;\\n        r <<= 8;\\n      }\\n      if (xx >= 0x100) {\\n        xx >>= 8;\\n        r <<= 4;\\n      }\\n      if (xx >= 0x10) {\\n        xx >>= 4;\\n        r <<= 2;\\n      }\\n      if (xx >= 0x8) {\\n        r <<= 1;\\n      }\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1; // @dev Seven iterations should be enough.\\n      uint256 r1 = x / r;\\n      result = r < r1 ? r : r1;\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 0\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"alpha1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"alpha2\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"beta1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"beta2\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"gamma1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"gamma2\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"volumeBeta\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"volumeGamma\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"baseFee\",\"type\":\"uint16\"}],\"indexed\":false,\"internalType\":\"struct AdaptiveFee.Configuration\",\"name\":\"feeConfig\",\"type\":\"tuple\"}],\"name\":\"FeeConfiguration\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"name\":\"calculateVolumePerLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"volumePerLiquidity\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"alpha1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"alpha2\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"beta1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"beta2\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"gamma1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"gamma2\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"volumeBeta\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"volumeGamma\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"baseFee\",\"type\":\"uint16\"}],\"internalType\":\"struct AdaptiveFee.Configuration\",\"name\":\"_feeConfig\",\"type\":\"tuple\"}],\"name\":\"changeFeeConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"alpha1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"alpha2\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"beta1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"beta2\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"gamma1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"gamma2\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"volumeBeta\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"volumeGamma\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"baseFee\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"time\",\"type\":\"uint32\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"name\":\"getAverages\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"TWVolatilityAverage\",\"type\":\"uint112\"},{\"internalType\":\"uint256\",\"name\":\"TWVolumePerLiqAverage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_time\",\"type\":\"uint32\"},{\"internalType\":\"int24\",\"name\":\"_tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"_index\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"_liquidity\",\"type\":\"uint128\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"time\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"secondsAgo\",\"type\":\"uint32\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"name\":\"getSingleTimepoint\",\"outputs\":[{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulative\",\"type\":\"uint160\"},{\"internalType\":\"uint112\",\"name\":\"volatilityCumulative\",\"type\":\"uint112\"},{\"internalType\":\"uint256\",\"name\":\"volumePerAvgLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"time\",\"type\":\"uint32\"},{\"internalType\":\"uint32[]\",\"name\":\"secondsAgos\",\"type\":\"uint32[]\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"name\":\"getTimepoints\",\"outputs\":[{\"internalType\":\"int56[]\",\"name\":\"tickCumulatives\",\"type\":\"int56[]\"},{\"internalType\":\"uint160[]\",\"name\":\"secondsPerLiquidityCumulatives\",\"type\":\"uint160[]\"},{\"internalType\":\"uint112[]\",\"name\":\"volatilityCumulatives\",\"type\":\"uint112[]\"},{\"internalType\":\"uint256[]\",\"name\":\"volumePerAvgLiquiditys\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"time\",\"type\":\"uint32\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timepoints\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int56\",\"name\":\"tickCumulative\",\"type\":\"int56\"},{\"internalType\":\"uint160\",\"name\":\"secondsPerLiquidityCumulative\",\"type\":\"uint160\"},{\"internalType\":\"uint88\",\"name\":\"volatilityCumulative\",\"type\":\"uint88\"},{\"internalType\":\"int24\",\"name\":\"averageTick\",\"type\":\"int24\"},{\"internalType\":\"uint144\",\"name\":\"volumePerLiquidityCumulative\",\"type\":\"uint144\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"window\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"volumePerLiquidity\",\"type\":\"uint128\"}],\"name\":\"write\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"indexUpdated\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DataStorageOperator", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "0", "ConstructorArguments": "000000000000000000000000b8f7293611202d9e179927b2a2ecfe4b48628e90", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}