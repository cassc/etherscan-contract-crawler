{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2023-02-28\r\n*/\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2023-01-19\r\n*/\r\n\r\n/*\r\n * Written by Sam, Guru Network.\r\n * (C) Sam, 543#3017\r\n * (C) FTM.Guru\r\n * (C) Guru Network\r\n * (C) Eliteness.Network\r\n * For help or queries, visit us on https://discord.gg/QpyfMarNrV.\r\n * Based on FTM.Guru/LF, Curve.fi, Synthetix.io, & Yearn.finance.\r\n *\r\n * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n * * * * * Guru Network: Multi-Reward Farmland * * * * *\r\n * * * * * * * * * * * * * * * * * * * * * * * * * * * *\r\n *\r\n *\r\n *\r\n */\r\npragma solidity 0.8.9;\r\n///pragma experimental ABIEncoderV2;\r\n\r\n//ftm.guru's Universal On-chain TVL Calculator\r\n//Source: https://ftm.guru/rawdata/tvl\r\ninterface ITVL {\r\n\t//Using Version = v7\r\n\tfunction p_lpt_coin_usd(address lp) external view returns(uint256);\r\n\tfunction p_lpt_usd(address u,address lp) external view returns(uint256);\r\n\tfunction p_t_coin_usd(address lp) external view returns(uint256);\r\n}\r\n\r\ninterface IGauge {\r\n\tfunction depositAll() external;\r\n\tfunction deposit(uint256 amount) external;\r\n\tfunction withdrawAll() external;\r\n\tfunction withdraw(uint256 amount) external;\r\n\tfunction emergencyWithdraw() external;\r\n\tfunction emergencyWithdrawAmount(uint256 _amount) external;\r\n\tfunction withdrawAllAndHarvest() external;\r\n\tfunction getReward(address _user) external;\r\n\tfunction getReward() external;\r\n\tfunction claimFees() external;\r\n\tfunction earned(address account) external view returns (uint256);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\nlibrary Address {\r\n\tfunction isContract(address account) internal view returns (bool) {\r\n\t\t// This method relies in extcodesize, which returns 0 for contracts in\r\n\t\t// construction, since the code is only stored at the end of the\r\n\t\t// constructor execution.\r\n\r\n\t\tuint256 size;\r\n\t\t// solhint-disable-next-line no-inline-assembly\r\n\t\tassembly { size := extcodesize(account) }\r\n\t\treturn size > 0;\r\n\t}\r\n}\r\n\r\ninterface IERC20 {\r\n\t/**\r\n\t * @dev Returns the amount of tokens in existence.\r\n\t */\r\n\tfunction totalSupply() external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Returns the amount of tokens owned by `account`.\r\n\t */\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a `Transfer` event.\r\n\t */\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Returns the remaining number of tokens that `spender` will be\r\n\t * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n\t * zero by default.\r\n\t *\r\n\t * This value changes when `approve` or `transferFrom` are called.\r\n\t */\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n\t/**\r\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * > Beware that changing an allowance with this method brings the risk\r\n\t * that someone may use both the old and the new allowance by unfortunate\r\n\t * transaction ordering. One possible solution to mitigate this race\r\n\t * condition is to first reduce the spender's allowance to 0 and set the\r\n\t * desired value afterwards:\r\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\t *\r\n\t * Emits an `Approval` event.\r\n\t */\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n\t * allowance mechanism. `amount` is then deducted from the caller's\r\n\t * allowance.\r\n\t *\r\n\t * Returns a boolean value indicating whether the operation succeeded.\r\n\t *\r\n\t * Emits a `Transfer` event.\r\n\t */\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\t/**\r\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n\t * another (`to`).\r\n\t *\r\n\t * Note that `value` may be zero.\r\n\t */\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t/**\r\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n\t * a call to `approve`. `value` is the new allowance.\r\n\t */\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nlibrary Math {\r\n\t/**\r\n\t * @dev Returns the largest of two numbers.\r\n\t */\r\n\tfunction max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a >= b ? a : b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the smallest of two numbers.\r\n\t */\r\n\tfunction min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a < b ? a : b;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the average of two numbers. The result is rounded towards\r\n\t * zero.\r\n\t */\r\n\tfunction average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// (a + b) / 2 can overflow, so we distribute\r\n\t\treturn (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n\t}\r\n}\r\n\r\ncontract Owned {\r\n\taddress public owner;\r\n\taddress public nominatedOwner;\r\n\r\n\tconstructor(address _owner) {\r\n\t\trequire(_owner != address(0), \"Owner address cannot be 0\");\r\n\t\towner = _owner;\r\n\t\temit OwnerChanged(address(0), _owner);\r\n\t}\r\n\r\n\tfunction nominateNewOwner(address _owner) external onlyOwner {\r\n\t\tnominatedOwner = _owner;\r\n\t\temit OwnerNominated(_owner);\r\n\t}\r\n\r\n\tfunction acceptOwnership() external {\r\n\t\trequire(msg.sender == nominatedOwner, \"You must be nominated before you can accept ownership\");\r\n\t\temit OwnerChanged(owner, nominatedOwner);\r\n\t\towner = nominatedOwner;\r\n\t\tnominatedOwner = address(0);\r\n\t}\r\n\r\n\tmodifier onlyOwner {\r\n\t\t_onlyOwner();\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction _onlyOwner() private view {\r\n\t\trequire(msg.sender == owner, \"Only the contract owner may perform this action\");\r\n\t}\r\n\r\n\tevent OwnerNominated(address newOwner);\r\n\tevent OwnerChanged(address oldOwner, address newOwner);\r\n\r\n\tuint public lastPauseTime;\r\n\tbool public paused;\r\n\r\n\r\n\t/**\r\n\t * @notice Change the paused state of the contract\r\n\t * @dev Only the contract owner may call this.\r\n\t */\r\n\tfunction setPaused(bool _paused) external onlyOwner {\r\n\t\t// Ensure we're actually changing the state before we do anything\r\n\t\tif (_paused == paused) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Set our paused state.\r\n\t\tpaused = _paused;\r\n\r\n\t\t// If applicable, set the last pause time.\r\n\t\tif (paused) {\r\n\t\t\tlastPauseTime = block.timestamp;\r\n\t\t}\r\n\r\n\t\t// Let everyone know that our pause state has changed.\r\n\t\temit PauseChanged(paused);\r\n\t}\r\n\r\n\tevent PauseChanged(bool isPaused);\r\n\r\n\tmodifier notPaused {\r\n\t\trequire(!paused, \"This action cannot be performed while the contract is paused\");\r\n\t\t_;\r\n\t}\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n\t/// @dev counter to allow mutex lock with only one SSTORE operation\r\n\tuint256 private _guardCounter;\r\n\r\n\tconstructor () {\r\n\t\t// The counter starts at one to prevent changing it from zero to a non-zero\r\n\t\t// value, which is a more expensive operation.\r\n\t\t_guardCounter = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Prevents a contract from calling itself, directly or indirectly.\r\n\t * Calling a `nonReentrant` function from another `nonReentrant`\r\n\t * function is not supported. It is possible to prevent this from happening\r\n\t * by making the `nonReentrant` function external, and make it call a\r\n\t * `private` function that does the actual work.\r\n\t */\r\n\tmodifier nonReentrant() {\r\n\t\t_guardCounter += 1;\r\n\t\tuint256 localCounter = _guardCounter;\r\n\t\t_;\r\n\t\trequire(localCounter == _guardCounter, \"ReentrancyGuard: reentrant call\");\r\n\t}\r\n}\r\n\r\n\r\nlibrary SafeERC20 {\r\n\tusing SafeMath for uint256;\r\n\tusing Address for address;\r\n\r\n\tfunction safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n\t}\r\n\r\n\tfunction safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n\t}\r\n\r\n\tfunction safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n\t\t// safeApprove should only be called when setting an initial allowance,\r\n\t\t// or when resetting it to zero. To increase and decrease it, use\r\n\t\t// 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n\t\t// solhint-disable-next-line max-line-length\r\n\t\trequire((value == 0) || (token.allowance(address(this), spender) == 0),\r\n\t\t\t\"SafeERC20: approve from non-zero to non-zero allowance\"\r\n\t\t);\r\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n\t}\r\n\r\n\tfunction safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n\t\tuint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n\t}\r\n\r\n\tfunction safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n\t\tuint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n\t * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n\t * @param token The token targeted by the call.\r\n\t * @param data The call data (encoded using abi.encode or one of its variants).\r\n\t */\r\n\tfunction callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\t\t// We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n\t\t// we're implementing it ourselves.\r\n\r\n\t\t// A Solidity high level call has three parts:\r\n\t\t//  1. The target address is checked to verify it contains contract code\r\n\t\t//  2. The call itself is made, and success asserted\r\n\t\t//  3. The return value is decoded, which in turn checks the size of the returned data.\r\n\t\t// solhint-disable-next-line max-line-length\r\n\t\trequire(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n\t\t// solhint-disable-next-line avoid-low-level-calls\r\n\t\t(bool success, bytes memory returndata) = address(token).call(data);\r\n\t\trequire(success, \"SafeERC20: low-level call failed\");\r\n\r\n\t\tif (returndata.length > 0) { // Return data is optional\r\n\t\t\t// solhint-disable-next-line max-line-length\r\n\t\t\trequire(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\nlibrary SafeMath {\r\n\t/**\r\n\t * @dev Returns the addition of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `+` operator.\r\n\t *\r\n\t * Requirements:\r\n\t * - Addition cannot overflow.\r\n\t */\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the subtraction of two unsigned integers, reverting on\r\n\t * overflow (when the result is negative).\r\n\t *\r\n\t * Counterpart to Solidity's `-` operator.\r\n\t *\r\n\t * Requirements:\r\n\t * - Subtraction cannot overflow.\r\n\t */\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b <= a, \"SafeMath: subtraction overflow\");\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the multiplication of two unsigned integers, reverting on\r\n\t * overflow.\r\n\t *\r\n\t * Counterpart to Solidity's `*` operator.\r\n\t *\r\n\t * Requirements:\r\n\t * - Multiplication cannot overflow.\r\n\t */\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n\t\t// benefit is lost if 'b' is also tested.\r\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the integer division of two unsigned integers. Reverts on\r\n\t * division by zero. The result is rounded towards zero.\r\n\t *\r\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n\t * uses an invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\t// Solidity only automatically asserts when dividing by 0\r\n\t\trequire(b > 0, \"SafeMath: division by zero\");\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n\t * Reverts when dividing by zero.\r\n\t *\r\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n\t * invalid opcode to revert (consuming all remaining gas).\r\n\t *\r\n\t * Requirements:\r\n\t * - The divisor cannot be zero.\r\n\t */\r\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\trequire(b != 0, \"SafeMath: modulo by zero\");\r\n\t\treturn a % b;\r\n\t}\r\n}\r\n\r\ncontract GuruMultiRewardFarmland is ReentrancyGuard, Owned {\r\n\tusing SafeMath for uint256;\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t/* ========== STATE VARIABLES ========== */\r\n\r\n\tstruct Reward {\r\n\t\taddress rewardsDistributor;\r\n\t\tuint256 rewardsDuration;\r\n\t\tuint256 periodFinish;\r\n\t\tuint256 rewardRate;\r\n\t\tuint256 lastUpdateTime;\r\n\t\tuint256 rewardPerTokenStored;\r\n\t}\r\n\tIERC20 public stakingToken;\r\n\tIGauge public gauge;\r\n\tmapping(address => Reward) public rewardData;\r\n\taddress[] public rewardTokens;\r\n\taddress[] public gaugeRewardTokens;\r\n\r\n\t// user -> reward token -> amount\r\n\tmapping(address => mapping(address => uint256)) public userRewardPerTokenPaid;\r\n\tmapping(address => mapping(address => uint256)) public rewards;\r\n\r\n\tbool public emergency;\r\n\taddress public feeTaker;\r\n\tuint256 public feePerMillion;\r\n\r\n\taddress public TvlGuru;\r\n\tmapping(address => bytes) public TvlPriceFeed;\r\n\r\n\tuint256 private _totalSupply;\r\n\tmapping(address => uint256) private _balances;\r\n\tmapping(address => mapping(address => uint256)) private _earnings;\r\n\r\n\t/* ========== CONSTRUCTOR ========== */\r\n\r\n\tconstructor(\r\n\t\taddress _stakingToken,\r\n\t\taddress _gauge,\r\n\t\taddress[] memory _gaugeRewardTokens,\r\n\t\taddress _tg,\r\n\t\tbytes memory _tf\r\n\t) public Owned(msg.sender) {\r\n\t\tgauge = IGauge(_gauge);\r\n\t\tstakingToken = IERC20(_stakingToken);\r\n\t\tfor(uint i; i<_gaugeRewardTokens.length;i++) {\r\n\t\t\tgaugeRewardTokens.push(_gaugeRewardTokens[i]);\r\n\t\t}\r\n\t\tTvlGuru = _tg;\r\n\t\tTvlPriceFeed[_stakingToken] = _tf;\r\n\t\tstakingToken.approve(_gauge,type(uint256).max);\r\n\t\tfeeTaker = msg.sender;\r\n\t}\r\n\r\n\tfunction addReward(\r\n\t\taddress _rewardsToken,\r\n\t\taddress _rewardsDistributor,\r\n\t\tuint256 _rewardsDuration,\r\n\t\tbytes memory _TvlPriceFeed\r\n\t)\r\n\t\tpublic\r\n\t\tonlyOwner\r\n\t{\r\n\t\trequire(rewardData[_rewardsToken].rewardsDuration == 0);\r\n\t\trewardTokens.push(_rewardsToken);\r\n\t\trewardData[_rewardsToken].rewardsDistributor = _rewardsDistributor;\r\n\t\trewardData[_rewardsToken].rewardsDuration = _rewardsDuration;\r\n\t\tTvlPriceFeed[_rewardsToken] = _TvlPriceFeed;\r\n\t}\r\n\r\n\t/* ========== VIEWS ========== */\r\n\r\n\tfunction totalSupply() external view returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) external view returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\tfunction lastTimeRewardApplicable(address _rewardsToken) public view returns (uint256) {\r\n\t\treturn Math.min(block.timestamp, rewardData[_rewardsToken].periodFinish);\r\n\t}\r\n\r\n\tfunction rewardPerToken(address _rewardsToken) public view returns (uint256) {\r\n\t\tif (_totalSupply == 0) {\r\n\t\t\treturn rewardData[_rewardsToken].rewardPerTokenStored;\r\n\t\t}\r\n\t\treturn\r\n\t\t\trewardData[_rewardsToken].rewardPerTokenStored.add(\r\n\t\t\t\tlastTimeRewardApplicable(_rewardsToken).sub(rewardData[_rewardsToken].lastUpdateTime).mul(rewardData[_rewardsToken].rewardRate).mul(1e18).div(_totalSupply)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction earned(address account, address _rewardsToken) public view returns (uint256) {\r\n\t\treturn _balances[account].mul(rewardPerToken(_rewardsToken).sub(userRewardPerTokenPaid[account][_rewardsToken])).div(1e18).add(rewards[account][_rewardsToken]);\r\n\t}\r\n\r\n\tfunction earnings(address account, address _rewardsToken) public view returns (uint256) {\r\n\t\treturn _earnings[account][_rewardsToken];\r\n\t}\r\n\r\n\tfunction earningsList(address _user, address[] memory _tokens) public view returns (uint[] memory) {\r\n\t\tuint[] memory _e = new uint[](rewardTokens.length);\r\n\t\tfor(uint i; i<_e.length; i++) {\r\n\t\t\t_e[i] = _earnings[_user][rewardTokens[i]];\r\n\t\t}\r\n\t\treturn _e;\r\n\t}\r\n\r\n\tfunction getRewardForDuration(address _rewardsToken) external view returns (uint256) {\r\n\t\treturn rewardData[_rewardsToken].rewardRate.mul(rewardData[_rewardsToken].rewardsDuration);\r\n\t}\r\n\r\n\tfunction rewardTokensLength() public view returns(uint) {\r\n\t\treturn rewardTokens.length;\r\n\t}\r\n\r\n\tfunction rewardTokensList() public view returns(address[] memory) {\r\n\t\treturn rewardTokens;\r\n\t}\r\n\r\n    function gaugeRewardListLength() external view returns (uint) {\r\n        return gaugeRewardTokens.length;\r\n    }\r\n\r\n    function gaugeEarnings() external view returns (uint) {\r\n    \treturn gauge.earned(address(this));\r\n    }\r\n\r\n\t/* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n\tfunction setRewardsDistributor(address _rewardsToken, address _rewardsDistributor) external onlyOwner {\r\n\t\trewardData[_rewardsToken].rewardsDistributor = _rewardsDistributor;\r\n\t}\r\n\r\n\tfunction _stake(uint256 samount, address _ben) internal {\r\n\t\trequire(samount > 0, \"Cannot stake 0\");\r\n\t\tuint _fee = samount.mul(feePerMillion).div(1e6);\r\n\t\tuint amount = samount.sub(_fee);\r\n\t\t_totalSupply = _totalSupply.add(amount);\r\n\t\t_balances[_ben] = _balances[_ben].add(amount);\r\n\t\tstakingToken.safeTransferFrom(msg.sender, address(this), amount);\r\n\t\tif(_fee > 0) {\r\n\t\t\tstakingToken.safeTransferFrom(msg.sender, feeTaker, _fee);\r\n\t\t}\r\n\t\temit Staked(_ben, amount);\r\n\t\tif(!emergency) gauge.deposit(amount);\r\n\t}\r\n\r\n\t// @notice Cannot deposit if paused\r\n\tfunction stake(uint256 amount) external nonReentrant notPaused updateReward(msg.sender) {\r\n\t\t_stake(amount,msg.sender);\r\n\t}\r\n\r\n\tfunction stakeAll() external nonReentrant notPaused updateReward(msg.sender) {\r\n\t\t_stake(stakingToken.balanceOf(msg.sender),msg.sender);\r\n\t}\r\n\r\n\t// @notice Can withhdraw funds even if paused\r\n\tfunction _withdraw(uint256 amount) internal {\r\n\t\trequire(amount > 0, \"Cannot withdraw 0\");\r\n\t\trequire(_balances[msg.sender] >= amount, \"Overdrawing not allowed.\");\r\n\t\t_totalSupply = _totalSupply.sub(amount);\r\n\t\t_balances[msg.sender] = _balances[msg.sender].sub(amount);\r\n\t\tif(!emergency) {\r\n\t\t\tuint _pre = gauge.balanceOf(address(this));\r\n\t\t\tgauge.withdraw(amount);\r\n\t\t\trequire( _pre - gauge.balanceOf(address(this)) == amount, \"Dirty draw!\");\r\n\t\t}\r\n\t\tstakingToken.safeTransfer(msg.sender, amount);\r\n\t\temit Withdrawn(msg.sender, amount);\r\n\t}\r\n\r\n\tfunction withdraw(uint256 amount) public nonReentrant notPaused updateReward(msg.sender) {\r\n\t\t_withdraw(amount);\r\n\t}\r\n\r\n\tfunction withdrawAll() external nonReentrant notPaused updateReward(msg.sender) {\r\n\t\t_withdraw(_balances[msg.sender]);\r\n\t}\r\n\r\n\tfunction exit() external {\r\n\t\twithdraw(_balances[msg.sender]);\r\n\t\tgetReward();\r\n\t}\r\n\r\n\tfunction claimGaugeRewards() public {\r\n\t\tuint _gl = gaugeRewardTokens.length;\r\n\t\tuint[] memory _pgb = new uint[](_gl);\r\n\t\tfor(uint i; i<_gl; i++) {\r\n\t\t\t_pgb[i] = IERC20(gaugeRewardTokens[i]).balanceOf(address(this));\r\n\t\t}\r\n\t\tgauge.getReward();\r\n\t\tfor(uint i; i<_gl; i++) {\r\n\t\t\taddress _grt = gaugeRewardTokens[i];\r\n\t\t\tuint _gd = IERC20(_grt).balanceOf(address(this)) - _pgb[i];\r\n\t\t\tif(_gd > 0) {\r\n\t\t\t\tIERC20(_grt).transfer(feeTaker, _gd);\r\n\t\t\t\temit GaugeEarnings(feeTaker, _grt, _gd);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Claim all rewards in one go.\r\n\t// @notice Can claim earnings even if paused\r\n\t// @notice Claims would fail if rewards have been recovered by Owner\r\n\tfunction getReward() public nonReentrant updateReward(msg.sender) {\r\n\t\tif(!emergency) claimGaugeRewards();\r\n\t\tfor (uint i; i < rewardTokens.length; i++) {\r\n\t\t\taddress _rewardsToken = rewardTokens[i];\r\n\t\t\tuint256 _reward = rewards[msg.sender][_rewardsToken];\r\n\t\t\tif (_reward > 0) {\r\n\t\t\t\trewards[msg.sender][_rewardsToken] = 0;\r\n\t\t\t\tIERC20(_rewardsToken).safeTransfer(msg.sender, _reward);\r\n\t\t\t\temit RewardPaid(msg.sender, _rewardsToken, _reward);\r\n\t\t\t\t_earnings[msg.sender][_rewardsToken] += _reward;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Claim a specific set of rewards, in one go.\r\n\tfunction getReward(address[] calldata _rewardsTokens) external nonReentrant updateReward(msg.sender) {\r\n\t\tif(!emergency) claimGaugeRewards();\r\n\t\tfor (uint i; i < _rewardsTokens.length; i++) {\r\n\t\t\taddress _rewardsToken = _rewardsTokens[i];\r\n\t\t\tuint256 _reward = rewards[msg.sender][_rewardsToken];\r\n\t\t\tif (_reward > 0) {\r\n\t\t\t\trewards[msg.sender][_rewardsToken] = 0;\r\n\t\t\t\tIERC20(_rewardsToken).safeTransfer(msg.sender, _reward);\r\n\t\t\t\temit RewardPaid(msg.sender, _rewardsToken, _reward);\r\n\t\t\t\t_earnings[msg.sender][_rewardsToken] += _reward;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//Claim a specific Reward\r\n\tfunction getReward(address _rewardsToken) external nonReentrant updateReward(msg.sender) {\r\n\t\tif(!emergency) claimGaugeRewards();\r\n\t\tuint256 _reward = rewards[msg.sender][_rewardsToken];\r\n\t\tif (_reward > 0) {\r\n\t\t\trewards[msg.sender][_rewardsToken] = 0;\r\n\t\t\tIERC20(_rewardsToken).safeTransfer(msg.sender, _reward);\r\n\t\t\temit RewardPaid(msg.sender, _rewardsToken, _reward);\r\n\t\t\t_earnings[msg.sender][_rewardsToken] += _reward;\r\n\t\t}\r\n\t}\r\n\r\n\t/* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n\tfunction notifyRewardAmount(address _rewardsToken, uint256 reward) external updateReward(address(0)) {\r\n\t\trequire(rewardData[_rewardsToken].rewardsDistributor == msg.sender);\r\n\t\t// handle the transfer of reward tokens via `transferFrom` to reduce the number\r\n\t\t// of transactions required and ensure correctness of the reward amount\r\n\t\tIERC20(_rewardsToken).safeTransferFrom(msg.sender, address(this), reward);\r\n\r\n\t\tif (block.timestamp >= rewardData[_rewardsToken].periodFinish) {\r\n\t\t\trewardData[_rewardsToken].rewardRate = reward.div(rewardData[_rewardsToken].rewardsDuration);\r\n\t\t} else {\r\n\t\t\tuint256 remaining = rewardData[_rewardsToken].periodFinish.sub(block.timestamp);\r\n\t\t\tuint256 leftover = remaining.mul(rewardData[_rewardsToken].rewardRate);\r\n\t\t\trewardData[_rewardsToken].rewardRate = reward.add(leftover).div(rewardData[_rewardsToken].rewardsDuration);\r\n\t\t}\r\n\r\n\t\trewardData[_rewardsToken].lastUpdateTime = block.timestamp;\r\n\t\trewardData[_rewardsToken].periodFinish = block.timestamp.add(rewardData[_rewardsToken].rewardsDuration);\r\n\t\temit RewardAdded(_rewardsToken, reward);\r\n\t}\r\n\r\n\t// Recovering ERC20s\r\n\t// @notice Can be used break a specific reward's program.\r\n\t// @notice Depositors can still withdraw, but without any rewards.\r\n\tfunction recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\r\n\t\trequire(tokenAddress != address(stakingToken), \"Cannot touch user deposits\");\r\n\t\tIERC20(tokenAddress).safeTransfer(owner, tokenAmount);\r\n\t\temit Recovered(tokenAddress, tokenAmount);\r\n\t}\r\n\r\n\tfunction setRewardsDuration(address _rewardsToken, uint256 _rewardsDuration) external {\r\n\t\trequire(\r\n\t\t\tblock.timestamp > rewardData[_rewardsToken].periodFinish,\r\n\t\t\t\"Reward period still active\"\r\n\t\t);\r\n\t\trequire(rewardData[_rewardsToken].rewardsDistributor == msg.sender || msg.sender == owner);\r\n\t\trequire(_rewardsDuration > 0, \"Reward duration must be non-zero\");\r\n\t\trewardData[_rewardsToken].rewardsDuration = _rewardsDuration;\r\n\t\temit RewardsDurationUpdated(_rewardsToken, rewardData[_rewardsToken].rewardsDuration);\r\n\t}\r\n\r\n\tfunction setFeeTaker(address _f) external onlyOwner {\r\n\t\trequire(_f != address(0) , \"Invalid Fee Taker!\");\r\n\t\tfeeTaker = _f;\r\n\t}\r\n\r\n\tfunction setFee(uint _f) external onlyOwner {\r\n\t\trequire(_f <= 1e5, \"Deposit fee is capped at 10%.\");\r\n\t\tfeePerMillion = _f;\r\n\t}\r\n\r\n\r\n\r\n\t/* ========== TVL GURU ========== */\r\n\r\n\t// Getters\r\n\r\n\tfunction tvl() public view returns (uint _tvl) {\r\n\t\t( , bytes memory _tt) = address(TvlGuru).staticcall(TvlPriceFeed[address(stakingToken)]);\r\n\t\t(uint _pt) = abi.decode(_tt, (uint));\r\n\t\t_tvl = (_totalSupply * _pt) / 1e18;\r\n\r\n\t\tfor(uint i; i<rewardTokens.length; i++) {\r\n\t\t\t( , _tt) = address(TvlGuru).staticcall( TvlPriceFeed[ rewardTokens[i] ] );\r\n\t\t\t_pt = abi.decode(_tt, (uint));\r\n\t\t\t_tvl += ( IERC20(rewardTokens[i]).balanceOf(address(this)) * _pt) / 1e18;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction apr() public view returns(uint _apr) {\r\n\t\t( , bytes memory _tt) = address(TvlGuru).staticcall(TvlPriceFeed[address(stakingToken)]);\r\n\t\t(uint _pt) = abi.decode(_tt, (uint));\r\n\t\tuint _tvl = (_totalSupply * _pt) / 1e18;\r\n\r\n\t\tuint _roi;\r\n\r\n\t\tfor(uint i; i<rewardTokens.length; i++) {\r\n\t\t\tReward memory _rdt = rewardData[ rewardTokens[i] ];\r\n\t\t\tuint _pf = _rdt.periodFinish;\r\n\t\t\tif(_pf > block.timestamp) {\r\n\t\t\t\tuint _rr = _rdt.rewardRate;\r\n\t\t\t\t( , bytes memory _tt) = address(TvlGuru).staticcall( TvlPriceFeed[ rewardTokens[i] ] );\r\n\t\t\t\tuint _pt = abi.decode(_tt, (uint));\r\n\t\t\t\t_roi += (_rr * _pt * 365 * 24 * 60 * 60) / 1e18;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_apr = (_roi * 1e18 * 100) / _tvl;\r\n\t}\r\n\r\n\tfunction apr(uint i) public view returns(uint _apr) {\r\n\t\t( , bytes memory _tt) = address(TvlGuru).staticcall(TvlPriceFeed[address(stakingToken)]);\r\n\t\t(uint _pt) = abi.decode(_tt, (uint));\r\n\t\tuint _tvl = (_totalSupply * _pt) / 1e18;\r\n\t\tReward memory _rdt = rewardData[ rewardTokens[i] ];\r\n\t\tuint _pf = _rdt.periodFinish;\r\n\t\tuint _roi;\r\n\t\tif(_pf > block.timestamp) {\r\n\t\t\tuint _rr = _rdt.rewardRate;\r\n\t\t\t( , bytes memory _tt) = address(TvlGuru).staticcall( TvlPriceFeed[ rewardTokens[i] ] );\r\n\t\t\tuint _pt = abi.decode(_tt, (uint));\r\n\t\t\t_roi = _rr * _pt * 365 * 86400 / 1e18;\r\n\t\t}\r\n\t\t_apr = (_roi * 1e18 * 100) / _tvl;\r\n\t}\r\n\r\n\tfunction aprs() public view returns(uint[] memory) {\r\n\t\t( , bytes memory _tt) = address(TvlGuru).staticcall(TvlPriceFeed[address(stakingToken)]);\r\n\t\t(uint _pt) = abi.decode(_tt, (uint));\r\n\t\tuint _tvl = (_totalSupply * _pt) / 1e18;\r\n\t\tuint[] memory _aprs = new uint[](rewardTokens.length);\r\n\t\tfor(uint i; i<rewardTokens.length; i++) {\r\n\t\t\tReward memory _rdt = rewardData[ rewardTokens[i] ];\r\n\t\t\tuint _pf = _rdt.periodFinish;\r\n\t\t\tuint _roi;\r\n\t\t\tif(_pf > block.timestamp) {\r\n\t\t\t\tuint _rr = _rdt.rewardRate;\r\n\t\t\t\t( , bytes memory _tt) = address(TvlGuru).staticcall( TvlPriceFeed[ rewardTokens[i] ] );\r\n\t\t\t\tuint _pt = abi.decode(_tt, (uint));\r\n\t\t\t\t_roi = _rr * _pt * 365 * 86400 / 1e18;\r\n\t\t\t}\r\n\t\t\t_aprs[i] = (_roi * 1e18 * 100) / _tvl;\r\n\t\t}\r\n\t\treturn _aprs;\r\n\t}\r\n\r\n\t// Setters\r\n\r\n\tfunction setEmergency(bool _e) external onlyOwner {\r\n\t\temergency = _e;\r\n\t\tif(_e) {\r\n\t\t\tuint _gl = gaugeRewardTokens.length;\r\n\t\t\tuint[] memory _pgb = new uint[](_gl);\r\n\t\t\tfor(uint i; i<_gl; i++) {\r\n\t\t\t\t_pgb[i] = IERC20(gaugeRewardTokens[i]).balanceOf(address(this));\r\n\t\t\t}\r\n\t\t\ttry gauge.withdrawAllAndHarvest() {\r\n\t\t\t\tfor(uint i; i<_gl; i++) {\r\n\t\t\t\t\taddress _grt = gaugeRewardTokens[i];\r\n\t\t\t\t\tuint _gd = IERC20(_grt).balanceOf(address(this)) - _pgb[i];\r\n\t\t\t\t\tif(_gd > 0) {\r\n\t\t\t\t\t\tIERC20(_grt).transfer(feeTaker, _gd);\r\n\t\t\t\t\t\temit GaugeEarnings(feeTaker, _grt, _gd);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tcatch {\r\n\t\t\t\ttry gauge.withdrawAll() {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tcatch {\r\n\t\t\t\t\ttry gauge.emergencyWithdraw() {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif(stakingToken.balanceOf(address(this)) > 0) {\r\n\t\t\t\tgauge.depositAll();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction emergencyAction(uint _n, uint _a) external onlyOwner {\r\n\t\tif(_n==1) gauge.withdrawAll();\r\n\t\tif(_n==2) gauge.withdraw(_a);\r\n\t\tif(_n==3) gauge.emergencyWithdraw();\r\n\t\tif(_n==4) gauge.emergencyWithdrawAmount(_a);\r\n\t\tif(_n==5) gauge.withdrawAllAndHarvest();\r\n\t\tif(_n==6) gauge.getReward();\r\n\t}\r\n\r\n\tfunction setTvlGuru(address _tg) external onlyOwner {\r\n\t\tTvlGuru = _tg;\r\n\t}\r\n\r\n\tfunction setTvlFeed(address _t, bytes calldata _d) external onlyOwner {\r\n\t\tTvlPriceFeed[_t] = _d;\r\n\t}\r\n\r\n\tfunction setTvlFeed(address[] calldata _t, bytes[] calldata _d) external onlyOwner {\r\n\t\tfor(uint i; i<rewardTokens.length; i++) {\r\n\t\t\tTvlPriceFeed[_t[i]] = _d[i];\r\n\t\t}\r\n\t}\r\n\r\n    function addGaugeRewardTokens(address[] memory _tks) external onlyOwner {\r\n        for(uint _j; _j < _tks.length; _j++) {\r\n        \tgaugeRewardTokens.push(_tks[_j]);\r\n        }\r\n    }\r\n\r\n    function removeGaugeRewardTokens(address[] memory _tks) external onlyOwner {\r\n        for(uint j; j < _tks.length; j++) {\r\n        \tuint _l = gaugeRewardTokens.length;\r\n        \tif(gaugeRewardTokens[_l-1]==_tks[j]) {\r\n            \tgaugeRewardTokens.pop();\r\n        \t}\r\n        \telse {\r\n            \tfor(uint i; i < _l - 1; i++) {\r\n                \tif(gaugeRewardTokens[i]==_tks[j]) {\r\n                    \tgaugeRewardTokens[i] = gaugeRewardTokens[_l-1];\r\n                    \tgaugeRewardTokens.pop();\r\n                \t}\r\n            \t}\r\n        \t}\r\n        }\r\n    }\r\n\r\n\r\n\t/* ========== MODIFIERS ========== */\r\n\r\n\tmodifier updateReward(address account) {\r\n\t\tfor (uint i; i < rewardTokens.length; i++) {\r\n\t\t\taddress token = rewardTokens[i];\r\n\t\t\trewardData[token].rewardPerTokenStored = rewardPerToken(token);\r\n\t\t\trewardData[token].lastUpdateTime = lastTimeRewardApplicable(token);\r\n\t\t\tif (account != address(0)) {\r\n\t\t\t\trewards[account][token] = earned(account, token);\r\n\t\t\t\tuserRewardPerTokenPaid[account][token] = rewardData[token].rewardPerTokenStored;\r\n\t\t\t}\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\t/* ========== EVENTS ========== */\r\n\r\n\tevent RewardAdded(address indexed token, uint256 reward);\r\n\tevent Staked(address indexed user, uint256 amount);\r\n\tevent Withdrawn(address indexed user, uint256 amount);\r\n\tevent RewardPaid(address indexed user, address indexed rewardsToken, uint256 reward);\r\n\tevent GaugeEarnings(address indexed user, address indexed rewardsToken, uint256 reward);\r\n\tevent RewardsDurationUpdated(address indexed token, uint256 newDuration);\r\n\tevent Recovered(address indexed token, uint256 amount);\r\n}\r\n// Need help?\r\n// Join our Discord: https://discord.gg/QpyfMarNrV\r\n// Powered by Guru Network\r\n// (\ud83e\uddbe,\ud83d\ude80)", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_gaugeRewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_tg\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_tf\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardsToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"GaugeEarnings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardsToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TvlGuru\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"TvlPriceFeed\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tks\",\"type\":\"address[]\"}],\"name\":\"addGaugeRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsDistributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_TvlPriceFeed\",\"type\":\"bytes\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"apr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_apr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aprs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGaugeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"earnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"earningsList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"}],\"name\":\"emergencyAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePerMillion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"contract IGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeRewardListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gaugeRewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardsTokens\",\"type\":\"address[]\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPauseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tks\",\"type\":\"address[]\"}],\"name\":\"removeGaugeRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rewardsDistributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardsDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokensList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_e\",\"type\":\"bool\"}],\"name\":\"setEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_f\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_f\",\"type\":\"address\"}],\"name\":\"setFeeTaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsDistributor\",\"type\":\"address\"}],\"name\":\"setRewardsDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_t\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_d\",\"type\":\"bytes\"}],\"name\":\"setTvlFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_t\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_d\",\"type\":\"bytes[]\"}],\"name\":\"setTvlFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tg\",\"type\":\"address\"}],\"name\":\"setTvlGuru\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tvl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GuruMultiRewardFarmland", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009798a3835c8c87bd92803c3a248ae0042fbe4c6c000000000000000000000000c3b03e57677e4015eeec4e7cec467ce71b7d1ff400000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000d600ec98cf6418c50ee051ace53219d95aeaa13400000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000f4c8e32eadec4bfe97e0f595add0f4450a863a110000000000000000000000000000000000000000000000000000000000000024332813050000000000000000000000009798a3835c8c87bd92803c3a248ae0042fbe4c6c00000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aad7eee5460f811ef172c7fb1431c473359f01e4c23075bc59b50302b238f7f8"}