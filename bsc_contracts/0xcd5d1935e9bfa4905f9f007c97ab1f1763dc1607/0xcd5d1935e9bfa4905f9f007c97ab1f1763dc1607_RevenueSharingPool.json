{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/RevenueSharingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin-4.5.0/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin-4.5.0/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin-4.5.0/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin-4.5.0/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./libraries/SafeCast.sol\\\";\\nimport \\\"./utils/Math128.sol\\\";\\nimport \\\"./interfaces/IVCake.sol\\\";\\nimport \\\"./interfaces/IRevenueSharingPoolFactory.sol\\\";\\n\\ncontract RevenueSharingPool is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev Events\\n    event LogSetCanCheckpointToken(bool _toggleFlag);\\n    event LogFeed(uint256 _amount);\\n    event LogCheckpointToken(uint256 _timestamp, uint256 _tokens);\\n    event LogClaimed(address indexed _recipient, uint256 _amount, uint256 _claimEpoch, uint256 _maxEpoch);\\n    event LogKilled();\\n    event LogSetWhitelistedCheckpointCallers(address indexed _caller, address indexed _address, bool _ok);\\n\\n    /// @dev Time-related constants\\n    uint256 public constant WEEK = 1 weeks;\\n    uint256 public constant TOKEN_CHECKPOINT_DEADLINE = 1 days;\\n\\n    uint256 public startWeekCursor;\\n    uint256 public weekCursor;\\n    mapping(address => uint256) public weekCursorOf;\\n    mapping(address => uint256) public userEpochOf;\\n\\n    uint256 public lastTokenTimestamp;\\n    mapping(uint256 => uint256) public tokensPerWeek;\\n\\n    address public VCake;\\n    IERC20 public rewardToken;\\n    uint256 public lastTokenBalance;\\n\\n    /// @dev VCake supply at week bounds\\n    mapping(uint256 => uint256) public totalSupplyAt;\\n\\n    bool public canCheckpointToken;\\n\\n    /// @dev address to get token when contract is emergency stop\\n    bool public isKilled;\\n    address public emergencyReturn;\\n\\n    /// @dev list of whitelist checkpoint callers\\n    mapping(address => bool) public whitelistedCheckpointCallers;\\n\\n    /// @notice constructor\\n    constructor() {\\n        (\\n            address _VCake,\\n            uint256 _startTime,\\n            address _rewardToken,\\n            address _emergencyReturn,\\n            address owner\\n        ) = IRevenueSharingPoolFactory(msg.sender).parameters();\\n        uint256 _startTimeFloorWeek = _timestampToFloorWeek(_startTime);\\n        startWeekCursor = _startTimeFloorWeek;\\n        lastTokenTimestamp = _startTimeFloorWeek;\\n        weekCursor = _startTimeFloorWeek;\\n        rewardToken = IERC20(_rewardToken);\\n        VCake = _VCake;\\n        emergencyReturn = _emergencyReturn;\\n\\n        _transferOwnership(owner);\\n    }\\n\\n    modifier onlyLive() {\\n        require(!isKilled, \\\"killed\\\");\\n        _;\\n    }\\n\\n    /// @notice Get VCake balance of \\\"_user\\\" at \\\"_timstamp\\\"\\n    /// @param _user The user address\\n    /// @param _timestamp The timestamp to get user's balance\\n    function balanceOfAt(address _user, uint256 _timestamp) external view returns (uint256) {\\n        uint256 _maxUserEpoch = IVCake(VCake).userPointEpoch(_user);\\n        if (_maxUserEpoch == 0) {\\n            return 0;\\n        }\\n\\n        uint256 _epoch = _findTimestampUserEpoch(_user, _timestamp, _maxUserEpoch);\\n        Point memory _point = IVCake(VCake).userPointHistory(_user, _epoch);\\n        int128 _bias = _point.bias - _point.slope * SafeCast.toInt128(int256(_timestamp - _point.timestamp));\\n        if (_bias < 0) {\\n            return 0;\\n        }\\n        return SafeCast.toUint256(_bias);\\n    }\\n\\n    /// @notice Record token distribution checkpoint\\n    function _checkpointToken() internal {\\n        // Find out how many tokens to be distributed\\n        uint256 _rewardTokenBalance = rewardToken.balanceOf(address(this));\\n        uint256 _toDistribute = _rewardTokenBalance - lastTokenBalance;\\n        lastTokenBalance = _rewardTokenBalance;\\n\\n        // Prepare and update time-related variables\\n        // 1. Setup _timeCursor to be the \\\"lastTokenTimestamp\\\"\\n        // 2. Find out how long from previous checkpoint\\n        // 3. Setup iterable cursor\\n        // 4. Update lastTokenTimestamp to be block.timestamp\\n        uint256 _timeCursor = lastTokenTimestamp;\\n        uint256 _deltaSinceLastTimestamp = block.timestamp - _timeCursor;\\n        uint256 _thisWeekCursor = _timestampToFloorWeek(_timeCursor);\\n        uint256 _nextWeekCursor = 0;\\n        lastTokenTimestamp = block.timestamp;\\n\\n        // Iterate through weeks to filled out missing tokensPerWeek (if any)\\n        for (uint256 _i = 0; _i < 52; _i++) {\\n            _nextWeekCursor = _thisWeekCursor + WEEK;\\n\\n            // if block.timestamp < _nextWeekCursor, means _nextWeekCursor goes\\n            // beyond the actual block.timestamp, hence it is the last iteration\\n            // to fill out tokensPerWeek\\n            if (block.timestamp < _nextWeekCursor) {\\n                if (_deltaSinceLastTimestamp == 0 && block.timestamp == _timeCursor) {\\n                    tokensPerWeek[_thisWeekCursor] = tokensPerWeek[_thisWeekCursor] + _toDistribute;\\n                } else {\\n                    tokensPerWeek[_thisWeekCursor] =\\n                        tokensPerWeek[_thisWeekCursor] +\\n                        ((_toDistribute * (block.timestamp - _timeCursor)) / _deltaSinceLastTimestamp);\\n                }\\n                break;\\n            } else {\\n                if (_deltaSinceLastTimestamp == 0 && _nextWeekCursor == _timeCursor) {\\n                    tokensPerWeek[_thisWeekCursor] = tokensPerWeek[_thisWeekCursor] + _toDistribute;\\n                } else {\\n                    tokensPerWeek[_thisWeekCursor] =\\n                        tokensPerWeek[_thisWeekCursor] +\\n                        ((_toDistribute * (_nextWeekCursor - _timeCursor)) / _deltaSinceLastTimestamp);\\n                }\\n            }\\n            _timeCursor = _nextWeekCursor;\\n            _thisWeekCursor = _nextWeekCursor;\\n        }\\n\\n        emit LogCheckpointToken(block.timestamp, _toDistribute);\\n    }\\n\\n    /// @notice Update token checkpoint\\n    /// @dev Calculate the total token to be distributed in a given week.\\n    /// At launch can only be called by owner, after launch can be called\\n    /// by anyone if block.timestamp > lastTokenTime + TOKEN_CHECKPOINT_DEADLINE\\n    function checkpointToken() external nonReentrant {\\n        require(\\n            msg.sender == owner() ||\\n                whitelistedCheckpointCallers[msg.sender] ||\\n                (canCheckpointToken && (block.timestamp > lastTokenTimestamp + TOKEN_CHECKPOINT_DEADLINE)),\\n            \\\"!allow\\\"\\n        );\\n        _checkpointToken();\\n    }\\n\\n    /// @notice Record VCake total supply for each week\\n    function _checkpointTotalSupply() internal {\\n        uint256 _weekCursor = weekCursor;\\n        uint256 _roundedTimestamp = _timestampToFloorWeek(block.timestamp);\\n\\n        IVCake(VCake).checkpoint();\\n\\n        for (uint256 _i = 0; _i < 52; _i++) {\\n            if (_weekCursor > _roundedTimestamp) {\\n                break;\\n            } else {\\n                uint256 _epoch = _findTimestampEpoch(_weekCursor);\\n                Point memory _point = IVCake(VCake).pointHistory(_epoch);\\n                int128 _timeDelta = 0;\\n                if (_weekCursor > _point.timestamp) {\\n                    _timeDelta = SafeCast.toInt128(int256(_weekCursor - _point.timestamp));\\n                }\\n                int128 _bias = _point.bias - _point.slope * _timeDelta;\\n                if (_bias < 0) {\\n                    totalSupplyAt[_weekCursor] = 0;\\n                } else {\\n                    totalSupplyAt[_weekCursor] = SafeCast.toUint256(_bias);\\n                }\\n            }\\n            _weekCursor = _weekCursor + WEEK;\\n        }\\n\\n        weekCursor = _weekCursor;\\n    }\\n\\n    /// @notice Update VCake total supply checkpoint\\n    /// @dev This function can be called independently or at the first claim of\\n    /// the new epoch week.\\n    function checkpointTotalSupply() external nonReentrant {\\n        _checkpointTotalSupply();\\n    }\\n\\n    /// @notice Claim rewardToken\\n    /// @dev Perform claim rewardToken\\n    function _claim(address _user, uint256 _maxClaimTimestamp) internal returns (uint256) {\\n        uint256 _userEpoch = 0;\\n        uint256 _toDistribute = 0;\\n\\n        uint256 _maxUserEpoch = IVCake(VCake).userPointEpoch(_user);\\n        uint256 _startWeekCursor = startWeekCursor;\\n\\n        // _maxUserEpoch = 0, meaning no lock.\\n        // Hence, no yield for _user\\n        if (_maxUserEpoch == 0) {\\n            return 0;\\n        }\\n\\n        uint256 _userWeekCursor = weekCursorOf[_user];\\n        if (_userWeekCursor == 0) {\\n            // if _user has no _userWeekCursor with GrassHouse yet\\n            // then we need to perform binary search\\n            _userEpoch = _findTimestampUserEpoch(_user, _startWeekCursor, _maxUserEpoch);\\n        } else {\\n            // else, _user must has epoch with GrassHouse already\\n            _userEpoch = userEpochOf[_user];\\n        }\\n\\n        if (_userEpoch == 0) {\\n            _userEpoch = 1;\\n        }\\n\\n        Point memory _userPoint = IVCake(VCake).userPointHistory(_user, _userEpoch);\\n\\n        if (_userWeekCursor == 0) {\\n            _userWeekCursor = ((_userPoint.timestamp + WEEK - 1) / WEEK) * WEEK;\\n        }\\n\\n        // _userWeekCursor is already at/beyond _maxClaimTimestamp\\n        // meaning nothing to be claimed for this user.\\n        // This can be:\\n        // 1) User just lock their ALPACA less than 1 week\\n        // 2) User already claimed their rewards\\n        if (_userWeekCursor >= _maxClaimTimestamp) {\\n            return 0;\\n        }\\n\\n        // Handle when user lock ALPACA before Grasshouse started\\n        // by assign _userWeekCursor to Grasshouse's _startWeekCursor\\n        if (_userWeekCursor < _startWeekCursor) {\\n            _userWeekCursor = _startWeekCursor;\\n        }\\n\\n        Point memory _prevUserPoint = Point({bias: 0, slope: 0, timestamp: 0, blockNumber: 0});\\n\\n        // Go through weeks\\n        for (uint256 _i = 0; _i < 52; _i++) {\\n            // If _userWeekCursor is iterated to be at/beyond _maxClaimTimestamp\\n            // This means we went through all weeks that user subject to claim rewards already\\n            if (_userWeekCursor >= _maxClaimTimestamp) {\\n                break;\\n            }\\n            // Move to the new epoch if need to,\\n            // else calculate rewards that user should get.\\n            if (_userWeekCursor >= _userPoint.timestamp && _userEpoch <= _maxUserEpoch) {\\n                _userEpoch = _userEpoch + 1;\\n                _prevUserPoint = Point({\\n                    bias: _userPoint.bias,\\n                    slope: _userPoint.slope,\\n                    timestamp: _userPoint.timestamp,\\n                    blockNumber: _userPoint.blockNumber\\n                });\\n                // When _userEpoch goes beyond _maxUserEpoch then there is no more Point,\\n                // else take _userEpoch as a new Point\\n                if (_userEpoch > _maxUserEpoch) {\\n                    _userPoint = Point({bias: 0, slope: 0, timestamp: 0, blockNumber: 0});\\n                } else {\\n                    _userPoint = IVCake(VCake).userPointHistory(_user, _userEpoch);\\n                }\\n            } else {\\n                int128 _timeDelta = SafeCast.toInt128(int256(_userWeekCursor - _prevUserPoint.timestamp));\\n                uint256 _balanceOf = SafeCast.toUint256(\\n                    Math128.max(_prevUserPoint.bias - _timeDelta * _prevUserPoint.slope, 0)\\n                );\\n                if (_balanceOf == 0 && _userEpoch > _maxUserEpoch) {\\n                    break;\\n                }\\n                if (_balanceOf > 0) {\\n                    _toDistribute =\\n                        _toDistribute +\\n                        (_balanceOf * tokensPerWeek[_userWeekCursor]) /\\n                        totalSupplyAt[_userWeekCursor];\\n                }\\n                _userWeekCursor = _userWeekCursor + WEEK;\\n            }\\n        }\\n\\n        _userEpoch = Math128.min(_maxUserEpoch, _userEpoch - 1);\\n        userEpochOf[_user] = _userEpoch;\\n        weekCursorOf[_user] = _userWeekCursor;\\n\\n        emit LogClaimed(_user, _toDistribute, _userEpoch, _maxUserEpoch);\\n\\n        return _toDistribute;\\n    }\\n\\n    /// @notice Claim rewardToken for \\\"_user\\\"\\n    /// @param _user The address to claim rewards for\\n    function claim(address _user) external nonReentrant onlyLive returns (uint256) {\\n        if (block.timestamp >= weekCursor) _checkpointTotalSupply();\\n        uint256 _lastTokenTimestamp = lastTokenTimestamp;\\n\\n        if (canCheckpointToken && (block.timestamp > _lastTokenTimestamp + TOKEN_CHECKPOINT_DEADLINE)) {\\n            _checkpointToken();\\n            _lastTokenTimestamp = block.timestamp;\\n        }\\n\\n        _lastTokenTimestamp = _timestampToFloorWeek(_lastTokenTimestamp);\\n\\n        uint256 _amount = _claim(_user, _lastTokenTimestamp);\\n        if (_amount != 0) {\\n            lastTokenBalance = lastTokenBalance - _amount;\\n            rewardToken.safeTransfer(_user, _amount);\\n        }\\n\\n        return _amount;\\n    }\\n\\n    /// @notice Claim rewardToken for multiple users\\n    /// @param _users The array of addresses to claim reward for\\n    function claimMany(address[] calldata _users) external nonReentrant onlyLive returns (bool) {\\n        require(_users.length <= 20, \\\"!over 20 users\\\");\\n\\n        if (block.timestamp >= weekCursor) _checkpointTotalSupply();\\n\\n        uint256 _lastTokenTimestamp = lastTokenTimestamp;\\n\\n        if (canCheckpointToken && (block.timestamp > _lastTokenTimestamp + TOKEN_CHECKPOINT_DEADLINE)) {\\n            _checkpointToken();\\n            _lastTokenTimestamp = block.timestamp;\\n        }\\n\\n        _lastTokenTimestamp = _timestampToFloorWeek(_lastTokenTimestamp);\\n        uint256 _total = 0;\\n\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            require(_users[i] != address(0), \\\"bad user\\\");\\n\\n            uint256 _amount = _claim(_users[i], _lastTokenTimestamp);\\n            if (_amount != 0) {\\n                rewardToken.safeTransfer(_users[i], _amount);\\n                _total = _total + _amount;\\n            }\\n        }\\n\\n        if (_total != 0) {\\n            lastTokenBalance = lastTokenBalance - _total;\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Receive rewardTokens into the contract and trigger token checkpoint\\n    function feed(uint256 _amount) external nonReentrant onlyLive returns (bool) {\\n        rewardToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        if (canCheckpointToken && (block.timestamp > lastTokenTimestamp + TOKEN_CHECKPOINT_DEADLINE)) {\\n            _checkpointToken();\\n        }\\n\\n        emit LogFeed(_amount);\\n\\n        return true;\\n    }\\n\\n    /// @notice Do Binary Search to find out epoch from timestamp\\n    /// @param _timestamp Timestamp to find epoch\\n    function _findTimestampEpoch(uint256 _timestamp) internal view returns (uint256) {\\n        uint256 _min = 0;\\n        uint256 _max = IVCake(VCake).epoch();\\n        // Loop for 128 times -> enough for 128-bit numbers\\n        for (uint256 i = 0; i < 128; i++) {\\n            if (_min >= _max) {\\n                break;\\n            }\\n            uint256 _mid = (_min + _max + 1) / 2;\\n            Point memory _point = IVCake(VCake).pointHistory(_mid);\\n            if (_point.timestamp <= _timestamp) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n        return _min;\\n    }\\n\\n    /// @notice Perform binary search to find out user's epoch from the given timestamp\\n    /// @param _user The user address\\n    /// @param _timestamp The timestamp that you wish to find out epoch\\n    /// @param _maxUserEpoch Max epoch to find out the timestamp\\n    function _findTimestampUserEpoch(\\n        address _user,\\n        uint256 _timestamp,\\n        uint256 _maxUserEpoch\\n    ) internal view returns (uint256) {\\n        uint256 _min = 0;\\n        uint256 _max = _maxUserEpoch;\\n        for (uint256 i = 0; i < 128; i++) {\\n            if (_min >= _max) {\\n                break;\\n            }\\n            uint256 _mid = (_min + _max + 1) / 2;\\n            Point memory _point = IVCake(VCake).userPointHistory(_user, _mid);\\n            if (_point.timestamp <= _timestamp) {\\n                _min = _mid;\\n            } else {\\n                _max = _mid - 1;\\n            }\\n        }\\n        return _min;\\n    }\\n\\n    function kill() external onlyOwner {\\n        isKilled = true;\\n        rewardToken.safeTransfer(emergencyReturn, rewardToken.balanceOf(address(this)));\\n\\n        emit LogKilled();\\n    }\\n\\n    /// @notice Set canCheckpointToken to allow random callers to call checkpointToken\\n    /// @param _newCanCheckpointToken The new canCheckpointToken flag\\n    function setCanCheckpointToken(bool _newCanCheckpointToken) external onlyOwner {\\n        canCheckpointToken = _newCanCheckpointToken;\\n        emit LogSetCanCheckpointToken(_newCanCheckpointToken);\\n    }\\n\\n    /// @notice Round off random timestamp to week\\n    /// @param _timestamp The timestamp to be rounded off\\n    function _timestampToFloorWeek(uint256 _timestamp) internal pure returns (uint256) {\\n        return (_timestamp / WEEK) * WEEK;\\n    }\\n\\n    /// @notice Inject rewardToken into the contract\\n    /// @param _timestamp The timestamp of the rewardToken to be distributed\\n    /// @param _amount The amount of rewardToken to be distributed\\n    function injectReward(uint256 _timestamp, uint256 _amount) external onlyOwner {\\n        rewardToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        lastTokenBalance += _amount;\\n        tokensPerWeek[_timestampToFloorWeek(_timestamp)] = _amount;\\n    }\\n\\n    /// @notice Set whitelisted checkpoint callers.\\n    /// @dev Must only be called by owner.\\n    /// @param _callers addresses to be whitelisted.\\n    /// @param _ok The new ok flag for callers.\\n    function setWhitelistedCheckpointCallers(address[] calldata _callers, bool _ok) external onlyOwner {\\n        for (uint256 _idx = 0; _idx < _callers.length; _idx++) {\\n            whitelistedCheckpointCallers[_callers[_idx]] = _ok;\\n            emit LogSetWhitelistedCheckpointCallers(msg.sender, _callers[_idx], _ok);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.5.0/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.5.0/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.5.0/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.5.0/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Math128.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math128 {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(int128 a, int128 b) internal pure returns (int128) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(int128 a, int128 b) internal pure returns (int128) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVCake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nstruct Point {\\n    int128 bias; // Voting weight\\n    int128 slope; // Multiplier factor to get voting weight at a given time\\n    uint256 timestamp;\\n    uint256 blockNumber;\\n}\\n\\ninterface IVCake {\\n    function deposit(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _lockDuration\\n    ) external;\\n\\n    function withdraw(address _user) external;\\n\\n    /// @dev Return the max epoch of the given \\\"_user\\\"\\n    function userPointEpoch(address _user) external view returns (uint256);\\n\\n    /// @dev Return the max global epoch\\n    function epoch() external view returns (uint256);\\n\\n    /// @dev Return the recorded point for _user at specific _epoch\\n    function userPointHistory(address _user, uint256 _epoch) external view returns (Point memory);\\n\\n    /// @dev Return the recorded global point at specific _epoch\\n    function pointHistory(uint256 _epoch) external view returns (Point memory);\\n\\n    /// @dev Trigger global check point\\n    function checkpoint() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRevenueSharingPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IRevenueSharingPoolFactory {\\n    function parameters()\\n        external\\n        view\\n        returns (\\n            address VCake,\\n            uint256 startTime,\\n            address rewardToken,\\n            address emergencyReturn,\\n            address owner\\n        );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.5.0/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin-4.5.0/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"LogCheckpointToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_claimEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxEpoch\",\"type\":\"uint256\"}],\"name\":\"LogClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"LogFeed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LogKilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_toggleFlag\",\"type\":\"bool\"}],\"name\":\"LogSetCanCheckpointToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_ok\",\"type\":\"bool\"}],\"name\":\"LogSetWhitelistedCheckpointCallers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN_CHECKPOINT_DEADLINE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VCake\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEEK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canCheckpointToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"claimMany\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyReturn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"feed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"injectReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isKilled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTokenTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newCanCheckpointToken\",\"type\":\"bool\"}],\"name\":\"setCanCheckpointToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_callers\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_ok\",\"type\":\"bool\"}],\"name\":\"setWhitelistedCheckpointCallers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startWeekCursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensPerWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userEpochOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weekCursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"weekCursorOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedCheckpointCallers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RevenueSharingPool", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}