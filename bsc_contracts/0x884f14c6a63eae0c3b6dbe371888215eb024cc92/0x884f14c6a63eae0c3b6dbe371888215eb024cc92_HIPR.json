{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/HIPR.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSE\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ninterface IFactory {\\r\\n    function createPair(\\r\\n        address tokenA,\\r\\n        address tokenB\\r\\n    ) external returns (address pair);\\r\\n}\\r\\n\\r\\ninterface IRouter {\\r\\n    function factory() external pure returns (address);\\r\\n\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ncontract HIPR is Ownable, ERC20 {\\r\\n    struct Locked {\\r\\n        uint256 rAmount;\\r\\n        uint256 rate;\\r\\n        uint256 time;\\r\\n    }\\r\\n\\r\\n    struct Fee {\\r\\n        uint256 refFee;\\r\\n        uint256 buybackFee;\\r\\n        uint256 devFee;\\r\\n        uint256 marketingFee;\\r\\n    }\\r\\n\\r\\n    struct valuesFromGetValues {\\r\\n        uint256 rAmount;\\r\\n        uint256 rTransferAmount;\\r\\n        uint256 tTransferAmount;\\r\\n        uint256 rRfi;\\r\\n        uint256 tRfi;\\r\\n        uint256 tFee;\\r\\n        uint256 rFee;\\r\\n    }\\r\\n\\r\\n    //Token configuration\\r\\n    string private constant _name = \\\"HIPERCAPITAL\\\";\\r\\n    string private constant _symbol = \\\"HIPR\\\";\\r\\n    mapping(address => uint256) private _rOwned;\\r\\n    mapping(address => uint256) private _tOwned;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    address public immutable pair;\\r\\n    IRouter public immutable swapRouter;\\r\\n    uint8 private constant _decimals = 18;\\r\\n    uint256 private constant MAX = ~uint256(0);\\r\\n    uint256 private _tTotal = 1_000_000_000_000_000_000 * 10 ** _decimals;\\r\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\r\\n    address public immutable underlying = address(0);\\r\\n    address public bridge;\\r\\n\\r\\n    //Limits\\r\\n    uint256 public cooldown = 3600; //1 minute sell cooldown\\r\\n    bool public transferCooldown;\\r\\n    uint256 public maxWallet = _tTotal; //2% max wallet\\r\\n    mapping(address => Locked[]) public lockedTokens;\\r\\n    mapping(address => uint256) public lastUnlock;\\r\\n    bool public tradingEnabled;\\r\\n\\r\\n    //Exclude\\r\\n    mapping(address => bool) public _isExcludedFromBuyFee;\\r\\n    mapping(address => bool) public _isExcludedFromSellFee;\\r\\n    mapping(address => bool) public _isExcludedFromFee;\\r\\n    mapping(address => bool) public _isExcluded;\\r\\n    mapping(address => bool) public _isExcludedFromCooldown;\\r\\n    mapping(address => bool) public _isExcludedFromMaxWallet;\\r\\n    address[] private _excluded;\\r\\n\\r\\n    //NFTs, NFT holders can be excluded form buy fees\\r\\n    mapping(address => bool) public isSupportedNFT;\\r\\n    mapping(address => bool) public disallowedNFTHolder;\\r\\n\\r\\n    //Fees\\r\\n    Fee public buyFee = Fee(2, 1, 0, 1);\\r\\n    Fee public sellFee = Fee(2, 1, 0, 1);\\r\\n    Fee public transferFee = Fee(0, 0, 0, 0);\\r\\n    uint256 public totalBuyFees = 4;\\r\\n    uint256 public totalSellFees = 4;\\r\\n    uint256 public totalTransferFees = 0;\\r\\n    address public marketingWallet;\\r\\n    address public devWallet;\\r\\n    address public buybackWallet;\\r\\n    uint256 public totalRewardsReflected;\\r\\n    bool public swapping = false;\\r\\n    uint256 public swapThreshold = _tTotal / 10000;\\r\\n\\r\\n    modifier inSwapFlag() {\\r\\n        swapping = true;\\r\\n        _;\\r\\n        swapping = false;\\r\\n    }\\r\\n\\r\\n    modifier onlyBridge() {\\r\\n        require(msg.sender == bridge, \\\"Only bridge\\\");\\r\\n        _;\\r\\n        swapping = false;\\r\\n    }\\r\\n\\r\\n    event FeesChanged();\\r\\n    event Reflected(uint256 amount);\\r\\n\\r\\n    constructor() ERC20(_name, _symbol) {\\r\\n        swapRouter = IRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\r\\n        pair = IFactory(swapRouter.factory()).createPair(\\r\\n            address(this),\\r\\n            swapRouter.WETH()\\r\\n        );\\r\\n\\r\\n        buybackWallet = 0x6593be97206c5233CB9c3f939B0b3B3344e5196e;\\r\\n        marketingWallet = 0x6593be97206c5233CB9c3f939B0b3B3344e5196e;\\r\\n\\r\\n        excludeFromReward(address(this));\\r\\n        excludeFromReward(address(pair));\\r\\n\\r\\n        _isExcludedFromFee[address(this)] = true;\\r\\n        _isExcludedFromFee[owner()] = true;\\r\\n\\r\\n        _isExcludedFromMaxWallet[address(this)] = true;\\r\\n        _isExcludedFromMaxWallet[owner()] = true;\\r\\n\\r\\n        _isExcludedFromCooldown[address(this)] = true;\\r\\n        _isExcludedFromCooldown[owner()] = true;\\r\\n        _isExcludedFromCooldown[pair] = true;\\r\\n\\r\\n        _rOwned[msg.sender] = _rTotal;\\r\\n        _tOwned[msg.sender] = _tTotal;\\r\\n        emit Transfer(address(0), owner(), _tTotal);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        if (_isExcluded[account]) return _tOwned[account];\\r\\n        return tokenFromReflection(_rOwned[account]);\\r\\n    }\\r\\n\\r\\n    function isContract(address _addr) public view returns (bool isContract) {\\r\\n        uint32 size;\\r\\n        assembly {\\r\\n            size := extcodesize(_addr)\\r\\n        }\\r\\n        return (size > 0);\\r\\n    }\\r\\n\\r\\n    function updateMarketingWallet(address marketing) public onlyOwner {\\r\\n        marketingWallet = marketing;\\r\\n    }\\r\\n\\r\\n    function updateDevWallet(address developer) public onlyOwner {\\r\\n        devWallet = developer;\\r\\n    }\\r\\n\\r\\n    function updateBuyBackWallet(address buyBack) public onlyOwner {\\r\\n        buybackWallet = buyBack;\\r\\n    }\\r\\n\\r\\n    function reflectionFromToken(\\r\\n        uint256 tAmount,\\r\\n        bool deductTransferRfi\\r\\n    ) public view returns (uint256) {\\r\\n        require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\r\\n        if (!deductTransferRfi) {\\r\\n            valuesFromGetValues memory s = _getValues(\\r\\n                tAmount,\\r\\n                true,\\r\\n                address(0),\\r\\n                address(0)\\r\\n            );\\r\\n            return s.rAmount;\\r\\n        } else {\\r\\n            valuesFromGetValues memory s = _getValues(\\r\\n                tAmount,\\r\\n                true,\\r\\n                address(0),\\r\\n                address(0)\\r\\n            );\\r\\n            return s.rTransferAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenFromReflection(\\r\\n        uint256 rAmount\\r\\n    ) public view returns (uint256) {\\r\\n        require(\\r\\n            rAmount <= _rTotal,\\r\\n            \\\"Amount must be less than total reflections\\\"\\r\\n        );\\r\\n        uint256 currentRate = _getRate();\\r\\n        return rAmount / currentRate;\\r\\n    }\\r\\n\\r\\n    //costumized to be compatible with locking system\\r\\n    function excludeFromReward(address account) public onlyOwner {\\r\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\r\\n        if (_rOwned[account] > 0) {\\r\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\r\\n            _resetAccountLocked(account, false);\\r\\n        }\\r\\n        _isExcluded[account] = true;\\r\\n        _excluded.push(account);\\r\\n    }\\r\\n\\r\\n    function includeInReward(address account) external onlyOwner {\\r\\n        require(_isExcluded[account], \\\"Account is not excluded\\\");\\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (_excluded[i] == account) {\\r\\n                _excluded[i] = _excluded[_excluded.length - 1];\\r\\n                _tOwned[account] = 0;\\r\\n                _isExcluded[account] = false;\\r\\n                _excluded.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        //rate would be significantly different after including an account into rewards, hence we have to reset the locked amounts\\r\\n        _resetAccountLocked(account, false);\\r\\n    }\\r\\n\\r\\n    function resetAccountLocked(address account, bool locked) public onlyOwner {\\r\\n        _resetAccountLocked(account, locked);\\r\\n    }\\r\\n\\r\\n    function _resetAccountLocked(address account, bool locked) internal {\\r\\n        delete lockedTokens[account];\\r\\n        lastUnlock[account] = 0;\\r\\n        lockedTokens[account].push(\\r\\n            Locked({\\r\\n                time: locked ? block.timestamp : 0,\\r\\n                rAmount: _rOwned[account],\\r\\n                rate: _getRate()\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function updateSwapThreshold(uint256 newAmount) public onlyOwner {\\r\\n        require(\\r\\n            newAmount <= _tTotal / 100,\\r\\n            \\\"swap threshold not in range [0 - suppy / 100]\\\"\\r\\n        );\\r\\n        swapThreshold = newAmount;\\r\\n    }\\r\\n\\r\\n    function setExcludedFromMaxWallet(\\r\\n        address target,\\r\\n        bool status\\r\\n    ) public onlyOwner {\\r\\n        _isExcludedFromMaxWallet[target] = status;\\r\\n    }\\r\\n\\r\\n    function setExcludedFromCooldown(\\r\\n        address target,\\r\\n        bool status\\r\\n    ) public onlyOwner {\\r\\n        if (!status) {\\r\\n            require(target != pair, \\\"can't include pair in coodown\\\");\\r\\n        }\\r\\n        _isExcludedFromCooldown[target] = status;\\r\\n        delete lockedTokens[target];\\r\\n        lastUnlock[target] = 0;\\r\\n        if (!status) {\\r\\n            lockedTokens[target].push(\\r\\n                Locked({\\r\\n                    time: block.timestamp,\\r\\n                    rAmount: _rOwned[target],\\r\\n                    rate: _getRate()\\r\\n                })\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setExcludedFromAllFees(\\r\\n        address target,\\r\\n        bool status\\r\\n    ) public onlyOwner {\\r\\n        _isExcludedFromFee[target] = status;\\r\\n    }\\r\\n\\r\\n    function setExcludedFromBuyFees(\\r\\n        address target,\\r\\n        bool status\\r\\n    ) public onlyOwner {\\r\\n        _isExcludedFromBuyFee[target] = status;\\r\\n    }\\r\\n\\r\\n    function setExcludedFromSelFees(\\r\\n        address target,\\r\\n        bool status\\r\\n    ) public onlyOwner {\\r\\n        _isExcludedFromSellFee[target] = status;\\r\\n    }\\r\\n\\r\\n    function setIsSupportedNFT(\\r\\n        address nftContract,\\r\\n        bool status\\r\\n    ) public onlyOwner {\\r\\n        isSupportedNFT[nftContract] = status;\\r\\n    }\\r\\n\\r\\n    function excludeNFTHolderFromBuyFees(address nftContract) public {\\r\\n        require(isSupportedNFT[nftContract], \\\"NFT contract not supported\\\");\\r\\n        require(\\r\\n            IERC721(nftContract).balanceOf(msg.sender) != 0,\\r\\n            \\\"You are not holding any NFT of this type\\\"\\r\\n        );\\r\\n        require(\\r\\n            !disallowedNFTHolder[msg.sender],\\r\\n            \\\"your privilege has been taken away by owner\\\"\\r\\n        );\\r\\n        _isExcludedFromBuyFee[msg.sender] = true;\\r\\n    }\\r\\n\\r\\n    function enableTrading() external onlyOwner {\\r\\n        require(!tradingEnabled, \\\"Cannot re-enable trading\\\");\\r\\n        tradingEnabled = true;\\r\\n    }\\r\\n\\r\\n    function toggleCooldownOnTransfers(bool status) external onlyOwner {\\r\\n        transferCooldown = status;\\r\\n    }\\r\\n\\r\\n    function updateBuyFee(\\r\\n        uint256 devFee,\\r\\n        uint256 marketingFee,\\r\\n        uint256 refFee,\\r\\n        uint256 buyBackFee\\r\\n    ) public onlyOwner {\\r\\n        totalBuyFees = devFee + marketingFee + refFee + buyBackFee;\\r\\n        require(totalBuyFees <= 8, \\\"can't set fees over 8%\\\");\\r\\n        buyFee = Fee(refFee, buyBackFee, devFee, marketingFee);\\r\\n    }\\r\\n\\r\\n    function updateSellFee(\\r\\n        uint256 devFee,\\r\\n        uint256 marketingFee,\\r\\n        uint256 refFee,\\r\\n        uint256 buyBackFee\\r\\n    ) public onlyOwner {\\r\\n        totalSellFees = devFee + marketingFee + refFee + buyBackFee;\\r\\n        require(totalSellFees <= 8, \\\"can't set fees over 8%\\\");\\r\\n        sellFee = Fee(refFee, buyBackFee, devFee, marketingFee);\\r\\n    }\\r\\n\\r\\n    function updateTransferFee(\\r\\n        uint256 devFee,\\r\\n        uint256 marketingFee,\\r\\n        uint256 refFee,\\r\\n        uint256 buyBackFee\\r\\n    ) public onlyOwner {\\r\\n        totalTransferFees = devFee + marketingFee + refFee + buyBackFee;\\r\\n        require(totalTransferFees <= 8, \\\"can't set fees over 8%\\\");\\r\\n        transferFee = Fee(refFee, buyBackFee, devFee, marketingFee);\\r\\n    }\\r\\n\\r\\n    function updateCooldown(uint256 newCooldown) public onlyOwner {\\r\\n        require(newCooldown <= 12 hours, \\\"Can not set cooldown over 12 hours\\\");\\r\\n        cooldown = newCooldown;\\r\\n    }\\r\\n\\r\\n    function updateMaxWallet(uint256 newMaxWallet) public onlyOwner {\\r\\n        require(\\r\\n            newMaxWallet >= totalSupply() / 1000,\\r\\n            \\\"Can not max wallet lower than 0.1% of supply\\\"\\r\\n        );\\r\\n        maxWallet = newMaxWallet;\\r\\n    }\\r\\n\\r\\n    function setBridge(address _bridge) public onlyOwner {\\r\\n        require(bridge == address(0));\\r\\n        require(isContract(_bridge), \\\"Bridge can only be a contract\\\");\\r\\n        bridge = _bridge;\\r\\n    }\\r\\n\\r\\n    function unprivilegeNFTHolder(\\r\\n        address nftHolder,\\r\\n        bool yesno\\r\\n    ) public onlyOwner {\\r\\n        disallowedNFTHolder[nftHolder] = yesno;\\r\\n        if (yesno) {\\r\\n            _isExcludedFromBuyFee[nftHolder] = false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _reflectRfi(uint256 rRfi, uint256 tRfi) internal {\\r\\n        _rTotal -= rRfi;\\r\\n        totalRewardsReflected += tRfi;\\r\\n        emit Reflected(tRfi);\\r\\n    }\\r\\n\\r\\n    function _takeFee(address sender, uint256 rFee, uint256 tFee) internal {\\r\\n        if (_isExcluded[address(this)]) {\\r\\n            _tOwned[address(this)] += tFee;\\r\\n        }\\r\\n        _rOwned[address(this)] += rFee;\\r\\n        emit Transfer(sender, address(this), tFee);\\r\\n    }\\r\\n\\r\\n    function _getValues(\\r\\n        uint256 tAmount,\\r\\n        bool takeFee,\\r\\n        address from,\\r\\n        address to\\r\\n    ) private view returns (valuesFromGetValues memory to_return) {\\r\\n        to_return = _getTValues(tAmount, takeFee, from, to);\\r\\n        (\\r\\n            to_return.rAmount,\\r\\n            to_return.rTransferAmount,\\r\\n            to_return.rRfi,\\r\\n            to_return.rFee\\r\\n        ) = _getRValues1(to_return, tAmount, takeFee, _getRate());\\r\\n\\r\\n        return to_return;\\r\\n    }\\r\\n\\r\\n    function _getTValues(\\r\\n        uint256 tAmount,\\r\\n        bool takeFee,\\r\\n        address from,\\r\\n        address to\\r\\n    ) private view returns (valuesFromGetValues memory s) {\\r\\n        if (!takeFee) {\\r\\n            s.tTransferAmount = tAmount;\\r\\n            return s;\\r\\n        }\\r\\n\\r\\n        uint256 temp = totalTransferFees;\\r\\n        Fee memory feeStruct = transferFee;\\r\\n        if (from == pair) {\\r\\n            if (_isExcludedFromBuyFee[to]) {\\r\\n                temp = 0;\\r\\n            } else {\\r\\n                temp = totalBuyFees;\\r\\n                feeStruct = buyFee;\\r\\n            }\\r\\n        } else if (to == pair) {\\r\\n            if (_isExcludedFromSellFee[from]) {\\r\\n                temp = 0;\\r\\n            } else {\\r\\n                temp = totalSellFees;\\r\\n                feeStruct = sellFee;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (temp > 0) {\\r\\n            s.tRfi = (tAmount * feeStruct.refFee) / 100;\\r\\n            s.tFee = (tAmount * (temp - feeStruct.refFee)) / 100;\\r\\n        }\\r\\n        s.tTransferAmount = tAmount - s.tRfi - s.tFee;\\r\\n        return s;\\r\\n    }\\r\\n\\r\\n    function _getRValues1(\\r\\n        valuesFromGetValues memory s,\\r\\n        uint256 tAmount,\\r\\n        bool takeFee,\\r\\n        uint256 currentRate\\r\\n    )\\r\\n        private\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 rAmount,\\r\\n            uint256 rTransferAmount,\\r\\n            uint256 rRfi,\\r\\n            uint256 rFee\\r\\n        )\\r\\n    {\\r\\n        rAmount = tAmount * currentRate;\\r\\n\\r\\n        if (!takeFee) {\\r\\n            return (rAmount, rAmount, 0, 0);\\r\\n        }\\r\\n\\r\\n        rRfi = s.tRfi * currentRate;\\r\\n        rFee = s.tFee * currentRate;\\r\\n\\r\\n        rTransferAmount = rAmount - rRfi - rFee;\\r\\n\\r\\n        return (rAmount, rTransferAmount, rRfi, rFee);\\r\\n    }\\r\\n\\r\\n    function _getRate() private view returns (uint256) {\\r\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\r\\n        return rSupply / tSupply;\\r\\n    }\\r\\n\\r\\n    function _getCurrentSupply() private view returns (uint256, uint256) {\\r\\n        uint256 rSupply = _rTotal;\\r\\n        uint256 tSupply = _tTotal;\\r\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\r\\n            if (\\r\\n                _rOwned[_excluded[i]] > rSupply ||\\r\\n                _tOwned[_excluded[i]] > tSupply\\r\\n            ) return (_rTotal, _tTotal);\\r\\n            rSupply = rSupply - _rOwned[_excluded[i]];\\r\\n            tSupply = tSupply - _tOwned[_excluded[i]];\\r\\n        }\\r\\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\\r\\n        return (rSupply, tSupply);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override {\\r\\n        bool takeFee = false;\\r\\n        if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\\r\\n            require(tradingEnabled, \\\"Trading not active\\\");\\r\\n            takeFee = true;\\r\\n        }\\r\\n        _tokenTransfer(from, to, amount, takeFee);\\r\\n    }\\r\\n\\r\\n    function _tokenTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 tAmount,\\r\\n        bool takeFee\\r\\n    ) private {\\r\\n        valuesFromGetValues memory s = _getValues(\\r\\n            tAmount,\\r\\n            takeFee,\\r\\n            sender,\\r\\n            recipient\\r\\n        );\\r\\n\\r\\n        if (recipient != pair) {\\r\\n            if (\\r\\n                !_isExcludedFromMaxWallet[sender] &&\\r\\n                !_isExcludedFromMaxWallet[recipient]\\r\\n            ) {\\r\\n                require(\\r\\n                    balanceOf(recipient) + s.tTransferAmount <= maxWallet,\\r\\n                    \\\"Maximum wallet has been reached for this account.\\\"\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        bool allowed = true; //this is true by defualt, if user has locked tokens\\r\\n        //this value will be challenged and will be updated to false if there are not enough tokens\\r\\n        uint256 lockTime = block.timestamp;\\r\\n\\r\\n        if (recipient == pair) {\\r\\n            if (!_isExcludedFromCooldown[sender]) {\\r\\n                allowed = _unlockedTokens(sender, true, tAmount);\\r\\n            }\\r\\n            if (balanceOf(address(this)) > swapThreshold && !swapping) {\\r\\n                internalSwap(swapThreshold);\\r\\n            }\\r\\n        }\\r\\n        if (recipient != pair && sender != pair) {\\r\\n            if (!_isExcludedFromCooldown[sender]) {\\r\\n                allowed = _unlockedTokens(sender, false, tAmount);\\r\\n            }\\r\\n            if (!_isExcludedFromCooldown[recipient]) {\\r\\n                if (!transferCooldown) {\\r\\n                    lockTime = 0;\\r\\n                }\\r\\n                lockedTokens[recipient].push(\\r\\n                    Locked({\\r\\n                        rAmount: s.rTransferAmount,\\r\\n                        time: lockTime,\\r\\n                        rate: _getRate()\\r\\n                    })\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        if (sender == pair) {\\r\\n            if (!_isExcludedFromCooldown[recipient]) {\\r\\n                lockedTokens[recipient].push(\\r\\n                    Locked({\\r\\n                        rAmount: s.rTransferAmount,\\r\\n                        time: lockTime,\\r\\n                        rate: _getRate()\\r\\n                    })\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(allowed == true, \\\"Not enough unlocked tokens\\\");\\r\\n\\r\\n        if (_isExcluded[sender]) {\\r\\n            _tOwned[sender] = _tOwned[sender] - tAmount;\\r\\n        }\\r\\n\\r\\n        if (_isExcluded[recipient]) {\\r\\n            _tOwned[recipient] = _tOwned[recipient] + s.tTransferAmount;\\r\\n        }\\r\\n\\r\\n        _rOwned[sender] = _rOwned[sender] - s.rAmount;\\r\\n        _rOwned[recipient] = _rOwned[recipient] + s.rTransferAmount;\\r\\n\\r\\n        if (s.rRfi > 0 || s.tRfi > 0) _reflectRfi(s.rRfi, s.tRfi);\\r\\n        if (s.rFee > 0 || s.tFee > 0) _takeFee(sender, s.rFee, s.tFee);\\r\\n\\r\\n        emit Transfer(sender, recipient, s.tTransferAmount);\\r\\n    }\\r\\n\\r\\n    //if holder is excluded => calculate lock amount using the rate in which the tokens were locked\\r\\n    //if holder is not excluded from rewards => calculate the lock amount based on latest rate, which means user\\r\\n    //can enjoy reflectinos even on locked amounts.\\r\\n    function _unlockedTokens(\\r\\n        address holder,\\r\\n        bool isSell,\\r\\n        uint256 tAmount\\r\\n    ) internal returns (bool) {\\r\\n        bool excludedFromReward = _isExcluded[holder];\\r\\n        uint256 lockedAmount;\\r\\n        uint256 rate;\\r\\n        uint256 rAmount;\\r\\n        for (\\r\\n            uint256 i = lastUnlock[holder];\\r\\n            i < lockedTokens[holder].length;\\r\\n            i++\\r\\n        ) {\\r\\n            if (\\r\\n                block.timestamp >= lockedTokens[holder][i].time + cooldown ||\\r\\n                !isSell\\r\\n            ) {\\r\\n                rate = excludedFromReward\\r\\n                    ? lockedTokens[holder][i].rate\\r\\n                    : _getRate();\\r\\n                rAmount = lockedTokens[holder][i].rAmount;\\r\\n                lockedAmount = rAmount / rate;\\r\\n                if (tAmount > lockedAmount) {\\r\\n                    tAmount -= lockedAmount;\\r\\n                    lockedTokens[holder][i].rAmount = 0;\\r\\n                    lastUnlock[holder] += 1;\\r\\n                } else {\\r\\n                    lockedTokens[holder][i].rAmount -= tAmount * rate;\\r\\n                    tAmount = 0;\\r\\n                }\\r\\n                if (tAmount == 0) {\\r\\n                    return true;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        //allow one more token, to fix rounding issues\\r\\n        //balanceOf might be lower or higher than total tAmount if we try to transfer all of the tokens\\r\\n        //this is because, balanceOf function is dividing whole rAmount by current ratio, wherease we are\\r\\n        //dividing rAmount of each Lock object by this ratio in each step, this high likely causes rounding errors depending on length\\r\\n        //of locked objects, e.g. if we have 100 lock objects, we might miss 100 tokens (1 token each step) due to rounding errors\\r\\n        //using 10 ** _decimals mitigates this issue\\r\\n        if (tAmount <= 10 ** _decimals) {\\r\\n            return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function internalSwap(uint256 input) internal inSwapFlag {\\r\\n        if (input == 0) {\\r\\n            return;\\r\\n        }\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = swapRouter.WETH();\\r\\n\\r\\n        _approve(address(this), address(swapRouter), ~uint256(0));\\r\\n\\r\\n        try\\r\\n            swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n                input,\\r\\n                0,\\r\\n                path,\\r\\n                address(this),\\r\\n                block.timestamp\\r\\n            )\\r\\n        {} catch {}\\r\\n\\r\\n        if (address(this).balance > 0) {\\r\\n            uint256 balance = address(this).balance;\\r\\n            uint256 marketingETHShare;\\r\\n            uint256 buyBackETHShare;\\r\\n            uint256 devETHShare;\\r\\n            {\\r\\n                Fee memory buyFees = buyFee;\\r\\n                Fee memory sellFees = sellFee;\\r\\n                Fee memory transferFees = transferFee;\\r\\n                uint256 totalFees = totalBuyFees +\\r\\n                    totalSellFees +\\r\\n                    totalTransferFees;\\r\\n                marketingETHShare =\\r\\n                    ((transferFees.marketingFee +\\r\\n                        sellFees.marketingFee +\\r\\n                        buyFees.marketingFee) * balance) /\\r\\n                    totalFees;\\r\\n                devETHShare =\\r\\n                    ((buyFees.devFee + transferFees.devFee + sellFees.devFee) *\\r\\n                        balance) /\\r\\n                    totalFees;\\r\\n                buyBackETHShare =\\r\\n                    ((buyFees.buybackFee +\\r\\n                        sellFees.buybackFee +\\r\\n                        transferFees.buybackFee) * balance) /\\r\\n                    totalFees;\\r\\n            }\\r\\n            (bool success, ) = marketingWallet.call{value: marketingETHShare}(\\r\\n                \\\"\\\"\\r\\n            );\\r\\n            (success, ) = buybackWallet.call{value: buyBackETHShare}(\\\"\\\");\\r\\n            (success, ) = devWallet.call{value: devETHShare}(\\\"\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getUnlockedTokens(\\r\\n        address holder,\\r\\n        bool isSell\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 tAmount = 0;\\r\\n        bool excludedFromReward = _isExcluded[holder];\\r\\n        uint256 rate;\\r\\n        uint256 rAmount;\\r\\n        uint256 lockedAmount;\\r\\n        for (\\r\\n            uint256 i = lastUnlock[holder];\\r\\n            i < lockedTokens[holder].length;\\r\\n            i++\\r\\n        ) {\\r\\n            if (\\r\\n                block.timestamp >= lockedTokens[holder][i].time + cooldown ||\\r\\n                !isSell\\r\\n            ) {\\r\\n                rate = excludedFromReward\\r\\n                    ? lockedTokens[holder][i].rate\\r\\n                    : _getRate();\\r\\n                rAmount = lockedTokens[holder][i].rAmount;\\r\\n                lockedAmount = rAmount / rate;\\r\\n                tAmount += lockedAmount;\\r\\n            }\\r\\n        }\\r\\n        return tAmount;\\r\\n    }\\r\\n\\r\\n    function withdrawETH(uint256 weiAmount) external onlyOwner {\\r\\n        payable(msg.sender).transfer(weiAmount);\\r\\n    }\\r\\n\\r\\n    function withdrawERC20Tokens(\\r\\n        address _tokenAddr,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) public onlyOwner {\\r\\n        require(_tokenAddr != address(this));\\r\\n        IERC20(_tokenAddr).transfer(_to, _amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reflected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromBuyFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromCooldown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromMaxWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromSellFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"refFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buybackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"disallowedNFTHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"}],\"name\":\"excludeNFTHolderFromBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSell\",\"type\":\"bool\"}],\"name\":\"getUnlockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isContract\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSupportedNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferRfi\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"resetAccountLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"refFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buybackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridge\",\"type\":\"address\"}],\"name\":\"setBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setExcludedFromAllFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setExcludedFromBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setExcludedFromCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setExcludedFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setExcludedFromSelFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setIsSupportedNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"toggleCooldownOnTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardsReflected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTransferFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferCooldown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"refFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buybackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"yesno\",\"type\":\"bool\"}],\"name\":\"unprivilegeNFTHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyBack\",\"type\":\"address\"}],\"name\":\"updateBuyBackWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyBackFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCooldown\",\"type\":\"uint256\"}],\"name\":\"updateCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"developer\",\"type\":\"address\"}],\"name\":\"updateDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"marketing\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxWallet\",\"type\":\"uint256\"}],\"name\":\"updateMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyBackFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"updateSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"devFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyBackFee\",\"type\":\"uint256\"}],\"name\":\"updateTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HIPR", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}