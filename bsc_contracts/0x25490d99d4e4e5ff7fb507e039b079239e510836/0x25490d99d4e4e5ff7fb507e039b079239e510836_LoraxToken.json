{"SourceCode": "// SPDX-License-Identifier: UNLISCENSED\r\npragma solidity ^0.8.4;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"not owner\");\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0), \"invalid address\");\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function onlyOwnerCanCallThisFunc() external onlyOwner {\r\n        //code\r\n    }\r\n\r\n    function anyOneCanCall() external {\r\n        // code\r\n    }\r\n}\r\n\r\ncontract LoraxToken is Ownable {\r\n    string public name = \"Thicc\";\r\n    string public symbol = \"THICC\";\r\n    uint256 public totalSupply = 69000000 * 1e18;\r\n    uint8 public decimals = 18;\r\n\r\n    // Addresses\r\n    address constant DevAddress = 0x4aA95be8674202cc4034a605A1E13a215FB3CB60;\r\n    address constant MarketingAddress = 0x8E3e4CAbF28E6CCF6E0042154CF416531815E13C;\r\n    address constant BurnAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address constant LiquidityAddress = 0xF79C2bD7CC931C22E826eAe59F5eCA0E4FC64FC2;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value); \r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n\r\n    uint256 private constant MAX_UINT = ~uint256(0);\r\n    uint256 private _rTotal = (MAX_UINT - (MAX_UINT % totalSupply));\r\n\r\n    constructor() {\r\n        _rOwned[msg.sender] = _rTotal;\r\n        balanceOf[msg.sender] = totalSupply;\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount) private view returns(uint256) {\r\n        require(tAmount <= totalSupply, \"Amount must be less than supply\");\r\n        return tAmount * _getRate();\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) private view returns(uint256) {\r\n        return rAmount / _getRate();\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        return _rTotal / totalSupply;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _tokenTransfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender], \"Transfer amount exceeds allowance\");\r\n        allowance[_from][msg.sender] -= _value;\r\n        _tokenTransfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function _tokenTransfer(address _from, address _to, uint256 _value) private {\r\n        uint256 rValue = reflectionFromToken(_value);\r\n        bool isSell = _to == address(this);\r\n\r\n        if (isSell) {\r\n            uint256 rDevValue = reflectionFromToken(_value * 2 / 1000); \r\n            uint256 rMarketingValue = reflectionFromToken(_value / 100); \r\n            uint256 rBurnValue = reflectionFromToken(_value / 100);\r\n            uint256 rLiquidityValue = reflectionFromToken(_value * 1 / 100); \r\n            uint256 rReflectionFee = reflectionFromToken(_value / 100); \r\n\r\n            uint256 totalDeduction = tokenFromReflection(rDevValue + rMarketingValue + rBurnValue + rLiquidityValue + rReflectionFee);\r\n            uint256 toRecipientValue = _value - totalDeduction;\r\n\r\n            _rOwned[_from] -= rValue;\r\n            _rOwned[_to] += reflectionFromToken(toRecipientValue);\r\n            _rOwned[DevAddress] += rDevValue;\r\n            _rOwned[MarketingAddress] += rMarketingValue;\r\n            _rOwned[BurnAddress] += rBurnValue;\r\n            _rOwned[LiquidityAddress] += rLiquidityValue;\r\n\r\n            balanceOf[_from] -= _value;\r\n            balanceOf[_to] += toRecipientValue;\r\n            balanceOf[DevAddress] += tokenFromReflection(rDevValue);\r\n            balanceOf[MarketingAddress] += tokenFromReflection(rMarketingValue);\r\n            balanceOf[BurnAddress] += tokenFromReflection(rBurnValue);\r\n            balanceOf[LiquidityAddress] += tokenFromReflection(rLiquidityValue);\r\n\r\n            _rTotal -= rReflectionFee;\r\n\r\n            emit Transfer(_from, _to, toRecipientValue);\r\n            emit Transfer(_from, DevAddress, tokenFromReflection(rDevValue));\r\n            emit Transfer(_from, MarketingAddress, tokenFromReflection(rMarketingValue));\r\n            emit Transfer(_from, BurnAddress, tokenFromReflection(rBurnValue));\r\n            emit Transfer(_from, LiquidityAddress, tokenFromReflection(rLiquidityValue));\r\n        } else {\r\n            _rOwned[_from] -= rValue;\r\n            _rOwned[_to] += rValue;\r\n            balanceOf[_from] -= _value;\r\n            balanceOf[_to] += _value;\r\n            emit Transfer(_from, _to, _value);\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anyOneCanCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyOwnerCanCallThisFunc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LoraxToken", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5226123c85390b1c97b130efc97fd139b6570de3f631a1dfd8c21fdca5c8e118"}