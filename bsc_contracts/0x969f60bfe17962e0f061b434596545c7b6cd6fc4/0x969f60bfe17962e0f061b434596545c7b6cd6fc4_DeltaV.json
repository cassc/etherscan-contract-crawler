{"SourceCode": "/// @author demiurge\r\n/// improvements based on others work\r\n/// thanks to techlead, Diamond Dallas, tokindex, lightspeed, parsec, WEBANKYOU, ninja and web3Dguy\r\n/// DeltaV THRUST (c) DMG EQUITY FINANCE 2022\r\n/*\r\n ____       _ _      __     __  _____ _   _ ____  _   _ ____ _____ \r\n|  _ \\  ___| | |_ __ \\ \\   / / |_   _| | | |  _ \\| | | / ___|_   _|\r\n| | | |/ _ \\ | __/ _` \\ \\ / /    | | | |_| | |_) | | | \\___ \\ | |  \r\n| |_| |  __/ | || (_| |\\ V /     | | |  _  |  _ <| |_| |___) || |  \r\n|____/ \\___|_|\\__\\__,_| \\_/      |_| |_| |_|_| \\_\\\\___/|____/ |_|  \r\n                                                                   \r\n// The Rocket Science of CryptoCurrency Tokenomics\r\n// Hyper-Deflationary autostake rewards\r\n//  BUY fee 11.1% = 3.3% liquidity 2.3% marketing 2.2% developement 2.2% afterburner 1.1% burn\r\n//  SELL fee 22.2% = +3.3% marketing + 3.3% development + 4.5% AFTERBURNER = 11.1%\r\n// Hyper-Deflationary deltaV THRUST DVG S.M.A.R.T.D.A.T.A autorewards protocol\r\n// 50% of TotalSupply BURNED + 25% locked PULSAR APY BURNER + 1.1% volumeBURNER\r\n// ##################################### https://deltav.exchange ####################################\r\n*/\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.4;\r\n\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\r\n        require((b == 0) || (c / b == a));\r\n        return c;\r\n    }\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != -1 || a != MIN_INT256);\r\n        return a / b;\r\n    }\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\r\n        return c;\r\n    }\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\r\n        return c;\r\n    }\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256);\r\n        return a < 0 ? -a : a;\r\n    }\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n            return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a,uint256 b,string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n            return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n            return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a,uint256 b,string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n            return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n            return a % b;\r\n    }\r\n}\r\ninterface InterfaceLP {\r\n    function sync() external;\r\n}\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n// CEMENTER\r\nabstract contract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    constructor(string memory _tokenName,string memory _tokenSymbol,uint8 _tokenDecimals) {\r\n        _name = _tokenName;\r\n        _symbol = _tokenSymbol;\r\n        _decimals = _tokenDecimals;\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n// EXCHANGER\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline)\r\n    external returns (uint256 amountA,uint256 amountB,uint256 liquidity); // liquifier\r\n    function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline)\r\n    external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin,address[] calldata path, address to, uint256 deadline) external;\r\n}\r\ninterface IDEXFactory {\r\nfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n// SECURIZER\r\ncontract Ownable {\r\n    address private _owner;\r\n    event OwnershipRenounced(address indexed previousOwner);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {\r\n        _owner = msg.sender;\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Not owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipRenounced(_owner);\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n// DeltaV THRUSTER\r\ncontract DeltaV is ERC20Detailed, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeMathInt for int256;\r\n    bool public initialDistributionFinished = true;\r\n    bool public swapEnabled = true;\r\n    bool public autoRebase = true;\r\n    bool public feesOnNormalTransfers = false;\r\n    bool public isLiquidityInBnb = true;\r\n// REWARDS ACCUMULATOR\r\n    uint256 public rebaseFrequency = 120; // impulse engine\r\n    uint256 public rewardYield = 1543701; // gravitron\r\n    uint256 public rewardYieldDenominator = 1 * 10**11; // anti-gravity\r\n// DeltaV THRUST SLINGSHOT\r\n    uint256 private DeltaCounter = 0; // equibrium\r\n    uint256 internal inception = block.timestamp; // lightspeed\r\n    uint256 internal DeltaT = block.timestamp - inception; // warpspeed\r\n    uint256 internal TotalRewards = DeltaT % rebaseFrequency; // ionizer\r\n// uint256 internal slingshot = TotalRewards;\r\n    uint256 private epoch = DeltaCounter; // tractorbeam\r\n// MAX BUY SELL\r\n    uint256 public maxSellTransactionAmount = 11 * 10**21; // MLsanitizer\r\n    uint256 public maxBuyTransactionAmount = 22 * 10**21;  // sniperlimit\r\n// handshake\r\n    mapping(address => bool) _isFeeExempt;\r\n    address[] public _markerPairs;\r\n    mapping (address => bool) public automatedMarketMakerPairs;\r\n    uint256 public constant MAX_FEE_RATE = 23; // gluttony deflector\r\n    uint256 private constant MAX_REBASE_FREQUENCY = 3600; // accelerator\r\n    uint256 private constant DECIMALS = 18; // ETHEREUM\r\n    uint256 private constant MAX_UINT256 = ~uint256(0); // finiter\r\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 22222222 * 10**DECIMALS; // BITCOIN Duplicator\r\n    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\r\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // infinite reductionator\r\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address ZERO = 0x0000000000000000000000000000000000000000;\r\n    address public liquidityReceiver = 0xC75B704446D36d296C7138df969b4C1ba54D7326; // true value\r\n    address public treasuryReceiver = 0xa54B66632CFe3aD5C1520cB9a01666f0d76C79d4;// Marketing Community Development\r\n    address public riskFreeValueReceiver = 0xC75B704446D36d296C7138df969b4C1ba54D7326; // AFTERBURNER\r\n    address public busdToken = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56; // is BUSD\r\n    IDEXRouter public router;\r\n    address public pair;\r\n    uint256 public liquidityFee = 33;\r\n    uint256 public treasuryFee = 45;\r\n    uint256 public burnFee = 11; // BURNER\r\n    uint256 public buyFeeRFV = 22; // AFTERBURNER\r\n    uint256 public sellFeeTreasuryAdded = 66;\r\n    uint256 public sellFeeRFVAdded = 45;\r\n    uint256 public totalBuyFee = liquidityFee.add(treasuryFee).add(buyFeeRFV).add(burnFee);\r\n    uint256 public totalSellFee = totalBuyFee.add(sellFeeTreasuryAdded).add(sellFeeRFVAdded);\r\n    uint256 public feeDenominator = 1000;\r\n    uint256 targetLiquidity = 33;\r\n    uint256 targetLiquidityDenominator = 100;\r\n    bool inSwap;\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    modifier validRecipient(address to) {\r\n        require(to != address(0x0));\r\n        _;\r\n    }\r\n    uint256 private _totalSupply;\r\n    uint256 private _gonsPerFragment;\r\n    uint256 private gonSwapThreshold = (TOTAL_GONS * 10) / 10000; // less is more: more or less?\r\n    mapping(address => uint256) private _gonBalances;\r\n    mapping(address => mapping(address => uint256)) private _allowedFragments;\r\n// DeltaV THRUST builder\r\n    constructor() ERC20Detailed(\"DeltaV\", \"THRUST\", uint8(DECIMALS)) {\r\n        router = IDEXRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n        pair = IDEXFactory(router.factory()).createPair(address(this), router.WETH());\r\n        address pairBusd = IDEXFactory(router.factory()).createPair(address(this), busdToken);\r\n        _allowedFragments[address(this)][address(router)] = uint256(-1);\r\n        _allowedFragments[address(this)][pair] = uint256(-1);\r\n        _allowedFragments[address(this)][address(this)] = uint256(-1);\r\n        _allowedFragments[address(this)][pairBusd] = uint256(-1);\r\n        setAutomatedMarketMakerPair(pair, true);\r\n        setAutomatedMarketMakerPair(pairBusd, true);\r\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\r\n        _gonBalances[msg.sender] = TOTAL_GONS;\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n        _isFeeExempt[treasuryReceiver] = true;\r\n        _isFeeExempt[riskFreeValueReceiver] = true;\r\n        _isFeeExempt[address(this)] = true;\r\n        _isFeeExempt[msg.sender] = true;\r\n        IERC20(busdToken).approve(address(router), uint256(-1));\r\n        IERC20(busdToken).approve(address(pairBusd), uint256(-1));\r\n        IERC20(busdToken).approve(address(this), uint256(-1));\r\n        emit Transfer(address(0x0), msg.sender, _totalSupply);\r\n    }\r\n    receive() external payable {}\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function allowance(address owner_, address spender) external view override returns (uint256){\r\n        return _allowedFragments[owner_][spender];\r\n    }\r\n// BALANCER\r\n    function balanceOf(address who) public view override returns (uint256) {\r\n        return _gonBalances[who].div(_gonsPerFragment);\r\n    }\r\n    function checkFeeExempt(address _addr) external view returns (bool) {\r\n        return _isFeeExempt[_addr];\r\n    }\r\n    function checkSwapThreshold() external view returns (uint256) {\r\n        return gonSwapThreshold.div(_gonsPerFragment);\r\n    }\r\n   function shouldTakeFee(address from, address to) internal view returns (bool) {\r\n        if (_isFeeExempt[from] || _isFeeExempt[to]){\r\n            return false;\r\n        } else if (feesOnNormalTransfers){\r\n            return true;\r\n        } else {\r\n            return (automatedMarketMakerPairs[from] || automatedMarketMakerPairs[to]);\r\n        }\r\n    }\r\n    function shouldSwapBack() public view returns (bool) {\r\n        return !automatedMarketMakerPairs[msg.sender] && !inSwap && swapEnabled && totalBuyFee.add(totalSellFee) > 0 && _gonBalances[address(this)] >= gonSwapThreshold;\r\n    }\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return (TOTAL_GONS.sub(_gonBalances[DEAD]).sub(_gonBalances[ZERO])).div(_gonsPerFragment);\r\n    }\r\n    function getLiquidityBacking(uint256 accuracy) public view returns (uint256){\r\n        uint256 liquidityBalance = 0;\r\n        for(uint i = 0; i < _markerPairs.length; i++){\r\n            liquidityBalance.add(balanceOf(_markerPairs[i]).div(10 ** 18));\r\n        }\r\n        return accuracy.mul(liquidityBalance.mul(2)).div(getCirculatingSupply().div(10 ** 18));\r\n    }\r\n    function isOverLiquified(uint256 target, uint256 accuracy) public view returns (bool){\r\n        return getLiquidityBacking(accuracy) > target;\r\n    }\r\n    function manualSync() public {\r\n        for(uint i = 0; i < _markerPairs.length; i++){\r\n            InterfaceLP(_markerPairs[i]).sync();\r\n        }\r\n    }\r\n// DeltaV THRUST SLINGSHOT\r\nfunction SlingShot() private view returns (bool) {\r\n        return epoch != block.timestamp;\r\n    }\r\n   function _rebase() private {\r\n        if(!inSwap) {\r\n            uint256 circulatingSupply = getCirculatingSupply();\r\n            int256 supplyDelta = int256(circulatingSupply.mul(rewardYield).div(rewardYieldDenominator));\r\n            coreRebase(supplyDelta);\r\n        }\r\n    }\r\n    function coreRebase(int256 supplyDelta) private returns (uint256) {\r\n        epoch = block.timestamp;\r\n        if (supplyDelta == 0) {\r\n            emit LogRebase(epoch, _totalSupply);\r\n            return _totalSupply;\r\n        }\r\n           _totalSupply = _totalSupply.add(uint256(supplyDelta));\r\n        if (_totalSupply > MAX_SUPPLY) {\r\n            _totalSupply = MAX_SUPPLY;\r\n        }\r\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\r\n        emit LogRebase(epoch, _totalSupply);\r\n        return _totalSupply;\r\n    }\r\n// DeltaV THRUST AUTOPILOT ACCUMULATOR\r\n    function deltaV() internal returns (bool) {\r\n        DeltaT = block.timestamp - inception;\r\n        TotalRewards = DeltaT / rebaseFrequency;\r\n            if (DeltaCounter <= TotalRewards) {\r\n            DeltaCounter = DeltaCounter + 1;\r\n            return true;\r\n                } else {\r\n            return false;\r\n                }\r\n            } \r\n// THRUST HANDSHAKE\r\n    function transfer(address to, uint256 value) external override validRecipient(to) returns (bool){\r\n        _transferFrom(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    function _basicTransfer(address from, address to, uint256 amount) internal returns (bool) {\r\n        uint256 gonAmount = amount.mul(_gonsPerFragment);\r\n        _gonBalances[from] = _gonBalances[from].sub(gonAmount);\r\n        _gonBalances[to] = _gonBalances[to].add(gonAmount);\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        bool excludedAccount = _isFeeExempt[sender] || _isFeeExempt[recipient];\r\n        require(initialDistributionFinished || excludedAccount, \"LAUNCH INITIATED\");\r\n        if (automatedMarketMakerPairs[recipient] && !excludedAccount) {\r\n            require(amount <= maxSellTransactionAmount, \"MAX SELL EXCEED\");\r\n        }\r\n       if (automatedMarketMakerPairs[sender] && !excludedAccount) {\r\n            require(amount <= maxBuyTransactionAmount, \"MAX BUY EXCEEDED\");\r\n        }\r\n        if (deltaV() && autoRebase && SlingShot()) { \r\n                _rebase();\r\n        if (!automatedMarketMakerPairs[sender] && !automatedMarketMakerPairs[recipient]){\r\n                manualSync();\r\n            }\r\n        }\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n       uint256 gonAmount = amount.mul(_gonsPerFragment);\r\n        if (shouldSwapBack() && recipient!= DEAD) {\r\n            swapBack();\r\n        }\r\n        _gonBalances[sender] = _gonBalances[sender].sub(gonAmount);\r\n        uint256 gonAmountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, recipient, gonAmount) : gonAmount;\r\n        _gonBalances[recipient] = _gonBalances[recipient].add(gonAmountReceived);\r\n        emit Transfer(sender,recipient,gonAmountReceived.div(_gonsPerFragment));\r\n           return true;\r\n    }\r\n    function transferFrom(address from, address to, uint256 value) external override validRecipient(to) returns (bool) {\r\n        if (_allowedFragments[from][msg.sender] != uint256(-1)) {\r\n            _allowedFragments[from][msg.sender] = _allowedFragments[from][msg.sender].sub(value, \"INCREASE THRUST\");\r\n        }\r\n        _transferFrom(from, to, value);\r\n        return true;\r\n    }\r\n    function _swapAndLiquify(uint256 contractTokenBalance) private {\r\n        uint256 half = contractTokenBalance.div(2);\r\n        uint256 otherHalf = contractTokenBalance.sub(half);\r\n        if (isLiquidityInBnb){\r\n            uint256 initialBalance = address(this).balance;\r\n            _swapTokensForBNB(half, address(this));\r\n            uint256 newBalance = address(this).balance.sub(initialBalance);\r\n            _addLiquidity(otherHalf, newBalance);\r\n            emit SwapAndLiquify(half, newBalance, otherHalf);\r\n        } else {\r\n            uint256 initialBalance = IERC20(busdToken).balanceOf(address(this));\r\n            _swapTokensForBusd(half, address(this));\r\n            uint256 newBalance = IERC20(busdToken).balanceOf(address(this)).sub(initialBalance);\r\n            _addLiquidityBusd(otherHalf, newBalance);\r\n            emit SwapAndLiquifyBusd(half, newBalance, otherHalf);\r\n        }\r\n    }\r\n    function _addLiquidity(uint256 tokenAmount, uint256 bnbAmount) private {\r\n        router.addLiquidityETH{value: bnbAmount}(\r\n            address(this),tokenAmount,0,0,liquidityReceiver,block.timestamp);\r\n    }\r\n    function _addLiquidityBusd(uint256 tokenAmount, uint256 busdAmount) private {\r\n        router.addLiquidity(address(this),busdToken,tokenAmount,busdAmount,0,0,liquidityReceiver,block.timestamp);\r\n    }\r\n    function _swapTokensForBNB(uint256 tokenAmount, address receiver) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, receiver, block.timestamp);\r\n    }\r\n    function _swapTokensForBusd(uint256 tokenAmount, address receiver) private {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        path[2] = busdToken; // is BUSD\r\n        router.swapExactTokensForTokensSupportingFeeOnTransferTokens(tokenAmount, 0,  path,receiver, block.timestamp);\r\n    }\r\n    function swapBack() internal swapping {\r\n        uint256 realTotalFee = totalBuyFee.add(totalSellFee);\r\n        uint256 dynamicLiquidityFee = isOverLiquified(targetLiquidity, targetLiquidityDenominator) ? 0 : liquidityFee;\r\n        uint256 contractTokenBalance = _gonBalances[address(this)].div(_gonsPerFragment);\r\n        uint256 amountToLiquify = contractTokenBalance.mul(dynamicLiquidityFee.mul(2)).div(realTotalFee);\r\n        uint256 amountToRFV = contractTokenBalance.mul(buyFeeRFV.mul(2).add(sellFeeRFVAdded)).div(realTotalFee);\r\n        uint256 amountToTreasury = contractTokenBalance.sub(amountToLiquify).sub(amountToRFV);\r\n        if(amountToLiquify > 0){\r\n            _swapAndLiquify(amountToLiquify);\r\n        }\r\n        if(amountToRFV > 0){\r\n            _swapTokensForBusd(amountToRFV, riskFreeValueReceiver);\r\n        }\r\n        if(amountToTreasury > 0){\r\n            _swapTokensForBNB(amountToTreasury, treasuryReceiver);\r\n        }\r\n        emit SwapBack(contractTokenBalance, amountToLiquify, amountToRFV, amountToTreasury);\r\n    }\r\n    function takeFee(address sender, address recipient, uint256 gonAmount) internal returns (uint256){\r\n        uint256 _realFee = totalBuyFee;\r\n        if(automatedMarketMakerPairs[recipient]) _realFee = totalSellFee;\r\n        uint256 feeAmount = gonAmount.mul(_realFee).div(feeDenominator);\r\n        _gonBalances[address(this)] = _gonBalances[address(this)].add(feeAmount);\r\n        _transferFrom(address(this), address(0x000000000000000000000000000000000000dEaD), (gonAmount.div(_gonsPerFragment)).mul(burnFee).div(1000));\r\n        emit Transfer(sender, address(this), feeAmount.div(_gonsPerFragment));\r\n        return gonAmount.sub(feeAmount);\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool){\r\n        uint256 oldValue = _allowedFragments[msg.sender][spender];\r\n        if (subtractedValue >= oldValue) {\r\n            _allowedFragments[msg.sender][spender] = 0;\r\n        } else {\r\n            _allowedFragments[msg.sender][spender] = oldValue.sub(subtractedValue);\r\n        }\r\n        emit Approval(msg.sender,spender,_allowedFragments[msg.sender][spender]);\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool){\r\n        _allowedFragments[msg.sender][spender] = _allowedFragments[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender,spender,_allowedFragments[msg.sender][spender]);\r\n        return true;\r\n    }\r\n    function approve(address spender, uint256 value) external override returns (bool){\r\n        _allowedFragments[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n     function setAutomatedMarketMakerPair(address _pair, bool _value) public onlyOwner {\r\n        require(automatedMarketMakerPairs[_pair] != _value, \"Value already set\");\r\n        automatedMarketMakerPairs[_pair] = _value;\r\n        if (_value){\r\n            _markerPairs.push(_pair);\r\n        } else {\r\n            require(_markerPairs.length > 1, \"Required 1 pair\");\r\n            for (uint256 i = 0; i < _markerPairs.length; i++) {\r\n                if (_markerPairs[i] == _pair) {\r\n                    _markerPairs[i] = _markerPairs[_markerPairs.length - 1];\r\n                    _markerPairs.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        emit SetAutomatedMarketMakerPair(_pair, _value);\r\n    }\r\n    function setInitialDistributionFinished(bool _value) external onlyOwner {\r\n        require(initialDistributionFinished != _value, \"unchanged\");\r\n        initialDistributionFinished = _value;\r\n    }\r\n    function setFeeExempt(address _addr, bool _value) external onlyOwner {\r\n        require(_isFeeExempt[_addr] != _value, \"unchanged\");\r\n        _isFeeExempt[_addr] = _value;\r\n    }\r\n    function setTargetLiquidity(uint256 target, uint256 accuracy) external onlyOwner {\r\n        targetLiquidity = target;\r\n        targetLiquidityDenominator = accuracy;\r\n    }\r\n    function setSwapBackSettings(bool _enabled, uint256 _num, uint256 _denom) external onlyOwner {\r\n        swapEnabled = _enabled;\r\n        gonSwapThreshold = TOTAL_GONS.div(_denom).mul(_num);\r\n    }\r\n    function setFeeReceivers(address _liquidityReceiver, address _treasuryReceiver, address _riskFreeValueReceiver) external onlyOwner {\r\n        liquidityReceiver = _liquidityReceiver;\r\n        treasuryReceiver = _treasuryReceiver;\r\n        riskFreeValueReceiver = _riskFreeValueReceiver;\r\n    }\r\n    function clearStuckBalance(address _receiver) external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        payable(_receiver).transfer(balance);\r\n    }\r\n    function rescueToken(address tokenAddress, uint256 tokens) external onlyOwner returns (bool success){\r\n        return ERC20Detailed(tokenAddress).transfer(msg.sender, tokens);\r\n    }\r\n// AUTOPILOT\r\n    function setAutoRebase(bool _autoRebase) external onlyOwner {\r\n        require(autoRebase != _autoRebase, \"unchanged\");\r\n        autoRebase = _autoRebase;\r\n    }\r\n    function setRebaseFrequency(uint256 _rebaseFrequency) external onlyOwner {\r\n        require(_rebaseFrequency <= MAX_REBASE_FREQUENCY, \"MAXIMUM REWARDS EXCEEDED\");\r\n        rebaseFrequency = _rebaseFrequency;\r\n    }\r\n    function setRewardYield(uint256 _rewardYield, uint256 _rewardYieldDenominator) external onlyOwner {\r\n        rewardYield = _rewardYield;\r\n        rewardYieldDenominator = _rewardYieldDenominator;\r\n    }\r\n    function setFeesOnNormalTransfers(bool _enabled) external onlyOwner {\r\n        require(feesOnNormalTransfers != _enabled, \"unchanged\");\r\n        feesOnNormalTransfers = _enabled;\r\n    }\r\n    function setIsLiquidityInBnb(bool _value) external onlyOwner {\r\n        require(isLiquidityInBnb != _value, \"unchanged\");\r\n        isLiquidityInBnb = _value;\r\n    }\r\n// MAXSELL\r\n    function setMaxSellTransaction(uint256 _maxTxn) external onlyOwner {\r\n        maxSellTransactionAmount = _maxTxn;\r\n    }\r\n    function setMaxBuyTransaction(uint256 _maxTxn) external onlyOwner {\r\n        maxBuyTransactionAmount = _maxTxn;\r\n    }\r\n// ALTERNATOR\r\n    function setFees(uint256 _liquidityFee, uint256 _treasuryFee, uint256 _burnFee, uint256 _buyFeeRFV, uint256 _sellFeeRFVAdded, uint256 _sellFeeTreasuryAdded, uint256 _feeDenominator) external onlyOwner {\r\n        liquidityFee = _liquidityFee;\r\n        treasuryFee = _treasuryFee;\r\n        burnFee = _burnFee;\r\n        buyFeeRFV = _buyFeeRFV;\r\n        sellFeeRFVAdded = _sellFeeRFVAdded;\r\n        sellFeeTreasuryAdded = _sellFeeTreasuryAdded;\r\n        feeDenominator = _feeDenominator;\r\n        totalBuyFee = liquidityFee.add(treasuryFee).add(buyFeeRFV).add(burnFee);\r\n        totalSellFee = totalBuyFee.add(sellFeeTreasuryAdded).add(sellFeeRFVAdded);\r\n        }\r\n// S.M.A.R.T ANTICIPATOR\r\n    function updateRouter(address _address) external onlyOwner {\r\n        require(address(router) != _address, \"Router address already set\");\r\n        router = IDEXRouter(_address);\r\n    }  \r\n    event SwapBack(uint256 contractTokenBalance, uint256 amountToLiquify, uint256 amountToRFV, uint256 amountToTreasury);\r\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 bnbReceived, uint256 tokensIntoLiqudity);\r\n    event SwapAndLiquifyBusd(uint256 tokensSwapped, uint256 busdReceived, uint256 tokensIntoLiqudity);\r\n    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"LogRebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bnbReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"busdReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquifyBusd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contractTokenBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToLiquify\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToRFV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToTreasury\",\"type\":\"uint256\"}],\"name\":\"SwapBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_markerPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFeeRFV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"checkFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesOnNormalTransfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"getLiquidityBacking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialDistributionFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLiquidityInBnb\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"isOverLiquified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardYieldDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"riskFreeValueReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeRFVAdded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFeeTreasuryAdded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_autoRebase\",\"type\":\"bool\"}],\"name\":\"setAutoRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_riskFreeValueReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyFeeRFV\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFeeRFVAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFeeTreasuryAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeDenominator\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setFeesOnNormalTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setInitialDistributionFinished\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setIsLiquidityInBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxn\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTxn\",\"type\":\"uint256\"}],\"name\":\"setMaxSellTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rebaseFrequency\",\"type\":\"uint256\"}],\"name\":\"setRebaseFrequency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardYieldDenominator\",\"type\":\"uint256\"}],\"name\":\"setRewardYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_denom\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accuracy\",\"type\":\"uint256\"}],\"name\":\"setTargetLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldSwapBack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DeltaV", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://20ec1b53706e32cb07dbd410147bee594ab9f5f62d3de32fca834826bf4db6cc"}