{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.6;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// pragma solidity >=0.5.0;\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WHT() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ncontract TokenDividendTracker is Ownable {\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address[] public shareholders;\r\n    uint256 public currentIndex;  \r\n    mapping(address => bool) private _updated;\r\n    mapping (address => uint256) public shareholderIndexes;\r\n\r\n    IUniswapV2Router02 uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    address public lpRewardToken;\r\n    address public thisToken;\r\n    // \u4e0a\u6b21\u5206\u7ea2\u65f6\u95f4\r\n    uint256 public LPRewardLastSendTime;\r\n\r\n    uint256 public amountLpAvail = 100000*(10**9);\r\n\r\n    constructor(address ROUTER, address uniswapV2Pair_,address token,address thisToken_){\r\n        uniswapV2Pair = uniswapV2Pair_;\r\n        lpRewardToken =  token;\r\n        uniswapV2Router = IUniswapV2Router02(ROUTER);\r\n        thisToken = thisToken_;\r\n    }\r\n    receive() external payable {}\r\n    function resetLPRewardLastSendTime() public onlyOwner {\r\n        LPRewardLastSendTime = 0;\r\n    }\r\n\r\n    // LP\u5206\u7ea2\u53d1\u653e\r\n    function process(uint256 gas) external {\r\n        uint256 shareholderCount = shareholders.length;\t\r\n\r\n        if(shareholderCount == 0) return;\r\n        uint256 nowbanance = IERC20(lpRewardToken).balanceOf(address(this));\r\n        // uint256 nowbanance = address(this).balance;\r\n        if(nowbanance == 0) return;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n            if(currentIndex >= shareholderCount){\r\n                currentIndex = 0;\r\n                LPRewardLastSendTime = block.timestamp;\r\n                return;\r\n            }\r\n\r\n            uint256 amount = nowbanance.mul(IERC20(uniswapV2Pair).balanceOf(shareholders[currentIndex])).div(IERC20(uniswapV2Pair).totalSupply());\r\n            if( amount == 0) {\r\n                currentIndex++;\r\n                iterations++;\r\n                return;\r\n            }\r\n\r\n            IERC20(lpRewardToken).transfer(shareholders[currentIndex], amount);\r\n            // if(address(this).balance  < amount ) return;\r\n            // payable(shareholders[currentIndex]).transfer(amount);\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n    // \u6839\u636e\u6761\u4ef6\u81ea\u52a8\u5c06\u4ea4\u6613\u8d26\u6237\u52a0\u5165\u3001\u9000\u51fa\u6d41\u52a8\u6027\u5206\u7ea2\r\n    function setShare(address shareholder) external {\r\n        if(_updated[shareholder] ){      \r\n            if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0 || IERC20(thisToken).balanceOf(shareholder) < amountLpAvail) quitShare(shareholder);           \r\n            return;  \r\n        }\r\n        if(IERC20(thisToken).balanceOf(shareholder) < amountLpAvail){                \r\n            return;  \r\n        }\r\n        if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;  \r\n        addShareholder(shareholder);\t\r\n        _updated[shareholder] = true;\r\n          \r\n      }\r\n    function quitShare(address shareholder) internal {\r\n        removeShareholder(shareholder);   \r\n        _updated[shareholder] = false; \r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n    function setAmountLpAvail(uint256 number) external onlyOwner{\r\n        amountLpAvail = number;\r\n    }\r\n    \r\n}\r\ncontract TokenHolderDividendTracker is Ownable {\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    using SafeMath for uint256;\r\n\r\n    address[] public shareholders;\r\n    uint256 public currentIndex;  \r\n    mapping(address => bool) private _updated;\r\n    mapping (address => uint256) public shareholderIndexes;\r\n\r\n    address public thisToken;\r\n    address public lpRewardToken;\r\n    // \u4e0a\u6b21\u5206\u7ea2\u65f6\u95f4\r\n    uint256 public LPRewardLastSendTime;\r\n\r\n    uint256 public amountHolderAvail = 13140000*(10**9);\r\n\r\n    uint256 public availAmountTotal;//all amount of avail token holder \r\n\r\n    constructor( address thisToken_,address rewardtoken){\r\n        thisToken = thisToken_;\r\n        lpRewardToken =  rewardtoken;\r\n    }\r\n    receive() external payable {}\r\n    function resetLPRewardLastSendTime() public onlyOwner {\r\n        LPRewardLastSendTime = 0;\r\n    }\r\n\r\n    // \u6301\u5e01\u5206\u7ea2\u53d1\u653e\r\n    function process(uint256 gas) external {\r\n        uint256 shareholderCount = shareholders.length;\t\r\n\r\n        if(shareholderCount == 0) return;\r\n        uint256 nowbanance = IERC20(lpRewardToken).balanceOf(address(this));\r\n        // uint256 nowbanance = address(this).balance;\r\n        if(nowbanance == 0) return;\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n\r\n        uint256 iterations = 0;\r\n\r\n        while(gasUsed < gas && iterations < shareholderCount) {\r\n\r\n            if(currentIndex >= shareholderCount || availAmountTotal<1000000000){// if too small return\r\n                currentIndex = 0;\r\n                LPRewardLastSendTime = block.timestamp;\r\n                return;\r\n            }\r\n\r\n            uint256 amountHold = IERC20(thisToken).balanceOf(shareholders[currentIndex]);\r\n            if(amountHold < amountHolderAvail) {// if holder not avail\r\n                currentIndex++;\r\n                iterations++;\r\n                return;\r\n            } \r\n\r\n            uint256 amount = nowbanance.mul(amountHold).div(availAmountTotal);\r\n            if( amount == 0) {\r\n                currentIndex++;\r\n                iterations++;\r\n                return;\r\n            }\r\n\r\n            IERC20(lpRewardToken).transfer(shareholders[currentIndex], amount);\r\n            // if(address(this).balance  < amount ) return;\r\n            // payable(shareholders[currentIndex]).transfer(amount);\r\n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\r\n            gasLeft = gasleft();\r\n            currentIndex++;\r\n            iterations++;\r\n        }\r\n    }\r\n    // \u6839\u636e\u6761\u4ef6\u81ea\u52a8\u5c06\u4ea4\u6613\u8d26\u6237\u52a0\u5165\u3001\u9000\u51fa\u6d41\u52a8\u6027\u5206\u7ea2\r\n    function setShare(address shareholder) external {\r\n        uint256 balanceHolder = IERC20(thisToken).balanceOf(shareholder);\r\n        if(_updated[shareholder] ){      \r\n            if(balanceHolder < amountHolderAvail) quitShare(shareholder);           \r\n            return;  \r\n        }\r\n        \r\n        if(balanceHolder < amountHolderAvail || balanceHolder == 0) return;\r\n \r\n        addShareholder(shareholder);\t\r\n        _updated[shareholder] = true;\r\n        availAmountTotal += balanceHolder;\r\n    }\r\n    function quitShare(address shareholder) internal {\r\n        removeShareholder(shareholder);   \r\n        _updated[shareholder] = false; \r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n    function setAmountHolderAvail(uint256 number) external onlyOwner{\r\n        amountHolderAvail = number;\r\n    }\r\n    \r\n}\r\ncontract Token is IERC20,Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => bool) private WL;\r\n    mapping (address => bool) private BL;\r\n\r\n    uint8 private transferFeeOnOff=1; //1 fee 2 nofee\r\n\r\n    uint8 public buyDeadFee = 2;\r\n    uint8 public buyLpFee = 2; \r\n    uint8 public buyMarketFee = 3;\r\n    uint8 public buyHolderFee = 2;\r\n\r\n    address public walletDead = 0x000000000000000000000000000000000000dEaD;\r\n    address public walletMarket = 0xcbA61F31867584E4e3fc6e470278B652Cd6B9d4D;\r\n\r\n    TokenDividendTracker public dividendTracker;\r\n    TokenHolderDividendTracker public dividendHolderTracker;\r\n    address private fromAddress;\r\n    address private toAddress;\r\n    \r\n    mapping (address => bool) isDividendExempt;\r\n\r\n    address public uniswapV2Pair;//if transfer from this address ,meaning some one buying\r\n    IUniswapV2Router02 uniswapV2Router;\r\n\r\n    uint8 private buyOnOff=1; //1can buy 2can not buy\r\n    uint8 private sellOnOff=1; //1can sell 2can not sell\r\n    uint256 private openMarketTime = 0;\r\n\r\n    bool private swapping;\r\n    uint256 public AmountLpRewardFee;\r\n    uint256 public AmountHolderRewardFee;\r\n    uint256 public minPeriod = 7200;\r\n    uint256 public minPeriodHolder = 7200;\r\n    uint256 distributorGas = 200000;\r\n\r\n    address public contractUSDT;//test 0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684 main 0x55d398326f99059fF775485246999027B3197955\r\n    address public contractRewards;//testETH 0x8BaBbB98678facC7342735486C851ABD7A0d17Ca mainBTC 0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c\r\n\r\n    uint256 swapAmountLpReward ;\r\n    uint256 swapAmountHolder ;\r\n    // test 0x9ac64cc6e4415144c455bd8e4837fea55603e5c3 main 0x10ED43C718714eb63d5aA57B78B54704E256024E\r\n    constructor(address ROUTER, address USDT, address rewardToken){\r\n        _decimals = 9;\r\n        _symbol = \"BTG\";\r\n        _name = \"BTG\";\r\n        _totalSupply = 210000000000 * (10**_decimals);//first mint 1w\r\n\r\n        _creator = _msgSender();\r\n\r\n        contractUSDT = USDT;\r\n        contractRewards = rewardToken;\r\n\r\n        uniswapV2Router = IUniswapV2Router02(ROUTER);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(contractUSDT, address(this));\r\n        //uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n\r\n        dividendTracker = new TokenDividendTracker(ROUTER, uniswapV2Pair, contractRewards,address(this));\r\n        dividendHolderTracker = new TokenHolderDividendTracker( address(this), contractRewards);\r\n\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[address(0)] = true;\r\n        isDividendExempt[address(walletDead)] = true;\r\n        isDividendExempt[address(walletMarket)] = true;\r\n        isDividendExempt[address(dividendTracker)] = true;\r\n\r\n        emit Transfer(address(0), address(_creator), _totalSupply);\r\n        _balances[address(_creator)] = _totalSupply;\r\n    }\r\n\r\n    address private _creator;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    //\r\n    receive() external payable {}\r\n    modifier onlyPayloadSize(uint size) {\r\n        if (msg.data.length < size + 4) {\r\n            revert();\r\n        }\r\n        _;\r\n    }\r\n    function setWL(address add) external onlyOwner{\r\n        WL[add] = true;\r\n    }\r\n    function unsetWL(address add) external onlyOwner{\r\n        WL[add] = false;\r\n    }\r\n    function setBL(address add) external onlyOwner{\r\n        BL[add] = true;\r\n    }\r\n    function unsetBL(address add) external onlyOwner{\r\n        BL[add] = false;\r\n    }\r\n    function setSwapAmountLpReward(uint256 number) external onlyOwner{\r\n        swapAmountLpReward  = number;\r\n    }\r\n    function setSwapAmountHolder(uint256 number) external onlyOwner{\r\n        swapAmountHolder  = number;\r\n    }\r\n    function setBuyDeadFee(uint8 num) external onlyOwner returns (uint8){\r\n        buyDeadFee = num;\r\n        return buyDeadFee;\r\n    }\r\n    function setBuyHolderFee(uint8 num) external onlyOwner returns (uint8){\r\n        buyHolderFee = num;\r\n        return buyHolderFee;\r\n    }\r\n    function setBuyLpFee(uint8 num) external onlyOwner returns (uint8){\r\n        buyLpFee = num;\r\n        return buyLpFee;\r\n    }\r\n    function setBuyMarketFee(uint8 num) external onlyOwner returns (uint8){\r\n        buyMarketFee = num;\r\n        return buyMarketFee;\r\n    }\r\n    \r\n    function setWalletDead(address add) external onlyOwner returns (address){\r\n        walletDead = add;\r\n        return walletDead;\r\n    }\r\n    function setWalletMarket(address add) external onlyOwner returns (address){\r\n        walletMarket = add;\r\n        return walletMarket;\r\n    }\r\n\r\n    function setTransferFeeOnOff(uint8 oneortwo) external onlyOwner returns (uint8){\r\n        transferFeeOnOff = oneortwo;\r\n        return transferFeeOnOff;\r\n    }\r\n    function setBuyOnOff(uint8 oneortwo) external onlyOwner returns (uint8){\r\n        buyOnOff = oneortwo;\r\n        if(oneortwo == 1){\r\n            openMarketTime = block.timestamp;\r\n        }else{\r\n            openMarketTime = 0;\r\n        }\r\n        return buyOnOff;\r\n    }\r\n    function setMinPeriod(uint256 number) public onlyOwner {\r\n        minPeriod = number;\r\n    }\r\n    function setMinPeriodHolder(uint256 number) public onlyOwner {\r\n        minPeriodHolder = number;\r\n    }\r\n    function updateDistributorGas(uint256 newValue) public onlyOwner {\r\n        require(newValue >= 100000 && newValue <= 2000000, \"distributorGas must be between 200,000 and 2000,000\");\r\n        require(newValue != distributorGas, \"Cannot update distributorGas to same value\");\r\n        distributorGas = newValue;\r\n    }\r\n    function processDividend() public {\r\n        try dividendTracker.process(distributorGas) {} catch {}\r\n    }\r\n    function setAmountLpAvail(uint256 number) public {\r\n        try dividendTracker.setAmountLpAvail(number) {} catch {}\r\n    }\r\n    function processDividendHolder() public {\r\n        try dividendHolderTracker.process(distributorGas) {} catch {}\r\n    }\r\n    function setAmountHolderAvail(uint256 number) public {\r\n        try dividendHolderTracker.setAmountHolderAvail(number) {} catch {}\r\n    }\r\n    function decimals() external override view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external override view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external override view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return _creator;\r\n    }\r\n\r\n    function totalSupply() external override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) external override view returns (uint256){\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external onlyPayloadSize(2 * 32) override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public onlyPayloadSize(2 * 32) returns (bool){\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public onlyPayloadSize(2 * 32) returns (bool){\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _owner, address _to, uint256 amount) external override returns (bool) {\r\n        _transferFrom( _owner,  _to,  amount);\r\n        return true;\r\n    }\r\n    function _transferFrom(address _owner, address _to, uint256 amount) internal returns (bool) {\r\n        _transfer(_owner, _to, amount);\r\n        _approve(_owner, _msgSender(), _allowances[_owner][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"BEP20: approve from the zero address\");\r\n        require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    bool isProcess = false;\r\n    function deflationCheck() public{\r\n        if(!isProcess  &&  _balances[walletDead] > _totalSupply.div(2)){\r\n            buyDeadFee = 1;\r\n            buyMarketFee =1;\r\n            buyLpFee = 1;\r\n            isProcess=true;\r\n        }\r\n    }\r\n\r\n    uint256 bitgodPrice = 0;\r\n    uint256 priceUpdateTime=0;\r\n    function waterfall() public{\r\n        uint256 poolBalanceUSDT = IERC20(contractUSDT).balanceOf(uniswapV2Pair);\r\n        uint256 poolBalanceBITGOD = _balances[uniswapV2Pair];\r\n        if(poolBalanceUSDT == 0 || poolBalanceBITGOD ==0) return;\r\n        if(poolBalanceBITGOD > poolBalanceUSDT) return;\r\n\r\n        uint256 bitgodPrice_ = poolBalanceUSDT.div(poolBalanceBITGOD).mul(10000);\r\n        if(bitgodPrice_ == 0) return;\r\n\r\n        if(bitgodPrice == 0 || block.timestamp.sub(priceUpdateTime)>80000){//a day = 86400\r\n            bitgodPrice = bitgodPrice_;\r\n            priceUpdateTime = block.timestamp;\r\n        }\r\n\r\n        if(bitgodPrice_ >= bitgodPrice) return;\r\n\r\n        if(bitgodPrice.mul(50).div(100) > bitgodPrice_){\r\n            buyDeadFee=18;\r\n        }\r\n        else if(bitgodPrice.mul(70).div(100) > bitgodPrice_){\r\n            buyDeadFee=13;\r\n        }\r\n        else if(bitgodPrice.mul(80).div(100) > bitgodPrice_){\r\n            buyDeadFee=8;\r\n        }else{\r\n            buyDeadFee=2;\r\n        }\r\n    }\r\n    function swapTokensForCakeTEST()public{\r\n        swapTokensForCake(100000000,address(dividendTracker));\r\n    }\r\n    function swapTokensForCakeLP()public{\r\n        swapTokensForCake(AmountLpRewardFee,address(dividendTracker));\r\n    }\r\n    function swapTokensForCakeHolder()public{\r\n        swapTokensForCake(AmountHolderRewardFee,address(dividendHolderTracker));\r\n    }\r\n\r\n    function swapTokensForCake(uint256 tokenAmount,address diviContract) private {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = address(contractUSDT);\r\n        path[2] = address(contractRewards);\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        // _approve(address(contractUSDT), address(uniswapV2Router), tokenAmount);\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(diviContract),\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n\r\n    function takeAllFee(address from, uint256 amount) private returns(uint256 amountAfter) {\r\n        amountAfter = amount;\r\n\r\n        uint256 DFee = 0;\r\n        uint256 LFee = 0;\r\n        uint256 MFee = 0;\r\n        uint256 HFee = 0;\r\n\r\n        //buy or sell\r\n        DFee = amount.mul(buyDeadFee).div(100);\r\n        LFee = amount.mul(buyLpFee).div(100);\r\n        MFee = amount.mul(buyMarketFee).div(100);\r\n        HFee = amount.mul(buyHolderFee).div(100);\r\n        \r\n        amountAfter = amountAfter.sub(DFee);\r\n        if(DFee > 0) doTransfer(from, walletDead, DFee);\r\n\r\n        amountAfter = amountAfter.sub(MFee);\r\n        if(MFee > 0) doTransfer(from, walletMarket, MFee);\r\n\r\n        amountAfter = amountAfter.sub(LFee);\r\n        if(LFee > 0) doTransfer(from, address(this), LFee);\r\n        AmountLpRewardFee += LFee;\r\n\r\n        amountAfter = amountAfter.sub(HFee);\r\n        if(HFee > 0) doTransfer(from, address(this), HFee);\r\n        AmountHolderRewardFee += HFee;\r\n\r\n        return amountAfter;\r\n\r\n    }\r\n\r\n    \r\n    function _transfer(address from, address recipient, uint256 amount) internal {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        require(_balances[from] >= amount, \"BEP20: transfer amount exceeds balance\");\r\n        if(amount == 0 ) {doTransfer(from, recipient, 0);return;}\r\n\r\n        require( !BL[from] && !BL[recipient], \"don't scamming\");\r\n\r\n        if(from == uniswapV2Pair){\r\n            // 1can buy 2can not buy\r\n            if(buyOnOff == 2){\r\n                require(from == _creator || recipient == _creator || WL[from] || WL[recipient], \"market close\");\r\n            }\r\n        }\r\n\r\n        uint256 balanceThis = _balances[address(this)];\r\n        bool canSwap = balanceThis > swapAmountLpReward.add(swapAmountHolder);\r\n        if( balanceThis >0 &&\r\n            canSwap &&\r\n            !swapping &&\r\n            from != uniswapV2Pair \r\n        ) {\r\n            swapping = true;\r\n            if(AmountLpRewardFee>swapAmountLpReward && _balances[address(this)]>=AmountLpRewardFee){\r\n                swapTokensForCake(AmountLpRewardFee,address(dividendTracker));\r\n                AmountLpRewardFee = 0;\r\n\r\n            }else if(AmountHolderRewardFee>swapAmountHolder && _balances[address(this)]>=AmountHolderRewardFee){\r\n                swapTokensForCake(AmountHolderRewardFee,address(dividendHolderTracker));\r\n                AmountHolderRewardFee = 0;\r\n            }\r\n            swapping = false;\r\n        }\r\n\r\n        //fee switch  when transferFeeOnOff is 2 no fee, whitelist also no fee\r\n        if(transferFeeOnOff == 2 \r\n            || swapping\r\n            || from == owner()\r\n            || recipient == owner()\r\n            || WL[from]\r\n            || WL[recipient]\r\n        ){\r\n            \r\n        }else{\r\n\r\n            //LP/swap \r\n            if(from == uniswapV2Pair || recipient == uniswapV2Pair){\r\n                if(!swapping) {\r\n                    swapping = true;\r\n                    amount = takeAllFee( from,  amount);\r\n                    swapping = false;\r\n                }\r\n            }else{//normal transfer\r\n\r\n            }\r\n\r\n        }\r\n\r\n        doTransfer(from, recipient, amount);\r\n\r\n        if(fromAddress == address(0) )fromAddress = from;\r\n        if(toAddress == address(0) )toAddress = recipient;  \r\n        if(!isDividendExempt[fromAddress] && fromAddress != uniswapV2Pair )   try dividendTracker.setShare(fromAddress) {} catch {}\r\n        if(!isDividendExempt[toAddress] && toAddress != uniswapV2Pair ) try dividendTracker.setShare(toAddress) {} catch {}\r\n        if(!isDividendExempt[fromAddress] && fromAddress != uniswapV2Pair )   try dividendHolderTracker.setShare(fromAddress) {} catch {}\r\n        if(!isDividendExempt[toAddress] && toAddress != uniswapV2Pair ) try dividendHolderTracker.setShare(toAddress) {} catch {}\r\n        fromAddress = from;\r\n        toAddress = recipient;  \r\n\r\n       if(  !swapping && \r\n            from != owner() &&\r\n            recipient != owner() &&\r\n            from !=address(this) &&\r\n            dividendTracker.LPRewardLastSendTime().add(minPeriod) <= block.timestamp\r\n        ) {\r\n            try dividendTracker.process(distributorGas) {} catch {}    \r\n        }\r\n        if(  !swapping && \r\n            from != owner() &&\r\n            recipient != owner() &&\r\n            from !=address(this) &&\r\n            dividendHolderTracker.LPRewardLastSendTime().add(minPeriodHolder) <= block.timestamp\r\n        ) {\r\n            try dividendHolderTracker.process(distributorGas) {} catch {}\r\n        }\r\n\r\n        deflationCheck();\r\n        waterfall();\r\n    }\r\n    function transfer(address _to, uint256 amount) external onlyPayloadSize(2 * 32) override returns (bool){\r\n        _transfer(_msgSender(), _to, amount);\r\n        return true;\r\n    }\r\n    function doTransfer(address from, address recipient, uint256 amount) internal {\r\n        require(from != address(0), \"BEP20: transfer from the zero address\");\r\n        _balances[from] = _balances[from].sub(amount, \"transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(from, recipient, amount);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ROUTER\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"USDT\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AmountHolderRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AmountLpRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDeadFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyHolderFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLpFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractUSDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deflationCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendHolderTracker\",\"outputs\":[{\"internalType\":\"contract TokenHolderDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"contract TokenDividendTracker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriodHolder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processDividendHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"setAmountHolderAvail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"setAmountLpAvail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setBL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"setBuyDeadFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"setBuyHolderFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"setBuyLpFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"num\",\"type\":\"uint8\"}],\"name\":\"setBuyMarketFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"oneortwo\",\"type\":\"uint8\"}],\"name\":\"setBuyOnOff\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"setMinPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"setMinPeriodHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"setSwapAmountHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"setSwapAmountLpReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"oneortwo\",\"type\":\"uint8\"}],\"name\":\"setTransferFeeOnOff\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setWL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setWalletDead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"setWalletMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensForCakeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensForCakeLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensForCakeTEST\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"unsetBL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"add\",\"type\":\"address\"}],\"name\":\"unsetWL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDistributorGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletDead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waterfall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e00000000000000000000000055d398326f99059ff775485246999027b31979550000000000000000000000007130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6351309f751cbd6f669163fef8785bbb5b250aa97b950b0411bc700d60bac17d"}