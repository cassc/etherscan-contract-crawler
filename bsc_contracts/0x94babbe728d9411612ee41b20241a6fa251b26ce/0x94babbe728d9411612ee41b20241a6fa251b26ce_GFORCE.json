{"SourceCode": "//////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//                                                                                                      //\r\n//   \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557  \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2557   \u2588\u2588\u2557  //\r\n//  \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d    \u255a\u2550\u2550\u2588\u2588\u2554\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551 \u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551  //\r\n//  \u2588\u2588\u2551  \u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2557         \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551  //\r\n//  \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u255d         \u2588\u2588\u2551   \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2588\u2588\u2557 \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551  //\r\n//  \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551     \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557       \u2588\u2588\u2551   \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551  \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551  //\r\n//   \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d      \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d       \u255a\u2550\u255d    \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d  //\r\n//                                                                                                      //\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash =\r\n            0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an BNB balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) =\r\n            target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IPancakeV2Factory {\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n}\r\n\r\ninterface IPancakeV2Pair {\r\n    function sync() external;\r\n}\r\n\r\ninterface IPancakeV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n}\r\n\r\ninterface IPancakeV2Router02 is IPancakeV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n}\r\n\r\ncontract Balancer {\r\n    using SafeMath for uint256;\r\n    IPancakeV2Router02 public immutable _pancakeV2Router;\r\n    GFORCE private _tokenContract;\r\n\r\n    constructor(GFORCE tokenContract, IPancakeV2Router02 pancakeV2Router)\r\n        public\r\n    {\r\n        _tokenContract = tokenContract;\r\n        _pancakeV2Router = pancakeV2Router;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function rebalance() external returns (uint256) {\r\n        swapEthForTokens(address(this).balance);\r\n    }\r\n\r\n    function swapEthForTokens(uint256 EthAmount) private {\r\n        address[] memory pancakePairPath = new address[](2);\r\n        pancakePairPath[0] = _pancakeV2Router.WETH();\r\n        pancakePairPath[1] = address(_tokenContract);\r\n\r\n        _pancakeV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: EthAmount\r\n        }(0, pancakePairPath, address(this), block.timestamp);\r\n    }\r\n}\r\n\r\ncontract Swaper {\r\n    using SafeMath for uint256;\r\n    IPancakeV2Router02 public immutable _pancakeV2Router;\r\n    GFORCE private _tokenContract;\r\n\r\n    constructor(GFORCE tokenContract, IPancakeV2Router02 pancakeV2Router)\r\n        public\r\n    {\r\n        _tokenContract = tokenContract;\r\n        _pancakeV2Router = pancakeV2Router;\r\n    }\r\n\r\n    function swapTokens(address pairTokenAddress, uint256 tokenAmount)\r\n        external\r\n    {\r\n        uint256 initialPairTokenBalance =\r\n            IERC20(pairTokenAddress).balanceOf(address(this));\r\n        swapTokensForTokens(pairTokenAddress, tokenAmount);\r\n        uint256 newPairTokenBalance =\r\n            IERC20(pairTokenAddress).balanceOf(address(this)).sub(\r\n                initialPairTokenBalance\r\n            );\r\n        IERC20(pairTokenAddress).transfer(\r\n            address(_tokenContract),\r\n            newPairTokenBalance\r\n        );\r\n    }\r\n\r\n    function swapTokensForTokens(address pairTokenAddress, uint256 tokenAmount)\r\n        private\r\n    {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(_tokenContract);\r\n        path[1] = pairTokenAddress;\r\n\r\n        _tokenContract.approve(address(_pancakeV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        _pancakeV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of pair token\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n}\r\n\r\ncontract GFORCE is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    IPancakeV2Router02 public immutable _pancakeV2Router;\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    mapping(address => bool) private _isExcluded;\r\n    mapping(address => bool) public _isWhiteListed;\r\n    address[] private _excluded;\r\n    address public _pancakeBNBPool;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 1000000e9;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 public _tFeeTotal;\r\n    uint256 public _tBurnTotal;\r\n\r\n    string private _name = \"GFORCE\";\r\n    string private _symbol = \"GFCE\";\r\n    uint8 private _decimals = 9;\r\n\r\n    uint256 public _feeDecimals = 1;\r\n    uint256 public _taxFee = 10;\r\n    uint256 public _lockFee = 10;\r\n    uint256 public _maxTxAmount = 1000000e9;\r\n    uint256 public _minTokensBeforeSwap = 100e9;\r\n    uint256 private _autoSwapCallerFee = 2e9;\r\n\r\n    address public _lpStakingPool =\r\n        address(0x305b0eCf72634825f7231058444c65D885E1f327); // should update when LP staking pool deployed\r\n    address public _jetsStakingPool =\r\n        address(0x305b0eCf72634825f7231058444c65D885E1f327); // should update when JETS staking pool deployed\r\n\r\n    bool private inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled;\r\n    bool public tradingEnabled;\r\n\r\n    address private currentPairTokenAddress;\r\n    address private currentPoolAddress;\r\n\r\n    event FeeDecimalsUpdated(uint256 taxFeeDecimals);\r\n    event TaxFeeUpdated(uint256 taxFee);\r\n    event LockFeeUpdated(uint256 lockFee);\r\n    event MaxTxAmountUpdated(uint256 maxTxAmount);\r\n    event PoolAndPairTokenUpdated(\r\n        address indexed poolAddress,\r\n        address indexed pairTokenAddress\r\n    );\r\n    event StakingPoolUpdated(\r\n        address indexed lpStakingPool,\r\n        address indexed jetsStakingPool\r\n    );\r\n    event TradingEnabled();\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        address indexed pairTokenAddress,\r\n        uint256 tokensSwapped,\r\n        uint256 pairTokenReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    event Rebalance(uint256 tokenBurnt);\r\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\r\n    event AutoSwapCallerFeeUpdated(uint256 autoSwapCallerFee);\r\n\r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n\r\n    Balancer public balancer;\r\n    Swaper public swaper;\r\n\r\n    constructor(IPancakeV2Router02 pancakeV2Router) public {\r\n        _pancakeV2Router = pancakeV2Router;\r\n\r\n        balancer = new Balancer(this, pancakeV2Router);\r\n        swaper = new Swaper(this, pancakeV2Router);\r\n\r\n        currentPoolAddress = IPancakeV2Factory(pancakeV2Router.factory())\r\n            .createPair(address(this), pancakeV2Router.WETH());\r\n        currentPairTokenAddress = pancakeV2Router.WETH();\r\n        _pancakeBNBPool = currentPoolAddress;\r\n\r\n        updateSwapAndLiquifyEnabled(false);\r\n\r\n        _rOwned[_msgSender()] = reflectionFromToken(_tTotal, false);\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(\r\n                subtractedValue,\r\n                \"ERC20: decreased allowance below zero\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function isExcluded(address account) public view returns (bool) {\r\n        return _isExcluded[account];\r\n    }\r\n\r\n    function isWhiteListed(address account) public view returns (bool) {\r\n        return _isWhiteListed[account];\r\n    }\r\n\r\n    function materialize(uint256 tAmount) public {\r\n        address sender = _msgSender();\r\n        require(\r\n            !_isExcluded[sender],\r\n            \"Gforce: Excluded addresses cannot call this function\"\r\n        );\r\n        (uint256 rAmount, , , , , ) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rTotal = _rTotal.sub(rAmount);\r\n        _tFeeTotal = _tFeeTotal.add(tAmount);\r\n    }\r\n\r\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\r\n        if (!deductTransferFee) {\r\n            (uint256 rAmount, , , , , ) = _getValues(tAmount);\r\n            return rAmount;\r\n        } else {\r\n            (, uint256 rTransferAmount, , , , ) = _getValues(tAmount);\r\n            return rTransferAmount;\r\n        }\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            rAmount <= _rTotal,\r\n            \"Gforce: Amount must be less than total reflections\"\r\n        );\r\n        uint256 currentRate = _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function excludeAccount(address account) external onlyOwner() {\r\n        require(\r\n            account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D,\r\n            \"Gforce: We can not exclude Pancake router.\"\r\n        );\r\n        require(\r\n            account != address(this),\r\n            \"Gforce: We can not exclude contract self.\"\r\n        );\r\n        require(!_isExcluded[account], \"Gforce: Account is already excluded\");\r\n\r\n        if (_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        _isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeAccount(address account) external onlyOwner() {\r\n        require(_isExcluded[account], \"Gforce: Account is already included\");\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                _isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function includeWhiteList(address account) external onlyOwner() {\r\n        require(\r\n            !_isWhiteListed[account],\r\n            \"Gforce: Account is already whitelisted\"\r\n        );\r\n\r\n        _isWhiteListed[account] = true;\r\n    }\r\n\r\n    function excludeWhiteList(address account) external onlyOwner() {\r\n        require(\r\n            _isWhiteListed[account],\r\n            \"Gforce: Account is not already whitelisted\"\r\n        );\r\n\r\n        _isWhiteListed[account] = false;\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) private {\r\n        require(owner != address(0), \"Gforce: approve from the zero address\");\r\n        require(spender != address(0), \"Gforce: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) private {\r\n        require(sender != address(0), \"Gforce: transfer from the zero address\");\r\n        require(\r\n            recipient != address(0),\r\n            \"Gforce: transfer to the zero address\"\r\n        );\r\n        require(\r\n            amount > 0,\r\n            \"Gforce: Transfer amount must be greater than zero\"\r\n        );\r\n\r\n        if (sender != owner() && recipient != owner() && !inSwapAndLiquify) {\r\n            require(\r\n                amount <= _maxTxAmount,\r\n                \"Gforce: Transfer amount exceeds the maxTxAmount.\"\r\n            );\r\n            if (\r\n                (_msgSender() == currentPoolAddress ||\r\n                    _msgSender() == address(_pancakeV2Router)) &&\r\n                !tradingEnabled\r\n            ) require(false, \"Gforce: trading is disabled.\");\r\n        }\r\n\r\n        if (!inSwapAndLiquify) {\r\n            uint256 lockedBalanceForPool = balanceOf(address(this));\r\n            bool overMinTokenBalance =\r\n                lockedBalanceForPool >= _minTokensBeforeSwap;\r\n            if (\r\n                overMinTokenBalance &&\r\n                msg.sender != currentPoolAddress &&\r\n                swapAndLiquifyEnabled\r\n            ) {\r\n                if (currentPairTokenAddress == _pancakeV2Router.WETH())\r\n                    swapAndLiquifyForEth(lockedBalanceForPool);\r\n                else\r\n                    swapAndLiquifyForTokens(\r\n                        currentPairTokenAddress,\r\n                        lockedBalanceForPool\r\n                    );\r\n            }\r\n        }\r\n\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferStandard(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function swapAndLiquifyForEth(uint256 lockedBalanceForPool)\r\n        private\r\n        lockTheSwap\r\n    {\r\n        // split the contract balance except swapCallerFee into halves\r\n        uint256 lockedForSwapAndJetsPool =\r\n            lockedBalanceForPool.sub(_autoSwapCallerFee);\r\n\r\n        // 5% is used for jets staking pool reward\r\n        uint256 lockedForJetsPool = lockedForSwapAndJetsPool.mul(5).div(100);\r\n        _transfer(address(this), _jetsStakingPool, lockedForJetsPool);\r\n\r\n        // 95% is used for swapping and adding liquidity\r\n        uint256 lockedForSwap = lockedForSwapAndJetsPool.mul(95).div(100);\r\n\r\n        uint256 half = lockedForSwap.div(2);\r\n        uint256 otherHalf = lockedForSwap.sub(half);\r\n\r\n        // capture the contract's current BNB balance.\r\n        // this is so that we can capture exactly the amount of BNB that the\r\n        // swap creates, and not make the liquidity event include any BNB that\r\n        // has been manually sent to the contract\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        // swap tokens for BNB\r\n        swapTokensForEth(half);\r\n\r\n        // how much BNB did we just swap into?\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        // add liquidity to pancake\r\n        addLiquidityForEth(otherHalf, newBalance);\r\n\r\n        emit SwapAndLiquify(\r\n            _pancakeV2Router.WETH(),\r\n            half,\r\n            newBalance,\r\n            otherHalf\r\n        );\r\n\r\n        _transfer(address(this), tx.origin, _autoSwapCallerFee);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the pancake pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _pancakeV2Router.WETH();\r\n\r\n        _approve(address(this), address(_pancakeV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        _pancakeV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of BNB\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidityForEth(uint256 tokenAmount, uint256 ethAmount)\r\n        private\r\n    {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(_pancakeV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        _pancakeV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(_lpStakingPool),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapAndLiquifyForTokens(\r\n        address pairTokenAddress,\r\n        uint256 lockedBalanceForPool\r\n    ) private lockTheSwap {\r\n        // split the contract balance except swapCallerFee into halves\r\n        uint256 lockedForSwapAndJetsPool =\r\n            lockedBalanceForPool.sub(_autoSwapCallerFee);\r\n\r\n        // 5% is used for jets staking pool reward\r\n        uint256 lockedForJetsPool = lockedForSwapAndJetsPool.mul(5).div(100);\r\n        _transfer(address(this), _jetsStakingPool, lockedForJetsPool);\r\n\r\n        // 95% is used for swapping and adding liquidity\r\n        uint256 lockedForSwap = lockedForSwapAndJetsPool.mul(95).div(100);\r\n\r\n        uint256 half = lockedForSwap.div(2);\r\n        uint256 otherHalf = lockedForSwap.sub(half);\r\n\r\n        _transfer(address(this), address(swaper), half);\r\n\r\n        uint256 initialPairTokenBalance =\r\n            IERC20(pairTokenAddress).balanceOf(address(this));\r\n\r\n        // swap tokens for pairToken\r\n        swaper.swapTokens(pairTokenAddress, half);\r\n\r\n        uint256 newPairTokenBalance =\r\n            IERC20(pairTokenAddress).balanceOf(address(this)).sub(\r\n                initialPairTokenBalance\r\n            );\r\n\r\n        // add liquidity to pancake\r\n        addLiquidityForTokens(pairTokenAddress, otherHalf, newPairTokenBalance);\r\n\r\n        emit SwapAndLiquify(\r\n            pairTokenAddress,\r\n            half,\r\n            newPairTokenBalance,\r\n            otherHalf\r\n        );\r\n\r\n        _transfer(address(this), tx.origin, _autoSwapCallerFee);\r\n    }\r\n\r\n    function addLiquidityForTokens(\r\n        address pairTokenAddress,\r\n        uint256 tokenAmount,\r\n        uint256 pairTokenAmount\r\n    ) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(_pancakeV2Router), tokenAmount);\r\n        IERC20(pairTokenAddress).approve(\r\n            address(_pancakeV2Router),\r\n            pairTokenAmount\r\n        );\r\n\r\n        // add the liquidity\r\n        _pancakeV2Router.addLiquidity(\r\n            address(this),\r\n            pairTokenAddress,\r\n            tokenAmount,\r\n            pairTokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(_lpStakingPool),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _transferStandard(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLock\r\n        ) = _getValues(tAmount);\r\n        uint256 rLock = tLock.mul(currentRate);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        if (inSwapAndLiquify) {\r\n            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n            emit Transfer(sender, recipient, tAmount);\r\n        } else {\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n            _rOwned[address(this)] = _rOwned[address(this)].add(rLock);\r\n            _reflectFee(rFee, tFee);\r\n            emit Transfer(sender, address(this), tLock);\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n        }\r\n    }\r\n\r\n    function _transferToExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLock\r\n        ) = _getValues(tAmount);\r\n        uint256 rLock = tLock.mul(currentRate);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        if (inSwapAndLiquify) {\r\n            _tOwned[recipient] = _tOwned[recipient].add(tAmount);\r\n            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n            emit Transfer(sender, recipient, tAmount);\r\n        } else {\r\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n            _rOwned[address(this)] = _rOwned[address(this)].add(rLock);\r\n            _reflectFee(rFee, tFee);\r\n            emit Transfer(sender, address(this), tLock);\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n        }\r\n    }\r\n\r\n    function _transferFromExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLock\r\n        ) = _getValues(tAmount);\r\n        uint256 rLock = tLock.mul(currentRate);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        if (inSwapAndLiquify) {\r\n            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n            emit Transfer(sender, recipient, tAmount);\r\n        } else {\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n            _rOwned[address(this)] = _rOwned[address(this)].add(rLock);\r\n            _reflectFee(rFee, tFee);\r\n            emit Transfer(sender, address(this), tLock);\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n        }\r\n    }\r\n\r\n    function _transferBothExcluded(\r\n        address sender,\r\n        address recipient,\r\n        uint256 tAmount\r\n    ) private {\r\n        uint256 currentRate = _getRate();\r\n        (\r\n            uint256 rAmount,\r\n            uint256 rTransferAmount,\r\n            uint256 rFee,\r\n            uint256 tTransferAmount,\r\n            uint256 tFee,\r\n            uint256 tLock\r\n        ) = _getValues(tAmount);\r\n        uint256 rLock = tLock.mul(currentRate);\r\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        if (inSwapAndLiquify) {\r\n            _tOwned[recipient] = _tOwned[recipient].add(tAmount);\r\n            _rOwned[recipient] = _rOwned[recipient].add(rAmount);\r\n            emit Transfer(sender, recipient, tAmount);\r\n        } else {\r\n            _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n            _rOwned[address(this)] = _rOwned[address(this)].add(rLock);\r\n            _reflectFee(rFee, tFee);\r\n            emit Transfer(sender, address(this), tLock);\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n        }\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _rTotal = _rTotal.sub(rFee);\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount)\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        address msgSender = _msgSender();\r\n\r\n        if (_isWhiteListed[msgSender] == true) {\r\n            (uint256 tTransferAmount, uint256 tFee, uint256 tLock) =\r\n                _getTValues(tAmount, 0, 0, _feeDecimals);\r\n            uint256 currentRate = _getRate();\r\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) =\r\n                _getRValues(tAmount, 0, 0, currentRate);\r\n            return (\r\n                rAmount,\r\n                rTransferAmount,\r\n                rFee,\r\n                tTransferAmount,\r\n                tFee,\r\n                tLock\r\n            );\r\n        } else {\r\n            (uint256 tTransferAmount, uint256 tFee, uint256 tLock) =\r\n                _getTValues(tAmount, _taxFee, _lockFee, _feeDecimals);\r\n            uint256 currentRate = _getRate();\r\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) =\r\n                _getRValues(tAmount, tFee, tLock, currentRate);\r\n            return (\r\n                rAmount,\r\n                rTransferAmount,\r\n                rFee,\r\n                tTransferAmount,\r\n                tFee,\r\n                tLock\r\n            );\r\n        }\r\n    }\r\n\r\n    function _getTValues(\r\n        uint256 tAmount,\r\n        uint256 taxFee,\r\n        uint256 lockFee,\r\n        uint256 feeDecimals\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 tFee = tAmount.mul(taxFee).div(10**(feeDecimals + 2));\r\n        uint256 tLockFee = tAmount.mul(lockFee).div(10**(feeDecimals + 2));\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLockFee);\r\n        return (tTransferAmount, tFee, tLockFee);\r\n    }\r\n\r\n    function _getRValues(\r\n        uint256 tAmount,\r\n        uint256 tFee,\r\n        uint256 tLock,\r\n        uint256 currentRate\r\n    )\r\n        private\r\n        pure\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rLock = tLock.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLock);\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getRate() public view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() public view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (\r\n                _rOwned[_excluded[i]] > rSupply ||\r\n                _tOwned[_excluded[i]] > tSupply\r\n            ) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function getCurrentPoolAddress() public view returns (address) {\r\n        return currentPoolAddress;\r\n    }\r\n\r\n    function getCurrentPairTokenAddress() public view returns (address) {\r\n        return currentPairTokenAddress;\r\n    }\r\n\r\n    function _setFeeDecimals(uint256 feeDecimals) external onlyOwner() {\r\n        require(\r\n            feeDecimals >= 0 && feeDecimals <= 2,\r\n            \"Gforce: fee decimals should be in 0 - 2\"\r\n        );\r\n        _feeDecimals = feeDecimals;\r\n        emit FeeDecimalsUpdated(feeDecimals);\r\n    }\r\n\r\n    function _setTaxFee(uint256 taxFee) external onlyOwner() {\r\n        require(\r\n            taxFee >= 0 && taxFee <= 5 * 10**_feeDecimals,\r\n            \"Gforce: taxFee should be in 0 - 5\"\r\n        );\r\n        _taxFee = taxFee;\r\n        emit TaxFeeUpdated(taxFee);\r\n    }\r\n\r\n    function _setLockFee(uint256 lockFee) external onlyOwner() {\r\n        require(\r\n            lockFee >= 0 && lockFee <= 5 * 10**_feeDecimals,\r\n            \"Gforce: lockFee should be in 0 - 5\"\r\n        );\r\n        _lockFee = lockFee;\r\n        emit LockFeeUpdated(lockFee);\r\n    }\r\n\r\n    function _setMaxTxAmount(uint256 maxTxAmount) external onlyOwner() {\r\n        require(\r\n            maxTxAmount >= 500000e9,\r\n            \"Gforce: maxTxAmount should be greater than 500000e9\"\r\n        );\r\n        _maxTxAmount = maxTxAmount;\r\n        emit MaxTxAmountUpdated(maxTxAmount);\r\n    }\r\n\r\n    function _setMinTokensBeforeSwap(uint256 minTokensBeforeSwap)\r\n        external\r\n        onlyOwner()\r\n    {\r\n        require(\r\n            minTokensBeforeSwap >= 50e9 && minTokensBeforeSwap <= 25000e9,\r\n            \"Gforce: minTokenBeforeSwap should be in 50e9 - 25000e9\"\r\n        );\r\n        require(\r\n            minTokensBeforeSwap > _autoSwapCallerFee,\r\n            \"Gforce: minTokenBeforeSwap should be greater than autoSwapCallerFee\"\r\n        );\r\n        _minTokensBeforeSwap = minTokensBeforeSwap;\r\n        emit MinTokensBeforeSwapUpdated(minTokensBeforeSwap);\r\n    }\r\n\r\n    function _setAutoSwapCallerFee(uint256 autoSwapCallerFee)\r\n        external\r\n        onlyOwner()\r\n    {\r\n        require(\r\n            autoSwapCallerFee >= 1e9,\r\n            \"Gforce: autoSwapCallerFee should be greater than 1e9\"\r\n        );\r\n        _autoSwapCallerFee = autoSwapCallerFee;\r\n        emit AutoSwapCallerFeeUpdated(autoSwapCallerFee);\r\n    }\r\n\r\n    function updateSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function _updatePoolAndPairToken(\r\n        address poolAddress,\r\n        address pairTokenAddress\r\n    ) public onlyOwner() {\r\n        require(poolAddress != address(0), \"Gforce: Pool address is zero.\");\r\n        require(\r\n            pairTokenAddress != address(0),\r\n            \"Gforce: Pair token address is zero.\"\r\n        );\r\n        require(\r\n            pairTokenAddress != address(this),\r\n            \"Gforce: Pair token address self address.\"\r\n        );\r\n        require(\r\n            pairTokenAddress != currentPairTokenAddress,\r\n            \"Gforce: Pair token address is same as current one.\"\r\n        );\r\n\r\n        currentPoolAddress = poolAddress;\r\n        currentPairTokenAddress = pairTokenAddress;\r\n\r\n        emit PoolAndPairTokenUpdated(poolAddress, pairTokenAddress);\r\n    }\r\n\r\n    function _updateStakingPool(address lpStakingPool, address jetsStakingPool)\r\n        public\r\n        onlyOwner()\r\n    {\r\n        require(lpStakingPool != address(0), \"Gforce: Pool address is zero.\");\r\n        require(\r\n            jetsStakingPool != address(0),\r\n            \"Gforce: Pair token address is zero.\"\r\n        );\r\n\r\n        _lpStakingPool = lpStakingPool;\r\n        _jetsStakingPool = jetsStakingPool;\r\n\r\n        emit StakingPoolUpdated(lpStakingPool, jetsStakingPool);\r\n    }\r\n\r\n    function _enableTrading() external onlyOwner() {\r\n        tradingEnabled = true;\r\n        TradingEnabled();\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IPancakeV2Router02\",\"name\":\"pancakeV2Router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"autoSwapCallerFee\",\"type\":\"uint256\"}],\"name\":\"AutoSwapCallerFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taxFeeDecimals\",\"type\":\"uint256\"}],\"name\":\"FeeDecimalsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockFee\",\"type\":\"uint256\"}],\"name\":\"LockFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairTokenAddress\",\"type\":\"address\"}],\"name\":\"PoolAndPairTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenBurnt\",\"type\":\"uint256\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpStakingPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"jetsStakingPool\",\"type\":\"address\"}],\"name\":\"StakingPoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairTokenReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"TaxFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getCurrentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_jetsStakingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lockFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_lpStakingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pancakeBNBPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_pancakeV2Router\",\"outputs\":[{\"internalType\":\"contract IPancakeV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"autoSwapCallerFee\",\"type\":\"uint256\"}],\"name\":\"_setAutoSwapCallerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feeDecimals\",\"type\":\"uint256\"}],\"name\":\"_setFeeDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockFee\",\"type\":\"uint256\"}],\"name\":\"_setLockFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"_setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"_setMinTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"_setTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tBurnTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tFeeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairTokenAddress\",\"type\":\"address\"}],\"name\":\"_updatePoolAndPairToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpStakingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jetsStakingPool\",\"type\":\"address\"}],\"name\":\"_updateStakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancer\",\"outputs\":[{\"internalType\":\"contract Balancer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPairTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"materialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swaper\",\"outputs\":[{\"internalType\":\"contract Swaper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"updateSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "GFORCE", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000005ff2b0db69458a0750badebc4f9e13add608c7f", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fd1dfc943e75c3c2a93a0b2951671d662679032db39727c71ef5131a417f5e27"}