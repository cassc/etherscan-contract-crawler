{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TokenPreSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract TokenPreSale is Initializable, ReentrancyGuard, Ownable {\\r\\n    uint256 public presaleId;\\r\\n    uint256 public constant BASE_MULTIPLIER = (10 ** 18);\\r\\n    uint256 public constant MONTH = (30 * 24 * 3600);\\r\\n    address public constant ADMIN = 0xba17695d0A4851947eFE2803e4C98d7188C4B47d;\\r\\n\\r\\n    struct Presale {\\r\\n        address saleToken;\\r\\n        uint256 startTime;\\r\\n        uint256 endTime;\\r\\n        uint256 price;\\r\\n        uint256 tokensToSell;\\r\\n        uint256 baseDecimals;\\r\\n        uint256 inSale;\\r\\n        uint256 vestingStartTime;\\r\\n        uint256 vestingCliff;\\r\\n        uint256 vestingPeriod;\\r\\n        uint256 enableBuyWithBnb;\\r\\n        uint256 enableBuyWithUsdt;\\r\\n    }\\r\\n\\r\\n    struct Vesting {\\r\\n        uint256 totalAmount;\\r\\n        uint256 claimedAmount;\\r\\n        uint256 claimStart;\\r\\n        uint256 claimEnd;\\r\\n    }\\r\\n\\r\\n    IERC20 public USDTInterface;\\r\\n    AggregatorV3Interface internal aggregatorInterface; // https://docs.chain.link/data-feeds/price-feeds/addresses/?network=bnb-chain&page=1/ => (BNB / USD)\\r\\n\\r\\n    mapping(uint256 => bool) public paused;\\r\\n    mapping(uint256 => Presale) public presale;\\r\\n    mapping(address => mapping(uint256 => Vesting)) public userVesting;\\r\\n\\r\\n    event PresaleCreated(\\r\\n        uint256 indexed _id,\\r\\n        uint256 _totalTokens,\\r\\n        uint256 _startTime,\\r\\n        uint256 _endTime,\\r\\n        uint256 enableBuyWithBnb,\\r\\n        uint256 enableBuyWithUsdt\\r\\n    );\\r\\n\\r\\n    event PresaleUpdated(\\r\\n        bytes32 indexed key,\\r\\n        uint256 prevValue,\\r\\n        uint256 newValue,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event TokensBought(\\r\\n        address indexed user,\\r\\n        uint256 indexed id,\\r\\n        address indexed purchaseToken,\\r\\n        uint256 tokensBought,\\r\\n        uint256 amountPaid,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event TokensClaimed(\\r\\n        address indexed user,\\r\\n        uint256 indexed id,\\r\\n        uint256 amount,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event PresaleTokenAddressUpdated(\\r\\n        address indexed prevValue,\\r\\n        address indexed newValue,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    event PresalePaused(uint256 indexed id, uint256 timestamp);\\r\\n    event PresaleUnpaused(uint256 indexed id, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract and sets key parameters\\r\\n     * @param _oracle Oracle contract to fetch BNB/USDT price\\r\\n     * @param _usdt USDT token contract address\\r\\n     */\\r\\n    constructor(address _oracle, address _usdt) {\\r\\n        require(_oracle != address(0), \\\"Zero aggregator address\\\");\\r\\n        require(_usdt != address(0), \\\"Zero USDT address\\\");\\r\\n        aggregatorInterface = AggregatorV3Interface(_oracle);\\r\\n        USDTInterface = IERC20(_usdt);\\r\\n\\r\\n        createPresale(\\r\\n            block.timestamp + 1,\\r\\n            block.timestamp + 30 days,\\r\\n            7 * (10 ** 16),\\r\\n            20_000_000,\\r\\n            (10 ** 18),\\r\\n            block.timestamp + 30 days,\\r\\n            1 days,\\r\\n            0,\\r\\n            1,\\r\\n            1\\r\\n        );\\r\\n\\r\\n        _transferOwnership(ADMIN);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates a new presale\\r\\n     * @param _startTime start time of the sale\\r\\n     * @param _endTime end time of the sale\\r\\n     * @param _price Per token price multiplied by (10**18)\\r\\n     * @param _tokensToSell No of tokens to sell without denomination. If 1 million tokens to be sold then - 1_000_000 has to be passed\\r\\n     * @param _baseDecimals No of decimals for the token. (10**18), for 18 decimal token\\r\\n     * @param _vestingStartTime Start time for the vesting - UNIX timestamp\\r\\n     * @param _vestingCliff Cliff period for vesting in seconds\\r\\n     * @param _vestingPeriod Total vesting period(after vesting cliff) in seconds\\r\\n     * @param _enableBuyWithBnb Enable/Disable buy of tokens with BNB\\r\\n     * @param _enableBuyWithUsdt Enable/Disable buy of tokens with USDT\\r\\n     */\\r\\n    function createPresale(\\r\\n        uint256 _startTime,\\r\\n        uint256 _endTime,\\r\\n        uint256 _price,\\r\\n        uint256 _tokensToSell,\\r\\n        uint256 _baseDecimals,\\r\\n        uint256 _vestingStartTime,\\r\\n        uint256 _vestingCliff,\\r\\n        uint256 _vestingPeriod,\\r\\n        uint256 _enableBuyWithBnb,\\r\\n        uint256 _enableBuyWithUsdt\\r\\n    ) public onlyOwner {\\r\\n        require(\\r\\n            _startTime > block.timestamp && _endTime > _startTime,\\r\\n            \\\"Invalid time\\\"\\r\\n        );\\r\\n        require(_price > 0, \\\"Zero price\\\");\\r\\n        require(_tokensToSell > 0, \\\"Zero tokens to sell\\\");\\r\\n        require(_baseDecimals > 0, \\\"Zero decimals for the token\\\");\\r\\n        require(\\r\\n            _vestingStartTime >= _endTime,\\r\\n            \\\"Vesting starts before Presale ends\\\"\\r\\n        );\\r\\n\\r\\n        presaleId++;\\r\\n\\r\\n        presale[presaleId] = Presale(\\r\\n            address(0),\\r\\n            _startTime,\\r\\n            _endTime,\\r\\n            _price,\\r\\n            _tokensToSell,\\r\\n            _baseDecimals,\\r\\n            _tokensToSell,\\r\\n            _vestingStartTime,\\r\\n            _vestingCliff,\\r\\n            _vestingPeriod,\\r\\n            _enableBuyWithBnb,\\r\\n            _enableBuyWithUsdt\\r\\n        );\\r\\n\\r\\n        emit PresaleCreated(\\r\\n            presaleId,\\r\\n            _tokensToSell,\\r\\n            _startTime,\\r\\n            _endTime,\\r\\n            _enableBuyWithBnb,\\r\\n            _enableBuyWithUsdt\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To update the sale times\\r\\n     * @param _id Presale id to update\\r\\n     * @param _startTime New start time\\r\\n     * @param _endTime New end time\\r\\n     */\\r\\n    function changeSaleTimes(\\r\\n        uint256 _id,\\r\\n        uint256 _startTime,\\r\\n        uint256 _endTime\\r\\n    ) external checkPresaleId(_id) onlyOwner {\\r\\n        require(_startTime > 0 || _endTime > 0, \\\"Invalid parameters\\\");\\r\\n        if (_startTime > 0) {\\r\\n            require(\\r\\n                block.timestamp < presale[_id].startTime,\\r\\n                \\\"Sale already started\\\"\\r\\n            );\\r\\n            require(block.timestamp < _startTime, \\\"Sale time in past\\\");\\r\\n            uint256 prevValue = presale[_id].startTime;\\r\\n            presale[_id].startTime = _startTime;\\r\\n            emit PresaleUpdated(\\r\\n                bytes32(\\\"START\\\"),\\r\\n                prevValue,\\r\\n                _startTime,\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (_endTime > 0) {\\r\\n            require(\\r\\n                block.timestamp < presale[_id].endTime,\\r\\n                \\\"Sale already ended\\\"\\r\\n            );\\r\\n            require(_endTime > presale[_id].startTime, \\\"Invalid endTime\\\");\\r\\n            uint256 prevValue = presale[_id].endTime;\\r\\n            presale[_id].endTime = _endTime;\\r\\n            emit PresaleUpdated(\\r\\n                bytes32(\\\"END\\\"),\\r\\n                prevValue,\\r\\n                _endTime,\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To update the vesting start time\\r\\n     * @param _id Presale id to update\\r\\n     * @param _vestingStartTime New vesting start time\\r\\n     */\\r\\n    function changeVestingStartTime(\\r\\n        uint256 _id,\\r\\n        uint256 _vestingStartTime\\r\\n    ) external checkPresaleId(_id) onlyOwner {\\r\\n        require(\\r\\n            _vestingStartTime >= presale[_id].endTime,\\r\\n            \\\"Vesting starts before Presale ends\\\"\\r\\n        );\\r\\n        uint256 prevValue = presale[_id].vestingStartTime;\\r\\n        presale[_id].vestingStartTime = _vestingStartTime;\\r\\n        emit PresaleUpdated(\\r\\n            bytes32(\\\"VESTING_START_TIME\\\"),\\r\\n            prevValue,\\r\\n            _vestingStartTime,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To update the sale token address\\r\\n     * @param _id Presale id to update\\r\\n     * @param _newAddress Sale token address\\r\\n     */\\r\\n    function changeSaleTokenAddress(\\r\\n        uint256 _id,\\r\\n        address _newAddress\\r\\n    ) external checkPresaleId(_id) onlyOwner {\\r\\n        require(_newAddress != address(0), \\\"Zero token address\\\");\\r\\n        address prevValue = presale[_id].saleToken;\\r\\n        presale[_id].saleToken = _newAddress;\\r\\n        emit PresaleTokenAddressUpdated(\\r\\n            prevValue,\\r\\n            _newAddress,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To update the price\\r\\n     * @param _id Presale id to update\\r\\n     * @param _newPrice New sale price of the token\\r\\n     */\\r\\n    function changePrice(\\r\\n        uint256 _id,\\r\\n        uint256 _newPrice\\r\\n    ) external checkPresaleId(_id) onlyOwner {\\r\\n        require(_newPrice > 0, \\\"Zero price\\\");\\r\\n        require(\\r\\n            presale[_id].startTime > block.timestamp,\\r\\n            \\\"Sale already started\\\"\\r\\n        );\\r\\n        uint256 prevValue = presale[_id].price;\\r\\n        presale[_id].price = _newPrice;\\r\\n        emit PresaleUpdated(\\r\\n            bytes32(\\\"PRICE\\\"),\\r\\n            prevValue,\\r\\n            _newPrice,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To update possibility to buy with BNB\\r\\n     * @param _id Presale id to update\\r\\n     * @param _enableToBuyWithBnb New value of enable to buy with BNB\\r\\n     */\\r\\n    function changeEnableBuyWithBnb(\\r\\n        uint256 _id,\\r\\n        uint256 _enableToBuyWithBnb\\r\\n    ) external checkPresaleId(_id) onlyOwner {\\r\\n        uint256 prevValue = presale[_id].enableBuyWithBnb;\\r\\n        presale[_id].enableBuyWithBnb = _enableToBuyWithBnb;\\r\\n        emit PresaleUpdated(\\r\\n            bytes32(\\\"ENABLE_BUY_WITH_BNB\\\"),\\r\\n            prevValue,\\r\\n            _enableToBuyWithBnb,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To update possibility to buy with Usdt\\r\\n     * @param _id Presale id to update\\r\\n     * @param _enableToBuyWithUsdt New value of enable to buy with Usdt\\r\\n     */\\r\\n    function changeEnableBuyWithUsdt(\\r\\n        uint256 _id,\\r\\n        uint256 _enableToBuyWithUsdt\\r\\n    ) external checkPresaleId(_id) onlyOwner {\\r\\n        uint256 prevValue = presale[_id].enableBuyWithUsdt;\\r\\n        presale[_id].enableBuyWithUsdt = _enableToBuyWithUsdt;\\r\\n        emit PresaleUpdated(\\r\\n            bytes32(\\\"ENABLE_BUY_WITH_USDT\\\"),\\r\\n            prevValue,\\r\\n            _enableToBuyWithUsdt,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To pause the presale\\r\\n     * @param _id Presale id to update\\r\\n     */\\r\\n    function pausePresale(uint256 _id) external checkPresaleId(_id) onlyOwner {\\r\\n        require(!paused[_id], \\\"Already paused\\\");\\r\\n        paused[_id] = true;\\r\\n        emit PresalePaused(_id, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To unpause the presale\\r\\n     * @param _id Presale id to update\\r\\n     */\\r\\n    function unPausePresale(\\r\\n        uint256 _id\\r\\n    ) external checkPresaleId(_id) onlyOwner {\\r\\n        require(paused[_id], \\\"Not paused\\\");\\r\\n        paused[_id] = false;\\r\\n        emit PresaleUnpaused(_id, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To get latest BNB price in 10**18 format\\r\\n     */\\r\\n    function getLatestPrice() public view returns (uint256) {\\r\\n        (, int256 price, , , ) = aggregatorInterface.latestRoundData();\\r\\n        price = (price * (10 ** 10));\\r\\n        return uint256(price);\\r\\n    }\\r\\n\\r\\n    modifier checkPresaleId(uint256 _id) {\\r\\n        require(_id > 0 && _id <= presaleId, \\\"Invalid presale id\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier checkSaleState(uint256 _id, uint256 amount) {\\r\\n        require(\\r\\n            block.timestamp >= presale[_id].startTime &&\\r\\n                block.timestamp <= presale[_id].endTime,\\r\\n            \\\"Invalid time for buying\\\"\\r\\n        );\\r\\n        require(\\r\\n            amount > 0 && amount <= presale[_id].inSale,\\r\\n            \\\"Invalid sale amount\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To buy into a presale using USDT\\r\\n     * @param _id Presale id\\r\\n     * @param amount No of tokens to buy\\r\\n     */\\r\\n    function buyWithUSDT(\\r\\n        uint256 _id,\\r\\n        uint256 amount\\r\\n    ) external checkPresaleId(_id) checkSaleState(_id, amount) returns (bool) {\\r\\n        require(!paused[_id], \\\"Presale paused\\\");\\r\\n        require(\\r\\n            presale[_id].enableBuyWithUsdt > 0,\\r\\n            \\\"Not allowed to buy with USDT\\\"\\r\\n        );\\r\\n        uint256 usdPrice = amount * presale[_id].price;\\r\\n        presale[_id].inSale -= amount;\\r\\n\\r\\n        Presale memory _presale = presale[_id];\\r\\n\\r\\n        if (userVesting[_msgSender()][_id].totalAmount > 0) {\\r\\n            userVesting[_msgSender()][_id].totalAmount += (amount *\\r\\n                _presale.baseDecimals);\\r\\n        } else {\\r\\n            userVesting[_msgSender()][_id] = Vesting(\\r\\n                (amount * _presale.baseDecimals),\\r\\n                0,\\r\\n                _presale.vestingStartTime + _presale.vestingCliff,\\r\\n                _presale.vestingStartTime +\\r\\n                    _presale.vestingCliff +\\r\\n                    _presale.vestingPeriod\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint256 ourAllowance = USDTInterface.allowance(\\r\\n            _msgSender(),\\r\\n            address(this)\\r\\n        );\\r\\n        require(usdPrice <= ourAllowance, \\\"Make sure to add enough allowance\\\");\\r\\n        (bool success, ) = address(USDTInterface).call(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"transferFrom(address,address,uint256)\\\",\\r\\n                _msgSender(),\\r\\n                owner(),\\r\\n                usdPrice\\r\\n            )\\r\\n        );\\r\\n        require(success, \\\"Token payment failed\\\");\\r\\n        emit TokensBought(\\r\\n            _msgSender(),\\r\\n            _id,\\r\\n            address(USDTInterface),\\r\\n            amount,\\r\\n            usdPrice,\\r\\n            block.timestamp\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To buy into a presale using BNB\\r\\n     * @param _id Presale id\\r\\n     * @param amount No of tokens to buy\\r\\n     */\\r\\n    function buyWithBnb(\\r\\n        uint256 _id,\\r\\n        uint256 amount\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        checkPresaleId(_id)\\r\\n        checkSaleState(_id, amount)\\r\\n        nonReentrant\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(!paused[_id], \\\"Presale paused\\\");\\r\\n        require(\\r\\n            presale[_id].enableBuyWithBnb > 0,\\r\\n            \\\"Not allowed to buy with BNB\\\"\\r\\n        );\\r\\n        uint256 usdPrice = amount * presale[_id].price;\\r\\n        uint256 bnbAmount = (usdPrice * BASE_MULTIPLIER) / getLatestPrice();\\r\\n        require(msg.value >= bnbAmount, \\\"Less payment\\\");\\r\\n        uint256 excess = msg.value - bnbAmount;\\r\\n        presale[_id].inSale -= amount;\\r\\n        Presale memory _presale = presale[_id];\\r\\n\\r\\n        if (userVesting[_msgSender()][_id].totalAmount > 0) {\\r\\n            userVesting[_msgSender()][_id].totalAmount += (amount *\\r\\n                _presale.baseDecimals);\\r\\n        } else {\\r\\n            userVesting[_msgSender()][_id] = Vesting(\\r\\n                (amount * _presale.baseDecimals),\\r\\n                0,\\r\\n                _presale.vestingStartTime + _presale.vestingCliff,\\r\\n                _presale.vestingStartTime +\\r\\n                    _presale.vestingCliff +\\r\\n                    _presale.vestingPeriod\\r\\n            );\\r\\n        }\\r\\n        sendValue(payable(owner()), bnbAmount);\\r\\n        if (excess > 0) sendValue(payable(_msgSender()), excess);\\r\\n        emit TokensBought(\\r\\n            _msgSender(),\\r\\n            _id,\\r\\n            address(0),\\r\\n            amount,\\r\\n            bnbAmount,\\r\\n            block.timestamp\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Helper funtion to get BNB price for given amount\\r\\n     * @param _id Presale id\\r\\n     * @param amount No of tokens to buy\\r\\n     */\\r\\n    function bnbBuyHelper(\\r\\n        uint256 _id,\\r\\n        uint256 amount\\r\\n    ) external view checkPresaleId(_id) returns (uint256 bnbAmount) {\\r\\n        uint256 usdPrice = amount * presale[_id].price;\\r\\n        bnbAmount = (usdPrice * BASE_MULTIPLIER) / getLatestPrice();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Helper funtion to get USDT price for given amount\\r\\n     * @param _id Presale id\\r\\n     * @param amount No of tokens to buy\\r\\n     */\\r\\n    function usdtBuyHelper(\\r\\n        uint256 _id,\\r\\n        uint256 amount\\r\\n    ) external view checkPresaleId(_id) returns (uint256 usdPrice) {\\r\\n        usdPrice = amount * presale[_id].price;\\r\\n    }\\r\\n\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Low balance\\\");\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"BNB Payment failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Helper funtion to get claimable tokens for a given presale.\\r\\n     * @param user User address\\r\\n     * @param _id Presale id\\r\\n     */\\r\\n    function claimableAmount(\\r\\n        address user,\\r\\n        uint256 _id\\r\\n    ) public view checkPresaleId(_id) returns (uint256) {\\r\\n        Vesting memory _user = userVesting[user][_id];\\r\\n        if (_user.totalAmount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 amount = _user.totalAmount - _user.claimedAmount;\\r\\n        require(amount > 0, \\\"Already claimed\\\");\\r\\n\\r\\n        if (block.timestamp < _user.claimStart) return 0;\\r\\n        if (block.timestamp >= _user.claimEnd) return amount;\\r\\n\\r\\n        uint256 noOfMonthsPassed = (block.timestamp - _user.claimStart) / MONTH;\\r\\n\\r\\n        uint256 perMonthClaim = (_user.totalAmount * BASE_MULTIPLIER * MONTH) /\\r\\n            (_user.claimEnd - _user.claimStart);\\r\\n\\r\\n        uint256 amountToClaim = ((noOfMonthsPassed * perMonthClaim) /\\r\\n            BASE_MULTIPLIER) - _user.claimedAmount;\\r\\n\\r\\n        return amountToClaim;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To claim tokens after vesting cliff from a presale\\r\\n     * @param user User address\\r\\n     * @param _id Presale id\\r\\n     */\\r\\n    function claim(address user, uint256 _id) public returns (bool) {\\r\\n        uint256 amount = claimableAmount(user, _id);\\r\\n        require(amount > 0, \\\"Zero claim amount\\\");\\r\\n        require(\\r\\n            presale[_id].saleToken != address(0),\\r\\n            \\\"Presale token address not set\\\"\\r\\n        );\\r\\n        require(\\r\\n            amount <= IERC20(presale[_id].saleToken).balanceOf(address(this)),\\r\\n            \\\"Not enough tokens in the contract\\\"\\r\\n        );\\r\\n        userVesting[user][_id].claimedAmount += amount;\\r\\n        bool status = IERC20(presale[_id].saleToken).transfer(user, amount);\\r\\n        require(status, \\\"Token transfer failed\\\");\\r\\n        emit TokensClaimed(user, _id, amount, block.timestamp);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To claim tokens after vesting cliff from a presale\\r\\n     * @param users Array of user addresses\\r\\n     * @param _id Presale id\\r\\n     */\\r\\n    function claimMultiple(\\r\\n        address[] calldata users,\\r\\n        uint256 _id\\r\\n    ) external returns (bool) {\\r\\n        require(users.length > 0, \\\"Zero users length\\\");\\r\\n        for (uint256 i; i < users.length; i++) {\\r\\n            require(claim(users[i], _id), \\\"Claim failed\\\");\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"enableBuyWithBnb\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"enableBuyWithUsdt\",\"type\":\"uint256\"}],\"name\":\"PresaleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresalePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleTokenAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTInterface\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bnbBuyHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bnbAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyWithBnb\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyWithUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_enableToBuyWithBnb\",\"type\":\"uint256\"}],\"name\":\"changeEnableBuyWithBnb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_enableToBuyWithUsdt\",\"type\":\"uint256\"}],\"name\":\"changeEnableBuyWithUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"changeSaleTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeSaleTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingStartTime\",\"type\":\"uint256\"}],\"name\":\"changeVestingStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimMultiple\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_enableBuyWithBnb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_enableBuyWithUsdt\",\"type\":\"uint256\"}],\"name\":\"createPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"pausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"presale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"saleToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enableBuyWithBnb\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enableBuyWithUsdt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unPausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdtBuyHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TokenPreSale", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000567f2323251f0aab15c8dfb1967e4e8a7d42aee00000000000000000000000055d398326f99059ff775485246999027b3197955", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}