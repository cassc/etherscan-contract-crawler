{"SourceCode": "pragma solidity ^0.5.16;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n  // Empty internal constructor, to prevent people from mistakenly deploying\r\n  // an instance of this contract, which should be used via inheritance.\r\n  constructor () internal { }\r\n\r\n  function _msgSender() internal view returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _authorizedNewOwner;\r\n    event OwnershipTransferAuthorization(address indexed authorizedAddress);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Returns the address of the current authorized new owner.\r\n     */\r\n    function authorizedNewOwner() public view returns (address) {\r\n        return _authorizedNewOwner;\r\n    }\r\n    /**\r\n     * @notice Authorizes the transfer of ownership from _owner to the provided address.\r\n     * NOTE: No transfer will occur unless authorizedAddress calls assumeOwnership( ).\r\n     * This authorization may be removed by another call to this function authorizing\r\n     * the null address.\r\n     *\r\n     * @param authorizedAddress The address authorized to become the new owner.\r\n     */\r\n    function authorizeOwnershipTransfer(address authorizedAddress) external onlyOwner {\r\n        _authorizedNewOwner = authorizedAddress;\r\n        emit OwnershipTransferAuthorization(_authorizedNewOwner);\r\n    }\r\n    /**\r\n     * @notice Transfers ownership of this contract to the _authorizedNewOwner.\r\n     */\r\n    function assumeOwnership() external {\r\n        require(_msgSender() == _authorizedNewOwner, \"Ownable: only the authorized new owner can accept ownership\");\r\n        emit OwnershipTransferred(_owner, _authorizedNewOwner);\r\n        _owner = _authorizedNewOwner;\r\n        _authorizedNewOwner = address(0);\r\n    }\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     *\r\n     * @param confirmAddress The address wants to give up ownership.\r\n     */\r\n    function renounceOwnership(address confirmAddress) public onlyOwner {\r\n        require(confirmAddress == _owner, \"Ownable: confirm address is wrong\");\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _authorizedNewOwner = address(0);\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ncontract ANN is Ownable {\r\n    /// @notice BEP-20 token name for this token\r\n    string public constant name = \"Annex\";\r\n\r\n    /// @notice BEP-20 token symbol for this token\r\n    string public constant symbol = \"ANN\";\r\n\r\n    /// @notice BEP-20 token decimals for this token\r\n    uint8 public constant decimals = 18;\r\n\r\n    /// @notice Total number of tokens in circulation\r\n    uint public constant totalSupply = 1000000000e18; // 1 billion ANN\r\n\r\n    /// @notice Reward eligible epochs\r\n    uint32 public constant eligibleEpochs = 30; // 30 epochs\r\n\r\n    /// @notice Allowance amounts on behalf of others\r\n    mapping (address => mapping (address => uint96)) internal allowances;\r\n\r\n    /// @notice Official record of token balances for each account\r\n    mapping (address => uint96) internal balances;\r\n\r\n    /// @notice A record of each accounts delegate\r\n    mapping (address => address) public delegates;\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint96 votes;\r\n    }\r\n\r\n    /// @notice A transferPoint for marking balance from given epoch\r\n    struct TransferPoint {\r\n        uint32 epoch;\r\n        uint96 balance;\r\n    }\r\n\r\n    /// @notice A epoch config for blocks or ROI per epoch\r\n    struct EpochConfig {\r\n        uint32 epoch;\r\n        uint32 blocks;\r\n        uint32 roi;\r\n    }\r\n\r\n    /// @notice A record of votes checkpoints for each account, by index\r\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\r\n\r\n    /// @notice A record of transfer checkpoints for each account\r\n    mapping (address => mapping (uint32 => TransferPoint)) public transferPoints;\r\n\r\n    /// @notice The number of checkpoints for each account\r\n    mapping (address => uint32) public numCheckpoints;\r\n\r\n    /// @notice The number of transferPoints for each account\r\n    mapping (address => uint32) public numTransferPoints;\r\n\r\n    /// @notice The claimed amount for each account\r\n    mapping (address => uint96) public claimedAmounts;\r\n\r\n    /// @notice Configs for epoch\r\n    EpochConfig[] public epochConfigs;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping (address => uint) public nonces;\r\n\r\n    /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n    /// @notice An event thats emitted when a transfer point balance changes\r\n    // event TransferPointChanged(address indexed src, uint srcBalance, address indexed dst, uint dstBalance);\r\n\r\n    /// @notice An event thats emitted when epoch block count changes\r\n    event EpochConfigChanged(uint32 indexed previousEpoch, uint32 previousBlocks, uint32 previousROI, uint32 indexed newEpoch, uint32 newBlocks, uint32 newROI);\r\n\r\n    /// @notice The standard BEP-20 transfer event\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    /// @notice The standard BEP-20 approval event\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    /**\r\n     * @notice Construct a new ANN token\r\n     * @param account The initial account to grant all the tokens\r\n     */\r\n    constructor(address account) public {\r\n        EpochConfig memory newEpochConfig = EpochConfig(\r\n            0,\r\n            24 * 60 * 60 / 3, // 1 day blocks in BSC\r\n            20 // 0.2% ROI increase per epoch\r\n        );\r\n        epochConfigs.push(newEpochConfig);\r\n        emit EpochConfigChanged(0, 0, 0, newEpochConfig.epoch, newEpochConfig.blocks, newEpochConfig.roi);\r\n        balances[account] = uint96(totalSupply);\r\n        _writeTransferPoint(address(0), account, 0, 0, uint96(totalSupply));\r\n        emit Transfer(address(0), account, totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\r\n     * @param account The address of the account holding the funds\r\n     * @param spender The address of the account spending the funds\r\n     * @return The number of tokens approved\r\n     */\r\n    function allowance(address account, address spender) external view returns (uint) {\r\n        return allowances[account][spender];\r\n    }\r\n\r\n    /**\r\n     * @notice Approve `spender` to transfer up to `amount` from `src`\r\n     * @dev This will overwrite the approval amount for `spender`\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\r\n     * @return Whether or not the approval succeeded\r\n     */\r\n    function approve(address spender, uint rawAmount) external returns (bool) {\r\n        uint96 amount;\r\n        if (rawAmount == uint(-1)) {\r\n            amount = uint96(-1);\r\n        } else {\r\n            amount = safe96(rawAmount, \"ANN::approve: amount exceeds 96 bits\");\r\n        }\r\n\r\n        allowances[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the number of tokens held by the `account`\r\n     * @param account The address of the account to get the balance of\r\n     * @return The number of tokens held\r\n     */\r\n    function balanceOf(address account) external view returns (uint) {\r\n        return balances[account];\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n     * @param dst The address of the destination account\r\n     * @param rawAmount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transfer(address dst, uint rawAmount) external  returns (bool) {\r\n        uint96 amount = safe96(rawAmount, \"ANN::transfer: amount exceeds 96 bits\");\r\n        _transferTokens(msg.sender, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `src` to `dst`\r\n     * @param src The address of the source account\r\n     * @param dst The address of the destination account\r\n     * @param rawAmount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transferFrom(address src, address dst, uint rawAmount) external  returns (bool) {\r\n        address spender = msg.sender;\r\n        uint96 spenderAllowance = allowances[src][spender];\r\n        uint96 amount = safe96(rawAmount, \"ANN::approve: amount exceeds 96 bits\");\r\n\r\n        if (spender != src && spenderAllowance != uint96(-1)) {\r\n            uint96 newAllowance = sub96(spenderAllowance, amount, \"ANN::transferFrom: transfer amount exceeds spender allowance\");\r\n            allowances[src][spender] = newAllowance;\r\n\r\n            emit Approval(src, spender, newAllowance);\r\n        }\r\n\r\n        _transferTokens(src, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     */\r\n    function delegate(address delegatee) public  {\r\n        return _delegate(msg.sender, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates votes from signatory to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     * @param nonce The contract state required to match the signature\r\n     * @param expiry The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public  {\r\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\r\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"ANN::delegateBySig: invalid signature\");\r\n        require(nonce == nonces[signatory]++, \"ANN::delegateBySig: invalid nonce\");\r\n        require(now <= expiry, \"ANN::delegateBySig: signature expired\");\r\n        return _delegate(signatory, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current votes balance for `account`\r\n     * @param account The address to get votes balance\r\n     * @return The number of current votes for `account`\r\n     */\r\n    function getCurrentVotes(address account) external view returns (uint96) {\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the prior number of votes for an account as of a block number\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check\r\n     * @param blockNumber The block number to get the vote balance at\r\n     * @return The number of votes the account had as of the given block\r\n     */\r\n    function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\r\n        require(blockNumber < block.number, \"ANN::getPriorVotes: not yet determined\");\r\n\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0].fromBlock > blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint32 lower = 0;\r\n        uint32 upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock < blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower].votes;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets block counter per epoch\r\n     * @param blocks The count of blocks per epoch\r\n     * @param roi The interet of rate increased per epoch\r\n     */\r\n    function setEpochConfig(uint32 blocks, uint32 roi) public onlyOwner {\r\n        require(blocks > 0, \"ANN::setEpochConfig: zero blocks\");\r\n        require(roi < 10000, \"ANN::setEpochConfig: roi exceeds max fraction\");\r\n        EpochConfig memory prevEC = epochConfigs[epochConfigs.length - 1];\r\n        EpochConfig memory newEC = EpochConfig(getEpochs(block.number), blocks, roi);\r\n        require(prevEC.blocks != newEC.blocks || prevEC.roi != newEC.roi, \"ANN::setEpochConfig: blocks and roi same as before\");\r\n        //if (prevEC.epoch == newEC.epoch && epochConfigs.length > 1) {\r\n        if (prevEC.epoch == newEC.epoch) {\r\n            epochConfigs[epochConfigs.length - 1] = newEC;\r\n        } else {\r\n            epochConfigs.push(newEC);\r\n        }\r\n        emit EpochConfigChanged(prevEC.epoch, prevEC.blocks, prevEC.roi, newEC.epoch, newEC.blocks, newEC.roi);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets block counter per epoch\r\n     * @return The count of blocks for current epoch\r\n     */\r\n    function getCurrentEpochBlocks() public view returns (uint32 blocks) {\r\n        blocks = epochConfigs[epochConfigs.length - 1].blocks;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets rate of interest for current epoch\r\n     * @return The rate of interest for current epoch\r\n     */\r\n    function getCurrentEpochROI() public view returns (uint32 roi) {\r\n        roi = epochConfigs[epochConfigs.length - 1].roi;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets current epoch config\r\n     * @return The EpochConfig for current epoch\r\n     */\r\n    function getCurrentEpochConfig() public view returns (uint32 epoch, uint32 blocks, uint32 roi) {\r\n        EpochConfig memory ec = epochConfigs[epochConfigs.length - 1];\r\n        epoch = ec.epoch;\r\n        blocks = ec.blocks;\r\n        roi = ec.roi;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets epoch config at given epoch index\r\n     * @param forEpoch epoch\r\n     * @return (index of config,\r\n                config at epoch)\r\n     */\r\n    function getEpochConfig(uint32 forEpoch) public view returns (uint32 index, uint32 epoch, uint32 blocks, uint32 roi) {\r\n        index = uint32(epochConfigs.length - 1);\r\n        // solhint-disable-next-line no-inline-assembly\r\n        for (; index > 0; index--) {\r\n            if (forEpoch >= epochConfigs[index].epoch) {\r\n                break;\r\n            }\r\n        }\r\n        EpochConfig memory ec = epochConfigs[index];\r\n        epoch = ec.epoch;\r\n        blocks = ec.blocks;\r\n        roi = ec.roi;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets epoch index at given block number\r\n     * @param blockNumber The number of blocks\r\n     * @return epoch index\r\n     */\r\n    function getEpochs(uint blockNumber) public view returns (uint32) {\r\n        uint96 blocks = 0;\r\n        uint96 epoch = 0;\r\n        uint blockNum = blockNumber;\r\n        for (uint32 i = 0; i < epochConfigs.length; i++) {\r\n            uint96 deltaBlocks = (uint96(epochConfigs[i].epoch) - epoch) * blocks;\r\n            if (blockNum < deltaBlocks) {\r\n                break;\r\n            }\r\n            blockNum = blockNum - deltaBlocks;\r\n            epoch = epochConfigs[i].epoch;\r\n            blocks = epochConfigs[i].blocks;\r\n        }\r\n\r\n        if (blocks == 0) {\r\n            blocks = getCurrentEpochBlocks();\r\n        }\r\n        epoch = epoch + uint96(blockNum / blocks);\r\n        if (epoch >= 2**32) {\r\n            epoch = 2**32 - 1;\r\n        }\r\n        return uint32(epoch);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current holding rewart amount for `account`\r\n     * @param account The address to get holding reward amount\r\n     * @return The number of current holding reward for `account`\r\n     */\r\n    function getHoldingReward(address account) public view returns (uint96) {\r\n        // Check if account is holding more than eligible delay\r\n        uint32 nTransferPoint = numTransferPoints[account];\r\n\r\n        if (nTransferPoint == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint32 lastEpoch = getEpochs(block.number);\r\n        if (lastEpoch == 0) {\r\n            return 0;\r\n        }\r\n\r\n        lastEpoch = lastEpoch - 1;\r\n        if (lastEpoch < eligibleEpochs) {\r\n            return 0;\r\n        } else {\r\n            uint32 lastEligibleEpoch = lastEpoch - eligibleEpochs;\r\n\r\n            // Next check implicit zero balance\r\n            if (transferPoints[account][0].epoch > lastEligibleEpoch) {\r\n                return 0;\r\n            }\r\n\r\n            // First check most recent balance\r\n            if (transferPoints[account][nTransferPoint - 1].epoch <= lastEligibleEpoch) {\r\n                nTransferPoint = nTransferPoint - 1;\r\n            } else {\r\n                uint32 upper = nTransferPoint - 1;\r\n                nTransferPoint = 0;\r\n                while (upper > nTransferPoint) {\r\n                    uint32 center = upper - (upper - nTransferPoint) / 2; // ceil, avoiding overflow\r\n                    TransferPoint memory tp = transferPoints[account][center];\r\n                    if (tp.epoch == lastEligibleEpoch) {\r\n                        nTransferPoint = center;\r\n                        break;\r\n                    } if (tp.epoch < lastEligibleEpoch) {\r\n                        nTransferPoint = center;\r\n                    } else {\r\n                        upper = center - 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Calculate total rewards amount\r\n        uint256 reward = 0;\r\n        for (uint32 iTP = 0; iTP <= nTransferPoint; iTP++) {\r\n            TransferPoint memory tp = transferPoints[account][iTP];\r\n            (uint32 iEC,,,uint32 roi) = getEpochConfig(tp.epoch);\r\n            uint32 startEpoch = tp.epoch;\r\n            for (; iEC < epochConfigs.length; iEC++) {\r\n                uint32 epoch = lastEpoch;\r\n                bool tookNextTP = false;\r\n                if (iEC < (epochConfigs.length - 1) && epoch > epochConfigs[iEC + 1].epoch) {\r\n                    epoch = epochConfigs[iEC + 1].epoch;\r\n                }\r\n                if (iTP < nTransferPoint && epoch > transferPoints[account][iTP + 1].epoch) {\r\n                    epoch = transferPoints[account][iTP + 1].epoch;\r\n                    tookNextTP = true;\r\n                }\r\n                reward = reward + (uint256(tp.balance) * roi * sub32(epoch, startEpoch, \"ANN::getHoldingReward: invalid epochs\"));\r\n                if (tookNextTP) {\r\n                    break;\r\n                }\r\n                startEpoch = epoch;\r\n                if (iEC < (epochConfigs.length - 1)) {\r\n                    roi = epochConfigs[iEC + 1].roi;\r\n                }\r\n            }\r\n        }\r\n        uint96 amount = safe96(reward / 10000, \"ANN::getHoldingReward: reward exceeds 96 bits\");\r\n\r\n        // Exclude already claimed amount\r\n        if (claimedAmounts[account] > 0) {\r\n            amount = sub96(amount, claimedAmounts[account], \"ANN::getHoldingReward: invalid claimed amount\");\r\n        }\r\n\r\n        return amount;\r\n    }\r\n\r\n    /**\r\n     * @notice Receive the current holding rewart amount to msg.sender\r\n     */\r\n    function claimReward() public  {\r\n        uint96 holdingReward = getHoldingReward(msg.sender);\r\n        if (balances[address(this)] < holdingReward) {\r\n            holdingReward = balances[address(this)];\r\n        }\r\n        claimedAmounts[msg.sender] = add96(claimedAmounts[msg.sender], holdingReward, \"ANN::claimReward: invalid claimed amount\");\r\n        _transferTokens(address(this), msg.sender, holdingReward);\r\n    }\r\n\r\n    function _delegate(address delegator, address delegatee) internal {\r\n        address currentDelegate = delegates[delegator];\r\n        uint96 delegatorBalance = balances[delegator];\r\n        delegates[delegator] = delegatee;\r\n\r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n    }\r\n\r\n    function _transferTokens(address src, address dst, uint96 amount) internal {\r\n        require(src != address(0), \"ANN::_transferTokens: cannot transfer from the zero address\");\r\n        require(dst != address(0), \"ANN::_transferTokens: cannot transfer to the zero address\");\r\n\r\n        balances[src] = sub96(balances[src], amount, \"ANN::_transferTokens: transfer amount exceeds balance\");\r\n        balances[dst] = add96(balances[dst], amount, \"ANN::_transferTokens: transfer amount overflows\");\r\n        emit Transfer(src, dst, amount);\r\n\r\n        _moveDelegates(delegates[src], delegates[dst], amount);\r\n        if (amount > 0) {\r\n            _writeTransferPoint(src, dst, numTransferPoints[dst], balances[src], balances[dst]);\r\n        }\r\n    }\r\n\r\n    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\r\n        if (srcRep != dstRep && amount > 0) {\r\n            if (srcRep != address(0)) {\r\n                uint32 srcRepNum = numCheckpoints[srcRep];\r\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\r\n                uint96 srcRepNew = sub96(srcRepOld, amount, \"ANN::_moveVotes: vote amount underflows\");\r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                uint32 dstRepNum = numCheckpoints[dstRep];\r\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n                uint96 dstRepNew = add96(dstRepOld, amount, \"ANN::_moveVotes: vote amount overflows\");\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\r\n      uint32 blockNumber = safe32(block.number, \"ANN::_writeCheckpoint: block number exceeds 32 bits\");\r\n\r\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n      } else {\r\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n          numCheckpoints[delegatee] = nCheckpoints + 1;\r\n      }\r\n\r\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n\r\n    function _writeTransferPoint(address src, address dst, uint32 nDstPoint, uint96 srcBalance, uint96 dstBalance) internal {\r\n        uint32 epoch = getEpochs(block.number);\r\n\r\n        if (src != address(this)) {\r\n            // Revoke sender in reward eligible list\r\n            for (uint32 i = 0; i < numTransferPoints[src]; i++) {\r\n                delete transferPoints[src][i];\r\n            }\r\n\r\n            // Remove claim amount\r\n            claimedAmounts[src] = 0;\r\n\r\n            // delete transferPoints[src];\r\n            if (srcBalance > 0) {\r\n                transferPoints[src][0] = TransferPoint(epoch, srcBalance);\r\n                numTransferPoints[src] = 1;\r\n            } else {\r\n                numTransferPoints[src] = 0;\r\n            }\r\n        }\r\n\r\n        if (dst != address(this)) {\r\n            // Add recipient in reward eligible list\r\n            if (nDstPoint > 0 && transferPoints[dst][nDstPoint - 1].epoch >= epoch) {\r\n                transferPoints[dst][nDstPoint - 1].balance = dstBalance;\r\n            } else {\r\n                transferPoints[dst][nDstPoint] = TransferPoint(epoch, dstBalance);\r\n                numTransferPoints[dst] = nDstPoint + 1;\r\n            }\r\n        }\r\n\r\n        // emit TransferPointChanged(src, balances[src], dst, balances[dst]);\r\n    }\r\n\r\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function add32(uint32 a, uint32 b, string memory errorMessage) internal pure returns (uint32) {\r\n        uint32 c = a + b;\r\n        require(c >= a, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function sub32(uint32 a, uint32 b, string memory errorMessage) internal pure returns (uint32) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\r\n        require(n < 2**96, errorMessage);\r\n        return uint96(n);\r\n    }\r\n\r\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\r\n        uint96 c = a + b;\r\n        require(c >= a, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function getChainId() internal pure returns (uint) {\r\n        uint256 chainId;\r\n        assembly { chainId := chainid() }\r\n        return chainId;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"previousEpoch\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousBlocks\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"previousROI\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"newEpoch\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newBlocks\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newROI\",\"type\":\"uint32\"}],\"name\":\"EpochConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizedAddress\",\"type\":\"address\"}],\"name\":\"OwnershipTransferAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"assumeOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizedAddress\",\"type\":\"address\"}],\"name\":\"authorizeOwnershipTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"authorizedNewOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAmounts\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eligibleEpochs\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochConfigs\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocks\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roi\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentEpochBlocks\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blocks\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentEpochConfig\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocks\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roi\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentEpochROI\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"roi\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"forEpoch\",\"type\":\"uint32\"}],\"name\":\"getEpochConfig\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"blocks\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roi\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getEpochs\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getHoldingReward\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numTransferPoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"confirmAddress\",\"type\":\"address\"}],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"blocks\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"roi\",\"type\":\"uint32\"}],\"name\":\"setEpochConfig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"transferPoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"epoch\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ANN", "CompilerVersion": "v0.5.17+commit.d19bba13", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000050086caf6a8b4aef941d6512ad0d2a25c48469a9", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://f55f780f135f1a36b2f480645c9a6f98e371dc415fde2a3484f180c0caff1d4e"}